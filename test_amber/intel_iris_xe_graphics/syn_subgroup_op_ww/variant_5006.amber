#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                barrier();
               barrier();
              }
            }
           else
            {
            }
           for(int _injected_loop_counter = (0 | (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 + (_GLF_IDENTITY(int(8), (false ? _GLF_FUZZED(int(2189.2417)) : int(8)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) >> 0)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-17.07)), float(_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0)))), bool(true)))))));
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(3012.5912)), bool(false))))) > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true), (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true)) || false))))))))))));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u), subgroup_id))) << (0u | 0u)) * subgroup_size, clamp(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, min(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), clamp((workgroup_base + subgroup_id * subgroup_size), (workgroup_base + subgroup_id * subgroup_size), (workgroup_base + subgroup_id * subgroup_size))) / 1u), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, ~ (~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) >> 0u)))))), workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))) | (workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u), uint(uvec4(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u)) * 1u)))), clamp(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u), subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u), subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u))), 1u, 0u, 0u))))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)) ? subgroup_id * subgroup_size : _GLF_FUZZED(47320u)), uint(uvec4((_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)) ? subgroup_id * subgroup_size : _GLF_FUZZED(47320u)), 0u, 0u, 0u)))), min(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))))) / ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_id * subgroup_size : _GLF_FUZZED(47320u))), max(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(subgroup_id, (subgroup_id) | uint(_GLF_ZERO(0.0, injectionSwitch.x))) * subgroup_size : _GLF_FUZZED(47320u))), workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_id * subgroup_size : _GLF_FUZZED(47320u)), clamp((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_id * subgroup_size : _GLF_FUZZED(47320u)), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_id * subgroup_size : _GLF_FUZZED(47320u)), ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_id * subgroup_size : _GLF_FUZZED(47320u))) + 0u), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_id * subgroup_size : _GLF_FUZZED(47320u)), ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_id * subgroup_size : _GLF_FUZZED(47320u))) + 0u)))))), workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(310.547)), bool(false))))) ? subgroup_id * subgroup_size : _GLF_FUZZED(47320u))))) + ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(clamp(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec3(workgroup_base, 1u, 1u)), (uint(uvec3(workgroup_base, 1u, 1u))) | 0u)), _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, 0u + (workgroup_base))) << 0u), workgroup_base)))), _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u), (_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u)) / ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), uint(uint(uint(2u))))))), workgroup_base))), (clamp(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec3(workgroup_base, 1u, 1u)), (_GLF_IDENTITY(uint(uvec3(workgroup_base, _GLF_IDENTITY(1u, ~ (~ (1u))), 1u)), (uint(uvec3(workgroup_base, 1u, 1u))) ^ 0u)) | 0u)), _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u), workgroup_base)))) << 0u)) + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size))), (workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)) << 0u), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u))) * subgroup_size, (subgroup_id * _GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))) / 1u) + (_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_ONE(1.0, injectionSwitch.y)) * (1)))), clamp(((subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_ONE(1.0, injectionSwitch.y)) * (1)))), _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_ONE(1.0, injectionSwitch.y)) * (1)))), clamp(((subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_ONE(1.0, injectionSwitch.y)) * (1)))), ((subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_ONE(1.0, injectionSwitch.y)) * (1)))), ((subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_ONE(1.0, injectionSwitch.y)) * (1)))))), _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_ONE(1.0, injectionSwitch.y)) * (1)))), 0u + (((subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_ONE(1.0, injectionSwitch.y)) * (1)))))))) / 1u)) | _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, (1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4)))))) | 0u, (_GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4)))), 0 + (_GLF_IDENTITY(1, (1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4)))))))) | 0u, (true ? ((subgroup_local_id + _GLF_IDENTITY(1, (1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4)))))) | 0u : _GLF_FUZZED(subgroup_id)))) | (((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4)))), max(subgroup_local_id + _GLF_IDENTITY(1, (1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4)))), subgroup_local_id + _GLF_IDENTITY(1, (1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4)))))))) | 0u)), clamp(((subgroup_local_id + 1)) | 0u, ((subgroup_local_id + 1)) | 0u, _GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) - 0u) | 0u)))), clamp((_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4)))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4))))), min(~ (_GLF_IDENTITY(1, (1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4))))), ~ (_GLF_IDENTITY(1, (1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4))))))))))))) | 0u, clamp((_GLF_IDENTITY((subgroup_local_id + 1), (true ? (subgroup_local_id + 1) : _GLF_FUZZED(packSnorm2x16(mod(vec2(-848.690, 2.5), 2.0)))))) | 0u, ((subgroup_local_id + 1)) | 0u, ((subgroup_local_id + 1)) | 0u)))), (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, (1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4)))))) | 0u, clamp(_GLF_IDENTITY(((subgroup_local_id + 1)), uint(_GLF_IDENTITY(uvec2(((subgroup_local_id + 1)), uint(_GLF_ONE(1.0, injectionSwitch.y))), (uvec2(((subgroup_local_id + 1)), uint(_GLF_ONE(1.0, injectionSwitch.y)))) / uvec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))) | 0u, ((subgroup_local_id + 1)) | 0u, ((subgroup_local_id + 1)) | 0u)))), (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, (1) << (int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4)))))) | 0u, clamp(((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) << 0u))) | 0u, ((subgroup_local_id + _GLF_IDENTITY(1, (0 << _GLF_IDENTITY(int(4), int(4))) ^ (1)))) | 0u, ((subgroup_local_id + 1)) | _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(virtual_gid)))))))))) % subgroup_size), (workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 1u, 0u)))) | (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ (0u | 0u)), subgroup_local_id))))))) + 1) % subgroup_size)) << 0u), max(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(((subgroup_local_id + 1)) / 1u, _GLF_IDENTITY((((subgroup_local_id + 1)) / 1u), (true ? (((subgroup_local_id + 1)) / 1u) : _GLF_FUZZED(subgroup_size))) | (_GLF_IDENTITY(((subgroup_local_id + 1)) / 1u, 1u * (((subgroup_local_id + 1)) / 1u)))))) | (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)), ((subgroup_local_id + 1)) | 0u))) % subgroup_size), 1u * (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(((subgroup_local_id + 1)) / 1u, _GLF_IDENTITY((((subgroup_local_id + 1)) / 1u), (true ? (((subgroup_local_id + 1)) / 1u) : _GLF_FUZZED(subgroup_size))) | (_GLF_IDENTITY(((subgroup_local_id + 1)) / 1u, 1u * (((subgroup_local_id + 1)) / 1u)))))) | (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)), ((subgroup_local_id + 1)) | 0u))) % subgroup_size), ((_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(((subgroup_local_id + 1)) / 1u, _GLF_IDENTITY((((subgroup_local_id + 1)) / 1u), (true ? (((subgroup_local_id + 1)) / 1u) : _GLF_FUZZED(subgroup_size))) | (_GLF_IDENTITY(((subgroup_local_id + 1)) / 1u, 1u * (((subgroup_local_id + 1)) / 1u)))))) | (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)), ((subgroup_local_id + 1)) | 0u))) % subgroup_size)) | ((_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(((subgroup_local_id + 1)) / 1u, _GLF_IDENTITY((((subgroup_local_id + 1)) / 1u), (true ? (((subgroup_local_id + 1)) / 1u) : _GLF_FUZZED(subgroup_size))) | (_GLF_IDENTITY(((subgroup_local_id + 1)) / 1u, 1u * (((subgroup_local_id + 1)) / 1u)))))) | (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)), ((subgroup_local_id + 1)) | 0u))) % subgroup_size))))), (workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))) * 1u)) % subgroup_size)) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) / ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) / ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), 0u | (uint(5u)))))), uint(0u)))) + (_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (1))), (_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1)))) / 1u)) | (_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), ((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))) | ((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))))) | 0u))) % subgroup_size), (workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u) * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, min((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size))) | 0u))) << 0u))), 1u, 1u, 0u)))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(clamp(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec3(workgroup_base, 1u, 1u)), (uint(uvec3(workgroup_base, 1u, 1u))) | 0u)), _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u), workgroup_base))), (clamp(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec3(workgroup_base, 1u, 1u)), (uint(uvec3(workgroup_base, 1u, 1u))) | 0u)), _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u), workgroup_base)))) << 0u)) + _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u) * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), (workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)) << 0u), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) / 1u), ~ (~ (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) / 1u)))) + (_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / 1u), ~ (~ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / 1u))))) << 0u)) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), (subgroup_local_id + 1))), (true ? _GLF_IDENTITY((subgroup_local_id + 1), min((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(atomicMax(workgroup_id, subgroup_local_id)) : subgroup_local_id)))) + 1), (subgroup_local_id + 1))) : _GLF_FUZZED(subgroup_size))), _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4)))))) | 0u, clamp(((subgroup_local_id + 1)) | 0u, _GLF_IDENTITY(((subgroup_local_id + 1)), (_GLF_IDENTITY(((subgroup_local_id + 1)), min(((subgroup_local_id + 1)), ((subgroup_local_id + 1))))) - 0u) | 0u, _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(42684))))) | 0u, max(((subgroup_local_id + 1)) | 0u, _GLF_IDENTITY(((subgroup_local_id + 1)), clamp(((subgroup_local_id + 1)), ((subgroup_local_id + 1)), _GLF_IDENTITY(((subgroup_local_id + 1)), (_GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) | (((subgroup_local_id + 1))))) | 0u))) | 0u)))))), clamp((_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, (1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4)))))) | 0u, clamp(((subgroup_local_id + 1)) | 0u, ((subgroup_local_id + 1)) | 0u, ((subgroup_local_id + 1)) | 0u)))), (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(virtual_gid))), subgroup_local_id)), subgroup_local_id)) + _GLF_IDENTITY(1, _GLF_IDENTITY((1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4))), min(_GLF_IDENTITY((1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) / ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) >> 0))) >> _GLF_IDENTITY(int(3), int(3)))))), ((1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4)))) | ((1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) * 1)))), (1) << (int(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4)))))))) | 0u, clamp(((subgroup_local_id + 1)) | _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | 0u))), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec4(1, 1, 0, 0)))) / 1)) * 1)), ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec4(1, 1, 0, 0)))) / 1)) * 1))) ^ 0u)) | 0u, ((subgroup_local_id + 1)) | 0u)))), (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, (1) << (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 1 * (int(_GLF_ZERO(0.0, injectionSwitch.x)))) >> _GLF_IDENTITY(int(4), int(4)))))) | 0u, uint(uint(((subgroup_local_id + _GLF_IDENTITY(1, (1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4)))))) | 0u))), clamp(((subgroup_local_id + 1)) | 0u, ((subgroup_local_id + 1)) | 0u, ((subgroup_local_id + 1)) | 0u))))))) % subgroup_size), (workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 1u, 0u)))) | (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), (subgroup_local_id) ^ (0u | 0u)), subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), (subgroup_local_id) ^ (0u | 0u)), subgroup_local_id))) - 0u)))))) + _GLF_IDENTITY(1, (1) / int(_GLF_ONE(1.0, injectionSwitch.y)))) % subgroup_size)) << 0u), max(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1)), uint(uvec4(((subgroup_local_id + 1)), 0u, 1u, 0u))) / 1u, (((subgroup_local_id + 1)) / 1u) | (_GLF_IDENTITY(((subgroup_local_id + 1)) / 1u, 1u * (((subgroup_local_id + 1)) / 1u)))))) | (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) >> 0)) << 0)), ((subgroup_local_id + 1)) | 0u))) % subgroup_size), (workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + _GLF_IDENTITY(1, (0 | 0) | (1))) % subgroup_size)) << 0u), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (1))), (_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1)))) / 1u)) | (_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), ((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))) | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, (_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(1, int(int(1))) : _GLF_FUZZED(-64482))), clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(uvec4(subgroup_local_id + 1, 0u, 1u, 1u), min(uvec4(subgroup_local_id + 1, 0u, 1u, 1u), uvec4(subgroup_local_id + 1, 0u, 1u, 1u)))))))), min((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, (_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(1, int(int(1))) : _GLF_FUZZED(-64482))), clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(uvec4(subgroup_local_id + 1, 0u, 1u, 1u), min(uvec4(subgroup_local_id + 1, 0u, 1u, 1u), uvec4(subgroup_local_id + 1, 0u, 1u, 1u)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, (_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(1, int(int(1))) : _GLF_FUZZED(-64482))), clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(uvec4(subgroup_local_id + 1, 0u, 1u, 1u), min(uvec4(subgroup_local_id + 1, 0u, 1u, 1u), uvec4(subgroup_local_id + 1, 0u, 1u, 1u))))))))))))) | 0u))) % subgroup_size, min(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (1))), (_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1)))) / 1u)) | (_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), ((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))) | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, (_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(1, int(int(1))) : _GLF_FUZZED(-64482))), clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(uvec4(subgroup_local_id + 1, 0u, 1u, 1u), min(uvec4(subgroup_local_id + 1, 0u, 1u, 1u), uvec4(subgroup_local_id + 1, 0u, 1u, 1u)))))))), min((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, (_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(1, int(int(1))) : _GLF_FUZZED(-64482))), clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(uvec4(subgroup_local_id + 1, 0u, 1u, 1u), min(uvec4(subgroup_local_id + 1, 0u, 1u, 1u), uvec4(subgroup_local_id + 1, 0u, 1u, 1u)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, (_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(1, int(int(1))) : _GLF_FUZZED(-64482))), clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(uvec4(subgroup_local_id + 1, 0u, 1u, 1u), min(uvec4(subgroup_local_id + 1, 0u, 1u, 1u), uvec4(subgroup_local_id + 1, 0u, 1u, 1u))))))))))))) | 0u))) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (1))), (_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1)))) / 1u)) | (_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), ((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))) | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, (_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(1, int(int(1))) : _GLF_FUZZED(-64482))), clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(uvec4(subgroup_local_id + 1, 0u, 1u, 1u), min(uvec4(subgroup_local_id + 1, 0u, 1u, 1u), uvec4(subgroup_local_id + 1, 0u, 1u, 1u)))))))), min((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, (_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(1, int(int(1))) : _GLF_FUZZED(-64482))), clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(uvec4(subgroup_local_id + 1, 0u, 1u, 1u), min(uvec4(subgroup_local_id + 1, 0u, 1u, 1u), uvec4(subgroup_local_id + 1, 0u, 1u, 1u)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, (_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(1, int(int(1))) : _GLF_FUZZED(-64482))), clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(uvec4(subgroup_local_id + 1, 0u, 1u, 1u), min(uvec4(subgroup_local_id + 1, 0u, 1u, 1u), uvec4(subgroup_local_id + 1, 0u, 1u, 1u))))))))))))) | 0u))) % subgroup_size) | 0u), _GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (1))), (_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1)))) / 1u)) | (_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), ((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))) | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, (_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(1, int(int(1))) : _GLF_FUZZED(-64482))), clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(uvec4(subgroup_local_id + 1, 0u, 1u, 1u), min(uvec4(subgroup_local_id + 1, 0u, 1u, 1u), uvec4(subgroup_local_id + 1, 0u, 1u, 1u)))))))), min((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, (_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(1, int(int(1))) : _GLF_FUZZED(-64482))), clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(uvec4(subgroup_local_id + 1, 0u, 1u, 1u), min(uvec4(subgroup_local_id + 1, 0u, 1u, 1u), uvec4(subgroup_local_id + 1, 0u, 1u, 1u)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, (_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(1, int(int(1))) : _GLF_FUZZED(-64482))), clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(uvec4(subgroup_local_id + 1, 0u, 1u, 1u), min(uvec4(subgroup_local_id + 1, 0u, 1u, 1u), uvec4(subgroup_local_id + 1, 0u, 1u, 1u))))))))))))) | 0u))) % subgroup_size))), (workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u) * subgroup_size + (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, min((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size)), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, min((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size))) | 0u))) << 0u))), 1u, 1u, 0u)))), uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(clamp(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec3(workgroup_base, _GLF_IDENTITY(1u, (1u) | 0u), 1u)), _GLF_IDENTITY((uint(_GLF_IDENTITY(uvec3(workgroup_base, _GLF_IDENTITY(1u, (1u) << (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(2u), uint(2u)))), 1u), clamp(_GLF_IDENTITY(uvec3(workgroup_base, _GLF_IDENTITY(1u, (1u) << (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(2u), uint(2u)))), 1u), (uvec3(workgroup_base, _GLF_IDENTITY(1u, (1u) << (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(2u), uint(2u)))), 1u)) | (uvec3(workgroup_base, _GLF_IDENTITY(1u, (1u) << (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(2u), uint(2u)))), 1u))), uvec3(workgroup_base, _GLF_IDENTITY(1u, (1u) << (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(2u), uint(2u)))), 1u), uvec3(workgroup_base, _GLF_IDENTITY(1u, (1u) << (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(2u), uint(2u)))), 1u))))) | 0u, min((uint(_GLF_IDENTITY(uvec3(workgroup_base, _GLF_IDENTITY(1u, (1u) << (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(2u), uint(2u)))), 1u), clamp(_GLF_IDENTITY(uvec3(workgroup_base, _GLF_IDENTITY(1u, (1u) << (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(2u), uint(2u)))), 1u), (uvec3(workgroup_base, _GLF_IDENTITY(1u, (1u) << (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(2u), uint(2u)))), 1u)) | (uvec3(workgroup_base, _GLF_IDENTITY(1u, (1u) << (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(2u), uint(2u)))), 1u))), uvec3(workgroup_base, _GLF_IDENTITY(1u, (1u) << (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(2u), uint(2u)))), 1u), uvec3(workgroup_base, _GLF_IDENTITY(1u, (1u) << (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(2u), uint(2u)))), 1u))))) | 0u, (uint(_GLF_IDENTITY(uvec3(workgroup_base, _GLF_IDENTITY(1u, (1u) << (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(2u), uint(2u)))), 1u), clamp(_GLF_IDENTITY(uvec3(workgroup_base, _GLF_IDENTITY(1u, (1u) << (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(2u), uint(2u)))), 1u), (uvec3(workgroup_base, _GLF_IDENTITY(1u, (1u) << (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(2u), uint(2u)))), 1u)) | (uvec3(workgroup_base, _GLF_IDENTITY(1u, (1u) << (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(2u), uint(2u)))), 1u))), uvec3(workgroup_base, _GLF_IDENTITY(1u, (1u) << (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(2u), uint(2u)))), 1u), uvec3(workgroup_base, _GLF_IDENTITY(1u, (1u) << (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(2u), uint(2u)))), 1u))))) | 0u)))), _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(clamp(workgroup_base, workgroup_base, workgroup_base), (true ? clamp(workgroup_base, workgroup_base, workgroup_base) : _GLF_FUZZED(subgroup_local_id)))), _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u), workgroup_base))), (clamp(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec3(workgroup_base, 1u, 1u)), (uint(uvec3(workgroup_base, 1u, 1u))) | 0u)), _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u), workgroup_base)), _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u), workgroup_base)))) << 0u)) + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), (workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)) << 0u), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) / 1u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) / 1u)), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) / 1u))))))) >> 0u) + (_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / 1u)) | _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, (1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4)))))) | 0u, clamp(((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u ^ (subgroup_local_id), _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)) * (0u ^ (subgroup_local_id)))) + _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(1, 1)), 1, 1)))) | 0u, ((subgroup_local_id + 1)) | 0u, ((subgroup_local_id + 1)) | 0u)))), clamp((_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, (1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), 1 * (int(4))), int(4)), 0 + (_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) * 1)), max(int(4), int(4)))))))))))) | 0u, clamp(((subgroup_local_id + 1)) | 0u, ((subgroup_local_id + 1)) | _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), ((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec4(subgroup_local_id, (1u ^ 0u), 0u, 0u), max(uvec4(subgroup_local_id, (1u ^ 0u), 0u, 0u), uvec4(subgroup_local_id, (1u ^ 0u), 0u, 0u))))) + 1)) | 0u)))), (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4)))), ~ (~ (subgroup_local_id + _GLF_IDENTITY(1, (1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4))))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, 0u), uvec4(0u, 0u, 0u, 0u) | (uvec4(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4)))), ~ (~ (subgroup_local_id + _GLF_IDENTITY(1, (1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4))))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, 0u)))), max(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4)))), ~ (~ (subgroup_local_id + _GLF_IDENTITY(1, (1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4))))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, 0u), uvec4(0u, 0u, 0u, 0u) | (uvec4(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4)))), ~ (~ (subgroup_local_id + _GLF_IDENTITY(1, (1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4))))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, 0u)))), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4)))), ~ (~ (subgroup_local_id + _GLF_IDENTITY(1, (1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4))))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, 0u), uvec4(0u, 0u, 0u, 0u) | (uvec4(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4)))), ~ (~ (subgroup_local_id + _GLF_IDENTITY(1, (1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4))))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, 0u))))))))) | 0u, clamp(((subgroup_local_id + 1)) | 0u, ((subgroup_local_id + 1)) | 0u, ((subgroup_local_id + 1)) | 0u)))), (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, (1) << (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4)))))) | 0u, clamp(((subgroup_local_id + 1)) | 0u, _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (subgroup_local_id + 1)))) | 0u, uint(uvec3(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (subgroup_local_id + 1)))) | 0u, ~ (~ (((_GLF_IDENTITY(subgroup_local_id + 1, 0u ^ (subgroup_local_id + 1)))) | 0u))), 0u, 0u))), ((subgroup_local_id + 1)) | 0u))))))) % subgroup_size), (workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 1u, 0u)))) | (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ (0u | 0u)), subgroup_local_id))))))) + 1) % subgroup_size, (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 1u, 0u)))) | (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ (0u | 0u)), subgroup_local_id))))))) + 1) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 1u, 0u)))) | (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) / 1u), min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ (0u | 0u)), subgroup_local_id))))))) + 1) % subgroup_size) >> 0u)) ^ 0u))) << 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)) / 1u, (((subgroup_local_id + 1)) / 1u) | (_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u)) | 0u)), min(uint(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u)) | 0u)), uint(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u)) | 0u)))))) + 1)) / 1u, 1u * (((subgroup_local_id + 1)) / 1u)))))) | (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)), ((subgroup_local_id + 1)) | 0u))) % subgroup_size), (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) ^ 0u) + ((subgroup_local_id + 1) % subgroup_size)) << 0u), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)) / 1u, (((subgroup_local_id + 1)) / 1u) | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), max(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u), (subgroup_local_id + 1)))), min((_GLF_IDENTITY((subgroup_local_id + 1), max(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u), (subgroup_local_id + 1)))), (_GLF_IDENTITY((subgroup_local_id + 1), max(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u), (subgroup_local_id + 1)))))) / 1u, 1u * (((subgroup_local_id + 1)) / 1u)))))) | (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)), ((subgroup_local_id + 1)) | 0u))) % subgroup_size), (workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)) << 0u)) >> 0u), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (1))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))) | (subgroup_local_id)) + 1), 0u | _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), subgroup_local_id)) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) / 1))), min(((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), subgroup_local_id)) + 1)), ((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), subgroup_local_id)) + 1)))))) / 1u)) | (_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), ((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))) | ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, min(1, 1)), clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))))) | 0u))) % subgroup_size), (workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) ^ _GLF_IDENTITY(0u, (0u) - 0u)) * subgroup_size + (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, min((_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(num_workgroup))) + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size))) | 0u))) << 0u))), 1u, 1u, 0u)))))))) >> 0u) ^ 0u);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.6), _GLF_FUZZED(4819.4739)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))).y))))
  {
  }
 else
  {
   do
    {
     atomicStore(buf[virtual_gid], uint(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) ^ 0))), 1)), (int(ivec2(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(31643) : _GLF_IDENTITY(1, (1) - 0)))))) * _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-83285) : 1))))))), 4, 64, _GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(4, min(4, 4)), _GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, (4) / 1)))), (min(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, max(4, 4)))), min(4, 4)), _GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, (4) / 1))))) + 0), min(_GLF_IDENTITY(min(_GLF_IDENTITY(4, min(4, 4)), _GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, (4) / 1)))), (min(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, max(4, 4)))), min(4, 4)), _GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, (4) / 1))))) + 0), _GLF_IDENTITY(min(_GLF_IDENTITY(4, min(4, 4)), _GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, (4) / 1)))), (min(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, max(4, 4)))), min(4, 4)), _GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, (4) / 1))))) + 0)))));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), false || (_GLF_IDENTITY(false, bool(bvec2(false, false))))), false)))));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) || false))))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), min(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), _GLF_IDENTITY((false ? _GLF_FUZZED(min((61261 - -28232), -83038)) : (1) | (1)), clamp((false ? _GLF_FUZZED(min((61261 - -28232), -83038)) : (1) | (1)), (false ? _GLF_FUZZED(min((61261 - -28232), -83038)) : (1) | (1)), (false ? _GLF_FUZZED(min((61261 - -28232), -83038)) : (1) | (1)))))), 1 * (_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(min((61261 - -28232), -83038), min(min((61261 - -28232), -83038), min((61261 - -28232), -83038))), (min((61261 - -28232), -83038)) | (min((61261 - -28232), -83038))), min(min((61261 - -28232), -83038), min((61261 - -28232), -83038)))) : (1) | (1)), ((false ? _GLF_FUZZED(_GLF_IDENTITY(min((61261 - -28232), -83038), min(min((61261 - -28232), -83038), min((61261 - -28232), -83038)))) : (1) | (1))) ^ 0))))))), clamp(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), min(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), _GLF_IDENTITY((false ? _GLF_FUZZED(min((61261 - -28232), -83038)) : (1) | (1)), clamp((false ? _GLF_FUZZED(min((61261 - -28232), -83038)) : (1) | (1)), (false ? _GLF_FUZZED(min((61261 - -28232), -83038)) : (1) | (1)), (false ? _GLF_FUZZED(min((61261 - -28232), -83038)) : (1) | (1)))))), 1 * (_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(min((61261 - -28232), -83038), min(min((61261 - -28232), -83038), min((61261 - -28232), -83038))), (min((61261 - -28232), -83038)) | (min((61261 - -28232), -83038))), min(min((61261 - -28232), -83038), min((61261 - -28232), -83038)))) : (1) | (1)), ((false ? _GLF_FUZZED(_GLF_IDENTITY(min((61261 - -28232), -83038), min(min((61261 - -28232), -83038), min((61261 - -28232), -83038)))) : (1) | (1))) ^ 0))))))), subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), min(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), _GLF_IDENTITY((false ? _GLF_FUZZED(min((61261 - -28232), -83038)) : (1) | (1)), clamp((false ? _GLF_FUZZED(min((61261 - -28232), -83038)) : (1) | (1)), (false ? _GLF_FUZZED(min((61261 - -28232), -83038)) : (1) | (1)), (false ? _GLF_FUZZED(min((61261 - -28232), -83038)) : (1) | (1)))))), 1 * (_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(min((61261 - -28232), -83038), min(min((61261 - -28232), -83038), min((61261 - -28232), -83038))), (min((61261 - -28232), -83038)) | (min((61261 - -28232), -83038))), min(min((61261 - -28232), -83038), min((61261 - -28232), -83038)))) : (1) | (1)), ((false ? _GLF_FUZZED(_GLF_IDENTITY(min((61261 - -28232), -83038), min(min((61261 - -28232), -83038), min((61261 - -28232), -83038)))) : (1) | (1))) ^ 0))))))), subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), min(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), _GLF_IDENTITY((false ? _GLF_FUZZED(min((61261 - -28232), -83038)) : (1) | (1)), clamp((false ? _GLF_FUZZED(min((61261 - -28232), -83038)) : (1) | (1)), (false ? _GLF_FUZZED(min((61261 - -28232), -83038)) : (1) | (1)), (false ? _GLF_FUZZED(min((61261 - -28232), -83038)) : (1) | (1)))))), 1 * (_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(min((61261 - -28232), -83038), min(min((61261 - -28232), -83038), min((61261 - -28232), -83038))), (min((61261 - -28232), -83038)) | (min((61261 - -28232), -83038))), min(min((61261 - -28232), -83038), min((61261 - -28232), -83038)))) : (1) | (1)), ((false ? _GLF_FUZZED(_GLF_IDENTITY(min((61261 - -28232), -83038), min(min((61261 - -28232), -83038), min((61261 - -28232), -83038)))) : (1) | (1))) ^ 0))))))))) < subgroup_size)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true)))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) && true, ! _GLF_IDENTITY((! (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), false))))) && true, ((_GLF_IDENTITY(false, (false) || false)) && true) && true))), ! (! (_GLF_IDENTITY((! (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), false))))) && true, ((_GLF_IDENTITY(false, (false) || false)) && true) && true))), ! (! ((! (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), false))))) && true, ((_GLF_IDENTITY(false, (false) || false)) && true) && true)))))))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, clamp(1, 1, 1))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2((mat2(1.0) * (injectionSwitch))[0], (mat2(1.0) * (injectionSwitch))[1]), vec2(_GLF_FUZZED(-6.0), _GLF_FUZZED(-7042.3680)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))).y))))) || false))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))) && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
                barrier();
               barrier();
              }
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true)))) || false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) + 0)), ~ (~ (int(4)))))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                }
               else
                {
                }
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) - 0))
            {
             barrier();
            }
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, _GLF_IDENTITY(min(4, 4), _GLF_IDENTITY(min(_GLF_IDENTITY(min(4, _GLF_IDENTITY(4, (4) << 0)), ~ (~ (min(4, 4)))), _GLF_IDENTITY(min(4, _GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(23922)))), (min(4, 4)) - 0)), (min(_GLF_IDENTITY(min(4, _GLF_IDENTITY(4, (4) << 0)), _GLF_IDENTITY(~ (~ (min(4, 4))), ~ (~ (_GLF_IDENTITY(~ (~ (min(4, 4))), 1 * (~ (~ (min(4, 4))))))))), _GLF_IDENTITY(min(4, 4), (min(4, 4)) - 0))) >> (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(7), int(7)), (0 << _GLF_IDENTITY(int(7), int(7))) ^ (0 ^ 0)))))), 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       subgroupAll(false);
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), true && (! (! (true)))))))), false)))));
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, clamp(1, 1, 1))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, 1)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1) != _GLF_IDENTITY(0, (0) >> 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(ivec3(int(5), 1, (0 | 0)))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(72.65) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0), mat4x3(mat4(mat4x3(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, float(mat2x3(0.0, 1.0, 1.0, 0.0, 0.0, 0.0))))), 1.0, 0.0, 1.0, 1.0, 1.0)))))))) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
              {
              }
             else
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
             barrier();
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), (_GLF_IDENTITY(2, (2) | (2))) << (0 & -9556))), (true ? uint(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), (_GLF_IDENTITY(2, (2) | (2))) << (0 & -9556))) : _GLF_FUZZED(subgroup_size))), 4, 64, 4);
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), true, false)), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), (_GLF_IDENTITY(bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), true && (bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))) && true), (bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))) || false), false, false)))) && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   subgroupAll(true);
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
