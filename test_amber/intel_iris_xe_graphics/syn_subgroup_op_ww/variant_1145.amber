#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     switch(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))))
      {
       case 0:
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       case 47:
       do
        {
         if(_GLF_DEAD(false))
          {
           switch(_GLF_SWITCH(0))
            {
             case 73:
             61090;
             if(_GLF_DEAD(false))
              break;
             case 85:
             mat4x3 _GLF_SWITCH_6_0v[82], _GLF_SWITCH_6_1v[54];
             case 0:
             case 78:
             case 42:
             case 15:
             case 11:
             case 2:
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
              {
               return;
              }
             break;
             if(_GLF_DEAD(false))
              continue;
             case 16:
             ;
             default:
             1;
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
       case 67:
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
       case 80:
       case 88:
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       case 97:
       case 13:
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       break;
       case 20:
       for(       vec4(93.60, 4.2, 841.091, 3078.1805);
 (vec2(-863.463, -2662.9481) == vec2(-2.4, 7306.4636)); ((uvec4(197064u, 191353u, 111441u, 178662u) != uvec4(121611u, 172922u, 55348u, 118853u)) ? bvec2(false, true) : bvec2(true, true)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if((156952u > 50670u))
          {
           bvec4(false, false, true, true);
           ivec3 _GLF_SWITCH_6_0v;
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             (uvec4(min(subgroup_id, 123606u), 37423u, subgroup_id, (subgroup_id | subgroup_id)) & subgroup_id);
            }
           bool _GLF_SWITCH_6_1v[14], _GLF_SWITCH_6_2v[50];
           uvec2 _GLF_SWITCH_6_3v, _GLF_SWITCH_6_4v;
           uvec4(117613u, 41629u, 107079u, 151166u);
           ;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           bvec3 _GLF_SWITCH_6_5v, _GLF_SWITCH_6_6v, _GLF_SWITCH_6_7v[15];
          }
         if(_GLF_DEAD(false))
          break;
         vec2 _GLF_SWITCH_6_8v, _GLF_SWITCH_6_9v[16];
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           _GLF_SWITCH_6_8v;
          }
         else
          {
          }
         vec4 _GLF_SWITCH_6_10v[57], _GLF_SWITCH_6_11v;
         (mat2x3(4.4, -36.14, 3925.5703, -458.109, 954.540, 8695.4440) * mat2(-1.5, -59.23, 6760.8468, -37.09));
         true;
         {
          floatBitsToInt(_GLF_SWITCH_6_11v);
          length(vec3(-16.71, -7.1, -58.22));
          mat2x4(1.5, 6.5, 950.975, -730.301, 7112.7033, 4802.0448, 443.050, -99.12);
          subgroup_id;
          ivec2(5298, -74571);
         }
         if((true || false))
          {
           mat3x2 _GLF_SWITCH_6_12v;
           (4051.2640 - mat3x2(7.8, -431.833, 859.998, 8199.0407, 65.68, 719.712));
           uvec2 _GLF_SWITCH_6_13v, _GLF_SWITCH_6_14v;
           ;
           uvec2 _GLF_SWITCH_6_15v, _GLF_SWITCH_6_16v[25];
          }
         else
          {
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             ivec4(22931, -63288, 93059, 84652);
            }
           bvec4 _GLF_SWITCH_6_17v, _GLF_SWITCH_6_18v;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           ivec4(-48338, 50466, -67170, -78618);
           ivec2 _GLF_SWITCH_6_19v[82], _GLF_SWITCH_6_20v, _GLF_SWITCH_6_21v;
           _GLF_SWITCH_6_8v;
           ;
           mat3x4(-303.318, 6.9, -0.5, -6.9, -8180.2089, 599.472, -3922.0435, -595.108, 3812.2276, -64.19, 88.54, 1.5);
          }
        }
       case 76:
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         ;
        }
       default:
       1;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (-25305 & 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   switch(_GLF_SWITCH((int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) ^ 0)))))
    {
     case 48:
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     while(bvec3(true, true, false).r)
      {
       uvec4(173837u, 47234u, 32267u, 97990u);
       {
        false;
        if(_GLF_WRAPPED_IF_FALSE(false))
         {
         }
        else
         {
          if(_GLF_DEAD(false))
           barrier();
          do
           {
            if(_GLF_WRAPPED_IF_FALSE(false))
             {
             }
            else
             {
              ;
             }
           }
          while(_GLF_WRAPPED_LOOP(false));
         }
        99203u;
        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
         continue;
        if(_GLF_WRAPPED_IF_TRUE(true))
         {
          if(_GLF_DEAD(false))
           return;
          vec3(7429.7079, 4.8, -0.5);
         }
        else
         {
         }
        mat4(vec4(-540.008, 75.36, vec2(7036.6575, -708.611)), vec4(5.9, 81.44, -5721.8453, -281.035), vec4(-912.532, 208.288, 981.083, -276.034), clamp(vec4(-28.75, 6.4, -8.2, 9.7), vec4(-6.8, -522.477, 4130.2654, -6.7), vec4(-7.1, -548.222, -4.0, 2419.9944)));
       }
       do
        {
         vec3(-9.5, 83.01, -796.718);
        }
       while(_GLF_WRAPPED_LOOP(false));
       {
        vec4(20.97, -6438.7364, -3.8, 2.3);
        if(_GLF_DEAD(false))
         continue;
       }
      }
     case 0:
     case 22:
     case 18:
     case 30:
     if(_GLF_DEAD(false))
      break;
     case 25:
     case 39:
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     case 54:
     case 73:
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       barrier();
      }
     case 21:
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      continue;
     case 36:
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     break;
     case 72:
     if(_GLF_DEAD(false))
      barrier();
     {
      while(any(bvec3(true, true, true)))
       {
        true;
        mat4x2(-0.9, -187.523, 0.3, -1.7, 4256.8865, 152.801, 98.41, 7.8);
        transpose(mat2x3(-0.1, -70.12, -7.0, -960.577, 4.2, -579.259));
        if(_GLF_DEAD(false))
         break;
        for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
         {
          mat3x4(-672.252, -5003.0623, 4337.8262, 2.0, -6652.9107, 839.696, 1.9, -355.562, -9.7, 6773.8790, 771.243, 2835.1403);
         }
        for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
         {
          mat3x4(-2.4, 8783.8033, 91.46, 4.8, -7363.0405, 41.25, 3.3, -51.09, 96.08, 9147.5134, 739.890, 64.54);
         }
        vec2(9.0, 521.963);
        float _GLF_SWITCH_5_0v;
        if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
         {
         }
        else
         {
          mat4(-8.8, 10.96, -9813.3606, -81.24, 2.4, -874.072, -6267.9822, -2428.0702, -4504.0483, 62.57, 457.406, -526.566, -570.229, -3.8, -36.72, 1.4);
         }
        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
         return;
       }
      (uvec2(69375u, 124072u) | subgroup_id);
      uvec3 _GLF_SWITCH_5_1v;
      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
       break;
     }
     default:
     if(_GLF_DEAD(false))
      return;
     1;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           switch(_GLF_SWITCH((0 | 0)))
            {
             case 12:
             ivec2 _GLF_SWITCH_6_0v;
             case 0:
             case 2:
             case 59:
             case 66:
             case 73:
             case 82:
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                return;
              }
             case 65:
             case 53:
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             while(_GLF_WRAPPED_LOOP(false));
             break;
             default:
             1;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           switch(_GLF_SWITCH(0))
            {
             case 66:
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
              }
             while((false != true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               {
                if(_GLF_DEAD(false))
                 continue;
                for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                 {
                  if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                   {
                    if(_GLF_DEAD(false))
                     barrier();
                    if(_GLF_WRAPPED_IF_FALSE(false))
                     {
                     }
                    else
                     {
                      uvec2(31297u, 117680u);
                     }
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     break;
                   }
                  else
                   {
                   }
                 }
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                   {
                    barrier();
                   }
                  else
                   {
                   }
                 }
                subgroup_id;
                uvec4(71473u, 104063u, 6737u, 43845u);
                for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                 {
                  switch(_GLF_SWITCH((0 >> _GLF_IDENTITY(int(2), int(2)))))
                   {
                    case 80:
                    ivec4(-90802, 85703, -66091, -30139);
                    case 0:
                    case 4:
                    case 24:
                    if(_GLF_DEAD(false))
                     continue;
                    do
                     {
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       {
                        switch(_GLF_SWITCH(0))
                         {
                          case 93:
                          vec3(0.4, -3.9, 1.3);
                          case 0:
                          case 17:
                          case 34:
                          case 68:
                          case 5:
                          case 92:
                          case 95:
                          case 40:
                          case 67:
                          do
                           {
                            if(_GLF_WRAPPED_IF_TRUE(true))
                             {
                              return;
                             }
                            else
                             {
                             }
                           }
                          while(_GLF_WRAPPED_LOOP(false));
                          break;
                          default:
                          1;
                         }
                       }
                     }
                    while(_GLF_WRAPPED_LOOP(false));
                    if(_GLF_DEAD(false))
                     continue;
                    (vec3(712.832, 656.128, -94.46) + 5.7);
                    if(_GLF_DEAD(false))
                     break;
                    break;
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     {
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       continue;
                      do
                       {
                        return;
                       }
                      while(_GLF_WRAPPED_LOOP(false));
                     }
                    default:
                    if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                     break;
                    for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 ^ 0) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
                     {
                      1;
                     }
                   }
                 }
                if(_GLF_DEAD(false))
                 {
                  do
                   {
                    return;
                   }
                  while(_GLF_WRAPPED_LOOP(false));
                 }
                bitfieldInsert(uvec4(118092u, 99480u, 80088u, 92425u), uvec4(101905u, 102231u, 199659u, 170889u), min(-32627, 51225), -58686);
                if(_GLF_WRAPPED_IF_FALSE(false))
                 {
                 }
                else
                 {
                  do
                   {
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     {
                      if(_GLF_DEAD(false))
                       break;
                      barrier();
                     }
                    if(_GLF_DEAD(false))
                     break;
                   }
                  while(_GLF_WRAPPED_LOOP(false));
                  if(_GLF_DEAD(false))
                   {
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     break;
                    break;
                   }
                  (false ? mat4(-0.7, -6.3, -5172.2192, -515.565, 517.741, 25.15, -3111.0378, -3485.6427, 22.73, 8.9, 66.83, -8461.7114, 8.0, 2642.0097, -9.3, 8.5) : mat4(-2049.4137, -0.5, 8.4, 254.725, -1931.7548, 739.524, 7.8, 2.4, -567.132, 431.824, -4491.4642, -3263.1550, -83.99, 181.357, 9.1, -205.217));
                 }
                if(_GLF_WRAPPED_IF_FALSE(false))
                 {
                 }
                else
                 {
                  bitCount(workgroup_base);
                 }
                mat3x4 _GLF_SWITCH_2_0v[41];
                if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                 {
                  if(_GLF_DEAD(false))
                   return;
                  continue;
                 }
                if(_GLF_DEAD(false))
                 continue;
               }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               if(_GLF_DEAD(false))
                break;
               mat3x4 _GLF_SWITCH_2_1v, _GLF_SWITCH_2_2v;
               false;
               ivec4 _GLF_SWITCH_2_3v, _GLF_SWITCH_2_4v[45];
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   ivec4(-76651, 87128, -62953, -95432);
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               (true ? bvec2(true, true) : bvec2(false, true));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                continue;
               do
                {
                 do
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ (1 ^ 0))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
                    return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               mat3(19.61, 286.347, -49.95, -9418.3486, 441.646, -113.107, 8535.3421, 8.8, -3.6);
               if(true)
                {
                 switch(_GLF_SWITCH(0))
                  {
                   case 12:
                   if(_GLF_DEAD(false))
                    return;
                   ivec4 _GLF_SWITCH_5_0v, _GLF_SWITCH_5_1v[61], _GLF_SWITCH_5_2v[15];
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                      continue;
                     switch(_GLF_SWITCH(0))
                      {
                       case 0:
                       case 78:
                       case 62:
                       case 20:
                       case 26:
                       do
                        {
                         for(int _injected_loop_counter = ((1 ^ 0) & ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           return;
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_DEAD(false))
                        continue;
                       break;
                       case 21:
                       uvec3(158302u, 141228u, 195428u);
                       default:
                       1;
                      }
                    }
                   case 66:
                   subgroup_size;
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   case 0:
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     continue;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     continue;
                    }
                   bvec4(true, true, true, false);
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    break;
                   break;
                   case 5:
                   ivec2(77833, 46663);
                   default:
                   1;
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
               mat3x4(mat4x2(776.492, 16.89, -7.7, 4.9, -5.3, -0.1, 5204.6758, 1.0));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             case 0:
             case 8:
             if(_GLF_DEAD(false))
              return;
             case 46:
             case 94:
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   return;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     break;
                    }
                  }
                }
               if(_GLF_DEAD(false))
                return;
               do
                {
                 switch(_GLF_SWITCH(0))
                  {
                   case 0:
                   if(_GLF_DEAD(false))
                    continue;
                   case 60:
                   case 66:
                   if(_GLF_DEAD(false))
                    return;
                   case 21:
                   case 13:
                   case 67:
                   case 46:
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   break;
                   default:
                   1;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                return;
              }
             case 40:
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) << 0))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4)))))); _injected_loop_counter ++)
              {
               return;
              }
             break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              return;
             default:
             1;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     return;
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       do
        {
         atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(subgroup_local_id + 1 < subgroup_size)
    {
     switch(_GLF_SWITCH(0))
      {
       case 0:
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         break;
        }
       for(int _injected_loop_counter = (0 & 6709); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               continue;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              barrier();
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))
                  break;
                }
               else
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     continue;
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                }
              }
            }
           if(_GLF_DEAD(false))
            return;
           subgroupAll(false);
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            break;
          }
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
       break;
       case 13:
       if(false)
        {
         if(_GLF_DEAD(false))
          break;
         float(subgroup_size);
         uvec3(87709u, 186290u, 147390u);
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(1), int(1)))))); _injected_loop_counter --)
          {
           ;
          }
        }
       default:
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         1;
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((0 | 1), ~ (~ ((0 | 1))))); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         switch(_GLF_SWITCH(0))
          {
           case 0:
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)));
              }
             else
              {
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   return;
                  }
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = (1 & ((-34406 & 0) ^ 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   continue;
                  }
                }
              }
            }
           else
            {
            }
           atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
           case 19:
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 break;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   do
                    {
                     for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             else
              {
              }
            }
           case 56:
           case 32:
           do
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              continue;
             switch(_GLF_SWITCH(0))
              {
               case 71:
               while(true)
                {
                 bvec4 _GLF_SWITCH_0_0v[47], _GLF_SWITCH_0_1v;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 vec4 _GLF_SWITCH_0_2v, _GLF_SWITCH_0_3v, _GLF_SWITCH_0_4v;
                 do
                  {
                   (true ? (mat4(-3397.1043, -14.83, 734.598, 6.9, -7287.8530, -490.840, 4.1, -2.8, 4123.5577, -9.6, 78.45, -19.84, -4475.8741, 9.9, -3.2, 113.206) - mat4(-37.24, 20.74, -4308.9059, 6412.4522, 3.2, -2.8, -702.206, 26.23, 77.63, -9149.4093, -4040.8360, 1.1, 37.89, 88.40, -1893.6772, 8995.8047)) : (mat4(497.376, -7216.3707, -3.3, 53.71, 8153.2315, -4.0, -2.1, -4572.9924, 955.957, 137.851, 2.7, 249.001, -644.782, -3.5, 1.3, -9.9) + mat4(-3.7, -390.889, 99.73, -6.9, -6.6, -2.0, -796.847, -1334.1800, 2.2, 54.56, -1.4, -2368.5618, 4.2, 52.57, 2847.2779, 10.62)));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 vec3 _GLF_SWITCH_0_5v, _GLF_SWITCH_0_6v;
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   mat3((mat4x2(-9526.2149, 530.317, 6.1, 876.435, -14.83, 4.1, 6473.5695, -913.015) + 4110.9104));
                  }
                 else
                  {
                  }
                 vec2 _GLF_SWITCH_0_7v, _GLF_SWITCH_0_8v;
                 do
                  {
                   asinh(_GLF_SWITCH_0_7v);
                   if(_GLF_DEAD(false))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     continue;
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       for(int _injected_loop_counter = (0 ^ ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                          barrier();
                        }
                       if(_GLF_DEAD(false))
                        continue;
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      break;
                    }
                   mat3(-1844.5700, 1943.0506, -4128.0292, 8.3, -138.051, -6.6, -93.79, 9.1, 3090.8583);
                  }
                 else
                  {
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 ^ (int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     if(true)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         do
                          {
                           if(_GLF_DEAD(false))
                            {
                             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
                                continue;
                               return;
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_DEAD(false))
                        {
                         switch(_GLF_SWITCH(0))
                          {
                           case 0:
                           case 59:
                           case 71:
                           if(_GLF_DEAD(false))
                            continue;
                           case 54:
                           case 43:
                           case 65:
                           case 1:
                           if(_GLF_DEAD(false))
                            return;
                           case 36:
                           barrier();
                           break;
                           default:
                           1;
                          }
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                          continue;
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               do
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  continue;
                                 return;
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                              }
                             else
                              {
                              }
                            }
                          }
                         else
                          {
                          }
                         do
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             uvec4(108077u, 134191u, 138047u, 34387u);
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) >> int(_GLF_ZERO(0.0, injectionSwitch.x))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                        {
                         do
                          {
                           do
                            {
                             do
                              {
                               if(_GLF_DEAD(false))
                                break;
                               if(_GLF_DEAD(false))
                                return;
                               bvec4((bvec2(false, true) != bvec2(true, true)), bvec3(false, true, true));
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                             if(_GLF_DEAD(false))
                              break;
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         if(_GLF_DEAD(false))
                          break;
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            continue;
                           break;
                          }
                         break;
                        }
                       if(_GLF_DEAD(false))
                        return;
                       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                        {
                         mat2x3(639.376, -3.5, -864.323, -539.141, -1.9, 6.8);
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            break;
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              break;
                             return;
                            }
                          }
                        }
                      }
                    }
                  }
                 else
                  {
                  }
                }
               case 58:
               for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))
                    barrier();
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   continue;
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                      return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                  }
                 else
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             return;
                            }
                          }
                        }
                      }
                    }
                  }
                }
               do
                {
                 if(true)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         do
                          {
                           for(int _injected_loop_counter = (0 | (0 << _GLF_IDENTITY(int(7), int(7)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
                            {
                             return;
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                      }
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   switch(_GLF_SWITCH((0 << _GLF_IDENTITY(int(7), int(7)))))
                    {
                     case 55:
                     if(_GLF_DEAD(false))
                      continue;
                     bvec2 _GLF_SWITCH_1_0v;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       switch(_GLF_SWITCH(0))
                        {
                         case 0:
                         case 37:
                         case 32:
                         if(_GLF_DEAD(false))
                          break;
                         case 48:
                         if(_GLF_DEAD(false))
                          return;
                         case 17:
                         case 76:
                         case 54:
                         do
                          {
                           do
                            {
                             barrier();
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              break;
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         break;
                         case 7:
                         if(_GLF_DEAD(false))
                          continue;
                         mat4 _GLF_SWITCH_3_0v[21], _GLF_SWITCH_3_1v;
                         case 18:
                         if(_GLF_DEAD(false))
                          continue;
                         mat4x2(-2.3, 41.74, -0.7, 0.8, -233.176, -7.6, -5.9, -9605.2146);
                         default:
                         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           1;
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                      }
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))
                      continue;
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                         if(_GLF_DEAD(false))
                          return;
                         return;
                        }
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        continue;
                      }
                     case 21:
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                      return;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if(_GLF_DEAD(false))
                      continue;
                     mat4(-25.84, -3429.9804, 5.3, -6.8, 312.528, 4.7, 513.416, -70.84, 56.02, 263.137, -7.5, -129.562, 6240.0200, 17.94, 13.52, -37.09);
                     case 0:
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (ivec4(-35035, -64089, 43557, -90486).a & int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            break;
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              return;
                             return;
                            }
                          }
                        }
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                     case 93:
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_DEAD(false))
                          barrier();
                         break;
                        }
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                           if(_GLF_DEAD(false))
                            break;
                          }
                         else
                          {
                           do
                            {
                             switch(_GLF_SWITCH((0 << _GLF_IDENTITY(int(8), int(8)))))
                              {
                               case 0:
                               case 60:
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                return;
                               case 17:
                               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                                return;
                               case 14:
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   do
                                    {
                                     barrier();
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      break;
                                    }
                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                  }
                                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
                                  return;
                                }
                               break;
                               case 62:
                               true;
                               default:
                               1;
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                       if(_GLF_DEAD(false))
                        return;
                      }
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          return;
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            return;
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            return;
                          }
                         continue;
                        }
                       continue;
                      }
                     uvec4(184607u, 1357u, 135194u, 79063u);
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           return;
                          }
                        }
                       else
                        {
                        }
                      }
                     case 33:
                     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (-89728 & 0)); _injected_loop_counter --)
                      {
                       bitfieldInsert(uvec3(187125u, 61382u, 171814u), (uvec3(24032u, 151609u, 95941u) << num_workgroup), 86234, 50260);
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(false))
                            continue;
                           if(_GLF_DEAD(false))
                            break;
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             do
                              {
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                {
                                 if(_GLF_DEAD(false))
                                  break;
                                 do
                                  {
                                   barrier();
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                 if(_GLF_DEAD(false))
                                  return;
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           else
                            {
                            }
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                        }
                       else
                        {
                        }
                      }
                     case 82:
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | (-26148 & (0 >> _GLF_IDENTITY(int(1), int(1)))))); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if(_GLF_DEAD(false))
                      continue;
                     case 2:
                     if(_GLF_DEAD(false))
                      barrier();
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       do
                        {
                         switch(_GLF_SWITCH(0))
                          {
                           case 47:
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(false))
                              break;
                             continue;
                            }
                           (false ? (ivec2(-88610, 14212).s | ivec2(-16936, 91404)) : ivec2(40254, -23593));
                           case 0:
                           do
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 switch(_GLF_SWITCH((0 | 0)))
                                  {
                                   case 0:
                                   case 23:
                                   case 98:
                                   if(_GLF_DEAD(false))
                                    {
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      return;
                                     do
                                      {
                                       barrier();
                                      }
                                     while(_GLF_WRAPPED_LOOP(false));
                                    }
                                   break;
                                   case 16:
                                   vec4(1.1, -25.19, 6.1, 6204.6852);
                                   default:
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     if(_GLF_DEAD(false))
                                      return;
                                     1;
                                    }
                                   else
                                    {
                                    }
                                  }
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  break;
                                }
                               else
                                {
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                           case 68:
                           if(_GLF_DEAD(false))
                            barrier();
                           case 48:
                           case 55:
                           case 8:
                           case 70:
                           ivec4(17417, 41636, ivec2(72378, -32241));
                           break;
                           default:
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                              {
                               do
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                                    {
                                     switch(_GLF_SWITCH((0 << _GLF_IDENTITY(int(0), int(0)))))
                                      {
                                       case 44:
                                       mat3 _GLF_SWITCH_2_0v[27];
                                       case 0:
                                       case 25:
                                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        return;
                                       case 24:
                                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        {
                                         do
                                          {
                                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                            {
                                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                              {
                                               barrier();
                                              }
                                             else
                                              {
                                              }
                                            }
                                          }
                                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                         break;
                                         if(_GLF_DEAD(false))
                                          continue;
                                        }
                                       case 21:
                                       case 27:
                                       if(_GLF_DEAD(false))
                                        break;
                                       case 57:
                                       if(_GLF_DEAD(false))
                                        break;
                                       case 35:
                                       if(_GLF_DEAD(false))
                                        break;
                                       if(_GLF_DEAD(false))
                                        break;
                                       case 29:
                                       case 17:
                                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        continue;
                                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                        {
                                         if(_GLF_DEAD(false))
                                          continue;
                                         do
                                          {
                                           1;
                                          }
                                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                        }
                                       else
                                        {
                                         if(_GLF_DEAD(false))
                                          break;
                                        }
                                       break;
                                       if(_GLF_DEAD(false))
                                        continue;
                                       case 96:
                                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        break;
                                       ;
                                       default:
                                       1;
                                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        break;
                                      }
                                    }
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     if(_GLF_DEAD(false))
                                      return;
                                    }
                                  }
                                 if(_GLF_DEAD(false))
                                  return;
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                              }
                             else
                              {
                              }
                             if(_GLF_DEAD(false))
                              continue;
                            }
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              return;
                            }
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), ~ (~ (int(4))))) | (int(4)))))); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              continue;
                             barrier();
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       break;
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           return;
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            break;
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                        }
                      }
                     if(_GLF_DEAD(false))
                      return;
                     case 39:
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         return;
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       break;
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          continue;
                        }
                       continue;
                      }
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       while(false)
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           ;
                          }
                         if(_GLF_DEAD(false))
                          continue;
                         bvec3 _GLF_SWITCH_0_9v, _GLF_SWITCH_0_10v, _GLF_SWITCH_0_11v;
                         mat4x3 _GLF_SWITCH_0_12v, _GLF_SWITCH_0_13v, _GLF_SWITCH_0_14v[96];
                         do
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             (bvec4(true, true, true, true));
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                continue;
                               continue;
                              }
                            }
                           if(_GLF_DEAD(false))
                            break;
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)));
                         if(_GLF_DEAD(false))
                          continue;
                         mat4x2(-7.0, -1.7, 576.366, 8.8, 57.91, 493.704, 254.782, -15.05);
                         if(_GLF_DEAD(false))
                          break;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         ivec3 _GLF_SWITCH_0_15v;
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            break;
                           ivec3(-97361, -31623, 14900);
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                            {
                             if(_GLF_DEAD(false))
                              return;
                            }
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              continue;
                             continue;
                            }
                           if(_GLF_DEAD(false))
                            return;
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              break;
                             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                              {
                               return;
                              }
                            }
                           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                            {
                             if(_GLF_DEAD(false))
                              continue;
                             break;
                            }
                           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                            return;
                           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                            break;
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            continue;
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            continue;
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              break;
                             if(_GLF_DEAD(false))
                              break;
                             break;
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            return;
                           if(_GLF_DEAD(false))
                            break;
                           if(_GLF_DEAD(false))
                            continue;
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if(_GLF_DEAD(false))
                            {
                             switch(_GLF_SWITCH(0))
                              {
                               case 94:
                               mat3x2 _GLF_SWITCH_3_0v;
                               if(_GLF_DEAD(false))
                                break;
                               case 0:
                               case 87:
                               do
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  return;
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                continue;
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_DEAD(false))
                                  break;
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    break;
                                   return;
                                  }
                                }
                               else
                                {
                                }
                               case 78:
                               case 80:
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                return;
                               case 54:
                               continue;
                               break;
                               case 69:
                               vec4 _GLF_SWITCH_3_1v;
                               default:
                               1;
                              }
                             if(_GLF_DEAD(false))
                              break;
                             if(_GLF_DEAD(false))
                              continue;
                            }
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                        }
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       continue;
                      }
                     mat2x4 _GLF_SWITCH_0_16v, _GLF_SWITCH_0_17v;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         break;
                        }
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(false))
                          return;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         return;
                         if(_GLF_DEAD(false))
                          break;
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       return;
                      }
                     case 53:
                     if(_GLF_DEAD(false))
                      return;
                     mat4x3 _GLF_SWITCH_0_18v;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(false))
                      break;
                     ivec2(-26209, 22933);
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      {
                       switch(_GLF_SWITCH((0 >> _GLF_IDENTITY(int(1), int(1)))))
                        {
                         case 52:
                         (+ mat3x2(3047.7062, 5393.0268, 927.768, 845.182, -202.428, 5480.5330));
                         case 12:
                         ;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                         case 0:
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         if(_GLF_DEAD(false))
                          return;
                         case 51:
                         for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           switch(_GLF_SWITCH(0))
                            {
                             case 98:
                             ivec4 _GLF_SWITCH_6_0v, _GLF_SWITCH_6_1v[53];
                             case 37:
                             vec4(-216.104, 3383.3425, 6904.5106, 1758.3850);
                             case 0:
                             case 18:
                             case 93:
                             case 40:
                             case 41:
                             barrier();
                             case 61:
                             case 57:
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             case 65:
                             case 25:
                             case 84:
                             if(_GLF_DEAD(false))
                              {
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                {
                                 return;
                                }
                              }
                             if(_GLF_DEAD(false))
                              continue;
                             break;
                             case 19:
                             ;
                             default:
                             1;
                            }
                          }
                         break;
                         case 64:
                         mat2x4 _GLF_SWITCH_6_0v;
                         case 66:
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true))))))))
                          {
                           (subgroup_local_id | num_workgroup);
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            return;
                          }
                         else
                          {
                          }
                         default:
                         if(_GLF_DEAD(false))
                          break;
                         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           1;
                          }
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        return;
                      }
                     if(_GLF_DEAD(false))
                      break;
                     break;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       continue;
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     case 35:
                     if(_GLF_DEAD(false))
                      break;
                     mat3x2(86.14, 2.6, -2612.1007, -823.824, -5.2, -976.589);
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                       break;
                      }
                     default:
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         do
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                              continue;
                             do
                              {
                               1;
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                            }
                           if(_GLF_DEAD(false))
                            break;
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   break;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                 do
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          break;
                         break;
                        }
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      continue;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                barrier();
               case 0:
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                    break;
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (-4205 & _GLF_IDENTITY(0, ~ (~ (0))))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                      }
                     else
                      {
                       return;
                      }
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    return;
                   return;
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)))))
                    return;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 continue;
                }
               case 64:
               if(_GLF_DEAD(false))
                break;
               subgroupAll(true);
               break;
               default:
               if(_GLF_DEAD(false))
                continue;
               1;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 continue;
                }
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           break;
           case 80:
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             switch(_GLF_SWITCH((0 & 32618)))
              {
               case 0:
               case 22:
               case 76:
               uvec3(uvec4(41143u, 155169u, 67474u, 8089u));
               if(_GLF_DEAD(false))
                break;
               break;
               case 55:
               (_injected_loop_counter | ivec4(47949, 12578, -76767, -83033));
               case 50:
               vec2(27.13, 7.7);
               default:
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 1;
                }
               else
                {
                }
              }
            }
           case 66:
           uvec4 _GLF_SWITCH_4_0v, _GLF_SWITCH_4_1v;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
            }
           default:
           1;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) - 0)); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
