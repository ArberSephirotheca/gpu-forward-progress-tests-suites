#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_FUZZED(uvec3(74683u, 100814u, 188757u)) : _GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups))))).x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))))))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true, true, false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, false)))));
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
       else
        {
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ 0))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, max(1, 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), false || (_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true))))))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             barrier();
            }
          }
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, false)))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint workgroup_id = gl_WorkGroupID.x;
 for(int _injected_loop_counter = ((0 | 1) & ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(ivec2(int(2), 0)), clamp(_GLF_IDENTITY(int(ivec2(int(2), 0)), (int(ivec2(int(2), 0))) - 0), int(ivec2(int(2), 0)), int(ivec2(int(2), 0))))), _GLF_IDENTITY((int(2)), int(ivec3((int(2)), 0, 1))) << 0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 | (int(2)))), (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 | (int(2))))) | (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 | (int(2)))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), 0 ^ (0 >> _GLF_IDENTITY(int(1), int(1))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(0 ^ (0 >> _GLF_IDENTITY(int(1), int(1))), max(0 ^ (0 >> _GLF_IDENTITY(int(1), int(1))), 0 ^ (0 >> _GLF_IDENTITY(int(1), int(1))))))), bool(bvec2(_injected_loop_counter != (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), 0 ^ (0 >> _GLF_IDENTITY(int(1), int(1))))), true)))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y)))))), bool(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y)))))), true)))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), true, false)))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0))), 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))), injectionSwitch)).x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(injectionSwitch))).y))))));
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, 1.0)) * (injectionSwitch)).y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), ! (! (bool(bvec3(false, false, false))))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size + subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, max(0, 0))); _injected_loop_counter --)
          {
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
    barrier();
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (0u & 184231u)) + 1, max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (0u & 184231u)) + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (0u & 184231u)) + 1)), _GLF_IDENTITY(1u, 0u + (1u)) * (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + 1))), _GLF_IDENTITY(uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY((subgroup_local_id) - (0u & 184231u), ~ (~ ((subgroup_local_id) - (0u & 184231u))))) + 1, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY((subgroup_local_id) - (0u & 184231u), ~ (~ ((subgroup_local_id) - (0u & 184231u))))) + 1)), 1u * (subgroup_local_id + 1))))), 1u * (_GLF_IDENTITY(uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (0u & 184231u)) + 1, 1u * (subgroup_local_id + 1))))), (uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) >> (0u >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (uint(_GLF_IDENTITY(4u, (4u) + 0u))) | 0u)))), _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) << 0u) - _GLF_IDENTITY((0u & 184231u), min((0u & 184231u), (_GLF_IDENTITY(0u & 184231u, 0u | (0u & 184231u)))))) + 1, 1u * (subgroup_local_id + 1)))))) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) >> 0u)) * 1u))))) % subgroup_size), ((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (0u & 184231u)) + 1, max(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) - (0u & 184231u), max((subgroup_local_id) - (0u & 184231u), (subgroup_local_id) - (0u & 184231u)))) + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (0u & 184231u)) + 1)), 1u * _GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((subgroup_local_id + 1))))), _GLF_IDENTITY(uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | _GLF_IDENTITY(0u, max(0u, 0u)))) - (0u & 184231u)) + 1, 1u * (subgroup_local_id + 1))))), 1u * (_GLF_IDENTITY(uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (0u & 184231u)) + 1, 1u * (subgroup_local_id + 1))))), (uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), (subgroup_local_id) - (0u & 184231u)) + 1, 1u * (subgroup_local_id + 1)))))) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) >> 0u)) * 1u))))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), clamp((subgroup_local_id), (subgroup_local_id), _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) ^ 0u))) - (0u & 184231u)) + 1, max(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), clamp(_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) >> 0u), (subgroup_local_id), (subgroup_local_id))) - (0u & 184231u)) + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (0u & 184231u)) + 1)), 1u * (subgroup_local_id + 1))), _GLF_IDENTITY(uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), (subgroup_local_id) - (0u & 184231u)) + 1, (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) ^ 0u) << 0u), (subgroup_local_id) - (0u & 184231u)) + 1 : _GLF_FUZZED(workgroup_size))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, 0u | (subgroup_local_id + 1)), max(_GLF_IDENTITY(subgroup_local_id + 1, 0u | (subgroup_local_id + 1)), _GLF_IDENTITY(subgroup_local_id + 1, 0u | (subgroup_local_id + 1))))))))), 1u * (_GLF_IDENTITY(uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (0u & 184231u)), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (_GLF_IDENTITY(0u & 184231u, (0u & 184231u) * 1u))))) + 1, 1u * (subgroup_local_id + 1))))), (uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), (subgroup_local_id) - (0u & 184231u)) + 1, 1u * (subgroup_local_id + 1)))))) << _GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) >> 0u)) * 1u, (_GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) >> 0u)) * 1u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) >> 0u)) * 1u, max((_GLF_IDENTITY(0u, (0u) >> 0u)) * 1u, (_GLF_IDENTITY(0u, (0u) >> 0u)) * 1u))), min(_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) >> 0u)) * 1u, max((_GLF_IDENTITY(0u, (0u) >> 0u)) * 1u, (_GLF_IDENTITY(0u, (0u) >> 0u)) * 1u))), (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) >> 0u)) * 1u, max((_GLF_IDENTITY(0u, (0u) >> 0u)) * 1u, (_GLF_IDENTITY(0u, (0u) >> 0u)) * 1u))), (true ? ~ (_GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) >> 0u)) * 1u, max((_GLF_IDENTITY(0u, (0u) >> 0u)) * 1u, (_GLF_IDENTITY(0u, (0u) >> 0u)) * 1u))) : _GLF_FUZZED(18242u)))) | 0u), _GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) >> 0u)) * 1u, max((_GLF_IDENTITY(0u, (0u) >> 0u)) * 1u, (_GLF_IDENTITY(0u, (0u) >> 0u)) * 1u))), uint(uvec4(~ (_GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) >> 0u)) * 1u, max((_GLF_IDENTITY(0u, (0u) >> 0u)) * 1u, (_GLF_IDENTITY(0u, (0u) >> 0u)) * 1u))), 1u, 1u, 0u)))))))) / 1u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (0u & 184231u)) + 1, max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (0u & 184231u)) + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (0u & 184231u)) + 1)), 1u * (subgroup_local_id + 1))), _GLF_IDENTITY(uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), (subgroup_local_id) - (0u & 184231u)) + 1, 1u * (subgroup_local_id + 1))))), 1u * (_GLF_IDENTITY(uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (0u & 184231u)) + 1, 1u * (subgroup_local_id + 1))))), (uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), (subgroup_local_id) - (0u & 184231u)) + 1, 1u * (subgroup_local_id + 1)))))) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) >> 0u)) * 1u))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (0u & 184231u)) + 1, max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (0u & 184231u)) + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (0u & 184231u)) + 1)), 1u * (subgroup_local_id + 1))), _GLF_IDENTITY(uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), (subgroup_local_id) - (0u & 184231u)) + 1, 1u * (subgroup_local_id + 1))))), 1u * (_GLF_IDENTITY(uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (0u & 184231u)) + 1, 1u * (subgroup_local_id + 1))))), (uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), (subgroup_local_id) - (0u & 184231u)) + 1, 1u * (subgroup_local_id + 1)))))) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) >> 0u)) * 1u)))))) | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (0u & 184231u)) + 1, max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (0u & 184231u)) + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (0u & 184231u)) + 1)), 1u * (subgroup_local_id + 1))), _GLF_IDENTITY(uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), (subgroup_local_id) - (0u & 184231u)) + 1, 1u * (subgroup_local_id + 1))))), 1u * (_GLF_IDENTITY(uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (0u & 184231u)) + 1, 1u * (subgroup_local_id + 1))))), (uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), (subgroup_local_id) - (0u & 184231u)) + 1, 1u * (subgroup_local_id + 1)))))) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) >> 0u)) * 1u))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (0u & 184231u)) + 1, max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (0u & 184231u)) + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (0u & 184231u)) + 1)), 1u * (subgroup_local_id + 1))), _GLF_IDENTITY(uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), (subgroup_local_id) - (0u & 184231u)) + 1, 1u * (subgroup_local_id + 1))))), 1u * (_GLF_IDENTITY(uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (0u & 184231u)) + 1, 1u * (subgroup_local_id + 1))))), (uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), (subgroup_local_id) - (0u & 184231u)) + 1, 1u * (subgroup_local_id + 1)))))) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) >> 0u)) * 1u)))))) | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (0u & 184231u)) + 1, max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (0u & 184231u)) + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (0u & 184231u)) + 1)), 1u * (subgroup_local_id + 1))), _GLF_IDENTITY(uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), (subgroup_local_id) - (0u & 184231u)) + 1, 1u * (subgroup_local_id + 1))))), 1u * (_GLF_IDENTITY(uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (0u & 184231u)) + 1, 1u * (subgroup_local_id + 1))))), (uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), (subgroup_local_id) - (0u & 184231u)) + 1, 1u * (subgroup_local_id + 1)))))) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) >> 0u)) * 1u))))))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) | 0u))), (subgroup_local_id) - (0u & 184231u)) + 1, _GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (0u & 184231u)) + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (0u & 184231u)) + 1), (max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (0u & 184231u)) + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (0u & 184231u)) + 1)) ^ 0u)), 1u * (subgroup_local_id + 1))), _GLF_IDENTITY(uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), (subgroup_local_id) - _GLF_IDENTITY((0u & 184231u), uint(uint((0u & 184231u))))) + 1, 1u * (subgroup_local_id + 1))))), 1u * (_GLF_IDENTITY(uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (0u & 184231u)) + 1, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - (0u & 184231u)) + 1) >> 0u), 1u * (subgroup_local_id + 1))))), (uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY((subgroup_local_id) - (0u & 184231u), (true ? _GLF_IDENTITY((subgroup_local_id) - (0u & 184231u), 0u + ((subgroup_local_id) - (0u & 184231u))) : _GLF_FUZZED(num_workgroup)))) + 1, 1u * (subgroup_local_id + 1)))))) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) >> 0u)) * 1u))))))))) << 0u))) % subgroup_size)) - 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), ((_GLF_WRAPPED_IF_FALSE(false))) || false))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     atomicStore(buf[virtual_gid], uint(1), _GLF_IDENTITY(_GLF_IDENTITY(4, (4) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))), (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(4, (_GLF_IDENTITY(false ? _GLF_FUZZED(-49767) : 4, _GLF_IDENTITY((0 ^ 0) ^ (_GLF_IDENTITY(false ? _GLF_FUZZED(-49767) : 4, (false ? _GLF_FUZZED(-49767) : 4) / 1)), _GLF_IDENTITY(0, (0) | _GLF_IDENTITY(0, (0) | 0)) ^ ((0 ^ 0) ^ (_GLF_IDENTITY(false ? _GLF_FUZZED(-49767) : 4, (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(-49767, (false ? _GLF_FUZZED(68974) : _GLF_IDENTITY(-49767, (_GLF_IDENTITY(-49767, (true ? -49767 : _GLF_FUZZED(-88058)))) - 0)))) : 4, ~ (~ (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(-49767, (false ? _GLF_FUZZED(68974) : _GLF_IDENTITY(-49767, (_GLF_IDENTITY(-49767, (true ? -49767 : _GLF_FUZZED(-88058)))) - 0)))) : 4, max(false ? _GLF_FUZZED(_GLF_IDENTITY(-49767, (false ? _GLF_FUZZED(68974) : _GLF_IDENTITY(-49767, (_GLF_IDENTITY(-49767, (true ? -49767 : _GLF_FUZZED(-88058)))) - 0)))) : 4, false ? _GLF_FUZZED(_GLF_IDENTITY(-49767, (false ? _GLF_FUZZED(68974) : _GLF_IDENTITY(-49767, (_GLF_IDENTITY(-49767, (true ? -49767 : _GLF_FUZZED(-88058)))) - 0)))) : 4)))))) / 1))))))) : _GLF_IDENTITY(_GLF_FUZZED(19414), (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) ^ (0 ^ 0)), ~ (~ (_GLF_IDENTITY(2, (2) ^ (0 ^ 0)))))), int(2))) ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(19414), max(_GLF_FUZZED(19414), _GLF_FUZZED(19414)))), int(ivec4((_GLF_IDENTITY(_GLF_FUZZED(19414), max(_GLF_FUZZED(19414), _GLF_FUZZED(19414)))), 0, 0, (0 << _GLF_IDENTITY(int(3), int(3))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(int(true ? 4 : _GLF_IDENTITY(_GLF_FUZZED(19414), _GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(38727)))), int(2)) : _GLF_FUZZED(-55179)))), _GLF_IDENTITY(min(_GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), 0 | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), int(int(0 << _GLF_IDENTITY(int(2), int(2)))))))), 0 + ((0 << _GLF_IDENTITY(int(2), int(2))))), (_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2)))), max(min(_GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), 0 | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), int(int(0 << _GLF_IDENTITY(int(2), int(2)))))))), 0 + ((0 << _GLF_IDENTITY(int(2), int(2))))), (_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2)))), min(_GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), 0 | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), int(int(0 << _GLF_IDENTITY(int(2), int(2)))))))), 0 + ((0 << _GLF_IDENTITY(int(2), int(2))))), (_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2))))))) ^ (_GLF_IDENTITY(_GLF_FUZZED(19414), max(_GLF_FUZZED(19414), _GLF_FUZZED(_GLF_IDENTITY(19414, ~ (~ (19414)))))))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(int(true ? 4 : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(19414), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_FUZZED(19414), int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (ivec2(_GLF_FUZZED(19414), int(_GLF_ZERO(0.0, injectionSwitch.x))))))), ~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(ivec2(_GLF_FUZZED(19414), int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (ivec2(_GLF_FUZZED(19414), int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), max(~ (int(_GLF_IDENTITY(ivec2(_GLF_FUZZED(19414), int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (ivec2(_GLF_FUZZED(19414), int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), ~ (int(_GLF_IDENTITY(ivec2(_GLF_FUZZED(19414), int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (ivec2(_GLF_FUZZED(19414), int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))))), _GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (true ? _GLF_IDENTITY(int(2), int(2)) : _GLF_FUZZED(-55179)))), min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, 1 * (2))) - 0)), int(2)), max(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, 1 * (2))) - 0)), int(2)), (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, 1 * (2))) - 0)), int(2))) << 0), 0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, 1 * (2))) - 0)), int(2)))), 0 | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), int(int(0 << _GLF_IDENTITY(int(2), int(2)))))))), _GLF_IDENTITY(0, (0) >> 0) + ((0 << _GLF_IDENTITY(int(2), int(2))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) | (int(2)))) ^ 0))))))) ^ (_GLF_IDENTITY(_GLF_FUZZED(19414), max(_GLF_IDENTITY(_GLF_FUZZED(19414), max(_GLF_FUZZED(19414), _GLF_FUZZED(19414))), _GLF_FUZZED(19414)))))), (0 ^ 0) | (int(true ? 4 : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(19414), int(_GLF_IDENTITY(ivec2(_GLF_FUZZED(19414), int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (ivec2(_GLF_FUZZED(19414), int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (true ? _GLF_IDENTITY(int(2), int(2)) : _GLF_FUZZED(-55179))), (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (true ? _GLF_IDENTITY(int(2), int(2)) : _GLF_FUZZED(-55179)))) >> 0)), _GLF_IDENTITY(min(_GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, 1 * (2))) - 0)), int(2)), 0 | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), int(int(0 << _GLF_IDENTITY(int(2), int(2)))))))), 0 + ((0 << _GLF_IDENTITY(int(2), int(2))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2)))))), min(_GLF_IDENTITY(min(_GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, 1 * (2))) - 0)), int(2)), 0 | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), int(int(0 << _GLF_IDENTITY(int(2), int(2)))))))), 0 + ((0 << _GLF_IDENTITY(int(2), int(2))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2)))))), (min(_GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, 1 * (2))) - 0)), int(2)), 0 | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), int(int(0 << _GLF_IDENTITY(int(2), int(2)))))))), 0 + ((0 << _GLF_IDENTITY(int(2), int(2))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2))))))) << 0), _GLF_IDENTITY(min(_GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, 1 * (2))) - 0)), int(2)), 0 | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), int(int(0 << _GLF_IDENTITY(int(2), int(2)))))))), 0 + ((0 << _GLF_IDENTITY(int(2), int(2))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2)))))), min(_GLF_IDENTITY(min(_GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, 1 * (2))) - 0)), int(2)), 0 | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), int(int(0 << _GLF_IDENTITY(int(2), int(2)))))))), 0 + ((0 << _GLF_IDENTITY(int(2), int(2))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2)))))), clamp(min(_GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, 1 * (2))) - 0)), int(2)), 0 | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), int(int(0 << _GLF_IDENTITY(int(2), int(2)))))))), 0 + ((0 << _GLF_IDENTITY(int(2), int(2))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2)))))), min(_GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, 1 * (2))) - 0)), int(2)), 0 | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), int(int(0 << _GLF_IDENTITY(int(2), int(2)))))))), 0 + ((0 << _GLF_IDENTITY(int(2), int(2))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2)))))), min(_GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, 1 * (2))) - 0)), int(2)), 0 | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), int(int(0 << _GLF_IDENTITY(int(2), int(2)))))))), 0 + ((0 << _GLF_IDENTITY(int(2), int(2))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2)))))))), _GLF_IDENTITY(min(_GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, 1 * (2))) - 0)), int(2)), 0 | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), int(int(0 << _GLF_IDENTITY(int(2), int(2)))))))), 0 + ((0 << _GLF_IDENTITY(int(2), int(2))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2)))))), max(min(_GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, 1 * (2))) - 0)), int(2)), 0 | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), int(int(0 << _GLF_IDENTITY(int(2), int(2)))))))), 0 + ((0 << _GLF_IDENTITY(int(2), int(2))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2)))))), min(_GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, 1 * (2))) - 0)), int(2)), 0 | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), int(int(0 << _GLF_IDENTITY(int(2), int(2)))))))), 0 + ((0 << _GLF_IDENTITY(int(2), int(2))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2))))))))))))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(19414), max(_GLF_IDENTITY(_GLF_FUZZED(19414), max(_GLF_FUZZED(19414), _GLF_FUZZED(19414))), _GLF_FUZZED(19414))), int(int(_GLF_IDENTITY(_GLF_FUZZED(19414), max(_GLF_IDENTITY(_GLF_FUZZED(19414), max(_GLF_FUZZED(19414), _GLF_FUZZED(19414))), _GLF_FUZZED(19414)))))))))))), clamp(int(int(true ? 4 : _GLF_IDENTITY(_GLF_FUZZED(19414), _GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (true ? _GLF_IDENTITY(int(2), int(2)) : _GLF_FUZZED(-55179)))), min(_GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), 0 | (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) ^ 0), int(2)), int(int(0 << _GLF_IDENTITY(int(2), int(2)))))))), 0 + ((0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2))))))), (_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (false ? _GLF_FUZZED(-14735) : _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) ^ 0)))))))) ^ (_GLF_IDENTITY(_GLF_FUZZED(19414), max(_GLF_FUZZED(19414), _GLF_FUZZED(19414))))))), int(int(true ? 4 : _GLF_IDENTITY(_GLF_FUZZED(19414), _GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (true ? _GLF_IDENTITY(int(2), int(2)) : _GLF_FUZZED(-55179)))), min(_GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(2, int(ivec4(2, 0, 1, 0)))), ~ (~ (~ (_GLF_IDENTITY(2, int(ivec4(2, 0, 1, 0))))))))), 2, 2))), int(_GLF_IDENTITY(2, 0 | (_GLF_IDENTITY(2, min(_GLF_IDENTITY(2, int(ivec3(2, 1, 1))), 2)))))), 0 | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), int(int(0 << _GLF_IDENTITY(int(2), int(2)))))))), 0 + ((0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2))))))), (_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, 0 | (_GLF_IDENTITY(2, 0 + (2))))))))) ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(19414), max(_GLF_FUZZED(19414), _GLF_FUZZED(19414)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(19414), max(_GLF_FUZZED(19414), _GLF_FUZZED(19414)))), (true ? (_GLF_IDENTITY(_GLF_FUZZED(19414), max(_GLF_FUZZED(19414), _GLF_FUZZED(19414)))) : _GLF_FUZZED(-34050))), (_GLF_IDENTITY(_GLF_FUZZED(19414), max(_GLF_FUZZED(19414), _GLF_FUZZED(19414)))), (_GLF_IDENTITY(_GLF_FUZZED(19414), max(_GLF_FUZZED(19414), _GLF_FUZZED(19414))))))))), int(int(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) ? 4 : _GLF_IDENTITY(_GLF_FUZZED(19414), _GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, 1 * (2)))), (true ? _GLF_IDENTITY(int(2), int(2)) : _GLF_FUZZED(-55179)))), min(_GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) | _GLF_IDENTITY((2), max((2), (2))))), int(2)), 0 | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), int(int(0 << _GLF_IDENTITY(int(2), int(2)))))))), 0 + ((0 << _GLF_IDENTITY(int(2), int(2))))), (_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(2), int(2))))) ^ (_GLF_IDENTITY(_GLF_FUZZED(19414), _GLF_IDENTITY(max(_GLF_FUZZED(19414), _GLF_FUZZED(19414)), clamp(max(_GLF_FUZZED(19414), _GLF_FUZZED(19414)), max(_GLF_FUZZED(19414), _GLF_FUZZED(19414)), max(_GLF_FUZZED(19414), _GLF_FUZZED(19414)))))))))))) - 0), ~ (~ (_GLF_IDENTITY(int(int(true ? 4 : _GLF_IDENTITY(_GLF_FUZZED(19414), _GLF_IDENTITY(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(2), int(2))), min(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (int(2))))), 0 + ((0 << _GLF_IDENTITY(int(2), int(2))))), (0 << _GLF_IDENTITY(int(2), int(2))))) ^ (_GLF_IDENTITY(_GLF_FUZZED(19414), max(_GLF_IDENTITY(_GLF_FUZZED(19414), (_GLF_FUZZED(19414)) << 0), _GLF_FUZZED(19414)))), (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(2), int(2))), min(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (int(2)), (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (int(2))) - int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0 + ((_GLF_IDENTITY(0, int(int(0))) << _GLF_IDENTITY(int(2), int(2))))), (0 << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) / int(_GLF_ONE(1.0, injectionSwitch.y)))))))) ^ (_GLF_IDENTITY(_GLF_FUZZED(19414), max(_GLF_IDENTITY(_GLF_FUZZED(19414), (_GLF_FUZZED(19414)) << 0), _GLF_FUZZED(19414))))) | 0)))), min(int(int(true ? 4 : _GLF_IDENTITY(_GLF_FUZZED(19414), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), _GLF_IDENTITY(int(2), int(ivec3(int(2), 0, 1))))))), min(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), ~ (~ (int(2)))), int(2))), 0 + ((0 << _GLF_IDENTITY(int(2), int(2))))), (_GLF_IDENTITY(0, min(0, 0)) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(max(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2))), max(_GLF_IDENTITY(max(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2))), _GLF_IDENTITY(int(ivec3(max(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2))), 0, 0)), ~ (~ (int(ivec3(max(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2))), 0, 0)))))), _GLF_IDENTITY(max(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2))), ~ (~ (max(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2)))))))))) + 0)))) ^ (_GLF_IDENTITY(_GLF_FUZZED(19414), max(_GLF_IDENTITY(_GLF_FUZZED(19414), 0 ^ (_GLF_FUZZED(19414))), _GLF_FUZZED(19414))))))), int(int(true ? _GLF_IDENTITY(4, (4) | (4)) : _GLF_IDENTITY(_GLF_FUZZED(19414), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(2), int(2))), min(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), ~ (~ (int(2)))), int(2))), _GLF_IDENTITY(0 + ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) / 1))), (_GLF_IDENTITY(0 + ((0 << _GLF_IDENTITY(int(2), int(2)))), (0 + ((0 << _GLF_IDENTITY(int(2), int(2))))) / 1)) + _GLF_IDENTITY(0, (0) | 0))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> 0), int(2)), (0 >> _GLF_IDENTITY(int(5), int(5))) ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) >> 0), int(2))))))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(19414), min(_GLF_FUZZED(19414), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(19414), clamp(_GLF_FUZZED(19414), _GLF_IDENTITY(_GLF_FUZZED(19414), min(_GLF_FUZZED(19414), _GLF_FUZZED(19414))), _GLF_FUZZED(19414))), max(_GLF_FUZZED(_GLF_IDENTITY(19414, ~ (~ (_GLF_IDENTITY(19414, min(19414, _GLF_IDENTITY(19414, clamp(19414, 19414, 19414)))))))), _GLF_IDENTITY(_GLF_FUZZED(19414), (true ? _GLF_FUZZED(19414) : _GLF_FUZZED(-51984))))))), max(_GLF_FUZZED(19414), _GLF_FUZZED(_GLF_IDENTITY(19414, (_GLF_IDENTITY(19414, ~ (~ (19414)))) * 1)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(19414), min(_GLF_FUZZED(19414), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(19414), clamp(_GLF_FUZZED(19414), _GLF_IDENTITY(_GLF_FUZZED(19414), min(_GLF_FUZZED(19414), _GLF_FUZZED(19414))), _GLF_FUZZED(19414))), max(_GLF_FUZZED(_GLF_IDENTITY(19414, ~ (~ (_GLF_IDENTITY(19414, min(19414, _GLF_IDENTITY(19414, clamp(19414, 19414, 19414)))))))), _GLF_IDENTITY(_GLF_FUZZED(19414), (true ? _GLF_FUZZED(19414) : _GLF_FUZZED(-51984))))))), max(_GLF_FUZZED(19414), _GLF_FUZZED(_GLF_IDENTITY(19414, (_GLF_IDENTITY(19414, ~ (~ (19414)))) * 1)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(19414), min(_GLF_FUZZED(19414), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(19414), clamp(_GLF_FUZZED(19414), _GLF_IDENTITY(_GLF_FUZZED(19414), min(_GLF_FUZZED(19414), _GLF_FUZZED(19414))), _GLF_FUZZED(19414))), max(_GLF_FUZZED(_GLF_IDENTITY(19414, ~ (~ (_GLF_IDENTITY(19414, min(19414, _GLF_IDENTITY(19414, clamp(19414, 19414, 19414)))))))), _GLF_IDENTITY(_GLF_FUZZED(19414), (true ? _GLF_FUZZED(19414) : _GLF_FUZZED(-51984))))))), max(_GLF_FUZZED(19414), _GLF_FUZZED(_GLF_IDENTITY(19414, (_GLF_IDENTITY(19414, ~ (~ (19414)))) * 1))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(19414), min(_GLF_FUZZED(19414), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(19414), clamp(_GLF_FUZZED(19414), _GLF_IDENTITY(_GLF_FUZZED(19414), min(_GLF_FUZZED(19414), _GLF_FUZZED(19414))), _GLF_FUZZED(19414))), max(_GLF_FUZZED(_GLF_IDENTITY(19414, ~ (~ (_GLF_IDENTITY(19414, min(19414, _GLF_IDENTITY(19414, clamp(19414, 19414, 19414)))))))), _GLF_IDENTITY(_GLF_FUZZED(19414), (true ? _GLF_FUZZED(19414) : _GLF_FUZZED(-51984))))))), max(_GLF_FUZZED(19414), _GLF_FUZZED(_GLF_IDENTITY(19414, (_GLF_IDENTITY(19414, ~ (~ (19414)))) * 1)))))) : _GLF_FUZZED(-59090))))))))))))))), 64, 4);
     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)), (_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0))) && true); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-8665.3109, 906.492)))).y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(max(injectionSwitch, injectionSwitch), vec2(0.0, 0.0) + (max(injectionSwitch, injectionSwitch))), min(max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch)))).y))) || _GLF_IDENTITY(false, ! (! (false))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))
              barrier();
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 1.0, 1.0, 1.0, 0.0, length(vec2(0.0, 0.0)), 1.0))).y))))))
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   do
                    {
                     for(int _injected_loop_counter = (0 & -20435); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)))) && true))
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
                     barrier();
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true)))), (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || _GLF_IDENTITY((! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true)))), (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, true && (false))), bool(bvec4(bool(_GLF_IDENTITY(false, true && (false))), true, false, true)))))), true))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! ((! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true)))), (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, true && (false))), bool(bvec4(bool(_GLF_IDENTITY(false, true && (false))), true, false, true)))))), true))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_DEAD(false)), true, true, false))), false, false, _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec3(! (injectionSwitch.x > injectionSwitch.y), false, true)))))) || false), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 else
                  {
                  }
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 1.0, 0.0)), min(float(mat2(injectionSwitch.x, 0.0, 1.0, 0.0)), float(mat2(injectionSwitch.x, 0.0, 1.0, 0.0))))) > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 barrier();
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       do
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               if(_GLF_DEAD(false))
                                {
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                  {
                                   barrier();
                                  }
                                }
                               barrier();
                              }
                             else
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                              }
                            }
                          }
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                              {
                               barrier();
                              }
                            }
                           barrier();
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                         do
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           else
                            {
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             for(int _injected_loop_counter = (0 & -32586); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                              {
                               do
                                {
                                 barrier();
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                            }
                           do
                            {
                             barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)), bool(bvec4(bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)), false, true, true))))));
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
                  }
                 else
                  {
                  }
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((float(-82187) * -17.62))), vec2(_GLF_FUZZED(_GLF_IDENTITY(-1.8, clamp(-1.8, -1.8, _GLF_IDENTITY(-1.8, (-1.8) - 0.0)))), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (false) || false), true)))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))))))))
        barrier();
       barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)) + 1, clamp(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u ^ (subgroup_local_id), uint(uvec3(0u ^ (subgroup_local_id), 0u, 0u)))) + 1, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 1u, 1u))), _GLF_IDENTITY(0u ^ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(1u), uint(1u))) | (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))), ~ (_GLF_IDENTITY(~ ((0u << _GLF_IDENTITY(uint(1u), uint(1u))) | (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))), 0u ^ (~ ((0u << _GLF_IDENTITY(uint(1u), uint(1u))) | (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))))))))))))) + 1, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))) && true) ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) + 0u) ^ (subgroup_local_id), (_GLF_IDENTITY(0u ^ (subgroup_local_id), (0u ^ (subgroup_local_id)) | (0u ^ _GLF_IDENTITY((subgroup_local_id), _GLF_IDENTITY(0u, (0u) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) + ((subgroup_local_id)))))) / (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), 0u | (uint(_GLF_IDENTITY(1u, uint(uint(_GLF_IDENTITY(1u, 0u | (1u)))))))))) >> _GLF_IDENTITY(uint(1u), uint(1u)), ((1u << _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), 0u | (uint(_GLF_IDENTITY(1u, uint(uint(_GLF_IDENTITY(1u, 0u | (1u)))))))))) >> _GLF_IDENTITY(uint(1u), uint(1u))) | ((1u << _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), 0u | (uint(_GLF_IDENTITY(1u, uint(uint(_GLF_IDENTITY(1u, 0u | (1u)))))))))) >> _GLF_IDENTITY(uint(1u), uint(1u))))))) + 1, uint(uvec4(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)) + _GLF_IDENTITY(1, (1) | 0), 1u, 0u, 0u))))) < _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)) / 1u), (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)) / _GLF_IDENTITY(1u, (1u) ^ 0u))) | (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u))))) | (0u << _GLF_IDENTITY(uint(3u), uint(3u))))))) / 1u, max((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)))), clamp(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)))), _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u))))) ^ 0u), ~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u))))))) | (0u << _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (3u) | (_GLF_IDENTITY(3u, (3u) | (3u))))))))))) / 1u, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u))))) | (0u << _GLF_IDENTITY(uint(3u), uint(3u))))))) / 1u)))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (0 << _GLF_IDENTITY(int(3), int(3))) | (1)), 1, _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), 0 | (_GLF_IDENTITY(1, max(1, 1)))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) | 0), 1))), 1)))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
      }
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((mat2(-1.1, -9.7, -73.72, 76.65) * vec2(1802.0020, -62.31))))).y))));
        }
       else
        {
        }
      }
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           subgroupAll(false);
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 & -997) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7)))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-0.7)), bool(false))), 0.0, 0.0, 0.0, sqrt(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), sqrt(0.0)))).x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) ^ 0)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, false)))), ! (! (! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, false)))), ! (! (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))))))) || false))
          {
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
      }
     else
      {
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 0.0, 1.0, 1.0)))))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, _GLF_IDENTITY(length(vec2(0.0, 0.0)), mix(float(_GLF_FUZZED(-5.4)), float(length(vec2(0.0, 0.0))), bool(true))), 0.0, 1.0, 1.0, 0.0))).x > injectionSwitch.y)))) || false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)))))
            barrier();
          }
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), min(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     else
      {
      }
    }
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(2, 0), min(_GLF_IDENTITY(ivec2(2, 0), max(ivec2(2, 0), ivec2(2, 0))), ivec2(2, 0)))), (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(2, 0), min(_GLF_IDENTITY(ivec2(2, 0), max(ivec2(2, 0), ivec2(2, 0))), ivec2(2, 0)))), (int(_GLF_IDENTITY(ivec2(2, 0), min(_GLF_IDENTITY(ivec2(2, 0), max(ivec2(2, 0), ivec2(2, 0))), ivec2(2, 0))))) - 0)) << 0)), 2, 2))) - 0)), _GLF_IDENTITY(4, (4) >> 0), 64, _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), clamp(4, 4, 4))) << 0, (_GLF_IDENTITY((_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3((_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0, 1, 1), max(ivec3((_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), clamp(4, 4, 4))) << 0, 1, 1), ivec3((_GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, ~ (~ (4)))))))) << 0, 1, 1)))), (int(_GLF_IDENTITY(ivec3((_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0, 1, 1), max(ivec3((_GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), clamp(4, 4, 4))) << 0, 1, 1), ivec3((_GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, ~ (~ (4)))))))) << 0, 1, 1))))) | 0))) | (_GLF_IDENTITY((_GLF_IDENTITY(4, clamp(4, 4, 4))), (_GLF_IDENTITY((_GLF_IDENTITY(4, clamp(4, 4, 4))), (_GLF_IDENTITY((_GLF_IDENTITY(4, clamp(4, 4, 4))), ((_GLF_IDENTITY(4, clamp(4, 4, 4)))) ^ 0)) >> (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0), _GLF_IDENTITY(int(5), 0 ^ (int(5))))), int(5))))) * 1) << 0)), min(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0, (_GLF_IDENTITY((_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0, int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3((_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0, 1, 1), max(ivec3((_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0, 1, 1), ivec3((_GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, ~ (~ (4)))))))) << 0, 1, 1))), (false ? _GLF_FUZZED(ivec3(87406, -35576, 77208)) : _GLF_IDENTITY(_GLF_IDENTITY(ivec3((_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0, 1, 1), max(ivec3((_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0, 1, 1), ivec3((_GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, ~ (~ (4)))))))) << 0, 1, 1))), (_GLF_IDENTITY(ivec3((_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0, 1, 1), max(ivec3((_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0, 1, _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(87392) : 1))))), ivec3((_GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, int(ivec2(4, 0))))))))))) << 0, 1, 1)))) - ivec3(0, 0, 0))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) << 0)) / 1)))), (_GLF_IDENTITY((_GLF_IDENTITY(4, clamp(4, 4, 4))), (_GLF_IDENTITY((_GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, int(ivec2(4, 1)))))), ((_GLF_IDENTITY(4, clamp(4, 4, 4)))) ^ 0)) >> (0 << _GLF_IDENTITY(int(5), int(5))))) * 1) << 0)), (_GLF_IDENTITY((_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0, (_GLF_IDENTITY((_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0, int(_GLF_IDENTITY(ivec3((_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0, 1, 1), max(ivec3((_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0, 1, 1), ivec3((_GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(_GLF_IDENTITY(4, (0 ^ 1) * (4)), (4) | (_GLF_IDENTITY(4, ~ _GLF_IDENTITY((~ (4)), ((~ (4))) / 1))))))) << 0, 1, 1)))))) | (_GLF_IDENTITY((_GLF_IDENTITY(4, clamp(4, 4, 4))), (_GLF_IDENTITY((_GLF_IDENTITY(4, clamp(4, 4, 4))), (_GLF_IDENTITY((_GLF_IDENTITY(4, clamp(4, 4, 4))), ((_GLF_IDENTITY(4, clamp(4, 4, 4)))) ^ 0)) >> (0 << _GLF_IDENTITY(int(5), int(5))))) * 1) << 0))) >> 0), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0, (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(4, (4) >> 0), clamp(4, 4, 4))) << 0, int(_GLF_IDENTITY(ivec3((_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0, 1, 1), max(ivec3((_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0, 1, 1), ivec3((_GLF_IDENTITY(_GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, 0 | (4)))), clamp(4, 4, _GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, 0 ^ (_GLF_IDENTITY(4, (4) | 0)))) + 0), (4) | (_GLF_IDENTITY(4, ~ (~ (4)))))))) << 0, 1, 1)))))) | (_GLF_IDENTITY((_GLF_IDENTITY(4, clamp(4, 4, 4))), (_GLF_IDENTITY((_GLF_IDENTITY(4, clamp(4, 4, 4))), (_GLF_IDENTITY((_GLF_IDENTITY(4, clamp(4, 4, 4))), ((_GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, (false ? _GLF_FUZZED(17168) : 4)))))) ^ 0)) >> (0 << _GLF_IDENTITY(int(5), int(5))))) * 1) << 0)), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, max(4, 4)), 4, 4)), clamp(4, 4, 4))) << 0, (_GLF_IDENTITY((_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0, int(_GLF_IDENTITY(ivec3((_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0, 1, 1), max(ivec3((_GLF_IDENTITY(_GLF_IDENTITY(4, clamp(4, 4, 4)), (false ? _GLF_FUZZED(53904) : _GLF_IDENTITY(_GLF_IDENTITY(4, clamp(4, 4, 4)), max(_GLF_IDENTITY(4, clamp(4, 4, 4)), _GLF_IDENTITY(_GLF_IDENTITY(4, clamp(4, 4, 4)), 0 | (_GLF_IDENTITY(4, clamp(4, 4, 4))))))))) << 0, 1, 1), _GLF_IDENTITY(ivec3((_GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, ~ (~ _GLF_IDENTITY((4), clamp((4), (4), _GLF_IDENTITY((4), max((4), (4)))))))))))) << 0, 1, 1), (ivec3((_GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, ~ (~ _GLF_IDENTITY((4), clamp((4), (4), _GLF_IDENTITY((4), max((4), (4)))))))))))) << 0, 1, 1)) | ivec3(0, 0, 0))))))) | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, (4) + 0)))), ((_GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, (4) + 0))))) / 1), (_GLF_IDENTITY((_GLF_IDENTITY(4, clamp(4, 4, 4))), (_GLF_IDENTITY((_GLF_IDENTITY(4, clamp(4, 4, 4))), ((_GLF_IDENTITY(4, clamp(4, 4, 4)))) ^ 0)) >> (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5))))) * 1) << 0))) | 0)))), 4)));
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && true)))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, false, true)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   subgroupAll(true);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
