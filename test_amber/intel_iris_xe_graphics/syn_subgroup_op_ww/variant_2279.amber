#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       return;
      }
    }
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(workgroup_id))), (subgroup_local_id) >> 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(! (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(40.71)), float(injectionSwitch.y), bool(true))))))), false))))), bool(bvec4(false, true, false, true)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), (bool(bvec4(false, false, false, true))) && true))))
      return;
    }
   else
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = (1 & _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), min(clamp(1, 1, 1), _GLF_IDENTITY(clamp(1, 1, 1), (false ? _GLF_FUZZED(49563) : clamp(1, 1, 1)))))), _GLF_IDENTITY((false ? _GLF_FUZZED(-47281) : 1), ((false ? _GLF_FUZZED(-47281) : 1)) + 0)), 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, max(0, 0))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
  }
 else
  {
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) & -98879)); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) | (1))))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false))))
      return;
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, ! (! (true))) && (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, ~ (~ (1)))); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            break;
           break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-100.885), _GLF_FUZZED(3.1)), bvec2(false, false))).y))))
                return;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              break;
             continue;
            }
          }
         return;
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              continue;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            {
             for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               return;
              }
            }
          }
        }
      }
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      break;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec2(_GLF_IDENTITY(false, false || (false)), false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec2(_GLF_IDENTITY(false, false || (false)), false))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec2(_GLF_IDENTITY(false, false || (false)), false))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec2(_GLF_IDENTITY(false, false || (false)), false))), false), false, true))))))))))
    {
    }
   else
    {
     do
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) / 1.0), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             atomicStore(buf[virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, max(4, 4)));
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true))))))
            break;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_LOOP(false)))))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(ivec2(int(1), 1), min(_GLF_IDENTITY(ivec2(int(1), 1), ivec2(ivec3(ivec2(int(1), 1), 1))), _GLF_IDENTITY(ivec2(int(1), _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1)), (int(ivec4(1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1))) + 0))), (ivec2(int(1), 1)) / ivec2(1, 1)))))), _GLF_IDENTITY(int(1), (int(1)) ^ (0 >> _GLF_IDENTITY(int(7), int(7)))))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       continue;
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false), false)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             do
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), false))), (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                        return;
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        return;
                       do
                        {
                         return;
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               return;
                              }
                            }
                           return;
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           break;
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_IDENTITY(subgroup_local_id + 1, 0u + (_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)))) < subgroup_size)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) | 0), _GLF_IDENTITY(1, (1) + 0))), (_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) | 0), _GLF_IDENTITY(1, (1) + 0)))) - 0)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), (clamp(injectionSwitch, injectionSwitch, injectionSwitch)) * sqrt(vec2(1.0, 1.0))))[0], injectionSwitch[0])), min(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY((injectionSwitch[0]) / 1.0, (true ? _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, _GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 1.0, 0.0, 1.0, 0.0, round(length(normalize(1.0))), 0.0)))))[0]), ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, _GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 1.0, 0.0, 1.0, 0.0, round(length(normalize(1.0))), 0.0)))))[0])) * determinant(mat4(round(length(normalize(vec3(1.0, 1.0, 1.0)))), abs(0.0), 0.0, length(vec2(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0))) / 1.0, max((injectionSwitch[0]) / 1.0, _GLF_IDENTITY((injectionSwitch[0]) / _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(456.125) : 1.0)), ((injectionSwitch[0]) / 1.0) / 1.0))) : _GLF_FUZZED((mat3x2(-408.782, 20.76, -935.960, -460.391, 29.66, -1.6) , 8103.6104))))), _GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(4412.7303) : injectionSwitch[0])))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))[1]), vec2(mat3x2(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), (clamp(injectionSwitch, injectionSwitch, injectionSwitch)) * sqrt(vec2(1.0, 1.0))))[0], injectionSwitch[0])), min(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY((injectionSwitch[0]) / 1.0, (true ? _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, _GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 1.0, 0.0, 1.0, 0.0, round(length(normalize(1.0))), 0.0)))))[0]), ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, _GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 1.0, 0.0, 1.0, 0.0, round(length(normalize(1.0))), 0.0)))))[0])) * determinant(mat4(round(length(normalize(vec3(1.0, 1.0, 1.0)))), abs(0.0), 0.0, length(vec2(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0))) / 1.0, max((injectionSwitch[0]) / 1.0, _GLF_IDENTITY((injectionSwitch[0]) / _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(456.125) : 1.0)), ((injectionSwitch[0]) / 1.0) / 1.0))) : _GLF_FUZZED((mat3x2(-408.782, 20.76, -935.960, -460.391, 29.66, -1.6) , 8103.6104))))), _GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(4412.7303) : injectionSwitch[0])))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))[1]), 0.0, sqrt(0.0), 1.0, 1.0))))) * mat2(1.0)).x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-477.315) : injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-4.5)), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       return;
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   break;
                  }
                 for(int _injected_loop_counter = _GLF_IDENTITY((1 & int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(1.9, 13.68), (vec2(1.9, 13.68)) * mat2(1.0))))).y))), (true ? (1 & int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(vec2(1.9, 13.68))), mix(vec2(((true ? injectionSwitch : _GLF_FUZZED(vec2(1.9, 13.68))))[0], _GLF_FUZZED(-1.3)), vec2(_GLF_FUZZED(-3006.3647), ((_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(1.9, 13.68), mat2(1.0) * (vec2(1.9, 13.68)))), mix(vec2((true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(1.9, 13.68), mat2(1.0) * (vec2(1.9, 13.68)))))[0], (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(1.9, 13.68), mat2(1.0) * (vec2(1.9, 13.68)))))[1]), vec2(_GLF_FUZZED(-47.84), _GLF_FUZZED(55.00)), bvec2(false, false)))))[1]), bvec2(false, true)))).y))) : _GLF_FUZZED(19372))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    return;
                   for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) >> int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, (0 ^ 0) ^ (5))), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x, (false ? _GLF_FUZZED(-1.9) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x))), _GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, 1.0 * (0.0)), injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(_GLF_IDENTITY(mat2x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0), transpose(transpose(mat2x4(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))))))))) - 0.0)) - 0.0))))); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(false))
                          continue;
                         do
                          {
                           for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ _GLF_IDENTITY(1, (false ? _GLF_FUZZED(94410) : 1))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((0 ^ _GLF_IDENTITY(1, (false ? _GLF_FUZZED(94410) : 1)))), min(~ ((0 ^ _GLF_IDENTITY(1, (false ? _GLF_FUZZED(94410) : 1)))), ~ ((0 ^ _GLF_IDENTITY(1, (false ? _GLF_FUZZED(94410) : 1)))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ ((0 ^ _GLF_IDENTITY(1, (false ? _GLF_FUZZED(94410) : 1)))), min(~ ((0 ^ _GLF_IDENTITY(1, (false ? _GLF_FUZZED(94410) : 1)))), ~ ((0 ^ _GLF_IDENTITY(1, (false ? _GLF_FUZZED(94410) : 1)))))), (_GLF_IDENTITY(~ ((0 ^ _GLF_IDENTITY(1, (false ? _GLF_FUZZED(94410) : 1)))), min(~ ((0 ^ _GLF_IDENTITY(1, (false ? _GLF_FUZZED(94410) : 1)))), ~ ((0 ^ _GLF_IDENTITY(1, (false ? _GLF_FUZZED(94410) : 1))))))) - 0)) * 1))); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false), bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false))))), false || (bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false), bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false)))))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(false))
                              break;
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 return;
                                }
                               else
                                {
                                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))
                                  continue;
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     if(_GLF_DEAD(false))
                                      return;
                                    }
                                   continue;
                                  }
                                }
                              }
                             atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (next_virtual_gid))], uint(2), 4, 64, _GLF_IDENTITY(4, clamp(4, 4, 4)));
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))), true && (injectionSwitch.x > injectionSwitch.y))))))
                      return;
                    }
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    return;
                   continue;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((vec3(5.1, -8.9, -1378.7472) * mat2x3(523.775, -0.7, -2.2, 332.549, 70.51, 887.162))))).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, length(abs(0.0)), 1.0, determinant(mat4(abs(0.0), 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0), transpose(transpose(_GLF_IDENTITY(mat4x3(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, length(abs(0.0)), 1.0, determinant(mat4(abs(0.0), 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0), mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4x3(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, length(abs(0.0)), 1.0, determinant(mat4(abs(0.0), 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0)))))))).y)))))))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
                continue;
              }
             else
              {
              }
            }
          }
         else
          {
          }
         do
          {
           if(_GLF_DEAD(false))
            return;
           subgroupAll(false);
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), false, true)))))), false, true)))), bvec3(bvec4(bvec3(false, false, true), false)))), false || (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true && (false), true && (true && (false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (! (bool(bvec4(_GLF_IDENTITY(true && (false), true && (true && (false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))), _GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), false, true)))), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(true, false || (true))), false)))))))));
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)))))
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0)))); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (_GLF_IDENTITY(true, bool(bvec3(true, false, false))) ? 1 : _GLF_FUZZED((_injected_loop_counter - _injected_loop_counter))))))); _injected_loop_counter ++)
              {
               do
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(-56836) : int(0))), ~ (~ (_GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(-56836) : int(0)))))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(int(int(0)))), min(_GLF_IDENTITY(int(0), int(int(int(0)))), _GLF_IDENTITY(int(0), int(int(int(0))))))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           atomicStore(buf[next_virtual_gid], uint(2), 4, _GLF_IDENTITY(64, (false ? _GLF_FUZZED(99121) : _GLF_IDENTITY(64, (64) | (_GLF_IDENTITY(_GLF_IDENTITY(64, (64) >> (1 ^ 1)), max(64, 64)))))), _GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, (_GLF_IDENTITY(true ? 4 : _GLF_FUZZED((-355 ^ -40513)), ~ (~ (_GLF_IDENTITY(true ? 4 : _GLF_FUZZED((-355 ^ -40513)), (_GLF_IDENTITY(true ? 4 : _GLF_FUZZED((-355 ^ -40513)), min(true ? 4 : _GLF_FUZZED((-355 ^ -40513)), true ? 4 : _GLF_FUZZED((-355 ^ -40513))))) << 0)))))))));
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         subgroupAll(true);
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0), _GLF_IDENTITY((_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0, min(_GLF_IDENTITY((_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0, max((_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0, (_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0)), _GLF_IDENTITY((_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0, max((_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0, _GLF_IDENTITY((_GLF_ZERO(0.0, injectionSwitch.x)), float(mat4x2(_GLF_IDENTITY((_GLF_ZERO(0.0, injectionSwitch.x)), ((_GLF_ZERO(0.0, injectionSwitch.x))) / 1.0), 1.0, 0.0, 0.0, length(vec2(0.0, 0.0)), 1.0, 1.0, 1.0))) * 1.0)))))) / _GLF_IDENTITY(dot(vec4(0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0), vec4(_GLF_IDENTITY(0.0, (0.0) + 0.0), tan(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-7.1) : 0.0))), 1.0, 0.0)), dot(_GLF_IDENTITY(vec4(0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0), (vec4(0.0, _GLF_IDENTITY(determinant(mat2(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0)), 0.0, 0.0, _GLF_IDENTITY(0.0, float(mat3x4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, sqrt(1.0), 0.0, 1.0), vec4(0.0, log(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))), 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(1.0, _GLF_IDENTITY(sqrt(1.0), (false ? _GLF_FUZZED(distance(vec4(6.3, 34.93, 6.3, 9617.4359), vec4(-9977.6070, 6.7, 96.34, 0.9))) : sqrt(1.0))), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-26.92)), bool(false))))), 1.0), vec4(0.0, log(1.0), 1.0, 0.0)), mix(float(_GLF_FUZZED(-1.4)), float(dot(vec4(1.0, sqrt(1.0), 0.0, 1.0), vec4(0.0, log(1.0), 1.0, 0.0))), bool(true)))), 0.0, 0.0, 1.0, 0.0, 1.0))))), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)) * abs(vec4(1.0, 1.0, 1.0, 1.0))), vec4(0.0, tan(0.0), 1.0, 0.0))))), clamp(int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(928.049))), _GLF_ZERO(0.0, injectionSwitch.x)))) * 1.0, min(_GLF_IDENTITY((_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0, max((_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0, (_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0, max((_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0, (_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0)), (true ? _GLF_IDENTITY((_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0, max((_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0, (_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0)) : _GLF_FUZZED(52.46))))))) / _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0), vec4(0.0, tan(0.0), 1.0, 0.0)), dot(_GLF_IDENTITY(vec4(0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0), _GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(vec4(_GLF_IDENTITY(mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(1.0))), (mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))))))) - mat2(0.0, 0.0, 0.0, 0.0))), min(vec4(_GLF_IDENTITY(mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(1.0))), (mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))))))) - mat2(0.0, 0.0, 0.0, 0.0))), vec4(_GLF_IDENTITY(mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(1.0))), (mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))))))) - mat2(0.0, 0.0, 0.0, 0.0))))), clamp(vec4(_GLF_IDENTITY(mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(_GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), float(mat3x2(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, 0.0, 1.0))), mix(float(determinant(mat2(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(1.0))), (mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(float(_GLF_FUZZED(-3.5)), min(float(_GLF_FUZZED(-3.5)), float(_GLF_FUZZED(-3.5)))), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(1.0)))) - mat2(0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)), log(1.0)), (vec2(_GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0), mix(float(_GLF_IDENTITY(clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0), 1.0 * (clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)))), float(_GLF_FUZZED(9.4)), bool(false)))), log(1.0))) * mat2(1.0)))), 0.0, 0.0))), vec4(_GLF_IDENTITY(mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(1.0))), (mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(float(_GLF_FUZZED(-3.5)), (float(_GLF_FUZZED(-3.5))) / 1.0), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(1.0)))) - mat2(0.0, 0.0, 0.0, 0.0))), vec4(_GLF_IDENTITY(mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(1.0))), (mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(1.0)))) - mat2(0.0, 0.0, 0.0, 0.0)))))) * abs(vec4(1.0, 1.0, 1.0, 1.0))), vec4(0.0, tan(0.0), 1.0, 0.0))), _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(dot(vec4(0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0), vec4(0.0, tan(0.0), 1.0, 0.0)), dot(_GLF_IDENTITY(vec4(0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0), _GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(vec4(_GLF_IDENTITY(mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(1.0))), (mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))))))) - mat2(0.0, 0.0, 0.0, 0.0))), min(vec4(_GLF_IDENTITY(mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(1.0))), (mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))))))) - mat2(0.0, 0.0, 0.0, 0.0))), vec4(_GLF_IDENTITY(mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(1.0))), (mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))))))) - mat2(0.0, 0.0, 0.0, 0.0))))), clamp(vec4(_GLF_IDENTITY(mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(_GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), float(mat3x2(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, 0.0, 1.0))), mix(float(determinant(mat2(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(1.0))), (mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(float(_GLF_FUZZED(-3.5)), min(float(_GLF_FUZZED(-3.5)), float(_GLF_FUZZED(-3.5)))), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(1.0)))) - mat2(0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)), log(1.0)), (vec2(_GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0), mix(float(_GLF_IDENTITY(clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0), 1.0 * (clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)))), float(_GLF_FUZZED(9.4)), bool(false)))), log(1.0))) * mat2(1.0)))), 0.0, 0.0))), vec4(_GLF_IDENTITY(mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(1.0))), (mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(float(_GLF_FUZZED(-3.5)), (float(_GLF_FUZZED(-3.5))) / 1.0), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(1.0)))) - mat2(0.0, 0.0, 0.0, 0.0))), vec4(_GLF_IDENTITY(mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(1.0))), (mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(1.0)))) - mat2(0.0, 0.0, 0.0, 0.0)))))) * abs(vec4(1.0, 1.0, 1.0, 1.0))), vec4(0.0, tan(0.0), 1.0, 0.0))), 0.0, 0.0, 1.0)), max(float(mat2(_GLF_IDENTITY(dot(vec4(0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0), vec4(0.0, tan(0.0), 1.0, 0.0)), dot(_GLF_IDENTITY(vec4(0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0), _GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(vec4(_GLF_IDENTITY(mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(1.0))), (mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))))))) - mat2(0.0, 0.0, 0.0, 0.0))), min(vec4(_GLF_IDENTITY(mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(1.0))), (mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))))))) - mat2(0.0, 0.0, 0.0, 0.0))), vec4(_GLF_IDENTITY(mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(1.0))), (mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))))))) - mat2(0.0, 0.0, 0.0, 0.0))))), clamp(vec4(_GLF_IDENTITY(mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(_GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), float(mat3x2(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, 0.0, 1.0))), mix(float(determinant(mat2(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(1.0))), (mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(float(_GLF_FUZZED(-3.5)), min(float(_GLF_FUZZED(-3.5)), float(_GLF_FUZZED(-3.5)))), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(1.0)))) - mat2(0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)), log(1.0)), (vec2(_GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0), mix(float(_GLF_IDENTITY(clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0), 1.0 * (clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)))), float(_GLF_FUZZED(9.4)), bool(false)))), log(1.0))) * mat2(1.0)))), 0.0, 0.0))), vec4(_GLF_IDENTITY(mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(1.0))), (mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(float(_GLF_FUZZED(-3.5)), (float(_GLF_FUZZED(-3.5))) / 1.0), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(1.0)))) - mat2(0.0, 0.0, 0.0, 0.0))), vec4(_GLF_IDENTITY(mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(1.0))), (mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(1.0)))) - mat2(0.0, 0.0, 0.0, 0.0)))))) * abs(vec4(1.0, 1.0, 1.0, 1.0))), vec4(0.0, tan(0.0), 1.0, 0.0))), 0.0, 0.0, 1.0)), float(mat2(_GLF_IDENTITY(dot(vec4(0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0), vec4(0.0, tan(0.0), 1.0, 0.0)), dot(_GLF_IDENTITY(vec4(0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0), _GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(vec4(_GLF_IDENTITY(mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(1.0))), (mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))))))) - mat2(0.0, 0.0, 0.0, 0.0))), min(vec4(_GLF_IDENTITY(mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(1.0))), (mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))))))) - mat2(0.0, 0.0, 0.0, 0.0))), vec4(_GLF_IDENTITY(mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(1.0))), (mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))))))) - mat2(0.0, 0.0, 0.0, 0.0))))), clamp(vec4(_GLF_IDENTITY(mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(_GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), float(mat3x2(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, 0.0, 1.0))), mix(float(determinant(mat2(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(1.0))), (mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(float(_GLF_FUZZED(-3.5)), min(float(_GLF_FUZZED(-3.5)), float(_GLF_FUZZED(-3.5)))), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(1.0)))) - mat2(0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)), log(1.0)), (vec2(_GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0), mix(float(_GLF_IDENTITY(clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0), 1.0 * (clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)))), float(_GLF_FUZZED(9.4)), bool(false)))), log(1.0))) * mat2(1.0)))), 0.0, 0.0))), vec4(_GLF_IDENTITY(mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(1.0))), (mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(float(_GLF_FUZZED(-3.5)), (float(_GLF_FUZZED(-3.5))) / 1.0), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(1.0)))) - mat2(0.0, 0.0, 0.0, 0.0))), vec4(_GLF_IDENTITY(mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(1.0))), (mat2(_GLF_IDENTITY((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)), ((vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0))) * mat4(1.0)))) - mat2(0.0, 0.0, 0.0, 0.0)))))) * abs(vec4(1.0, 1.0, 1.0, 1.0))), vec4(0.0, tan(0.0), 1.0, 0.0))), 0.0, 0.0, 1.0))))))), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / _GLF_IDENTITY(1.0, 1.0 * (1.0))), _GLF_IDENTITY((_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0, min(_GLF_IDENTITY((_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0, max((_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0, (_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0)), _GLF_IDENTITY((_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0, max((_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0, _GLF_IDENTITY((_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0, max((_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0, (_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0)))))))) / _GLF_IDENTITY(dot(vec4(0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0), _GLF_IDENTITY(vec4(0.0, tan(0.0), 1.0, 0.0), max(_GLF_IDENTITY(vec4(0.0, tan(0.0), 1.0, 0.0), (vec4(0.0, tan(0.0), 1.0, 0.0)) * vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(vec4(0.0, tan(0.0), 1.0, 0.0), (false ? _GLF_FUZZED(vec4(-5.5, 6899.5534, -4812.2974, -66.90)) : vec4(0.0, tan(0.0), 1.0, 0.0)))))), dot(_GLF_IDENTITY(vec4(0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, float(mat2x3(0.0, 1.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))))))), (vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(mat2(0.0, 0.0, 0.0, 0.0))), float(_GLF_FUZZED(-3.5)), bool(false))), 1.0, 0.0)) * abs(vec4(1.0, 1.0, 1.0, 1.0))), vec4(0.0, tan(0.0), _GLF_IDENTITY(1.0, (1.0) * 1.0), 0.0))))), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0), _GLF_IDENTITY((_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0, min(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_ZERO(0.0, injectionSwitch.x)) * _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)), max((_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0, (_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0)), (false ? _GLF_FUZZED(19.21) : _GLF_IDENTITY((_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0, max((_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0, (_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0)))), _GLF_IDENTITY((_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0, max(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), determinant(mat3(1.0, log(1.0), log(1.0), 1.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, max(0.0, 0.0)))), 0.0)), 1.0, 0.0, sqrt(1.0))) * (_GLF_ZERO(0.0, injectionSwitch.x)))) * 1.0, min((_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), determinant(mat3(1.0, log(1.0), log(1.0), 1.0, 1.0, 0.0, 1.0, 0.0, sqrt(1.0))) * (_GLF_ZERO(0.0, injectionSwitch.x)))) * 1.0, (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), determinant(mat3(1.0, log(1.0), log(1.0), 1.0, 1.0, 0.0, 1.0, 0.0, sqrt(1.0))) * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0)))) * 1.0)), (_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(6.8), _GLF_FUZZED(vec4(-6.7, -422.916, -0.1, 59.29).r)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), injectionSwitch)).x)) * 1.0)))))) / _GLF_IDENTITY(dot(vec4(0.0, determinant(mat2(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(7.6)), float(0.0), bool(true))), 0.0)), 1.0, 0.0), vec4(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 1.0, 1.0, 0.0)), (float(mat2x3(_GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0, 1.0, 1.0, 0.0))) - 0.0)), tan(0.0), 1.0, 0.0)), dot(_GLF_IDENTITY(vec4(0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), (vec4(0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), mix(float(determinant(_GLF_IDENTITY(mat2(0.0, 0.0, 0.0, 0.0), (mat2(0.0, 0.0, 0.0, 0.0)) * mat2(1.0)))), _GLF_IDENTITY(float(_GLF_FUZZED(-3.5)), clamp(float(_GLF_FUZZED(-3.5)), _GLF_IDENTITY(float(_GLF_FUZZED(-3.5)), float(mat2x3(float(_GLF_FUZZED(-3.5)), 0.0, 1.0, 1.0, 0.0, 0.0))), _GLF_IDENTITY(float(_GLF_FUZZED(-3.5)), (true ? float(_GLF_FUZZED(-3.5)) : _GLF_FUZZED(3.1))))), bool(false))), 1.0, 0.0)) * abs(vec4(1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(vec4(0.0, tan(_GLF_IDENTITY(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)), clamp(0.0, 0.0, 0.0))), 1.0, 0.0), mix(vec4(_GLF_FUZZED(-362.217), (vec4(0.0, tan(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), 1.0, 0.0))[1], (vec4(0.0, tan(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), 1.0, 0.0))[2], (vec4(0.0, tan(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), 1.0, 0.0))[3]), vec4((vec4(0.0, tan(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), 1.0, 0.0))[0], _GLF_FUZZED(7.9), _GLF_FUZZED(5.1), _GLF_FUZZED(9.1)), bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false, false)))))))))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y : _GLF_FUZZED(vec4(78.29, -5870.2380, -937.348, -708.999)[2]))))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))
          break;
         if(_GLF_DEAD(false))
          continue;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
        break;
       continue;
      }
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
