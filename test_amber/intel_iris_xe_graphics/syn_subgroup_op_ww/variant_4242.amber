#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, true && (true)), true, true, false)))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, true && (true)), true, true, false)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, true && (true)), true, true, false))))), bool(bvec3(! (bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, true && (true)), true, true, false))))), true, false)))))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, true && (true)), true, true, false)))), false || (bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, true && (true)), true, true, false)))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), true && _GLF_IDENTITY((true), bool(bvec4(_GLF_IDENTITY((true), ! (! ((true)))), true, _GLF_IDENTITY(false, ! (! (false))), false)))), true, true, false)))), ! (! (bool(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, true && (true)), true, true, false)))))))))))))), true, false)))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + 0.0))))).y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + 0.0))))).y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + 0.0))))).y)))) || false)), (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + 0.0))))).y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + 0.0))))).y)))) || false))) && true))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), true && (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))), (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))) && true))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), mix(vec2(_GLF_IDENTITY((clamp(injectionSwitch, injectionSwitch, injectionSwitch))[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) - 0)], min((clamp(injectionSwitch, injectionSwitch, injectionSwitch))[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) - 0)], (clamp(injectionSwitch, injectionSwitch, injectionSwitch))[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) - 0)])), _GLF_FUZZED(float((~ 151098u)))), vec2(_GLF_FUZZED(-0.6), (clamp(injectionSwitch, injectionSwitch, injectionSwitch))[1]), bvec2(false, _GLF_IDENTITY(true, false || (true)))))).y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))))), bvec2(bvec4(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, false)))))), false, false)))))))), (bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, false))))), bvec2(bvec3(bvec2(bvec2(bvec2(false, false))), true)))))) || false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))) || false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), (false) || false)))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! _GLF_IDENTITY((false), true && ((false))))))))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups.x) | (gl_NumWorkGroups.x), 0u ^ ((gl_NumWorkGroups.x) | (gl_NumWorkGroups.x))), 0u | (_GLF_IDENTITY((gl_NumWorkGroups.x) | (gl_NumWorkGroups.x), 0u ^ ((gl_NumWorkGroups.x) | (gl_NumWorkGroups.x))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(609.288, -826.474)) : injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), min(vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))).x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false)))) && true)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(bvec2(! (! (false)), true)))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))), bool(bvec3(! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))), true, true)))))), ((_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))), bool(bvec3(! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))), true, true))))))) || false)))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))))))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), true && ((false)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))), bool(bvec3(! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))), true, true))))))))), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), true && ((false)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))), bool(bvec3(! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))), true, true))))))))), true), bvec2(bvec4(bvec2(! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), true && ((false)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))), bool(bvec3(! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))), true, true))))))))), true), false, true))))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY((! (false)), ((! (false))) && true)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY((! (false)), ((! (false))) && true)))), false || (! (_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY((! (false)), ((! (false))) && true))))))) && true))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))))))))))), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(max(subgroup_size, subgroup_size), ~ (~ (_GLF_IDENTITY(max(subgroup_size, subgroup_size), 0u | (max(subgroup_size, subgroup_size))))))), subgroup_size, _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ (~ (subgroup_size)), ~ (~ (~ (~ (subgroup_size))))))), (clamp(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(max(subgroup_size, subgroup_size), ~ (~ (max(subgroup_size, subgroup_size))))), subgroup_size, _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))) ^ 0u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) - 0u, ((subgroup_id) - 0u) | ((subgroup_id) - 0u))) * subgroup_size, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) - 0u, _GLF_IDENTITY(((subgroup_id) - 0u) | ((subgroup_id) - 0u), 0u ^ (((subgroup_id) - 0u) | ((subgroup_id) - 0u))))) * subgroup_size, 0u)), 0u + (_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) - 0u, ((subgroup_id) - 0u) | ((subgroup_id) - 0u))) * subgroup_size, 0u)), ~ (~ (uint(uvec2(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) - 0u, ((subgroup_id) - 0u) | ((subgroup_id) - 0u))) * subgroup_size, 0u)))))))), subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)) * _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))) + subgroup_local_id;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(min(subgroup_local_id, subgroup_local_id), 0u | (min(subgroup_local_id, subgroup_local_id)))), subgroup_local_id), (min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id))), _GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_local_id))))))), subgroup_local_id)) << (_GLF_IDENTITY((0u | 0u), ((0u | 0u)) | (_GLF_IDENTITY((0u | 0u), max((0u | 0u), _GLF_IDENTITY((0u | 0u), ((0u | 0u)) | 0u))))) >> _GLF_IDENTITY(uint(1u), uint(1u))))) + _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, ((1) + 0) ^ 0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) + 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), 0 ^ (1)), (1) + 0), _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, 0, 1, 0), ~ (~ (ivec4(1, 0, 1, 0))))), int(ivec3(int(_GLF_IDENTITY(ivec4(1, 0, 1, 0), ~ (~ (ivec4(1, 0, 1, 0))))), 0, 0)))), (1) + 0), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) + 0)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1), 1 * ((1))) + 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) + 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) + 0), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(1, (1) + 0))), _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) + 0))), (1) + 0), _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY((1) + 0, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2((1) + 0, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-66260) : 1))), (ivec2((1) + 0, 1)) | (ivec2((1) + 0, 1)))), min(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2((1) + 0, 1), (ivec2((1) + 0, 1)) | (ivec2((1) + 0, 1))), (_GLF_IDENTITY(ivec2((1) + 0, 1), (ivec2((1) + 0, 1)) | (ivec2((1) + 0, 1)))) | ivec2(0, 0))), int(_GLF_IDENTITY(ivec2((1) + 0, 1), (ivec2(_GLF_IDENTITY((1), 0 + ((1))) + 0, 1)) | (ivec2((1) + 0, 1)))))))))), _GLF_IDENTITY(1, (1) + 0), _GLF_IDENTITY(1, (1) + 0))))) ^ 0)))) % subgroup_size);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), true))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false, false))))))) || false), true, true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 atomicStore(buf[_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))], _GLF_IDENTITY(uint(1), max(uint(1), uint(1))), 4, 64, 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   subgroupAll(_GLF_IDENTITY(false, _GLF_IDENTITY((false), (_GLF_IDENTITY((false), (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(_GLF_IDENTITY(bvec2(bool(bool(false)), true), bvec2(bvec3(bvec2(bool(bool(false)), true), true))))))), ! (! (_GLF_IDENTITY((false), true && ((false))))))) || false)) && true) && true));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true)))), _GLF_IDENTITY(! (! (bool(bvec2(false, false)))), (_GLF_IDENTITY(! (! (bool(bvec2(false, false)))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || (_GLF_IDENTITY((bool(bvec2(false, false))), (_GLF_IDENTITY((bool(bvec2(false, false))), true && ((bool(bvec2(false, false)))))) && true))))), (! (! (! (bool(bvec2(false, false)))))) || false)), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || (_GLF_IDENTITY((bool(bvec2(false, false))), (_GLF_IDENTITY((bool(bvec2(false, false))), true && ((bool(bvec2(false, false)))))) && true))))), (! (! (! (bool(bvec2(false, false)))))) || false), (_GLF_IDENTITY(! (! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || (_GLF_IDENTITY((bool(bvec2(false, false))), (_GLF_IDENTITY((bool(bvec2(false, false))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true))) && ((bool(bvec2(false, false)))))) && true))))), (! (! (! (bool(bvec2(false, false)))))) || false)) || false))))))) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true)))), false)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true)))), false)))), true, false))))), _GLF_IDENTITY(! (! (bool(bvec2(false, false)))), (_GLF_IDENTITY(! (! (bool(bvec2(false, false)))), _GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(! (! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || (_GLF_IDENTITY((bool(bvec2(false, false))), (_GLF_IDENTITY((bool(bvec2(false, false))), true && ((bool(bvec2(false, false)))))) && true))))), (! (! (! (bool(bvec2(false, false)))))) || false)), ((_GLF_IDENTITY(! (! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || (_GLF_IDENTITY((bool(bvec2(false, false))), (_GLF_IDENTITY((bool(bvec2(false, false))), true && ((bool(bvec2(false, false)))))) && true))))), (! (! (! (bool(bvec2(false, false)))))) || false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || (_GLF_IDENTITY((bool(bvec2(false, false))), (_GLF_IDENTITY((bool(bvec2(false, false))), true && ((bool(bvec2(false, false)))))) && true))))), (! (! (! (bool(bvec2(false, false)))))) || false), (_GLF_IDENTITY(! (! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || (_GLF_IDENTITY((bool(bvec2(false, false))), (_GLF_IDENTITY((bool(bvec2(false, false))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true))) && ((bool(bvec2(false, _GLF_IDENTITY(false, (false) && true))))))) && true))))), (! (! (! (bool(bvec2(false, false)))))) || false)) || false))))))) && true))))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2x3(1.0, 0.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), mat3(1.0) * (mat2x3(1.0, 0.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0))))), injectionSwitch.y)), mix(vec2(((injectionSwitch) * mat2(_GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-3013.4789) : _GLF_IDENTITY(1.0, (1.0) * 1.0))), injectionSwitch.y)))[0], _GLF_IDENTITY(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[1], max(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[1], ((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[1]))), vec2(_GLF_FUZZED(6851.3024), _GLF_FUZZED(-8433.6724)), bvec2(false, false)))).x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) / 1.0)))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true)))), _GLF_IDENTITY(! (! (bool(bvec2(false, false)))), (_GLF_IDENTITY(! (! (bool(bvec2(false, false)))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || (_GLF_IDENTITY((bool(bvec2(false, false))), (_GLF_IDENTITY((bool(bvec2(false, false))), true && ((bool(bvec2(false, false)))))) && true))))), (! (! (! (bool(bvec2(false, false)))))) || false)), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || (_GLF_IDENTITY((bool(bvec2(false, false))), (_GLF_IDENTITY((bool(bvec2(false, false))), true && ((bool(bvec2(false, false)))))) && true))))), (! (! (! (bool(bvec2(false, false)))))) || false), (_GLF_IDENTITY(! (! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || (_GLF_IDENTITY((bool(bvec2(false, false))), (_GLF_IDENTITY((bool(bvec2(false, false))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true))) && ((bool(bvec2(false, false)))))) && true))))), (! (! (! (bool(bvec2(false, false)))))) || false)) || false))))))) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true)))), false)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true)))), false)))), true, false))))), _GLF_IDENTITY(! (! (bool(bvec2(false, false)))), (_GLF_IDENTITY(! (! (bool(bvec2(false, false)))), _GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(! (! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || (_GLF_IDENTITY((bool(bvec2(false, false))), (_GLF_IDENTITY((bool(bvec2(false, false))), true && ((bool(bvec2(false, false)))))) && true))))), (! (! (! (bool(bvec2(false, false)))))) || false)), ((_GLF_IDENTITY(! (! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || (_GLF_IDENTITY((bool(bvec2(false, false))), (_GLF_IDENTITY((bool(bvec2(false, false))), true && ((bool(bvec2(false, false)))))) && true))))), (! (! (! (bool(bvec2(false, false)))))) || false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || (_GLF_IDENTITY((bool(bvec2(false, false))), (_GLF_IDENTITY((bool(bvec2(false, false))), true && ((bool(bvec2(false, false)))))) && true))))), (! (! (! (bool(bvec2(false, false)))))) || false), (_GLF_IDENTITY(! (! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || (_GLF_IDENTITY((bool(bvec2(false, false))), (_GLF_IDENTITY((bool(bvec2(false, false))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true))) && ((bool(bvec2(false, _GLF_IDENTITY(false, (false) && true))))))) && true))))), (! (! (! (bool(bvec2(false, false)))))) || false)) || false))))))) && true))))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2x3(1.0, 0.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), mat3(1.0) * (mat2x3(1.0, 0.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0))))), injectionSwitch.y)), mix(vec2(((injectionSwitch) * mat2(_GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-3013.4789) : _GLF_IDENTITY(1.0, (1.0) * 1.0))), injectionSwitch.y)))[0], _GLF_IDENTITY(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[1], max(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[1], ((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[1]))), vec2(_GLF_FUZZED(6851.3024), _GLF_FUZZED(-8433.6724)), bvec2(false, false)))).x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) / 1.0)))) && true), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true)))), _GLF_IDENTITY(! (! (bool(bvec2(false, false)))), (_GLF_IDENTITY(! (! (bool(bvec2(false, false)))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || (_GLF_IDENTITY((bool(bvec2(false, false))), (_GLF_IDENTITY((bool(bvec2(false, false))), true && ((bool(bvec2(false, false)))))) && true))))), (! (! (! (bool(bvec2(false, false)))))) || false)), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || (_GLF_IDENTITY((bool(bvec2(false, false))), (_GLF_IDENTITY((bool(bvec2(false, false))), true && ((bool(bvec2(false, false)))))) && true))))), (! (! (! (bool(bvec2(false, false)))))) || false), (_GLF_IDENTITY(! (! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || (_GLF_IDENTITY((bool(bvec2(false, false))), (_GLF_IDENTITY((bool(bvec2(false, false))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true))) && ((bool(bvec2(false, false)))))) && true))))), (! (! (! (bool(bvec2(false, false)))))) || false)) || false))))))) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true)))), false)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true)))), false)))), true, false))))), _GLF_IDENTITY(! (! (bool(bvec2(false, false)))), (_GLF_IDENTITY(! (! (bool(bvec2(false, false)))), _GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(! (! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || (_GLF_IDENTITY((bool(bvec2(false, false))), (_GLF_IDENTITY((bool(bvec2(false, false))), true && ((bool(bvec2(false, false)))))) && true))))), (! (! (! (bool(bvec2(false, false)))))) || false)), ((_GLF_IDENTITY(! (! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || (_GLF_IDENTITY((bool(bvec2(false, false))), (_GLF_IDENTITY((bool(bvec2(false, false))), true && ((bool(bvec2(false, false)))))) && true))))), (! (! (! (bool(bvec2(false, false)))))) || false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || (_GLF_IDENTITY((bool(bvec2(false, false))), (_GLF_IDENTITY((bool(bvec2(false, false))), true && ((bool(bvec2(false, false)))))) && true))))), (! (! (! (bool(bvec2(false, false)))))) || false), (_GLF_IDENTITY(! (! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || (_GLF_IDENTITY((bool(bvec2(false, false))), (_GLF_IDENTITY((bool(bvec2(false, false))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true))) && ((bool(bvec2(false, _GLF_IDENTITY(false, (false) && true))))))) && true))))), (! (! (! (bool(bvec2(false, false)))))) || false)) || false))))))) && true))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true)))), _GLF_IDENTITY(! (! (bool(bvec2(false, false)))), (_GLF_IDENTITY(! (! (bool(bvec2(false, false)))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || (_GLF_IDENTITY((bool(bvec2(false, false))), (_GLF_IDENTITY((bool(bvec2(false, false))), true && ((bool(bvec2(false, false)))))) && true))))), (! (! (! (bool(bvec2(false, false)))))) || false)), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || (_GLF_IDENTITY((bool(bvec2(false, false))), (_GLF_IDENTITY((bool(bvec2(false, false))), true && ((bool(bvec2(false, false)))))) && true))))), (! (! (! (bool(bvec2(false, false)))))) || false), (_GLF_IDENTITY(! (! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || (_GLF_IDENTITY((bool(bvec2(false, false))), (_GLF_IDENTITY((bool(bvec2(false, false))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true))) && ((bool(bvec2(false, false)))))) && true))))), (! (! (! (bool(bvec2(false, false)))))) || false)) || false))))))) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true)))), false)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true)))), false)))), true, false))))), _GLF_IDENTITY(! (! (bool(bvec2(false, false)))), (_GLF_IDENTITY(! (! (bool(bvec2(false, false)))), _GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(! (! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || (_GLF_IDENTITY((bool(bvec2(false, false))), (_GLF_IDENTITY((bool(bvec2(false, false))), true && ((bool(bvec2(false, false)))))) && true))))), (! (! (! (bool(bvec2(false, false)))))) || false)), ((_GLF_IDENTITY(! (! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || (_GLF_IDENTITY((bool(bvec2(false, false))), (_GLF_IDENTITY((bool(bvec2(false, false))), true && ((bool(bvec2(false, false)))))) && true))))), (! (! (! (bool(bvec2(false, false)))))) || false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || (_GLF_IDENTITY((bool(bvec2(false, false))), (_GLF_IDENTITY((bool(bvec2(false, false))), true && ((bool(bvec2(false, false)))))) && true))))), (! (! (! (bool(bvec2(false, false)))))) || false), (_GLF_IDENTITY(! (! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || (_GLF_IDENTITY((bool(bvec2(false, false))), (_GLF_IDENTITY((bool(bvec2(false, false))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true))) && ((bool(bvec2(false, _GLF_IDENTITY(false, (false) && true))))))) && true))))), (! (! (! (bool(bvec2(false, false)))))) || false)) || false))))))) && true))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, _GLF_IDENTITY(false, bool(bvec3(false, true, true)))), true, true)))), _GLF_IDENTITY(! (! (bool(bvec2(false, false)))), (_GLF_IDENTITY(! (! (bool(bvec2(false, false)))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || (_GLF_IDENTITY((bool(bvec2(false, false))), (_GLF_IDENTITY((bool(bvec2(false, false))), true && _GLF_IDENTITY(((bool(bvec2(false, false)))), ! (! (_GLF_IDENTITY(((bool(bvec2(false, false)))), (((bool(bvec2(false, false))))) && true)))))) && _GLF_IDENTITY(true, true && (true))))))), _GLF_IDENTITY((! (! (! (bool(bvec2(false, false)))))), ((! (! (! (bool(bvec2(false, false))))))) && true) || false)), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || (_GLF_IDENTITY((bool(bvec2(false, false))), (_GLF_IDENTITY((bool(bvec2(false, false))), true && ((bool(bvec2(false, false)))))) && true))))), _GLF_IDENTITY((! (! (! (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((! (! (! (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))) || false), (_GLF_IDENTITY(! (! (! _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec2(false, false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec2(false, false))))), false || (_GLF_IDENTITY((bool(bvec2(false, false))), (_GLF_IDENTITY((bool(bvec2(false, false))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), (! (true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! (true)) && true))) && ((bool(bvec2(false, false)))))) && true))))), (! (! (! (bool(bvec2(false, false)))))) || false)) || false))))))) && true))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true)))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true)))), true, true))), false)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true)))), false)))), true, false))))), _GLF_IDENTITY(! (! (bool(bvec2(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))), false)))), (_GLF_IDENTITY(_GLF_IDENTITY(! (! (bool(bvec2(false, false)))), (! (! (bool(bvec2(false, false))))) && true), _GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || (_GLF_IDENTITY((bool(bvec2(false, false))), (_GLF_IDENTITY((bool(bvec2(false, false))), true && ((bool(bvec2(false, false)))))) && true))))), (! (! (! (bool(bvec2(false, false)))))) || false), ! (! (_GLF_IDENTITY(! (! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((bool(bvec2(false, false))), ! (! ((bool(bvec2(false, false)))))), (_GLF_IDENTITY((bool(bvec2(false, false))), true && ((bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), true)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), true)), bvec2(bvec4(bvec2(bvec3(bvec2(false, false), true)), false, false))), false))))))))) && true)), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((bool(bvec2(false, false))), ! (! ((bool(bvec2(false, false)))))), (_GLF_IDENTITY((bool(bvec2(false, false))), true && ((bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), true)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), true)), bvec2(bvec4(bvec2(bvec3(bvec2(false, false), true)), false, false))), false))))))))) && true)), ((_GLF_IDENTITY(_GLF_IDENTITY((bool(bvec2(false, false))), ! (! ((bool(bvec2(false, false)))))), (_GLF_IDENTITY((bool(bvec2(false, false))), true && ((bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), true)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), true)), bvec2(bvec4(bvec2(bvec3(bvec2(false, false), true)), false, false))), false))))))))) && true))) && true))))))), (! (! (! (bool(bvec2(false, false)))))) || false))))), ((_GLF_IDENTITY(! (! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || (_GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), false), true, false))))), (_GLF_IDENTITY((bool(bvec2(false, false))), true && ((_GLF_IDENTITY(bool(bvec2(false, false)), ! (_GLF_IDENTITY(! (bool(bvec2(false, false))), ! (! (! (bool(bvec2(false, false)))))))))))) && true))))), (! (! (! (_GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec4(bool(bvec2(false, false)), true, true, false))))))) || false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (! _GLF_IDENTITY((bool(bvec2(false, false))), false || (_GLF_IDENTITY((bool(bvec2(false, false))), (_GLF_IDENTITY((bool(bvec2(false, false))), true && ((bool(bvec2(false, false)))))) && true))))), (! (! (! (bool(bvec2(false, false)))))) || false), (_GLF_IDENTITY(! (! (! _GLF_IDENTITY((bool(bvec2(false, _GLF_IDENTITY(false, ! (! (false)))))), false || (_GLF_IDENTITY((bool(bvec2(false, false))), (_GLF_IDENTITY((bool(bvec2(false, false))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true))) && ((bool(bvec2(false, _GLF_IDENTITY(false, (false) && true))))))) && true))))), (! (! (! (bool(bvec2(false, false)))))) || false)) || false))))))) && true)))))) && true)) || false), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0)))) * mat2(_GLF_ONE(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2x3(1.0, 0.0, log(1.0), 0.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), 1.0), mat3(1.0) * (mat2x3(1.0, 0.0, log(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0))))), injectionSwitch.y)), mix(vec2(((injectionSwitch) * mat2(_GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-3013.4789) : _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) * 1.0, ((1.0) * 1.0) * 1.0)))), injectionSwitch.y)))[0], _GLF_IDENTITY(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[1], max(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[1], ((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[1]))), vec2(_GLF_FUZZED(6851.3024), _GLF_FUZZED(-8433.6724)), bvec2(false, false)))).x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), (true ? _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(-672.015)))) / 1.0)))) && true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) && true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, (_GLF_IDENTITY(true ? _GLF_IDENTITY(4, 0 ^ (4)) : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(14670, 0 ^ (14670))), _GLF_IDENTITY((_GLF_FUZZED(_GLF_IDENTITY(14670, _GLF_IDENTITY(0 ^ (14670), 0 | (0 ^ (14670)))))) / _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, ~ (~ (1)))))), _GLF_IDENTITY(clamp(_GLF_IDENTITY((_GLF_FUZZED(_GLF_IDENTITY(14670, _GLF_IDENTITY(0 ^ (14670), 0 | (0 ^ (14670)))))) / 1, int(ivec4((_GLF_FUZZED(_GLF_IDENTITY(14670, _GLF_IDENTITY(0 ^ (14670), 0 | (0 ^ (14670)))))) / 1, 1, 1, 1))), (_GLF_FUZZED(_GLF_IDENTITY(14670, _GLF_IDENTITY(0 ^ (14670), 0 | (0 ^ (14670)))))) / 1, (_GLF_FUZZED(_GLF_IDENTITY(14670, _GLF_IDENTITY(0 ^ (14670), 0 | (0 ^ (14670)))))) / 1), max(clamp(_GLF_IDENTITY((_GLF_FUZZED(_GLF_IDENTITY(14670, _GLF_IDENTITY(0 ^ (14670), 0 | (0 ^ (14670)))))) / 1, int(ivec4((_GLF_FUZZED(_GLF_IDENTITY(14670, _GLF_IDENTITY(0 ^ (14670), 0 | (0 ^ (14670)))))) / 1, 1, 1, 1))), (_GLF_FUZZED(_GLF_IDENTITY(14670, _GLF_IDENTITY(0 ^ (14670), 0 | (0 ^ (14670)))))) / 1, (_GLF_FUZZED(_GLF_IDENTITY(14670, _GLF_IDENTITY(0 ^ (14670), 0 | (0 ^ (14670)))))) / 1), clamp(_GLF_IDENTITY((_GLF_FUZZED(_GLF_IDENTITY(14670, _GLF_IDENTITY(0 ^ (14670), 0 | (0 ^ (14670)))))) / 1, int(ivec4((_GLF_FUZZED(_GLF_IDENTITY(14670, _GLF_IDENTITY(0 ^ (14670), 0 | (0 ^ (14670)))))) / 1, 1, 1, 1))), (_GLF_FUZZED(_GLF_IDENTITY(14670, _GLF_IDENTITY(0 ^ (14670), 0 | (0 ^ (14670)))))) / 1, (_GLF_FUZZED(_GLF_IDENTITY(14670, _GLF_IDENTITY(0 ^ (14670), 0 | (0 ^ (14670)))))) / 1))))), (true ? 4 : _GLF_FUZZED(_GLF_IDENTITY(14670, 0 ^ (14670)))) | (true ? 4 : _GLF_FUZZED(_GLF_IDENTITY(14670, 0 ^ (14670))))))), _GLF_IDENTITY(64, ~ (~ (64))), 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(-0.7, -572.911), mix(vec2((vec2(-0.7, -572.911))[0], (vec2(-0.7, -572.911))[1]), vec2(_GLF_FUZZED(2020.6860), _GLF_FUZZED(8.5)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) : injectionSwitch), mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(36.19), float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(_GLF_FUZZED(36.19), clamp(_GLF_FUZZED(36.19), _GLF_FUZZED(36.19), _GLF_FUZZED(36.19))), 1.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)))), _GLF_IDENTITY(mat3x2(mat4(mat3x2(_GLF_IDENTITY(_GLF_FUZZED(36.19), clamp(_GLF_FUZZED(36.19), _GLF_FUZZED(36.19), _GLF_FUZZED(36.19))), 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)))))), (true ? mat3x2(mat4(mat3x2(_GLF_IDENTITY(_GLF_FUZZED(36.19), clamp(_GLF_FUZZED(36.19), _GLF_FUZZED(36.19), _GLF_FUZZED(36.19))), 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)))))) : _GLF_FUZZED(mat3x2(-48.78, -1891.8176, -2.8, 806.893, 288.033, 1495.6461))))))), _GLF_IDENTITY(((false ? _GLF_FUZZED(vec2(-0.7, -572.911)) : injectionSwitch))[1], max(_GLF_IDENTITY((_GLF_IDENTITY((false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-0.7, mix(float(_GLF_FUZZED(-7.8)), float(_GLF_IDENTITY(-0.7, max(-0.7, -0.7))), bool(true))), -572.911)) : injectionSwitch), mix(vec2(_GLF_IDENTITY(((false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-0.7, mix(float(_GLF_FUZZED(-7.8)), float(_GLF_IDENTITY(-0.7, max(-0.7, -0.7))), bool(true))), -572.911)) : injectionSwitch))[0], (_GLF_IDENTITY(((_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))) ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-0.7, mix(float(_GLF_FUZZED(-7.8)), float(_GLF_IDENTITY(-0.7, max(-0.7, -0.7))), bool(true))), -572.911)) : injectionSwitch))[0], (false ? _GLF_FUZZED(-2535.2801) : (_GLF_IDENTITY((false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-0.7, mix(float(_GLF_FUZZED(-7.8)), float(_GLF_IDENTITY(-0.7, max(-0.7, -0.7))), bool(true))), -572.911)) : injectionSwitch), (_GLF_IDENTITY((false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-0.7, mix(float(_GLF_FUZZED(-7.8)), float(_GLF_IDENTITY(-0.7, max(-0.7, -0.7))), bool(true))), -572.911)) : injectionSwitch), max((false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-0.7, mix(float(_GLF_FUZZED(-7.8)), float(_GLF_IDENTITY(-0.7, max(-0.7, -0.7))), bool(true))), -572.911)) : injectionSwitch), (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-0.7, mix(float(_GLF_FUZZED(-7.8)), float(_GLF_IDENTITY(-0.7, max(-0.7, -0.7))), bool(true))), -572.911)) : injectionSwitch)))) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))[0]))) - abs(0.0)), _GLF_FUZZED(-92.31)), vec2(_GLF_FUZZED((true ? -623.816 : 53.57)), ((false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-0.7, mix(float(_GLF_FUZZED(-7.8)), float(_GLF_IDENTITY(-0.7, max(-0.7, -0.7))), bool(true))), -572.911)) : injectionSwitch))[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))[1], float(mat4x3((_GLF_IDENTITY((false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-0.7, mix(float(_GLF_FUZZED(-7.8)), float(_GLF_IDENTITY(-0.7, max(-0.7, -0.7))), bool(true))), -572.911)) : injectionSwitch), mix(vec2(_GLF_IDENTITY(((false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-0.7, mix(float(_GLF_FUZZED(-7.8)), float(_GLF_IDENTITY(-0.7, max(-0.7, -0.7))), bool(true))), -572.911)) : injectionSwitch))[0], (_GLF_IDENTITY(((_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))) ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-0.7, mix(float(_GLF_FUZZED(-7.8)), float(_GLF_IDENTITY(-0.7, max(-0.7, -0.7))), bool(true))), -572.911)) : injectionSwitch))[0], (false ? _GLF_FUZZED(-2535.2801) : (_GLF_IDENTITY((false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-0.7, mix(float(_GLF_FUZZED(-7.8)), float(_GLF_IDENTITY(-0.7, max(-0.7, -0.7))), bool(true))), -572.911)) : injectionSwitch), (_GLF_IDENTITY((false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-0.7, mix(float(_GLF_FUZZED(-7.8)), float(_GLF_IDENTITY(-0.7, max(-0.7, -0.7))), bool(true))), -572.911)) : injectionSwitch), max((false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-0.7, mix(float(_GLF_FUZZED(-7.8)), float(_GLF_IDENTITY(-0.7, max(-0.7, -0.7))), bool(true))), -572.911)) : injectionSwitch), (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-0.7, mix(float(_GLF_FUZZED(-7.8)), float(_GLF_IDENTITY(-0.7, max(-0.7, -0.7))), bool(true))), -572.911)) : injectionSwitch)))) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))[0]))) - abs(0.0)), _GLF_FUZZED(-92.31)), vec2(_GLF_FUZZED((true ? -623.816 : 53.57)), ((false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-0.7, mix(float(_GLF_FUZZED(-7.8)), float(_GLF_IDENTITY(-0.7, max(-0.7, -0.7))), bool(true))), -572.911)) : injectionSwitch))[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))[1], 1.0, sqrt(1.0), 0.0, 0.0, 1.0, 0.0, cos(0.0), 1.0, cos(_GLF_ZERO(0.0, injectionSwitch.x)), sqrt(1.0), 1.0))), ((false ? _GLF_FUZZED(vec2(-0.7, _GLF_IDENTITY(-572.911, (_GLF_IDENTITY(-572.911, (false ? _GLF_FUZZED(-38.45) : -572.911))) * 1.0))) : injectionSwitch))[1]))), vec2(((false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-0.7, -572.911)), max(_GLF_FUZZED(vec2(-0.7, -572.911)), _GLF_FUZZED(vec2(-0.7, -572.911)))) : injectionSwitch))[0], _GLF_FUZZED(6.7)), bvec2(true, false)))).y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   subgroupAll(true);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true))))))), (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))))))) || false), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-8.6), _GLF_FUZZED(34.03)), bvec2(false, false))).x > _GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, _GLF_IDENTITY(1.0, (1.0) - _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), vec4(1.0, 1.0, 0.0, 1.0)))), 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), max(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), clamp(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))))))))))), bool(bool((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-8.6), _GLF_FUZZED(34.03)), bvec2(false, false))).x > _GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))))))))))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
