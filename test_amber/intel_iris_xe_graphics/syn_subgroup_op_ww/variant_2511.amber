#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_30 {
 mat4x3 _f0;
 int _f1;
 bvec2 _f2;
 mat4 _f3;
 bvec3 _f4;
 mat4 _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_29 {
 bvec3 _f0;
 vec3 _f1;
 mat3x2 _f2;
 mat4 _f3;
} ;

struct _GLF_struct_28 {
 mat2 _f0;
 bvec3 _f1;
 bvec3 _f2;
 int _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_27 {
 ivec3 _f0;
 mat3x4 _f1;
 uvec2 _f2;
 bool _f3;
 uint subgroup_id;
 int _f4;
 mat2x4 _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_31 {
 _GLF_struct_27 _f0;
 _GLF_struct_28 _f1;
 _GLF_struct_29 _f2;
 _GLF_struct_30 _f3;
} ;

struct _GLF_struct_25 {
 bvec3 _f0;
 mat2 _f1;
 mat4x2 _f2;
} ;

struct _GLF_struct_26 {
 mat3x2 _f0;
 _GLF_struct_25 _f1;
} ;

struct _GLF_struct_32 {
 _GLF_struct_26 _f0;
 _GLF_struct_31 _f1;
} ;

struct _GLF_struct_22 {
 int _f0;
 int _f1;
 bvec3 _f2;
 uint workgroup_size;
 uvec2 _f3;
 vec3 _f4;
 mat4x2 _f5;
 vec2 _f6;
} ;

struct _GLF_struct_23 {
 ivec4 _f0;
 mat2 _f1;
 _GLF_struct_22 _f2;
 vec2 _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_24 {
 _GLF_struct_23 _f0;
} ;

struct _GLF_struct_19 {
 vec3 _f0;
} ;

struct _GLF_struct_20 {
 mat2x3 _f0;
 _GLF_struct_19 _f1;
} ;

struct _GLF_struct_17 {
 mat3x4 _f0;
 uvec3 _f1;
 vec2 _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_16 {
 mat3x2 _f0;
 ivec4 _f1;
 uint _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_18 {
 _GLF_struct_16 _f0;
 uint num_workgroup;
 uvec4 _f1;
 _GLF_struct_17 _f2;
 float _f3;
} ;

struct _GLF_struct_14 {
 vec4 _f0;
} ;

struct _GLF_struct_15 {
 _GLF_struct_14 _f0;
 mat2x3 _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_12 {
 vec4 _f0;
 vec3 _f1;
} ;

struct _GLF_struct_13 {
 _GLF_struct_12 _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_21 {
 vec4 _f0;
 _GLF_struct_13 _f1;
 _GLF_struct_15 _f2;
 _GLF_struct_18 _f3;
 uvec2 _f4;
 _GLF_struct_20 _f5;
} ;

struct _GLF_struct_9 {
 vec4 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_8 {
 mat2x4 _f0;
 bvec2 _f1;
} ;

struct _GLF_struct_7 {
 vec2 _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_10 {
 _GLF_struct_7 _f0;
 mat4x2 _f1;
 _GLF_struct_8 _f2;
 mat3x2 _f3;
 _GLF_struct_9 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_5 {
 mat4x3 _f0;
 ivec2 _f1;
 uint _f2;
 vec3 _f3;
 mat2x3 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_4 {
 bool _f0;
 bvec2 _f1;
 uvec4 _f2;
 uvec4 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_3 {
 mat3x4 _f0;
 mat2x3 _f1;
 mat2x4 _f2;
 mat3x2 _f3;
 ivec3 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_2 {
 ivec2 _f0;
 uint _f1;
 mat4x3 _f2;
 uint _f3;
 bool _f4;
} ;

struct _GLF_struct_6 {
 _GLF_struct_2 _f0;
 mat4x2 _f1;
 bvec4 _f2;
 _GLF_struct_3 _f3;
 mat3 _f4;
 _GLF_struct_4 _f5;
 _GLF_struct_5 _f6;
} ;

struct _GLF_struct_0 {
 vec3 _f0;
 mat2x4 _f1;
 uvec4 _f2;
 mat3x2 _f3;
 float _f4;
} ;

struct _GLF_struct_1 {
 mat4x3 _f0;
 _GLF_struct_0 _f1;
} ;

struct _GLF_struct_11 {
 _GLF_struct_1 _f0;
 uvec2 _f1;
 uint workgroup_base;
 _GLF_struct_6 _f2;
 _GLF_struct_10 _f3;
 bvec3 _f4;
 uint _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 _GLF_struct_32 _GLF_struct_replacement_32 = _GLF_struct_32(_GLF_struct_26(mat3x2(1.0), _GLF_struct_25(bvec3(true), mat2(1.0), mat4x2(1.0))), _GLF_struct_31(_GLF_struct_27(_GLF_IDENTITY(ivec3(1), (false ? _GLF_FUZZED(ivec3(-61960, -74510, -540)) : ivec3(1))), mat3x4(_GLF_IDENTITY(1.0, (1.0) - 0.0)), uvec2(1u), true, gl_SubgroupID, 1, mat2x4(1.0), mat4x2(1.0)), _GLF_struct_28(mat2(1.0), bvec3(true), _GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), true))), 1, uvec3(1u)), _GLF_struct_29(bvec3(true), vec3(1.0), mat3x2(1.0), mat4(1.0)), _GLF_struct_30(mat4x3(1.0), 1, bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(false, (false) || false) || (true))), mat4(1.0), bvec3(true), mat4(1.0), bvec4(true))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true)))), ! (! (bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true)))))))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 _GLF_struct_21 _GLF_struct_replacement_21 = _GLF_struct_21(vec4(1.0), _GLF_struct_13(_GLF_struct_12(vec4(1.0), vec3(1.0)), ivec4(1)), _GLF_struct_15(_GLF_struct_14(vec4(1.0)), mat2x3(1.0), uvec3(1u)), _GLF_struct_18(_GLF_struct_16(mat3x2(1.0), ivec4(1), 1u, mat4x2(1.0)), gl_NumWorkGroups.x, uvec4(1u), _GLF_struct_17(mat3x4(1.0), uvec3(1u), vec2(_GLF_IDENTITY(1.0, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))))) < injectionSwitch.y)) ? _GLF_IDENTITY(1.0, (1.0) - 0.0) : _GLF_IDENTITY(_GLF_FUZZED(773.882), (_GLF_FUZZED(773.882)) + sqrt(0.0))))), ivec2(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), 0 + (_GLF_IDENTITY(1, min(1, 1)))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), 0 + (_GLF_IDENTITY(1, min(1, 1)))))), 0, 0))))))), 1.0), uvec2(1u), _GLF_struct_20(mat2x3(1.0), _GLF_struct_19(vec3(1.0))));
 _GLF_struct_24 _GLF_struct_replacement_24 = _GLF_struct_24(_GLF_struct_23(ivec4(1), mat2(1.0), _GLF_struct_22(1, 1, bvec3(true), _GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) + uvec3(0u, 0u, 0u)))).x, uvec2(1u), _GLF_IDENTITY(vec3(1.0), (false ? _GLF_FUZZED(vec3(0.5, 374.011, 10.05)) : _GLF_IDENTITY(vec3(1.0), mix(vec3((vec3(1.0))[0], (vec3(1.0))[1], _GLF_FUZZED(-4.3)), vec3(_GLF_FUZZED(-775.845), _GLF_FUZZED(-6.1), (vec3(1.0))[2]), bvec3(false, false, true))))), mat4x2(1.0), vec2(1.0)), vec2(_GLF_IDENTITY(1.0, max(1.0, 1.0))), mat2x3(1.0)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))))), true && ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, ~ (_GLF_IDENTITY(~ (_injected_loop_counter ++), (~ (_injected_loop_counter ++)) << (_GLF_IDENTITY(0 | 0, (true ? 0 | 0 : _GLF_FUZZED(_injected_loop_counter))))))))
      {
       barrier();
      }
    }
   do
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID)).x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(_GLF_struct_1(mat4x3(1.0), _GLF_struct_0(_GLF_IDENTITY(vec3(1.0), max(_GLF_IDENTITY(vec3(1.0), min(vec3(1.0), vec3(1.0))), vec3(1.0))), mat2x4(1.0), uvec4(1u), mat3x2(1.0), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-8.5))))), _GLF_IDENTITY(uvec2(1u), (_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) - uvec2(0u, 0u))) ^ uvec2(0u, 0u)), _GLF_IDENTITY(_GLF_struct_replacement_24._f0._f2.workgroup_size * workgroup_id, (_GLF_struct_replacement_24._f0._f2.workgroup_size * workgroup_id) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_struct_6(_GLF_struct_2(ivec2(1), 1u, mat4x3(_GLF_IDENTITY(1.0, float(mat4x3(1.0, 0.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0)))), 1u, true), mat4x2(1.0), bvec4(true), _GLF_struct_3(mat3x4(1.0), mat2x3(1.0), mat2x4(1.0), mat3x2(1.0), ivec3(1), ivec3(1)), _GLF_IDENTITY(mat3(1.0), (false ? _GLF_FUZZED(mat3(7.8, -74.18, 17.77, -1106.9831, -60.28, 74.96, _GLF_IDENTITY(0.7, min(0.7, 0.7)), -2.0, 2.1)) : mat3(1.0))), _GLF_struct_4(true, _GLF_IDENTITY(bvec2(true), bvec2(bvec4(bvec2(true), true, _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false)))))))), uvec4(1u), uvec4(_GLF_IDENTITY(1u, ~ (~ (1u)))), bvec2(true)), _GLF_struct_5(mat4x3(1.0), ivec2(1), 1u, vec3(1.0), mat2x3(_GLF_IDENTITY(1.0, (1.0) * 1.0)), ivec2(1))), _GLF_struct_10(_GLF_struct_7(vec2(1.0), mat3x4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(max(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) ? 1.0 : _GLF_FUZZED(_GLF_IDENTITY(-1.9, _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(-1.9, (-1.9) * 1.0), sqrt(0.0), 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 1.0)), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), min(float(mat2x3(_GLF_IDENTITY(-1.9, (-1.9) * 1.0), sqrt(0.0), 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 1.0)), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), float(mat2x3(_GLF_IDENTITY(-1.9, (-1.9) * 1.0), sqrt(0.0), 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 1.0, 0.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 1.0)), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))))))))), 1.0), (max(_GLF_IDENTITY(1.0, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(58.75)), bool(false))) < injectionSwitch.y)) ? 1.0 : _GLF_IDENTITY(_GLF_FUZZED(-1.9), mix(float(_GLF_IDENTITY(_GLF_FUZZED(-1.9), float(mat3x2(_GLF_FUZZED(-1.9), 1.0, 1.0, 1.0, 1.0, 0.0)))), float(_GLF_FUZZED(7566.3956)), bool(false))))), _GLF_IDENTITY(1.0, (1.0) - 0.0))) * 1.0)))), mat4x2(1.0), _GLF_struct_8(mat2x4(1.0), bvec2(true)), mat3x2(1.0), _GLF_struct_9(vec4(1.0), uvec4(1u)), mat4x2(1.0)), bvec3(_GLF_IDENTITY(true, true && (true))), 1u);
 uint virtual_gid = _GLF_IDENTITY(_GLF_struct_replacement_11.workgroup_base + _GLF_struct_replacement_32._f1._f0.subgroup_id * _GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), subgroup_size, _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(subgroup_local_id))))))) + subgroup_local_id, _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_struct_replacement_11.workgroup_base + _GLF_struct_replacement_32._f1._f0.subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec4(subgroup_size, 0u, (1u | 1u), ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))))), (uint(uvec4(subgroup_size, 0u, (1u | 1u), ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (true ? uint(6u) : _GLF_FUZZED(workgroup_id)))))))) << 0u)) + subgroup_local_id, clamp(_GLF_struct_replacement_11.workgroup_base + _GLF_struct_replacement_32._f1._f0.subgroup_id * subgroup_size + subgroup_local_id, _GLF_struct_replacement_11.workgroup_base + _GLF_struct_replacement_32._f1._f0.subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u))) + _GLF_IDENTITY(subgroup_local_id, 0u + (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u))))), _GLF_IDENTITY(_GLF_struct_replacement_11.workgroup_base + _GLF_struct_replacement_32._f1._f0.subgroup_id * subgroup_size, (_GLF_struct_replacement_11.workgroup_base + _GLF_struct_replacement_32._f1._f0.subgroup_id * subgroup_size) | (_GLF_struct_replacement_11.workgroup_base + _GLF_struct_replacement_32._f1._f0.subgroup_id * subgroup_size)) + subgroup_local_id)) : _GLF_FUZZED(subgroup_local_id)), ((true ? _GLF_IDENTITY(_GLF_struct_replacement_11.workgroup_base + _GLF_struct_replacement_32._f1._f0.subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec4(subgroup_size, 0u, (1u | 1u), ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))))), (uint(uvec4(subgroup_size, 0u, (1u | 1u), ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (true ? uint(6u) : _GLF_FUZZED(workgroup_id)))))))) << 0u)) + subgroup_local_id, clamp(_GLF_struct_replacement_11.workgroup_base + _GLF_struct_replacement_32._f1._f0.subgroup_id * subgroup_size + subgroup_local_id, _GLF_struct_replacement_11.workgroup_base + _GLF_struct_replacement_32._f1._f0.subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u))) + _GLF_IDENTITY(subgroup_local_id, 0u + (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u))))), _GLF_IDENTITY(_GLF_struct_replacement_11.workgroup_base + _GLF_struct_replacement_32._f1._f0.subgroup_id * subgroup_size, (_GLF_struct_replacement_11.workgroup_base + _GLF_struct_replacement_32._f1._f0.subgroup_id * subgroup_size) | (_GLF_struct_replacement_11.workgroup_base + _GLF_struct_replacement_32._f1._f0.subgroup_id * subgroup_size)) + subgroup_local_id)) : _GLF_FUZZED(subgroup_local_id))) | 0u));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint next_virtual_gid = _GLF_struct_replacement_11.workgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_32._f1._f0.subgroup_id * subgroup_size, (_GLF_struct_replacement_32._f1._f0.subgroup_id * subgroup_size) >> 0u) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4(injectionSwitch.x, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(vec4(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-8.9)), float(0.0), bool(true))), 1.0, 0.0, 0.0), mat4(1.0) * (vec4(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-8.9)), float(0.0), bool(true))), 1.0, 0.0, 0.0))), vec4(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 1.0) * (vec4(0.0, 1.0, 0.0, 0.0)))), clamp(float(_GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(0.0, 1.0, 0.0, 0.0)))), float(_GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(0.0, 1.0, 0.0, 0.0)))), float(_GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2(0.0, 0.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat2(6.4, 36.67, -1858.1074, 7.0)) : mat2(0.0, 0.0, 0.0, 0.0))))), 1.0, 0.0, 0.0))))))), 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), tan(0.0), 1.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, abs(1.0), 1.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, abs(1.0), 1.0)), min(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, abs(1.0), 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, abs(1.0), 1.0))))), 0.0, 0.0, 1.0), (false ? _GLF_FUZZED(_GLF_IDENTITY(mat4(37.10, 9852.7387, -29.73, 2.1, 24.53, 803.024, 1.5, 7.2, -25.08, 6.4, 470.470, -8.9, 9.5, 157.207, -748.782, 507.986), mat4(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(37.10, 9852.7387, -29.73, 2.1, 24.53, 803.024, 1.5, 7.2, -25.08, 6.4, 470.470, -8.9, 9.5, 157.207, -748.782, 507.986)))) : mat4(injectionSwitch.x, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), tan(0.0), 1.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(0.0, abs(1.0), 1.0), mix(vec3((vec3(0.0, abs(1.0), 1.0))[0], (vec3(0.0, abs(1.0), 1.0))[1], (vec3(_GLF_IDENTITY(0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, round(length(normalize(1.0))), exp(0.0), 0.0)) + (0.0)), abs(1.0), 1.0))[2]), vec3(_GLF_IDENTITY(_GLF_FUZZED((8.5 - -731.137)), float(mat4(_GLF_IDENTITY(_GLF_FUZZED((8.5 - -731.137)), mix(float(_GLF_FUZZED(-6.5)), float(_GLF_FUZZED((8.5 - -731.137))), bool(true))), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0))), _GLF_FUZZED(255.474), _GLF_FUZZED(-5.7)), bvec3(false, false, false)))), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, abs(1.0), 1.0))), 0.0, 0.0, 1.0))))), float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4(injectionSwitch.x, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(0.0, _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(87.71)), float(0.0), bool(true))))))), (float(_GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(87.71)), float(0.0), bool(true)))))))) - 0.0), clamp(float(_GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(0.0, 1.0, 0.0, 0.0)))), float(_GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(0.0, 1.0, 0.0, 0.0)))), float(_GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(8758.2436)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0)), 1.0, 0.0, 0.0))))))), 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), tan(0.0), 1.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, abs(1.0), 1.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, abs(1.0), 1.0)), min(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, abs(1.0), 1.0)), dot(vec3(_GLF_IDENTITY(1.0, 1.0 * (1.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0), vec3(0.0, _GLF_IDENTITY(abs(1.0), mix(float(abs(1.0)), float(_GLF_FUZZED(-3.1)), bool(false))), 1.0))))), 0.0, 0.0, 1.0), (false ? _GLF_FUZZED(_GLF_IDENTITY(mat4(37.10, 9852.7387, -29.73, 2.1, 24.53, 803.024, 1.5, 7.2, -25.08, 6.4, 470.470, -8.9, 9.5, 157.207, -748.782, _GLF_IDENTITY(507.986, max(507.986, 507.986))), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(37.10, 9852.7387, -29.73, 2.1, 24.53, 803.024, 1.5, 7.2, -25.08, 6.4, 470.470, -8.9, 9.5, 157.207, -748.782, 507.986)))) : mat4(injectionSwitch.x, 1.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), tan(0.0), 1.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(0.0, abs(1.0), 1.0), mix(vec3((vec3(0.0, abs(1.0), 1.0))[0], (vec3(0.0, abs(1.0), 1.0))[1], (vec3(0.0, abs(1.0), 1.0))[2]), vec3(_GLF_FUZZED((8.5 - -731.137)), _GLF_FUZZED(255.474), _GLF_FUZZED(-5.7)), bvec3(false, false, false)))), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, abs(1.0), 1.0))), 0.0, 0.0, 1.0))))), 0.0 + (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4(injectionSwitch.x, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(0.0, 1.0, 0.0, 0.0)))), clamp(float(_GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 0.0, 0.0)))), float(_GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) / 1.0), 0.0, 0.0)))), float(_GLF_IDENTITY(vec4(0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(0.0, 1.0, 0.0, 0.0))))))), 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), tan(0.0), 1.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, abs(1.0), 1.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, abs(1.0), 1.0)), min(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, abs(1.0), 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, abs(1.0), 1.0))))), 0.0, 0.0, 1.0), (false ? _GLF_FUZZED(_GLF_IDENTITY(mat4(37.10, 9852.7387, -29.73, 2.1, 24.53, 803.024, 1.5, 7.2, -25.08, 6.4, 470.470, -8.9, 9.5, 157.207, -748.782, 507.986), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(37.10, 9852.7387, -29.73, 2.1, 24.53, 803.024, 1.5, 7.2, -25.08, 6.4, 470.470, -8.9, 9.5, 157.207, _GLF_IDENTITY(-748.782, mix(float(_GLF_FUZZED(65.86)), float(-748.782), bool(true))), 507.986)))) : mat4(injectionSwitch.x, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), tan(0.0), 1.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(_GLF_IDENTITY(vec3(0.0, abs(1.0), 1.0), mix(vec3(_GLF_FUZZED(2.8), _GLF_FUZZED(8.0), (vec3(0.0, abs(1.0), 1.0))[2]), vec3((vec3(0.0, abs(1.0), 1.0))[0], (vec3(0.0, abs(1.0), 1.0))[1], _GLF_FUZZED(9438.2227)), bvec3(true, true, false))), mix(vec3((vec3(0.0, abs(1.0), 1.0))[0], (vec3(0.0, abs(1.0), 1.0))[1], _GLF_IDENTITY((vec3(0.0, abs(1.0), 1.0))[2], (true ? (vec3(0.0, abs(1.0), 1.0))[2] : _GLF_FUZZED(smoothstep(3.1, -703.850, -14.35))))), vec3(_GLF_FUZZED((8.5 - -731.137)), _GLF_FUZZED(255.474), _GLF_FUZZED(-5.7)), bvec3(false, false, false)))), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, abs(1.0), 1.0))), 0.0, 0.0, 1.0))))))), 1.0, 1.0, 0.0, 1.0, 1.0, cos(0.0), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)), tan(0.0)))) < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), false, true, true))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               barrier();
               for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     do
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false)))));
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) || false))), ! (! ((! (_GLF_IDENTITY(false, (false) || false)))))))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2((mat2(1.0) * (injectionSwitch))[0], (mat2(1.0) * (injectionSwitch))[1]), vec2(_GLF_FUZZED(_GLF_IDENTITY(-83.68, (_GLF_IDENTITY(-83.68, max(-83.68, -83.68))) + sin(0.0))), _GLF_FUZZED(8.5)), bvec2(false, false)))).x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false))))))))), ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))), _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, false, false))), (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))))), bool(_GLF_IDENTITY(bvec3(! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))))), true, false), bvec3(bvec4(bvec3(! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))))), true, false), true))))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false))))))), false || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false)))))))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
      {
      }
     else
      {
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 | 0) << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 & 1) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ (_GLF_IDENTITY(int(5), (int(5)) | 0))))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 do
  {
   if(subgroup_local_id + 1 < subgroup_size)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)))), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y)))))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0))).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(_GLF_IDENTITY(0.0, 0.0 + (0.0)), injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(2, 1 * (2))), (uint(_GLF_IDENTITY(2, 1 * (2)))) | 0u), 4, 64, 4);
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), _GLF_FUZZED(-28.65)), vec2(_GLF_FUZZED(87.70), (injectionSwitch)[1]), bvec2(false, true))), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     do
      {
       subgroupAll(false);
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(false, false || (false)) || (_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), (! (false)) || false)) || false))), false)))))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) ^ 0))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, true))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), (bool(bvec2(false, false))) || false)), (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), false, true, false))))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     atomicStore(buf[next_virtual_gid], uint(2), 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, max(64, 64))) >> 0), 4);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     subgroupAll(true);
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, false, true)), (bool(bvec3(false, false, true))) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3(false, false, true)), (bool(bvec3(false, false, true))) && true)), bool(bvec3(! (_GLF_IDENTITY(bool(bvec3(false, false, true)), (bool(bvec3(false, false, true))) && true)), true, false))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, 0 | (1))))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1))))))))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), ~ _GLF_IDENTITY((~ (int(3))), (true ? (~ (int(3))) : _GLF_FUZZED(-81084)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), max(int(3), int(3))), 0 ^ (int(3))), ~ (~ (int(3)))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY(~ (~ (int(3))), 0 | (~ (~ (int(3))))))) | 0)) * 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         else
          {
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
