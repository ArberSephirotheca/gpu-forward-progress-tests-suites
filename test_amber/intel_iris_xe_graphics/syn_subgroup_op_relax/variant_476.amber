#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 0) uniform buf0 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | 0)))); _injected_loop_counter ++)
        {
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, false || (true)) && (_GLF_IDENTITY(false, ! (! (false)))))))
        return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! ((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
            {
             return;
            }
           else
            {
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec3(gl_NumWorkGroups)), uvec3(0u, 0u, _GLF_IDENTITY(0u, min(0u, 0u))) | _GLF_IDENTITY((uvec3(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)), (true ? _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups) + uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) ^ ((gl_NumWorkGroups) + uvec3(0u, 0u, 0u))))) << _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) * uint(_GLF_ONE(1.0, injectionSwitch.y))))) - (uvec3(0u, 0u, 0u) ^ uvec3(0u, 0u, 0u)))) : _GLF_FUZZED(uvec3(185509u))))))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, clamp(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)), _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups)), _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))))) >> uvec3(0u, 0u, 0u))[0], _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups[1], max(gl_NumWorkGroups[_GLF_IDENTITY(1, 1 * (1))], gl_NumWorkGroups[1])), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups[1], max(gl_NumWorkGroups[_GLF_IDENTITY(1, 1 * (1))], gl_NumWorkGroups[1])), (_GLF_IDENTITY(gl_NumWorkGroups[1], max(gl_NumWorkGroups[_GLF_IDENTITY(1, 1 * (1))], gl_NumWorkGroups[1]))) | 0u)) | (_GLF_IDENTITY(gl_NumWorkGroups[1], max(gl_NumWorkGroups[_GLF_IDENTITY(1, 1 * (1))], gl_NumWorkGroups[1])))), gl_NumWorkGroups[2]), ~ (_GLF_IDENTITY(~ (uvec3(gl_NumWorkGroups[0], _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups[1], (gl_NumWorkGroups[1]) ^ 0u), max(gl_NumWorkGroups[_GLF_IDENTITY(1, 1 * (1))], _GLF_IDENTITY(gl_NumWorkGroups[1], ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))) * (gl_NumWorkGroups[1])))), gl_NumWorkGroups[2])), uvec3(0u, 0u, _GLF_IDENTITY(0u, 0u | (0u))) + (_GLF_IDENTITY(~ (uvec3(gl_NumWorkGroups[0], _GLF_IDENTITY(gl_NumWorkGroups[1], max(gl_NumWorkGroups[_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, ~ (~ (1))), 1)), 1 * (1))], gl_NumWorkGroups[1])), gl_NumWorkGroups[2])), max(~ (uvec3(gl_NumWorkGroups[0], _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))[1], _GLF_IDENTITY(max(gl_NumWorkGroups[_GLF_IDENTITY(1, 1 * (1))], gl_NumWorkGroups[1]), uint(_GLF_IDENTITY(uint(max(gl_NumWorkGroups[_GLF_IDENTITY(1, 1 * (1))], gl_NumWorkGroups[1])), 0u | (uint(max(gl_NumWorkGroups[_GLF_IDENTITY(_GLF_IDENTITY(1, 1 * (1)), 0 ^ (_GLF_IDENTITY(1, 1 * (1))))], gl_NumWorkGroups[1]))))))), gl_NumWorkGroups[2])), ~ (uvec3(gl_NumWorkGroups[0], _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups[1], 0u ^ (_GLF_IDENTITY(gl_NumWorkGroups[1], 0u | (gl_NumWorkGroups[1])))), max(gl_NumWorkGroups[_GLF_IDENTITY(1, 1 * (1))], gl_NumWorkGroups[1])), gl_NumWorkGroups[2]))))))))), _GLF_IDENTITY(gl_NumWorkGroups, (true ? _GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(37236u, (_GLF_IDENTITY(37236u, (37236u) / 1u)) - 0u), 89558u, 137369u)) : gl_NumWorkGroups)) : _GLF_FUZZED(uvec3(171081u, 41730u, 122025u)))))))), (uvec3(_GLF_IDENTITY(uvec3(gl_NumWorkGroups), min(uvec3(gl_NumWorkGroups), uvec3(gl_NumWorkGroups))))) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), (true ? _GLF_IDENTITY((uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(gl_NumWorkGroups), (true ? uvec3(gl_NumWorkGroups) : _GLF_FUZZED((subgroup_size & uvec3(_GLF_IDENTITY(193036u, 1u * (_GLF_IDENTITY(193036u, max(_GLF_IDENTITY(193036u, 0u | (_GLF_IDENTITY(193036u, (1u ^ 1u) ^ (193036u)))), _GLF_IDENTITY(193036u, (0u ^ 0u) + (193036u)))))), 37481u, 34149u))))), clamp(_GLF_IDENTITY(uvec3(gl_NumWorkGroups), (true ? uvec3(gl_NumWorkGroups) : _GLF_FUZZED(_GLF_IDENTITY((subgroup_size & uvec3(_GLF_IDENTITY(193036u, max(193036u, 193036u)), 37481u, 34149u)), clamp((subgroup_size & uvec3(_GLF_IDENTITY(193036u, max(193036u, 193036u)), 37481u, 34149u)), _GLF_IDENTITY((subgroup_size & uvec3(_GLF_IDENTITY(193036u, max(193036u, 193036u)), 37481u, 34149u)), ((subgroup_size & uvec3(_GLF_IDENTITY(193036u, max(193036u, 193036u)), 37481u, 34149u))) ^ uvec3(0u, 0u, 0u)), (subgroup_size & uvec3(_GLF_IDENTITY(193036u, max(193036u, 193036u)), 37481u, 34149u))))))), _GLF_IDENTITY(uvec3(gl_NumWorkGroups), _GLF_IDENTITY((true ? uvec3(gl_NumWorkGroups) : _GLF_IDENTITY(_GLF_FUZZED((subgroup_size & uvec3(193036u, 37481u, 34149u))), (_GLF_FUZZED((subgroup_size & uvec3(193036u, 37481u, 34149u)))) | uvec3(0u, 0u, 0u))), max((true ? uvec3(gl_NumWorkGroups) : _GLF_IDENTITY(_GLF_FUZZED((subgroup_size & uvec3(193036u, 37481u, 34149u))), (_GLF_FUZZED((subgroup_size & uvec3(193036u, 37481u, 34149u)))) | uvec3(0u, 0u, 0u))), (true ? uvec3(gl_NumWorkGroups) : _GLF_IDENTITY(_GLF_FUZZED((subgroup_size & uvec3(193036u, 37481u, 34149u))), (_GLF_FUZZED((subgroup_size & uvec3(193036u, 37481u, 34149u)))) | uvec3(0u, 0u, 0u)))))), _GLF_IDENTITY(uvec3(gl_NumWorkGroups), _GLF_IDENTITY((true ? uvec3(gl_NumWorkGroups) : _GLF_FUZZED((subgroup_size & uvec3(193036u, _GLF_IDENTITY(37481u, (37481u) - 0u), 34149u)))), min(_GLF_IDENTITY((true ? uvec3(gl_NumWorkGroups) : _GLF_FUZZED((subgroup_size & uvec3(193036u, _GLF_IDENTITY(37481u, (37481u) - 0u), 34149u)))), ((true ? uvec3(gl_NumWorkGroups) : _GLF_FUZZED((subgroup_size & uvec3(193036u, _GLF_IDENTITY(37481u, (37481u) - 0u), 34149u))))) | uvec3(0u, 0u, 0u)), (true ? uvec3(gl_NumWorkGroups) : _GLF_FUZZED((subgroup_size & uvec3(193036u, _GLF_IDENTITY(37481u, (37481u) - 0u), 34149u))))))))))), clamp((uvec3(uvec3(gl_NumWorkGroups))), (uvec3(uvec3(gl_NumWorkGroups))), (uvec3(uvec3(gl_NumWorkGroups))))) : _GLF_FUZZED((_GLF_IDENTITY(uvec3(186750u, 115253u, 77470u) | _GLF_IDENTITY(_GLF_IDENTITY(uvec3(44497u, 71105u, _GLF_IDENTITY(176352u, (176352u) ^ 0u)), (_GLF_IDENTITY(uvec3(44497u, 71105u, 176352u), uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(44497u, 71105u, 176352u), clamp(uvec3(44497u, 71105u, _GLF_IDENTITY(176352u, 0u + (176352u))), uvec3(44497u, 71105u, 176352u), uvec3(44497u, 71105u, 176352u)))), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(44497u, 71105u, 176352u), clamp(uvec3(44497u, 71105u, 176352u), uvec3(44497u, 71105u, 176352u), uvec3(44497u, 71105u, 176352u)))), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(44497u, 71105u, 176352u), clamp(uvec3(44497u, 71105u, 176352u), uvec3(44497u, 71105u, 176352u), uvec3(44497u, 71105u, 176352u)))), uvec3(0u, 0u, 0u) ^ (uvec3(_GLF_IDENTITY(uvec3(44497u, 71105u, 176352u), clamp(uvec3(44497u, 71105u, 176352u), uvec3(44497u, 71105u, 176352u), uvec3(44497u, 71105u, 176352u))))))) | uvec3(0u, 0u, 0u))) / uvec3(1u, 1u, 1u))))) * uvec3(_GLF_IDENTITY(1u, (1u) << 0u), 1u, 1u)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(uvec3(44497u, 71105u, _GLF_IDENTITY(176352u, (176352u) ^ 0u)), (_GLF_IDENTITY(uvec3(44497u, _GLF_IDENTITY(71105u, uint(uvec3(_GLF_IDENTITY(71105u, (71105u) >> 0u), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y))))), 176352u), uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(44497u, 71105u, 176352u), clamp(uvec3(_GLF_IDENTITY(44497u, (44497u) - (0u ^ 0u)), 71105u, _GLF_IDENTITY(176352u, 0u + (176352u))), uvec3(44497u, 71105u, 176352u), uvec3(44497u, 71105u, 176352u)))), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(44497u, 71105u, 176352u), clamp(uvec3(44497u, 71105u, 176352u), uvec3(44497u, 71105u, 176352u), uvec3(44497u, 71105u, 176352u)))), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(44497u, 71105u, 176352u), clamp(uvec3(44497u, 71105u, 176352u), uvec3(44497u, 71105u, 176352u), uvec3(44497u, 71105u, 176352u)))), uvec3(0u, 0u, 0u) ^ (uvec3(_GLF_IDENTITY(uvec3(44497u, 71105u, 176352u), clamp(uvec3(44497u, 71105u, _GLF_IDENTITY(176352u, 0u | (176352u))), uvec3(44497u, 71105u, 176352u), uvec3(44497u, _GLF_IDENTITY(71105u, max(71105u, _GLF_IDENTITY(71105u, 0u ^ (71105u)))), 176352u))))))) | uvec3(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u)), 0u))) / uvec3(1u, 1u, 1u))))) * uvec3(_GLF_IDENTITY(1u, (1u) << 0u), 1u, 1u)) : _GLF_FUZZED(uvec3(159054u, 133813u, 66320u)))), (uvec3(_GLF_IDENTITY(186750u, min(186750u, 186750u)), 115253u, 77470u) | uvec3(44497u, 71105u, 176352u)) >> _GLF_IDENTITY(uvec3(0u, _GLF_IDENTITY(0u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : 0u)), 0u), (uvec3(0u, _GLF_IDENTITY(0u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : 0u)), 0u)) >> uvec3(0u, 0u, 0u))))))), (uvec3(uvec3(gl_NumWorkGroups))), _GLF_IDENTITY((uvec3(uvec3(gl_NumWorkGroups))), ((uvec3(uvec3(gl_NumWorkGroups)))) | uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) >> 0u))))))).x;
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, min(gl_WorkGroupSize, gl_WorkGroupSize)), (_GLF_IDENTITY(gl_WorkGroupSize, min(gl_WorkGroupSize, gl_WorkGroupSize))) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, min(gl_WorkGroupSize, gl_WorkGroupSize)), uvec3(uvec3(_GLF_IDENTITY(gl_WorkGroupSize, min(gl_WorkGroupSize, gl_WorkGroupSize))))))), clamp(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), _GLF_IDENTITY(~ (~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(1u, 1u, 1u) * (gl_WorkGroupSize))))), uvec3(0u, 0u, 0u) + (~ (gl_WorkGroupSize)))))), max(~ (~ (~ (~ (gl_WorkGroupSize)))), ~ (~ (~ (~ (gl_WorkGroupSize)))))))), gl_WorkGroupSize)), gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u))))).x, (_GLF_IDENTITY(gl_WorkGroupSize, clamp(_GLF_IDENTITY(gl_WorkGroupSize, clamp(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) | (gl_WorkGroupSize)), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((gl_WorkGroupSize), min((gl_WorkGroupSize), (gl_WorkGroupSize)))), ~ (~ (~ (~ (gl_WorkGroupSize)))))), clamp(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ _GLF_IDENTITY((~ (~ (~ _GLF_IDENTITY((gl_WorkGroupSize), (_GLF_IDENTITY((gl_WorkGroupSize), uvec3(uvec4((gl_WorkGroupSize), 0u)))) * uvec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))))), (_GLF_IDENTITY((~ (~ (~ _GLF_IDENTITY((gl_WorkGroupSize), (_GLF_IDENTITY((gl_WorkGroupSize), uvec3(uvec4((gl_WorkGroupSize), 0u)))) * uvec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))))), min((~ (~ (~ _GLF_IDENTITY((gl_WorkGroupSize), (_GLF_IDENTITY((gl_WorkGroupSize), uvec3(uvec4((gl_WorkGroupSize), 0u)))) * uvec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))))), (~ (~ (~ _GLF_IDENTITY((gl_WorkGroupSize), (_GLF_IDENTITY((gl_WorkGroupSize), uvec3(uvec4((gl_WorkGroupSize), 0u)))) * uvec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))))))) / uvec3(1u, 1u, 1u)))), _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((gl_WorkGroupSize), uvec3(0u, 0u, 0u) + ((gl_WorkGroupSize))) >> uvec3(0u, 0u, 0u)))))))), _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize)))))))), gl_WorkGroupSize)), gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)))).x) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)), clamp(_GLF_IDENTITY(gl_WorkGroupSize, clamp(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) | (gl_WorkGroupSize)))), _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), _GLF_IDENTITY(~ (~ (~ (~ (gl_WorkGroupSize)))), ~ (~ (~ (~ (~ (~ (gl_WorkGroupSize))))))))), gl_WorkGroupSize)), gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)))).x, clamp(_GLF_IDENTITY(gl_WorkGroupSize, clamp(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])), _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize))))), clamp(_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize))))), _GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize))))), _GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize)))))))), gl_WorkGroupSize)), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize)))))), gl_WorkGroupSize)))), gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, _GLF_IDENTITY(0u, _GLF_IDENTITY((0u), max((0u), _GLF_IDENTITY((0u), 0u ^ (_GLF_IDENTITY((0u), uint(uint((0u)))))))) / 1u), 0u)))).x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, clamp(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) * uvec3(1u, 1u, 1u)), _GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize)))))), gl_WorkGroupSize)), gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)))), (_GLF_IDENTITY(gl_WorkGroupSize, clamp(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])), clamp(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(6u), uvec3(6u))) ^ (gl_WorkGroupSize)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_WorkGroupSize, (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(6u), uvec3(6u))) ^ (gl_WorkGroupSize))), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_WorkGroupSize, (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(6u), uvec3(6u))) ^ (gl_WorkGroupSize))), ~ (~ (~ (_GLF_IDENTITY(gl_WorkGroupSize, (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(6u), uvec3(6u))) ^ (gl_WorkGroupSize)))))), ~ (_GLF_IDENTITY(gl_WorkGroupSize, (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(6u), uvec3(6u))) ^ (gl_WorkGroupSize))))))))), ~ (_GLF_IDENTITY(~ (~ (~ (gl_WorkGroupSize))), (~ (~ (~ (gl_WorkGroupSize)))) | (~ (~ (~ (gl_WorkGroupSize)))))))), gl_WorkGroupSize)), gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, min(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))))), (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) | (gl_WorkGroupSize)), (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) | (gl_WorkGroupSize))) | (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) | (gl_WorkGroupSize))))))) | uvec3(0u, 0u, 0u))))) | uvec3(0u, _GLF_IDENTITY(0u, _GLF_IDENTITY((true ? 0u : _GLF_FUZZED(subgroup_size)), ~ (~ ((true ? 0u : _GLF_FUZZED(subgroup_size)))))), 0u)).x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, clamp(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), uvec3(0u, 0u, 0u) + (~ (~ (gl_WorkGroupSize)))))))), gl_WorkGroupSize)), gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((gl_WorkGroupSize) | uvec3(0u, 0u, 0u), clamp(_GLF_IDENTITY((gl_WorkGroupSize) | uvec3(0u, 0u, 0u), (_GLF_IDENTITY((gl_WorkGroupSize) | uvec3(0u, 0u, 0u), ~ _GLF_IDENTITY((~ ((gl_WorkGroupSize) | uvec3(0u, 0u, 0u))), ~ (~ ((~ ((gl_WorkGroupSize) | uvec3(0u, 0u, 0u)))))))) << uvec3(0u, 0u, 0u)), (gl_WorkGroupSize) | uvec3(0u, 0u, 0u), (gl_WorkGroupSize) | uvec3(_GLF_IDENTITY(0u, (0u ^ 0u) | (0u)), 0u, 0u)))))).x, (_GLF_IDENTITY(gl_WorkGroupSize, clamp(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), uvec3(0u, 0u, 0u) + (~ (~ (gl_WorkGroupSize)))))))), gl_WorkGroupSize)), gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((gl_WorkGroupSize) | uvec3(0u, 0u, 0u), clamp(_GLF_IDENTITY((gl_WorkGroupSize) | uvec3(0u, 0u, 0u), (_GLF_IDENTITY((gl_WorkGroupSize) | uvec3(0u, 0u, 0u), ~ _GLF_IDENTITY((~ ((gl_WorkGroupSize) | uvec3(0u, 0u, 0u))), ~ (~ ((~ ((gl_WorkGroupSize) | uvec3(0u, 0u, 0u)))))))) << uvec3(0u, 0u, 0u)), (gl_WorkGroupSize) | uvec3(0u, 0u, 0u), (gl_WorkGroupSize) | uvec3(_GLF_IDENTITY(0u, (0u ^ 0u) | (0u)), 0u, 0u)))))).x) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, clamp(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), uvec3(0u, 0u, 0u) + (~ (~ (gl_WorkGroupSize)))))))), gl_WorkGroupSize)), gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((gl_WorkGroupSize) | uvec3(0u, 0u, 0u), clamp(_GLF_IDENTITY((gl_WorkGroupSize) | uvec3(0u, 0u, 0u), (_GLF_IDENTITY((gl_WorkGroupSize) | uvec3(0u, 0u, 0u), ~ _GLF_IDENTITY((~ ((gl_WorkGroupSize) | uvec3(0u, 0u, 0u))), ~ (~ ((~ ((gl_WorkGroupSize) | uvec3(0u, 0u, 0u)))))))) << uvec3(0u, 0u, 0u)), (gl_WorkGroupSize) | uvec3(0u, 0u, 0u), (gl_WorkGroupSize) | uvec3(_GLF_IDENTITY(0u, (0u ^ 0u) | (0u)), 0u, 0u)))))).x, (_GLF_IDENTITY(gl_WorkGroupSize, clamp(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), uvec3(0u, 0u, 0u) + (~ (~ (gl_WorkGroupSize)))))))), gl_WorkGroupSize)), gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((gl_WorkGroupSize) | uvec3(0u, 0u, 0u), clamp(_GLF_IDENTITY((gl_WorkGroupSize) | uvec3(0u, 0u, 0u), (_GLF_IDENTITY((gl_WorkGroupSize) | uvec3(0u, 0u, 0u), ~ _GLF_IDENTITY((~ ((gl_WorkGroupSize) | uvec3(0u, 0u, 0u))), ~ (~ ((~ ((gl_WorkGroupSize) | uvec3(0u, 0u, 0u)))))))) << uvec3(0u, 0u, 0u)), (gl_WorkGroupSize) | uvec3(0u, 0u, 0u), (gl_WorkGroupSize) | uvec3(_GLF_IDENTITY(0u, (0u ^ 0u) | (0u)), 0u, 0u)))))).x) / 1u)))) - 0u), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, clamp(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), (true ? ~ (gl_WorkGroupSize) : _GLF_FUZZED(uvec3(77540u, 9729u, 122557u)))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize)))))), (~ (_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize))))))) | (~ (_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize))))))))))) + uvec3(0u, 0u, 0u))), gl_WorkGroupSize)), gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)))).x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, clamp(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), (true ? ~ (gl_WorkGroupSize) : _GLF_FUZZED(uvec3(77540u, 9729u, 122557u)))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize)))))), (~ (_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize))))))) | (~ (_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize))))))))))) + uvec3(0u, 0u, 0u))), gl_WorkGroupSize)), gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)))).x, clamp(_GLF_IDENTITY(gl_WorkGroupSize, clamp(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), (true ? ~ (gl_WorkGroupSize) : _GLF_FUZZED(uvec3(77540u, 9729u, 122557u)))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize)))))), (~ (_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize))))))) | (~ (_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize))))))))))) + uvec3(0u, 0u, 0u))), gl_WorkGroupSize)), gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)))).x, _GLF_IDENTITY(gl_WorkGroupSize, clamp(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), (true ? ~ (gl_WorkGroupSize) : _GLF_FUZZED(uvec3(77540u, 9729u, 122557u)))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize)))))), (~ (_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize))))))) | (~ (_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize))))))))))) + uvec3(0u, 0u, 0u))), gl_WorkGroupSize)), gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)))).x, _GLF_IDENTITY(gl_WorkGroupSize, clamp(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), (true ? ~ (gl_WorkGroupSize) : _GLF_FUZZED(uvec3(77540u, 9729u, 122557u)))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize)))))), (~ (_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize))))))) | (~ (_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize))))))))))) + uvec3(0u, 0u, 0u))), gl_WorkGroupSize)), gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)))).x)), _GLF_IDENTITY(gl_WorkGroupSize, clamp(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), (true ? ~ (gl_WorkGroupSize) : _GLF_FUZZED(uvec3(77540u, 9729u, 122557u)))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize)))))), (~ (_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize))))))) | (~ (_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize))))))))))) + uvec3(0u, 0u, 0u))), gl_WorkGroupSize)), gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)))).x, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, clamp(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), (true ? ~ (gl_WorkGroupSize) : _GLF_FUZZED(uvec3(77540u, 9729u, 122557u)))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize)))))), (~ (_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize))))))) | (~ (_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize))))))))))) + uvec3(0u, 0u, 0u))), gl_WorkGroupSize)), gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)))).x, (_GLF_IDENTITY(gl_WorkGroupSize, clamp(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), (true ? ~ (gl_WorkGroupSize) : _GLF_FUZZED(uvec3(77540u, 9729u, 122557u)))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize)))))), (~ (_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize))))))) | (~ (_GLF_IDENTITY(~ (~ (gl_WorkGroupSize)), ~ (~ (~ (~ (gl_WorkGroupSize))))))))))) + uvec3(0u, 0u, 0u))), gl_WorkGroupSize)), gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)))).x) ^ 0u)))))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)))), (_GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID))))) | (_GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID))), min((_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID))), (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)))))))).x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))) && (false))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(bitfieldExtract(17943, int(workgroup_id), (_injected_loop_counter --))) : _injected_loop_counter)) != _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x)), (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x))) | 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), bool(bool(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), bool(bool(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), bool(bool(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))))))), _GLF_IDENTITY(bool(bool(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), bool(bool(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), bool(bool(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))))))))), ! (! (bool(bool(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), bool(bool(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), bool(bool(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))))))))))))))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)))
    return;
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? subgroup_id * subgroup_size : _GLF_FUZZED(subgroup_size)))) << 0u, (true ? (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))) << 0u) * subgroup_size, (true ? subgroup_id * subgroup_size : _GLF_FUZZED(subgroup_size)))) << 0u : _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) + 0u))))) + ((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), min(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))), (0u | (0u ^ 0u)) + (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? subgroup_id * subgroup_size : _GLF_FUZZED(subgroup_size)))) << 0u, (true ? (_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? subgroup_id * subgroup_size : _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) + 0u)))) << 0u : _GLF_FUZZED(subgroup_size)))) + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), 0u ^ (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? subgroup_id * subgroup_size : _GLF_FUZZED(subgroup_size)))) << 0u, (true ? (_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? subgroup_id * subgroup_size : _GLF_FUZZED(subgroup_size)))) << 0u : _GLF_FUZZED(subgroup_size)))) + ((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), subgroup_size)), clamp(subgroup_size, subgroup_size, subgroup_size))), (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, 0u | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)))) : workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((true ? subgroup_id * subgroup_size : _GLF_FUZZED(subgroup_size)), 0u | ((true ? subgroup_id * subgroup_size : _GLF_FUZZED(subgroup_size)))))) << 0u, (true ? (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, max(_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), subgroup_id * subgroup_size)), (true ? subgroup_id * subgroup_size : _GLF_FUZZED(subgroup_size)))) << 0u : _GLF_FUZZED(subgroup_size)))), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((true ? subgroup_id * subgroup_size : _GLF_FUZZED(subgroup_size)), 0u | ((true ? subgroup_id * subgroup_size : _GLF_FUZZED(subgroup_size)))))) << 0u, (true ? (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, max(_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), subgroup_id * subgroup_size)), (true ? subgroup_id * subgroup_size : _GLF_FUZZED(subgroup_size)))) << 0u : _GLF_FUZZED(subgroup_size)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((true ? subgroup_id * subgroup_size : _GLF_FUZZED(subgroup_size)), 0u | ((true ? subgroup_id * subgroup_size : _GLF_FUZZED(subgroup_size)))))) << 0u, (true ? (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, max(_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), subgroup_id * subgroup_size)), (true ? subgroup_id * subgroup_size : _GLF_FUZZED(subgroup_size)))) << 0u : _GLF_FUZZED(subgroup_size)))))) + ((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uint(subgroup_local_id), ~ (~ (_GLF_IDENTITY(uint(subgroup_local_id), uint(uvec2(uint(subgroup_local_id), (1u ^ 0u))))))))) + 1) % _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, true)))))))
        return;
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
      }
     else
      {
       _GLF_IDENTITY(buf[virtual_gid] = 1, ~ (~ (buf[virtual_gid] = 1)));
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        break;
       do
        {
         return;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)) - int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY((int(1)) - int(_GLF_ZERO(0.0, injectionSwitch.x)), int(ivec4((int(1)) - int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, (0 << _GLF_IDENTITY(int(0), int(0))), 0)))) | ((int(1)) - int(_GLF_ZERO(0.0, injectionSwitch.x))))))), ((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) - int(_GLF_ZERO(0.0, injectionSwitch.x)))), max(0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) - int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) - int(_GLF_ZERO(0.0, injectionSwitch.x)))))))) | ((0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) - int(_GLF_ZERO(0.0, injectionSwitch.x))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         return;
         if(_GLF_DEAD(false))
          continue;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))
        break;
       break;
      }
     for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat2(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(mat4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0)), max(float(mat4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0)), float(mat4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 1.0, 0.0))))))), 1.0, 0.0, 0.0)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)) != _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (1))) | 0)), max(clamp(1, 1, 1), _GLF_IDENTITY(clamp(1, 1, 1), clamp(_GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) ^ 0), clamp(1, 1, 1), _GLF_IDENTITY(clamp(_GLF_IDENTITY(1, 0 ^ (1)), 1, 1), min(clamp(1, 1, 1), clamp(1, 1, 1))))))))); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_injected_loop_counter ++), ((_injected_loop_counter ++)) | 0) + 0))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x, injectionSwitch.x)) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)))))
      break;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         do
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-8.0) : injectionSwitch.x)), max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)) > injectionSwitch.y))))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      break;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-53.99) : injectionSwitch.y))))))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (false)))))
            return;
           return;
          }
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-116.858)), float(injectionSwitch.y), bool(true)))))))))))
  return;
 if(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY((_GLF_IDENTITY(1, min(1, 1))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> (0 | 0)), min(1, 1))), max((_GLF_IDENTITY(1, min(1, 1))) | (_GLF_IDENTITY(1, min(1, 1))), (_GLF_IDENTITY(1, min(1, 1))) | (_GLF_IDENTITY(1, min(1, 1)))))) < subgroup_size)
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (true ? 7 : _GLF_FUZZED(_injected_loop_counter))))))); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
            continue;
           break;
          }
         for(int _injected_loop_counter = _GLF_IDENTITY(1, max(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_injected_loop_counter ++), 1 * (_GLF_IDENTITY((_injected_loop_counter ++), 0 | (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0)), ((_injected_loop_counter ++)) ^ 0))))) - _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))))
            {
             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(4), 1 * (int(4))), 0, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1), (ivec4(_GLF_IDENTITY(int(4), 1 * (int(4))), 0, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1)) | (ivec4(_GLF_IDENTITY(int(4), 1 * (int(4))), 0, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - (0 >> _GLF_IDENTITY(int(0), int(0)))), int(ivec3(1, 0, 0)))) << 0), 1))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! (false))), ! (! (_GLF_IDENTITY(! (false), true && (! (false))))))))))
                return;
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
          }
        }
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-2.8), _GLF_IDENTITY(_GLF_FUZZED((1935.3226 - -702.064)), float(float(_GLF_FUZZED((1935.3226 - -702.064)))))), bvec2(_GLF_IDENTITY(false, (false) && true), false))).x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)), min(_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)), _GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid)))), _GLF_IDENTITY((_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(min(next_virtual_gid, next_virtual_gid), (min(next_virtual_gid, next_virtual_gid)) + 0u))) / 1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(min(next_virtual_gid, next_virtual_gid), (min(next_virtual_gid, next_virtual_gid)) + 0u))) / 1u, 1u, 0u), min(uvec3((_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(min(next_virtual_gid, next_virtual_gid), (min(next_virtual_gid, next_virtual_gid)) + 0u))) / 1u, 1u, 0u), uvec3((_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(min(next_virtual_gid, next_virtual_gid), (min(next_virtual_gid, next_virtual_gid)) + 0u))) / 1u, 1u, 0u)))), ~ (_GLF_IDENTITY(~ (uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(min(next_virtual_gid, next_virtual_gid), (min(next_virtual_gid, next_virtual_gid)) + 0u))) / 1u, 1u, 0u), min(uvec3((_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(min(next_virtual_gid, next_virtual_gid), (min(next_virtual_gid, next_virtual_gid)) + 0u))) / 1u, 1u, 0u), uvec3((_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(min(next_virtual_gid, next_virtual_gid), (min(next_virtual_gid, next_virtual_gid)) + 0u))) / 1u, 1u, 0u))))), (~ (uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(min(next_virtual_gid, next_virtual_gid), (min(next_virtual_gid, next_virtual_gid)) + 0u))) / 1u, 1u, 0u), min(uvec3((_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(min(next_virtual_gid, next_virtual_gid), (min(next_virtual_gid, next_virtual_gid)) + 0u))) / 1u, 1u, 0u), uvec3((_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(min(next_virtual_gid, next_virtual_gid), (min(next_virtual_gid, next_virtual_gid)) + 0u))) / 1u, 1u, 0u)))))) | (~ (uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(min(next_virtual_gid, next_virtual_gid), (min(next_virtual_gid, next_virtual_gid)) + 0u))) / 1u, 1u, 0u), min(uvec3((_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(min(next_virtual_gid, next_virtual_gid), (min(next_virtual_gid, next_virtual_gid)) + 0u))) / 1u, 1u, 0u), uvec3((_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(min(next_virtual_gid, next_virtual_gid), (min(next_virtual_gid, next_virtual_gid)) + 0u))) / 1u, 1u, 0u)))))))))))))) / 1u)], uint(_GLF_IDENTITY(2, (_GLF_IDENTITY(true, _GLF_IDENTITY(true && _GLF_IDENTITY((true), ! (! ((true)))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(true && _GLF_IDENTITY((true), ! (! ((true)))), ! (_GLF_IDENTITY(! (true && _GLF_IDENTITY((true), ! (! ((true))))), ! (! (! (true && _GLF_IDENTITY((true), ! (! ((true)))))))))), ! (! (true && _GLF_IDENTITY((true), ! (! ((true))))))))))) ? _GLF_IDENTITY(2, 0 | _GLF_IDENTITY((2), (_GLF_IDENTITY((2), 0 | (_GLF_IDENTITY((2), ((2)) / 1)))) | ((2)))) : _GLF_FUZZED(_GLF_IDENTITY(ivec3(-94151, 84906, -41885)[_GLF_IDENTITY(2, 0 | (_GLF_IDENTITY(2, (2) | 0)))], ~ _GLF_IDENTITY((~ (ivec3(-94151, 84906, -41885)[2])), ((~ (ivec3(-94151, 84906, -41885)[2]))) ^ 0)))))), 4, 64, _GLF_IDENTITY(0, clamp(0, 0, 0)));
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (! (_GLF_IDENTITY(false || (false), (false || (false)) || false)))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false)) || false));
   subgroupAll(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY(_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool((false)), bool(bool(bool((false))))))), false || ((false))))), _GLF_IDENTITY(bool(bvec3(false, true, false)), bool(bool(bool(bvec3(false, true, false)))))) || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) && true), (_GLF_IDENTITY(false, ! (! (false)))) && _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(8079.2276))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(8079.2276))), float(vec3(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(8079.2276))), 0.0, abs(0.0)))) : _GLF_FUZZED(-502.661))) < injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, ! (! (false)))) && _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 1.0, 1.0, 1.0))), (true ? injectionSwitch.x : _GLF_FUZZED(8079.2276))) < injectionSwitch.y)))), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, ! (! (false)))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(8079.2276))) < injectionSwitch.y))))) || false, (_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, ! (! (false)))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(8079.2276))) < injectionSwitch.y))))) || false, false || (((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, ! (! (false)))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(8079.2276))) < injectionSwitch.y))))) || false))) || false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))));
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), bool(bvec4(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false, false, true))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), bool(bvec4(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false, false, true))))), bool(bool(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), bool(bvec4(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false, false, true))))))))) && true)))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
          return;
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 1, 1, 0)), (true ? int(ivec4(0, 1, 1, 0)) : _GLF_FUZZED(-18918)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, _GLF_IDENTITY(0 | (1), (_GLF_IDENTITY(0 | (1), _GLF_IDENTITY(max(_GLF_IDENTITY(0, (0) / int(_GLF_ONE(1.0, injectionSwitch.y))) | (1), 0 | (_GLF_IDENTITY(1, (1) * 1))), _GLF_IDENTITY((max(0 | (1), 0 | (1))), max(_GLF_IDENTITY((max(0 | (1), 0 | (1))), ((max(0 | (1), 0 | (1)))) | ((max(0 | (1), 0 | (1))))), (max(0 | (1), 0 | (1))))) >> 0))) / 1))); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, 0 | (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_injected_loop_counter ++)), (_injected_loop_counter ++) >> 0))), (false ? _GLF_FUZZED(_GLF_IDENTITY(30196, 0 | (_GLF_IDENTITY(30196, ~ (~ (30196)))))) : _injected_loop_counter ++)))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
            }
           return;
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 else
  {
   for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) - vec2(0.0, 0.0)).x, float(vec2(injectionSwitch.x, 0.0))) < injectionSwitch.y)))))))
        {
         atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
        }
       else
        {
        }
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            continue;
           if(_GLF_DEAD(false))
            break;
           break;
          }
        }
       else
        {
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           subgroupAll(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), true && (! _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY(bool(bvec2(false, false)), (bool(bvec2(false, false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_IDENTITY((true), bool(bvec2((true), false))))), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), false || (true))))), (bool(bool((_GLF_IDENTITY(true, false || (true)))))) || false)))))));
          }
         if(_GLF_DEAD(false))
          break;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), false, _GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, length(log(vec2(1.0, 1.0)))))).x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))), injectionSwitch, injectionSwitch)), max(injectionSwitch, injectionSwitch)).y))))))), _GLF_IDENTITY(_GLF_IDENTITY(false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), false || (_GLF_IDENTITY(false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), ! (! (false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))))))), bool(bool(_GLF_IDENTITY(false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), false || (_GLF_IDENTITY(false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), ! (! (false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))))))))))));
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true)), false || (false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            {
             do
              {
               return;
               if(_GLF_DEAD(false))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), (! (_GLF_IDENTITY(false, (false) && true))) && true), bool(bvec3(! (_GLF_IDENTITY(false, (false) && true)), true, false)))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), (! (_GLF_IDENTITY(false, (false) && true))) && true), bool(bvec3(! (_GLF_IDENTITY(false, (false) && true)), true, false)))), false)), (bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), (! (_GLF_IDENTITY(false, (false) && true))) && true), bool(bvec3(! (_GLF_IDENTITY(false, (false) && true)), true, false)))), false))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), (! (_GLF_IDENTITY(false, (false) && true))) && true), bool(bvec3(! (_GLF_IDENTITY(false, (false) && true)), true, false)))), false)), (bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), (! (_GLF_IDENTITY(false, (false) && true))) && true), bool(bvec3(! (_GLF_IDENTITY(false, (false) && true)), true, false)))), false))) || false)), true && (! (_GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), (! (_GLF_IDENTITY(false, (false) && true))) && true), bool(bvec3(! (_GLF_IDENTITY(false, (false) && true)), true, false)))), false)), (bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec4((false), true, true, true))) && true)), (! (_GLF_IDENTITY(false, (false) && true))) && true), bool(bvec3(! (_GLF_IDENTITY(false, (false) && true)), true, false)))), false))) || false))))))))))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, false))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 1)), max(int(ivec2(1, 1)), int(ivec2(1, 1))))), 0, 0)), _GLF_IDENTITY(_GLF_IDENTITY((int(ivec4(1, 1, 0, 0))) / 1, ((int(ivec4(1, 1, 0, 0))) / 1) / 1), (_GLF_IDENTITY((int(ivec4(1, 1, 0, 0))) / 1, ((int(ivec4(1, 1, 0, 0))) / 1) / 1)) >> 0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) && true)); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                }
              }
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-756.196)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(8.5)), float(1.0), bool(true))), 1.0)), 0.0, 1.0, 1.0, 1.0))), (false ? _GLF_FUZZED(vec2(-7.9, _GLF_IDENTITY(166.390, (false ? _GLF_FUZZED(3.3) : 166.390)))) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))), mix(vec2((_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))))[1], float(mat2x4((_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))))[1], 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)))), vec2(_GLF_FUZZED((-64.57 / -94.52)), _GLF_FUZZED(3.6)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))))))).y))))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           break;
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, false, true))))
        {
         do
          {
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (0 ^ (0 ^ 0)) | (int(5))), int(5))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))); _injected_loop_counter ++)
            {
             return;
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true))));
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true && _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 0.0, 1.0, 1.0))) : _GLF_FUZZED((+ -8606.3868)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
        {
         return;
        }
       else
        {
        }
      }
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
