#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_6 {
 uint workgroup_base;
 uvec4 _f0;
 mat2x4 _f1;
 mat2x4 _f2;
 mat2 _f3;
 mat2x4 _f4;
 mat3 _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_5 {
 ivec4 _f0;
 ivec2 _f1;
 uint _f2;
 bvec4 _f3;
 uint _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_7 {
 mat3x4 _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_6 _f2;
 int _f3;
 bvec3 _f4;
 ivec2 _f5;
 vec2 _f6;
} ;

struct _GLF_struct_3 {
 mat3x2 _f0;
 uvec2 _f1;
 bvec3 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_4 {
 uvec3 _f0;
 float _f1;
 uint _f2;
 _GLF_struct_3 _f3;
 mat2 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_8 {
 uvec4 _f0;
 _GLF_struct_4 _f1;
 ivec4 _f2;
 _GLF_struct_7 _f3;
} ;

struct _GLF_struct_0 {
 uvec4 _f0;
 uvec3 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 mat3x4 _f1;
 uint _f2;
} ;

struct _GLF_struct_2 {
 uvec3 GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base;
 _GLF_struct_1 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_2 _GLF_struct_replacement_2;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false || (bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * vec2(1.0, 1.0))).y)), true, false))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))), 0.0, cos(0.0), 0.0, round(length(normalize(1.0))), 1.0, sqrt(0.0), 0.0, 1.0, 1.0, 0.0)), vec2(mat2(vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))), 0.0, cos(0.0), 0.0, round(length(normalize(1.0))), 1.0, sqrt(0.0), 0.0, 1.0, 1.0, 0.0)), 0.0, 0.0)))), vec2(vec3(injectionSwitch, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))).x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 0.0, tan(sin(0.0)), 0.0, _GLF_IDENTITY(dot(vec4(length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, 1.0)), dot(vec4(length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0), vec4(1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-45.28) : 1.0))))), 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), mix(vec3(_GLF_FUZZED((false ? 9.8 : 10.25)), (vec3(1.0, 0.0, 0.0))[1], _GLF_FUZZED(-63.59)), vec3((vec3(1.0, 0.0, 0.0))[0], _GLF_FUZZED(-52.90), (vec3(1.0, 0.0, 0.0))[2]), bvec3(true, _GLF_IDENTITY(false, true && (false)), true)))))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)), true && (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((9049.0278)), _GLF_FUZZED(-6650.7731)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((9049.0278)), _GLF_FUZZED(-6650.7731)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((9049.0278)), _GLF_FUZZED(-6650.7731)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y)), ! (! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((9049.0278)), _GLF_FUZZED(-6650.7731)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y)))))))), true && (bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((9049.0278)), _GLF_FUZZED(-6650.7731)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((9049.0278)), _GLF_FUZZED(-6650.7731)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y)), ! (! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((9049.0278)), _GLF_FUZZED(-6650.7731)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y)))))))))))), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((9049.0278)), _GLF_FUZZED(-6650.7731)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))))))) && true)))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), false, true), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), false)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), false)))), false)))))), ! _GLF_IDENTITY((! (bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, bool(bvec4(true, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true), false, false))))))), bool(bvec2(_GLF_IDENTITY((! (bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, bool(bvec4(true, _GLF_IDENTITY(false, (false) && true), false, false))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! _GLF_IDENTITY((bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, false, false)), _GLF_IDENTITY(bool(bvec3(bool(bvec4(true, false, false, false)), false, false)), ! (! (bool(bvec3(bool(bvec4(true, false, false, false)), false, false)))))))))), ! (! (_GLF_IDENTITY((bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))), ! (! ((bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, bool(bvec4(true, false, false, false))))))))))))), ((! _GLF_IDENTITY((bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))), ! (! (_GLF_IDENTITY((bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, bool(bvec4(true, false, false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))))))), ! (! ((bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))))))))))) || false)), (_GLF_IDENTITY(! (_GLF_IDENTITY((! _GLF_IDENTITY((bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), false || (_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))) || false)) && true)))), ! (! (_GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec4(true, false, false, false)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec4(true, false, false, false)))), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec4(true, false, false, false)))), true)))))))), ! (! ((bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, bool(bvec4(true, false, false, false))))))))))))), ((! _GLF_IDENTITY((bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))), ! (! (_GLF_IDENTITY((bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))), ! (! ((bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, false, false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(bool(bvec4(true, false, false, false)), bool(bvec4(bool(bvec4(true, false, false, false)), false, true, false))))))))))))))))) || false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((! _GLF_IDENTITY((bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), false || (_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))) || false)) && true)))), ! (! (_GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec4(true, false, false, false)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec4(true, false, false, false)))), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec4(true, false, false, false)))), true)))))))), ! (! ((bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, bool(bvec4(true, false, false, false))))))))))))), ((! _GLF_IDENTITY((bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))), ! (! (_GLF_IDENTITY((bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))), ! (! ((bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, false, false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(bool(bvec4(true, false, false, false)), bool(bvec4(bool(bvec4(true, false, false, false)), false, true, false))))))))))))))))) || false)), true && (! (_GLF_IDENTITY((! _GLF_IDENTITY((bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), false || (_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))) || false)) && true)))), ! (! (_GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec4(true, false, false, false)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec4(true, false, false, false)))), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec4(true, false, false, false)))), true)))))))), ! (! ((bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, bool(bvec4(true, false, false, false))))))))))))), ((! _GLF_IDENTITY((bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))), ! (! (_GLF_IDENTITY((bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))), ! (! ((bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, false, false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(bool(bvec4(true, false, false, false)), bool(bvec4(bool(bvec4(true, false, false, false)), false, true, false))))))))))))))))) || false))))), bool(bvec4(! (_GLF_IDENTITY(! (_GLF_IDENTITY((! _GLF_IDENTITY((bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), false || (_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))) || false)) && true)))), ! (! (_GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec4(true, false, false, false)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec4(true, false, false, false)))), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec4(true, false, false, false)))), true)))))))), ! (! ((bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, bool(bvec4(true, false, false, false))))))))))))), ((! _GLF_IDENTITY((bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))), ! (! (_GLF_IDENTITY((bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))), ! (! ((bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, false, false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(bool(bvec4(true, false, false, false)), bool(bvec4(bool(bvec4(true, false, false, false)), false, true, false))))))))))))))))) || false)), true && (! (_GLF_IDENTITY((! _GLF_IDENTITY((bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), false || (_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))) || false)) && true)))), ! (! (_GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec4(true, false, false, false)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec4(true, false, false, false)))), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec4(true, false, false, false)))), true)))))))), ! (! ((bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, bool(bvec4(true, false, false, false))))))))))))), ((! _GLF_IDENTITY((bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))), ! (! (_GLF_IDENTITY((bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))), ! (! ((bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, false, false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(bool(bvec4(true, false, false, false)), bool(bvec4(bool(bvec4(true, false, false, false)), false, true, false))))))))))))))))) || false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(false))
      break;
     barrier();
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, tan(vec2(0.0, 0.0)) + (injectionSwitch)).y))), true && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, tan(vec2(0.0, 0.0)) + (injectionSwitch)).y))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) && true)); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) || false))
    barrier();
  }
 else
  {
   _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y = subgroup_size;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), ! (! ((injectionSwitch.x > injectionSwitch.y)))))));
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true) && (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(false, (false) || false))))))))) && true)), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4((false), true, true, false)), false || (bool(bvec4((false), true, true, false))))))) || false))), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true) && (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (_GLF_IDENTITY(false, (false) || false))))))))))) && true))) && true))
    {
     do
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true)), bool(bvec4(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true)), true, true, true))))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) | (gl_WorkGroupID.x));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   do
    {
     if(_GLF_DEAD(false))
      continue;
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-87.59))))), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-87.59)))))))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(uvec4(1u), _GLF_struct_4(uvec3(1u), 1.0, _GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uvec3(1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 0u), uvec3(0u, 0u, 0u) + (uvec3(1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (false ? _GLF_FUZZED(uint(77844)) : _GLF_IDENTITY(uint(6u), (uint(6u)) | (_GLF_IDENTITY(uint(6u), clamp(uint(6u), uint(6u), uint(6u))))))), uint(_GLF_IDENTITY(6u, (_GLF_IDENTITY(6u, min(6u, 6u))) | 0u)))), 0u))))), _GLF_struct_3(mat3x2(1.0), uvec2(1u), bvec3(true), _GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_FUZZED(mat2(-6.5, 90.43, -8.8, -5.1))))), _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) / mat2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), bvec4(true)), ivec4(1), _GLF_struct_7(mat3x4(1.0), _GLF_struct_5(ivec4(1), ivec2(1), _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (1u) >> 0u), 1u, 1u)), bvec4(true), 1u, bvec4(true)), _GLF_struct_6(workgroup_size * workgroup_id, uvec4(1u), mat2x4(1.0), mat2x4(1.0), mat2(1.0), mat2x4(1.0), mat3(1.0), _GLF_IDENTITY(uvec2(1u), max(uvec2(1u), uvec2(1u)))), 1, bvec3(true), ivec2(1), vec2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(_GLF_IDENTITY(int(8), _GLF_IDENTITY((int(8)), ((int(8))) ^ 0) >> 0), 0 ^ (int(8))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, true)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), true && (bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) && true)))))), false || (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), true && (bool(bool(_GLF_DEAD(false))))))))))))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     return;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - _GLF_IDENTITY(0.0, min(0.0, 0.0))), 1.0, 0.0, 0.0)))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), false, false, true)))) || false)))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         return;
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, false)))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0, tan(0.0), 1.0))), vec2(injectionSwitch[0], injectionSwitch[1])), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), mix(vec2(_GLF_FUZZED(1019.9473), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[1]), vec2((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[0], _GLF_FUZZED(-5.4)), bvec2(true, false))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), mix(vec2(_GLF_FUZZED(1019.9473), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[1]), vec2((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[0], _GLF_FUZZED(-5.4)), bvec2(true, false))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), mix(vec2(_GLF_FUZZED(1019.9473), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[1]), vec2((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[0], _GLF_FUZZED(-5.4)), bvec2(true, false))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) * mat2(1.0), ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) * mat2(1.0)) - vec2(0.0, 0.0))), (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, (1) - 0)])) : _GLF_FUZZED(smoothstep(-86.90, -9.9, vec2(-5.4, 5.0))))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec2(injectionSwitch.y, sqrt(cos(0.0)))), min(_GLF_IDENTITY(float(vec2(injectionSwitch.y, sqrt(cos(0.0)))), (_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, true))))) || (false)) ? _GLF_FUZZED(1.7) : _GLF_IDENTITY(float(vec2(injectionSwitch.y, sqrt(cos(0.0)))), (float(vec2(injectionSwitch.y, sqrt(cos(0.0))))) + 0.0))), float(_GLF_IDENTITY(vec2(injectionSwitch.y, sqrt(cos(0.0))), mix(vec2(_GLF_FUZZED(-2233.4685), (vec2(injectionSwitch.y, sqrt(cos(0.0))))[1]), vec2((vec2(injectionSwitch.y, sqrt(cos(0.0))))[0], _GLF_FUZZED(2.2)), bvec2(true, false)))))))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), 0 ^ (1 << _GLF_IDENTITY(int(1), int(1))))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), clamp(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(3), int(3)))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   return;
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (_GLF_IDENTITY(injectionSwitch[0], min(_GLF_IDENTITY(injectionSwitch[0], (true ? injectionSwitch[0] : _GLF_FUZZED(_GLF_IDENTITY(-3.2, max(-3.2, -3.2))))), injectionSwitch[0]))) - 0.0), injectionSwitch[1]))), max((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))) / cos(vec2(0.0, 0.0))), clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - 0.0)) + 0.0))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        continue;
       do
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))))))), (bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), false))) || false))))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             return;
            }
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(false))
          break;
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, false)))), ! (! _GLF_IDENTITY((! (_GLF_IDENTITY(false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true) || (false)))), ! (! ((! (_GLF_IDENTITY(false, false || (false)))))))))))));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - sqrt(0.0)), clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - sqrt(0.0)), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - sqrt(0.0)), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - sqrt(0.0))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 1.0, sqrt(1.0), 0.0, sin(0.0), 1.0, 1.0, 1.0))) > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(6.8)), vec2(_GLF_FUZZED(7728.7517), (injectionSwitch)[1]), bvec2(false, true))) : _GLF_FUZZED(injectionSwitch))).y, mix(float(_GLF_FUZZED(3.9)), float(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(6.8)), vec2(_GLF_FUZZED(7728.7517), (injectionSwitch)[1]), bvec2(false, true))) : _GLF_FUZZED(injectionSwitch))).y), bool(true))))))))))
    {
    }
   else
    {
     _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.z = _GLF_struct_replacement_8._f3._f2.workgroup_base;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _GLF_IDENTITY(_injected_loop_counter --, (0 | 0) | (_injected_loop_counter --)))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 + (int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               barrier();
              }
            }
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = (0 ^ int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), 0 | (int(0)))) ^ 0), 0 ^ (_GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), 0 | (int(0)))) ^ 0))))) >> _GLF_IDENTITY(int(0), int(0)), min(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), 0 | (int(0)))) ^ 0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, clamp(0, 0, 0))), int(0)), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), 0 | (int(0)))) ^ 0))) >> _GLF_IDENTITY(int(0), int(0))) - 0, 0 | (((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), 0 | (int(0)))) ^ 0))) >> _GLF_IDENTITY(int(0), int(0))) - 0))), (1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), 0 | (int(0)))) ^ 0))) >> _GLF_IDENTITY(int(0), int(0)))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-30.36)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-30.36)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-30.36)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)))))))), false)), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-30.36)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-30.36)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)))))))), false)), bool(bvec4(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-30.36)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-30.36)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)))))))), false)), true, true, false)))) && true))) && true)))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)), false || (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))))
              barrier();
            }
           do
            {
             barrier();
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-1.3))) > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-1.3))) > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY(true, false || (true)))), bool(_GLF_IDENTITY(bool(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-1.3))) > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY(true, false || (true))))), ! (! (bool(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-1.3))) > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY(true, false || (true))))))))))))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_IF_FALSE(false))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (false) && true)))
            barrier();
          }
         return;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(-47754))), int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), (int(6)) ^ 0))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)) && (false))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 1.0))) > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec3(-2.1, -8.8, 7.8).p), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(9591.9146)), bvec2(_GLF_IDENTITY(true, ! (! (true))), false))).x > injectionSwitch.y)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), 1.0, tan(0.0)), max(vec3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), 1.0, tan(0.0)), vec3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), 1.0, tan(0.0)))))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), bool(bool((! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), bool(bvec4(false || (injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))))))))))) || false)) || false))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))) && true)))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       barrier();
      }
     return;
    }
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base, _GLF_IDENTITY((_GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base) << uvec3(0u, 0u, 0u), ~ (~ ((_GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base) << uvec3(0u, 0u, 0u))))).z + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))) | (subgroup_id)) * _GLF_IDENTITY(_GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y, (_GLF_IDENTITY(_GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y, max(_GLF_IDENTITY(_GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base, (false ? _GLF_FUZZED(uvec3(7165u, 193169u, 90482u)) : _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base)).y, _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y))) | (_GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y)) + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(644.047)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), ! (! (! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, false)), (bool(bvec3(true, true, false))) || false))))))))))
              {
               return;
              }
             else
              {
              }
            }
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4x2(injectionSwitch.y, 0.0, abs(1.0), 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), clamp(float(mat4x2(injectionSwitch.y, 0.0, abs(1.0), 0.0, 0.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x), 0.0)), float(mat4x2(injectionSwitch.y, _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(distance(mix(vec4(-9.5, 390.221, -98.71, -74.81), vec4(148.247, -6.9, -1509.2970, 650.595), vec4(-476.176, -44.71, -5.0, -15.90)), intBitsToFloat(ivec4(-54269, 65271, -17450, 19405)))))), abs(1.0), 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), float(mat4x2(injectionSwitch.y, 0.0, abs(1.0), 0.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0)))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false, false))))); _injected_loop_counter ++)
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, float(mat4x2(1.0, 0.0, determinant(mat4(sin(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), 0.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, abs(0.0)))), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ (0 >> _GLF_IDENTITY(int(6), int(6)))))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true)))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true)))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true)))))))) || false))
          {
           for(int _injected_loop_counter = (_GLF_IDENTITY((0 | 0), (true ? (0 | 0) : _GLF_FUZZED(-39204))) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(int(int(5)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
            {
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   barrier();
                  }
                }
               else
                {
                }
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                    return;
                   barrier();
                  }
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 0.0))) < injectionSwitch.y)))))
                  barrier();
                 barrier();
                }
              }
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y))))))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.z, (_GLF_IDENTITY(1u | 1u, min(1u | 1u, 1u | _GLF_IDENTITY(1u, (0u | 0u) ^ (1u))))) * (_GLF_IDENTITY(_GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.z, uint(_GLF_IDENTITY(uint(_GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.z), (uint(_GLF_IDENTITY(_GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base, ~ (~ (_GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base))).z)) | 0u))))) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), clamp(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))) << 0u), _GLF_IDENTITY(subgroup_id, uint(uvec4(subgroup_id, 0u, 1u, 1u))), subgroup_id)) * _GLF_IDENTITY(_GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base, clamp(_GLF_IDENTITY(_GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base, (_GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base) << (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(4u), uvec3(4u)))), _GLF_IDENTITY(_GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base, (_GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base) | uvec3(0u, 0u, 0u)), _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base)).y, 0u + (_GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y)), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base, clamp(_GLF_IDENTITY(_GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base, (_GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base) << (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(4u), uvec3(4u)))), _GLF_IDENTITY(_GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base, (_GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base) | uvec3(0u, 0u, 0u)), _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base)).y, 0u + (_GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base, clamp(_GLF_IDENTITY(_GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base, (_GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base) << (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(4u), uvec3(4u)))), _GLF_IDENTITY(_GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base, (_GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base) | uvec3(0u, 0u, 0u)), _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base)).y, 0u + (_GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y)) : _GLF_FUZZED(105985u))))))) ^ 0u) + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y, uint(uvec4((subgroup_local_id + _GLF_IDENTITY(1, int(ivec4(1, 0, 0, 1)))) % _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u), 0u))), 1u * (_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y, uint(uvec4((subgroup_local_id + 1) % _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u), 0u))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y, uint(uvec4((subgroup_local_id + 1) % _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u), 0u))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y, uint(uvec4((subgroup_local_id + 1) % _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u), 0u))), clamp(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y, uint(uvec4((subgroup_local_id + 1) % _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u), 0u))), _GLF_IDENTITY((subgroup_local_id + 1) % _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y, uint(uvec4((subgroup_local_id + 1) % _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u), 0u))), _GLF_IDENTITY((subgroup_local_id + 1) % _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y, uint(uvec4((subgroup_local_id + 1) % _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u), 0u))))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y, uint(uvec4((subgroup_local_id + 1) % _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u), 0u))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), (subgroup_local_id + 1))) : _GLF_FUZZED(subgroup_id))) % _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y, uint(uvec4((subgroup_local_id + 1) % _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u), 0u))))) : _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), clamp(_GLF_FUZZED(subgroup_local_id), _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), max(_GLF_FUZZED(subgroup_local_id), _GLF_FUZZED(subgroup_local_id))), _GLF_FUZZED(subgroup_local_id))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y, uint(uvec4((subgroup_local_id + 1) % _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u), 0u))), 1u * (_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y, uint(uvec4((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u) + 1) % _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u), 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y, uint(uvec4((subgroup_local_id + 1) % _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u), 0u))), _GLF_IDENTITY(1u * (_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y, uint(uvec4((subgroup_local_id + 1) % _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u), 0u)))), (1u * (_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y, uint(uvec4((subgroup_local_id + 1) % _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u), 0u))))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y, uint(uvec4((subgroup_local_id + 1) % _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u), 0u))), 1u * (_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y, uint(uvec4((subgroup_local_id + 1) % _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.y, 0u, _GLF_IDENTITY(0u, (0u) ^ 0u), 0u))))))));
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(4, int(ivec4(4, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), 0, 1))), 64, 4);
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), false, false, false))));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(4, min(4, 4)), _GLF_IDENTITY(int(int(_GLF_IDENTITY(4, (4) | (4)))), min(_GLF_IDENTITY(int(int(_GLF_IDENTITY(4, _GLF_IDENTITY((4) | (4), min(_GLF_IDENTITY((4) | (4), int(_GLF_IDENTITY(ivec4((4) | (4), _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) | (0 >> _GLF_IDENTITY(int(8), int(8)))), 0)), 1, 1), _GLF_IDENTITY((ivec4((4) | (4), 0, 1, 1)), min((ivec4((4) | (4), 0, 1, 1)), (ivec4((4) | (4), 0, 1, 1)))) ^ ivec4(0, 0, 0, 0)))), (4) | (4)))))), (true ? int(int(_GLF_IDENTITY(4, _GLF_IDENTITY((4) | (4), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((4), ((4)) | (_GLF_IDENTITY((4), clamp(_GLF_IDENTITY((4), ((4)) - 0), (4), (4))))), (_GLF_IDENTITY((4), ((4)) | (_GLF_IDENTITY((4), clamp(_GLF_IDENTITY((4), ((4)) - 0), (4), (4)))))) / 1) | (4), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4((4) | (4), 0, 1, 1), (ivec4((4) | (4), 0, 1, 1)) ^ ivec4(0, 0, 0, 0)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(ivec4((4) | (4), 0, 1, 1), (ivec4((4) | (4), 0, 1, 1)) ^ ivec4(0, 0, 0, 0)), min(_GLF_IDENTITY(_GLF_IDENTITY(ivec4((4) | (4), 0, 1, 1), (ivec4((4) | (4), 0, 1, 1)) ^ ivec4(0, _GLF_IDENTITY(0, (0) - 0), 0, 0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(ivec4((4) | (4), 0, 1, 1), (ivec4((4) | (4), 0, 1, 1)) ^ ivec4(0, 0, 0, 0))), ~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(ivec4((4) | (4), 0, 1, 1), (ivec4((4) | (4), 0, 1, 1)) ^ ivec4(0, 0, 0, 0)))), max(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(ivec4((4) | (4), 0, 1, 1), (ivec4((4) | (4), 0, 1, 1)) ^ ivec4(0, 0, 0, 0)))), clamp(~ (~ (_GLF_IDENTITY(ivec4((4) | (4), 0, 1, 1), (ivec4((4) | (4), 0, 1, 1)) ^ ivec4(0, 0, 0, 0)))), ~ (~ (_GLF_IDENTITY(ivec4((4) | (4), 0, 1, 1), (ivec4((4) | (4), 0, 1, 1)) ^ ivec4(0, 0, 0, 0)))), ~ (~ (_GLF_IDENTITY(ivec4((4) | (4), 0, 1, 1), (ivec4((4) | (4), 0, 1, 1)) ^ ivec4(0, 0, 0, 0)))))), ~ (~ (_GLF_IDENTITY(ivec4((4) | (4), 0, 1, 1), (ivec4((4) | (4), 0, 1, 1)) ^ ivec4(0, 0, 0, 0)))))))))), _GLF_IDENTITY(ivec4((4) | (4), 0, 1, 1), (ivec4((4) | (4), 0, 1, 1)) ^ ivec4(0, 0, 0, 0)))), _GLF_IDENTITY(ivec4((4) | (4), 0, 1, 1), (ivec4((4) | (4), 0, 1, 1)) ^ ivec4(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (0)), 0, 0, 0)), _GLF_IDENTITY(ivec4((4) | (4), 0, 1, 1), (ivec4((_GLF_IDENTITY(4, min(4, 4))) | (4), 0, 1, 1)) ^ ivec4(0, 0, 0, 0)))))), (4) | (4)))))) : _GLF_FUZZED(-44138))), int(int(_GLF_IDENTITY(4, (4) | (4))))))), _GLF_IDENTITY(64, _GLF_IDENTITY(int(ivec2(64, 0)), 0 + (int(ivec2(64, 0))))), 0);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.x = read;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(checker[virtual_gid], _GLF_struct_replacement_2.GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_sizeworkgroup_base.x, 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, max(64, _GLF_IDENTITY(64, (64) >> 0)))) >> 0), 4);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)).x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y))))), bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)).x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
