#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false, false)), true && (bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false, false))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true)))), bool(bvec2(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true)))), false))))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ (~ (4)))), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     return;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false)))))), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, true))))))))
                    break;
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 else
  {
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       do
        {
         do
          {
           do
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                }
              }
             if(_GLF_DEAD(false))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))), true && (false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || false), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(true, ! (! (true)))) && true), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_ONE(1.0, injectionSwitch.y) * (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(49.42)), float(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) * cos(vec2(0.0, 0.0))).y), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, (false ? _GLF_FUZZED(-8323.6602) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), injectionSwitch.y))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) | (-38971 & _GLF_IDENTITY((1 ^ 1), clamp((1 ^ 1), _GLF_IDENTITY((1 ^ 1), ((1 ^ 1)) ^ 0), (1 ^ 1))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1) < 1); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ (~ (1)))); _injected_loop_counter ++)
          {
           return;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((vec2(-3526.2241, _GLF_IDENTITY(-9.5, mix(float(_GLF_FUZZED(4.9)), float(-9.5), bool(true)))) * mat4x2(73.83, 9.3, 7210.1113, -8.1, 46.23, 5325.2264, -2.1, -1.6)).q), (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(775.798)), vec2(_GLF_FUZZED((-9938.8661 + -8957.5003)), (injectionSwitch)[1]), bvec2(false, true))))[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_IDENTITY(true ? (injectionSwitch)[0] : _GLF_FUZZED(-78.07), (false ? _GLF_FUZZED(7.9) : _GLF_IDENTITY(true ? (injectionSwitch)[0] : _GLF_FUZZED(-78.07), 1.0 * (true ? (injectionSwitch)[0] : _GLF_FUZZED(-78.07))))))), _GLF_FUZZED(592.119)), bvec2(true, false))).x > injectionSwitch.y))))
            break;
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, ~ (_GLF_IDENTITY(~ (gl_WorkGroupID), (~ (gl_WorkGroupID)) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) - (0u << _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), (uint(1u)) / 1u))))))))) | (gl_WorkGroupID)).x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, ~ (_GLF_IDENTITY(~ (gl_WorkGroupID), (~ (gl_WorkGroupID)) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) - (0u << _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), (uint(1u)) / 1u))))))))) | (gl_WorkGroupID)).x, 0u | (_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, ~ (_GLF_IDENTITY(~ (gl_WorkGroupID), (~ (gl_WorkGroupID)) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) - (0u << _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), (uint(1u)) / 1u))))))))) | (gl_WorkGroupID)).x))) << 0u);
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(172498u))), (_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(172498u)))) * 1u) * workgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(172498u))) * workgroup_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(172498u))) * workgroup_id), (uint(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(172498u))) * workgroup_id)) * (1u | 0u))), (uint(uint(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_IDENTITY(_GLF_FUZZED(172498u), clamp(_GLF_IDENTITY(_GLF_FUZZED(172498u), (_GLF_FUZZED(172498u)) >> 0u), _GLF_IDENTITY(_GLF_FUZZED(172498u), clamp(_GLF_FUZZED(172498u), _GLF_FUZZED(172498u), _GLF_FUZZED(172498u))), _GLF_IDENTITY(_GLF_FUZZED(172498u), (_GLF_FUZZED(172498u)) >> 0u))))) * workgroup_id))) | _GLF_IDENTITY((_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_IDENTITY(_GLF_FUZZED(172498u), min(_GLF_FUZZED(172498u), _GLF_IDENTITY(_GLF_FUZZED(172498u), clamp(_GLF_FUZZED(_GLF_IDENTITY(172498u, 0u + (_GLF_IDENTITY(172498u, uint(uvec4(172498u, 0u, 0u, 0u)))))), _GLF_FUZZED(172498u), _GLF_FUZZED(172498u))))))) * workgroup_id)), (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_IDENTITY(_GLF_FUZZED(172498u), min(_GLF_FUZZED(172498u), _GLF_IDENTITY(_GLF_FUZZED(172498u), clamp(_GLF_FUZZED(_GLF_IDENTITY(172498u, 0u + (_GLF_IDENTITY(172498u, uint(uvec4(172498u, 0u, 0u, 0u)))))), _GLF_FUZZED(172498u), _GLF_FUZZED(172498u))))))) * workgroup_id)), min(uint(uint(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_IDENTITY(_GLF_FUZZED(172498u), min(_GLF_FUZZED(172498u), _GLF_IDENTITY(_GLF_FUZZED(172498u), clamp(_GLF_FUZZED(_GLF_IDENTITY(172498u, 0u + (_GLF_IDENTITY(172498u, uint(uvec4(172498u, 0u, 0u, 0u)))))), _GLF_FUZZED(172498u), _GLF_FUZZED(172498u))))))) * workgroup_id)), uint(uint(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_IDENTITY(_GLF_FUZZED(172498u), min(_GLF_FUZZED(172498u), _GLF_IDENTITY(_GLF_FUZZED(172498u), clamp(_GLF_FUZZED(_GLF_IDENTITY(172498u, 0u + (_GLF_IDENTITY(172498u, uint(uvec4(172498u, 0u, 0u, 0u)))))), _GLF_FUZZED(172498u), _GLF_FUZZED(172498u))))))) * workgroup_id))))) / 1u)), ((uint(uint(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((true ? workgroup_size : _GLF_FUZZED(172498u)), ((true ? _GLF_IDENTITY(workgroup_size, (workgroup_size) ^ (0u & (60597u << 160445u))) : _GLF_FUZZED(172498u))) | (_GLF_IDENTITY((true ? workgroup_size : _GLF_FUZZED(172498u)), ((true ? workgroup_size : _GLF_FUZZED(172498u))) - 0u)))) * workgroup_id)))) | (_GLF_IDENTITY(_GLF_IDENTITY((uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, false, false))))) ? workgroup_size : _GLF_FUZZED(172498u))) * workgroup_id), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(172498u))) * workgroup_id), uint(uvec4(uint(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((true ? workgroup_size : _GLF_FUZZED(172498u)), max((true ? workgroup_size : _GLF_FUZZED(172498u)), (true ? workgroup_size : _GLF_FUZZED(172498u))))) * workgroup_id), 0u, 0u, 1u))), _GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(172498u))) * workgroup_id), ~ (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(172498u))) * workgroup_id), min(uint(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(172498u))) * workgroup_id), uint(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(172498u))) * workgroup_id)))))), uint(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true ? workgroup_size : _GLF_FUZZED(172498u), 0u ^ (_GLF_IDENTITY(true ? workgroup_size : _GLF_FUZZED(172498u), 0u | (true ? workgroup_size : _GLF_FUZZED(172498u)))))), ~ (~ ((_GLF_IDENTITY(true ? workgroup_size : _GLF_FUZZED(172498u), 0u ^ (_GLF_IDENTITY(true ? workgroup_size : _GLF_FUZZED(172498u), 0u | (true ? workgroup_size : _GLF_FUZZED(172498u))))))))), min(_GLF_IDENTITY((true ? workgroup_size : _GLF_FUZZED(172498u)), uint(uvec4((true ? workgroup_size : _GLF_FUZZED(172498u)), 0u, 0u, 0u))), (true ? workgroup_size : _GLF_FUZZED(172498u))))) * workgroup_id))))), clamp((uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, false, false))))) ? workgroup_size : _GLF_FUZZED(172498u))) * workgroup_id), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(172498u))) * workgroup_id), uint(uvec4(uint(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((true ? workgroup_size : _GLF_FUZZED(172498u)), max((true ? workgroup_size : _GLF_FUZZED(172498u)), (true ? workgroup_size : _GLF_FUZZED(172498u))))) * workgroup_id), 0u, 0u, 1u))), _GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(172498u))) * workgroup_id), ~ (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(172498u))) * workgroup_id), min(uint(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(172498u))) * workgroup_id), uint(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(172498u))) * workgroup_id)))))), uint(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true ? workgroup_size : _GLF_FUZZED(172498u), 0u ^ (_GLF_IDENTITY(true ? workgroup_size : _GLF_FUZZED(172498u), 0u | (true ? workgroup_size : _GLF_FUZZED(172498u)))))), ~ (~ ((_GLF_IDENTITY(true ? workgroup_size : _GLF_FUZZED(172498u), 0u ^ (_GLF_IDENTITY(true ? workgroup_size : _GLF_FUZZED(172498u), 0u | (true ? workgroup_size : _GLF_FUZZED(172498u))))))))), min(_GLF_IDENTITY((true ? workgroup_size : _GLF_FUZZED(172498u)), uint(uvec4((true ? workgroup_size : _GLF_FUZZED(172498u)), 0u, 0u, 0u))), (true ? workgroup_size : _GLF_FUZZED(172498u))))) * workgroup_id))))), (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, false, false))))) ? workgroup_size : _GLF_FUZZED(172498u))) * workgroup_id), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(172498u))) * workgroup_id), uint(uvec4(uint(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((true ? workgroup_size : _GLF_FUZZED(172498u)), max((true ? workgroup_size : _GLF_FUZZED(172498u)), (true ? workgroup_size : _GLF_FUZZED(172498u))))) * workgroup_id), 0u, 0u, 1u))), _GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(172498u))) * workgroup_id), ~ (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(172498u))) * workgroup_id), min(uint(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(172498u))) * workgroup_id), uint(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(172498u))) * workgroup_id)))))), uint(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true ? workgroup_size : _GLF_FUZZED(172498u), 0u ^ (_GLF_IDENTITY(true ? workgroup_size : _GLF_FUZZED(172498u), 0u | (true ? workgroup_size : _GLF_FUZZED(172498u)))))), ~ (~ ((_GLF_IDENTITY(true ? workgroup_size : _GLF_FUZZED(172498u), 0u ^ (_GLF_IDENTITY(true ? workgroup_size : _GLF_FUZZED(172498u), 0u | (true ? workgroup_size : _GLF_FUZZED(172498u))))))))), min(_GLF_IDENTITY((true ? workgroup_size : _GLF_FUZZED(172498u)), uint(uvec4((true ? workgroup_size : _GLF_FUZZED(172498u)), 0u, 0u, 0u))), (true ? workgroup_size : _GLF_FUZZED(172498u))))) * workgroup_id))))), (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, false, false))))) ? workgroup_size : _GLF_FUZZED(172498u))) * workgroup_id), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(172498u))) * workgroup_id), uint(uvec4(uint(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((true ? workgroup_size : _GLF_FUZZED(172498u)), max((true ? workgroup_size : _GLF_FUZZED(172498u)), (true ? workgroup_size : _GLF_FUZZED(172498u))))) * workgroup_id), 0u, 0u, 1u))), _GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(172498u))) * workgroup_id), ~ (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(172498u))) * workgroup_id), min(uint(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(172498u))) * workgroup_id), uint(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(172498u))) * workgroup_id)))))), uint(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true ? workgroup_size : _GLF_FUZZED(172498u), 0u ^ (_GLF_IDENTITY(true ? workgroup_size : _GLF_FUZZED(172498u), 0u | (true ? workgroup_size : _GLF_FUZZED(172498u)))))), ~ (~ ((_GLF_IDENTITY(true ? workgroup_size : _GLF_FUZZED(172498u), 0u ^ (_GLF_IDENTITY(true ? workgroup_size : _GLF_FUZZED(172498u), 0u | (true ? workgroup_size : _GLF_FUZZED(172498u))))))))), min(_GLF_IDENTITY((true ? workgroup_size : _GLF_FUZZED(172498u)), uint(uvec4((true ? workgroup_size : _GLF_FUZZED(172498u)), 0u, 0u, 0u))), (true ? workgroup_size : _GLF_FUZZED(172498u))))) * workgroup_id))))))), uint(uvec3(_GLF_IDENTITY((uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(172498u))), max(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(172498u))), _GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(172498u))))) * workgroup_id))), max((uint(uint(_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(172498u))) * workgroup_id))), (uint(uint(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(true ? workgroup_size : _GLF_IDENTITY(_GLF_FUZZED(172498u), clamp(_GLF_FUZZED(172498u), _GLF_FUZZED(172498u), _GLF_FUZZED(172498u))), (0u ^ 0u) | (true ? workgroup_size : _GLF_IDENTITY(_GLF_FUZZED(172498u), clamp(_GLF_FUZZED(172498u), _GLF_FUZZED(172498u), _GLF_FUZZED(172498u))))))) * workgroup_id))))), 0u, 0u)))))))) | (_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), (_GLF_IDENTITY(true, (true) && true)) || false) ? workgroup_size : _GLF_FUZZED(172498u))) * workgroup_id));
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), (true ? _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)) : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY((subgroup_id) >> (0u >> _GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(8u, clamp(8u, _GLF_IDENTITY(8u, min(8u, 8u)), 8u))))), max((subgroup_id) >> (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(8u, clamp(8u, _GLF_IDENTITY(8u, min(8u, _GLF_IDENTITY(8u, (0u ^ 0u) | (8u)))), 8u)))), (_GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(8u, clamp(8u, _GLF_IDENTITY(8u, _GLF_IDENTITY(min(8u, 8u), max(min(8u, 8u), min(8u, 8u)))), 8u))))) >> (0u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), (false ? _GLF_FUZZED(workgroup_base) : uint(0u))))))), (subgroup_id) >> (0u >> _GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(8u, clamp(8u, _GLF_IDENTITY(8u, min(8u, 8u)), 8u)))))))) * subgroup_size + subgroup_local_id, ~ (~ _GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), clamp(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))))))) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)))), (true ? _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)) : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY((subgroup_id) >> (0u >> _GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(8u, clamp(8u, _GLF_IDENTITY(8u, min(8u, 8u)), 8u))))), max((subgroup_id) >> (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(_GLF_IDENTITY(8u, clamp(8u, _GLF_IDENTITY(8u, min(8u, 8u)), 8u)), max(_GLF_IDENTITY(8u, clamp(8u, _GLF_IDENTITY(8u, min(8u, 8u)), 8u)), _GLF_IDENTITY(8u, clamp(8u, _GLF_IDENTITY(8u, min(8u, 8u)), 8u)))))), (_GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(8u, clamp(8u, _GLF_IDENTITY(8u, min(8u, 8u)), 8u))))) >> (0u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, 0u | (0u))), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(uint(0u), ~ (~ (uint(0u)))))), (uint(0u)) << (0u & 8935u)))))))), (subgroup_id) >> (0u >> _GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(8u, clamp(8u, _GLF_IDENTITY(8u, min(8u, 8u)), 8u)))))))) * subgroup_size + subgroup_local_id), ((workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), clamp(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))))))) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)))), (true ? _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)) : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY((subgroup_id) >> (0u >> _GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(8u, clamp(8u, _GLF_IDENTITY(8u, min(8u, 8u)), 8u))))), max((subgroup_id) >> (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(_GLF_IDENTITY(8u, clamp(8u, _GLF_IDENTITY(8u, min(8u, 8u)), 8u)), max(_GLF_IDENTITY(8u, clamp(8u, _GLF_IDENTITY(8u, min(8u, 8u)), 8u)), _GLF_IDENTITY(8u, clamp(8u, _GLF_IDENTITY(8u, min(8u, 8u)), 8u)))))), (_GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(8u, clamp(8u, _GLF_IDENTITY(8u, min(8u, 8u)), 8u))))) >> (0u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, 0u | (0u))), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(uint(0u), ~ (~ (uint(0u)))))), (uint(0u)) << (0u & 8935u)))))))), (subgroup_id) >> (0u >> _GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(8u, clamp(8u, _GLF_IDENTITY(8u, min(8u, 8u)), 8u)))))))) * subgroup_size + subgroup_local_id)) >> 0u)));
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * subgroup_size))), subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_id * subgroup_size), clamp(_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_id * subgroup_size), (~ (subgroup_id * subgroup_size)) >> 0u), (~ (subgroup_id * subgroup_size)) ^ 0u), ~ (subgroup_id * subgroup_size), ~ (subgroup_id * subgroup_size))), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(~ (subgroup_id * subgroup_size), clamp(_GLF_IDENTITY(~ (subgroup_id * subgroup_size), (~ (subgroup_id * subgroup_size)) ^ 0u), _GLF_IDENTITY(~ (subgroup_id * subgroup_size), (_GLF_IDENTITY(~ (subgroup_id * subgroup_size), (~ (subgroup_id * subgroup_size)) | 0u)) << 0u), ~ (subgroup_id * subgroup_size))), 0u, 1u)), (uint(uvec3(_GLF_IDENTITY(~ (subgroup_id * subgroup_size), clamp(_GLF_IDENTITY(~ (subgroup_id * subgroup_size), (~ (subgroup_id * subgroup_size)) ^ 0u), ~ (subgroup_id * subgroup_size), ~ (subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))))), 0u, 1u))) >> 0u)))))), subgroup_id * subgroup_size, subgroup_id * subgroup_size)), ~ (~ (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(true ? _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)) : _GLF_FUZZED(atomicAdd(subgroup_id, workgroup_id)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(virtual_gid) : subgroup_id))), (~ (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(virtual_gid) : subgroup_id)))) << 0u))) * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)) : _GLF_FUZZED(atomicAdd(subgroup_id, workgroup_id))) ^ 0u)))))), subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(bitfieldInsert(virtual_gid, workgroup_base, 88980, -98658)))) * _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), clamp(subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), subgroup_id * subgroup_size))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((true ? subgroup_id : _GLF_FUZZED(bitfieldInsert(virtual_gid, workgroup_base, 88980, -98658))), uint(uvec4((true ? subgroup_id : _GLF_FUZZED(bitfieldInsert(_GLF_IDENTITY(virtual_gid, 0u | (virtual_gid)), workgroup_base, 88980, _GLF_IDENTITY(-98658, (_GLF_IDENTITY(-98658, (-98658) * 1)) | 0)))), 0u, 1u, 1u)))) * _GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), uint(uvec3(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), 0u, 0u))))), clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)))) / 1u), max(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) >> 0u, ((subgroup_id) >> _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u)))))) / (1u | 1u))) * subgroup_size, clamp(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, uint(uvec2(subgroup_id * subgroup_size, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), 0u | (_GLF_IDENTITY(uint(6u), (uint(6u)) ^ 0u)))))))), subgroup_id * subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))), (0u ^ 0u) | (uint(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))))), min(uint(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))), subgroup_id * subgroup_size, subgroup_id * subgroup_size))), uint(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size), max(clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size), clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)))))))))), max(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) * 1u, ((subgroup_id) * 1u) + 0u)) * _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))), max(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * subgroup_size))), subgroup_id * subgroup_size)), clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))), uint(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((subgroup_id * subgroup_size) | (subgroup_id * subgroup_size), max((subgroup_id * subgroup_size) | (subgroup_id * subgroup_size), (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)))), subgroup_id * subgroup_size))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, uint(uvec4(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 0u, 0u, 1u))), subgroup_size)), subgroup_id * subgroup_size, subgroup_id * subgroup_size))), max(uint(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * subgroup_size, subgroup_id * subgroup_size))), uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)), (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))) >> (0u << _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), min(uint(2u), uint(2u)))))))))) >> (0u & _GLF_IDENTITY(73507u, (73507u) ^ 0u)))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))), max(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)), uint(uvec4(_GLF_IDENTITY(max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)), (_GLF_IDENTITY(max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)), (_GLF_IDENTITY(max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)), (max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) << 0u)) | (max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))))) | (_GLF_IDENTITY(max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)), (max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) / 1u))), 1u, 0u, 1u))))))) * subgroup_size, clamp(_GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u) * subgroup_size, subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, uint(uint(subgroup_id * subgroup_size)))))), uint(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(62228u) : subgroup_size)), clamp(subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u)))) >> 0u)))), _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size))))))))))))))) + ((subgroup_local_id + _GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, 0 | (1)))))) % subgroup_size), 0u | (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), clamp(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), subgroup_id * subgroup_size)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))), uint(uvec3(~ (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), clamp(subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(false, (false) || false) ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) | (_GLF_FUZZED(subgroup_id))) : subgroup_size)), subgroup_size)), subgroup_id * subgroup_size, subgroup_id * subgroup_size))), _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, max(0u, 0u)))), 0u))))), min(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_id)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_local_id) : subgroup_id, (1u & 1u) * (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_id)))), (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_id))) >> (0u & 100128u)) : _GLF_FUZZED(subgroup_id))) * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, min(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(virtual_gid) : subgroup_id * subgroup_size)), subgroup_id * subgroup_size)), _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, max(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)), subgroup_id * subgroup_size))) - 0u))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, min(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | 0u), subgroup_id * subgroup_size))) | (_GLF_IDENTITY(subgroup_id * subgroup_size, max(_GLF_IDENTITY(subgroup_id * subgroup_size, uint(uvec3(subgroup_id * subgroup_size, 0u, 1u))), subgroup_id * subgroup_size)))), clamp(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u))), clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u) * subgroup_size)), subgroup_id * subgroup_size, subgroup_id * subgroup_size)))), clamp(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)), min(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)) * subgroup_size), min(_GLF_IDENTITY(clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size), (false ? _GLF_FUZZED(num_workgroup) : clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size))), _GLF_IDENTITY(clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size), ~ (~ (clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id, uint(uvec4(subgroup_id, 1u, 0u, 1u))) * subgroup_size))))))), _GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)))), workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) >> 0u), subgroup_id * subgroup_size, subgroup_id * subgroup_size)), min(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)), _GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)))), workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, (88263u & 0u), 0u, 0u))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, (88263u & 0u), 0u, _GLF_IDENTITY(0u, (0u) + 0u))))) - 0u, uint(uint(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, (88263u & 0u), 0u, _GLF_IDENTITY(0u, (0u) + 0u))))) - 0u, ((_GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, (88263u & 0u), 0u, _GLF_IDENTITY(0u, (0u) + 0u))))) - 0u) + (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))))), subgroup_id * subgroup_size, subgroup_id * subgroup_size)), min(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (subgroup_id * subgroup_size))) * 1u), subgroup_id * subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), subgroup_id)) * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)))))) + ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + 1) % subgroup_size))), ~ (~ (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u) * subgroup_size, subgroup_id * subgroup_size)) + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u)))), 0u + ((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, 0u)))))))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (46925 & _GLF_IDENTITY(0, 0 | (0)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), (bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((_GLF_DEAD(false)) && true, true && ((_GLF_DEAD(false)) && true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) && true))) || false))
    continue;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      continue;
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (0 << _GLF_IDENTITY(int(8), int(8))) | (_injected_loop_counter --)))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 ^ 1) ^ 0)); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), (! (_GLF_IDENTITY(true, ! (! (true))))) && true)))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(_GLF_IDENTITY(4, min(4, 4)), int(ivec3(4, 1, 1))), 64, 4);
                }
               else
                {
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
          }
         else
          {
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_IDENTITY(_GLF_FUZZED(-3236.1552), (false ? _GLF_FUZZED(atan(1.1, 48.65)) : _GLF_FUZZED(-3236.1552)))))))))
    {
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(924.952) : 1.0)), 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0)).x > injectionSwitch.y)) || (false))))
            {
             do
              {
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             return;
            }
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true));
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), (bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) || false)))))
                  {
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(false))
                              break;
                            }
                           else
                            {
                             return;
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 & -64732, (_GLF_IDENTITY(0 & -64732, clamp(0 & -64732, 0 & -64732, 0 & -64732))) | 0))); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                }
               else
                {
                }
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), ~ (~ (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), clamp(1 << _GLF_IDENTITY(int(3), int(3)), 1 << _GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) << 0))))))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
    {
     return;
    }
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(1 ^ 1, 0 ^ (1 ^ 1)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), _GLF_IDENTITY(float(_GLF_FUZZED(vec2(-87.64, -39.32).y)), (true ? float(_GLF_FUZZED(vec2(-87.64, -39.32).y)) : _GLF_FUZZED(2.9))), bool(false))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  return;
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0))) + (injectionSwitch)), injectionSwitch, injectionSwitch)))).y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0))) < _GLF_IDENTITY(1, max(1, 1))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
          break;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
            {
             if(_GLF_DEAD(false))
              return;
             break;
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), min(int(8), int(8))), _GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) | 0), 0 ^ (_GLF_IDENTITY(int(8), (int(8)) | 0))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (58340 & 0) + (_injected_loop_counter)) != int(_GLF_ONE(1.0, injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_injected_loop_counter, (58340 & 0) + (_injected_loop_counter)) != int(_GLF_ONE(1.0, injectionSwitch.y)), false, true, false)))); _injected_loop_counter ++)
                {
                 return;
                }
              }
            }
           if(_GLF_DEAD(false))
            continue;
          }
        }
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec2(injectionSwitch.x, 1.0), min(vec2(injectionSwitch.x, 1.0), vec2(injectionSwitch.x, 1.0))))))) > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), false || (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(injectionSwitch.y), float(float(_GLF_IDENTITY(float(injectionSwitch.y), max(float(injectionSwitch.y), float(injectionSwitch.y)))))), float(_GLF_FUZZED(-7340.8488)), bool(false))), injectionSwitch.y))))))) || false)))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false), false))), bvec3(bvec3(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(24.85)), float(injectionSwitch.x), bool(true))), clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(24.85)), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(24.85)), float(injectionSwitch.x), bool(true))), mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(24.85)), float(injectionSwitch.x), bool(true)))), float(_GLF_FUZZED(3147.2039)), bool(false))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(24.85)), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y)), false, false))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) && true))), false, false), bvec3(bvec3(bvec3(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))), true)), bool(bvec4(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).y, false || (injectionSwitch.x > injectionSwitch.y))), true)), false, false, _GLF_IDENTITY(true, (true) || false))))), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))), ((injectionSwitch.x > injectionSwitch.y)) || false))), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))), true)), bool(bvec4(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), true)), false, _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(true, (true) || false))))), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, true)))))))))))), true && (bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) && true))), false, false), bvec3(bvec3(bvec3(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))), true)), bool(bvec4(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).y, false || (injectionSwitch.x > injectionSwitch.y))), true)), false, false, _GLF_IDENTITY(true, (true) || false))))), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))), ((injectionSwitch.x > injectionSwitch.y)) || false))), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))), true)), bool(bvec4(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), true)), false, _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(true, (true) || false))))), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, true)))))))))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))))
            return;
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)).y))))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))))))))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               atomicStore(checker[_GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, max(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))))), (false ? _GLF_FUZZED((_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(workgroup_size, 0u, 1u), uvec3(uvec4(uvec3(workgroup_size, 0u, 1u), 1u)))), 0u | (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(workgroup_size, 0u, 1u), uvec3(uvec4(uvec3(workgroup_size, 0u, 1u), 1u)))), (uint(_GLF_IDENTITY(uvec3(workgroup_size, 0u, 1u), uvec3(uvec4(uvec3(workgroup_size, 0u, 1u), 1u))))) << 0u)))) & subgroup_id)) : (virtual_gid))) << 0u), virtual_gid)), virtual_gid, _GLF_IDENTITY(virtual_gid, max(_GLF_IDENTITY(virtual_gid, (virtual_gid) - 0u), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(workgroup_base) : virtual_gid)), (virtual_gid) | (_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(workgroup_base)))))))))], read, 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, _GLF_IDENTITY(_GLF_IDENTITY(0 | (64), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (0 | (64))), max(_GLF_IDENTITY(0 | (64), _GLF_IDENTITY(int(ivec2(0 | (64), 1)), (int(ivec2(0 | (64), 1))) + 0)), 0 | _GLF_IDENTITY((64), ((64)) | ((64))))))) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, 1 * (4)), (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), max(int(8), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(45000))), max(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(45000))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), (true ? 4 : _GLF_FUZZED(45000))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), (true ? 4 : _GLF_FUZZED(45000))), (0 >> _GLF_IDENTITY(int(7), int(7)))), ~ (~ (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), (true ? 4 : _GLF_FUZZED(45000))), (0 >> _GLF_IDENTITY(int(7), int(7))))))))))))), (_GLF_IDENTITY(4, (0 << _GLF_IDENTITY(int(8), int(8))) | (_GLF_IDENTITY(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(45000))), max(_GLF_IDENTITY(_GLF_IDENTITY(4, (true ? 4 : _GLF_IDENTITY(_GLF_FUZZED(45000), clamp(_GLF_FUZZED(45000), _GLF_FUZZED(45000), _GLF_FUZZED(45000))))), max(_GLF_IDENTITY(4, (true ? 4 : _GLF_IDENTITY(_GLF_FUZZED(45000), clamp(_GLF_FUZZED(45000), _GLF_FUZZED(45000), _GLF_FUZZED(45000))))), _GLF_IDENTITY(4, (true ? 4 : _GLF_IDENTITY(_GLF_FUZZED(45000), clamp(_GLF_FUZZED(45000), _GLF_FUZZED(45000), _GLF_FUZZED(45000))))))), _GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(45000)))))))) >> 0));
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            break;
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bool(_GLF_IDENTITY(false, (false) && true))))) || false), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY((false), bool(bool((false)))) && _GLF_IDENTITY(true, (true) && true))) && true), _GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, true, true, false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec4(false, true, true, false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(false, true, true, false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec4(false, true, true, false))))), ! (! (! (_GLF_IDENTITY(bool(bvec4(false, true, true, false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec4(false, true, true, false))))))))))), (injectionSwitch.x > injectionSwitch.y)), false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) && true)) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) && true)) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) && true)) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false))))))), false || (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) && true)) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) && true)) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), (bool(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (false) && true), (false) && true)) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), false || (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) && true)) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY((false), ((false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), false || (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) && true)) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), (bool(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) && true), (false) && true)) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), false || (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) && true)) && _GLF_IDENTITY(true, ! (! (true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))) && true))))))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((! (true)), true), bvec2(bvec2(_GLF_IDENTITY(bvec2((! (true)), true), bvec2(bvec3(bvec2((! (true)), true), false)))))), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2((! (true)), true), bvec2(bvec2(_GLF_IDENTITY(bvec2((! (true)), true), bvec2(bvec3(bvec2((! (true)), true), false)))))))), bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(bvec2((! (true)), true), bvec2(bvec2(_GLF_IDENTITY(bvec2((! (true)), true), bvec2(bvec3(bvec2((! (true)), true), false)))))))), false, true)))))))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(7.7) : _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(6836.3869) : injectionSwitch.x)))) > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! _GLF_IDENTITY((! (bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false), (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, true)))), true))))), true, false, true)), false || _GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))), (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))))) || false))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), true && (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))), (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))))) || false))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))))), true, false, true))), ! (! ((bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))), (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))))) || false))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))), true && (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))), (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))))) || false))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))))), true, false, true)))))))))))))), ! (! (_GLF_IDENTITY((! (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0))).y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-1.0) : injectionSwitch.x)) > injectionSwitch.y))), bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), true))), true, false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))), true, false, true)), false || (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))), true, false, true))))))))))), _GLF_IDENTITY(((! (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), (bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))) && true)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), (bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))) && true)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))))), true, false, _GLF_IDENTITY(true, true && (true)))), false || (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))), true, false, true)))))))))))), ! (! (((! (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), (bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))) && true)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), (bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))) && true)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))))), true, false, _GLF_IDENTITY(true, true && (true)))), false || (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))), true, false, true))))))))))))))) && true))))))));
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
               for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, 1 * (0)), 0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), false || (bool(bool(true)))))))
                  {
                   return;
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                  }
                }
              }
            }
           else
            {
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y), (false ? _GLF_FUZZED(2289.7516) : _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y), float(mat4(max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y), 0.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))))))))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(mat2(injectionSwitch.x, log(1.0), 0.0, 1.0), mat2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), log(1.0), 0.0, 1.0), (false ? _GLF_FUZZED(mat2(-321.451, 9.9, -896.045, 64.38)) : mat2(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-9.7)), float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, (injectionSwitch.x) - 0.0)))), bool(true))), log(1.0), 0.0, 1.0)))), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(_GLF_IDENTITY(mat2(injectionSwitch.x, log(1.0), 0.0, 1.0), (false ? _GLF_FUZZED(mat2(-321.451, 9.9, -896.045, 64.38)) : mat2(injectionSwitch.x, log(1.0), 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(7.3)), bool(false))))))))))), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (mat2(injectionSwitch.x, log(1.0), 0.0, 1.0)))), (true ? float(_GLF_IDENTITY(_GLF_IDENTITY(mat2(injectionSwitch.x, log(1.0), 0.0, 1.0), mat2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), log(1.0), 0.0, 1.0), (false ? _GLF_FUZZED(mat2(-321.451, 9.9, -896.045, 64.38)) : mat2(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-9.7)), float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, (injectionSwitch.x) - 0.0)))), bool(true))), log(1.0), 0.0, 1.0)))), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(_GLF_IDENTITY(mat2(injectionSwitch.x, log(1.0), 0.0, 1.0), (false ? _GLF_FUZZED(mat2(-321.451, 9.9, -896.045, 64.38)) : mat2(injectionSwitch.x, log(1.0), 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(7.3)), bool(false))))))))))), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (mat2(injectionSwitch.x, log(1.0), 0.0, 1.0)))) : _GLF_FUZZED(45.41)))) < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              {
              }
             else
              {
               return;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
            return;
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      break;
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, 1)), int(int(int(ivec2(0, 1))))))); _injected_loop_counter --)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))), (false ? _GLF_FUZZED(_injected_loop_counter) : (1 << _GLF_IDENTITY(int(6), int(6))))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), int(6))), ((0 << _GLF_IDENTITY(int(6), int(6)))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
                              {
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   return;
                                  }
                                 else
                                  {
                                  }
                                }
                               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))))), (injectionSwitch.x < injectionSwitch.y)))) && true))
                                {
                                 if(_GLF_DEAD(false))
                                  return;
                                 return;
                                }
                               else
                                {
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               else
                {
                }
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 else
                  {
                  }
                }
              }
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch, injectionSwitch)).y)), bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(false, false || (false)))), false || (bool((_GLF_IDENTITY(false, false || (false))))))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, true)), ! (! (_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false)))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(false, true)), _GLF_IDENTITY(! (! (bool(bvec2(false, true)))), false || (! _GLF_IDENTITY((! (bool(bvec2(false, true)))), true && ((! (bool(bvec2(false, true)))))))))), false || (! (_GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true))))))))), bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(bool(bvec2(false, true)), ! (! (_GLF_IDENTITY(bool(bvec2(false, true)), (_GLF_IDENTITY(bool(bvec2(false, true)), bool(bool(bool(bvec2(false, true)))))) || false)))))), false), bvec2(bvec2(bvec2(! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true)))))), bool(bvec3(! (_GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true)))))), false, false)))), false))))))), _GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false))))))) && _GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))) > injectionSwitch.y), true))))), true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true))))))) && true, ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! _GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))), ! (! ((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! _GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))), ! (! ((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! _GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))), ! (! ((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))))))))))), bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! _GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))), ! (! ((bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))))))))))), false)))) && true))))) && true) || _GLF_IDENTITY(false, bool(bool(false))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), max((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))).y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), max((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))).y, _GLF_IDENTITY(bool(bool(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), max((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))).y)), (bool(bool(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), max((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))).y))) && true)), false)), bool(bool(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), max((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))).y, _GLF_IDENTITY(bool(bool(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), max((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))).y)), (bool(bool(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), max((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))).y))) && true)), false)), bool(bvec4(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), max((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))).y, _GLF_IDENTITY(bool(bool(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), max((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))).y)), (bool(bool(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), max((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))).y))) && true)), false)), false, true, false))))))))), _GLF_IDENTITY(false, true && (false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, true)))), false)), bvec3(bvec4(bvec3(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false))))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(1.0, 1.0, 1.0, 1.0, sin(0.0), 1.0), _GLF_IDENTITY(mat3(1.0) * (mat2x3(1.0, 1.0, 1.0, 1.0, sin(0.0), 1.0)), (mat3(1.0) * (mat2x3(1.0, 1.0, 1.0, 1.0, sin(0.0), 1.0))) + mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), (float(_GLF_IDENTITY(mat2x3(1.0, 1.0, 1.0, 1.0, sin(0.0), 1.0), _GLF_IDENTITY(mat3(1.0) * (mat2x3(1.0, 1.0, 1.0, 1.0, sin(0.0), 1.0)), (mat3(1.0) * (mat2x3(1.0, 1.0, 1.0, 1.0, sin(0.0), 1.0))) + mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))) - 0.0))) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), exp(length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, float(mat2x3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0)))))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), sqrt(1.0), 0.0, 1.0, 0.0, 0.0))), max(injectionSwitch, injectionSwitch)))))).y)), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0))).x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bvec3(bvec4(bvec3(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false))))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y)), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) < injectionSwitch.y)), false)), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, float(mat3(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, float(mat3(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), true)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, float(mat3(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, float(mat3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) * mat2(1.0))).y, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3x4(1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, sqrt(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat3x4(11.63, -7611.9586, -1955.5911, -4.6, -3474.6296, -540.755, 9.3, 3933.5806, -9.7, -654.754, 3.2, 3.8)) : mat3x4(1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, sqrt(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))))), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, abs(1.0), 0.0), transpose(transpose(mat4x3(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3x4(1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, sqrt(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat3x4(11.63, -7611.9586, -1955.5911, -4.6, -3474.6296, -540.755, 9.3, 3933.5806, -9.7, -654.754, 3.2, 3.8)) : mat3x4(1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, sqrt(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))))), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, abs(1.0), 0.0)))))), 1.0, 1.0))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), true)))))))))), false))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y), ! (! ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y))))), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))), false)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), true, false, true)), (bool(bvec4(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(! (! ((injectionSwitch.x < injectionSwitch.y))), (! (! ((injectionSwitch.x < injectionSwitch.y)))) && true), (! (! ((injectionSwitch.x < injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false, true))) && true))), false)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), true, false, true)), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(! (! ((injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(! (! ((injectionSwitch.x < injectionSwitch.y))), bool(bool(! (! ((injectionSwitch.x < injectionSwitch.y))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false, true))) && true))), false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_ZERO(0.0, injectionSwitch.x) + (injectionSwitch.x)) < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), true, false, true)), (bool(bvec4(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(! (! ((injectionSwitch.x < injectionSwitch.y))), (! (! ((injectionSwitch.x < injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false, true))) && true))), false)))))))), false))))), false))), false))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0) : _GLF_FUZZED(85.47))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))) + vec2(0.0, 0.0)), vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y)), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bvec3(bvec4(bvec3(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false))))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, 1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), max(injectionSwitch, injectionSwitch))), mix(vec2((vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))[0], _GLF_FUZZED(-479.325)), vec2(_GLF_FUZZED(float(16433u)), (vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)), injectionSwitch))))[1]), bvec2(false, true)))).y)), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x3(injectionSwitch, 1.0, 1.0, determinant(mat4(1.0, sin(0.0), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, log(1.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 0.0, 1.0)), 0.0), (mat2x3(injectionSwitch, 1.0, 1.0, determinant(mat4(1.0, sin(0.0), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, log(1.0), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 0.0, 1.0)), 0.0)) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).x, (injectionSwitch.x) - 0.0) > injectionSwitch.y, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, sqrt(0.0) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(314.557)), float(injectionSwitch.x), bool(true))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(314.557)), float(injectionSwitch.x), bool(true))), 1.0 * (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(314.557)), float(injectionSwitch.x), bool(true)))))) * 1.0))) < injectionSwitch.y)), _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))), bvec3(bvec4(bvec3(bvec3(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))))))) - vec2(0.0, 0.0)).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-5385.1845)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))) || false)))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y)), false), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) - vec2(0.0, 0.0)).y, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-272.844)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-3.4) : injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-71.58))), injectionSwitch.y)))), false)), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bvec3(bvec3(bvec3(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) * mat2(1.0))).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))))), false)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bvec3(bvec3(bvec3(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) * mat2(1.0))).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))))), false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bvec3(bvec3(bvec3(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) * mat2(1.0))).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))))), false)))))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) - vec2(0.0, 0.0)).y, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-272.844)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-3.4) : injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-71.58))), injectionSwitch.y)))), false)), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bvec3(bvec3(bvec3(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) * mat2(1.0))).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))))), false)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bvec3(bvec3(bvec3(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) * mat2(1.0))).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))))), false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bvec3(bvec3(bvec3(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) * mat2(1.0))).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))))), false)))))))))), false)))), false))), _GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (_GLF_IDENTITY(false, false || (false))))))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 0.0, 0.0, 0.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, sin(determinant(mat2(0.0, 0.0, 0.0, 0.0))), 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(0.0, exp(0.0)), vec2(vec4(vec2(0.0, exp(0.0)), 0.0, 0.0)))), dot(vec2(1.0, 0.0), vec2(0.0, exp(0.0))))))) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0) : _GLF_FUZZED(85.47))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y)), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bvec3(bvec4(bvec3(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false))))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, 1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), max(injectionSwitch, injectionSwitch))), mix(vec2(_GLF_IDENTITY((vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), clamp((vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), _GLF_IDENTITY((vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), ((vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))) * mat2(1.0)), (vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))))[0], _GLF_FUZZED(-479.325)), _GLF_IDENTITY(vec2(_GLF_FUZZED(float(16433u)), (vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))[1]), mat2(1.0) * (vec2(_GLF_FUZZED(float(16433u)), (vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))[1]))), bvec2(false, true)))).y)), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y, _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, sqrt(0.0) + (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(314.557)), float(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-7.4) : injectionSwitch.x))))), bool(true))))) < injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(sqrt(0.0) + (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(314.557)), float(injectionSwitch.x), bool(true)))), min(sqrt(0.0) + (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(314.557)), float(injectionSwitch.x), bool(true)))), sqrt(0.0) + (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(314.557)), float(injectionSwitch.x), bool(true))))))) < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, sqrt(0.0) + (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(314.557)), float(injectionSwitch.x), bool(true))))) < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(false, (false) || false))), bvec3(bvec4(bvec3(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-5385.1845)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y, float(mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y, 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y, float(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))), sqrt(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0))))), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-3.4) : injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-71.58))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(4.2) : _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-71.58))))), injectionSwitch.y)))), false)), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)) : _GLF_FUZZED(vec2(-20.59, 41.06)))).x < injectionSwitch.y)), false), bvec3(bvec4(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)) : _GLF_FUZZED(vec2(-20.59, 41.06)))).x < injectionSwitch.y)), false), true))), bvec3(bvec3(bvec3(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), mix(vec2((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))[0], (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))[1]), vec2(_GLF_FUZZED(-4.0), _GLF_FUZZED(-5.9)), bvec2(false, false))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 1.0, 0.0, 0.0, 0.0))))).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))), false))))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))), _GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) || false)))))))))))))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(mix(injectionSwitch, injectionSwitch, 8.3)) : injectionSwitch))))[1])), injectionSwitch)), exp(0.0), tan(_GLF_IDENTITY(0.0, (0.0) * 1.0)), 1.0, 1.0, 1.0, 1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 0.0))).x > injectionSwitch.y, true, _GLF_IDENTITY(false, ! (! (false))), false)))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
      {
       for(int _injected_loop_counter = (0 ^ (0 >> _GLF_IDENTITY(int(8), int(8)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(ivec2(int(2), 0))), int(2))), ((1 << _GLF_IDENTITY(int(2), int(2)))) / 1) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-19.51)), float(injectionSwitch.y), bool(true))), _GLF_ONE(1.0, injectionSwitch.y))))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-19.51)), float(injectionSwitch.y), bool(true))), _GLF_ONE(1.0, injectionSwitch.y)))))))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), true)))))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_TRUE(true))), bool(bool(bool(bool(_GLF_WRAPPED_IF_TRUE(true))))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true) || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true)))))), ! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), _GLF_IDENTITY(bool(bvec3(! (_GLF_WRAPPED_IF_TRUE(true)), false, false)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6.0), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(6.9)), bvec2(true, false))).y)) || (bool(bvec3(! (_GLF_WRAPPED_IF_TRUE(true)), false, false))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_injected_loop_counter ++))) ^ (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), ~ (~ (_GLF_IDENTITY(int(4), int(4)))))) | (_GLF_IDENTITY(int(4), int(4)))))))
              {
               do
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (_GLF_IDENTITY(~ (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(339.337)), float(injectionSwitch.y), bool(true)))))), max(~ (int(_GLF_ONE(1.0, injectionSwitch.y))), ~ (int(_GLF_ONE(1.0, injectionSwitch.y))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                        {
                         do
                          {
                           return;
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                      }
                     return;
                    }
                   else
                    {
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (_GLF_IDENTITY(! (! (false)), (! (! (false))) && true)) && true))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         return;
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) * 1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(int(1), _GLF_IDENTITY((true ? int(1) : _GLF_FUZZED((++ _injected_loop_counter))), ~ (~ ((true ? int(1) : _GLF_FUZZED((++ _injected_loop_counter)))))))), ((_GLF_IDENTITY(int(1), _GLF_IDENTITY((true ? int(1) : _GLF_FUZZED((++ _injected_loop_counter))), ~ (~ ((true ? int(1) : _GLF_FUZZED((++ _injected_loop_counter))))))))) >> 0))))), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, max(1, 1))), _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp((int(1)), (int(1)), (int(1)))) | (int(1))), 0 ^ (int(1)))))), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec3(ivec2(1, 1), 0))))))), (_GLF_IDENTITY(1, (1) | (19958 & 0))) + 0)), 0 ^ (int(1)))), (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), ivec2(ivec3(ivec2(1, 1), 0))))))), (_GLF_IDENTITY(1, (1) | (19958 & 0))) + 0)), 0 ^ (int(1))))) ^ 0))), false, true, true)), bool(bool(bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 ^ (int(1))), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY(0, (0) << 0) ^ (int(1)))))), false, true, true))))))))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        continue;
       return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
