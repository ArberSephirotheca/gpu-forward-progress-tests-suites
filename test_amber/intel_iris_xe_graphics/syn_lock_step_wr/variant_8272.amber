#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_18 {
 mat2 _f0;
 mat3 _f1;
 uint _f2;
} ;

struct _GLF_struct_17 {
 uvec3 _f0;
 mat4 _f1;
 mat4x2 _f2;
 mat2 _f3;
 bvec3 _f4;
 vec4 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_16 {
 ivec3 _f0;
 uvec4 _f1;
 int _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_15 {
 uvec3 _f0;
} ;

struct _GLF_struct_19 {
 bvec2 _f0;
 _GLF_struct_15 _f1;
 vec3 _f2;
 _GLF_struct_16 _f3;
 _GLF_struct_17 _f4;
 _GLF_struct_18 _f5;
 float _f6;
} ;

struct _GLF_struct_13 {
 vec2 _f0;
 float _f1;
 mat3x2 _f2;
} ;

struct _GLF_struct_12 {
 bvec2 _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_11 {
 uvec2 _f0;
 uint _f1;
 bvec4 _f2;
 mat4x2 _f3;
 float _f4;
} ;

struct _GLF_struct_14 {
 _GLF_struct_11 _f0;
 _GLF_struct_12 _f1;
 _GLF_struct_13 _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_9 {
 bvec3 _f0;
} ;

struct _GLF_struct_8 {
 bvec2 _f0;
} ;

struct _GLF_struct_7 {
 mat4 _f0;
 mat2 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_6 {
 uvec3 _f0;
} ;

struct _GLF_struct_10 {
 _GLF_struct_6 _f0;
 mat3x4 _f1;
 _GLF_struct_7 _f2;
 _GLF_struct_8 _f3;
 _GLF_struct_9 _f4;
} ;

struct _GLF_struct_20 {
 uint next_virtual_gid;
 bool _f0;
 _GLF_struct_10 _f1;
 bool _f2;
 mat2x3 _f3;
 _GLF_struct_14 _f4;
 ivec2 _f5;
 _GLF_struct_19 _f6;
} ;

struct _GLF_struct_3 {
 ivec2 _f0;
 mat3x2 _f1;
 bool _f2;
 bool _f3;
 vec3 _f4;
} ;

struct _GLF_struct_2 {
 mat4x2 _f0;
} ;

struct _GLF_struct_4 {
 mat4x2 _f0;
 uint _f1;
 _GLF_struct_2 _f2;
 _GLF_struct_3 _f3;
 uint _f4;
 uvec2 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_0 {
 mat2 _f0;
 ivec4 _f1;
 ivec3 _f2;
 mat4 _f3;
 vec4 _f4;
 bvec4 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_1 {
 mat2x3 _f0;
 _GLF_struct_0 _f1;
} ;

struct _GLF_struct_5 {
 bvec3 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_4 _f2;
 uint num_workgroup;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(bvec3(true), _GLF_struct_1(mat2x3(1.0), _GLF_struct_0(mat2(1.0), ivec4(1), ivec3(1), mat4(1.0), vec4(1.0), bvec4(true), vec3(1.0))), _GLF_struct_4(mat4x2(1.0), 1u, _GLF_struct_2(mat4x2(1.0)), _GLF_struct_3(ivec2(1), mat3x2(1.0), true, true, vec3(1.0)), 1u, uvec2(1u), mat3(1.0)), gl_NumWorkGroups.x);
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_20 _GLF_struct_replacement_20 = _GLF_struct_20(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), true, _GLF_struct_10(_GLF_struct_6(uvec3(1u)), mat3x4(1.0), _GLF_struct_7(mat4(1.0), mat2(1.0), ivec4(1)), _GLF_struct_8(bvec2(true)), _GLF_struct_9(bvec3(true))), true, mat2x3(1.0), _GLF_struct_14(_GLF_struct_11(uvec2(1u), 1u, bvec4(true), mat4x2(1.0), 1.0), _GLF_struct_12(bvec2(true), ivec4(1)), _GLF_struct_13(vec2(1.0), 1.0, mat3x2(1.0)), bvec3(true)), ivec2(1), _GLF_struct_19(bvec2(true), _GLF_struct_15(uvec3(1u)), vec3(1.0), _GLF_struct_16(ivec3(1), uvec4(1u), 1, mat3x4(1.0)), _GLF_struct_17(uvec3(1u), mat4(1.0), mat4x2(1.0), mat2(1.0), bvec3(true), vec4(1.0), ivec4(1)), _GLF_struct_18(mat2(1.0), mat3(1.0), 1u), 1.0));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 atomicStore(buf[_GLF_struct_replacement_20.next_virtual_gid], uint(1), 4, 64, 4);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
