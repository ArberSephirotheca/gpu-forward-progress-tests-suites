#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 430

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged3_0_2_52_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidworkgroup_id;
 uvec2 GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, true)))))))))))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, ~ (~ (1)))); _injected_loop_counter ++)
        {
         return;
        }
      }
     return;
    }
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(7, ~ (~ (_GLF_IDENTITY(7, clamp(7, 7, 7))))))))))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ! (! ((! (true)))))), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-796.361, 271.508)))).x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       continue;
       if(_GLF_DEAD(false))
        break;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      break;
    }
  }
 uvec2 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size;
 GLF_merged3_0_2_52_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidworkgroup_id.xy = GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size;
 uvec4 GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_12next_virtual_gidsubgroup_idsubgroup_local_idworkgroup_id;
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_12next_virtual_gidsubgroup_idsubgroup_local_idworkgroup_id.y = subgroup_id;
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
uint subgroup_size = 16;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidworkgroup_id.xy.x = subgroup_size, ~ (_GLF_IDENTITY(~ (GLF_merged3_0_2_52_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidworkgroup_id.xy.x = subgroup_size), (~ (GLF_merged3_0_2_52_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidworkgroup_id.xy.x = subgroup_size)) ^ 0u)));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z = GLF_merged3_0_2_52_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidworkgroup_id.xy.x;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_12next_virtual_gidsubgroup_idsubgroup_local_idworkgroup_id.z = subgroup_local_id;
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 return;
                }
               else
                {
                }
              }
            }
          }
         else
          {
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
          {
           return;
          }
        }
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               return;
              }
            }
          }
        }
      }
     else
      {
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           do
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    continue;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))), bool(bvec4(bool(bvec3(true, true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (-61443 & 0)); _injected_loop_counter --)
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
        {
        }
       else
        {
         return;
        }
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])).x;
 do
  {
   GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.y = num_workgroup;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), bool(bvec2(true, false)))) || false)))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.y = _GLF_IDENTITY(GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup, uvec2(0u, 0u) | (_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup, (false ? _GLF_FUZZED(GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size) : GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup)))).y;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     break;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))));
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((0 | _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), ~ (~ (~ (1))))))))), int(int(_GLF_IDENTITY((_GLF_IDENTITY(0, min(0, 0)) | 1), 0 | ((0 | 1))))))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-88.59) : injectionSwitch.x))) * 1.0)) / 1.0) < injectionSwitch.y))) && true)))
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     return;
    }
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))));
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidworkgroup_id.xy.y = workgroup_size, (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidworkgroup_id.xy.y = workgroup_size, ~ (_GLF_IDENTITY(~ (GLF_merged3_0_2_52_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidworkgroup_id.xy.y = workgroup_size), ~ (_GLF_IDENTITY(~ (~ (GLF_merged3_0_2_52_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidworkgroup_id.xy.y = workgroup_size)), (~ (~ (GLF_merged3_0_2_52_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidworkgroup_id.xy.y = workgroup_size))) ^ 0u)))))) + 0u);
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, 1 * (7))) - 0))))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   do
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                 continue;
                }
               return;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                  return;
                }
               return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ (0 >> _GLF_IDENTITY(int(3), int(3))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, clamp(0, 0, 0)) : _GLF_FUZZED(35284))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
      }
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))), true && (_GLF_DEAD(false)))))))
          continue;
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             continue;
            }
           continue;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), (injectionSwitch.x > injectionSwitch.y))))))) || false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, clamp(1, 1, 1))); _injected_loop_counter ++)
          {
           return;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = (0 & 68631); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 ^ _GLF_IDENTITY((int(0)), ((int(0))) | (0 | 0)))))); _injected_loop_counter ++)
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), min(_GLF_IDENTITY(int(0), max(int(0), int(0))), _GLF_IDENTITY(int(0), (int(0)) | 0))), _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(int(int(0)), (int(int(0))) | 0))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) / 1), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) / 1), clamp(_GLF_IDENTITY(int(0), (int(0)) / 1), _GLF_IDENTITY(int(0), (int(0)) / 1), _GLF_IDENTITY(int(0), (int(0)) / 1)))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(2), int(2)))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1)) ^ 0))
                        {
                         if(_GLF_DEAD(false))
                          return;
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, false, true)))))
                              {
                               do
                                {
                                 do
                                  {
                                   return;
                                   if(_GLF_DEAD(false))
                                    break;
                                  }
                                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                }
                               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                              }
                             else
                              {
                              }
                            }
                          }
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), (injectionSwitch.x > injectionSwitch.y)))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), (injectionSwitch.x > injectionSwitch.y)))), true))))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               continue;
              }
             continue;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), false || (bool(bool((injectionSwitch.x > injectionSwitch.y)))))))))))))
            continue;
           break;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          break;
        }
      }
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             continue;
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), bool(bvec4(bool(bvec4(false, true, true, true)), true, true, true))))))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
              {
              }
             else
              {
               return;
              }
            }
           return;
           if(_GLF_DEAD(false))
            return;
          }
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0), _GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    continue;
   for(int _injected_loop_counter = ((((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(6), int(6)), ~ (~ (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(6), int(6)))))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         GLF_merged3_0_2_52_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidworkgroup_id.w = workgroup_id;
        }
      }
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(distance(atan(-9.4, -63.33), -1184.9603)))) < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), false || (! (_GLF_IDENTITY(false, true && (false))))))), (injectionSwitch.x > injectionSwitch.y)))) || false)))))
              {
              }
             else
              {
               return;
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_12next_virtual_gidsubgroup_idsubgroup_local_idworkgroup_id.w = GLF_merged3_0_2_52_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidworkgroup_id.w;
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))));
 uint workgroup_base = GLF_merged3_0_2_52_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidworkgroup_id.xy.y * GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_12next_virtual_gidsubgroup_idsubgroup_local_idworkgroup_id.w;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.w = workgroup_base;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ! (! ((_GLF_IDENTITY(false, (false) && true)))))))))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint virtual_gid = _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.w + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_12next_virtual_gidsubgroup_idsubgroup_local_idworkgroup_id.y * GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z, (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_12next_virtual_gidsubgroup_idsubgroup_local_idworkgroup_id.y * GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z) | (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_12next_virtual_gidsubgroup_idsubgroup_local_idworkgroup_id.y * GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z)) + GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_12next_virtual_gidsubgroup_idsubgroup_local_idworkgroup_id.z, (GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.w + GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_12next_virtual_gidsubgroup_idsubgroup_local_idworkgroup_id.y * GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_12next_virtual_gidsubgroup_idsubgroup_local_idworkgroup_id, (uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uvec4(7u), uvec4(7u))) + (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_12next_virtual_gidsubgroup_idsubgroup_local_idworkgroup_id)).z) | 0u);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
             if(_GLF_DEAD(false))
              break;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
      }
    }
   else
    {
    }
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   for(int _injected_loop_counter = ((1 ^ 0) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
      }
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    break;
   _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidworkgroup_id.z = virtual_gid, ~ (~ (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidworkgroup_id.z = virtual_gid, ~ (~ (GLF_merged3_0_2_52_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidworkgroup_id.z = virtual_gid))))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     break;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          break;
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint next_virtual_gid = GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.w + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_12next_virtual_gidsubgroup_idsubgroup_local_idworkgroup_id, ~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_12next_virtual_gidsubgroup_idsubgroup_local_idworkgroup_id, min(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_12next_virtual_gidsubgroup_idsubgroup_local_idworkgroup_id, (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_12next_virtual_gidsubgroup_idsubgroup_local_idworkgroup_id) / uvec4(1u, 1u, 1u, 1u)), (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_12next_virtual_gidsubgroup_idsubgroup_local_idworkgroup_id, (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_12next_virtual_gidsubgroup_idsubgroup_local_idworkgroup_id) / uvec4(1u, 1u, 1u, 1u))) | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_12next_virtual_gidsubgroup_idsubgroup_local_idworkgroup_id, (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_12next_virtual_gidsubgroup_idsubgroup_local_idworkgroup_id) / uvec4(1u, 1u, 1u, 1u)))), GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_12next_virtual_gidsubgroup_idsubgroup_local_idworkgroup_id))))).y * GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z + ((GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_12next_virtual_gidsubgroup_idsubgroup_local_idworkgroup_id.z + 1) % GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z);
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (1 & (1 & 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             return;
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (0 ^ ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(_injected_loop_counter) : int(1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            continue;
           GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.x = next_virtual_gid;
          }
         else
          {
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool(! (injectionSwitch.x > injectionSwitch.y)), ! (! (bool(! (injectionSwitch.x > injectionSwitch.y)))))))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, bool(_GLF_IDENTITY(bvec2(_injected_loop_counter < 1, true), bvec2(bvec2(bvec2(_injected_loop_counter < 1, true))))))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bool(bool(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))))
            return;
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
          {
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) * 1)))); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec2((! (false)), true))))))))
        {
        }
       else
        {
         return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        return;
      }
    }
  }
 do
  {
   for(int _injected_loop_counter = _GLF_IDENTITY((((1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), min(_GLF_IDENTITY(int(4), max(int(_GLF_IDENTITY(4, (4) / ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), (true ? 1 << _GLF_IDENTITY(int(7), int(7)) : _GLF_FUZZED(-5878)))) >> _GLF_IDENTITY(int(7), int(7))))), int(4))), int(_GLF_IDENTITY(4, (4) * 1)))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY((4), ~ (~ ((4)))) | (4))), int(4))), ((((1 ^ 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), min(_GLF_IDENTITY(int(4), max(int(_GLF_IDENTITY(4, (4) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))), int(4))), int(4))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) | (int(4))), (_GLF_IDENTITY(int(4), (int(4)) | (int(4)))) | (int(4))), min(_GLF_IDENTITY(int(4), max(int(_GLF_IDENTITY(4, (4) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))), int(4))), int(4)))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(4), min(_GLF_IDENTITY(int(4), max(int(_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY((4), ((4)) | ((4))) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (_GLF_IDENTITY(_GLF_IDENTITY((4), ((4)) | ((4))) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (_GLF_IDENTITY((4), ((4)) | ((4))) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))) << 0)) | (_GLF_IDENTITY(_GLF_IDENTITY((4), ((4)) | ((4))) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), 0 ^ (_GLF_IDENTITY((4), ((4)) | ((4))) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))))))), int(4))), int(4))), min(_GLF_IDENTITY(int(4), min(_GLF_IDENTITY(int(4), max(int(_GLF_IDENTITY(4, (4) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))), int(4))), int(4))), _GLF_IDENTITY(int(4), min(_GLF_IDENTITY(int(4), max(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))), max(_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))), 1 * (int(_GLF_IDENTITY(4, (4) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))))), int(_GLF_IDENTITY(4, (4) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))))), min(_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))), max(_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))), 1 * (int(_GLF_IDENTITY(4, (4) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))))), int(_GLF_IDENTITY(4, (4) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))))), _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))), max(_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))), 1 * (int(_GLF_IDENTITY(4, (4) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))))), int(_GLF_IDENTITY(4, (4) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))))))), int(4))), int(4))))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) | (4))), int(4)))) | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), (0 >> _GLF_IDENTITY(int(1), int(1))) ^ 0))) > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      break;
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))))) ^ 0)); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1)))))); _injected_loop_counter --)
        {
         do
          {
           _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_12next_virtual_gidsubgroup_idsubgroup_local_idworkgroup_id.x = GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.x, (0u << _GLF_IDENTITY(uint(3u), uint(3u))) ^ (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_12next_virtual_gidsubgroup_idsubgroup_local_idworkgroup_id.x = GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.x));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true)))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || false))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))) > ((23950 - 26416) & (_GLF_IDENTITY(0, 1 * (0)) ^ 0))); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               return;
              }
            }
          }
         else
          {
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.x = GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_12next_virtual_gidsubgroup_idsubgroup_local_idworkgroup_id.x;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y)))))))))
    {
    }
   else
    {
     return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
  {
  }
 else
  {
   buf[GLF_merged3_0_2_52_2_1_11_3_1_12GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_sizevirtual_gidworkgroup_id.z] = 1;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = (((0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) * 1)), int(3))) >> _GLF_IDENTITY(int(2), int(2))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              break;
             break;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        break;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1)); _injected_loop_counter ++)
        {
         do
          {
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = (_GLF_IDENTITY(0, min(0, 0)) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               return;
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(bool(! (! (false)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bool(! (! (false)))), ! (! (bool(bool(! (! (false))))))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(bool(! (! (false)))), ! (! (bool(bool(! (! (false))))))), true))))))))));
              }
            }
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(false))
      continue;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))), min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))))).x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7843.3045)))))) - 0.0) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), clamp(_GLF_IDENTITY((injectionSwitch.y), clamp(_GLF_IDENTITY((injectionSwitch.y), max((injectionSwitch.y), (injectionSwitch.y))), (injectionSwitch.y), (injectionSwitch.y))), (injectionSwitch.y), _GLF_IDENTITY((injectionSwitch.y), (true ? (injectionSwitch.y) : _GLF_FUZZED(4123.8293))))) / 1.0), min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))), false, true, true)))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), true, true)), ! (! (bool(bvec3(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), false || ((_GLF_IDENTITY(false, true && (false))))))), true, true))))))))
        break;
       return;
      }
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))));
 if(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_12next_virtual_gidsubgroup_idsubgroup_local_idworkgroup_id.z + 1 < GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z, ! (! (GLF_merged4_0_1_16_1_1_11_2_1_17_3_1_12next_virtual_gidsubgroup_idsubgroup_local_idworkgroup_id.z + _GLF_IDENTITY(1, (1) + (-14695 & _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))))) < GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.z))))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 | 0) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   int i = 0;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   atomicStore(buf[_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base, _GLF_IDENTITY(uvec4(1u, 1u, 1u, 1u) * (GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base), min(uvec4(1u, 1u, 1u, 1u) * (GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base), _GLF_IDENTITY(uvec4(1u, 1u, 1u, 1u) * (GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base), max(uvec4(1u, 1u, 1u, 1u) * (GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base), uvec4(1u, 1u, 1u, 1u) * (GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base)))))).x], uint(2), 4, 64, 0);
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_13_3_1_14next_virtual_gidnum_workgroupsubgroup_sizeworkgroup_base.x], uint(2), _GLF_IDENTITY(4, ~ (~ _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4))))), _GLF_IDENTITY((false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4))))), (_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4)))))) / 1)), (_GLF_IDENTITY(false ? _GLF_FUZZED(_injected_loop_counter) : (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4))))), (_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(_GLF_IDENTITY(47917, (47917) - 0)) : (4)))))) / 1)), (_GLF_IDENTITY(false ? _GLF_FUZZED(_injected_loop_counter) : (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4))))), (_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(_GLF_IDENTITY(47917, (47917) - 0)) : (4)))))) / 1)), (true ? false ? _GLF_FUZZED(_injected_loop_counter) : (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4))))), (_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(_GLF_IDENTITY(47917, (47917) - 0)) : (4)))))) / 1)) : _GLF_FUZZED(atomicMax(_injected_loop_counter, _injected_loop_counter))))) << 0)))), (0 << _GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(47917) : (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(48077) : 4))))) + 0)))), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(47917) : _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(4, (4) + 0)), ~ (~ ((_GLF_IDENTITY(4, (_GLF_IDENTITY(4, int(ivec2(_GLF_IDENTITY(4, 1 * (4)), 0)))) + 0))))), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY((_GLF_IDENTITY(4, (4) + 0)), ~ (~ ((_GLF_IDENTITY(4, (_GLF_IDENTITY(4, int(ivec2(_GLF_IDENTITY(4, 1 * (4)), 0)))) + 0))))), 1)), (int(ivec2(_GLF_IDENTITY((_GLF_IDENTITY(4, (4) + 0)), ~ (~ ((_GLF_IDENTITY(4, (_GLF_IDENTITY(4, int(ivec2(_GLF_IDENTITY(4, 1 * (4)), 0)))) + 0))))), 1))) * (1 & 1))))), 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(4, (4) | (4))), _GLF_IDENTITY((false ? _GLF_FUZZED(47917) : (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) + 0), 0 ^ (_GLF_IDENTITY(4, (4) + 0))))), clamp((false ? _GLF_FUZZED(47917) : (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) + 0), 0 ^ (_GLF_IDENTITY(4, (4) + 0))))), (false ? _GLF_FUZZED(47917) : (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) + 0), 0 ^ (_GLF_IDENTITY(4, (4) + 0))))), _GLF_IDENTITY((false ? _GLF_FUZZED(47917) : (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) + 0), 0 ^ (_GLF_IDENTITY(4, (4) + 0))))), max((false ? _GLF_FUZZED(47917) : (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) + 0), 0 ^ (_GLF_IDENTITY(4, (4) + 0))))), (false ? _GLF_FUZZED(47917) : (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) + 0), 0 ^ (_GLF_IDENTITY(4, (4) + 0)))))))))))), 0, 1, 1), (ivec4(_GLF_IDENTITY(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(47917) : (_GLF_IDENTITY(4, (4) + 0)))), 0 ^ (_GLF_IDENTITY((4), (false ? _GLF_FUZZED(47917) : (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) + 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) + _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) | 0)), clamp(_GLF_IDENTITY(4, (4) + 0), _GLF_IDENTITY(4, (4) + 0), _GLF_IDENTITY(4, (4) + 0))), _GLF_IDENTITY(4, (4) + 0), _GLF_IDENTITY(_GLF_IDENTITY(4, (4) + 0), (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) + 0), ~ (~ (_GLF_IDENTITY(4, (4) + 0))))) | (_GLF_IDENTITY(4, (4) + 0)))))))))), 0, 1, 1)) + ivec4(0, 0, 0, 0)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4))))), _GLF_IDENTITY((false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4))))), (_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4)))))) / 1)), (false ? _GLF_FUZZED(_injected_loop_counter) : (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4))))), (_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4)))))) / 1))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4))))), _GLF_IDENTITY((false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4))))), (_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4)))))) / 1)), (false ? _GLF_FUZZED(_injected_loop_counter) : (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4))))), (_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4)))))) / 1))))), max(_GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4))))), _GLF_IDENTITY((false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4))))), (_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4)))))) / 1)), (false ? _GLF_FUZZED(_injected_loop_counter) : (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4))))), (_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4)))))) / 1))))), _GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4))))), _GLF_IDENTITY((false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4))))), (_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4)))))) / 1)), (false ? _GLF_FUZZED(_injected_loop_counter) : (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4))))), (_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4)))))) / 1)))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4))))), _GLF_IDENTITY((false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4))))), (_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4)))))) / 1)), (false ? _GLF_FUZZED(_injected_loop_counter) : (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4))))), (_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4)))))) / 1))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4))))), _GLF_IDENTITY((false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4))))), (_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4)))))) / 1)), (false ? _GLF_FUZZED(_injected_loop_counter) : (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4))))), (_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4)))))) / 1)))))))))), (0 << _GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(47917) : (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(48077) : 4))))) + 0)))), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(47917) : _GLF_IDENTITY((_GLF_IDENTITY(4, (4) + 0)), ~ (~ ((_GLF_IDENTITY(4, (_GLF_IDENTITY(4, int(ivec2(_GLF_IDENTITY(4, 1 * (4)), 0)))) + 0))))))), 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(4, (4) | (4))), (false ? _GLF_FUZZED(47917) : (_GLF_IDENTITY(4, (4) + 0)))))), 0, 1, 1), (ivec4(_GLF_IDENTITY(_GLF_IDENTITY((4), _GLF_IDENTITY((false ? _GLF_FUZZED(47917) : (_GLF_IDENTITY(4, (4) + 0))), (_GLF_IDENTITY((false ? _GLF_FUZZED(47917) : (_GLF_IDENTITY(4, (4) + 0))), _GLF_IDENTITY(int(int((false ? _GLF_FUZZED(47917) : (_GLF_IDENTITY(4, (4) + 0))))), min(int(int((false ? _GLF_FUZZED(47917) : (_GLF_IDENTITY(4, (4) + 0))))), int(int((false ? _GLF_FUZZED(47917) : (_GLF_IDENTITY(4, (4) + 0))))))))) | (_GLF_IDENTITY((false ? _GLF_FUZZED(47917) : (_GLF_IDENTITY(4, (4) + 0))), max((false ? _GLF_FUZZED(47917) : (_GLF_IDENTITY(4, (4) + 0))), (false ? _GLF_FUZZED(47917) : (_GLF_IDENTITY(4, (4) + 0)))))))), 0 ^ (_GLF_IDENTITY((4), (false ? _GLF_FUZZED(47917) : (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) + 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) + _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) | 0)), clamp(_GLF_IDENTITY(4, (4) + 0), _GLF_IDENTITY(4, (4) + 0), _GLF_IDENTITY(4, (4) + 0))), _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) / 1)) + 0), _GLF_IDENTITY(_GLF_IDENTITY(4, (4) + 0), (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) + 0), ~ (~ (_GLF_IDENTITY(4, (4) + 0))))) | (_GLF_IDENTITY(4, (4) + 0)))))))))), 0, 1, 1)) + ivec4(0, 0, 0, 0)))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, 0 | (4)), _GLF_IDENTITY(4, max(4, 4)), _GLF_IDENTITY(4, min(4, 4))))))))), _GLF_IDENTITY((false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4))))), (_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4)))))) / 1)), (false ? _GLF_FUZZED(_injected_loop_counter) : (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4))))), (_GLF_IDENTITY(_GLF_IDENTITY((4), (true ? (4) : _GLF_FUZZED(1798))), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4)))))) / 1))))), (0 << _GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(_GLF_IDENTITY((4), (false ? _GLF_IDENTITY(_GLF_FUZZED(47917), clamp(_GLF_FUZZED(47917), _GLF_FUZZED(47917), _GLF_IDENTITY(_GLF_FUZZED(47917), (false ? _GLF_FUZZED(36761) : _GLF_FUZZED(47917))))) : (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(48077) : 4))))) + 0)))), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(47917) : _GLF_IDENTITY((_GLF_IDENTITY(4, (4) + 0)), ~ (~ ((_GLF_IDENTITY(4, (_GLF_IDENTITY(4, int(ivec2(_GLF_IDENTITY(4, 1 * (4)), 0)))) + 0))))))), 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(4, (4) | (4))), (false ? _GLF_FUZZED(47917) : (_GLF_IDENTITY(4, (4) + 0)))))), 0, 1, 1), (ivec4(_GLF_IDENTITY(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(47917) : (_GLF_IDENTITY(4, (4) + 0)))), 0 ^ (_GLF_IDENTITY((4), (false ? _GLF_FUZZED(47917) : (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) + 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) + _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) | 0)), clamp(_GLF_IDENTITY(4, (4) + 0), _GLF_IDENTITY(4, (4) + 0), _GLF_IDENTITY(4, (4) + 0))), _GLF_IDENTITY(4, (4) + 0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) + 0), (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) + 0), ~ (~ (_GLF_IDENTITY(4, (4) + 0))))) | (_GLF_IDENTITY(4, (4) + 0))), (false ? _GLF_FUZZED(bitCount(subgroup_id)) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) + 0), (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) + 0), ~ (~ (_GLF_IDENTITY(4, (4) + 0))))) | (_GLF_IDENTITY(4, (4) + 0))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) + 0), (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) + 0), ~ (~ (_GLF_IDENTITY(4, (4) + 0))))) | (_GLF_IDENTITY(4, (4) + 0))), max(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) + 0), (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) + 0), ~ (~ (_GLF_IDENTITY(4, (4) + 0))))) | (_GLF_IDENTITY(4, (4) + 0))), _GLF_IDENTITY(_GLF_IDENTITY(4, (4) + 0), (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) + 0), ~ (~ (_GLF_IDENTITY(4, (4) + 0))))) | (_GLF_IDENTITY(4, (4) + 0))))))))))))))))), 0, 1, 1)) + ivec4(0, 0, 0, 0)))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4))))), _GLF_IDENTITY((false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4))))), (_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), int(ivec4(false ? _GLF_FUZZED(47917) : (4), 0, int(_GLF_ZERO(0.0, injectionSwitch.x)), (86431 & 0)))), _GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), (false ? _GLF_FUZZED(47917) : (4)) | (false ? _GLF_FUZZED(47917) : (4))), false ? _GLF_FUZZED(47917) : (4)))))) / 1)), (false ? _GLF_FUZZED(_injected_loop_counter) : (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))) ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : _GLF_IDENTITY((4), ((4)) | ((4))))))), (_GLF_IDENTITY((4), (_GLF_IDENTITY(false ? _GLF_FUZZED(47917) : (4), clamp(false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4), false ? _GLF_FUZZED(47917) : (4)))))) / 1))))), (0 << _GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(47917) : (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(48077) : 4))))) + 0)))), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY((4), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(47917) : _GLF_IDENTITY((_GLF_IDENTITY(4, (4) + 0)), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (4) >> 0), _GLF_IDENTITY(4, int(int(4))), 4)), (_GLF_IDENTITY(4, int(ivec2(_GLF_IDENTITY(4, 1 * (4)), 0)))) + 0))))))), 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(4, (_GLF_IDENTITY(4, int(ivec2(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-24187) : 4)), 1)))) | (4))), (false ? _GLF_FUZZED(47917) : (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) + 0), (_GLF_IDENTITY(4, (4) + 0)) | (_GLF_IDENTITY(4, (4) + 0)))))))), 0, 1, 1), (ivec4(_GLF_IDENTITY(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(47917) : (_GLF_IDENTITY(4, (4) + 0)))), 0 ^ (_GLF_IDENTITY((4), (false ? _GLF_FUZZED(47917) : (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) + 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) + _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) | 0)), clamp(_GLF_IDENTITY(4, (4) + 0), _GLF_IDENTITY(4, (4) + 0), _GLF_IDENTITY(4, (4) + 0))), _GLF_IDENTITY(4, (4) + 0), _GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY((4) + 0, 0 | ((4) + 0))), (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) + 0), ~ (~ (_GLF_IDENTITY(4, (4) + 0))))) | (_GLF_IDENTITY(4, (4) + 0)))))))))), 0, 1, 1)) + ivec4(0, 0, 0, 0)))))))))), 64, 0);
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, false)))))
      {
       do
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(674.404) : injectionSwitch.x)))))), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(674.404) : injectionSwitch.x))))))) - 0.0) < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && ((false))))), true, true)), ! (! (bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true))))))))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           else
            {
            }
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
