#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | ((uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(4u), uvec3(4u))) << _GLF_IDENTITY(uvec3(7u), uvec3(7u)))).x;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).y))), _GLF_IDENTITY(false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, log(vec2(1.0, 1.0)) + (injectionSwitch)).y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))))))), false || (_GLF_IDENTITY(false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-9.2)), float(injectionSwitch.y), bool(true))), _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(760.016)), bool(false))), injectionSwitch.y))))))))))), bool(bool(false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))) / 1.0) > injectionSwitch.y), true && _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), ! (! (((injectionSwitch.x > injectionSwitch.y))))))))))))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).y))), _GLF_IDENTITY(false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, log(vec2(1.0, 1.0)) + (injectionSwitch)).y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))))))), false || (_GLF_IDENTITY(false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-9.2)), _GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_IDENTITY(float(injectionSwitch.y), (float(injectionSwitch.y)) / 1.0)), float(_GLF_FUZZED((-1912.1629 / -5706.7812))), bool(false))), bool(_GLF_IDENTITY(true, (true) && true)))), _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(760.016)), _GLF_IDENTITY(bool(false), bool(bvec3(bool(false), false, true))))), injectionSwitch.y))))))))))), bool(bool(false || _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * _GLF_IDENTITY((injectionSwitch.x), min((injectionSwitch.x), (injectionSwitch.x))))) / 1.0) > injectionSwitch.y), true && _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), true && (((injectionSwitch.x > injectionSwitch.y))))))))))), (_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * _GLF_IDENTITY((injectionSwitch.x), min((injectionSwitch.x), (injectionSwitch.x))))) / 1.0) > injectionSwitch.y), true && _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), true && (((injectionSwitch.x > injectionSwitch.y))))))))))), bool(bvec3((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * _GLF_IDENTITY((injectionSwitch.x), min((injectionSwitch.x), (injectionSwitch.x))))) / 1.0) > injectionSwitch.y), true && _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), true && (((injectionSwitch.x > injectionSwitch.y))))))))))), true, false)))) || false)))))))) || false), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))))) && true), false)), (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))))) && true), false))) && true)))) && true)))), (false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(length(acos(-80.61))))) > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))))) && true), false)), (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))), false, false, false))))))))) && true), false))) && true)))) && true))))) && true), false || (_GLF_IDENTITY(false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))), vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), ! _GLF_IDENTITY((! (((injectionSwitch.x > injectionSwitch.y)))), bool(bvec4((! (((injectionSwitch.x > injectionSwitch.y)))), true, false, false)))))))), bool(bool(_GLF_IDENTITY(false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))))), ! (! (((injectionSwitch.x > injectionSwitch.y))))))))), false || (false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(96.70)), float(injectionSwitch.y), bool(true))))), true, true))))), ! (! (((injectionSwitch.x > injectionSwitch.y)))))))))))))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))))) && true), false)), (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))))) && true), false))) && true)))) && true)))), (false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(length(acos(-80.61))))) > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))))) && true), false)), (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))), false, false, false))))))))) && true), false))) && true)))) && true))))) && true), false || (_GLF_IDENTITY(false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))), vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), ! _GLF_IDENTITY((! (((injectionSwitch.x > injectionSwitch.y)))), bool(bvec4((! (((injectionSwitch.x > injectionSwitch.y)))), true, false, false)))))))), bool(bool(_GLF_IDENTITY(false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))))), ! (! (((injectionSwitch.x > injectionSwitch.y))))))))), false || (false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(96.70)), float(injectionSwitch.y), bool(true))))), true, true))))), ! (! (((injectionSwitch.x > injectionSwitch.y)))))))))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))))) && true), false)), (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))))) && true), false))) && true)))) && true)))), (false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(length(acos(-80.61))))) > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))))) && true), false)), (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))), false, false, false))))))))) && true), false))) && true)))) && true))))) && true), false || (_GLF_IDENTITY(false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))), vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), ! _GLF_IDENTITY((! (((injectionSwitch.x > injectionSwitch.y)))), bool(bvec4((! (((injectionSwitch.x > injectionSwitch.y)))), true, false, false)))))))), bool(bool(_GLF_IDENTITY(false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))))), ! (! (((injectionSwitch.x > injectionSwitch.y))))))))), false || (false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(96.70)), float(injectionSwitch.y), bool(true))))), true, true))))), ! (! (((injectionSwitch.x > injectionSwitch.y))))))))))))))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))))) && true), false)), (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))))) && true), false))) && true)))) && true)))), (false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(length(acos(-80.61))))) > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))))) && true), false)), (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))), false, false, false))))))))) && true), false))) && true)))) && true))))) && true), false || (_GLF_IDENTITY(false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))), vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), ! _GLF_IDENTITY((! (((injectionSwitch.x > injectionSwitch.y)))), bool(bvec4((! (((injectionSwitch.x > injectionSwitch.y)))), true, false, false)))))))), bool(bool(_GLF_IDENTITY(false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))))), ! (! (((injectionSwitch.x > injectionSwitch.y))))))))), false || (false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(96.70)), float(injectionSwitch.y), bool(true))))), true, true))))), ! (! (((injectionSwitch.x > injectionSwitch.y)))))))))))))))))))))), true, true, false))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], _GLF_IDENTITY(gl_WorkGroupID[1], ~ _GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((gl_WorkGroupID[1]), (_GLF_IDENTITY((gl_WorkGroupID[1]), 0u | ((gl_WorkGroupID[1])))) / 1u), clamp(~ (gl_WorkGroupID[1]), ~ _GLF_IDENTITY((gl_WorkGroupID[1]), clamp((gl_WorkGroupID[1]), (gl_WorkGroupID[1]), (gl_WorkGroupID[1]))), ~ (gl_WorkGroupID[_GLF_IDENTITY(1, (1) >> 0)])))), uint(uvec3((_GLF_IDENTITY(~ _GLF_IDENTITY((gl_WorkGroupID[1]), (_GLF_IDENTITY((gl_WorkGroupID[1]), 0u | ((gl_WorkGroupID[1])))) / 1u), clamp(~ (gl_WorkGroupID[1]), ~ _GLF_IDENTITY((gl_WorkGroupID[1]), clamp((gl_WorkGroupID[1]), (gl_WorkGroupID[1]), (gl_WorkGroupID[1]))), ~ (gl_WorkGroupID[_GLF_IDENTITY(1, (1) >> 0)])))), 1u, 1u)))), _GLF_IDENTITY(gl_WorkGroupID[2], (gl_WorkGroupID[2]) + _GLF_IDENTITY(0u, (0u) >> 0u)))).x, (_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], _GLF_IDENTITY(gl_WorkGroupID[1], ~ _GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((gl_WorkGroupID[1]), (_GLF_IDENTITY((gl_WorkGroupID[1]), 0u | ((gl_WorkGroupID[1])))) / 1u), clamp(~ (gl_WorkGroupID[1]), ~ _GLF_IDENTITY((gl_WorkGroupID[1]), clamp((gl_WorkGroupID[1]), (gl_WorkGroupID[1]), (gl_WorkGroupID[1]))), ~ (gl_WorkGroupID[_GLF_IDENTITY(1, (1) >> 0)])))), uint(uvec3((_GLF_IDENTITY(~ _GLF_IDENTITY((gl_WorkGroupID[1]), (_GLF_IDENTITY((gl_WorkGroupID[1]), 0u | ((gl_WorkGroupID[1])))) / 1u), clamp(~ (gl_WorkGroupID[1]), ~ _GLF_IDENTITY((gl_WorkGroupID[1]), clamp((gl_WorkGroupID[1]), (gl_WorkGroupID[1]), (gl_WorkGroupID[1]))), ~ (gl_WorkGroupID[_GLF_IDENTITY(1, (1) >> 0)])))), 1u, 1u)))), _GLF_IDENTITY(gl_WorkGroupID[2], (gl_WorkGroupID[2]) + _GLF_IDENTITY(0u, (0u) >> 0u)))).x) | 0u);
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (true ? _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u) + subgroup_id * subgroup_size + subgroup_local_id, clamp(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(write_val) : subgroup_local_id)), workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))) | (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) : _GLF_FUZZED(workgroup_base)));
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))) && _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec3(true, false, true))))))))))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(262.775, 65.02)) : injectionSwitch))) - vec2(0.0, 0.0)).x < injectionSwitch.y))))) && true, false || ((_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(262.775, 65.02)) : injectionSwitch))) - vec2(0.0, 0.0)).x < injectionSwitch.y))))) && true)), (_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(_GLF_IDENTITY(262.775, mix(float(_GLF_FUZZED(6.9)), float(262.775), bool(true))), (262.775) + 0.0), 65.02)) : injectionSwitch))) - vec2(0.0, 0.0)).x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))) && true, ! (! _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(262.775, 65.02)) : injectionSwitch))) - vec2(0.0, 0.0)).x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(262.775, 65.02)) : injectionSwitch))) - vec2(0.0, 0.0)).x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(262.775, 65.02)) : injectionSwitch))) - vec2(0.0, 0.0)).x, mix(float(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(262.775, 65.02)) : injectionSwitch))) - vec2(0.0, 0.0)).x), float(_GLF_FUZZED(-920.104)), bool(false))), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(262.775, 65.02)) : injectionSwitch))) - vec2(0.0, 0.0)).x)), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(262.775, 65.02)) : injectionSwitch))) - vec2(0.0, 0.0)).x)) < injectionSwitch.y)))), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(262.775, 65.02)) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))) - _GLF_IDENTITY(vec2(0.0, 0.0), mix(vec2(_GLF_FUZZED(-1658.9532), _GLF_FUZZED(1.3)), vec2((vec2(0.0, 0.0))[0], (vec2(0.0, 0.0))[1]), bvec2(true, true)))).x < injectionSwitch.y))))) && true)) && true), (_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(262.775, 65.02)) : injectionSwitch))) - vec2(0.0, 0.0)).x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)))), (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(262.775, 65.02)) : injectionSwitch))) - _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 0.0), mix(vec2(_GLF_FUZZED(-1658.9532), _GLF_FUZZED(1.3)), vec2((vec2(0.0, 0.0))[_GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(84036) : 0))], (vec2(0.0, 0.0))[1]), bvec2(true, true)))).x < injectionSwitch.y))))) && true)) && true), false || (((_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(262.775, 65.02)) : injectionSwitch))) - vec2(0.0, 0.0)).x < injectionSwitch.y)))), _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(262.775, 65.02)) : injectionSwitch))) - _GLF_IDENTITY(vec2(0.0, 0.0), mix(vec2(_GLF_FUZZED(-1658.9532), _GLF_FUZZED(1.3)), vec2((vec2(0.0, 0.0))[0], (vec2(0.0, 0.0))[1]), bvec2(true, true)))).x < injectionSwitch.y))))) && true, bool(_GLF_IDENTITY(bool((_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(262.775, 65.02)) : injectionSwitch))) - _GLF_IDENTITY(vec2(0.0, 0.0), mix(vec2(_GLF_FUZZED(-1658.9532), _GLF_FUZZED(1.3)), vec2((vec2(0.0, 0.0))[0], (vec2(0.0, 0.0))[1]), bvec2(true, true)))).x < injectionSwitch.y))))) && true), true && (bool((_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(262.775, 65.02)) : injectionSwitch))) - _GLF_IDENTITY(vec2(0.0, 0.0), mix(vec2(_GLF_FUZZED(-1658.9532), _GLF_FUZZED(1.3)), vec2((vec2(0.0, 0.0))[0], (vec2(0.0, 0.0))[1]), bvec2(true, true)))).x < injectionSwitch.y))))) && true))))))) && true)))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) + 0.0) < injectionSwitch.y)))))) || false)))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           else
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + 0))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(713.474) : injectionSwitch.x)) > injectionSwitch.y))));
                  }
                }
               else
                {
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          {
          }
         else
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(((_GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), int(ivec2(min(1, 1), int(_GLF_ONE(1.0, injectionSwitch.y)))))) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(false ? _GLF_FUZZED(40610) : _GLF_IDENTITY(int(1), (int(1)) * 1), int(ivec4(false ? _GLF_FUZZED(40610) : _GLF_IDENTITY(int(1), (int(1)) * 1), 1, 1, ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(5298) : ((_GLF_IDENTITY(1, min(1, 1)) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(40610) : _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) * 1), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) * 1), (_GLF_IDENTITY(int(1), (int(1)) * 1)) << 0))))))), min(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(5298) : ((_GLF_IDENTITY(1, min(1, 1)) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(40610) : _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) * 1), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) * 1), (_GLF_IDENTITY(int(1), (int(1)) * 1)) << 0))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(5298) : ((_GLF_IDENTITY(1, min(1, 1)) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(40610) : _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) * 1), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) * 1), (_GLF_IDENTITY(int(1), (int(1)) * 1)) << 0))))))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 & (89027 % 32685)), (_injected_loop_counter > (0 & (89027 % 32685))) && true)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || (false))) && true)))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
  }
 atomicStore(write_val, uint(virtual_gid), _GLF_IDENTITY(4, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(4, (4) - (35796 & 0)))), 64, 0);
 for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY(0, (0) - 0), true && (_injected_loop_counter > _GLF_IDENTITY(0, (0) - 0)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, abs(cos(vec2(0.0, 0.0))) * (injectionSwitch)).y))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)))) || false)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, true)), ! (! (bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, true))))))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (_GLF_IDENTITY(true, _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), bool(_GLF_IDENTITY(bvec3(! ((true)), false, false), bvec3(bvec4(bvec3(! ((true)), false, false), true))))))) || false)) && true)))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, true)))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 _GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(write_val)), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(write_val)), _GLF_IDENTITY(0u, 0u | (0u)) | (_GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(write_val)), (true ? buf[virtual_gid] = uint(subgroupAllEqual(write_val)) : _GLF_FUZZED(workgroup_size)))))), (_GLF_IDENTITY((_GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(write_val)), _GLF_IDENTITY(0u, _GLF_IDENTITY(0u | (0u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (0u | (0u)))) | (buf[virtual_gid] = uint(subgroupAllEqual(write_val))))), _GLF_IDENTITY(_GLF_IDENTITY(0u + ((_GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(write_val)), _GLF_IDENTITY(0u, 0u | (0u)) | (buf[virtual_gid] = uint(subgroupAllEqual(write_val)))))), ~ (_GLF_IDENTITY(~ (0u + ((_GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(write_val)), _GLF_IDENTITY(0u, 0u | (0u)) | (buf[virtual_gid] = uint(subgroupAllEqual(write_val))))))), (~ (0u + ((_GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(write_val)), _GLF_IDENTITY(0u, 0u | (0u)) | (buf[virtual_gid] = uint(subgroupAllEqual(write_val)))))))) ^ 0u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u + ((_GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(write_val)), _GLF_IDENTITY(0u, 0u | (0u)) | (buf[virtual_gid] = uint(subgroupAllEqual(write_val)))))), ~ (_GLF_IDENTITY(~ (0u + ((_GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(write_val)), _GLF_IDENTITY(0u, 0u | (0u)) | (buf[virtual_gid] = uint(subgroupAllEqual(write_val))))))), (~ (0u + ((_GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(write_val)), _GLF_IDENTITY(0u, 0u | (0u)) | (buf[virtual_gid] = uint(subgroupAllEqual(write_val)))))))) ^ 0u)))), (~ (_GLF_IDENTITY(0u + ((_GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(write_val)), _GLF_IDENTITY(0u, 0u | (0u)) | (buf[virtual_gid] = uint(subgroupAllEqual(write_val)))))), ~ (_GLF_IDENTITY(~ (0u + ((_GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(write_val)), _GLF_IDENTITY(0u, 0u | (0u)) | (buf[virtual_gid] = uint(subgroupAllEqual(write_val))))))), (~ (0u + ((_GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(write_val)), _GLF_IDENTITY(0u, 0u | (0u)) | (buf[virtual_gid] = uint(subgroupAllEqual(write_val)))))))) ^ 0u))))) / 1u))))) ^ 0u), (~ (_GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(write_val)), _GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)))))), true && (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)))))))))) ? _GLF_FUZZED(uvec4(48678u, 143698u, 5311u, 170289u)[0]) : 0u)), (1u & 1u) * (0u)) | (buf[virtual_gid] = uint(subgroupAllEqual(write_val)))))) >> 0u)));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(6.9)), bool(false)))))); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
