#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_7 {
 uint subgroup_local_id;
 mat2x3 _f0;
} ;

struct _GLF_struct_5 {
 uvec2 _f0;
 vec4 _f1;
 uvec3 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_6 {
 _GLF_struct_5 _f0;
} ;

struct _GLF_struct_3 {
 ivec3 _f0;
 float _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_2 {
 ivec3 _f0;
 float _f1;
} ;

struct _GLF_struct_1 {
 mat3x2 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_0 {
 uint _f0;
} ;

struct _GLF_struct_4 {
 bvec2 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_2 _f3;
 mat3x2 _f4;
 _GLF_struct_3 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_8 {
 _GLF_struct_4 _f0;
 uvec2 _f1;
 bvec3 _f2;
 _GLF_struct_6 _f3;
 _GLF_struct_7 _f4;
 ivec2 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             barrier();
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   return;
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       break;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), true, false)))))))));
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))), vec2(_GLF_FUZZED(65.86), _GLF_FUZZED(166.065)), bvec2(false, false)))) / vec2(1.0, 1.0)).y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(6.4) : injectionSwitch.x)) > injectionSwitch.y)), _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) < injectionSwitch.y)))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) < injectionSwitch.y)))), false, false, true)))), _GLF_IDENTITY(false, true && (false)))))))), false || (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))))))))))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), bool(bvec3(bool(_GLF_IDENTITY(false, (false) && true)), false, true)))))))
      barrier();
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x < injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(-15.30), _GLF_FUZZED(-914.662)), bvec2(false, false)))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-29.28), _GLF_FUZZED(4.8)), bvec2(false, false))).y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))) || false)))
  barrier();
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(_GLF_struct_4(_GLF_IDENTITY(bvec2(true), bvec2(bvec4(bvec2(true), _GLF_IDENTITY(false, (false) && true), true))), _GLF_struct_0(1u), _GLF_struct_1(mat3x2(1.0), mat2x4(1.0)), _GLF_struct_2(ivec3(1), 1.0), mat3x2(1.0), _GLF_struct_3(ivec3(_GLF_IDENTITY(1, clamp(1, 1, 1))), 1.0, ivec3(_GLF_IDENTITY(1, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(_GLF_IDENTITY(-56737, int(ivec2(-56737, 0)))) : 1)))), bvec3(true)), _GLF_IDENTITY(uvec2(1u), min(uvec2(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) ^ 0u))))), _GLF_IDENTITY(uvec2(1u), (_GLF_IDENTITY(true ? _GLF_IDENTITY(uvec2(1u), min(uvec2(1u), uvec2(1u))) : _GLF_FUZZED(uvec2(197517u, 195414u)), (false ? _GLF_FUZZED(uvec2(61946u, 144011u)) : true ? _GLF_IDENTITY(uvec2(1u), min(uvec2(1u), uvec2(1u))) : _GLF_FUZZED(uvec2(197517u, 195414u)))))))), bvec3(true), _GLF_struct_6(_GLF_struct_5(uvec2(1u), vec4(1.0), uvec3(_GLF_IDENTITY(1u, 0u | (1u))), uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : 1u, min(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) << 0u) : 1u, _GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : 1u, min(false ? _GLF_FUZZED(subgroup_id) : 1u, false ? _GLF_FUZZED(subgroup_id) : 1u))))), clamp((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : 1u, min(false ? _GLF_FUZZED(subgroup_id) : 1u, _GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : 1u, min(false ? _GLF_FUZZED(subgroup_id) : 1u, _GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : 1u, _GLF_IDENTITY(uint(uvec4(false ? _GLF_FUZZED(subgroup_id) : 1u, 1u, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))), clamp(_GLF_IDENTITY(uint(uvec4(false ? _GLF_FUZZED(subgroup_id) : 1u, 1u, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 0u ^ (uint(uvec4(false ? _GLF_FUZZED(subgroup_id) : 1u, 1u, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), uint(uvec4(false ? _GLF_FUZZED(subgroup_id) : 1u, 1u, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uint(uvec4(false ? _GLF_FUZZED(subgroup_id) : 1u, 1u, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))))))), (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : 1u, min(false ? _GLF_FUZZED(subgroup_id) : 1u, _GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : 1u, min(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : 1u, 0u | (false ? _GLF_FUZZED(subgroup_id) : 1u)), false ? _GLF_FUZZED(subgroup_id) : 1u))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : 1u, min(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : 1u, _GLF_IDENTITY(uint(uvec4(false ? _GLF_FUZZED(subgroup_id) : 1u, 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), (uint(uvec4(false ? _GLF_FUZZED(subgroup_id) : 1u, 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) ^ 0u)), _GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : 1u, min(false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(1u, min(1u, 1u)), false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, uint(_GLF_IDENTITY(uvec2(subgroup_id, 0u), (uvec2(subgroup_id, 0u)) | (uvec2(0u, 0u) & uvec2(131162u, 148092u)))))) : 1u))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : 1u, min(false ? _GLF_FUZZED(subgroup_id) : 1u, _GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : 1u, min(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id)))))) : _GLF_IDENTITY(1u, min(1u, 1u)), false ? _GLF_FUZZED(subgroup_id) : 1u))))))), ((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : 1u, min(false ? _GLF_FUZZED(subgroup_id) : 1u, _GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_id) : 1u, (false ? _GLF_FUZZED(subgroup_id) : 1u) | (false ? _GLF_FUZZED(subgroup_id) : 1u)), min(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), 0u | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) | (_GLF_FUZZED(subgroup_id)))), ((_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) | (_GLF_FUZZED(subgroup_id))))) | 0u)) : 1u, false ? _GLF_FUZZED(subgroup_id) : 1u)))))) * 1u))))))), _GLF_struct_7(gl_SubgroupInvocationID, mat2x3(1.0)), _GLF_IDENTITY(ivec2(1), max(ivec2(1), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), (_GLF_IDENTITY(ivec2(1), ivec2(0, 0) | (ivec2(1)))) | (_GLF_IDENTITY(ivec2(1), (false ? _GLF_FUZZED(ivec2(12362, -46893)) : ivec2(1))))), ivec2(ivec3(ivec2(1), ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(0))) >> _GLF_IDENTITY(int(0), int(0)))))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (true ? ~ (0) : _GLF_FUZZED(-25567)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), false, false)))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(0.0, float(vec2(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0))), 0.0, sqrt(1.0), 0.0, 1.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(determinant(mat4(0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(determinant(mat4(0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0))), 1.0, 0.0)), (true ? float(mat4x3(_GLF_IDENTITY(0.0, float(vec2(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0))), 0.0, sqrt(1.0), 0.0, 1.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(determinant(mat4(0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(determinant(mat4(0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0))), 1.0, 0.0)) : _GLF_FUZZED(-4.0)))), 0.0))), injectionSwitch)).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), true && ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(0.0, float(vec2(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0))), 0.0, sqrt(1.0), 0.0, 1.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(determinant(mat4(0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(determinant(mat4(0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0))), 1.0, 0.0)), (true ? float(mat4x3(_GLF_IDENTITY(0.0, float(vec2(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0))), 0.0, sqrt(1.0), 0.0, 1.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(determinant(mat4(0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(determinant(mat4(0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0))), 1.0, 0.0)) : _GLF_FUZZED(-4.0)))), 0.0))), injectionSwitch)).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, abs(1.0), 0.0, 1.0, 1.0))).y))))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = (0 | ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))))) >> _GLF_IDENTITY(int(1), int(1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
          {
           return;
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, _GLF_IDENTITY(0u, uint(uvec4(0u, 1u, (1u & 1u), 1u))))).x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, (_GLF_IDENTITY((false) || false, ((false) || false) || false)) || false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), true, false)))) || false)) || false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))), _GLF_IDENTITY(bool(bvec3(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))), false, false)), ! (! (bool(bvec3(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))), false, false))))))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))) || false))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) | (int(0))), _GLF_IDENTITY(max(int(0), int(0)), max(max(int(0), int(0)), max(int(0), int(0))))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0)))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))) : _GLF_FUZZED(-8016.5029))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, true, false)))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), bool(bool(_GLF_IDENTITY(true, bool(bool(true))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        barrier();
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true)))), ! (! (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true))), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true)))))))))))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(vec2(-3.4, -9.2)), min(_GLF_FUZZED(vec2(-3.4, -9.2)), _GLF_FUZZED(vec2(-3.4, -9.2)))))).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((276.524 * -682.684)), _GLF_FUZZED(-236.408)), bvec2(false, false))).y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 1.0, tan(0.0), 1.0, exp(0.0), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))).y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 1.0, tan(0.0), 1.0, exp(0.0), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))), vec2(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 1.0, tan(0.0), 1.0, exp(0.0), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))), (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 1.0, tan(0.0), 1.0, exp(0.0), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))) / vec2(1.0, 1.0)), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0))).y))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(2.7) : _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 1.0, 0.0)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-854.072)), bool(false)))))))
          barrier();
         barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (false)), true)), true && (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, true && (false)), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, true && (false)), true))), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, true && (false)), true))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, true && (false)), true)))))), false))))))))))
  return;
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))) + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, 0u + (subgroup_size)), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << 0u), _GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << 0u), _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << 0u)), (true ? min(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), (_GLF_IDENTITY(subgroup_id * subgroup_size, 0u ^ (subgroup_id * subgroup_size))) << 0u), _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << 0u)) : _GLF_FUZZED(workgroup_base)))), _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u), subgroup_id)) * subgroup_size))))) * 1u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))) + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, 0u + (subgroup_size)), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << 0u), _GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << 0u), _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << 0u)), (true ? min(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), (_GLF_IDENTITY(subgroup_id * subgroup_size, 0u ^ (subgroup_id * subgroup_size))) << 0u), _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << 0u)) : _GLF_FUZZED(workgroup_base)))), _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u), subgroup_id)) * subgroup_size))))) * 1u)), (false ? _GLF_FUZZED(23653u) : ~ (_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))) + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, 0u + (subgroup_size)), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << 0u), _GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << 0u), _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << 0u)), (true ? min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uvec3(subgroup_id, 1u, 0u))) * _GLF_IDENTITY(subgroup_size, (subgroup_size) << _GLF_IDENTITY(0u, (0u) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(0u ^ (subgroup_id * subgroup_size), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u, uint(uvec4(0u, 1u, 1u, 0u)))), 0u | (~ (_GLF_IDENTITY(0u, uint(uvec4(0u, 1u, 1u, 0u)))))))) ^ (subgroup_id * subgroup_size) : _GLF_FUZZED(72748u))))) << 0u), _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << 0u)) : _GLF_FUZZED(workgroup_base)))), _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (subgroup_id))) / 1u), subgroup_id)) * subgroup_size))))) * 1u)))))) + _GLF_struct_replacement_8._f4.subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).y, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).y))), ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(-330.230, -1482.2075)) : (injectionSwitch))) * vec2(1.0, 1.0)))).y, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).y)), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))), clamp(min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))), _GLF_IDENTITY(min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))), _GLF_IDENTITY(vec2(mat2(min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))), 1.0, 1.0)), (vec2(mat2(min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))), 1.0, 1.0))) * mat2(1.0))), _GLF_IDENTITY(min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))), _GLF_IDENTITY((min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))) * mat2(1.0), clamp((min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))) * mat2(1.0), (min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))) * mat2(1.0), (min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))) * mat2(1.0))))))).y, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).y))), float(_GLF_FUZZED(-5.7)), bool(false))))) || false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-667.380), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(-0.9)), bvec2(true, false))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) + vec2(0.0, 0.0)))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), mix(float(_GLF_FUZZED(-7.5)), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), injectionSwitch.y))))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, ~ (~ (1)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).y), bool(bvec3((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).y), true, false)))))))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(false))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, ~ (~ (0))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
      {
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true, false))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY((_GLF_IDENTITY((_GLF_struct_replacement_8._f4.subgroup_local_id + 1), 1u * ((_GLF_IDENTITY(_GLF_struct_replacement_8._f4.subgroup_local_id + _GLF_IDENTITY(1, (1) - 0), (_GLF_struct_replacement_8._f4.subgroup_local_id + _GLF_IDENTITY(1, (1) - 0)) - 0u)))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), _GLF_IDENTITY(max(_GLF_IDENTITY(((_GLF_struct_replacement_8._f4.subgroup_local_id + 1) % subgroup_size), max(((_GLF_struct_replacement_8._f4.subgroup_local_id + _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 + (_GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (1)))))))) % _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(subgroup_size, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 1u)))) | (0u)), _GLF_IDENTITY(0u, (0u) | 0u)), (_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), clamp(uvec4(subgroup_size, 0u, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(3u))), ((0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) ^ 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (uint(5u)) / 1u), uint(5u))) | (_GLF_IDENTITY(0u, ~ (~ (0u)))))), uvec4(subgroup_size, 0u, 0u, 0u), uvec4(subgroup_size, 0u, 0u, 0u)))) ^ uvec4(0u, 0u, 0u, 0u)), min(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(subgroup_size, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 1u)))) | (0u)), _GLF_IDENTITY(0u, (0u) | 0u)), (_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), clamp(uvec4(subgroup_size, 0u, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(3u))), ((0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) ^ 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (uint(5u)) / 1u), uint(5u))) | (_GLF_IDENTITY(0u, ~ (~ (0u)))))), uvec4(subgroup_size, 0u, 0u, 0u), uvec4(subgroup_size, 0u, 0u, 0u)))) ^ uvec4(0u, 0u, 0u, 0u)), (_GLF_IDENTITY(uvec4(subgroup_size, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 1u)))) | (0u)), _GLF_IDENTITY(0u, (0u) | 0u)), (_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), clamp(uvec4(subgroup_size, 0u, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(3u))), ((0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) ^ 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (uint(5u)) / 1u), uint(5u))) | (_GLF_IDENTITY(0u, ~ (~ (0u)))))), uvec4(subgroup_size, 0u, 0u, 0u), uvec4(subgroup_size, 0u, 0u, 0u)))) ^ uvec4(0u, 0u, 0u, 0u))) << uvec4(0u, 0u, 0u, 0u)), _GLF_IDENTITY(uvec4(subgroup_size, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 1u)))) | (0u)), _GLF_IDENTITY(0u, (0u) | 0u)), (_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), clamp(uvec4(subgroup_size, 0u, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(3u))), ((0u >> _GLF_IDENTITY(uint(3u), uint(3u)))) ^ 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (uint(5u)) / 1u), uint(5u))) | (_GLF_IDENTITY(0u, ~ (~ (0u)))))), uvec4(subgroup_size, 0u, 0u, 0u), uvec4(subgroup_size, 0u, 0u, 0u)))) ^ uvec4(0u, 0u, 0u, 0u))))))), (_GLF_IDENTITY((_GLF_struct_replacement_8._f4.subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(workgroup_base) : subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_struct_replacement_8._f4.subgroup_local_id + 1), clamp((_GLF_struct_replacement_8._f4.subgroup_local_id + 1), _GLF_IDENTITY((_GLF_struct_replacement_8._f4.subgroup_local_id + 1), ((_GLF_struct_replacement_8._f4.subgroup_local_id + 1)) - 0u), (_GLF_struct_replacement_8._f4.subgroup_local_id + 1))) % subgroup_size, uint(uvec2((_GLF_struct_replacement_8._f4.subgroup_local_id + 1) % subgroup_size, 1u)))) | 0u, 0u ^ ((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_struct_replacement_8._f4.subgroup_local_id + 1), clamp((_GLF_struct_replacement_8._f4.subgroup_local_id + 1), _GLF_IDENTITY((_GLF_struct_replacement_8._f4.subgroup_local_id + 1), ((_GLF_struct_replacement_8._f4.subgroup_local_id + 1)) - 0u), (_GLF_struct_replacement_8._f4.subgroup_local_id + 1))) % subgroup_size, uint(uvec2((_GLF_struct_replacement_8._f4.subgroup_local_id + 1) % subgroup_size, 1u)))) | 0u)), ((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_8._f4.subgroup_local_id, (_GLF_struct_replacement_8._f4.subgroup_local_id) | (_GLF_IDENTITY(_GLF_struct_replacement_8._f4.subgroup_local_id, (_GLF_struct_replacement_8._f4.subgroup_local_id) >> (0u | 0u)))) + 1), clamp((_GLF_struct_replacement_8._f4.subgroup_local_id + 1), _GLF_IDENTITY((_GLF_struct_replacement_8._f4.subgroup_local_id + 1), ((_GLF_IDENTITY(_GLF_struct_replacement_8._f4.subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(_GLF_struct_replacement_8._f4.subgroup_local_id, (_GLF_struct_replacement_8._f4.subgroup_local_id) ^ 0u) + 1))))) - 0u), (_GLF_struct_replacement_8._f4.subgroup_local_id + 1))) % subgroup_size, uint(uvec2((_GLF_struct_replacement_8._f4.subgroup_local_id + 1) % subgroup_size, 1u)))) | 0u) / 1u))))), ((_GLF_struct_replacement_8._f4.subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-43191) : 1)), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, max(1, 1))))) - 0)))) | 0)) % subgroup_size)), (false ? _GLF_FUZZED(subgroup_size) : max(_GLF_IDENTITY(((_GLF_struct_replacement_8._f4.subgroup_local_id + 1) % subgroup_size), max(((_GLF_struct_replacement_8._f4.subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 1u)))) | (0u)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | 0u), max(_GLF_IDENTITY(0u, (0u) | 0u), _GLF_IDENTITY(0u, (0u) | 0u))), clamp(_GLF_IDENTITY(0u, (0u) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY((0u) | 0u, ~ (_GLF_IDENTITY(~ ((0u) | 0u), (~ ((0u) | 0u)) | (_GLF_IDENTITY(~ ((0u) | 0u), ~ (~ (~ ((0u) | 0u))))))))), (_GLF_IDENTITY(0u, (0u) | 0u)) / 1u), _GLF_IDENTITY(0u, (0u) | 0u)))), (_GLF_IDENTITY(uvec4(subgroup_size, _GLF_IDENTITY(0u, uint(uvec2(0u, 1u))), 0u, 0u), clamp(uvec4(subgroup_size, 0u, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(3u))), _GLF_IDENTITY(((0u >> _GLF_IDENTITY(uint(3u), uint(3u)))), (((0u >> _GLF_IDENTITY(uint(3u), uint(3u))))) >> 0u) ^ 0u), (_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(3u))), _GLF_IDENTITY(((0u >> _GLF_IDENTITY(uint(3u), uint(3u)))), (((0u >> _GLF_IDENTITY(uint(3u), uint(3u))))) >> 0u) ^ 0u)) | (_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(3u), uint(3u))), _GLF_IDENTITY(((0u >> _GLF_IDENTITY(uint(3u), uint(3u)))), (((0u >> _GLF_IDENTITY(uint(3u), uint(3u))))) >> 0u) ^ 0u))) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (uint(5u)) / 1u), uint(5u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (uint(5u)) / 1u), uint(5u))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (uint(5u)) / 1u), uint(5u)), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (uint(5u)) / 1u), uint(5u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (uint(5u)) / 1u), uint(5u))))))) | (_GLF_IDENTITY(0u, _GLF_IDENTITY(~ (~ (0u)), max(~ (~ (0u)), ~ (~ (0u)))))))), uvec4(subgroup_size, 0u, 0u, 0u), uvec4(subgroup_size, 0u, 0u, 0u)))) ^ uvec4(0u, 0u, 0u, 0u))))), (_GLF_IDENTITY((_GLF_struct_replacement_8._f4.subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_struct_replacement_8._f4.subgroup_local_id + 1), clamp((_GLF_IDENTITY(_GLF_struct_replacement_8._f4.subgroup_local_id + 1, (_GLF_struct_replacement_8._f4.subgroup_local_id + 1) | (_GLF_IDENTITY(_GLF_struct_replacement_8._f4.subgroup_local_id + 1, clamp(_GLF_struct_replacement_8._f4.subgroup_local_id + 1, _GLF_struct_replacement_8._f4.subgroup_local_id + 1, _GLF_struct_replacement_8._f4.subgroup_local_id + 1))))), _GLF_IDENTITY((_GLF_struct_replacement_8._f4.subgroup_local_id + 1), ((_GLF_struct_replacement_8._f4.subgroup_local_id + 1)) - 0u), (_GLF_struct_replacement_8._f4.subgroup_local_id + 1))) % subgroup_size, _GLF_IDENTITY(uint(uvec2((_GLF_struct_replacement_8._f4.subgroup_local_id + 1) % subgroup_size, 1u)), ~ (~ (uint(uvec2((_GLF_struct_replacement_8._f4.subgroup_local_id + 1) % subgroup_size, 1u))))))) | 0u, ((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_8._f4.subgroup_local_id, (_GLF_struct_replacement_8._f4.subgroup_local_id) | (_GLF_IDENTITY(_GLF_struct_replacement_8._f4.subgroup_local_id, (_GLF_struct_replacement_8._f4.subgroup_local_id) >> (_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))) | 0u, min(_GLF_IDENTITY(0u, ~ (~ (0u))) | 0u, _GLF_IDENTITY(0u, ~ (~ (0u))) | 0u)))))) + 1), clamp((_GLF_struct_replacement_8._f4.subgroup_local_id + 1), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_struct_replacement_8._f4.subgroup_local_id + 1), ((_GLF_struct_replacement_8._f4.subgroup_local_id + 1)) - 0u), (_GLF_IDENTITY((_GLF_struct_replacement_8._f4.subgroup_local_id + 1), ((_GLF_struct_replacement_8._f4.subgroup_local_id + 1)) - 0u)) + 0u), (_GLF_struct_replacement_8._f4.subgroup_local_id + 1))) % subgroup_size, uint(uvec2((_GLF_struct_replacement_8._f4.subgroup_local_id + _GLF_IDENTITY(1, 0 + (1))) % subgroup_size, 1u)))) | 0u) / 1u))))), ((_GLF_struct_replacement_8._f4.subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-43191) : 1)), 1))) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-43191) : 1)), 1))) | 0), 0 + (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-43191) : 1)), 1))) | 0)))) >> 0)) % subgroup_size)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         break;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))), bool(bvec4(false, false, true, true)))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true)) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false))))))))
        return;
      }
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (true ? _GLF_IDENTITY(int(7), (int(7)) >> 0) : _GLF_FUZZED(-92703))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, true, true), bvec3(bvec4(bvec3(injectionSwitch.x < injectionSwitch.y, true, true), false))))), bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, true, true), bvec3(bvec4(bvec3(injectionSwitch.x < injectionSwitch.y, true, true), false))))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, 0.0 + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)) : _GLF_FUZZED(dot(_GLF_IDENTITY(vec3(5.3, -88.77, -36.83), min(vec3(5.3, -88.77, -36.83), vec3(5.3, -88.77, -36.83))), vec3(-184.124, 0.8, -905.500)))), max((true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, 0.0 + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)) : _GLF_FUZZED(dot(_GLF_IDENTITY(vec3(5.3, -88.77, -36.83), min(vec3(5.3, -88.77, -36.83), vec3(5.3, -88.77, -36.83))), vec3(-184.124, 0.8, -905.500)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, 0.0 + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)) : _GLF_FUZZED(dot(_GLF_IDENTITY(vec3(5.3, -88.77, -36.83), min(vec3(5.3, -88.77, -36.83), vec3(5.3, -88.77, -36.83))), vec3(-184.124, 0.8, -905.500))))))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-215.497))))))).y))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false))))))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(34.79) : injectionSwitch.y)), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))));
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) - 0), (int(ivec2(1, 0))) | (int(_GLF_IDENTITY(ivec2(1, 0), clamp(ivec2(1, 0), ivec2(1, 0), ivec2(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(0, (false ? _GLF_FUZZED(11123) : 0)))))))))), ~ (~ ((_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) - 0), (int(ivec2(1, 0))) | (int(_GLF_IDENTITY(ivec2(1, 0), clamp(ivec2(1, 0), ivec2(1, 0), ivec2(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(0, (false ? _GLF_FUZZED(11123) : 0))))))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(1, _GLF_IDENTITY(0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0 : _GLF_FUZZED(-53637))))), (int(ivec2(1, 0))) - 0), (int(ivec2(1, 0))) | (int(_GLF_IDENTITY(ivec2(1, 0), clamp(ivec2(1, 0), ivec2(1, 0), ivec2(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(0, (false ? _GLF_FUZZED(11123) : 0)))))))))), ~ (~ ((_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) - 0), (_GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) - 0)) >> 0), (int(ivec2(1, 0))) | (int(_GLF_IDENTITY(ivec2(1, 0), clamp(ivec2(1, 0), ivec2(1, 0), ivec2(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(0, (false ? _GLF_FUZZED(11123) : 0)))))))))))))) - 0)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((-65522 + -13414)) : (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(_GLF_IDENTITY(1, 1 * (1)), 0))) - 0), (int(ivec2(1, 0))) | (int(_GLF_IDENTITY(ivec2(1, 0), clamp(ivec2(1, 0), ivec2(1, 0), ivec2(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(0, (false ? _GLF_FUZZED(11123) : 0)))))))))), ~ (~ ((_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) - 0), (int(ivec2(1, 0))) | (int(_GLF_IDENTITY(ivec2(1, 0), clamp(ivec2(1, 0), ivec2(1, 0), ivec2(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(0, (false ? _GLF_FUZZED(11123) : 0)))))))))))))))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED((-1376.7352 - 442.595)) : injectionSwitch.y))))))))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), cos(vec2(0.0, 0.0)) * ((injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), bool(_GLF_IDENTITY(bvec3(bool(bvec3(false, true, false)), false, true), bvec3(bvec3(bvec3(bool(bvec3(false, true, false)), false, true))))))), (injectionSwitch.x > injectionSwitch.y)))) || false)))) || false)))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat4x2(injectionSwitch[0], 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 1.0))), injectionSwitch[1])).x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     return;
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, bool(bvec4(false, true, false, false))))))) && true)))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-8.0))) > injectionSwitch.y))))
    barrier();
   if(_GLF_struct_replacement_8._f4.subgroup_local_id + 1 < subgroup_size)
    {
     int i = 0;
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        {
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         atomicStore(checker[_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, _GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))))], read, 4, 64, 4);
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-0.1), _GLF_FUZZED(-9.4)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(90.19) : injectionSwitch.x)))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! _GLF_IDENTITY((false), ((false)) && true), (! (false)) || false)) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).x, (_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).x) + 0.0) < injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
          return;
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec4(_GLF_DEAD(false), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-3.1)), vec2(_GLF_FUZZED((+ 7029.6471)), (injectionSwitch)[1]), bvec2(false, true))))).x, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-3.1)), vec2(_GLF_FUZZED((+ 7029.6471)), (injectionSwitch)[1]), bvec2(false, true))))).x : _GLF_FUZZED(float(workgroup_id)))) > injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true), false || (_GLF_IDENTITY(! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! ((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) || false)))))), (! _GLF_IDENTITY(((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) && true))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! _GLF_IDENTITY(((_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_IDENTITY(((_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), (((_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && true)) || false), (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))), true, true), true))))) || false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), false || (bool(bvec2(false, false))))), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
          barrier();
        }
      }
     atomicStore(checker[virtual_gid], read, 4, 64, 4);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) ^ 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), sqrt(1.0), 1.0, exp(0.0), 1.0, 0.0)), mix(float(_GLF_FUZZED(7.1)), float(float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), sqrt(1.0), 1.0, exp(0.0), 1.0, 0.0))), bool(true)))) > injectionSwitch.y))))
        barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, false, true))))), (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, true)))))
      barrier();
     return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(exp2(injectionSwitch)) : injectionSwitch)).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(exp2(injectionSwitch)) : injectionSwitch)).y))))))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), true && ((_GLF_IDENTITY(false, (false) || false)))) && true)))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) << _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) * 1))); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false), false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0, 0.0)), min(float(vec4(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0, 0.0)), float(vec4(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0, 0.0))))) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 1.0, 1.0))) > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), false || (_GLF_IDENTITY(false, bool(bool(false)))))))
          barrier();
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), bool(bvec3((_GLF_DEAD(false)), true, true))))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mat2(1.0) * (mat2(1.0) * (injectionSwitch)))).y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), (_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), false, true, true)))) || false)), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(ivec4(int(5), 0, 1, 1))), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         return;
        }
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) : _GLF_FUZZED(-8.1))) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(7.4)), bool(false))), injectionSwitch.y))))))), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), ! (! (false)))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
