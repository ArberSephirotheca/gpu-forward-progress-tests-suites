#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_18 {
 uvec4 _f0;
 mat4 _f1;
 uvec4 _f2;
 bvec2 _f3;
 vec3 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_17 {
 mat3x2 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_16 {
 mat2x3 _f0;
} ;

struct _GLF_struct_15 {
 bvec2 _f0;
} ;

struct _GLF_struct_19 {
 vec2 _f0;
 mat3x4 _f1;
 _GLF_struct_15 _f2;
 _GLF_struct_16 _f3;
 _GLF_struct_17 _f4;
 bool _f5;
 _GLF_struct_18 _f6;
} ;

struct _GLF_struct_13 {
 mat4x3 _f0;
 bvec3 _f1;
 vec3 _f2;
 uvec3 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_14 {
 bvec3 _f0;
 _GLF_struct_13 _f1;
} ;

struct _GLF_struct_11 {
 vec2 _f0;
 mat3x2 _f1;
 bool _f2;
 uvec4 _f3;
 bool _f4;
 mat2x3 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_10 {
 mat4x3 _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_9 {
 ivec3 _f0;
 mat3x4 _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_8 {
 mat2x4 _f0;
} ;

struct _GLF_struct_12 {
 ivec2 _f0;
 _GLF_struct_8 _f1;
 mat3 _f2;
 _GLF_struct_9 _f3;
 _GLF_struct_10 _f4;
 _GLF_struct_11 _f5;
} ;

struct _GLF_struct_20 {
 _GLF_struct_12 _f0;
 _GLF_struct_14 _f1;
 mat4 _f2;
 uvec3 GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadvirtual_gid;
 mat3x2 _f3;
 _GLF_struct_19 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_7 {
 mat3 _f0;
 int _f1;
 mat2x4 _f2;
 uint num_workgroup;
} ;

struct _GLF_struct_4 {
 uvec3 _f0;
} ;

struct _GLF_struct_3 {
 mat4 _f0;
 mat4 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_5 {
 _GLF_struct_3 _f0;
 mat4 _f1;
 _GLF_struct_4 _f2;
} ;

struct _GLF_struct_1 {
 vec2 _f0;
 bvec4 _f1;
 mat2x4 _f2;
 vec3 _f3;
 mat4x3 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_0 {
 uvec2 _f0;
 mat2x3 _f1;
 vec2 _f2;
 ivec4 _f3;
 mat4 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
} ;

struct _GLF_struct_6 {
 ivec2 _f0;
 _GLF_struct_2 _f1;
 uint workgroup_size;
 _GLF_struct_5 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base;
 _GLF_struct_20 _GLF_struct_replacement_20;
 uvec4 GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_base;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.x = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.z = subgroup_size;
 GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_base.y = GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.z;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.y = subgroup_local_id;
 GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_base.x = GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.y;
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(mat3(1.0), 1, mat2x4(1.0), gl_NumWorkGroups.x);
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(ivec2(1), _GLF_struct_2(_GLF_struct_0(uvec2(1u), mat2x3(1.0), vec2(1.0), ivec4(1), mat4(1.0), uvec3(1u)), _GLF_struct_1(vec2(1.0), bvec4(true), mat2x4(1.0), vec3(1.0), mat4x3(1.0), vec4(1.0))), gl_WorkGroupSize.x, _GLF_struct_5(_GLF_struct_3(mat4(1.0), mat4(1.0), bvec4(true)), mat4(1.0), _GLF_struct_4(uvec3(1u))));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = _GLF_struct_replacement_6.workgroup_size * workgroup_id;
 GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.w = workgroup_base;
 GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_base.w = GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.w;
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_base.w + GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.x * GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_base.y + GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_base.x;
 _GLF_struct_replacement_20.GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadvirtual_gid.z = virtual_gid;
 GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_base.z = _GLF_struct_replacement_20.GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadvirtual_gid.z;
 uint next_virtual_gid = GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_base.w + GLF_merged4_0_1_11_1_1_17_2_1_13_3_1_14subgroup_idsubgroup_local_idsubgroup_sizeworkgroup_base.x * GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_base.y + ((GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_base.x + 1) % GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_base.y);
 _GLF_struct_replacement_20.GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadvirtual_gid.x = next_virtual_gid;
 uint read = atomicLoad(buf[GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_base.z], 4, 64, 0);
 _GLF_struct_replacement_20.GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadvirtual_gid.y = read;
 atomicStore(buf[_GLF_struct_replacement_20.GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadvirtual_gid.x], uint(1), 4, 64, 4);
 if(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_base.x + 1 < GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_base.y)
  {
   if(_GLF_DEAD(false))
    barrier();
   int i = 0;
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(checker[GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_base.z], _GLF_struct_replacement_20.GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadvirtual_gid.y, 4, 64, 4);
  }
 else
  {
   atomicStore(checker[GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_base.z], _GLF_struct_replacement_20.GLF_merged3_0_1_16_1_1_4_2_1_11next_virtual_gidreadvirtual_gid.y, 4, 64, 4);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
