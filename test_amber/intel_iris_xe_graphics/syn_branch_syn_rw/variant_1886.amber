#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid;
 uvec4 GLF_merged2_0_3_72_3_1_14GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size;
 uvec4 GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_12num_workgroupsubgroup_sizevirtual_gidworkgroup_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uvec4 GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id;
 uvec4 GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup;
 uvec2 GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id;
 GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy = GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id;
 uvec4 GLF_merged2_0_3_72_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uvec3 GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_size;
 for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((4.0 + 2.4))), float(0.0), bool(true))), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz = _GLF_IDENTITY(GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_size, (_GLF_IDENTITY(GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_size, (false ? _GLF_FUZZED(uvec3(80209u, 96813u, 77753u)) : GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_size))) ^ uvec3(0u, 0u, 0u));
  }
 uvec2 GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid;
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.zw = GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), max(int(6), int(6))), (_GLF_IDENTITY(int(6), max(int(6), int(6)))) / ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4)))))), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))));
    }
   _GLF_IDENTITY(GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz.xy = GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.zw, _GLF_IDENTITY((GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz.xy = GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.zw), (true ? (GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz.xy = GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.zw) : _GLF_FUZZED(uvec2(154566u, 50707u)))) - uvec2(0u, 0u));
  }
 uvec2 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base;
 if(_GLF_DEAD(false))
  barrier();
 uvec3 GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))
  barrier();
 GLF_merged2_0_3_72_3_1_14GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.xyz = GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_size;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bvec3(bool(false), false, false)), ! (! (_GLF_IDENTITY(bool(bvec3(bool(false), false, false)), bool(bvec2(bool(bvec3(bool(false), false, false)), false)))))))), (bool(bool(false))) && true))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) + 0), 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _injected_loop_counter -- : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(-26698) : _injected_loop_counter --))) << 0)), 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _injected_loop_counter -- : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(-26698) : _injected_loop_counter --))) << 0)), ((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _injected_loop_counter -- : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(-26698) : _injected_loop_counter --))) << 0))) >> 0))))))
  {
   do
    {
     GLF_merged2_0_3_72_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid.xyz = GLF_merged2_0_3_72_3_1_14GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.xyz;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), false || (_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            {
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id.x = subgroup_id;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 do
  {
   do
    {
     GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.x = _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id.x, (GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id.x) >> 0u);
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(66547) : 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       GLF_merged2_0_3_72_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid.xyz.y = GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.x;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_12num_workgroupsubgroup_sizevirtual_gidworkgroup_id.y = subgroup_size;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), false))))
      {
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) || false)); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
  }
 else
  {
  }
 _GLF_IDENTITY(GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz.z = GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_12num_workgroupsubgroup_sizevirtual_gidworkgroup_id.y, (GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz.z = _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_12num_workgroupsubgroup_sizevirtual_gidworkgroup_id, ~ (~ (GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_12num_workgroupsubgroup_sizevirtual_gidworkgroup_id))).y) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY(clamp(_GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY(uint(7u), uint(7u))), min(clamp(_GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY(uint(7u), uint(7u))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY(uint(7u), uint(7u))), clamp(clamp(_GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY(uint(7u), uint(7u))), clamp(_GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY(uint(7u), uint(7u))), clamp(_GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY(uint(7u), uint(7u)))))))))), 0u + (_GLF_IDENTITY(uint(7u), uint(7u))))) >> _GLF_IDENTITY(uint(7u), uint(7u))));
 _GLF_IDENTITY(GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz.xy.x = GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz.z, 1u * (_GLF_IDENTITY(GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz.xy.x = GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz.z, (GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz.xy.x = GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz.z) / 1u)));
 GLF_merged2_0_3_72_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid.xyz.z = _GLF_IDENTITY(GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz.xy, ~ (~ (_GLF_IDENTITY(GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz.xy, uvec2(0u, 0u) + (GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz.xy))))).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY((1 & 1), clamp((1 & 1), _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1) & 1), max((_GLF_IDENTITY(1 & 1, (1 & 1) | (1 & 1))), (1 & 1))), _GLF_IDENTITY((1 & _GLF_IDENTITY(1, ((((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) * (1))), 0 ^ ((1 & 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = ((_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, int(ivec3(0, 1, 1))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), clamp(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))), _GLF_IDENTITY(int(3), min(int(3), int(3))))), int(3))) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))) || false)))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
     for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), int(ivec2(_GLF_IDENTITY(int(1), int(1)), 1)))))) ^ 0, 0 + (_GLF_IDENTITY(((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), int(ivec2(_GLF_IDENTITY(int(1), int(1)), 1)))))) ^ 0, 1 * (((_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), ((1) | (1)) / int(_GLF_ONE(1.0, injectionSwitch.y)))) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) | 0)) >> 0), int(1)), 1)))))) ^ 0))))), clamp((_GLF_IDENTITY(((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), int(ivec2(_GLF_IDENTITY(int(1), int(1)), 1)))))) ^ 0, 0 + (_GLF_IDENTITY(((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), int(ivec2(_GLF_IDENTITY(int(1), int(1)), 1)))))) ^ 0, 1 * (((_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), ((1) | (1)) / int(_GLF_ONE(1.0, injectionSwitch.y)))) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) | 0)) >> 0), int(1)), 1)))))) ^ 0))))), (_GLF_IDENTITY(((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), int(ivec2(_GLF_IDENTITY(int(1), int(1)), 1)))))) ^ 0, 0 + (_GLF_IDENTITY(((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), int(ivec2(_GLF_IDENTITY(int(1), int(1)), 1)))))) ^ 0, 1 * (((_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), ((1) | (1)) / int(_GLF_ONE(1.0, injectionSwitch.y)))) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) | 0)) >> 0), int(1)), 1)))))) ^ 0))))), _GLF_IDENTITY((_GLF_IDENTITY(((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), int(ivec2(_GLF_IDENTITY(int(1), int(1)), 1)))))) ^ 0, 0 + (_GLF_IDENTITY(((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), int(ivec2(_GLF_IDENTITY(int(1), int(1)), 1)))))) ^ 0, 1 * (((_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), ((1) | (1)) / int(_GLF_ONE(1.0, injectionSwitch.y)))) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) | 0)) >> 0), int(1)), 1)))))) ^ 0))))), ((_GLF_IDENTITY(((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), int(ivec2(_GLF_IDENTITY(int(1), int(1)), 1)))))) ^ 0, 0 + (_GLF_IDENTITY(((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), int(ivec2(_GLF_IDENTITY(int(1), int(1)), 1)))))) ^ 0, 1 * (((_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), ((1) | (1)) / int(_GLF_ONE(1.0, injectionSwitch.y)))) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) | 0)) >> 0), int(1)), 1)))))) ^ 0)))))) << 0))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true, true), bvec3(bvec3(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true, _GLF_IDENTITY(true, (true) || false)))))), false || (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) && true)), true, true), bvec3(bvec3(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) && true)), true, true)))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))) > 0), true, true)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))) > 0), true, true)), bvec3(bvec3(bvec3(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))) > 0), true, true))))), false))))))))))); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, (true) && true), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) && ((injectionSwitch.x > injectionSwitch.y))))))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (_GLF_IDENTITY(false, true && (false))))));
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y)) > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), false || (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y))))))))))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
        }
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6.6) : injectionSwitch.y))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 1.0, tan(determinant(mat2(0.0, 0.0, 1.0, 0.0))), determinant(mat4(1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, length(0.0), 0.0, 1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), log(1.0), 0.0, 1.0))))) > injectionSwitch.y))))))
    barrier();
   barrier();
  }
 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x = subgroup_local_id;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_12num_workgroupsubgroup_sizevirtual_gidworkgroup_id.x = num_workgroup;
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.w = GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_12num_workgroupsubgroup_sizevirtual_gidworkgroup_id.x;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.5), _GLF_IDENTITY(_GLF_FUZZED(float(false)), (false ? _GLF_FUZZED(-477.917) : _GLF_FUZZED(float(false))))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y) && true)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 GLF_merged2_0_3_72_3_1_14GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.w = _GLF_IDENTITY(workgroup_size, 0u | (_GLF_IDENTITY(workgroup_size, ~ (~ (workgroup_size)))));
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_12num_workgroupsubgroup_sizevirtual_gidworkgroup_id.w = workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id.w = GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_12num_workgroupsubgroup_sizevirtual_gidworkgroup_id.w;
 GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y = GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id.w;
 uint workgroup_base = _GLF_IDENTITY(GLF_merged2_0_3_72_3_1_14GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.w * _GLF_IDENTITY(GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y, uint(uvec4(_GLF_IDENTITY(GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y, clamp(GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y, GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y, GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y)), 0u, 0u, 0u))), (_GLF_IDENTITY(GLF_merged2_0_3_72_3_1_14GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.w * GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y, _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)) * _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_3_72_3_1_14GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.w * GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y, ~ (~ _GLF_IDENTITY((GLF_merged2_0_3_72_3_1_14GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.w * _GLF_IDENTITY(GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y, (GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y) ^ 0u)), 0u ^ ((GLF_merged2_0_3_72_3_1_14GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.w * _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, (_GLF_IDENTITY(GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, min(GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid, GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid))) ^ uvec4(0u, 0u, 0u, 0u)).xy.y, (GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y) ^ 0u))))))), min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_72_3_1_14GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.w * GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y, ~ (~ _GLF_IDENTITY((GLF_merged2_0_3_72_3_1_14GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.w * _GLF_IDENTITY(GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y, (GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y) ^ 0u)), 0u ^ ((GLF_merged2_0_3_72_3_1_14GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.w * _GLF_IDENTITY(GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y, (GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y) ^ 0u)))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_72_3_1_14GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.w * GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y, ~ (~ _GLF_IDENTITY((GLF_merged2_0_3_72_3_1_14GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.w * _GLF_IDENTITY(GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y, (GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y) ^ 0u)), 0u ^ ((GLF_merged2_0_3_72_3_1_14GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.w * _GLF_IDENTITY(GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y, (GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y) ^ 0u)))))), (_GLF_IDENTITY(GLF_merged2_0_3_72_3_1_14GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.w * GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y, ~ (~ _GLF_IDENTITY((GLF_merged2_0_3_72_3_1_14GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.w * _GLF_IDENTITY(GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y, (GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y) ^ 0u)), 0u ^ ((GLF_merged2_0_3_72_3_1_14GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.w * _GLF_IDENTITY(GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y, (GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y) ^ 0u))))))) | (_GLF_IDENTITY(GLF_merged2_0_3_72_3_1_14GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.w * GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y, ~ (~ _GLF_IDENTITY((GLF_merged2_0_3_72_3_1_14GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.w * _GLF_IDENTITY(GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y, (GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y) ^ 0u)), 0u ^ ((GLF_merged2_0_3_72_3_1_14GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.w * _GLF_IDENTITY(GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y, (GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y) ^ 0u))))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_72_3_1_14GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size, (false ? _GLF_FUZZED(uvec4(15547u, 162293u, 31469u, 119096u)) : GLF_merged2_0_3_72_3_1_14GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size)).w * GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y, ~ (~ _GLF_IDENTITY((GLF_merged2_0_3_72_3_1_14GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.w * _GLF_IDENTITY(GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y, (_GLF_IDENTITY(GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy, ~ (_GLF_IDENTITY(~ (GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy), (true ? ~ (GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy) : _GLF_FUZZED(GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid))))).y) ^ 0u)), 0u ^ ((GLF_merged2_0_3_72_3_1_14GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.w * _GLF_IDENTITY(GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y, (GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y) ^ 0u)))))))) | 0u), (_GLF_IDENTITY(GLF_merged2_0_3_72_3_1_14GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.w * GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y, ~ (~ _GLF_IDENTITY((GLF_merged2_0_3_72_3_1_14GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.w * _GLF_IDENTITY(GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y, (_GLF_IDENTITY(GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy, (true ? GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy : _GLF_FUZZED(uvec2(187814u, 57772u)))).y) ^ 0u)), 0u ^ ((_GLF_IDENTITY(GLF_merged2_0_3_72_3_1_14GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.w, (false ? _GLF_FUZZED(106567u) : _GLF_IDENTITY(GLF_merged2_0_3_72_3_1_14GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.w, max(GLF_merged2_0_3_72_3_1_14GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.w, GLF_merged2_0_3_72_3_1_14GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizeworkgroup_size.w)))) * _GLF_IDENTITY(GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y, (GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.xy.y) ^ 0u))))))))))) / _GLF_IDENTITY(1u, (1u) | 0u));
 GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id.z = workgroup_base;
 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y = GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id.z;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6)))))) > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec2(bvec2(_GLF_DEAD(false), true)))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(true, false || (true)))))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false)))))))
                barrier();
              }
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, true, false))))))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y + GLF_merged2_0_3_72_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid.xyz.y * GLF_merged2_0_3_72_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid.xyz.z, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y + GLF_merged2_0_3_72_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid.xyz.y * GLF_merged2_0_3_72_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid.xyz.z) >> _GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, (0u) << _GLF_IDENTITY(0u, (0u) ^ ((1u ^ 1u) >> _GLF_IDENTITY(uint(5u), uint(5u)))))))) + GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x;
 GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_12num_workgroupsubgroup_sizevirtual_gidworkgroup_id.z = virtual_gid;
 GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id.y = GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_12num_workgroupsubgroup_sizevirtual_gidworkgroup_id.z;
 GLF_merged2_0_3_72_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid.w = GLF_merged4_0_1_11_1_1_11_2_1_14_3_1_12subgroup_idvirtual_gidworkgroup_baseworkgroup_id.y;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz.xy.y = GLF_merged2_0_3_72_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid.w;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, false)))))))
    {
    }
   else
    {
     barrier();
    }
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(0, int(int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), (bool(bool((injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), ! (! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), bool(bvec3(((injectionSwitch.x > injectionSwitch.y)), false, false))), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))), ! (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y)))))))))))))), (! (! (! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))) && true)))))), false, false, false)))) && true))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base) + _GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, 1u * _GLF_IDENTITY((0u), (1u & 1u) * ((0u))))), (uvec2(0u, _GLF_IDENTITY(0u, 1u * (0u)))) | (uvec2(0u, _GLF_IDENTITY(0u, 1u * (0u)))))).y, (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base) + _GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, 1u * _GLF_IDENTITY((0u), (1u & 1u) * ((0u))))), (uvec2(0u, _GLF_IDENTITY(0u, 1u * (0u)))) | (uvec2(0u, _GLF_IDENTITY(0u, 1u * (0u)))))).y) | 0u), (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y) | (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.y)) + GLF_merged2_0_3_72_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid.xyz.y * GLF_merged2_0_3_72_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid.xyz.z + _GLF_IDENTITY(((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x, min(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x, GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x)) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec2(1, 1)))) / _GLF_IDENTITY(1, ~ (~ (1))))) % _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_72_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid, (GLF_merged2_0_3_72_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid) * uvec4(1u, 1u, 1u, 1u)).xyz, uvec3(1u, 1u, 1u) * (GLF_merged2_0_3_72_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid.xyz)).z), max(((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x, min(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x, GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x)) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec2(1, 1)))) / _GLF_IDENTITY(1, ~ (~ (1))))) % _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_72_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid, (GLF_merged2_0_3_72_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid) * uvec4(1u, 1u, 1u, 1u)).xyz, uvec3(1u, 1u, 1u) * (GLF_merged2_0_3_72_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid.xyz)).z), ((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x, min(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x, GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x)) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec2(1, 1)))) / _GLF_IDENTITY(1, ~ (~ (1))))) % _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_72_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid, (GLF_merged2_0_3_72_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid) * uvec4(1u, 1u, 1u, 1u)).xyz, uvec3(1u, 1u, 1u) * (GLF_merged2_0_3_72_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid.xyz)).z)));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
  {
  }
 else
  {
   GLF_merged2_0_3_72_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid.xyz.x = next_virtual_gid;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint read = atomicLoad(buf[GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz.xy.y], 4, 64, _GLF_IDENTITY(0, (0) << 0));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, (1) | (1)))) & _GLF_IDENTITY(1, (1) << 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, true))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_72_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid.xyz.x, (1u ^ 1u) ^ (GLF_merged2_0_3_72_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid.xyz.x)), _GLF_IDENTITY((GLF_merged2_0_3_72_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid.xyz.x) - 0u, uint(uvec2(_GLF_IDENTITY((GLF_merged2_0_3_72_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid.xyz.x) - 0u, (false ? _GLF_FUZZED(workgroup_base) : (GLF_merged2_0_3_72_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid.xyz.x) - 0u)), (0u << _GLF_IDENTITY(uint(5u), uint(5u)))))))], uint(1), 4, 64, 4);
  }
 else
  {
  }
 do
  {
   if(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_base.x + _GLF_IDENTITY(1, max(1, 1)) < GLF_merged2_0_3_72_3_1_11GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid.xyz.z)
    {
     int i = 0;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), (true ? injectionSwitch.x : _GLF_FUZZED(-3.3))) < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x), (clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), clamp(min(injectionSwitch.x, injectionSwitch.x), _GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), (min(injectionSwitch.x, injectionSwitch.x)) - 0.0), min(injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x)) / 1.0)), injectionSwitch.x)), (true ? injectionSwitch.x : _GLF_FUZZED(-3.3))) < injectionSwitch.y) && true)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, 0 + (0))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       do
        {
         atomicStore(checker[_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz.xy, (GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz.xy) >> (uvec2(0u, 0u) >> _GLF_IDENTITY(_GLF_IDENTITY(uvec2(5u), ~ (~ (uvec2(5u)))), uvec2(5u)))).y, 1u * _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup, (GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup) << uvec4(0u, 0u, 0u, 0u)).xyz.xy.y), (_GLF_IDENTITY(true ? (GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz.xy.y) : _GLF_FUZZED(read), max(true ? (GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz.xy.y) : _GLF_FUZZED(read), true ? (GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz.xy.y) : _GLF_FUZZED(read))))), _GLF_IDENTITY(min((GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz.xy.y), (GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz.xy.y)), ~ (~ (min((_GLF_IDENTITY(GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz, (true ? GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz : _GLF_FUZZED(GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_size))).xy.y), (GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz.xy.y))))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz, min(_GLF_IDENTITY(GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz, (GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz) << uvec3(0u, 0u, 0u)), _GLF_IDENTITY(GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz, max(GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz, _GLF_IDENTITY(GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup, (GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup) << uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).xyz)))).xy.y, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(virtual_gid))) * _GLF_IDENTITY((GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz.xy.y), 0u ^ (_GLF_IDENTITY((GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz.xy.y), max((GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz.xy.y), (_GLF_IDENTITY(GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz.xy, (GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz.xy) >> (uvec2(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) + 0.0))), _GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uvec2(2u), uvec2(2u)))).y)))))) : _GLF_FUZZED(GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_12num_workgroupsubgroup_sizevirtual_gidworkgroup_id.y)))], read, 4, _GLF_IDENTITY(64, (64) / 1), 4);
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
        barrier();
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), true && (_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x))))); _injected_loop_counter --)
              {
               atomicStore(checker[_GLF_IDENTITY(GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz, (_GLF_IDENTITY(false ? _GLF_FUZZED((~ GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_size)) : GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz, uvec3(0u, 0u, 0u) | (false ? _GLF_FUZZED((~ GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_size)) : GLF_merged2_0_3_87_3_1_13GLF_merged2_0_2_49_2_1_13GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidsubgroup_sizenum_workgroup.xyz)))).xy.y], read, 4, 64, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(4, (4) ^ 0)) / 1, (false ? _GLF_FUZZED(int(false)) : (_GLF_IDENTITY(4, (4) ^ 0)) / 1)))) >> 0));
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-83.67) : injectionSwitch.y)), injectionSwitch.y)))), ! (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)))))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))));
              }
             else
              {
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true))))))))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
        }
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))), true, false))), false, false))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), _GLF_IDENTITY(int(1), (int(1)) / 1))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), false)))))))))
                barrier();
              }
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), (bool(bool((injectionSwitch.x > injectionSwitch.y)))) || false)))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false)))))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false))))), ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false))))))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 | 1), (_injected_loop_counter != (0 | 1)) && true)); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, ! (! (_injected_loop_counter != 1)))), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false, _GLF_IDENTITY(false, ! (! (false))), true))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_IF_FALSE(false))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
               for(int _injected_loop_counter = _GLF_IDENTITY(1, int(ivec3(1, 0, (0 >> _GLF_IDENTITY(int(5), int(5)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, int(int(0)))); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                  barrier();
                }
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, true, _GLF_IDENTITY(false, ! (! (false))))), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false), false, true, false)), ! _GLF_IDENTITY(_GLF_IDENTITY((! (bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, true, false)))), ! (! (_GLF_IDENTITY((! (bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, true, false)))), ((! (bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, true, false))))) && true)))), ((! (bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, true, false))))) || false))) || false)))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec3((false), true, true))), false || (_GLF_IDENTITY((false), bool(bvec3((false), true, true))))) && true)));
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
