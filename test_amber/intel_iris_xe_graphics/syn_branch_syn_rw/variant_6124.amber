#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
  return;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(6))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))) && true); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        continue;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
            {
            }
           else
            {
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        continue;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     break;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))
          continue;
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-8.0)), bool(false))), _GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 0.0, 0.0, 1.0))), injectionSwitch.x)) > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))));
  }
 else
  {
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false)))))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        return;
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
          return;
         return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(108052u, _GLF_IDENTITY((_GLF_IDENTITY(108052u, 0u + (108052u))) | (108052u), clamp((_GLF_IDENTITY(108052u, 0u + (108052u))) | (108052u), (_GLF_IDENTITY(108052u, 0u + (108052u))) | (108052u), (_GLF_IDENTITY(108052u, 0u + (108052u))) | (108052u)))), 16148u, 30894u), (uvec3(_GLF_IDENTITY(108052u, _GLF_IDENTITY((_GLF_IDENTITY(108052u, 0u + (108052u))) | (108052u), clamp((_GLF_IDENTITY(108052u, 0u + (108052u))) | (108052u), (_GLF_IDENTITY(108052u, 0u + (108052u))) | (108052u), (_GLF_IDENTITY(108052u, 0u + (108052u))) | (108052u)))), 16148u, 30894u)) << (uvec3(0u, 0u, 0u) ^ uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), clamp(uvec3(_GLF_IDENTITY(108052u, (_GLF_IDENTITY(108052u, 0u + (108052u))) | (108052u)), _GLF_IDENTITY(16148u, ~ (_GLF_IDENTITY(~ (16148u), uint(uvec2(~ (16148u), 0u))))), 30894u), uvec3(_GLF_IDENTITY(108052u, _GLF_IDENTITY((_GLF_IDENTITY(108052u, 0u + _GLF_IDENTITY((108052u), (true ? (108052u) : _GLF_FUZZED(subgroup_local_id))))), (false ? _GLF_FUZZED((171364u * subgroup_size)) : (_GLF_IDENTITY(108052u, 0u + _GLF_IDENTITY((108052u), (true ? (108052u) : _GLF_FUZZED(subgroup_local_id))))))) | (108052u)), 16148u, 30894u), uvec3(_GLF_IDENTITY(108052u, (_GLF_IDENTITY(108052u, 0u + (108052u))) | (108052u)), 16148u, 30894u)))), uvec3(0u, 0u, 0u) | (_GLF_FUZZED(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(108052u, (_GLF_IDENTITY(108052u, 0u + (108052u))) | (108052u)), 16148u, _GLF_IDENTITY(_GLF_IDENTITY(30894u, min(30894u, 30894u)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_size) : 30894u))), clamp(uvec3(_GLF_IDENTITY(108052u, (_GLF_IDENTITY(108052u, 0u + (108052u))) | (108052u)), 16148u, 30894u), uvec3(_GLF_IDENTITY(108052u, (_GLF_IDENTITY(108052u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))) + _GLF_IDENTITY(_GLF_IDENTITY((108052u), uint(_GLF_IDENTITY(uvec2((108052u), 0u), (uvec2((108052u), 0u)) - uvec2(0u, 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY((108052u), ((108052u)) | (_GLF_IDENTITY((108052u), min((108052u), (108052u))))), uint(_GLF_IDENTITY(uvec2((108052u), 0u), (uvec2((108052u), 0u)) - uvec2(0u, 0u))))) / (1u ^ 0u)))) | (108052u)), 16148u, _GLF_IDENTITY(30894u, (30894u) | (30894u))), uvec3(_GLF_IDENTITY(108052u, (_GLF_IDENTITY(_GLF_IDENTITY(108052u, 0u + (108052u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(108052u, 0u + (108052u))))) | (108052u)), 16148u, 30894u)))))) : gl_WorkGroupID)).x;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), int(ivec3(_GLF_IDENTITY(int(1), 0 | (int(1))), 1, 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
            }
          }
         return;
        }
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   return;
   for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)) != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       do
        {
         return;
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) | (workgroup_base), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY((workgroup_base) | (workgroup_base), min((workgroup_base) | (workgroup_base), (workgroup_base) | (workgroup_base)))))) + subgroup_id * subgroup_size, uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(workgroup_base + subgroup_id * subgroup_size, 0u), min(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u) + subgroup_id * subgroup_size, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u) + subgroup_id * subgroup_size, 0u, 0u), clamp(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u) + subgroup_id * subgroup_size, 0u, _GLF_IDENTITY(0u, max(0u, 0u))), uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u) + subgroup_id * subgroup_size, 0u, 0u), uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u) + subgroup_id * subgroup_size, 0u, 0u))))), 0u), uvec2(workgroup_base + subgroup_id * subgroup_size, 0u))), _GLF_IDENTITY((uvec2(workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))), min(subgroup_size, subgroup_size)), 0u)), ((uvec2(workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))), min(subgroup_size, subgroup_size)), 0u))) * (uvec2(0u, 0u) ^ uvec2(1u, 1u))) ^ _GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) | uvec2(0u, 0u))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 0u + (subgroup_size)), 0u), min(uvec2(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, 0u | (subgroup_id * subgroup_size)), 0u), uvec2(workgroup_base + subgroup_id * subgroup_size, 0u))), (uvec2(workgroup_base + subgroup_id * subgroup_size, 0u)) ^ uvec2(0u, 0u))))))) + _GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)) + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))) * subgroup_size, (subgroup_id * subgroup_size) << 0u)) | (subgroup_id * subgroup_size)), uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(workgroup_base + subgroup_id * subgroup_size, 0u), min(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u) + subgroup_id * subgroup_size, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) << 0u, uint(_GLF_IDENTITY(uint((workgroup_base) << 0u), clamp(uint((workgroup_base) << 0u), uint((workgroup_base) << 0u), uint((workgroup_base) << 0u)))))) + subgroup_id * subgroup_size, 0u, 0u), clamp(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u) + subgroup_id * subgroup_size, 0u, 0u), uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u) + subgroup_id * subgroup_size, 0u, 0u), uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u) + subgroup_id * subgroup_size, 0u, 0u))))), 0u), uvec2(workgroup_base + subgroup_id * subgroup_size, 0u))), (uvec2(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))) + subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), _GLF_IDENTITY(0u, max(0u, 0u)))) ^ uvec2(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(uvec4(14545u, 191571u, 156236u, 139582u)[0]))), 0u)), 0u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(workgroup_base + subgroup_id * subgroup_size, 0u), min(uvec2(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, 0u | (subgroup_id * subgroup_size)), 0u), uvec2(_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, uint(uint(workgroup_base))), workgroup_base, workgroup_base)) + subgroup_id * subgroup_size, 0u))), (uvec2(workgroup_base + subgroup_id * subgroup_size, 0u)) ^ uvec2(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(0u, (0u) / 1u)))))))))) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))))))))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), (false ? _GLF_FUZZED(workgroup_id) : ~ _GLF_IDENTITY((workgroup_base), min(_GLF_IDENTITY((workgroup_base), 0u | ((workgroup_base))), _GLF_IDENTITY((workgroup_base), clamp((workgroup_base), (workgroup_base), (workgroup_base))))))), (~ _GLF_IDENTITY((workgroup_base), uint(uint((workgroup_base))))) | 0u)), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | _GLF_IDENTITY(0u, (0u) ^ 0u)))))), ((_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY((~ (workgroup_base)) | 0u, ((~ (workgroup_base)) | 0u) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))))) - 0u), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_base), uint(_GLF_IDENTITY(uvec2((workgroup_base), (0u << _GLF_IDENTITY(uint(7u), uint(7u)))), (uvec2((workgroup_base), (0u << _GLF_IDENTITY(uint(7u), uint(7u))))) / uvec2(1u, 1u)))), (~ (workgroup_base)) | 0u)), (true ? (_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_base), uint(_GLF_IDENTITY(uvec2((workgroup_base), (0u << _GLF_IDENTITY(uint(7u), uint(7u)))), (uvec2((workgroup_base), (0u << _GLF_IDENTITY(uint(7u), uint(7u))))) / _GLF_IDENTITY(uvec2(1u, 1u), (_GLF_IDENTITY(uvec2(1u, 1u), max(uvec2(1u, 1u), _GLF_IDENTITY(uvec2(1u, 1u), (uvec2(1u, 1u)) << uvec2(0u, 0u))))) - uvec2(0u, 0u))))), (~ (workgroup_base)) | 0u)) : _GLF_FUZZED(workgroup_size))), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY((~ (workgroup_base)) | 0u, ((~ (workgroup_base)) | 0u) ^ 0u)))))), ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))) - 0u), (~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, 0u ^ (_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base))))) >> 0u)), (~ (workgroup_base)) | 0u)), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))))), ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))) - 0u)) >> _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (0u) | (0u)), 0u, 0u)))), (~ (_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (_GLF_IDENTITY(~ (workgroup_base), 0u + (~ (workgroup_base)))) | 0u)), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | _GLF_IDENTITY(0u, (0u) | (0u))))))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)), ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))) << 0u))))), (((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)))) >> 0u) - 0u), (~ _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)), ~ (~ ((_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), max((workgroup_base), (workgroup_base)))) | (_GLF_IDENTITY((workgroup_base), (true ? (workgroup_base) : _GLF_FUZZED(virtual_gid))))), _GLF_IDENTITY(_GLF_IDENTITY((~ (workgroup_base)), 1u * ((~ (workgroup_base)))), ((~ (workgroup_base))) << 0u) | 0u))))), min(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)), _GLF_IDENTITY((~ (_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))), max((~ (_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))), (~ (_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))))) - 0u)))), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))))), _GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))))))), _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))), ~ (~ (_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | _GLF_IDENTITY(0u, 0u ^ (0u))))), (((_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY(uint(uvec3(~ (workgroup_base), 1u, 0u)), min(uint(uvec3(~ (workgroup_base), 1u, 0u)), uint(uvec3(~ (_GLF_IDENTITY(workgroup_base, uint(uint(workgroup_base)))), 1u, 0u))))), (~ _GLF_IDENTITY((workgroup_base), ((workgroup_base)) >> 0u)) | 0u)))) / 1u)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))), ~ (~ (_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))), (((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)))) / 1u))))), 0u + (~ (_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))), (((_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u), uint(uvec3(_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u), 1u, 1u)))))) / 1u))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))), (((_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u), (true ? _GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_base), ~ (~ ((workgroup_base)))), (~ (workgroup_base)) | 0u) : _GLF_FUZZED(subgroup_id))), 1u, 1u)))))) / 1u))), max((~ (_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))), (((_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u), uint(uvec3(_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u), 1u, 1u)))))) / 1u))), (~ (_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | _GLF_IDENTITY(0u, min(0u, 0u))))), (((_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u), uint(uvec3(_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_base), 0u + ((workgroup_base))), (~ (workgroup_base)) | 0u), 1u, 1u)))))) / 1u)))))) | ((~ (_GLF_IDENTITY(((_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), clamp((workgroup_base), _GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), min((workgroup_base), (workgroup_base)))) | ((workgroup_base))), (workgroup_base))), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), clamp((workgroup_base), _GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), min((workgroup_base), (workgroup_base)))) | ((workgroup_base))), (workgroup_base))), 0u | (_GLF_IDENTITY((workgroup_base), clamp((workgroup_base), _GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), min((workgroup_base), (workgroup_base)))) | ((workgroup_base))), (workgroup_base))))))), (~ (workgroup_base)) | 0u))), (((_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u), 1u, 1u), uvec3(0u, 0u, 0u) | (uvec3(_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u), 1u, 1u)))))))) / 1u))))))))))) - 0u)) >> 0u))) ^ 0u)), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u), 0u, 0u)), clamp(uint(uvec3(_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u), 0u, 0u)), uint(uvec3(_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u), 0u, 0u)), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u), 0u, 0u)), (uint(uvec3(_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u), 0u, 0u))) | (uint(uvec3(_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u), 0u, 0u))))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u), (_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u), ~ (~ (_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))))) << 0u))) - 0u), (~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u)))), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))))), ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))) - 0u)) >> 0u)), (~ (_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), (_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), min(~ (_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base)))), _GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), min(~ (workgroup_base), ~ (workgroup_base)))), clamp((_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY(min(~ (workgroup_base), ~ (workgroup_base)), (false ? _GLF_FUZZED((122354u ^ subgroup_id)) : min(~ (workgroup_base), ~ (workgroup_base)))))), (_GLF_IDENTITY(~ (workgroup_base), min(~ (workgroup_base), ~ (workgroup_base)))), _GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), min(~ (workgroup_base), ~ (workgroup_base)))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), min(~ (workgroup_base), ~ (workgroup_base))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(~ (workgroup_base), min(~ (workgroup_base), ~ (workgroup_base))) : _GLF_FUZZED(workgroup_size))))), (~ ((_GLF_IDENTITY(~ (workgroup_base), min(~ (workgroup_base), ~ (workgroup_base)))))) >> 0u))))) | 0u))), (_GLF_IDENTITY(~ (workgroup_base), min(~ (_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base)))), _GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), min(~ (workgroup_base), ~ (workgroup_base)))), clamp((_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY(min(~ (workgroup_base), ~ (workgroup_base)), (false ? _GLF_FUZZED((122354u ^ subgroup_id)) : min(~ (workgroup_base), ~ (workgroup_base)))))), (_GLF_IDENTITY(~ (workgroup_base), min(~ (workgroup_base), ~ (workgroup_base)))), _GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), min(~ (workgroup_base), ~ (workgroup_base)))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), min(~ (workgroup_base), ~ (workgroup_base))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(~ (workgroup_base), min(~ (workgroup_base), ~ (workgroup_base))) : _GLF_FUZZED(workgroup_size))))), (~ ((_GLF_IDENTITY(~ (workgroup_base), min(~ (workgroup_base), ~ (workgroup_base)))))) >> 0u))))) | 0u)))) << 0u)) | 0u))))), ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))) - 0u), _GLF_IDENTITY((~ _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), uint(uint((workgroup_base))))) | ((workgroup_base)))) | 0u), _GLF_IDENTITY((~ (workgroup_base)), ((~ (workgroup_base))) | (0u >> _GLF_IDENTITY(uint(4u), uint(4u)))) | 0u)), ~ _GLF_IDENTITY((~ _GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u))), (_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u))), (((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u)))) | (((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u)))))) ^ 0u)), (_GLF_IDENTITY((~ _GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u))), (_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u))), (((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u)))) | (((_GLF_IDENTITY(~ (workgroup_base), (_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base))), ~ (~ (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base))))))) | 0u)))))) ^ 0u)), ((~ _GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base))), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))))) | 0u))), (_GLF_IDENTITY(((_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(workgroup_base)))))), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u))), (((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u)))) | (((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u)))))) ^ 0u))) >> 0u)) ^ 0u)), min(_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(~ (workgroup_base), 1u), uvec2(uvec4(uvec2(~ (workgroup_base), 1u), 0u, 0u)))), (false ? _GLF_FUZZED(148307u) : uint(_GLF_IDENTITY(uvec2(~ (workgroup_base), 1u), uvec2(uvec4(uvec2(~ (workgroup_base), 1u), 0u, 0u))))))), (~ _GLF_IDENTITY((workgroup_base), ((workgroup_base)) << 0u)) | 0u))))), _GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))))))), _GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))), ~ (~ (_GLF_IDENTITY(((_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_base), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (workgroup_base) : _GLF_FUZZED(bitfieldReverse((num_workgroup ^ num_workgroup))))), (~ (workgroup_base)) | 0u))), _GLF_IDENTITY((((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)))), ((((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))))) << 0u) / 1u)))) - 0u)), (_GLF_IDENTITY((~ _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), uint(uint((workgroup_base))))) | ((workgroup_base)))) | 0u), (~ (workgroup_base)) | 0u)), ~ _GLF_IDENTITY((~ _GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u))), (_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u))), (((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u)))) | (((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u)))))) ^ 0u)), (_GLF_IDENTITY((~ _GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u))), (_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u))), (((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u)))) | (((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u)))))) ^ 0u)), ((~ _GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u))), (_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY((~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))), 0u + (_GLF_IDENTITY((~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))), ((~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base))))) << 0u))) | 0u))), (((_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY((~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u, (_GLF_IDENTITY((~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u, uint(uvec3((~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u, 0u, 0u)))) + 0u))))) | (((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u)))))) ^ 0u))) >> 0u)) ^ 0u)), min(_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(~ (workgroup_base), 1u), uvec2(uvec4(uvec2(~ (workgroup_base), 1u), 0u, 0u)))), (false ? _GLF_FUZZED(148307u) : uint(_GLF_IDENTITY(uvec2(~ (workgroup_base), 1u), uvec2(uvec4(uvec2(~ (workgroup_base), 1u), 0u, 0u))))))), (~ (workgroup_base)) | 0u))))), _GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))))))), _GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))), ~ (~ (_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))), _GLF_IDENTITY((_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))), clamp(((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))), ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))), ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)))))), ((((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))))) << 0u) / 1u)))) - 0u)), ((~ _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), uint(uint((workgroup_base)))), min(_GLF_IDENTITY((workgroup_base), uint(uint((workgroup_base)))), _GLF_IDENTITY((workgroup_base), uint(uint((workgroup_base))))))) | ((workgroup_base)))) | 0u), (~ (workgroup_base)) | 0u)), ~ _GLF_IDENTITY((~ _GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u))), (_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u))), (((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u)))) | (_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u))), clamp(((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u))), _GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u))), clamp(((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u))), ((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u))), ((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u))))), ((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u)))))))) ^ 0u)), (_GLF_IDENTITY((~ _GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u))), (_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u))), (((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u)))) | (((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u)))))) ^ 0u)), ((~ _GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u))), _GLF_IDENTITY((_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u))), (((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u)))) | (((_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)), workgroup_base)), workgroup_base))), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u)))))), clamp((_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u))), (((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u)))) | (((_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)), workgroup_base)), workgroup_base))), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u)))))), (_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u))), (((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u)))) | (((_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)), workgroup_base)), workgroup_base))), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u)))))), (_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u))), (((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u)))) | (((_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)), workgroup_base)), workgroup_base))), (~ _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base)))) | 0u)))))))) ^ 0u))) >> 0u)) ^ 0u)), min(_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(~ (workgroup_base), 1u), uvec2(uvec4(uvec2(~ (workgroup_base), 1u), 0u, 0u)))), (false ? _GLF_FUZZED(148307u) : uint(_GLF_IDENTITY(uvec2(~ (workgroup_base), 1u), uvec2(uvec4(uvec2(~ (workgroup_base), 1u), 0u, 0u))))))), (~ (workgroup_base)) | 0u))))), _GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY((~ (workgroup_base)) | 0u, max((~ (workgroup_base)) | 0u, _GLF_IDENTITY((~ (workgroup_base)) | 0u, ~ (~ ((~ (workgroup_base)) | 0u)))))))))))), _GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))), ~ (~ (_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ (_GLF_IDENTITY(workgroup_base, max(workgroup_base, _GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))))))) | 0u))), _GLF_IDENTITY((((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)))), ((((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))))) << 0u) / 1u)))) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ 0u) >> 0u))) ^ 0u)), 0u ^ ((_GLF_IDENTITY(~ (_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))))), ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))) - 0u), _GLF_IDENTITY((~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))))), _GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), ((workgroup_base)) | 0u)) | 0u))), (((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), ((workgroup_base)) | 0u)) | 0u)))) << 0u) - 0u)), clamp((~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), 0u | (~ (workgroup_base))), _GLF_IDENTITY((~ (workgroup_base)) | 0u, ((~ (workgroup_base)) | 0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))))), ((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), ((workgroup_base)) | 0u)) | 0u))) - 0u)), (~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))))), ((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), ((workgroup_base)) | 0u)) | 0u))) - 0u)), _GLF_IDENTITY(_GLF_IDENTITY((~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))))), ((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), ((workgroup_base)) | 0u)) | 0u))) - 0u)), (false ? _GLF_FUZZED(subgroup_id) : (~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))))), ((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), ((workgroup_base)) | 0u)) | 0u))) - 0u)))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY((~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))))), ((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(((workgroup_base)) | 0u, ~ (~ (_GLF_IDENTITY(((workgroup_base)) | 0u, _GLF_IDENTITY(uint(uvec2(((workgroup_base)) | 0u, 1u)), (uint(uvec2(((workgroup_base)) | 0u, 1u))) - 0u))))))) | 0u))) - 0u)), (false ? _GLF_FUZZED(subgroup_id) : (~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY((~ (workgroup_base)) | 0u, min((~ (workgroup_base)) | 0u, _GLF_IDENTITY((~ (workgroup_base)) | 0u, ((~ (workgroup_base)) | 0u) | ((~ (workgroup_base)) | 0u)))))), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))))), (_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), ((workgroup_base)) | 0u)) | 0u)), uint(_GLF_IDENTITY(uvec2((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), ((workgroup_base)) | 0u)) | 0u)), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), ~ (_GLF_IDENTITY(~ (uvec2((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), ((workgroup_base)) | 0u)) | 0u)), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))), (~ (uvec2((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), ((workgroup_base)) | 0u)) | 0u)), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))))) - uvec2(0u, 0u))))))) - 0u)))))), uint(uvec3(uint(uint(_GLF_IDENTITY((~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))))), ((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), ((workgroup_base)) | 0u)) | 0u))) - 0u)), (false ? _GLF_FUZZED(subgroup_id) : (~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))))), ((_GLF_IDENTITY(~ (workgroup_base), (~ _GLF_IDENTITY((workgroup_base), ((workgroup_base)) | 0u)) | 0u))) - 0u)))))), 0u, 0u)))))) >> 0u)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u), (_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)) | (_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)))), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))))), ((_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), (true ? (workgroup_base) : _GLF_FUZZED((true ? workgroup_id : 149572u))))) >> 0u), 0u | (~ _GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), (true ? (workgroup_base) : _GLF_FUZZED((true ? workgroup_id : 149572u))))) >> 0u))), (~ (workgroup_base)) | 0u))) - 0u), (~ _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY((~ (workgroup_base)) | 0u, ((~ (workgroup_base)) | 0u) * 1u))), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))))), min(_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), ~ (~ ((workgroup_base))))) ^ 0u), (true ? ~ (workgroup_base) : _GLF_FUZZED(workgroup_id)))), 0u + ((_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), ~ (~ ((workgroup_base))))) ^ 0u), (true ? ~ (workgroup_base) : _GLF_FUZZED(workgroup_id)))))) | 0u))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY((~ (workgroup_base)) | 0u, ((~ (workgroup_base)) | 0u) >> 0u)), (_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY((~ (workgroup_base)) | 0u, ((~ (workgroup_base)) | 0u) >> 0u))) << 0u)), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY((~ (workgroup_base)) | 0u, ((~ (workgroup_base)) | 0u) >> 0u)))))))), _GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))), ~ (~ (_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))), (((_GLF_IDENTITY(~ (workgroup_base), (~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)))) | 0u)))) / 1u)))) - 0u)) >> 0u), (_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u)), (~ (workgroup_base)) | 0u), (_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)) | (_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)))), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))))), ((_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), (true ? (workgroup_base) : _GLF_FUZZED((true ? workgroup_id : 149572u))))) >> 0u), (~ (workgroup_base)) | 0u))) - 0u), (~ _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY((~ (workgroup_base)) | 0u, ((~ (workgroup_base)) | 0u) * 1u))), ~ (~ ((_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))), 0u)))), (~ (workgroup_base)) | 0u))))), min(_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) >> 0u), (_GLF_IDENTITY(~ (workgroup_base), (true ? ~ (workgroup_base) : _GLF_FUZZED(workgroup_id)))) | 0u))))), _GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY((~ (workgroup_base)) | 0u, ((~ (workgroup_base)) | 0u) >> 0u))), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))))))), _GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))), ~ (~ (_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))), (((_GLF_IDENTITY(~ (workgroup_base), (~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)))) | 0u)))) / 1u)))) - 0u)) >> 0u), (true ? _GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u), (_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), (_GLF_IDENTITY(~ (workgroup_base), ~ (_GLF_IDENTITY(~ (~ (workgroup_base)), (true ? ~ (~ (workgroup_base)) : _GLF_FUZZED(num_workgroup)))))) * 1u), (~ (workgroup_base)) | 0u)))), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))))), ((_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), (true ? (workgroup_base) : _GLF_FUZZED((true ? workgroup_id : 149572u))))) >> 0u), (~ (workgroup_base)) | 0u), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), (true ? (workgroup_base) : _GLF_FUZZED((true ? workgroup_id : 149572u))))) >> 0u), (~ (workgroup_base)) | 0u))))) - 0u), _GLF_IDENTITY((~ _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY((~ (workgroup_base)) | 0u, ((~ (workgroup_base)) | 0u) * 1u))), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))))), min(_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), (_GLF_IDENTITY(~ (workgroup_base), (true ? ~ (workgroup_base) : _GLF_FUZZED(workgroup_id)))) | 0u))))), _GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY((~ (workgroup_base)) | 0u, ((~ (workgroup_base)) | 0u) >> 0u))), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))))))), _GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))), ~ (~ (_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))), (((_GLF_IDENTITY(~ (workgroup_base), (~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)))) | 0u)))) / 1u)))) - 0u)) >> 0u, ((~ _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY((~ (workgroup_base)) | 0u, ((~ (workgroup_base)) | 0u) * 1u))), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))))), min(_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), (_GLF_IDENTITY(~ (workgroup_base), (true ? ~ (workgroup_base) : _GLF_FUZZED(workgroup_id)))) | 0u))))), _GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY((~ (workgroup_base)) | 0u, ((~ (workgroup_base)) | 0u) >> 0u))), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))))))), _GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))), ~ (~ (_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))), (((_GLF_IDENTITY(~ (workgroup_base), (~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)))) | 0u)))) / 1u)))) - 0u)) >> 0u) << 0u)) : _GLF_FUZZED(workgroup_id)))) | (_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u), (_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_base), clamp(_GLF_IDENTITY((workgroup_base), clamp((workgroup_base), (workgroup_base), (workgroup_base))), (workgroup_base), _GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), ((workgroup_base)) >> 0u)) + (0u >> _GLF_IDENTITY(uint(5u), uint(5u)))))), (~ (workgroup_base)) | 0u)) | (_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)))), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))))), ((_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), (true ? (workgroup_base) : _GLF_FUZZED((true ? workgroup_id : 149572u))))) >> 0u), (~ (workgroup_base)) | 0u))) - 0u), (~ _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY((~ (workgroup_base)) | 0u, ((~ (workgroup_base)) | 0u) * 1u))), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))))), min(_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u)), ~ (~ ((_GLF_IDENTITY(~ (workgroup_base), (_GLF_IDENTITY(~ (workgroup_base), (true ? ~ (workgroup_base) : _GLF_FUZZED(workgroup_id)))) | 0u))))), _GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_base), _GLF_IDENTITY((~ (workgroup_base)) | 0u, ((~ (workgroup_base)) | 0u) >> 0u))), ~ (~ _GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))), (false ? _GLF_FUZZED(workgroup_size) : ((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))))))))), _GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))), ~ (~ (_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) | 0u))), (((_GLF_IDENTITY(~ (workgroup_base), (~ (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)))) | 0u)))) / 1u)))) - 0u)) >> 0u))))) ^ 0u))))))))) + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_id * subgroup_size), uint(uvec2(~ (subgroup_id * subgroup_size), 1u))))) + ((subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             do
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 break;
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    break;
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       return;
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), bool(bvec4(bool(bool(injectionSwitch.x > injectionSwitch.y)), true, false, true))))))));
                 return;
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (false ? _GLF_FUZZED(4.5) : injectionSwitch[1])))), injectionSwitch)).x > injectionSwitch.y))))
                  continue;
                 continue;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))));
          }
         if(_GLF_DEAD(false))
          continue;
         do
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          continue;
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))), (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], 1.0 * ((injectionSwitch)[0])), _GLF_FUZZED(-892.679)), vec2(_GLF_FUZZED(-356.559), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))), (((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))))) << 0u) | ((subgroup_local_id + 1))) >> 0u) < subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u) < _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u), (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + 1) >> 0u, ((subgroup_local_id + 1) >> 0u) << 0u)) < _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u), (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u) : _GLF_FUZZED(num_workgroup)))) || false), _GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) | ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) | ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), clamp(~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) | _GLF_IDENTITY(((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), max(((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), (((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))) - 0u)))))), ~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)))), ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) | ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), ~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) | ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) | ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) | ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(clamp(~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) | ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), ~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) | ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), ~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) | ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))))), max(clamp(~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) | ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), ~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) | ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), ~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) | ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))))), clamp(~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) | ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), ~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) | ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), ~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) | ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x))) | ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) | ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), max((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) | ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) | ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))), clamp(~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) | ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), uint(uvec2(((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) | ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), 1u)))))), ~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) | ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), ~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) | ((subgroup_local_id) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))))))), min(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) ^ 0u) - 0u), _GLF_IDENTITY(subgroup_local_id, uint(uint(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)))))) + _GLF_IDENTITY(1, int(ivec3(1, 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))) >> 0u) < subgroup_size))) || _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((-1815.2050 / 6317.8824))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(33.65))))), 1.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(1.2) : 1.0)), 0.0, 1.0))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) - vec2(0.0, 0.0)), 0.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0))).x < _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2(injectionSwitch.y, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0), mat2(mat3x4(mat2(injectionSwitch.y, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))))))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) - 0.0), injectionSwitch.x)) > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), false || (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false, true))))), false)))))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                  return;
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(int(int(0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     return;
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                      continue;
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) && true)) || false)))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && true)))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(-66.00, 9518.8859), min(vec2(-66.00, 9518.8859), vec2(-66.00, 9518.8859)))))).y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(! (! (injectionSwitch.x > injectionSwitch.y)), true))), false, true)))), true, false)))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                {
                }
               else
                {
                 return;
                }
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           do
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) || false)))));
           return;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (false))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true) || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec2((injectionSwitch)[1], 1.0)))), vec2(_GLF_FUZZED(-57.21), _GLF_FUZZED(-3.6)), bvec2(false, false))).x > injectionSwitch.y))) || false)))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                  continue;
                 return;
                }
               if(_GLF_DEAD(false))
                break;
              }
            }
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY((! (_GLF_DEAD(false))), bool(bvec2((! (_GLF_DEAD(false))), true))) || false))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       int i = 0;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (_GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(bool(false)), ! (! (_GLF_IDENTITY(bool(bool(false)), bool(bvec3(bool(bool(false)), false, false)))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))), (bool(bvec2(_GLF_IDENTITY(bool(bool(false)), ! (! (_GLF_IDENTITY(bool(bool(false)), bool(bvec3(bool(bool(false)), false, false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))))))));
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
            {
             do
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false))))));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-80.48)), float(injectionSwitch.y), bool(true)))))))
          return;
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   break;
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && true))))
                  continue;
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - sin(vec2(0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), _GLF_FUZZED(281.530)), vec2(_GLF_FUZZED(vec4(-93.00, 7.4, -8403.3178, 8.1).x), (injectionSwitch)[_GLF_IDENTITY(1, 0 ^ (1))]), bvec2(false, _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), false || (_GLF_IDENTITY(true, ! (! (true)))))))).y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   return;
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    break;
                  }
                }
              }
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
          {
           do
            {
             atomicStore(checker[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid), ((virtual_gid)) << 0u) >> 0u)], read, 4, _GLF_IDENTITY(64, int(ivec2(64, 0))), 4);
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                break;
               return;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), (int(3)) | 0), _GLF_IDENTITY(int(3), 0 | (int(3))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), min(int(3), int(3)))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false)))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false)))))), bool(bvec4(bool(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false)))))), false, false, false)))))))))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)), ! (! (bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))))))))
              return;
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 return;
                }
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             return;
            }
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_FALSE(false))), ! (! (bool(bool(_GLF_WRAPPED_IF_FALSE(false))))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
            return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           return;
          }
        }
       for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 1 * (int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
            return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               return;
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
                  return;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     return;
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     return;
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       return;
                      }
                     do
                      {
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) != ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, clamp(7, 7, 7))), _GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))))))))
                        return;
                       if(_GLF_DEAD(false))
                        continue;
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                         if(_GLF_DEAD(false))
                          return;
                        }
                       else
                        {
                         return;
                        }
                       if(_GLF_DEAD(false))
                        return;
                      }
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                 for(int _injected_loop_counter = (0 & 67196); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), min(int(1), int(1))), int(1))))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
                return;
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(false))
                return;
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   return;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                continue;
               return;
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, 0u ^ (read)), _GLF_IDENTITY(4, (4) | (4)), 64, 4);
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, true))), bvec3(bvec4(bvec3(bvec3(bvec3(false, true, _GLF_IDENTITY(true, true && (true))))), true))), true))), true))))))))
        return;
      }
     else
      {
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))), true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))), true, false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))), true, false), true)))))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), true))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
