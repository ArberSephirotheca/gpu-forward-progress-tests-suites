#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged2_0_3_76_3_1_17GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidsubgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uvec4 GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_13num_workgroupsubgroup_local_idsubgroup_sizenext_virtual_gid;
 if(_GLF_DEAD(false))
  return;
 uvec2 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 uvec4 GLF_merged2_0_3_75_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_13num_workgroupsubgroup_local_idsubgroup_sizesubgroup_size;
 uvec4 GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidnum_workgroup;
 uvec3 GLF_merged3_0_1_13_1_1_17_2_1_13num_workgroupsubgroup_local_idsubgroup_size;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_13num_workgroupsubgroup_local_idsubgroup_sizenext_virtual_gid.xyz = GLF_merged3_0_1_13_1_1_17_2_1_13num_workgroupsubgroup_local_idsubgroup_size;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (-18227 & 0)); _injected_loop_counter --)
  {
   GLF_merged2_0_3_75_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_13num_workgroupsubgroup_local_idsubgroup_sizesubgroup_size.xyz = _GLF_IDENTITY(GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_13num_workgroupsubgroup_local_idsubgroup_sizenext_virtual_gid, ~ (~ (_GLF_IDENTITY(GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_13num_workgroupsubgroup_local_idsubgroup_sizenext_virtual_gid, uvec4(1u, 1u, 1u, 1u) * (GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_13num_workgroupsubgroup_local_idsubgroup_sizenext_virtual_gid))))).xyz;
  }
 uvec3 GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gid;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     GLF_merged2_0_3_76_3_1_17GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidsubgroup_local_id.xyz = GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gid;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
  }
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, clamp(0, 0, 0)) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       do
        {
         GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidnum_workgroup.xyz = GLF_merged2_0_3_76_3_1_17GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidsubgroup_local_id.xyz;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     break;
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) - 0), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), (_GLF_IDENTITY((true), _GLF_IDENTITY((_GLF_IDENTITY((true), bool(bvec4((true), true, false, false)))), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY((true), bool(bvec4((true), true, false, false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true && (bool(bvec3((_GLF_IDENTITY((true), bool(bvec4((true), true, false, false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))) || false)) && true)))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) || false)))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 return;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(bvec2(_GLF_DEAD(false), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
                continue;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), ~ (_GLF_IDENTITY(~ (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))), (_GLF_IDENTITY(~ (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))), (~ (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))))) | (~ (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))))))) | (~ (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))))))) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              break;
             return;
            }
           if(_GLF_DEAD(false))
            break;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0)))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
              {
               if(_GLF_DEAD(false))
                continue;
               return;
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             else
              {
              }
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
            continue;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           break;
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) + 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 return;
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), true, _GLF_IDENTITY(false, (false) || false), true)))) || (false))))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))));
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
              }
             return;
            }
          }
         else
          {
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
    }
   else
    {
    }
  }
 uint subgroup_size = 16;
 GLF_merged2_0_3_75_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_13num_workgroupsubgroup_local_idsubgroup_sizesubgroup_size.w = _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec2(subgroup_size, 0u)), uint(_GLF_IDENTITY(uint(uint(uvec2(subgroup_size, 0u))), (uint(uint(uvec2(subgroup_size, 0u)))) - 0u))));
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(clamp(int(4), int(4), int(4)), _GLF_IDENTITY(max(_GLF_IDENTITY(clamp(int(4), int(4), int(4)), clamp(clamp(_GLF_IDENTITY(int(4), _GLF_IDENTITY((int(4)), min(_GLF_IDENTITY((int(4)), ~ (~ ((int(4))))), _GLF_IDENTITY((int(4)), ((int(4))) >> 0))) - 0), int(4), int(4)), clamp(int(4), int(4), int(4)), clamp(int(4), _GLF_IDENTITY(int(4), (int(4)) | 0), int(4)))), clamp(int(4), int(4), int(4))), max(max(_GLF_IDENTITY(_GLF_IDENTITY(clamp(int(4), int(4), int(4)), clamp(clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(clamp(int(4), int(4), int(4)), clamp(clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)))))), clamp(int(4), int(4), int(4))), _GLF_IDENTITY(max(_GLF_IDENTITY(clamp(int(4), int(4), int(4)), clamp(clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)))), clamp(int(4), int(4), int(_GLF_IDENTITY(4, (4) | 0)))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(max(_GLF_IDENTITY(clamp(int(4), int(4), int(4)), clamp(clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)))), clamp(int(4), int(4), int(4))), 1, 0), (ivec3(max(_GLF_IDENTITY(clamp(int(4), int(4), int(4)), clamp(clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)))), clamp(int(4), int(4), int(4))), 1, 0)) + ivec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), min(int(ivec3(max(_GLF_IDENTITY(clamp(int(4), int(4), int(4)), clamp(clamp(int(4), int(4), _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(int(int(4)), (int(int(4))) ^ 0)))), clamp(int(4), int(4), int(4)), _GLF_IDENTITY(clamp(int(4), int(4), int(4)), (_GLF_IDENTITY(clamp(int(4), int(4), int(4)), max(clamp(int(4), int(4), int(4)), _GLF_IDENTITY(clamp(int(4), int(4), int(4)), (clamp(int(4), int(4), int(4))) << 0)))) ^ 0))), clamp(int(4), int(4), int(4))), 1, 0)), int(ivec3(max(_GLF_IDENTITY(_GLF_IDENTITY(clamp(int(4), int(4), int(4)), (true ? clamp(int(4), int(4), int(4)) : _GLF_FUZZED((18845 << 42046)))), clamp(clamp(int(4), _GLF_IDENTITY(int(4), (int(4)) - 0), int(4)), clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)))), _GLF_IDENTITY(clamp(int(4), int(4), int(4)), clamp(clamp(int(4), int(4), int(4)), _GLF_IDENTITY(clamp(int(4), int(4), int(4)), (false ? _GLF_FUZZED(57918) : _GLF_IDENTITY(clamp(int(4), int(4), int(4)), int(ivec3(_GLF_IDENTITY(clamp(int(4), int(4), int(4)), int(ivec4(clamp(int(4), int(4), int(4)), 1, 1, 1))), 1, 1))))), clamp(int(4), int(4), int(4))))), 1, 0)))))))), max(_GLF_IDENTITY(clamp(int(4), int(4), int(4)), _GLF_IDENTITY(max(_GLF_IDENTITY(clamp(int(4), int(4), int(4)), clamp(clamp(_GLF_IDENTITY(int(4), _GLF_IDENTITY((int(4)), min(_GLF_IDENTITY((int(4)), ~ (~ ((int(4))))), _GLF_IDENTITY((int(4)), ((int(4))) >> 0))) - 0), int(4), int(4)), clamp(int(4), int(4), int(4)), clamp(int(4), _GLF_IDENTITY(int(4), (int(4)) | 0), int(4)))), clamp(int(4), int(4), int(4))), _GLF_IDENTITY(max(max(_GLF_IDENTITY(clamp(int(4), int(4), int(4)), clamp(clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)))), clamp(int(4), int(4), int(4))), _GLF_IDENTITY(max(_GLF_IDENTITY(clamp(int(4), int(4), int(4)), clamp(clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)))), clamp(int(4), int(4), int(_GLF_IDENTITY(4, (4) | 0)))), _GLF_IDENTITY(int(ivec3(max(_GLF_IDENTITY(clamp(int(4), int(4), int(4)), clamp(clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)))), clamp(int(4), int(4), int(4))), 1, 0)), min(int(ivec3(max(_GLF_IDENTITY(clamp(int(4), int(4), int(4)), clamp(clamp(int(4), int(4), _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(int(int(4)), (int(int(4))) ^ 0)))), clamp(int(4), int(4), int(4)), _GLF_IDENTITY(clamp(int(4), int(4), int(4)), (_GLF_IDENTITY(clamp(int(4), int(4), int(4)), max(clamp(int(4), int(4), int(4)), _GLF_IDENTITY(clamp(int(4), int(4), int(4)), (clamp(int(4), int(4), int(4))) << 0)))) ^ 0))), clamp(int(4), int(4), int(4))), 1, 0)), int(ivec3(max(_GLF_IDENTITY(clamp(int(4), int(4), int(4)), clamp(clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)))), _GLF_IDENTITY(clamp(int(4), int(4), int(4)), clamp(clamp(int(4), int(4), int(4)), _GLF_IDENTITY(clamp(int(4), int(4), int(4)), (false ? _GLF_FUZZED(57918) : _GLF_IDENTITY(clamp(int(4), int(4), int(4)), int(ivec3(_GLF_IDENTITY(clamp(int(4), int(4), int(4)), int(ivec4(clamp(int(4), int(4), int(4)), 1, 1, 1))), 1, 1))))), clamp(int(4), int(4), int(4))))), 1, 0)))))), ~ (~ (_GLF_IDENTITY(max(max(_GLF_IDENTITY(clamp(int(4), int(4), int(4)), clamp(clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)))), clamp(int(4), int(4), int(4))), _GLF_IDENTITY(max(_GLF_IDENTITY(clamp(int(4), int(4), int(4)), clamp(clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)))), clamp(int(4), int(4), int(_GLF_IDENTITY(4, (4) | 0)))), _GLF_IDENTITY(int(ivec3(max(_GLF_IDENTITY(clamp(int(4), int(4), int(4)), clamp(clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)))), clamp(int(4), int(4), int(4))), 1, 0)), min(int(ivec3(max(_GLF_IDENTITY(clamp(int(4), int(4), int(4)), clamp(clamp(int(4), int(4), _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(int(int(4)), (int(int(4))) ^ 0)))), clamp(int(4), int(4), int(4)), _GLF_IDENTITY(clamp(int(4), int(4), int(4)), (_GLF_IDENTITY(clamp(int(4), int(4), int(4)), max(clamp(int(4), int(4), int(4)), _GLF_IDENTITY(clamp(int(4), int(4), int(4)), (clamp(int(4), int(4), int(4))) << 0)))) ^ 0))), clamp(int(4), int(4), int(4))), 1, 0)), int(ivec3(max(_GLF_IDENTITY(clamp(int(4), int(4), int(4)), clamp(clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)))), _GLF_IDENTITY(clamp(int(4), int(4), int(4)), clamp(clamp(int(4), int(4), int(4)), _GLF_IDENTITY(clamp(int(4), int(4), int(4)), (false ? _GLF_FUZZED(57918) : _GLF_IDENTITY(clamp(int(4), int(4), int(4)), int(ivec3(_GLF_IDENTITY(clamp(int(4), int(4), int(4)), int(ivec4(clamp(int(4), int(4), int(4)), 1, 1, 1))), 1, 1))))), clamp(int(4), int(4), int(4))))), 1, 0)))))), (max(max(_GLF_IDENTITY(clamp(int(4), int(4), int(4)), clamp(clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)))), clamp(int(4), int(4), int(4))), _GLF_IDENTITY(max(_GLF_IDENTITY(clamp(int(4), int(4), int(4)), clamp(clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)))), clamp(int(4), int(4), int(_GLF_IDENTITY(4, (4) | 0)))), _GLF_IDENTITY(int(ivec3(max(_GLF_IDENTITY(clamp(int(4), int(4), int(4)), clamp(clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)))), clamp(int(4), int(4), int(4))), 1, 0)), min(int(ivec3(max(_GLF_IDENTITY(clamp(int(4), int(4), int(4)), clamp(clamp(int(4), int(4), _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(int(int(4)), (int(int(4))) ^ 0)))), clamp(int(4), int(4), int(4)), _GLF_IDENTITY(clamp(int(4), int(4), int(4)), (_GLF_IDENTITY(clamp(int(4), int(4), int(4)), max(clamp(int(4), int(4), int(4)), _GLF_IDENTITY(clamp(int(4), int(4), int(4)), (clamp(int(4), int(4), int(4))) << 0)))) ^ 0))), clamp(int(4), int(4), int(4))), 1, 0)), int(ivec3(max(_GLF_IDENTITY(clamp(int(4), int(4), int(4)), clamp(clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)))), _GLF_IDENTITY(clamp(int(4), int(4), int(4)), clamp(clamp(int(4), int(4), int(4)), _GLF_IDENTITY(clamp(int(4), int(4), int(4)), (false ? _GLF_FUZZED(57918) : _GLF_IDENTITY(clamp(int(4), int(4), int(4)), int(ivec3(_GLF_IDENTITY(clamp(int(4), int(4), int(4)), int(ivec4(clamp(int(4), int(4), int(4)), 1, 1, 1))), 1, 1))))), clamp(int(4), int(4), int(4))))), 1, 0))))))) >> 0)))))), _GLF_IDENTITY(clamp(int(4), int(4), int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), 0 ^ (~ (4))))))), _GLF_IDENTITY(max(_GLF_IDENTITY(clamp(int(4), int(4), int(4)), clamp(clamp(_GLF_IDENTITY(int(4), _GLF_IDENTITY((int(4)), min(_GLF_IDENTITY((int(4)), ~ (~ ((int(4))))), _GLF_IDENTITY((int(4)), ((int(4))) >> 0))) - 0), int(4), int(4)), clamp(int(4), _GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(((-60376 % 86481) + -2175)))), int(4)), clamp(int(4), _GLF_IDENTITY(int(4), (int(4)) | 0), int(4)))), clamp(int(4), int(4), int(4))), max(max(_GLF_IDENTITY(clamp(int(4), int(4), int(4)), clamp(clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)))), clamp(int(4), int(4), int(4))), _GLF_IDENTITY(max(_GLF_IDENTITY(clamp(int(4), int(4), int(4)), clamp(clamp(int(4), int(4), int(4)), clamp(int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))), int(4)), clamp(int(4), int(4), int(4)))), clamp(int(4), int(4), int(_GLF_IDENTITY(4, (4) | 0)))), _GLF_IDENTITY(int(ivec3(max(_GLF_IDENTITY(clamp(int(4), int(4), int(4)), clamp(clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)))), clamp(int(4), int(4), int(4))), 1, 0)), min(int(ivec3(max(_GLF_IDENTITY(clamp(int(4), int(4), int(4)), clamp(clamp(int(4), int(4), _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(int(int(4)), (int(int(4))) ^ 0)))), clamp(int(4), int(4), int(4)), _GLF_IDENTITY(clamp(int(4), int(4), int(4)), (_GLF_IDENTITY(clamp(int(4), int(4), int(4)), max(clamp(int(4), int(4), int(4)), _GLF_IDENTITY(clamp(int(4), int(4), int(4)), (clamp(int(4), int(4), int(4))) << 0)))) ^ 0))), clamp(int(4), int(4), int(4))), 1, 0)), int(ivec3(max(_GLF_IDENTITY(clamp(int(4), int(4), int(4)), clamp(clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4)))), _GLF_IDENTITY(clamp(int(4), int(4), int(4)), clamp(clamp(int(4), int(4), int(4)), _GLF_IDENTITY(clamp(int(4), int(4), int(4)), (false ? _GLF_FUZZED(57918) : _GLF_IDENTITY(clamp(int(4), int(4), int(4)), int(ivec3(_GLF_IDENTITY(clamp(int(4), int(4), int(4)), int(ivec4(clamp(int(4), int(4), int(4)), 1, 1, 1))), 1, 1))))), clamp(int(4), int(4), int(4))))), 1, 0))))))))))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(ivec3(int(4), 0, 1)), (int(ivec3(int(_GLF_IDENTITY(4, min(4, 4))), 0, _GLF_IDENTITY(1, int(int(1)))))) * 1)), (_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(ivec3(int(4), 0, 1)), (int(ivec3(int(4), 0, _GLF_IDENTITY(1, int(int(1)))))) * 1))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(ivec3(int(4), 0, 1)), (int(ivec3(int(4), 0, _GLF_IDENTITY(1, int(int(1)))))) * 1)), ~ (~ (_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(ivec3(int(4), 0, 1)), (int(ivec3(int(_GLF_IDENTITY(4, (4) / 1)), 0, _GLF_IDENTITY(1, int(int(1)))))) * 1))))))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)))))) || false))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      break;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter ++)
      {
       do
        {
         for(int _injected_loop_counter = (0 & 67176); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) * _GLF_IDENTITY(1, (1) >> (0 >> _GLF_IDENTITY(int(4), int(4)))))))); _injected_loop_counter ++)
          {
           do
            {
             do
              {
               if(_GLF_DEAD(false))
                return;
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   GLF_merged2_0_3_75_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_13num_workgroupsubgroup_local_idsubgroup_sizesubgroup_size.xyz.z = GLF_merged2_0_3_75_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_13num_workgroupsubgroup_local_idsubgroup_sizesubgroup_size.w;
                  }
                 else
                  {
                  }
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        return;
       continue;
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) || false))))
          break;
         break;
        }
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ (0 ^ 0))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ (0 ^ 0))))); _injected_loop_counter ++)
  {
   do
    {
     GLF_merged2_0_3_76_3_1_17GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidsubgroup_local_id.w = subgroup_local_id;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
  {
  }
 else
  {
   do
    {
     GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x = GLF_merged2_0_3_76_3_1_17GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidsubgroup_local_id.w;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))));
  }
 for(int _injected_loop_counter = (60118 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        break;
       do
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false)))))))
          {
          }
         else
          {
           GLF_merged2_0_3_75_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_13num_workgroupsubgroup_local_idsubgroup_sizesubgroup_size.xyz.y = GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))))
        break;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) != (0 ^ 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, false)))));
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidnum_workgroup.xyz.y = GLF_merged2_0_3_75_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_13num_workgroupsubgroup_local_idsubgroup_sizesubgroup_size.xyz.y;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     break;
    }
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (false ? _GLF_FUZZED(-125.045) : _GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidnum_workgroup.w = num_workgroup;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   do
    {
     GLF_merged2_0_3_75_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_13num_workgroupsubgroup_local_idsubgroup_sizesubgroup_size.xyz.x = GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidnum_workgroup.w;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
      return;
     return;
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y = workgroup_size;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y), max(uint(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y), uint(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y)))), max(uint(_GLF_IDENTITY(uint(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y), max(uint(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y), uint(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y, min(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y, GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y)))))), uint(_GLF_IDENTITY(uint(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y), max(uint(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y), uint(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y))))))) * _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(workgroup_id, 0u, 1u), (uvec3(_GLF_IDENTITY(workgroup_id, (0u << _GLF_IDENTITY(uint(4u), uint(4u))) ^ (workgroup_id)), 0u, 1u)) | uvec3(0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(0u)), _GLF_IDENTITY((uint(uint(0u))) | (uint(uint(0u))), (_GLF_IDENTITY(_GLF_IDENTITY((uint(uint(0u))) | (uint(uint(0u))), ~ (~ ((uint(uint(0u))) | (uint(uint(0u)))))), clamp((uint(uint(0u))) | (uint(uint(0u))), (uint(uint(0u))) | (uint(uint(0u))), (uint(uint(0u))) | (uint(uint(0u)))))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(workgroup_id, 0u, 1u)), 0u | (uint(uvec3(workgroup_id, 0u, 1u)))), (_GLF_IDENTITY(uint(uvec3(workgroup_id, 0u, 1u)), 0u | (uint(uvec3(workgroup_id, 0u, 1u))))) | 0u)) ^ (0u & 71593u)));
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), (0u >> _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(uint(8u), (uint(8u)) | (uint(8u))))), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), (0u >> _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(uint(8u), (uint(8u)) | (uint(8u))))), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 1u))), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), (0u >> _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(uint(8u), (uint(8u)) | (uint(8u))))), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 1u)))), ((_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), (0u >> _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(uint(8u), (uint(8u)) | (uint(8u))))), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 1u))))) + 0u) | (_GLF_IDENTITY(workgroup_base, uint(uvec4(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), (0u >> _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(uint(8u), _GLF_IDENTITY((uint(8u)) | (uint(8u)), clamp((uint(8u)) | (uint(8u)), _GLF_IDENTITY((uint(8u)) | (uint(8u)), max((uint(8u)) | (uint(8u)), (uint(8u)) | (uint(8u)))), _GLF_IDENTITY((uint(8u)) | (uint(8u)), min(_GLF_IDENTITY((uint(8u)) | (uint(8u)), min((uint(8u)) | (uint(8u)), (uint(8u)) | (uint(8u)))), (uint(8u)) | (uint(8u))))))))), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 1u)))))) | (_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), (0u >> _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(uint(8u), _GLF_IDENTITY((uint(8u)) | (uint(8u)), ((uint(8u)) | (uint(8u))) * uint(_GLF_ONE(1.0, injectionSwitch.y)))))), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 1u), (uvec4(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), (0u >> _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(uint(8u), _GLF_IDENTITY((uint(8u)) | (uint(8u)), ((uint(8u)) | (uint(8u))) * uint(_GLF_ONE(1.0, injectionSwitch.y)))))), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 1u)) | (uvec4(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), (0u >> _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(uint(8u), _GLF_IDENTITY((uint(8u)) | (uint(8u)), ((uint(8u)) | (uint(8u))) * uint(_GLF_ONE(1.0, injectionSwitch.y)))))), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 1u))))))) + _GLF_IDENTITY(subgroup_id * GLF_merged2_0_3_75_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_13num_workgroupsubgroup_local_idsubgroup_sizesubgroup_size.xyz.z, (subgroup_id * GLF_merged2_0_3_75_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_13num_workgroupsubgroup_local_idsubgroup_sizesubgroup_size.xyz.z) >> _GLF_IDENTITY(0u, (0u) - 0u)) + GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidnum_workgroup.xyz.y;
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       do
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
         do
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY((1), int(_GLF_ZERO(0.0, injectionSwitch.x)) + ((1))) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidnum_workgroup.xyz.z = virtual_gid;
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         break;
        }
       continue;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) << 0u) * GLF_merged2_0_3_75_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_13num_workgroupsubgroup_local_idsubgroup_sizesubgroup_size.xyz.z + ((GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidnum_workgroup.xyz.y + 1) % _GLF_IDENTITY(GLF_merged2_0_3_75_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_13num_workgroupsubgroup_local_idsubgroup_sizesubgroup_size, min(GLF_merged2_0_3_75_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_13num_workgroupsubgroup_local_idsubgroup_sizesubgroup_size, GLF_merged2_0_3_75_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_13num_workgroupsubgroup_local_idsubgroup_sizesubgroup_size)).xyz.z);
 if(_GLF_DEAD(false))
  return;
 do
  {
   GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_13num_workgroupsubgroup_local_idsubgroup_sizenext_virtual_gid.w = next_virtual_gid;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y))));
 for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), clamp(1 << _GLF_IDENTITY(int(7), int(7)), 1 << _GLF_IDENTITY(int(7), int(7)), 1 << _GLF_IDENTITY(int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
  {
   GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidnum_workgroup.xyz.x = GLF_merged2_0_3_75_3_1_16GLF_merged3_0_1_13_1_1_17_2_1_13num_workgroupsubgroup_local_idsubgroup_sizenext_virtual_gid.w;
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      continue;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                  }
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                continue;
              }
            }
          }
        }
       else
        {
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (98001 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
      {
       return;
      }
    }
   for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), true && (bool(_GLF_IDENTITY(false, ! (! (false))))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), true && (bool(_GLF_IDENTITY(false, ! (! (false))))))), bool(bool(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), true && (bool(_GLF_IDENTITY(false, ! (! (false))))))))))))))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), true && (bool(_GLF_IDENTITY(false, ! (! (false))))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), true && (bool(_GLF_IDENTITY(false, ! (! (false))))))), bool(bool(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), true && (bool(_GLF_IDENTITY(false, ! (! (false))))))))))))))))), true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), true && (bool(_GLF_IDENTITY(false, ! (! (false))))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), true && (bool(_GLF_IDENTITY(false, ! (! (false))))))), bool(bool(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), true && (bool(_GLF_IDENTITY(false, ! (! (false))))))))))))))))))), true, true, false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      continue;
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(5.7)), bool(false)))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))
      return;
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != int(_GLF_ZERO(0.0, injectionSwitch.x)), ! (_GLF_IDENTITY(! (_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY((! (_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)))), ! (! ((! (_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))))))) && true)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    break;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     buf[GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidnum_workgroup.xyz.z] = 1;
     if(_GLF_DEAD(false))
      break;
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidnum_workgroup.xyz.y + 1 < GLF_merged2_0_3_75_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_13num_workgroupsubgroup_local_idsubgroup_sizesubgroup_size.xyz.z, bool(_GLF_IDENTITY(bvec3(GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidnum_workgroup.xyz.y + 1 < GLF_merged2_0_3_75_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_13num_workgroupsubgroup_local_idsubgroup_sizesubgroup_size.xyz.z, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidnum_workgroup.xyz.y + 1, clamp(GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidnum_workgroup.xyz.y + 1, GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidnum_workgroup.xyz.y + 1, GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidnum_workgroup.xyz.y + 1)) < GLF_merged2_0_3_75_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_13num_workgroupsubgroup_local_idsubgroup_sizesubgroup_size.xyz.z, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidnum_workgroup.xyz.y + 1 < GLF_merged2_0_3_75_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_13num_workgroupsubgroup_local_idsubgroup_sizesubgroup_size.xyz.z, true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y)))))))), _GLF_IDENTITY(true, bool(bvec2(true, false)))))))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((-7.4 * 3287.4465))), bvec2(true, false))), max(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).x < injectionSwitch.y)), false || (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y))))))))))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
          continue;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_IF_TRUE(true))))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4(injectionSwitch.x, abs(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0), (mat4(injectionSwitch.x, abs(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), float(_GLF_FUZZED(-107.487)), bool(false)))))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4(injectionSwitch.x, abs(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(134.957))), _GLF_IDENTITY(0.0, (0.0) + 0.0))), 0.0, 0.0, 1.0, 0.0), (mat4(injectionSwitch.x, abs(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))).y) + 0.0)), float(_GLF_FUZZED(-107.487)), bool(false)))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   else
                    {
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
                      {
                      }
                     else
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                              {
                               do
                                {
                                 return;
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_DEAD(false))
                                    break;
                                   if(_GLF_DEAD(false))
                                    break;
                                   continue;
                                  }
                                 if(_GLF_DEAD(false))
                                  return;
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                              }
                             else
                              {
                              }
                             if(_GLF_DEAD(false))
                              continue;
                             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                              {
                               if(_GLF_DEAD(false))
                                continue;
                               if(_GLF_DEAD(false))
                                {
                                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                  {
                                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))))
                                    {
                                    }
                                   else
                                    {
                                     return;
                                    }
                                  }
                                 if(_GLF_DEAD(false))
                                  break;
                                }
                              }
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                              {
                               if(_GLF_DEAD(false))
                                continue;
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                                {
                                }
                               else
                                {
                                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                                  continue;
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                  {
                                   if(_GLF_DEAD(false))
                                    {
                                     do
                                      {
                                       return;
                                      }
                                     while(_GLF_WRAPPED_LOOP(false));
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       do
                                        {
                                         return;
                                        }
                                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
                                      }
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                      }
                                     else
                                      {
                                       return;
                                      }
                                    }
                                   else
                                    {
                                    }
                                  }
                                }
                               else
                                {
                                }
                              }
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                            continue;
                          }
                         else
                          {
                          }
                         do
                          {
                           if(_GLF_DEAD(false))
                            return;
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     if(_GLF_DEAD(false))
                      break;
                    }
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) - 0))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               break;
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)));
            }
           return;
           if(_GLF_DEAD(false))
            continue;
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (61111 & 0)); _injected_loop_counter --)
    {
     atomicStore(buf[GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidnum_workgroup.xyz.x], uint(2), 4, 64, 0);
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     subgroupAll(false);
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                      return;
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               else
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(2056.9360) : injectionSwitch.x))), float(_GLF_FUZZED(vec4(-7.3, 6.7, 689.020, -4228.5518).y)), bool(false))) > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
            }
           else
            {
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))))))
                return;
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = (int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(8.1)), bool(false))))))))), float(mat2x3(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 1.0, 0.0)))) | 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), int(6)))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      continue;
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
            {
             if(_GLF_DEAD(false))
              break;
             continue;
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), false, false, true))), true, false))))))
            continue;
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (_GLF_IDENTITY(1 | 0, ~ (~ (1 | 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  continue;
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
             continue;
            }
           atomicStore(buf[GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_16_1_1_17_2_1_11next_virtual_gidsubgroup_local_idvirtual_gidnum_workgroup.xyz.x], uint(2), 4, 64, 0);
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false, false, false)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(false, (false) && true), false, false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false, false, false))), bool(bvec2(_GLF_IDENTITY(! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false, false, false))), (! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false, false, false)))) && true), true)))), false || (_GLF_IDENTITY(! (! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false, false, false)))), ! (! (! (! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false, false, false)))))))))))))))
            break;
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           continue;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      break;
     for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           subgroupAll(true);
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
  }
 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))) << (0 << _GLF_IDENTITY(int(3), int(3)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(sinh(unpackUnorm2x16(next_virtual_gid))) : injectionSwitch)).x) + 0.0) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))));
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (_GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))))))));
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
