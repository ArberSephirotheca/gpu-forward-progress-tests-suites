#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))))))
    {
    }
   else
    {
     barrier();
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0))))), float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0))))), 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0)), 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(1.0, 1.0, 0.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0)))))) : _GLF_FUZZED(83.26)))) - 0.0) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))) || false)))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((1 ^ 1) ^ 0)); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))), injectionSwitch)).x)) < _GLF_IDENTITY(injectionSwitch.y, float(float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), vec2(mat2x4((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), 0.0, length(vec2(0.0, 0.0)), 0.0, 0.0, sqrt(0.0), 1.0)))).y)))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch.y, float(float(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch.y, float(float(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))))) || false))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, max(7, 7))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) && true))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
              }
             else
              {
              }
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0)), min((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0)), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0)))) + 0) != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, cos(0.0), 0.0, 0.0, 0.0, 0.0))).x))); _injected_loop_counter --)
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                return;
              }
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0) < 1); _injected_loop_counter ++)
          {
           return;
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             break;
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-24.41) : injectionSwitch.x)), 0.0, round(length(normalize(vec2(1.0, 1.0)))), determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0)), 0.0, 0.0))))), injectionSwitch.x)), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-6.8))))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(-561.820)))), float(_GLF_FUZZED(-835.918)), bool(false)))))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          {
           if(_GLF_DEAD(false))
            return;
           continue;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), false)))))))))))
        continue;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (((0 | (1 | 1)) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) << 0)) | 0)), (int(4)) | 0))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)))))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(89.14), _GLF_FUZZED(757.936)), bvec2(false, false))), injectionSwitch)).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(89.14), _GLF_FUZZED(757.936)), bvec2(false, false))), injectionSwitch)).y))))))
      {
       do
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = (34952 & ((1 ^ 1) << _GLF_IDENTITY(int(3), int(3)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), false || (_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), bool(bool(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))))))))); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     do
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             return;
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)))), (bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))))) && true)))), bool(bvec2(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)))), (bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))))) && true)))), false))))))), bool(bvec4((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))))), false, true, true)))); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                continue;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, min(4, 4))))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
                return;
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   continue;
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)) || false)) && true); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     return;
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                }
               barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              break;
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              break;
             barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(323.263, 2491.3636)))).x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true))), true && (bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true))))))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))), ! (! (! (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))))))))
        barrier();
       barrier();
      }
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, bool(bool(_injected_loop_counter != 1)))); _GLF_IDENTITY(_injected_loop_counter ++, 1 * (_injected_loop_counter ++)))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(max(int(5), int(5)), (max(int(5), int(5))) << 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))), true && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))))))
          {
          }
         else
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ _GLF_IDENTITY(0u, ~ (~ (0u))));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, true))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec4(true, false, true, false)))))))))))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), (bool(bvec3(false, false, false))) && true)) ? _GLF_FUZZED(sign(acosh(-7578.4837))) : injectionSwitch.y))))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false)))))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true, false)))), bool(bvec4(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true, false)))), false, false, false))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(true, (true) || false))))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
               if(_GLF_DEAD(false))
                return;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), (_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), (max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + sqrt(0.0)), injectionSwitch.y)) + 0.0)) / 1.0))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               return;
              }
            }
           do
            {
             return;
             if(_GLF_DEAD(false))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_WRAPPED_LOOP(false), false, false)))) && true));
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | (((1 & 1) << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(29384)))))) >> _GLF_IDENTITY(int(0), int(0))))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))))
                return;
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
      }
     do
      {
       for(int _injected_loop_counter = _GLF_IDENTITY((1 & 1), 0 + ((1 & 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
        {
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(ivec2(int(4), 0)), _GLF_IDENTITY((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) < injectionSwitch.y)) ? int(ivec2(int(4), 0)) : _GLF_FUZZED(93344)), max((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) < injectionSwitch.y)) ? int(ivec2(int(4), 0)) : _GLF_FUZZED(93344)), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) < injectionSwitch.y)) ? int(ivec2(int(4), 0)) : _GLF_FUZZED(93344)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true))))))), false, true)))))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), true, true, false))))
      break;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, true)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), false)), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), false))), bvec2(bvec4(bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), false))), true, false)))))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), false)), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), false))), bvec2(bvec4(bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), false))), true, false)))))))), true && (bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), false)), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), false))), bvec2(bvec4(bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), false))), true, false))))))))))))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), bool(_GLF_IDENTITY(bvec3(! (_GLF_WRAPPED_IF_FALSE(false)), false, false), bvec3(bvec4(bvec3(! (_GLF_WRAPPED_IF_FALSE(false)), false, false), true))))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))))
    {
     for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) - 0))) >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, ~ (~ (7)))))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(_GLF_IDENTITY(147480u, (147480u) | (147480u))))) + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (1u ^ 1u) + (subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), min((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), (_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))))), _GLF_IDENTITY(clamp((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), (false ? _GLF_FUZZED(workgroup_base) : (_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u))))))), ~ (~ ((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), (false ? _GLF_FUZZED(workgroup_base) : (_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))))))))) ^ 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), (~ (_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u))))) << 0u))))), _GLF_IDENTITY(uint(uvec2(clamp((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))) ? _GLF_FUZZED(workgroup_base) : (_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u))))))) ^ 0u), (_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u))))), 1u)), clamp(uint(uvec2(clamp((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), (false ? _GLF_FUZZED(workgroup_base) : (_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u))))))) ^ 0u), (_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u))))), 1u)), uint(uvec2(clamp(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), min((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), (_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u))))))) << (0u >> _GLF_IDENTITY(uint(4u), uint(4u)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, uint(uvec2(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size))) - 0u), _GLF_IDENTITY(1u, (1u) | (0u << _GLF_IDENTITY(uint(4u), uint(4u)))))))), (false ? _GLF_FUZZED(workgroup_base) : (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec2(subgroup_size, 1u)), (uint(uvec2(subgroup_size, 1u))) | (uint(uvec2(subgroup_size, 1u))))))))) ^ 0u), (_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u))))), 1u)), uint(uvec2(clamp((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), (false ? _GLF_FUZZED(workgroup_base) : (_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u))))))) ^ 0u), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), (false ? _GLF_FUZZED(workgroup_base) : (_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u))))))) ^ 0u)) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), (false ? _GLF_FUZZED(workgroup_base) : (_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u))))))) ^ 0u))), (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec2(subgroup_size, 1u)), (uint(uvec2(subgroup_size, 1u))) << 0u)))), 1u)))))) << 0u, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), clamp((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), (_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), (_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), (false ? _GLF_FUZZED(workgroup_base) : (_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u))))))) ^ 0u), (_GLF_IDENTITY(subgroup_size, uint(uvec2(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_size)), 1u)))))) << _GLF_IDENTITY(0u, 0u ^ (0u))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), clamp((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), (_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), (_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), (false ? _GLF_FUZZED(workgroup_base) : (_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u))))))) ^ 0u), (_GLF_IDENTITY(subgroup_size, uint(uvec2(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_size)), 1u)))))) << _GLF_IDENTITY(0u, 0u ^ (0u))) : _GLF_FUZZED(subgroup_size))), ((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), clamp((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))), (false ? _GLF_FUZZED(workgroup_base) : (_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u))))))) ^ 0u), (_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u)))))) << 0u)) ^ 0u) ^ 0u)) + ((subgroup_local_id + 1) % subgroup_size);
 buf[virtual_gid] = 1;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1770.2533), _GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(-66.11)), bool(false)))), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.6)), bvec2(true, false))).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(vec3(0.8, -17.31, -50.27).y)), bool(false)))))));
    }
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) + 0.0) : _GLF_FUZZED(-727.478))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) + 0.0) : _GLF_FUZZED(-727.478))) > injectionSwitch.y))) || false)))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | (0 << _GLF_IDENTITY(int(0), int(0))))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              barrier();
             return;
             if(_GLF_DEAD(false))
              break;
            }
          }
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 return;
                }
              }
             else
              {
              }
            }
           else
            {
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            continue;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(! (! (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(_GLF_IDENTITY(! (! (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && (! (! (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), true))))), true && (! (_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))), ! (! (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), min(int(5), _GLF_IDENTITY(int(5), int(ivec2(int(5), 0))))), int(5)))); _injected_loop_counter --)
                  {
                   return;
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
               return;
              }
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (_GLF_IDENTITY(! ((false) || false), false || (! ((false) || false)))))))))))
        return;
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   do
    {
     if(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), ~ (~ (_GLF_IDENTITY(min(1, 1), (1 | 1) * (_GLF_IDENTITY(min(1, 1), 0 | (min(1, 1))))))))), (true ? _GLF_IDENTITY(1, min(1, 1)) : _GLF_FUZZED(-90476))) < _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), ~ (~ (~ (subgroup_size)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
            return;
           if(_GLF_DEAD(false))
            continue;
           return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       do
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (false)), true, true)))))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))), false)))), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))), false)))))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))), false)))))), false))))), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))), false)))), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))), false)))))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))), false)))))), false))))))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))), false)))), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))), false)))))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))), false)))))), false)))))))))))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
             return;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              {
               if(_GLF_DEAD(false))
                break;
               continue;
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             break;
            }
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               if(_GLF_DEAD(false))
                continue;
               do
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   return;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               return;
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, min(4, 4)), 64, _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, int(ivec4(0, 1, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-70423) : _GLF_IDENTITY(0, (0) << 0))), _GLF_IDENTITY(1, 0 + (1))))), 0)));
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
            break;
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 return;
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true)) || false))));
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false)) || false))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, 0 + (_injected_loop_counter --)))
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1))))))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     return;
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  break;
                }
               barrier();
              }
            }
           else
            {
            }
          }
        }
       else
        {
        }
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), ! (! (_GLF_DEAD(false))))))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false))))))), (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))) && true)) || false)), ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))), bool(bool(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false))))))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! _GLF_IDENTITY((_GLF_DEAD(false)), false || ((_GLF_DEAD(false)))))))))))), (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))) && true)) || false))) || false)))
        return;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (! (true))))), ((_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (! (true)))))) && true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 continue;
                }
              }
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bool((false)))) || false)))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
               continue;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (_GLF_IDENTITY(0 ^ 1, int(_GLF_IDENTITY(ivec2(0 ^ 1, _GLF_IDENTITY(1, (1) >> 0)), (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0) ^ 1, (_GLF_IDENTITY(0, (0) - 0) ^ 1) - 0), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, max(1, 1))))) >> 0))) | ivec2(0, 0))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), _injected_loop_counter))) | 0) != 0); _injected_loop_counter --)
            {
             subgroupAll(false);
            }
          }
        }
       else
        {
        }
      }
     else
      {
       atomicStore(buf[next_virtual_gid], uint(2), 4, 64, _GLF_IDENTITY(0, int(ivec4(_GLF_IDENTITY(0, 0 ^ (0)), 0, 0, 1))));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(false, (false) && true), true), bvec3(bvec3(bvec3(false, false, true))))))))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 return;
                }
              }
             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                return;
               return;
              }
             if(_GLF_DEAD(false))
              continue;
            }
           return;
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) >> (-86295 & 0)), (0) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                    break;
                   return;
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).x > injectionSwitch.y))))
                barrier();
               return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) + 0.0) > injectionSwitch.y))));
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 barrier();
                }
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
              return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
             subgroupAll(true);
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-4.7, _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))))).x), max(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-4.7, _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))))).x), (false ? _GLF_FUZZED(-721.972) : _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-4.7, _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))))).x))), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-4.7, _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))))).x)))), (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-4.7, _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))))).x), max(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-4.7, _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))))).x), (false ? _GLF_FUZZED(-721.972) : _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-4.7, _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))))).x))), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-4.7, _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))))).x)))), false || (_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-4.7, _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))))).x), max(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-4.7, _GLF_IDENTITY(_GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))), 1.0 * (_GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))))))).x), (false ? _GLF_FUZZED(-721.972) : _GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-4.7, _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))))).x), (true ? _GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(vec2(_GLF_IDENTITY(-4.7, _GLF_IDENTITY(float(float(-4.7)), 0.0 + (float(float(-4.7))))), _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))), max(_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(vec2(_GLF_IDENTITY(-4.7, _GLF_IDENTITY(float(float(-4.7)), 0.0 + (float(float(-4.7))))), _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))), clamp(_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(vec2(_GLF_IDENTITY(-4.7, _GLF_IDENTITY(float(float(-4.7)), 0.0 + (float(float(-4.7))))), _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))), mix(vec2(_GLF_FUZZED(-86.24), _GLF_FUZZED(-142.652)), vec2((true ? injectionSwitch : _GLF_FUZZED(vec2(_GLF_IDENTITY(-4.7, _GLF_IDENTITY(float(float(-4.7)), 0.0 + (float(float(-4.7))))), _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))))[0], (true ? injectionSwitch : _GLF_FUZZED(vec2(_GLF_IDENTITY(-4.7, _GLF_IDENTITY(float(float(-4.7)), 0.0 + (float(float(-4.7))))), _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))))[1]), bvec2(true, true))), true ? injectionSwitch : _GLF_FUZZED(vec2(_GLF_IDENTITY(-4.7, _GLF_IDENTITY(float(float(-4.7)), 0.0 + (float(float(-4.7))))), _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))), true ? injectionSwitch : _GLF_FUZZED(vec2(_GLF_IDENTITY(-4.7, _GLF_IDENTITY(float(float(-4.7)), 0.0 + (float(float(-4.7))))), _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))))), true ? injectionSwitch : _GLF_FUZZED(vec2(_GLF_IDENTITY(-4.7, _GLF_IDENTITY(float(float(-4.7)), 0.0 + (float(float(-4.7))))), _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))))))).x, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(vec2(_GLF_IDENTITY(-4.7, _GLF_IDENTITY(float(float(-4.7)), 0.0 + (float(float(-4.7))))), _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))), max(_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(vec2(_GLF_IDENTITY(-4.7, _GLF_IDENTITY(float(float(-4.7)), 0.0 + (float(float(-4.7))))), _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))), clamp(_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(vec2(_GLF_IDENTITY(-4.7, _GLF_IDENTITY(float(float(-4.7)), 0.0 + (float(float(-4.7))))), _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))), mix(vec2(_GLF_FUZZED(-86.24), _GLF_FUZZED(-142.652)), vec2((true ? injectionSwitch : _GLF_FUZZED(vec2(_GLF_IDENTITY(-4.7, _GLF_IDENTITY(float(float(-4.7)), 0.0 + (float(float(-4.7))))), _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))))[0], (true ? injectionSwitch : _GLF_FUZZED(vec2(_GLF_IDENTITY(-4.7, _GLF_IDENTITY(float(float(-4.7)), 0.0 + (float(float(-4.7))))), _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))))[1]), bvec2(true, true))), true ? injectionSwitch : _GLF_FUZZED(vec2(_GLF_IDENTITY(-4.7, _GLF_IDENTITY(float(float(-4.7)), 0.0 + (float(float(-4.7))))), _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))), true ? injectionSwitch : _GLF_FUZZED(vec2(_GLF_IDENTITY(-4.7, _GLF_IDENTITY(float(float(-4.7)), 0.0 + (float(float(-4.7))))), _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))))), true ? injectionSwitch : _GLF_FUZZED(vec2(_GLF_IDENTITY(-4.7, _GLF_IDENTITY(float(float(-4.7)), 0.0 + (float(float(-4.7))))), _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))))))).x, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(vec2(_GLF_IDENTITY(-4.7, _GLF_IDENTITY(float(float(-4.7)), 0.0 + (float(float(-4.7))))), _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))), max(_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(vec2(_GLF_IDENTITY(-4.7, _GLF_IDENTITY(float(float(-4.7)), 0.0 + (float(float(-4.7))))), _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))), clamp(_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(vec2(_GLF_IDENTITY(-4.7, _GLF_IDENTITY(float(float(-4.7)), 0.0 + (float(float(-4.7))))), _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))), mix(vec2(_GLF_FUZZED(-86.24), _GLF_FUZZED(-142.652)), vec2((true ? injectionSwitch : _GLF_FUZZED(vec2(_GLF_IDENTITY(-4.7, _GLF_IDENTITY(float(float(-4.7)), 0.0 + (float(float(-4.7))))), _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))))[0], (true ? injectionSwitch : _GLF_FUZZED(vec2(_GLF_IDENTITY(-4.7, _GLF_IDENTITY(float(float(-4.7)), 0.0 + (float(float(-4.7))))), _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))))[1]), bvec2(true, true))), true ? injectionSwitch : _GLF_FUZZED(vec2(_GLF_IDENTITY(-4.7, _GLF_IDENTITY(float(float(-4.7)), 0.0 + (float(float(-4.7))))), _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))), true ? injectionSwitch : _GLF_FUZZED(vec2(_GLF_IDENTITY(-4.7, _GLF_IDENTITY(float(float(-4.7)), 0.0 + (float(float(-4.7))))), _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))))), true ? injectionSwitch : _GLF_FUZZED(vec2(_GLF_IDENTITY(-4.7, _GLF_IDENTITY(float(float(-4.7)), 0.0 + (float(float(-4.7))))), _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))))))).x))) : _GLF_FUZZED((-84.19 / -7.3)))))), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(vec2(-4.7, _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))), clamp(_GLF_FUZZED(vec2(-4.7, _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))), _GLF_FUZZED(vec2(-4.7, _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))), _GLF_IDENTITY(_GLF_FUZZED(vec2(-4.7, _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))), mix(vec2(_GLF_FUZZED(-0.9), (_GLF_FUZZED(vec2(-4.7, _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))))[1]), vec2((_GLF_FUZZED(vec2(-4.7, _GLF_IDENTITY(4.3, min(4.3, _GLF_IDENTITY(4.3, mix(float(_GLF_FUZZED((- 6.6))), float(4.3), bool(true))))))))[0], _GLF_FUZZED(-52.89)), bvec2(true, false))))))).x))))))) || false)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             break;
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
              return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(_GLF_FUZZED(1.0), ((injectionSwitch) * mat2(1.0))[1]), vec2(((injectionSwitch) * mat2(1.0))[0], _GLF_FUZZED(vec4(-958.924, -64.60, 8.5, 2.0).w)), bvec2(true, false)))).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(_GLF_FUZZED(1.0), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), (_GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), (((injectionSwitch) * mat2(1.0))) / exp(vec2(0.0, 0.0)))) / vec2(1.0, 1.0))[1]), vec2(((injectionSwitch) * mat2(1.0))[0], _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(vec4(-958.924, -64.60, 8.5, 2.0).w, max(_GLF_IDENTITY(vec4(-958.924, -64.60, 8.5, 2.0).w, (true ? vec4(-958.924, -64.60, 8.5, 2.0).w : _GLF_FUZZED(4.3))), vec4(-958.924, -64.60, 8.5, 2.0).w))), min(_GLF_FUZZED(_GLF_IDENTITY(vec4(-958.924, -64.60, 8.5, 2.0).w, max(_GLF_IDENTITY(vec4(-958.924, -64.60, 8.5, 2.0).w, (true ? vec4(-958.924, -64.60, 8.5, 2.0).w : _GLF_FUZZED(4.3))), vec4(-958.924, -64.60, 8.5, 2.0).w))), _GLF_FUZZED(_GLF_IDENTITY(vec4(-958.924, -64.60, 8.5, 2.0).w, max(_GLF_IDENTITY(vec4(-958.924, -64.60, 8.5, 2.0).w, (true ? vec4(-958.924, -64.60, 8.5, 2.0).w : _GLF_FUZZED(4.3))), vec4(-958.924, -64.60, 8.5, 2.0).w)))))), bvec2(true, false)))).x > injectionSwitch.y)) || _GLF_IDENTITY(false, ! (! (false)))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bool(_GLF_IDENTITY(false, (false) && true)))), _GLF_IDENTITY(false, ! (! (false))), false, true))), bool(bvec3(false, true, false)))))
          {
           for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 0.0 + (_GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, float(mat3x2(0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), 0.0, 0.0)), 0.0)), injectionSwitch.x)) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 return;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))))
                  break;
                }
              }
            }
           do
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), false)))))) || false), _GLF_IDENTITY(false || (false), (false || (false)) || false))), bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, true, false)))) || false, _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(false, bool(bvec3(false, true, false)))) || false, false)), bool(bvec2(bool(bvec2((_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), false))))), true, false)))) || false, false)), true))))), false || (false))), true, false, _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-6275.5677))) > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-6275.5677))) > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-6275.5677))) > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), false || (! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-6275.5677))) > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))))))))))) && true)))
            {
             do
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              break;
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 else
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | (-30486 & 0))); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          return;
                         continue;
                        }
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3(injectionSwitch.x, determinant(mat3(0.0, 0.0, 0.0, length(0.0), 0.0, 0.0, 1.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, 1.0, sin(0.0)), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, sin(0.0)), vec3(0.0, 1.0, 0.0))), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, exp(0.0), 0.0, 0.0), (mat3(injectionSwitch.x, determinant(mat3(0.0, 0.0, 0.0, length(0.0), 0.0, 0.0, 1.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, 1.0, sin(0.0)), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, sin(0.0)), vec3(0.0, 1.0, 0.0))), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, exp(0.0), 0.0, 0.0)) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) > injectionSwitch.y))));
                      }
                     if(_GLF_DEAD(false))
                      break;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              return;
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(true, ! (! (true))), true), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, true), bvec3(bvec3(bvec3(_GLF_WRAPPED_IF_FALSE(false), true, true)))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, true), bvec3(bvec3(bvec3(_GLF_WRAPPED_IF_FALSE(false), true, true)))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, true), bvec3(bvec3(bvec3(_GLF_WRAPPED_IF_FALSE(false), true, true)))), true)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, true), bvec3(bvec3(bvec3(_GLF_WRAPPED_IF_FALSE(false), true, true)))), true))))))))), false))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0))).x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), ! (! (bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))))
              {
               do
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-65.45) : injectionSwitch.y))))))));
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))), (! (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))) || false)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))), (! (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))) || false)))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))), (! (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))) || false))))) || false)) && true))))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), ! (! (bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))))))))));
   if(_GLF_DEAD(false))
    return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
