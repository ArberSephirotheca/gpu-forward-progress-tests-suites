#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 0) uniform buf0 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) >> 0)), int(ivec2(~ (_GLF_IDENTITY(0, (0) >> 0)), 0)))))) / 1), max(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) >> 0)), int(ivec2(~ (_GLF_IDENTITY(0, (0) >> 0)), 0)))))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) >> 0)), int(ivec2(~ (_GLF_IDENTITY(0, (0) >> 0)), 0)))))) / 1), clamp(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) >> 0)), int(ivec2(~ (_GLF_IDENTITY(0, (0) >> 0)), 0)))))) / 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) >> 0)), int(ivec2(~ (_GLF_IDENTITY(0, (0) >> 0)), 0)))))) / 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) >> 0)), int(ivec2(~ (_GLF_IDENTITY(0, (0) >> 0)), 0)))))) / 1)))))], gl_NumWorkGroups[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(1, (0 | 0) ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, (1) - 0), 1)), (1) - 0)) - 0), ~ (~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, (1) - 0), 1)), _GLF_IDENTITY((1) - 0, ~ (_GLF_IDENTITY(~ ((1) - 0), int(ivec3(~ ((1) - 0), 1, 1))))))) - 0))))))))) - 0)], gl_NumWorkGroups[_GLF_IDENTITY(2, max(2, 2))])), _GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(gl_NumWorkGroups[_GLF_IDENTITY(0, (0) / 1)], min(_GLF_IDENTITY(gl_NumWorkGroups[_GLF_IDENTITY(0, (0) / 1)], (_GLF_IDENTITY(gl_NumWorkGroups[_GLF_IDENTITY(0, (0) / 1)], (gl_NumWorkGroups[_GLF_IDENTITY(0, (0) / 1)]) / 1u)) | (gl_NumWorkGroups[_GLF_IDENTITY(0, (0) / 1)])), _GLF_IDENTITY(gl_NumWorkGroups[_GLF_IDENTITY(0, (0) / 1)], max(gl_NumWorkGroups[_GLF_IDENTITY(0, (0) / 1)], gl_NumWorkGroups[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-11771)))))) / 1)])))), gl_NumWorkGroups[_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(1, (0 | 0) ^ (_GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, min((1) - 0, (1) - 0)))))))) - 0)], gl_NumWorkGroups[_GLF_IDENTITY(2, max(2, 2))]))), (_GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(gl_NumWorkGroups[_GLF_IDENTITY(0, (0) / 1)], min(_GLF_IDENTITY(gl_NumWorkGroups[_GLF_IDENTITY(0, (0) / 1)], (_GLF_IDENTITY(gl_NumWorkGroups[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) / 1)], (gl_NumWorkGroups[_GLF_IDENTITY(0, (0) / 1)]) / 1u)) | (gl_NumWorkGroups[_GLF_IDENTITY(0, (0) / 1)])), _GLF_IDENTITY(gl_NumWorkGroups[_GLF_IDENTITY(0, (0) / 1)], max(gl_NumWorkGroups[_GLF_IDENTITY(0, (0) / 1)], gl_NumWorkGroups[_GLF_IDENTITY(0, (0) / 1)])))), gl_NumWorkGroups[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(1, (0 | 0) ^ (_GLF_IDENTITY(1, _GLF_IDENTITY((1) - _GLF_IDENTITY(0, (0) - (1 ^ 1)), min((1) - 0, (1) - 0)))))))) - 0)], _GLF_IDENTITY(gl_NumWorkGroups[_GLF_IDENTITY(2, max(2, 2))], (gl_NumWorkGroups[_GLF_IDENTITY(2, max(2, 2))]) | (gl_NumWorkGroups[_GLF_IDENTITY(2, max(2, 2))]))))), uvec3(1u, 1u, 1u) * (uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(gl_NumWorkGroups[_GLF_IDENTITY(0, (0) / 1)], min(_GLF_IDENTITY(gl_NumWorkGroups[_GLF_IDENTITY(0, (0) / 1)], (_GLF_IDENTITY(gl_NumWorkGroups[_GLF_IDENTITY(0, (0) / 1)], (gl_NumWorkGroups[_GLF_IDENTITY(0, (0) / 1)]) / 1u)) | (gl_NumWorkGroups[_GLF_IDENTITY(0, (0) / 1)])), _GLF_IDENTITY(gl_NumWorkGroups[_GLF_IDENTITY(_GLF_IDENTITY(0, (0) / 1), max(_GLF_IDENTITY(0, (0) / 1), _GLF_IDENTITY(0, (0) / 1)))], max(gl_NumWorkGroups[_GLF_IDENTITY(0, (0) / 1)], gl_NumWorkGroups[_GLF_IDENTITY(0, (0) / 1)])))), gl_NumWorkGroups[_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(1, (0 | 0) ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, min((1) - 0, (1) - 0))), ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1), clamp(_GLF_IDENTITY((1), ~ (~ ((1)))), (1), (1))) - 0, min((1) - 0, (1) - 0))))))))))), min(_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(1, (0 | 0) ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, min((1) - 0, (1) - 0))), ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1), clamp(_GLF_IDENTITY((1), ~ (~ ((1)))), (1), (1))) - 0, min((1) - 0, (1) - 0))))))))))), 0 | ((_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(1, (0 | 0) ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, min((1) - 0, (1) - 0))), ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1), clamp(_GLF_IDENTITY((1), ~ (~ ((1)))), (1), (1))) - 0, min((1) - 0, (1) - 0))))))))))))), (_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(1, (0 | 0) ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, min((1) - 0, (1) - 0))), ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1), clamp(_GLF_IDENTITY((1), ~ (~ ((1)))), (1), (1))) - 0, min((1) - 0, (1) - 0))))))))))))) - 0)], gl_NumWorkGroups[_GLF_IDENTITY(2, max(2, 2))])))))) << uvec3(0u, 0u, 0u))).x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec4(_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID))), 0u))), gl_WorkGroupID)), clamp(_GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec4(_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID))), 0u))), gl_WorkGroupID)), _GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec4(_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID))), 0u))), gl_WorkGroupID)), _GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec4(_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID))), 0u))), gl_WorkGroupID)))), max(gl_WorkGroupID, gl_WorkGroupID)))).x, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec4(_GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(uvec3(gl_WorkGroupID), (uvec3(gl_WorkGroupID)) | uvec3(0u, 0u, 0u)))), 0u))), gl_WorkGroupID)), (_GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec4(_GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(uvec3(gl_WorkGroupID), (uvec3(gl_WorkGroupID)) | uvec3(0u, 0u, 0u)))), 0u))), gl_WorkGroupID))) << uvec3(0u, 0u, 0u)), max(gl_WorkGroupID, gl_WorkGroupID)))).x, (_GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, 0u) | (gl_WorkGroupID)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec4(_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID))), 0u))), gl_WorkGroupID)), (_GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec4(_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID))), 0u))), gl_WorkGroupID))) << (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u))), max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID))))))).x) - 0u), 1u), (false ? _GLF_FUZZED(uvec2(152933u, 27096u)) : uvec2(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID)), uvec3(uvec3(gl_WorkGroupID))), 0u))), gl_WorkGroupID)), max(gl_WorkGroupID, gl_WorkGroupID)))).x, (_GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec4(_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID))), 0u))), gl_WorkGroupID)), max(gl_WorkGroupID, gl_WorkGroupID)))).x) - 0u), 1u)))));
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)), (subgroup_id) ^ 0u), (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) | 0u) * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))) | (1u ^ _GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), (1u | 1u) * (~ (1u))))))) * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id + 1, min(_GLF_IDENTITY(subgroup_local_id + 1, 0u | (_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))))), _GLF_IDENTITY(subgroup_local_id + 1, min(_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec2(subgroup_local_id + 1, 0u))), subgroup_local_id + 1))))) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(subgroup_size, 0u, 1u), (uvec3(subgroup_size, 0u, 1u)) | uvec3(0u, 0u, 0u))), 0u | (uint(_GLF_IDENTITY(uvec3(subgroup_size, 0u, 1u), (uvec3(subgroup_size, 0u, 1u)) | uvec3(0u, 0u, 0u)))))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY((_GLF_IDENTITY(1, (1) * 1) << _GLF_IDENTITY(int(5), int(5))), ((_GLF_IDENTITY(1, (1) * 1) << _GLF_IDENTITY(int(5), int(5)))) ^ _GLF_IDENTITY(0, 0 | (0))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, int(ivec4(_GLF_IDENTITY(0, int(int(0))), 0, _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, _GLF_IDENTITY(0 + (0), 0 ^ (_GLF_IDENTITY(0 + (0), (0 + (0)) | (0 + (0)))))))), 1)))))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & (1 & 1))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(true, false, true))), ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)), bool(bvec2(bool(bvec3(true, false, true)), false)))))))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
                {
                 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) | 0) - 0), _injected_loop_counter)) > (1 ^ _GLF_IDENTITY(1, (1) * _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), ~ (~ (int(ivec2(1, 0))))))))), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(1, 0 | (1)) ^ 1))), ((_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) >> 0), 0)), (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) >> 0), 0))) ^ 0) | (1)) ^ 1)))) && true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))); _injected_loop_counter --)
                  {
                   buf[virtual_gid] = 1;
                  }
                }
               else
                {
                }
              }
            }
          }
         else
          {
          }
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), clamp(~ (0), ~ (0), _GLF_IDENTITY(~ (0), (~ (0)) | (_GLF_IDENTITY(~ (0), 0 | (~ (0))))))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, min(1, 1))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, min(1, 1)))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), ! (! ((_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))), ! (! (bool(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) / 1))), _GLF_IDENTITY(! (! ((_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), bool(bvec2(! (! ((_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), false)))))))))), true && ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) && true)))))))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), bool(bvec3(true, false, false)))))
              {
               for(int _injected_loop_counter = (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, min(0, 0)), 0)) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(subgroup_local_id + 1 < _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 1u * (_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))), min(_GLF_IDENTITY(subgroup_size, 1u * (_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))), _GLF_IDENTITY(subgroup_size, 1u * (_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))))), subgroup_size)))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), (true) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), false))))))), ! (_GLF_IDENTITY(! (bool(bvec3(true, false, false))), bool(bvec2(! (bool(bvec3(true, false, false))), false))))))), bool(bvec3(_GLF_IDENTITY(true, (true) && true), false, true))))))))
                          {
                           _GLF_IDENTITY(buf[next_virtual_gid] = 2, _GLF_IDENTITY((buf[next_virtual_gid] = 2), ((buf[next_virtual_gid] = 2)) >> 0u) / 1u);
                          }
                         else
                          {
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                   else
                    {
                    }
                   for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, min(2, 2))), (int(2)) | (_GLF_IDENTITY(0, (0) << 0) ^ 0)))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, min(0, 0)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | 0)))); _injected_loop_counter --)
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                              {
                               do
                                {
                                 do
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     do
                                      {
                                       do
                                        {
                                         do
                                          {
                                           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                                            {
                                            }
                                           else
                                            {
                                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                              {
                                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (! (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))), (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                                                {
                                                }
                                               else
                                                {
                                                 do
                                                  {
                                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                                    {
                                                    }
                                                   else
                                                    {
                                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
                                                      {
                                                      }
                                                     else
                                                      {
                                                       for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0), (_GLF_IDENTITY(_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0), (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0)) + 0.0) : _GLF_FUZZED(-37.89), max(true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0), (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0)) + 0.0) : _GLF_FUZZED(-37.89), true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0), (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0)) + 0.0) : _GLF_FUZZED(-37.89))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0), (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(19.15) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(19.15) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))) : _GLF_FUZZED(5846.5447))) / 1.0)) + 0.0) : _GLF_FUZZED(-37.89)) - 0.0))), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))) / 1.0))), 0.0 + (injectionSwitch.y))), min((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(824.583)))))) / 1.0), 0.0 + (injectionSwitch.y)), float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(824.583)))))) / 1.0), 0.0 + (injectionSwitch.y)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(824.583)))))) / 1.0), 0.0 + (injectionSwitch.y)) : _GLF_FUZZED(206.057))), round(length(normalize(vec2(1.0, 1.0)))), 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), tan(0.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), abs(0.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(mat3(1.0) * (mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-1598.1273, 4.4)))).y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(824.583)))))) / 1.0), 0.0 + (injectionSwitch.y)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(824.583)))))) / 1.0), 0.0 + (injectionSwitch.y)) : _GLF_FUZZED(206.057))), round(length(normalize(vec2(1.0, 1.0)))), 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), tan(0.0), round(length(normalize(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), (vec4(1.0, 1.0, 1.0, 1.0)) - tan(abs(vec4(0.0, 0.0, 0.0, 0.0))))))), abs(0.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)))), (mat3(1.0) * (mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(824.583)))))) / 1.0), 0.0 + (injectionSwitch.y)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(824.583)))))) / 1.0), 0.0 + (injectionSwitch.y)) : _GLF_FUZZED(206.057))), round(length(normalize(vec2(1.0, 1.0)))), 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), tan(0.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), abs(0.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0))))) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(419.513) : _GLF_IDENTITY(0.0, float(mat2x4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(vec2(1.0, _GLF_ZERO(0.0, injectionSwitch.x))))))))))) + _GLF_IDENTITY((injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.y)) - 0.0, float(mat2x3(((injectionSwitch.y)) - 0.0, determinant(mat4(0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 0.0)))))), mix(float(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0), 0.0 + _GLF_IDENTITY((injectionSwitch.y), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (injectionSwitch.y) : _GLF_FUZZED(sinh(8.3)))))), max((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, injectionSwitch.y))) / 1.0), 0.0 + _GLF_IDENTITY((injectionSwitch.y), mix(float(_GLF_FUZZED(-6963.7610)), float(_GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) / _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) * 1.0)) - _GLF_IDENTITY(length(0.0), float(mat4x2(_GLF_IDENTITY(length(0.0), (length(0.0)) * 1.0), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, sqrt(0.0)), vec4(1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0)), dot(vec4(1.0, 0.0, 0.0, sqrt(0.0)), vec4(1.0, length(vec2(0.0, 0.0)), sin(0.0), 0.0))), tan(0.0), 0.0, 0.0)))))), bool(true))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(faceforward(7280.3503, 1555.8151, -8961.3469)) : _GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])))), injectionSwitch[1])).y))) / 1.0), 0.0 + (injectionSwitch.y))), (false ? _GLF_FUZZED(-877.694) : _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))) / 1.0), 0.0 + (injectionSwitch.y))), float(mat4x3((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, int(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(1, max(1, 1))))])).y))) / 1.0), 0.0 + (injectionSwitch.y))), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, sqrt(1.0), 0.0, 0.0, 0.0)))))))), float(_GLF_FUZZED(-141.083)), bool(false))), mix(float(_GLF_FUZZED(67.60)), float(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), 0.0, abs(0.0), 1.0, 0.0, 1.0, 0.0, 0.0)), mix(vec2((vec2(mat3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), 0.0, abs(0.0), 1.0, 0.0, 1.0, 0.0, 0.0)))[0], _GLF_FUZZED(-9.9)), vec2(_GLF_FUZZED(-8238.7080), (vec2(mat3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), 0.0, abs(0.0), 1.0, 0.0, 1.0, 0.0, 0.0)))[1]), bvec2(false, true)))).y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(419.513) : _GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))))))) + _GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) - 0.0))), mix(float(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0), 0.0 + (injectionSwitch.y))), max((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, exp(0.0), 0.0))))))))), (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0), 0.0 + _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, 1.0, 0.0, log(1.0), 0.0, 1.0, 1.0, tan(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0)))), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0)))), mix(float(_GLF_FUZZED(-6963.7610)), float(_GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) / 1.0)), bool(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) && true), false)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0), 0.0 + (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)))))), float(_GLF_FUZZED(-141.083)), bool(false)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - _GLF_IDENTITY(0.0, min(0.0, 0.0)))) + abs(0.0))) / 1.0), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) - 0.0, float(mat4x3((injectionSwitch.y) - 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, sqrt(1.0), 0.0, 1.0, 0.0, 0.0, 0.0))))) / 1.0), 1.0, 1.0, 0.0)), (false ? _GLF_FUZZED(3700.1851) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, (injectionSwitch.y) - 0.0)) / 1.0), 1.0, 1.0, 0.0)), min(float(vec4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, (injectionSwitch.y) - 0.0)) / 1.0), 1.0, 1.0, 0.0)), float(vec4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, (injectionSwitch.y) - 0.0)) / 1.0), 1.0, 1.0, 0.0)))), (_GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, (injectionSwitch.y) - 0.0)) / 1.0), 1.0, 1.0, 0.0)), min(float(vec4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, (injectionSwitch.y) - 0.0)) / 1.0), 1.0, 1.0, 0.0)), float(vec4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, (injectionSwitch.y) - 0.0)) / 1.0), 1.0, 1.0, 0.0))))) - 0.0), clamp(float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) / 1.0), 1.0, 1.0, 0.0)), float(vec4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-51.89)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.y) - _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)))) / 1.0), 1.0, 1.0, 0.0)), float(vec4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) / 1.0), 1.0, 1.0, 0.0)))), (false ? _GLF_FUZZED(sin(31.48)) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, (injectionSwitch.y) - 0.0)) / 1.0), mix(float(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, (injectionSwitch.y) - 0.0)) / 1.0)), float(_GLF_FUZZED((+ -67.89))), bool(false))), 1.0, 1.0, 0.0)), min(float(vec4(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, (injectionSwitch.y) - 0.0)) / 1.0, ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, (injectionSwitch.y) - 0.0)) / 1.0) + 0.0)), 1.0, 1.0, 0.0)), float(vec4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, (injectionSwitch.y) - 0.0)) / 1.0), 1.0, 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-4.6)), float(0.0), bool(true))), 0.0, 0.0)))))), clamp(_GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) / 1.0), 1.0, 1.0, 0.0), mat4(1.0) * (vec4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) / 1.0), 1.0, 1.0, 0.0)))), max(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) / 1.0), 1.0, 1.0, 0.0), mat4(1.0) * (vec4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) / 1.0), 1.0, 1.0, 0.0)))), float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) / 1.0), 1.0, 1.0, 0.0), mat4(1.0) * (vec4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) / 1.0), 1.0, 1.0, 0.0)))))), float(vec4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-51.89)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.y) - _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)))) / 1.0), 1.0, 1.0, 0.0)), float(vec4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) / 1.0), 1.0, 1.0, 0.0)))), min(_GLF_IDENTITY(_GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))) - 0.0)) / 1.0), 1.0, _GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) / 1.0))), 0.0)), min(float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, (injectionSwitch.y) - 0.0)) / 1.0), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, (injectionSwitch.y) - 0.0)) / 1.0), (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, (injectionSwitch.y) - 0.0)) / 1.0)) / 1.0)), float(_GLF_FUZZED(762.682)), bool(false))), 1.0, 1.0, 0.0)), float(vec4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)), injectionSwitch, injectionSwitch)).y, (injectionSwitch.y) - 0.0)) / 1.0), 1.0, 1.0, 0.0)))), clamp(float(vec4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) / 1.0), 1.0, 1.0, 0.0)), float(vec4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-51.89)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.y) - _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)))) / 1.0), 1.0, 1.0, 0.0)), float(vec4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) / 1.0), 1.0, 1.0, 0.0)))), _GLF_IDENTITY(_GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, (injectionSwitch.y) - 0.0)) / 1.0), 1.0, 1.0, 0.0)), min(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, (injectionSwitch.y) - 0.0)) / 1.0), 1.0, 1.0, 0.0), clamp(vec4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, (injectionSwitch.y) - 0.0)) / 1.0), 1.0, 1.0, 0.0), vec4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, (injectionSwitch.y) - 0.0)) / 1.0), 1.0, 1.0, 0.0), vec4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, (injectionSwitch.y) - 0.0)) / 1.0), 1.0, 1.0, 0.0)))), float(vec4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, (injectionSwitch.y) - 0.0)) / 1.0), 1.0, 1.0, 0.0)))), clamp(float(vec4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) / 1.0), 1.0, 1.0, 0.0)), float(vec4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-51.89)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.y) - _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)))) / 1.0), 1.0, 1.0, 0.0)), float(vec4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) / 1.0), 1.0, 1.0, 0.0))))))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, 0 ^ (0))); _injected_loop_counter --)
                                                        {
                                                         do
                                                          {
                                                           if(_GLF_WRAPPED_IF_FALSE(false))
                                                            {
                                                            }
                                                           else
                                                            {
                                                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y)))))))))))
                                                              {
                                                              }
                                                             else
                                                              {
                                                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                                                {
                                                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                                                  {
                                                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                                                    {
                                                                    }
                                                                   else
                                                                    {
                                                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                                                      {
                                                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                                                        {
                                                                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                                                          {
                                                                           subgroupAll(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), false || ((false)))))) || false), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), (false) || false) || _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), ((false)) || false)), false || (bool(_GLF_IDENTITY((false), ((false)) || false)))))), true))), (false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)))));
                                                                          }
                                                                         else
                                                                          {
                                                                          }
                                                                        }
                                                                       else
                                                                        {
                                                                        }
                                                                      }
                                                                     else
                                                                      {
                                                                      }
                                                                    }
                                                                  }
                                                                 else
                                                                  {
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                         while(_GLF_WRAPPED_LOOP(false));
                                                        }
                                                      }
                                                    }
                                                  }
                                                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                }
                                              }
                                             else
                                              {
                                              }
                                            }
                                          }
                                         while(_GLF_WRAPPED_LOOP(false));
                                        }
                                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                      }
                                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true)));
                                    }
                                  }
                                 while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-4.3) : injectionSwitch.x)) > injectionSwitch.y)), _GLF_IDENTITY((bool((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-4.3) : injectionSwitch.x)) > injectionSwitch.y))), bool(bvec4((bool((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-4.3) : injectionSwitch.x)) > injectionSwitch.y))), false, true, false))) && true), _GLF_IDENTITY(false || (bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y)))))))), true && (false || (bool((injectionSwitch.x > injectionSwitch.y)))))))))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-4.3) : injectionSwitch.x)) > injectionSwitch.y)), (bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((injectionSwitch / -1.0)) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, 0.0), vec3(0.0, 1.0, 0.0))), exp(0.0), 0.0, 1.0), transpose(transpose(mat3x2(injectionSwitch, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), exp(0.0), 0.0, 1.0))))), (true ? vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)))) * 1.0), 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), exp(0.0), 0.0, 1.0), transpose(transpose(mat3x2(injectionSwitch, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), vec3(mat3x2(vec3(0.0, 1.0, 0.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0))), vec3(0.0, 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-4.5))), 0.0, 0.0))))), exp(0.0), 0.0, 1.0))))) : _GLF_FUZZED(vec2(-0.2, 947.843))))))).x, (false ? _GLF_FUZZED(-4.3) : injectionSwitch.x)) > injectionSwitch.y))) && true), _GLF_IDENTITY(false || (bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y)))))))), true && _GLF_IDENTITY((false || (bool((injectionSwitch.x > injectionSwitch.y)))), true && ((false || (bool((injectionSwitch.x > injectionSwitch.y))))))))))))) && true), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), _GLF_IDENTITY(float(_GLF_FUZZED(-51.73)), (_GLF_IDENTITY(float(_GLF_FUZZED(-51.73)), (_GLF_IDENTITY(float(_GLF_FUZZED(-51.73)), 0.0 + (float(_GLF_FUZZED(-51.73))))) * 1.0)) / abs(1.0)), _GLF_IDENTITY(bool(false), ! (! (bool(false)))))), 1.0, tan(0.0), 1.0, 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false ? _GLF_FUZZED(-4.3) : injectionSwitch.x, float(mat4x3(false ? _GLF_FUZZED(-4.3) : injectionSwitch.x, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, sin(0.0), 0.0, 1.0, 0.0))))) > injectionSwitch.y)), _GLF_IDENTITY(false || (bool((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(acos(atan(730.387, -7.7))) : injectionSwitch.x)) > injectionSwitch.y))), true && (false || _GLF_IDENTITY((bool((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-54.33))) > injectionSwitch.y))), bool(bvec4((bool((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-54.33))) > injectionSwitch.y))), false, true, false))))))))), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-4.3) : injectionSwitch.x)) > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-4.3) : injectionSwitch.x)) > injectionSwitch.y))))), _GLF_IDENTITY(false || (bool((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(55.21)), float(_GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x)))), bool(true))) > injectionSwitch.y))), true && (false || (bool((injectionSwitch.x > injectionSwitch.y))))))))), true))))) && _GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y))));
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                            }
                           else
                            {
                            }
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))))
                      {
                      }
                     else
                      {
                       do
                        {
                         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(int(int(3)))))) >> _GLF_IDENTITY(int(3), int(3)), min((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(int(int(3)))))) >> _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(int(int(3)))))) >> _GLF_IDENTITY(int(3), int(3)))))); _injected_loop_counter ++)
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 do
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                      }
                                     else
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                        {
                                         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-798.131) : injectionSwitch.x)) > injectionSwitch.y)), false))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
                                          {
                                           do
                                            {
                                             if(_GLF_WRAPPED_IF_FALSE(false))
                                              {
                                              }
                                             else
                                              {
                                               if(_GLF_WRAPPED_IF_TRUE(true))
                                                {
                                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                  {
                                                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false))
                                                    {
                                                     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(89.81), _GLF_FUZZED(vec2(-5.5, 0.0).g)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(89.81), _GLF_FUZZED(vec2(-5.5, 0.0).g)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x) / 1.0, (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(89.81), _GLF_FUZZED(_GLF_IDENTITY(vec2(-5.5, 0.0).g, float(vec4(vec2(-5.5, 0.0).g, 0.0, 0.0, 0.0))))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x), float(mat3((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(89.81), _GLF_FUZZED(vec2(-5.5, 0.0).g)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x), 1.0, 0.0, tan(sin(0.0)), 0.0, 1.0, 1.0, 0.0, 0.0))) / 1.0) + 0.0)) > injectionSwitch.y)) ? _GLF_FUZZED(7516.2409) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-5315.9880)), vec2(_GLF_FUZZED(-29.29), (injectionSwitch)[1]), bvec2(false, true))).x, (injectionSwitch.x) * 1.0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))), clamp(~ (int(6)), ~ (int(6)), ~ (int(6)))))))) >> _GLF_IDENTITY(int(6), int(6))), clamp(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 | _GLF_IDENTITY((6), ((6)) | ((6))))), 1 * (_GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 | _GLF_IDENTITY((6), ((6)) | ((6))))), (int(_GLF_IDENTITY(6, 0 | _GLF_IDENTITY((6), ((6)) | ((6)))))) / 1))))) >> _GLF_IDENTITY(int(6), int(6))), max(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (true ? 1 << _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED(_injected_loop_counter)))) >> _GLF_IDENTITY(int(6), int(6))), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))))), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) << 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | 0), int(6))), _GLF_IDENTITY((((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) >> 0)), int(6))) >> _GLF_IDENTITY(int(6), int(6)))), ((((_GLF_IDENTITY(1, min(1, 1)) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) >> 0)), int(6))) >> _GLF_IDENTITY(int(6), int(6))))) >> 0) * 1)) | ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, clamp(6, 6, 6))))) >> _GLF_IDENTITY(int(6), int(6)), 0, 0, 1), (_GLF_IDENTITY(ivec4((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)), 0, 0, 1), (ivec4((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)), 0, 0, 1)) + ivec4(0, 0, 0, 0))) | (ivec4((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)), 0, 0, 1)))), max(_GLF_IDENTITY(int(ivec4((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), 0 ^ (_GLF_IDENTITY(int(6), int(6))))))) >> _GLF_IDENTITY(int(6), int(6)), 0, 0, 1)), (int(ivec4((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)), 0, 0, 1))) | 0), _GLF_IDENTITY(int(ivec4((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)), 0, 0, 1)), min(int(ivec4((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)), 0, 0, 1)), _GLF_IDENTITY(int(ivec4((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)), 0, 0, 1)), 0 | (int(ivec4((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)), 0, 0, 1))))))))))))))); _GLF_IDENTITY(_injected_loop_counter ++, (0 >> _GLF_IDENTITY(int(7), int(7))) + (_injected_loop_counter ++)))
                                                      {
                                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                                        {
                                                         buf[next_virtual_gid] = 2;
                                                        }
                                                       else
                                                        {
                                                        }
                                                      }
                                                    }
                                                   else
                                                    {
                                                    }
                                                  }
                                                }
                                               else
                                                {
                                                }
                                              }
                                            }
                                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))).x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, true && (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(2.4) : injectionSwitch.y)))))) ? _GLF_FUZZED(-5.0) : _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(55.12)), bool(false))))))).y)), _GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat3(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))) * mat2(1.0), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))))) / vec2(1.0, 1.0)).y)) || (true)) && _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, false || ((false) && true)))), ((_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, false || ((false) && true))))) || false)) || (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))));
                                          }
                                         else
                                          {
                                          }
                                        }
                                       else
                                        {
                                        }
                                      }
                                    }
                                  }
                                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   else
                    {
                    }
                   do
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), true && (! (_GLF_WRAPPED_IF_TRUE(true))))))), _GLF_IDENTITY(bool(bvec4((_GLF_WRAPPED_IF_TRUE(true)), true, true, true)), (bool(bvec4((_GLF_WRAPPED_IF_TRUE(true)), true, true, true))) && true)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), true && (! (_GLF_WRAPPED_IF_TRUE(true))))))), _GLF_IDENTITY(bool(bvec4((_GLF_WRAPPED_IF_TRUE(true)), true, true, true)), (bool(bvec4((_GLF_WRAPPED_IF_TRUE(true)), true, true, true))) && true)), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), true && (! (_GLF_WRAPPED_IF_TRUE(true))))))), _GLF_IDENTITY(bool(bvec4((_GLF_WRAPPED_IF_TRUE(true)), true, true, true)), (bool(bvec4((_GLF_WRAPPED_IF_TRUE(true)), true, true, true))) && true)), false, true, false)))))) || false))
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0), _GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << (0 << _GLF_IDENTITY(int(7), int(7)))))), (_injected_loop_counter) | (_injected_loop_counter)), _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter))), (min(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)), 1, 1, 1), (true ? _GLF_IDENTITY(ivec4(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)), 1, 1, 1), ~ (~ (ivec4(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)), 1, 1, 1)))) : _GLF_FUZZED(ivec4(-70257, 84137, -61734, -79698))))), max(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)), 1, 1, 1), (true ? _GLF_IDENTITY(ivec4(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)), 1, 1, 1), ~ (~ (ivec4(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)), 1, 1, 1)))) : _GLF_FUZZED(ivec4(-70257, 84137, -61734, -79698))))), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)), 1, 1, 1), (true ? _GLF_IDENTITY(ivec4(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)), 1, 1, 1), ~ (~ (ivec4(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)), 1, 1, 1)))) : _GLF_FUZZED(ivec4(-70257, 84137, -61734, -79698)))))))))) * int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (false ? _GLF_FUZZED(958.905) : _GLF_ONE(1.0, injectionSwitch.y))), _GLF_ONE(1.0, injectionSwitch.y)))))))), (_injected_loop_counter) ^ 0) != 0); _GLF_IDENTITY(_injected_loop_counter --, ~ _GLF_IDENTITY((~ (_injected_loop_counter --)), ((~ (_injected_loop_counter --))) / _GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (1), max(_GLF_IDENTITY(0 ^ (1), (_GLF_IDENTITY(0 ^ (1), (0 ^ (1)) | 0)) / 1), 0 ^ (1)))))))))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                              {
                               do
                                {
                                 subgroupAll(true);
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                             else
                              {
                              }
                            }
                          }
                         else
                          {
                          }
                        }
                      }
                     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_WRAPPED_LOOP(false), false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))));
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(! (false), false), bvec2(bvec2(bvec2(! _GLF_IDENTITY((false), bool(bvec4((false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false)))))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(! (false), false), bvec2(bvec2(bvec2(! _GLF_IDENTITY((false), bool(bvec4((false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false)))))))), false, true))), (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(! (false), false), bvec2(bvec2(bvec2(! _GLF_IDENTITY((false), bool(bvec4((false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true))))), false)))))))), (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), (! (_GLF_IDENTITY(true, (true) || false))) && true)), bool(bvec4(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), (! (_GLF_IDENTITY(true, (true) || false))) && true)), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(1.0)), bvec2(true, false))))).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(1.0)), bvec2(true, false))))).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(1.0)), bvec2(true, false))))).x > injectionSwitch.y) && true)) || false))), bool(bool(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(1.0)), bvec2(true, false))))).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(1.0)), bvec2(true, false))))).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(1.0)), bvec2(true, false))))).x > injectionSwitch.y) && true)) || false))))))), true && (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(1.0)), bvec2(true, false))))).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(1.0)), bvec2(true, false))))).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(1.0)), bvec2(true, false))))).x > injectionSwitch.y) && true)) || false))), bool(bool(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(1.0)), bvec2(true, false))))).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(1.0)), bvec2(true, false))))).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(1.0)), bvec2(true, false))))).x > injectionSwitch.y) && true)) || false))))))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(1.0)), bvec2(true, false))))).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(1.0)), bvec2(true, false))))).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(1.0)), bvec2(true, false))))).x > injectionSwitch.y) && true)) || false))), bool(bool(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(1.0)), bvec2(true, false))))).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(1.0)), bvec2(true, false))))).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(1.0)), bvec2(true, false))))).x > injectionSwitch.y) && true)) || false))))))), true, true, true)), ! (! (bool(bvec4((_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(1.0)), bvec2(true, false))))).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(1.0)), bvec2(true, false))))).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(1.0)), bvec2(true, false))))).x > injectionSwitch.y) && true)) || false))), bool(bool(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(1.0)), bvec2(true, false))))).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(1.0)), bvec2(true, false))))).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(1.0)), bvec2(true, false))))).x > injectionSwitch.y) && true)) || false))))))), true, true, true)))))))))));
                  }
                }
              }
             else
              {
              }
            }
           else
            {
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
