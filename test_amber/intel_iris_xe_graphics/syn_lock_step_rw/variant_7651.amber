#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_30 {
 mat2x3 _f0;
 mat4 _f1;
 mat4x2 _f2;
} ;

struct _GLF_struct_29 {
 bvec2 _f0;
 uvec4 _f1;
 ivec3 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_31 {
 uvec3 GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size;
 _GLF_struct_29 _f0;
 mat3 _f1;
 _GLF_struct_30 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_32 {
 _GLF_struct_31 _f0;
} ;

struct _GLF_struct_26 {
 bvec3 _f0;
 float _f1;
 vec2 _f2;
} ;

struct _GLF_struct_27 {
 int _injected_loop_counter;
 mat2x3 _f0;
 _GLF_struct_26 _f1;
} ;

struct _GLF_struct_28 {
 _GLF_struct_27 _f0;
} ;

struct _GLF_struct_23 {
 float _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_22 {
 vec4 _f0;
 mat3 _f1;
 bvec4 _f2;
 float _f3;
 mat3x4 _f4;
 mat2 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_24 {
 _GLF_struct_22 _f0;
 _GLF_struct_23 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_20 {
 mat3 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_19 {
 vec4 _f0;
 ivec3 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_21 {
 _GLF_struct_19 _f0;
 _GLF_struct_20 _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_25 {
 mat2x3 _f0;
 _GLF_struct_21 _f1;
 uvec3 _f2;
 uvec2 _f3;
 uint subgroup_local_id;
 mat3x2 _f4;
 _GLF_struct_24 _f5;
} ;

struct _GLF_struct_16 {
 mat2x4 _f0;
 uvec3 _f1;
 uvec3 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_15 {
 mat2x4 _f0;
} ;

struct _GLF_struct_17 {
 _GLF_struct_15 _f0;
 mat2 _f1;
 mat3x4 _f2;
 mat3x2 _f3;
 _GLF_struct_16 _f4;
} ;

struct _GLF_struct_13 {
 mat2x3 _f0;
 mat2x4 _f1;
 uint _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_12 {
 mat4 _f0;
 int _f1;
 uvec4 _f2;
 uint _f3;
} ;

struct _GLF_struct_11 {
 uvec2 _f0;
 bool _f1;
 ivec3 _f2;
 bvec3 _f3;
 ivec3 _f4;
 bool _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_14 {
 _GLF_struct_11 _f0;
 vec3 _f1;
 bvec2 _f2;
 _GLF_struct_12 _f3;
 _GLF_struct_13 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_9 {
 ivec4 _f0;
 bool _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_8 {
 uvec4 _f0;
 mat2 _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_7 {
 ivec2 _f0;
 vec2 _f1;
 mat3x4 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_6 {
 mat4x2 _f0;
 mat4 _f1;
 mat3 _f2;
 vec2 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_10 {
 int _f0;
 _GLF_struct_6 _f1;
 _GLF_struct_7 _f2;
 _GLF_struct_8 _f3;
 _GLF_struct_9 _f4;
 bool _f5;
 mat2 _f6;
} ;

struct _GLF_struct_18 {
 uint workgroup_id;
 uint _f0;
 _GLF_struct_10 _f1;
 mat3x4 _f2;
 _GLF_struct_14 _f3;
 bvec3 _f4;
 _GLF_struct_17 _f5;
} ;

struct _GLF_struct_4 {
 float _f0;
 vec4 _f1;
 mat4x3 _f2;
 vec2 _f3;
 uint num_workgroup;
 mat4x2 _f4;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_1 {
 vec4 _f0;
 ivec3 _f1;
 uint workgroup_base;
 bvec3 _f2;
} ;

struct _GLF_struct_0 {
 vec4 _f0;
 uvec2 _f1;
 mat3x4 _f2;
 mat2x3 _f3;
 uvec4 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
} ;

struct _GLF_struct_3 {
 _GLF_struct_2 _f0;
 mat2 _f1;
 bvec4 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))), min(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (mat2(1.0) * (injectionSwitch)), mix(vec2(_GLF_FUZZED(8.7), (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (mat2(1.0) * (injectionSwitch)))[1]), vec2((mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (mat2(1.0) * (injectionSwitch)))[0], _GLF_FUZZED(8811.4916)), bvec2(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))), false)))), _GLF_IDENTITY(mat2(1.0), mat2(mat2x4(mat2(1.0)))) * (injectionSwitch)))).y), false || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * _GLF_IDENTITY((injectionSwitch), min((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))), (injectionSwitch))), _GLF_IDENTITY(min(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY(mat2(mat2x4(mat2(1.0))), (_GLF_IDENTITY(mat2(mat2x4(mat2(1.0))), mat2(0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY(mat2(mat2x4(mat2(1.0))), mat2(mat3x2(mat2(mat2x4(mat2(1.0))))))))) / mat2(1.0, 1.0, 1.0, 1.0))) * (injectionSwitch)), max(min(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY(mat2(mat2x4(mat2(1.0))), (_GLF_IDENTITY(mat2(mat2x4(mat2(1.0))), mat2(0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY(mat2(mat2x4(mat2(1.0))), mat2(mat3x2(mat2(mat2x4(mat2(1.0))))))))) / mat2(1.0, 1.0, 1.0, 1.0))) * (injectionSwitch)), _GLF_IDENTITY(min(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY(mat2(mat2x4(mat2(1.0))), (_GLF_IDENTITY(mat2(mat2x4(mat2(1.0))), mat2(0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY(mat2(mat2x4(mat2(1.0))), mat2(mat3x2(mat2(mat2x4(mat2(1.0))))))))) / mat2(1.0, 1.0, 1.0, 1.0))) * (injectionSwitch)), vec2(mat3x2(_GLF_IDENTITY(min(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY(mat2(mat2x4(mat2(1.0))), (_GLF_IDENTITY(mat2(mat2x4(mat2(1.0))), mat2(0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY(mat2(mat2x4(mat2(1.0))), mat2(mat3x2(mat2(mat2x4(mat2(1.0))))))))) / mat2(1.0, 1.0, 1.0, 1.0))) * (injectionSwitch)), clamp(min(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY(mat2(mat2x4(mat2(1.0))), (_GLF_IDENTITY(mat2(mat2x4(mat2(1.0))), mat2(0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY(mat2(mat2x4(mat2(1.0))), mat2(mat3x2(mat2(mat2x4(mat2(1.0))))))))) / mat2(1.0, 1.0, 1.0, 1.0))) * (injectionSwitch)), min(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY(mat2(mat2x4(mat2(1.0))), (_GLF_IDENTITY(mat2(mat2x4(mat2(1.0))), mat2(0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY(mat2(mat2x4(mat2(1.0))), mat2(mat3x2(mat2(mat2x4(mat2(1.0))))))))) / mat2(1.0, 1.0, 1.0, 1.0))) * (injectionSwitch)), min(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY(mat2(mat2x4(mat2(1.0))), (_GLF_IDENTITY(mat2(mat2x4(mat2(1.0))), mat2(0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY(mat2(mat2x4(mat2(1.0))), mat2(mat3x2(mat2(mat2x4(mat2(1.0))))))))) / mat2(1.0, 1.0, 1.0, 1.0))) * (injectionSwitch)))), 0.0, 0.0, 1.0, 0.0))))))).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))), min(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0), mat2(mat2x4(mat2(1.0)))) * (injectionSwitch)))).y)) && true)))), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(_GLF_IDENTITY(! (false), true && _GLF_IDENTITY((! (false)), bool(_GLF_IDENTITY(bool((! (false))), bool(bool(bool((! (false))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), (false ? _GLF_FUZZED(mat2(7.4, 6591.0811, -1.7, 101.171)) : mat2(1.0))) * _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 1.0, 0.0, 1.0))))), injectionSwitch))), vec2(mat2((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 1.0, 0.0, 1.0))))), injectionSwitch))), determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0))), _GLF_IDENTITY(min((injectionSwitch), (injectionSwitch)), mat2(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, 1.0))), 1.0))) * (min((injectionSwitch), (injectionSwitch))))), min(mat2(1.0) * _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), vec2(vec2(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * vec2(1.0, 1.0))))))), _GLF_IDENTITY(mat2(1.0), mat2(mat2x4(mat2(1.0)))) * (injectionSwitch)))).y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, false || (true)))), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))), true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 1.0, 0.0, 1.0))))), injectionSwitch))), vec2(mat2((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ 9498.5956)), _GLF_FUZZED(1.6)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)), injectionSwitch)), vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 1.0, 0.0, 1.0))))), injectionSwitch))), determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0))), _GLF_IDENTITY(min((injectionSwitch), (injectionSwitch)), mat2(1.0) * _GLF_IDENTITY((min((injectionSwitch), (injectionSwitch))), ((min((injectionSwitch), (injectionSwitch)))) * vec2(1.0, 1.0)))), _GLF_IDENTITY(min(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0), mat2(mat2x4(mat2(1.0)))) * (injectionSwitch)), clamp(_GLF_IDENTITY(min(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0), mat2(mat2x4(mat2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), min(float(mat2x3(1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), float(mat2x3(1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))))))) * (injectionSwitch)), vec2(mat2(min(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0), mat2(mat2x4(mat2(1.0)))) * (injectionSwitch)), 0.0, 0.0))), min(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0), mat2(mat2x4(mat2(1.0)))) * (injectionSwitch)), min(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY(mat2(mat2x4(mat2(1.0))), mat2(1.0) * (mat2(mat2x4(mat2(1.0)))))) * (injectionSwitch)))))).y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))), true)), bool(bool(bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (! (! (false))), false || (_GLF_IDENTITY(! (! (! (false))), ! (! (! (! (! (false))))))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-4971.4542) : _GLF_IDENTITY(1.0, 1.0 * (1.0)))), 1.0, 0.0, 1.0))))), injectionSwitch))), vec2(mat2((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 1.0, 0.0, 1.0))))), injectionSwitch))), determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0))), _GLF_IDENTITY(min((injectionSwitch), (injectionSwitch)), _GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0))))) * mat2(1.0)) * (min((injectionSwitch), (injectionSwitch))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-4971.4542) : _GLF_IDENTITY(1.0, 1.0 * (1.0)))), 1.0, 0.0, 1.0))))), injectionSwitch))), vec2(mat2((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 1.0, 0.0, 1.0))))), injectionSwitch))), determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0))), _GLF_IDENTITY(min((injectionSwitch), (injectionSwitch)), _GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0))))) * mat2(1.0)) * (min((injectionSwitch), (injectionSwitch)))))) * mat2(1.0)), min(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0), mat2(mat2x4(mat2(1.0)))) * (injectionSwitch)))).y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))), (! ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))) || false)))), true))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false)))))))), (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), true && (bool(false)))), ! (! (bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))))))))
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
               if(_GLF_DEAD(false))
                return;
              }
            }
          }
         return;
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && true))))
        {
        }
       else
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        return;
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])))).y))))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
            return;
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))) || false))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
          }
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
   else
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 uvec3 GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uvec3 GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (1 | 0), false || (_injected_loop_counter < (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (0 | (25709 & 0)) + (_GLF_IDENTITY(1, min(1, 1)))) | 0)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    break;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y, true, _GLF_IDENTITY(true, (true) || false))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     return;
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))) || false), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 _GLF_struct_32 _GLF_struct_replacement_32;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   do
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      break;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(injectionSwitch)), min(vec2(vec2(injectionSwitch)), vec2(vec2(injectionSwitch)))))) + vec2(0.0, 0.0)).x))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
        {
        }
       else
        {
         return;
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)))) - 0.0)))))
        return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(-19.99)), bool(false))))).y))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
         GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x = subgroup_size;
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY((! (_GLF_DEAD(false))), bool(bvec4((! (_GLF_DEAD(false))), false, false, _GLF_IDENTITY(false, false || (false))))) && true))))
          return;
        }
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      break;
     do
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(1, int(ivec3(1, _GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) - (0 ^ _GLF_IDENTITY(0, 0 ^ (0)))))), 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((1 ^ 1), clamp((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1)), (_GLF_IDENTITY(1, (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(_injected_loop_counter) : 1))) * 1))) ^ 1), (1 ^ 1), _GLF_IDENTITY((_GLF_IDENTITY(1, (1) - 0) ^ 1), ~ (_GLF_IDENTITY(~ ((1 ^ 1)), (~ (_GLF_IDENTITY(_GLF_IDENTITY((1 ^ 1), ((1 ^ 1)) | (_GLF_IDENTITY((1 ^ 1), ((1 ^ 1)) | _GLF_IDENTITY(((1 ^ 1)), clamp(((1 ^ 1)), ((1 ^ 1)), ((1 ^ 1))))))), max((1 ^ 1), _GLF_IDENTITY((1 ^ 1), ~ (_GLF_IDENTITY(~ ((1 ^ 1)), (~ _GLF_IDENTITY(((1 ^ 1)), clamp(((1 ^ 1)), ((1 ^ 1)), _GLF_IDENTITY(((1 ^ 1)), (((1 ^ 1))) << 0)))) | (~ ((1 ^ 1)))))))))) / 1)))))); _injected_loop_counter --)
        {
         GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.y = GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.x;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      continue;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), ! (_GLF_IDENTITY(! (_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), false || (! (_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))))))); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 _GLF_struct_25 _GLF_struct_replacement_25 = _GLF_struct_25(mat2x3(1.0), _GLF_struct_21(_GLF_struct_19(vec4(1.0), ivec3(1), _GLF_IDENTITY(bvec2(true), bvec2(bvec4(_GLF_IDENTITY(bvec2(true), bvec2(bvec2(bvec2(true)))), true, false)))), _GLF_struct_20(mat3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) / 1.0), min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) / 1.0), mix(float(_GLF_FUZZED(-38.85)), float(_GLF_IDENTITY(1.0, (1.0) / 1.0)), bool(true))), _GLF_IDENTITY(1.0, (1.0) / 1.0)))), bvec3(true)), mat2x4(_GLF_IDENTITY(1.0, (1.0) - 0.0))), uvec3(1u), uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), max((1u), (1u))) | (_GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY((1u), ((1u)) << (1u ^ ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))))) | (1u), min(_GLF_IDENTITY(_GLF_IDENTITY((1u), ((1u)) << (1u ^ ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))))) | (1u), uint(uvec3(_GLF_IDENTITY((1u), ((1u)) << (1u ^ ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))))) | (1u), 1u, 1u))), _GLF_IDENTITY(_GLF_IDENTITY((1u), ((1u)) << (1u ^ ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))))) | (1u), (_GLF_IDENTITY((1u), ((1u)) << (1u ^ ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))))) | (1u)) | 0u))))))), gl_SubgroupInvocationID, mat3x2(1.0), _GLF_struct_24(_GLF_struct_22(_GLF_IDENTITY(vec4(1.0), _GLF_IDENTITY(mix(vec4(_GLF_IDENTITY(_GLF_FUZZED(-6.5), (_GLF_FUZZED(-6.5)) / 1.0), _GLF_FUZZED(90.36), _GLF_FUZZED(819.323), _GLF_FUZZED(7.0)), vec4((vec4(1.0))[0], (vec4(1.0))[1], (vec4(1.0))[2], (vec4(1.0))[3]), bvec4(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-7093.7936)), float(injectionSwitch.y), bool(true))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-7093.7936)), float(injectionSwitch.y), bool(true)))) || false))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), false || (injectionSwitch.x > injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true) || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, true)), (mix(vec4(_GLF_IDENTITY(_GLF_FUZZED(-6.5), (_GLF_FUZZED(-6.5)) / 1.0), _GLF_FUZZED(90.36), _GLF_FUZZED(819.323), _GLF_FUZZED(7.0)), vec4((vec4(1.0))[0], (vec4(1.0))[_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, _GLF_IDENTITY((1), 1 * (_GLF_IDENTITY((1), ((1)) | 0))) >> 0), 1))))], (_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), mix(vec4((vec4(1.0))[0], (vec4(1.0))[1], (vec4(1.0))[2], (vec4(1.0))[3]), vec4(_GLF_FUZZED(vec3(-5.3, 88.15, -43.45).p), _GLF_FUZZED(-850.175), _GLF_FUZZED(-878.300), _GLF_FUZZED(9.3)), bvec4(false, false, false, false))), vec4(mat3x4(vec4(1.0), 0.0, 0.0, 0.0, 0.0, abs(0.0), determinant(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), _GLF_ONE(1.0, injectionSwitch.y), 0.0))))[2], (vec4(1.0))[3]), bvec4(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-7093.7936)), _GLF_IDENTITY(float(injectionSwitch.y), _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec4(1.0, 1.0, 0.0, 1.0), (vec4(1.0, 1.0, 0.0, 1.0)) / vec4(1.0, 1.0, 1.0, 1.0)))) * (float(injectionSwitch.y))), bool(true))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))) && true) || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, true))) * mat4(1.0))), mat3(1.0), bvec4(true), 1.0, mat3x4(1.0), mat2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, abs(1.0), 0.0))), max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, abs(1.0), 0.0))), float(mat4(_GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, abs(1.0), 0.0))), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, abs(1.0), 0.0))), float(mat3x4(_GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, abs(1.0), 0.0))), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0)))))), mat4(1.0)), _GLF_struct_23(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED((- 102.665)) : _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, abs(1.0)), (false ? _GLF_FUZZED(mat3(-628.814, -7.2, 7.9, 92.42, -4048.1697, 51.74, -0.4, 8.7, 322.102)) : mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, abs(1.0))))))), float(_GLF_FUZZED(163.121)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (true ? 1.0 : _GLF_FUZZED(log(-57.46)))))), uvec2(1u)), vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (1.0)), clamp(_GLF_IDENTITY(1.0, 0.0 + (1.0)), _GLF_IDENTITY(1.0, 0.0 + (1.0)), _GLF_IDENTITY(1.0, 0.0 + (1.0)))))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-5617.9993) : _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(_GLF_IDENTITY(-1117.1075, _GLF_IDENTITY(float(vec2(-1117.1075, 1.0)), (false ? _GLF_FUZZED(-1.8) : float(vec2(-1117.1075, 1.0)))))) : _GLF_IDENTITY(1.0, max(1.0, 1.0)))))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), vec2(mat2x4(_GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch))), 0.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(35.70) : _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)))), 0.0, 1.0, 0.0))) / vec2(1.0, 1.0)).y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) | (int(_GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), bool(bool(bool(false))))), bool(bool(bool(_GLF_IDENTITY(bool(false), bool(_GLF_IDENTITY(bool(bool(false)), false || (_GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(bool(bool(bool(bool(false)))), (bool(bool(bool(bool(false))))) && true)))))))))))))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)))).x, (true ? injectionSwitch.x : _GLF_FUZZED(-770.916))) > injectionSwitch.y))))
    continue;
   for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))); _GLF_IDENTITY(_injected_loop_counter --, 0 | (_GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(-35721) : _injected_loop_counter --)))))
    {
     do
      {
       GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.x = _GLF_struct_replacement_25.subgroup_local_id;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      continue;
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
        }
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(_GLF_struct_4(1.0, vec4(1.0), mat4x3(1.0), vec2(1.0), gl_NumWorkGroups.x, mat4x2(1.0)), mat3x4(_GLF_IDENTITY(1.0, min(1.0, 1.0))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     do
      {
       for(int _injected_loop_counter = (((-16753 & 0) >> _GLF_IDENTITY(int(5), int(5))) ^ (((1 & 1) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
            {
            }
           else
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   return;
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                    return;
                  }
                }
              }
             if(_GLF_DEAD(false))
              return;
            }
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     return;
    }
   else
    {
    }
  }
 GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.z = workgroup_size;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        return;
      }
     else
      {
      }
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       _GLF_struct_replacement_32._f0.GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size.z = _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, min(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size, GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size)).z;
      }
     else
      {
      }
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(2382.5579)), bool(false))), injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(5)))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)); _injected_loop_counter --)
            {
             return;
            }
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 return;
                }
              }
            }
           return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            {
             do
              {
               return;
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)))) || false));
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), true, true)))), ! (! (bool(_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), true, true)))))))), (injectionSwitch.x > injectionSwitch.y))))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               return;
              }
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           do
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 0.0, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, 1.0)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? vec2(mat3(injectionSwitch, 0.0, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, 1.0)) : _GLF_FUZZED(vec2(148.664, 326.756))))).y))))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   do
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         for(int _injected_loop_counter = (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, max(1, 1))); _injected_loop_counter ++)
          {
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 _GLF_struct_18 _GLF_struct_replacement_18 = _GLF_struct_18(gl_WorkGroupID.x, 1u, _GLF_struct_10(1, _GLF_struct_6(mat4x2(1.0), mat4(1.0), mat3(1.0), vec2(1.0), ivec3(1)), _GLF_struct_7(ivec2(1), vec2(1.0), mat3x4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(839.516) : 1.0))), mat3(1.0)), _GLF_struct_8(uvec4(1u), _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY(mat2(mat3x4(mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-1.8)), float(1.0), bool(true)))))), transpose(transpose(_GLF_IDENTITY(mat2(mat3x4(mat2(1.0))), (mat2(mat3x4(mat2(1.0)))) * mat2(1.0)))))), (mat2(1.0)) + mat2(0.0, 0.0, 0.0, 0.0)), ivec2(1)), _GLF_struct_9(ivec4(1), true, mat2x4(1.0)), true, mat2(1.0)), mat3x4(1.0), _GLF_struct_14(_GLF_struct_11(uvec2(1u), true, ivec3(1), bvec3(true), ivec3(1), true, _GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (1u) - (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) - 0u)) / 1u) << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), max(uint(3u), uint(3u))))))), (_GLF_IDENTITY(uvec3(1u), (_GLF_IDENTITY(uvec3(1u), clamp(uvec3(1u), uvec3(1u), uvec3(1u)))) | (uvec3(1u)))) | (_GLF_IDENTITY(uvec3(1u), _GLF_IDENTITY((_GLF_IDENTITY(uvec3(1u), max(uvec3(1u), uvec3(1u)))), uvec3(0u, 0u, 0u) ^ ((_GLF_IDENTITY(uvec3(1u), max(uvec3(1u), uvec3(1u)))))) - _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) + uvec3(0u, 0u, 0u)))))), vec3(1.0), bvec2(true), _GLF_struct_12(mat4(1.0), 1, uvec4(_GLF_IDENTITY(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) << 0u, min(_GLF_IDENTITY((1u) << 0u, max((1u) << 0u, (1u) << 0u)), _GLF_IDENTITY((1u) << 0u, ((1u) << 0u) / 1u)))), 0u | (_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) << 0u, min(_GLF_IDENTITY((1u) << 0u, max((1u) << 0u, (1u) << 0u)), _GLF_IDENTITY((1u) << 0u, ((1u) << 0u) / 1u))))))), 1u), _GLF_struct_13(mat2x3(1.0), mat2x4(1.0), 1u, ivec3(1)), vec4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(572.360)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), clamp(mix(float(1.0), float(_GLF_FUZZED(572.360)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(572.360)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (mix(float(1.0), float(_GLF_FUZZED(572.360)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) + 0.0), _GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(572.360)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), mix(float(_GLF_FUZZED(-23.63)), float(mix(float(1.0), float(_GLF_FUZZED(572.360)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) / 1.0))), bvec3(true), _GLF_struct_17(_GLF_struct_15(mat2x4(1.0)), mat2(1.0), mat3x4(1.0), mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0))), _GLF_struct_16(mat2x4(_GLF_IDENTITY(1.0, max(1.0, 1.0))), uvec3(1u), uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))), (1u) | _GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, ~ (~ (0u)))))), 1u), 1u * (_GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))), (1u) | 0u), 1u), uint(_GLF_IDENTITY(uvec4(max(_GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (_GLF_IDENTITY(! (true), false || (! _GLF_IDENTITY((true), true && ((true))))))))) ? _GLF_IDENTITY(1u, min(1u, 1u)) : _GLF_FUZZED(subgroup_id))), (1u) | 0u), 1u), 1u, 0u, 0u), (uvec4(max(_GLF_IDENTITY(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))), (1u) | 0u), 1u), 1u, 0u, 0u)) << uvec4(0u, 0u, 0u, 0u))))))), 0u + (_GLF_IDENTITY(1u, _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))), (1u) | _GLF_IDENTITY(0u, _GLF_IDENTITY(0u | (_GLF_IDENTITY(0u, ~ (~ (0u)))), (0u | (_GLF_IDENTITY(0u, ~ (~ (0u))))) | (_GLF_IDENTITY(0u | (_GLF_IDENTITY(0u, ~ (~ (0u)))), 0u | (0u | (_GLF_IDENTITY(0u, ~ (~ (0u)))))))))), 1u), _GLF_IDENTITY(1u, 0u + (_GLF_IDENTITY(1u, (1u) / 1u))) * (_GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))), (1u) | 0u), 1u), uint(_GLF_IDENTITY(uvec4(max(_GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (_GLF_IDENTITY(! (true), false || (! _GLF_IDENTITY((true), true && ((true))))))))) ? _GLF_IDENTITY(1u, min(1u, 1u)) : _GLF_FUZZED(subgroup_id))), (1u) | _GLF_IDENTITY(0u, (0u) | 0u)), 1u), 1u, 0u, 0u), (uvec4(max(_GLF_IDENTITY(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))), (1u) | 0u), 1u), 1u, 0u, 0u)) << uvec4(0u, 0u, 0u, 0u)))))))))), vec2(1.0))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false) && (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec2(true && (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))), (bool(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))) && true)), (false) && true))), (_GLF_IDENTITY(bool(bvec2(true && (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(false, (false) && true))), true && (bool(bvec2(true && (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(false, (false) && true)))))) && true))), (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(_GLF_struct_2(_GLF_struct_0(_GLF_IDENTITY(vec4(1.0), clamp(vec4(1.0), vec4(1.0), vec4(1.0))), uvec2(1u), mat3x4(1.0), mat2x3(1.0), uvec4(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 0u ^ (_GLF_IDENTITY(1u, (1u) - 0u)))) << 0u)), _GLF_IDENTITY(uvec4(1u), (uvec4(1u)) | uvec4(0u, 0u, 0u, 0u))), _GLF_struct_1(vec4(1.0), ivec3(1), _GLF_struct_replacement_32._f0.GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size.z * _GLF_struct_replacement_18.workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true)))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true))), bvec3(bvec3(bvec3(true))))))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true))))))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true))))))), true))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true))))))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true))))))), true))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true))))))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true))))))), true))))), false))))))), true))))), mat2(1.0), bvec4(true));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))));
              }
            }
           _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.z = _GLF_struct_replacement_3._f0._f1.workgroup_base, (GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.z = _GLF_struct_replacement_3._f0._f1.workgroup_base) / 1u), (0u >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), uint(uvec4(uint(4u), 0u, 0u, 1u))))) + (_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.z = _GLF_struct_replacement_3._f0._f1.workgroup_base, (GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.z = _GLF_struct_replacement_3._f0._f1.workgroup_base) / 1u)));
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
            }
          }
         else
          {
          }
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.z, clamp(_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base, uvec3(0u, 0u, 0u) ^ (GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base)).z, GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.z, GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.z)), (GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.z) | (GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.z)) + subgroup_id * _GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base, (_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base, ~ (_GLF_IDENTITY(~ (GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base), uvec3(uvec3(~ (GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base))))))) >> _GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY((1u ^ _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, 0u + (1u)), 1u, 1u))), uint(uint((1u ^ _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, 0u + (1u)), 1u, 1u)))))) | (_GLF_IDENTITY(0u, (0u) | 0u)))), uvec3(0u, 0u, 0u) + (uvec3(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY((1u ^ _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, 0u + (1u)), 1u, 1u))), uint(uint((1u ^ _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, 0u + (1u)), 1u, 1u)))))) | (_GLF_IDENTITY(0u, (0u) | 0u))))))).y + GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) + 0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, min(6, 6)))), min(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6)))), _GLF_IDENTITY(int(6), int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
    }
   do
    {
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, true))))))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.y = virtual_gid;
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! (false))), bool(bvec4(! (false), false, false, true))), bool(bvec3(! _GLF_IDENTITY((false), bool(bvec3((false), false, false))), false, true)))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, false, true))), bool(bvec2(_GLF_IDENTITY(! _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), (! ((false))) && true))), bool(bvec4(! (false), false, false, true))), false))), bool(bvec3(! (false), false, true))))) || false))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
         continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 for(_GLF_struct_28 _GLF_struct_replacement_28 = _GLF_struct_28(_GLF_struct_27((_GLF_IDENTITY(0, ~ (~ (0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), ~ (~ (int(3)))), _GLF_IDENTITY(clamp(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), ~ (~ (int(3)))), min(_GLF_IDENTITY(int(3), (int(3)) + 0), int(3))), int(3)), (false ? _GLF_FUZZED(85172) : clamp(int(3), _GLF_IDENTITY(int(3), min(int(3), int(3))), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(true ? _GLF_IDENTITY(int(3), ~ (~ (int(3)))) : _GLF_FUZZED(-17387), (false ? _GLF_FUZZED(58183) : true ? _GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), 0 + (int(3)))) ^ 0), ~ (~ (int(3)))) : _GLF_IDENTITY(_GLF_FUZZED(-17387), (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(_GLF_FUZZED(-17387), clamp(_GLF_FUZZED(-17387), _GLF_FUZZED(-17387), _GLF_FUZZED(-17387))) : _GLF_FUZZED(-4076)))))))))))), _GLF_IDENTITY(0 + (_GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), ~ (~ (int(3)))), _GLF_IDENTITY(clamp(int(3), _GLF_IDENTITY(int(3), min(_GLF_IDENTITY(int(3), (int(3)) + 0), int(3))), int(3)), (false ? _GLF_FUZZED(85172) : clamp(int(3), _GLF_IDENTITY(int(3), min(int(3), int(3))), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(true ? _GLF_IDENTITY(int(3), ~ (~ (int(3)))) : _GLF_FUZZED(-17387), (false ? _GLF_FUZZED(58183) : true ? _GLF_IDENTITY(int(3), ~ (~ (int(3)))) : _GLF_FUZZED(-17387))))))))))), ~ (~ (_GLF_IDENTITY(0 + (_GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), ~ (~ (int(3)))), _GLF_IDENTITY(clamp(int(3), _GLF_IDENTITY(int(3), min(_GLF_IDENTITY(int(3), (int(3)) + 0), int(3))), int(3)), (false ? _GLF_FUZZED(85172) : clamp(int(3), _GLF_IDENTITY(int(3), min(int(3), int(3))), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(true ? _GLF_IDENTITY(int(3), ~ (~ (int(3)))) : _GLF_FUZZED(-17387), (false ? _GLF_FUZZED(58183) : true ? _GLF_IDENTITY(int(3), ~ (~ (int(3)))) : _GLF_FUZZED(-17387))))))))))), (false ? _GLF_FUZZED((43372 ^ -24724)) : 0 + (_GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), ~ (~ (int(3)))), _GLF_IDENTITY(clamp(int(3), _GLF_IDENTITY(int(3), min(_GLF_IDENTITY(int(3), (int(3)) + 0), int(3))), int(3)), (false ? _GLF_FUZZED(85172) : clamp(int(3), _GLF_IDENTITY(int(3), min(int(3), int(3))), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) - 0)), clamp(int(_GLF_IDENTITY(3, (3) - 0)), int(_GLF_IDENTITY(3, (3) - 0)), int(_GLF_IDENTITY(3, (3) - 0)))), ~ (~ (int(3)))) : _GLF_FUZZED(-17387), (false ? _GLF_FUZZED(58183) : true ? _GLF_IDENTITY(int(3), ~ (~ (int(3)))) : _GLF_FUZZED(-17387)))))))))))))))))), mat2x3(1.0), _GLF_struct_26(bvec3(true), 1.0, vec2(1.0)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_28._f0._injected_loop_counter != 1); _GLF_struct_replacement_28._f0._injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    break;
   do
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ _GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), ~ (~ (0))))); _injected_loop_counter --)
      {
       _GLF_struct_replacement_32._f0.GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size.y = GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_size.y;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
    continue;
  }
 uint next_virtual_gid = _GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.z + _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * _GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.y, (_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.y, uint(uint(GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.y)))) | (GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.y)), max(GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.z + subgroup_id * _GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.y, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.y, uint(uint(GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.y)))) | (GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.y), clamp((_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.y, uint(uint(GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.y)))) | (GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.y), (_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.y, uint(uint(GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.y)))) | (GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.y), (_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.y, uint(uint(GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.y)))) | (GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.y)))), GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.z + subgroup_id * _GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.y, (_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.y, uint(uint(GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.y)))) | (GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.y)))) + ((GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.x + 1) % GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base.y);
 uint read = atomicLoad(buf[_GLF_IDENTITY(_GLF_struct_replacement_32._f0.GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size, (_GLF_struct_replacement_32._f0.GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size) - uvec3(0u, 0u, 0u)).y], 4, 64, 0);
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) * 1.0), _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(-43.89))))) > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(_GLF_IDENTITY(float(injectionSwitch.x), max(_GLF_IDENTITY(float(injectionSwitch.x), float(mat2x4(float(injectionSwitch.x), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), float(injectionSwitch.x))), float(float(float(injectionSwitch.x)))))), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))) > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(_GLF_IDENTITY(-134.448, max(-134.448, _GLF_IDENTITY(-134.448, max(-134.448, -134.448))))))), injectionSwitch.y))))))
  {
  }
 else
  {
   _GLF_struct_replacement_32._f0.GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size.x = _GLF_IDENTITY(_GLF_IDENTITY(read, uint(_GLF_IDENTITY(uint(read), _GLF_IDENTITY((uint(read)) ^ 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((uint(read)) ^ 0u))))), (read) - _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)));
  }
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY(1, (1) - 0) & (0 | 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), min(int(5), int(5))), int(5))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0))) != (_GLF_IDENTITY((0 | 0) & (-55992 * 54059), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY((0 | 0) & (_GLF_IDENTITY(-55992, (-55992) - 0) * 54059), min((0 | 0) & (_GLF_IDENTITY(-55992, (_GLF_IDENTITY(-55992, ((0 | 0) << _GLF_IDENTITY(int(6), int(6))) ^ (_GLF_IDENTITY(-55992, (-55992) | (-55992))))) - 0) * 54059), _GLF_IDENTITY((0 | 0) & (_GLF_IDENTITY(-55992, (-55992) - 0) * 54059), ~ (_GLF_IDENTITY(~ ((0 | 0) & (_GLF_IDENTITY(-55992, (-55992) - 0) * 54059)), min(_GLF_IDENTITY(~ ((0 | 0) & (_GLF_IDENTITY(-55992, (-55992) - 0) * 54059)), (_GLF_IDENTITY(~ ((0 | 0) & (_GLF_IDENTITY(-55992, (-55992) - 0) * 54059)), 0 + (~ ((0 | 0) & (_GLF_IDENTITY(-55992, (-55992) - 0) * 54059))))) >> 0), ~ ((0 | 0) & (_GLF_IDENTITY(-55992, (-55992) - 0) * 54059)))))))), ((0 | _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))) & (-55992 * 54059)) - 0), 0)), clamp(int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY((0 | 0) & (_GLF_IDENTITY(-55992, (-55992) - 0) * 54059), min((0 | 0) & (_GLF_IDENTITY(-55992, (-55992) - 0) * 54059), _GLF_IDENTITY((0 | 0) & (_GLF_IDENTITY(-55992, (-55992) - 0) * 54059), ~ (_GLF_IDENTITY(~ ((0 | 0) & (_GLF_IDENTITY(-55992, _GLF_IDENTITY((_GLF_IDENTITY(-55992, (_GLF_IDENTITY(-55992, 0 + (-55992))) - 0)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(-55992, (_GLF_IDENTITY(-55992, 0 + (-55992))) - 0)), 0, 0, 1), ((ivec4(1, 1, 1, 1) << _GLF_IDENTITY(ivec4(2), ivec4(2))) >> _GLF_IDENTITY(ivec4(2), ivec4(2))) * (ivec4((_GLF_IDENTITY(-55992, (_GLF_IDENTITY(-55992, 0 + (-55992))) - 0)), 0, 0, 1)))), (int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(-55992, (_GLF_IDENTITY(-55992, 0 + (-55992))) - 0)), 0, 0, 1), ((ivec4(1, 1, 1, 1) << _GLF_IDENTITY(ivec4(2), ivec4(2))) >> _GLF_IDENTITY(ivec4(2), ivec4(2))) * (ivec4((_GLF_IDENTITY(-55992, (_GLF_IDENTITY(-55992, 0 + (-55992))) - 0)), 0, 0, 1))))) >> 0)) - 0) * 54059)), min(~ ((0 | 0) & (_GLF_IDENTITY(-55992, (-55992) - 0) * 54059)), ~ ((0 | 0) & (_GLF_IDENTITY(-55992, (-55992) - 0) * 54059)))))))), ((0 | 0) & _GLF_IDENTITY((-55992 * 54059), min(_GLF_IDENTITY((-55992 * 54059), (_GLF_IDENTITY((-55992 * 54059), ((-55992 * 54059)) / 1)) - 0), _GLF_IDENTITY((-55992 * 54059), ((-55992 * 54059)) * 1)))) - 0), 0)), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY((0 | 0) & (_GLF_IDENTITY(-55992, (-55992) - 0) * _GLF_IDENTITY(54059, (54059) | (_GLF_IDENTITY(54059, 0 ^ (54059))))), min((0 | 0) & (_GLF_IDENTITY(-55992, (-55992) - 0) * 54059), _GLF_IDENTITY((0 | 0) & (_GLF_IDENTITY(-55992, (-55992) - 0) * 54059), ~ (_GLF_IDENTITY(~ ((0 | 0) & (_GLF_IDENTITY(-55992, (-55992) - 0) * 54059)), min(~ ((0 | 0) & (_GLF_IDENTITY(-55992, (-55992) - 0) * 54059)), ~ ((0 | 0) & (_GLF_IDENTITY(-55992, (-55992) - 0) * 54059)))))))), ((0 | 0) & (-55992 * 54059)) - 0), 0)), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY((0 | 0) & (_GLF_IDENTITY(-55992, (-55992) - 0) * 54059), min((0 | 0) & (_GLF_IDENTITY(-55992, (-55992) - 0) * 54059), _GLF_IDENTITY((0 | 0) & (_GLF_IDENTITY(-55992, (-55992) - 0) * 54059), ~ (_GLF_IDENTITY(~ ((0 | 0) & (_GLF_IDENTITY(-55992, _GLF_IDENTITY((-55992) - 0, ((-55992) - 0) | ((-55992) - 0))) * 54059)), min(_GLF_IDENTITY(~ ((0 | 0) & (_GLF_IDENTITY(-55992, (-55992) - 0) * 54059)), min(~ ((0 | 0) & (_GLF_IDENTITY(-55992, (-55992) - 0) * 54059)), _GLF_IDENTITY(~ ((0 | 0) & (_GLF_IDENTITY(-55992, (-55992) - 0) * 54059)), (~ ((0 | 0) & (_GLF_IDENTITY(-55992, (-55992) - 0) * 54059))) - 0))), ~ ((0 | 0) & (_GLF_IDENTITY(-55992, (-55992) - 0) * 54059)))))))), ((0 | 0) & (-55992 * 54059)) - 0), 0))))))); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      break;
     if(_GLF_DEAD(false))
      break;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                {
                 if(_GLF_DEAD(false))
                  break;
                 continue;
                }
               continue;
              }
             atomicStore(checker[_GLF_IDENTITY(_GLF_struct_replacement_32._f0.GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size.y, min(_GLF_IDENTITY(_GLF_struct_replacement_32._f0.GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size, uvec3(uvec3(_GLF_struct_replacement_32._f0.GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size))).y, _GLF_struct_replacement_32._f0.GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size.y))], _GLF_IDENTITY(_GLF_struct_replacement_32._f0.GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size.x, (_GLF_struct_replacement_32._f0.GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size.x) / 1u), 4, 64, 4);
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x)) > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(((-6.0))), _GLF_FUZZED(-470.532)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(true, true))).x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + abs(_GLF_IDENTITY(vec2(0.0, 0.0), clamp(_GLF_IDENTITY(vec2(0.0, 0.0), (true ? vec2(0.0, 0.0) : _GLF_FUZZED(injectionSwitch))), vec2(0.0, 0.0), vec2(0.0, 0.0))))).y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))));
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (false) || false)));
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
       return;
      }
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
