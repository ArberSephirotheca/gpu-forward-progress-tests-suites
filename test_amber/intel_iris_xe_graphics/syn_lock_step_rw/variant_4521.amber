#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_4_1_1_11readvirtual_gid;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false))) && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false))) && (false)), (_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false))) && (false))) || false)) && true)))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, 1 * (1))))) | (1)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(0.0, abs(0.0), 0.0, sqrt(1.0), 0.0, 0.0, 1.0, abs(0.0)), (mat4x2(0.0, abs(0.0), 0.0, sqrt(1.0), 0.0, 0.0, 1.0, abs(0.0))) - mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), mix(float(float(_GLF_IDENTITY(mat4x2(0.0, abs(0.0), 0.0, sqrt(1.0), 0.0, 0.0, 1.0, abs(0.0)), (mat4x2(0.0, abs(0.0), 0.0, sqrt(1.0), 0.0, 0.0, 1.0, abs(0.0))) - mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), float(_GLF_FUZZED(6550.2453)), bool(false)))), _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))) - sqrt(0.0)))))))))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uvec3 GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base;
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat2((injectionSwitch) * mat2(1.0), 0.0, 0.0)))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y = _GLF_IDENTITY(subgroup_size, (0u >> _GLF_IDENTITY(uint(2u), uint(2u))) | (subgroup_size));
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))
                barrier();
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), min(min(injectionSwitch.x, injectionSwitch.x), min(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 1.0, 1.0, log(1.0)))), _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(0.7) : injectionSwitch.x)))), injectionSwitch.x)))), _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), injectionSwitch.x)))) < injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)), transpose(transpose(mat2(injectionSwitch, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x))))), (mat2(injectionSwitch, 1.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - 0.0))) * mat2(1.0)))).x, clamp(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(0.0, min(0.0, 0.0)) + (injectionSwitch.x)))))) < injectionSwitch.y), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))), (false ? _GLF_FUZZED(4.1) : _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch)))))[0], _GLF_FUZZED(5.9)), vec2(_GLF_FUZZED(-94.92), (injectionSwitch)[1]), bvec2(false, true))).x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x)))))) < injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))))
              {
               for(int _injected_loop_counter = (1 | 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true, true)), ! (! (bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true, true)))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) || false))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               for(int _injected_loop_counter = (0 & 59346); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(8), int(8))) >> _GLF_IDENTITY(int(5), int(5)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(8), int(8))) >> _GLF_IDENTITY(int(5), int(5)))), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(8), int(8))) >> _GLF_IDENTITY(int(5), int(5)))), true, true, false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(8), int(8))) >> _GLF_IDENTITY(int(5), int(5)))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(8), int(8))) >> _GLF_IDENTITY(int(5), int(5)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(8), int(8))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) - int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5))), int(5))), (_GLF_IDENTITY(int(5), clamp(int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5))), int(5)))) ^ (0 >> _GLF_IDENTITY(int(7), int(7))))))))))) || false), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(8), int(8))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, (5) - 0)))) - 0))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(8), int(8))), 0 | (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(8), int(8))), _GLF_IDENTITY(int(int((0 >> _GLF_IDENTITY(int(8), int(8))))), (int(int((0 >> _GLF_IDENTITY(int(8), int(8)))))) | (int(int((0 >> _GLF_IDENTITY(int(8), int(8)))))))))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, (5) - 0)))) - 0)))))) && true), true, true, false)))) && true))); _injected_loop_counter --)
                    {
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)) || false, ! (! ((_GLF_WRAPPED_IF_FALSE(false)) || false)))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, abs(0.0), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), mix(float(_GLF_FUZZED((- -6.6))), float(dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), bool(true))), mix(float(dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), float(_GLF_FUZZED(-38.09)), bool(false)))))), (vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, abs(0.0), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0)), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 0.0), _GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : vec2(1.0, 0.0)), (false ? _GLF_FUZZED(mix(injectionSwitch.tt, vec2(9.1, 5263.8819), vec2(0.8, -3184.5625))) : (false ? _GLF_FUZZED(injectionSwitch) : vec2(1.0, 0.0))))), vec2(1.0, 0.0)), mix(float(dot(vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), max(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), (true ? _GLF_IDENTITY(1.0, max(1.0, 1.0)) : _GLF_FUZZED(-4.2))))))), 0.0), vec2(1.0, 0.0))), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-38.09), (true ? _GLF_IDENTITY(_GLF_FUZZED(-38.09), 1.0 * (_GLF_FUZZED(-38.09))) : _GLF_FUZZED(round(dot(-2.7, -9079.7016))))), min(_GLF_FUZZED(-38.09), _GLF_FUZZED(-38.09)))), _GLF_ZERO(0.0, injectionSwitch.x) + (_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-38.09), (true ? _GLF_IDENTITY(_GLF_FUZZED(-38.09), 1.0 * (_GLF_FUZZED(-38.09))) : _GLF_FUZZED(round(dot(-2.7, -9079.7016))))), min(_GLF_FUZZED(-38.09), _GLF_FUZZED(-38.09)))), clamp(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-38.09), (true ? _GLF_IDENTITY(_GLF_FUZZED(-38.09), 1.0 * (_GLF_FUZZED(-38.09))) : _GLF_FUZZED(round(dot(-2.7, -9079.7016))))), min(_GLF_FUZZED(-38.09), _GLF_FUZZED(-38.09)))), mix(float(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-38.09), (true ? _GLF_IDENTITY(_GLF_FUZZED(-38.09), 1.0 * (_GLF_FUZZED(-38.09))) : _GLF_FUZZED(round(dot(-2.7, -9079.7016))))), min(_GLF_FUZZED(-38.09), _GLF_FUZZED(-38.09))))), float(_GLF_FUZZED(5367.7412)), bool(false))), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-38.09), (true ? _GLF_IDENTITY(_GLF_FUZZED(-38.09), 1.0 * (_GLF_FUZZED(-38.09))) : _GLF_FUZZED(round(dot(-2.7, -9079.7016))))), min(_GLF_FUZZED(-38.09), _GLF_FUZZED(-38.09)))), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-38.09), (true ? _GLF_IDENTITY(_GLF_FUZZED(-38.09), 1.0 * (_GLF_FUZZED(-38.09))) : _GLF_FUZZED(round(dot(-2.7, -9079.7016))))), min(_GLF_FUZZED(-38.09), _GLF_FUZZED(-38.09)))))))), bool(false))))))) * vec2(1.0, 1.0))).y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     for(int _injected_loop_counter = ((26376 & 0) << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                      }
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).x < injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))))), ! (! (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))))))))))
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               else
                                {
                                 do
                                  {
                                   barrier();
                                  }
                                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                              }
                             else
                              {
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-331.657), _GLF_FUZZED(72.52)), bvec2(false, false))), injectionSwitch)).y))))
                      barrier();
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch, injectionSwitch)).y)), _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, bool(bvec3(true, false, true))), true, true))) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), (! (false)) || false)), ! (! (! (_GLF_IDENTITY(! (false), (! (false)) || false)))))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 for(int _injected_loop_counter = ((1 | 1) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (-69899 & 0)); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)), injectionSwitch)).x > injectionSwitch.y)), false)), (bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), false))) && true))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), (false ? _GLF_FUZZED(vec2(-2.4, 247.511)) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))))) - vec2(0.0, 0.0)), injectionSwitch)).x > injectionSwitch.y)), false)), (bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), false))) && true)))))), (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)), injectionSwitch)).x > injectionSwitch.y)), false)), (bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), false))) && true)))))), false || (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x3(injectionSwitch.x, cos(0.0), abs(1.0), 0.0, 1.0, sqrt(1.0), 1.0, 1.0, 1.0, 0.0, 0.0, length(_GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)))))), (float(mat4x3(injectionSwitch.x, cos(0.0), abs(1.0), 0.0, 1.0, sqrt(1.0), 1.0, 1.0, 1.0, 0.0, 0.0, length(_GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))))))) - 0.0)) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)), injectionSwitch)).x > injectionSwitch.y)), false)), (bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), false))) && true))))))))) || false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_WRAPPED_IF_TRUE(true)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && true), false, true)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), true, true, false)))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-32.77)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y)), true), bvec3(bvec4(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.x = num_workgroup;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, uint(uvec2(_GLF_IDENTITY(workgroup_size * workgroup_id, min(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) - 0u), workgroup_size * workgroup_id)), 1u)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, false || (_injected_loop_counter != 1))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.z = workgroup_base;
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false, false))), bool(bvec4(false, false, false, false))))) && true))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false, false))), bool(bvec4(false, false, false, false))))) && true))), true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false, false))), bool(bvec4(false, false, false, false))))) && true))))))), true && (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false, false))), bool(bvec4(false, false, false, false))))) && true))), true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false, false))), bool(bvec4(false, false, false, false))))) && true)))))))))))), ! (! (bool(bool(false)))))))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0, 1.0), transpose(transpose(mat3x4(injectionSwitch, 1.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0, 1.0)))))), injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.z + subgroup_id * GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y, clamp(GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.z + _GLF_IDENTITY(subgroup_id * GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y, (subgroup_id * GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y) | uint(_GLF_ZERO(0.0, injectionSwitch.x))), GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.z + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y, _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.z + subgroup_id * GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y, (0u << _GLF_IDENTITY(uint(2u), uint(2u))) ^ (GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.z + _GLF_IDENTITY(subgroup_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (subgroup_id)) * GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y)))) + subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))), bool(bool(! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))))))))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) / vec2(1.0, 1.0)).y))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), false || (bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || (injectionSwitch.x > injectionSwitch.y))))))))))))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       GLF_merged2_0_1_4_1_1_11readvirtual_gid.y = virtual_gid;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false))))))))));
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) >> 0)); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) || false) || false)))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint next_virtual_gid = GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.z + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y, clamp(GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y, GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y, GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y)), (0u ^ 0u) ^ (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y, clamp(GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y, GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y, GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y)))) : _GLF_FUZZED(_GLF_IDENTITY(GLF_merged2_0_1_4_1_1_11readvirtual_gid.y, (GLF_merged2_0_1_4_1_1_11readvirtual_gid.y) | (GLF_merged2_0_1_4_1_1_11readvirtual_gid.y))))), uint(uvec3(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y, clamp(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y, clamp(GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y, GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y, GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y)), GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y, GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y)), (0u ^ 0u) ^ (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y, clamp(GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y, GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y, GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y)))) : _GLF_FUZZED(_GLF_IDENTITY(GLF_merged2_0_1_4_1_1_11readvirtual_gid.y, (GLF_merged2_0_1_4_1_1_11readvirtual_gid.y) | (GLF_merged2_0_1_4_1_1_11readvirtual_gid.y))))), ~ (~ (subgroup_id * _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y, clamp(GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y, GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y, GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y)), (0u ^ 0u) ^ (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y, clamp(GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y, GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y, GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y)))) : _GLF_FUZZED(_GLF_IDENTITY(GLF_merged2_0_1_4_1_1_11readvirtual_gid.y, (GLF_merged2_0_1_4_1_1_11readvirtual_gid.y) | (GLF_merged2_0_1_4_1_1_11readvirtual_gid.y)))))))), 0u, 0u))) + ((subgroup_local_id + 1) % GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_sizeworkgroup_base.y);
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (((injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).x))); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), _GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)))) < 1); _injected_loop_counter ++)
        {
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint read = atomicLoad(buf[GLF_merged2_0_1_4_1_1_11readvirtual_gid.y], _GLF_IDENTITY(4, (4) - 0), 64, 0);
 do
  {
   _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_4_1_1_11readvirtual_gid.x = read, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_4_1_1_11readvirtual_gid.x = read, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (GLF_merged2_0_1_4_1_1_11readvirtual_gid.x = read)), _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_4_1_1_11readvirtual_gid.x = read, 0u ^ (GLF_merged2_0_1_4_1_1_11readvirtual_gid.x = _GLF_IDENTITY(_GLF_IDENTITY(read, (read) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(read, (read) / 1u), (_GLF_IDENTITY(read, (read) / 1u)) * 1u)) | (_GLF_IDENTITY(read, (read) / 1u)))))) * 1u, ~ (~ ((_GLF_IDENTITY(GLF_merged2_0_1_4_1_1_11readvirtual_gid.x = read, _GLF_IDENTITY(0u ^ (_GLF_IDENTITY(GLF_merged2_0_1_4_1_1_11readvirtual_gid.x = _GLF_IDENTITY(read, (read) / 1u), (true ? _GLF_IDENTITY(GLF_merged2_0_1_4_1_1_11readvirtual_gid.x = _GLF_IDENTITY(read, (read) / 1u), ~ (~ (GLF_merged2_0_1_4_1_1_11readvirtual_gid.x = _GLF_IDENTITY(read, (read) / 1u)))) : _GLF_FUZZED(47686u)))), (false ? _GLF_FUZZED(42498u) : 0u ^ (GLF_merged2_0_1_4_1_1_11readvirtual_gid.x = _GLF_IDENTITY(_GLF_IDENTITY(read, min(read, read)), (read) / 1u)))))) * 1u))))) ^ (0u >> _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, (0u) / 1u))))), (_GLF_IDENTITY(GLF_merged2_0_1_4_1_1_11readvirtual_gid.x = _GLF_IDENTITY(read, (read) * (1u & 1u)), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_4_1_1_11readvirtual_gid.x = read, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (GLF_merged2_0_1_4_1_1_11readvirtual_gid.x = read)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_4_1_1_11readvirtual_gid.x = read, 1u * (GLF_merged2_0_1_4_1_1_11readvirtual_gid.x = read)), 0u ^ (GLF_merged2_0_1_4_1_1_11readvirtual_gid.x = _GLF_IDENTITY(read, (read) / 1u)))) * 1u, ~ (~ ((_GLF_IDENTITY(GLF_merged2_0_1_4_1_1_11readvirtual_gid.x = read, _GLF_IDENTITY(0u ^ (GLF_merged2_0_1_4_1_1_11readvirtual_gid.x = _GLF_IDENTITY(read, (read) / 1u)), (false ? _GLF_FUZZED(_GLF_IDENTITY(42498u, min(42498u, 42498u))) : 0u ^ (GLF_merged2_0_1_4_1_1_11readvirtual_gid.x = _GLF_IDENTITY(read, _GLF_IDENTITY((read), ((read)) + 0u) / 1u)))))) * 1u))))) ^ (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(0u), uint(0u)), max(0u >> _GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(0u), uint(0u)), (true ? 0u >> _GLF_IDENTITY(uint(0u), uint(0u)) : _GLF_FUZZED(subgroup_id)))))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, max(1, 1))))) ^ 0)), 4, 64, 4);
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   atomicStore(checker[GLF_merged2_0_1_4_1_1_11readvirtual_gid.y], GLF_merged2_0_1_4_1_1_11readvirtual_gid.x, 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
  barrier();
 do
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(48.21)), bool(false))), injectionSwitch.y))))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(5.3, 35.39)) : injectionSwitch)).x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) + vec2(0.0, 0.0)).y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(48.21)), bool(false))), injectionSwitch.y))))), false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))), (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) && true), true))), true))), (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
