#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(subgroup_local_id + 1 < subgroup_size)
  {
   switch(_GLF_SWITCH(0))
    {
     case 80:
     for(     mat2x4(5096.6675, -6271.4841, -82.25, -4.0, 5.0, -5.6, -751.293, 28.99);
 (6.4 > fma(-76.35, 9.5, -86.08)); uintBitsToFloat(mix(virtual_gid, virtual_gid, true)))
      {
       int _GLF_SWITCH_0_0v[91], _GLF_SWITCH_0_1v[2];
       uvec2 _GLF_SWITCH_0_2v, _GLF_SWITCH_0_3v[75], _GLF_SWITCH_0_4v;
       if(mix(true, true, (mat4(756.103, 577.874, -6.2, -87.66, 913.670, -120.164, -7817.1580, -9350.9334, -3.4, 4.1, 984.294, 6529.2454, 65.04, -4562.9185, 4.2, 3.5) != mat4(33.62, -62.83, 653.322, 8713.8481, 6.0, 3.5, 8.2, -96.74, 479.990, 79.42, -9.4, 3.5, 5.1, -1.6, -9.0, 94.20))))
        {
         ;
         while((mat2x4(-2468.1350, -977.133, 4.9, 5173.1077, 5.7, 921.783, 3355.2125, 1.6) == mat2x4(109.604, -670.333, 592.452, 6.7, 2.3, -52.18, 9.9, -8.3)))
          {
           mat4x3 _GLF_SWITCH_0_5v;
           mat3x2 _GLF_SWITCH_0_6v;
           bvec3(bvec4(true, true, true, true));
           sinh(vec4(-263.625, 3194.2246, 7.3, -27.67));
           ivec2(49933, 76529);
           ((mat3x2(-98.22, 83.82, -4392.8347, -68.89, 80.67, -1.3) * vec3(-8857.7081, 6.5, -262.773)));
           ;
           ivec3 _GLF_SWITCH_0_7v[76];
           mat4x2 _GLF_SWITCH_0_8v;
          }
         while(true)
          {
           sign((int(9.9) * ivec3(-86901, 50138, 10662)));
           mat2x3(2.3, 6274.5245, 2.9, -387.231, -9.2, -1.0);
           ivec3 _GLF_SWITCH_0_9v[17];
          }
         mat4 _GLF_SWITCH_0_10v;
         for(float _GLF_SWITCH_0_11v[10]; false; mat3x2(-6.4, 0.8, 14.77, 6846.3551, -538.260, 47.85))
          {
           ivec3(47383, -11858, 41511);
           uvec4 _GLF_SWITCH_0_12v;
           ;
           (-88515 | ivec2(-25393, -58630));
           mat2x3 _GLF_SWITCH_0_13v[35], _GLF_SWITCH_0_14v, _GLF_SWITCH_0_15v;
           mat4x3 _GLF_SWITCH_0_16v[48], _GLF_SWITCH_0_17v, _GLF_SWITCH_0_18v;
           (mat2(0.8, -8806.8385, -59.54, -1.3) * mat3x2(4075.0227, 98.17, 6.1, 4.7, 26.84, 1132.9220));
           mat2x3 _GLF_SWITCH_0_19v, _GLF_SWITCH_0_20v[73], _GLF_SWITCH_0_21v;
           ivec4(36162, -23508, -82850, -10097);
          }
         for(         mat3x2(-73.90, -493.854, -99.08, -15.60, -9.7, -27.75);
 (mat3x2(0.0, -10.58, 6747.3128, -1.8, -8.2, 3.5) != (mat3(6.1, 67.60, 5730.2221, -9.2, -937.034, -636.424, 1.5, -311.564, 842.225) , mat3x2(-283.840, 7.3, 9.3, 216.861, 42.93, -3807.6127))); (3.0 / vec4(-1.9, 0.3, 7.1, 3.7)))
          {
           normalize(8.3);
           mat3x4(-8571.8607, 32.53, -7.9, 1449.7044, 30.57, -62.46, -4.3, -1.9, -6.1, 4675.0344, 229.293, -4.7);
           ;
           mat3 _GLF_SWITCH_0_22v, _GLF_SWITCH_0_23v, _GLF_SWITCH_0_24v[79];
           vec4 _GLF_SWITCH_0_25v;
           mat4x3 _GLF_SWITCH_0_26v, _GLF_SWITCH_0_27v;
           bvec4(true, false, true, false);
          }
         mat2x4(-22.91, 2.4, -2589.5358, 1.0, 1841.5024, 6659.3471, -8146.9583, 4666.3424);
        }
       mat2x3 _GLF_SWITCH_0_28v, _GLF_SWITCH_0_29v[91], _GLF_SWITCH_0_30v[29];
       if(false)
        {
         mat2 _GLF_SWITCH_0_31v, _GLF_SWITCH_0_32v[63], _GLF_SWITCH_0_33v;
         int _GLF_SWITCH_0_34v[44], _GLF_SWITCH_0_35v;
         {
          ivec2 _GLF_SWITCH_0_36v;
          bvec4((subgroup_local_id < read), bvec2(false, true), true);
          mat4 _GLF_SWITCH_0_37v[69];
         }
         for(uvec4 _GLF_SWITCH_0_38v; false; mat2(-5.7, 786.059, -3638.8198, 1.1))
          {
           mat4x2(8608.6563, 12.62, 336.032, -3.1, -7.0, -55.05, -763.346, 1035.5996);
           bvec2 _GLF_SWITCH_0_39v, _GLF_SWITCH_0_40v;
          }
         bvec2 _GLF_SWITCH_0_41v;
         for(         (next_virtual_gid * uvec4(168467u, 113922u, 119046u, 175523u));
 any(_GLF_SWITCH_0_41v); ivec2(-75004, -29570))
          {
           ivec4(-11679, -97293, 36647, 31494);
           int _GLF_SWITCH_0_42v, _GLF_SWITCH_0_43v, _GLF_SWITCH_0_44v;
           mat2x3(8.4, 5.8, 35.37, 733.432, 6.9, 3.8);
           uvec4 _GLF_SWITCH_0_45v, _GLF_SWITCH_0_46v, _GLF_SWITCH_0_47v;
           _GLF_SWITCH_0_46v;
           _GLF_SWITCH_0_45v.ar;
           bvec3 _GLF_SWITCH_0_48v;
           ivec4(-3983, 84992, 74272, -62165);
          }
         uvec4(175001u, 72470u, 30403u, 56802u);
         bvec4(true, false, false, true);
         while((_GLF_SWITCH_0_41v.x))
          {
           ((mat4x2(-4962.1560, -4.3, -98.40, 3.3, -9266.5659, -6996.2855, -5.2, -4.0) * mat4(-9792.2948, 584.690, 9.2, -5.8, 755.334, 1.6, 324.038, 8399.4903, 52.74, -2.6, 1139.7146, -1.0, 5.9, 0.1, 6901.4436, -8.1)) * mat2x4(-1.7, 517.676, 261.970, -0.5, 8.7, 1.1, 5.2, -399.719));
           ivec4(-80196, -43382, 82615, 70504);
           bvec3(true, false, false);
           ;
           ;
           uvec3 _GLF_SWITCH_0_49v[55], _GLF_SWITCH_0_50v, _GLF_SWITCH_0_51v;
           vec4(-0.7, 25.62, -0.8, -755.565)[1];
           bitfieldInsert(uvec4(14722u, 188093u, 23993u, 8283u), uvec4(80316u, 6570u, 80705u, 151885u), 48956, (_GLF_SWITCH_0_35v --));
          }
        }
       else
        {
         {
          uvec3(111295u, 120708u, 63955u);
         }
         if((7.7 != sinh(41.10)))
          {
           uint _GLF_SWITCH_0_52v[67], _GLF_SWITCH_0_53v[91], _GLF_SWITCH_0_54v;
          }
         else
          {
           ;
          }
         ivec3 _GLF_SWITCH_0_55v, _GLF_SWITCH_0_56v[91], _GLF_SWITCH_0_57v;
         for(mat2x3 _GLF_SWITCH_0_58v; true; bvec4(true, false, true, false))
          {
           bvec4 _GLF_SWITCH_0_59v, _GLF_SWITCH_0_60v;
          }
         for(mat4x2 _GLF_SWITCH_0_61v, _GLF_SWITCH_0_62v[1], _GLF_SWITCH_0_63v[69]; (mat3x2(-8574.6369, 3.6, -935.394, 481.416, 3329.4237, 1.4) == mat3x2(_GLF_SWITCH_0_28v)); mat3x4(-5235.8956, -2.9, -4256.3419, 2232.7100, -9.3, 3.7, 0.9, -382.358, 2.0, 9648.5531, -8.0, 74.37))
          {
          }
         _GLF_SWITCH_0_55v;
         bool _GLF_SWITCH_0_64v;
         while(_GLF_SWITCH_0_64v)
          {
           vec3(80.10, -3.5, 7.5);
           uvec3 _GLF_SWITCH_0_65v;
           ;
           mat3x4 _GLF_SWITCH_0_66v[15], _GLF_SWITCH_0_67v[27], _GLF_SWITCH_0_68v;
           ;
           (mat4x2(-679.647, 6.6, -0.2, -781.497, -2.6, -6658.4279, -6.0, 6.6) * mat2x4(-4.2, -9.5, 1.8, -7678.1897, -2.8, -822.879, 9998.2327, -77.90));
           atomicXor(subgroup_size, subgroup_size);
           bvec3(_GLF_SWITCH_0_64v, (atomicCompSwap(next_virtual_gid, subgroup_id, subgroup_local_id) > num_workgroup), _GLF_SWITCH_0_64v);
           vec3(53.92, -5.7, -86.18);
          }
         mat4x2 _GLF_SWITCH_0_69v[17];
        }
       -1736.5982;
       ((subgroup_id & uvec3(61148u, 106397u, 44731u)) | uvec3(34599u, 125410u, 72192u));
      }
     case 0:
     int i = 0;
     atomicStore(checker[virtual_gid], read, 4, 64, 4);
     break;
     default:
     1;
    }
  }
 else
  {
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
