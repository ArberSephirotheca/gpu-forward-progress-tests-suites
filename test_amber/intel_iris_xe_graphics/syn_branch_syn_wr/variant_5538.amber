#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY(0, (0) >> 0) + (int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         for(int _injected_loop_counter = (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (_GLF_IDENTITY(int(5), ~ (~ (int(5)))))))), ~ (~ (0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (_GLF_IDENTITY(int(5), ~ (~ (int(5)))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(4033) : int(6)))), (1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(4033) : int(6))))) | 0)) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = _GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(int(2), (0 | 0), 0), ~ (_GLF_IDENTITY(~ (ivec3(int(2), (0 | 0), 0)), (~ (ivec3(int(2), (0 | 0), 0))) ^ ivec3(0, 0, 0)))), clamp(ivec3(int(2), (0 | 0), 0), ivec3(int(2), (0 | 0), 0), ivec3(int(2), (0 | 0), 0))))))), min((int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(ivec3(int(2), (0 | 0), 0), clamp(ivec3(int(2), (0 | 0), 0), ivec3(int(2), (0 | 0), 0), ivec3(int(2), (0 | 0), 0))))))), _GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(ivec3(int(2), (0 | 0), 0), clamp(ivec3(int(2), (0 | 0), 0), ivec3(int(2), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | 0)) * 1) | 0), 0), ivec3(int(2), (_GLF_IDENTITY(0, clamp(0, 0, 0)) | 0), 0))))))), ~ (~ ((int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(ivec3(int(2), (0 | 0), 0), clamp(ivec3(int(2), (0 | 0), 0), ivec3(int(2), (0 | 0), 0), ivec3(int(2), (0 | 0), 0)))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)), true, false, false)))))))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         else
          {
          }
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY((1 | (0 << _GLF_IDENTITY(int(5), int(5)))), (_GLF_IDENTITY((1 | (0 << _GLF_IDENTITY(int(5), int(5)))), min((1 | (0 << _GLF_IDENTITY(int(5), int(5)))), (_GLF_IDENTITY(1 | _GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), int(5))), ((0 << _GLF_IDENTITY(int(5), int(5)))) >> 0), min(1 | _GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), int(5))), ((0 << _GLF_IDENTITY(int(5), int(5)))) >> 0), 1 | _GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), int(5))), ((0 << _GLF_IDENTITY(int(5), int(5)))) >> 0))))))) | ((1 | (0 << _GLF_IDENTITY(int(5), int(5)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0 | 0)), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0 | 0)), 0 | (_GLF_IDENTITY(0, (0) | (0 | 0))))) | (-8113 & 0))); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           else
            {
            }
          }
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1 ^ 1, _GLF_IDENTITY((1 ^ 1), ((1 ^ 1)) | ((1 ^ 1))) | 0))); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))
      {
       do
        {
         do
          {
           for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, length(sqrt(vec4(0.0, 0.0, 0.0, 0.0))) + (injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y)), (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)))), ! (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - sin(0.0)) < injectionSwitch.y)))))) && true)))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY((-541.276 + vec2(-89.44, -7.7)), mat2(1.0) * ((-541.276 + vec2(-89.44, -7.7))))) : injectionSwitch)).x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
          {
          }
         else
          {
           return;
          }
        }
      }
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID)).x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))
      {
      }
     else
      {
       do
        {
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false))))), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(bool(false)), true && (_GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bool(false)), true && (_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))), true, true, false)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bool(false)), true && (_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))), true, true, false)), false || (bool(bvec4(_GLF_IDENTITY(bool(bool(false)), true && (_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))), true, true, false))))) && true))))), _GLF_IDENTITY(_GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))))), _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))))), (true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))))), _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false))))))) && true), ! (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))))), _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))))), (true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))))), _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false))))))) && true)))))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false))))), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false))))), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false))))))))) || false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, true))))), true && (bool(bool(false))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, true && (true)))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), bool(bvec4((_GLF_IDENTITY(false, (false) && true)), false, true, false)))))))))), _GLF_IDENTITY(bool(bool(false)), true && (bool(_GLF_IDENTITY(bool(false), (bool(false)) || _GLF_IDENTITY(false, ! (! (false))))))))))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false))))), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), bool(bvec2(bool(bool(false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(bool(bool(false)), ! (! _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), _GLF_IDENTITY((bool(bool(false))) || false, ((bool(bool(false))) || false) && true))), ! (! ((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), _GLF_IDENTITY((bool(bool(false))) || false, ((bool(bool(false))) || false) && true)))))))), true, false), true))))), _GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), ! (! (_GLF_IDENTITY(true, (true) && true)))) && (bool(bool(false))))), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false))))))))) || false))))))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false))))), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))))))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false))))), bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false))))), true, true, true))))), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false))))), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! _GLF_IDENTITY((bool(false)), ((bool(false))) || false)))), true && (bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))))))))))) || false)))), true), true, true)))))))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (false))))))
                          {
                          }
                         else
                          {
                           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 return;
                                }
                              }
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, true && (_GLF_IDENTITY(_injected_loop_counter != 0, ! _GLF_IDENTITY((! (_injected_loop_counter != 0)), (_GLF_IDENTITY((! (_injected_loop_counter != 0)), true && ((! (_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(ivec3(_injected_loop_counter, 1, 0), max(ivec3(_injected_loop_counter, 1, 0), ivec3(_injected_loop_counter, 1, 0))))) != 0))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) < injectionSwitch.y))))))); _injected_loop_counter --)
                {
                 do
                  {
                   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY((_GLF_IDENTITY(int(0), int(0))) << 0, min(_GLF_IDENTITY((_GLF_IDENTITY(int(0), int(0))) << 0, ((_GLF_IDENTITY(int(0), int(0))) << 0) - 0), (_GLF_IDENTITY(int(0), int(0))) << 0)))), true && (_GLF_IDENTITY(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), bool(bvec2(_injected_loop_counter < ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) << 0), 0)))) >> _GLF_IDENTITY(int(0), int(0))), true)))))); _injected_loop_counter ++)
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               barrier();
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(false))
                                  break;
                                 break;
                                }
                              }
                             else
                              {
                              }
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              break;
                            }
                           if(_GLF_DEAD(false))
                            continue;
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0)).x > injectionSwitch.y))))
                              {
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   do
                                    {
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      break;
                                     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false, true, false)), bool(bool(bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false, true, false)))))); _injected_loop_counter ++)
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                        {
                                         return;
                                        }
                                       else
                                        {
                                        }
                                      }
                                    }
                                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false)), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))), (bool(bvec2(false, true))) && true))));
                                  }
                                 else
                                  {
                                  }
                                }
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_DEAD(false))
                                  return;
                                }
                              }
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            continue;
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))))))));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uvec4(subgroup_id, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) * 1u)) | (_GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, ~ (~ (0u))))))), uint(_GLF_ZERO(0.0, injectionSwitch.x))))) * subgroup_size, min(_GLF_IDENTITY(subgroup_id, uint(uvec4(subgroup_id, 0u, _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))))))) * subgroup_size, _GLF_IDENTITY(subgroup_id, uint(uvec4(subgroup_id, 0u, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))) * subgroup_size)) + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u) + _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | (workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(true, ! (! (true))) ? subgroup_size : _GLF_FUZZED(workgroup_id)))) | (subgroup_size))) | (subgroup_size)))), _GLF_IDENTITY(max(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size), clamp(max(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) ^ 0u, _GLF_IDENTITY(((subgroup_id) ^ 0u) | ((subgroup_id) ^ 0u), max(((subgroup_id) ^ 0u) | ((subgroup_id) ^ 0u), (_GLF_IDENTITY((subgroup_id), uint(uvec2((subgroup_id), (0u << _GLF_IDENTITY(uint(5u), uint(5u)))))) ^ 0u) | ((subgroup_id) ^ 0u))))) * subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) ^ 0u, ((subgroup_id) ^ 0u) | ((subgroup_id) ^ 0u))) * subgroup_size), (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), ((subgroup_id)) << 0u) ^ 0u, ((subgroup_id) ^ 0u) | ((subgroup_id) ^ 0u))) * subgroup_size)) << 0u))), workgroup_base + _GLF_IDENTITY(subgroup_id, uint(uvec4(subgroup_id, 1u, 0u, 1u))) * subgroup_size), max(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)), workgroup_base, workgroup_base)), (_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)), workgroup_base, workgroup_base))) | (_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)), workgroup_base, workgroup_base)))) + subgroup_id * subgroup_size), max(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) * _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) | (1u)), 1u))), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, min(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 1u * (workgroup_base + subgroup_id * subgroup_size)), workgroup_base + subgroup_id * subgroup_size)), workgroup_base + subgroup_id * subgroup_size)), workgroup_base + subgroup_id * subgroup_size)), workgroup_base + subgroup_id * subgroup_size))))), ((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_base) : 0u))), ~ (~ (uint(_GLF_IDENTITY(0u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_base) : 0u)))))))) | _GLF_IDENTITY((workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec3(_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u), 1u, 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec3(_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u), 1u, 0u))), uint(uint(_GLF_IDENTITY(subgroup_size, uint(uvec3(_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u), 1u, 0u))))))) * 1u), 0u ^ (_GLF_IDENTITY(subgroup_size, uint(uvec3(_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u), 1u, 0u))))), (_GLF_IDENTITY(true, ! (! (true))) ? subgroup_size : _GLF_FUZZED(workgroup_id)))) | (subgroup_size))) | (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))), _GLF_IDENTITY(~ (~ ((workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(true, ! (! (true))) ? subgroup_size : _GLF_FUZZED(workgroup_id)))) | _GLF_IDENTITY((subgroup_size), ~ (~ (_GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size)))))))) | (subgroup_size))))), (~ (~ ((workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(true, ! (! (true))) ? subgroup_size : _GLF_FUZZED(workgroup_id)))) | _GLF_IDENTITY((subgroup_size), ~ (~ (_GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size)))))))) | (subgroup_size)))))) + 0u))), _GLF_IDENTITY(max(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, min(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))) + uint(_GLF_ZERO(0.0, injectionSwitch.x))), workgroup_base + subgroup_id * subgroup_size), clamp(max(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << 0u))), workgroup_base + subgroup_id * subgroup_size), max(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size), max(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)))))) * ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (3u) * uint(_GLF_ONE(1.0, injectionSwitch.y)))), _GLF_IDENTITY((uint(_GLF_IDENTITY(3u, (3u) * uint(_GLF_ONE(1.0, injectionSwitch.y))))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(uvec3((uint(_GLF_IDENTITY(3u, (3u) * uint(_GLF_ONE(1.0, injectionSwitch.y))))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, (106410u & 0u))))), uint(3u)))) >> 0u) + ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, max(1, 1)))), (subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, max(1, 1))))) ^ 0u)) % subgroup_size);
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))), ~ (~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))), (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))), 0u ^ ((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))))) / 1u)))))) + 1, min(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))), ~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))), _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))) / 1u, ((~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))) / 1u) << 0u)))), (~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), max(subgroup_local_id, subgroup_local_id)))) / 1u)))) >> (0u | 0u))))) + 1, _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))), ~ _GLF_IDENTITY((~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))), (~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))) / 1u)))), ((~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))), (~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))) / 1u))))) / (0u ^ 1u)))) + 1)) < subgroup_size)
            {
             int i = _GLF_IDENTITY(_GLF_IDENTITY(0, (0) * ((0 ^ 1) | 1)), ~ (~ _GLF_IDENTITY((0), min((0), _GLF_IDENTITY((0), int(ivec2((0), (0 >> _GLF_IDENTITY(int(8), int(8))))))))));
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 atomicStore(checker[virtual_gid], read, 4, _GLF_IDENTITY(64, (64) << (0 >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), ~ (~ (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-32433) : int(4)))))), clamp(_GLF_IDENTITY(int(4), ~ (~ (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-32433) : int(4)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), ~ (~ (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-32433) : _GLF_IDENTITY(int(4), 0 | (int(4)))))))), max(_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) >> (0 << _GLF_IDENTITY(int(3), int(3))))), ~ (~ (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-32433) : int(4)))))), _GLF_IDENTITY(int(4), ~ (~ (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-32433) : int(4)))))))), _GLF_IDENTITY(int(4), ~ (~ (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-32433) : int(4)))))))), int(4)))), 4);
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)));
              }
             else
              {
              }
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           else
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                          continue;
                         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(float(76858))), bool(false))) > injectionSwitch.y)))))), bool(bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(float(76858))), bool(false))) > injectionSwitch.y)))))))))))))))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), float(mat3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)))))))))
                            {
                             do
                              {
                               do
                                {
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                  {
                                   do
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                      }
                                     else
                                      {
                                       do
                                        {
                                         do
                                          {
                                           barrier();
                                          }
                                         while(_GLF_WRAPPED_LOOP(false));
                                        }
                                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))) && _GLF_IDENTITY(true, bool(bvec2(true, true))), (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))) && _GLF_IDENTITY(true, bool(bvec2(true, true))), ((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true)))))) && true)) || false))));
                                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        continue;
                                      }
                                    }
                                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false));
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              break;
                            }
                           else
                            {
                            }
                          }
                        }
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           do
                            {
                             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                              {
                               for(int _injected_loop_counter = ((int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(7), int(7))) & (-22389 << 83372)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ _GLF_IDENTITY(0, 0 | (0)))); _injected_loop_counter ++)
                                {
                                 do
                                  {
                                   if(_GLF_DEAD(false))
                                    continue;
                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                                    {
                                    }
                                   else
                                    {
                                     atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, (true ? read : _GLF_FUZZED(_GLF_IDENTITY((workgroup_base + 94992u), clamp((workgroup_base + 94992u), _GLF_IDENTITY((workgroup_base + 94992u), ((workgroup_base + 94992u)) - 0u), (workgroup_base + 94992u)))))), 4, _GLF_IDENTITY(64, 0 ^ _GLF_IDENTITY((64), ~ (~ ((64))))), 4);
                                    }
                                  }
                                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))));
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))));
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 do
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), ~ (~ (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 | (1))), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 | (1))), (false ? _GLF_FUZZED(-63618) : _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 | (1))), (_GLF_IDENTITY(true, bool(bool(true))) ? int(_GLF_IDENTITY(1, 0 | (1))) : _GLF_FUZZED(-76302))))) : _GLF_FUZZED(-24825)))))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ _GLF_IDENTITY((~ (int(1))), ((~ (int(1)))) | 0)))), ~ (~ (_GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), ~ (~ (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 | (1))), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 | (1))), (false ? _GLF_FUZZED(-63618) : _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 | (1))), (true ? int(_GLF_IDENTITY(1, 0 | (1))) : _GLF_FUZZED(-76302))))) : _GLF_FUZZED(-24825)))))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))), min(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), ~ (~ (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 | (1))), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 | (1))), (false ? _GLF_FUZZED(-63618) : _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 | (1))), (true ? int(_GLF_IDENTITY(1, 0 | (1))) : _GLF_FUZZED(-76302))))) : _GLF_FUZZED(-24825)))))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), ~ (~ (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 | (1))), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 | (1))), (false ? _GLF_FUZZED(-63618) : _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 | (1))), (true ? int(_GLF_IDENTITY(1, 0 | (1))) : _GLF_FUZZED(-76302))))) : _GLF_FUZZED(-24825)))))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1))))))))))), (true ? ((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, max(1, 1))), ~ (~ (int(_GLF_IDENTITY(1, max(1, 1)))))), int(1)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), int(1)))), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), int(1)))), ((~ (_GLF_IDENTITY(int(1), int(1))))) | ((~ (_GLF_IDENTITY(int(1), int(1)))))), min((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(1), int(1))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(1), int(1))), (~ (_GLF_IDENTITY(int(1), int(1)))) - 0), _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(int(_GLF_IDENTITY(int(1), int(1)))), ~ (~ (int(int(_GLF_IDENTITY(int(1), int(1))))))))), (~ (_GLF_IDENTITY(int(1), int(1)))) | (~ (_GLF_IDENTITY(int(1), int(1))))), ~ (_GLF_IDENTITY(int(1), int(1)))))), (~ (_GLF_IDENTITY(int(1), int(1)))))), 1, 1, 1), _GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(ivec4(33469, -21687, -48026, -69033)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), int(1)))), min((~ (_GLF_IDENTITY(int(1), int(1)))), (~ (_GLF_IDENTITY(int(1), int(1)))))), 1, 1, 1), ~ (~ (ivec4(_GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), int(1)))), min((~ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0) ^ (_GLF_IDENTITY(int(1), int(1)))))), (~ (_GLF_IDENTITY(int(1), int(1)))))), 1, 1, 1))))), ((false ? _GLF_FUZZED(ivec4(33469, -21687, -48026, -69033)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), int(1)))), min((~ (_GLF_IDENTITY(int(1), int(1)))), (~ (_GLF_IDENTITY(int(1), int(1)))))), 1, 1, 1), ~ (~ (ivec4(_GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), int(1)))), min((~ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0) ^ (_GLF_IDENTITY(int(1), int(1)))))), (~ (_GLF_IDENTITY(int(1), int(1)))))), 1, 1, 1)))))) | ((false ? _GLF_FUZZED(ivec4(33469, -21687, -48026, -69033)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), int(1)))), min((~ (_GLF_IDENTITY(int(1), int(1)))), (~ (_GLF_IDENTITY(int(1), int(1)))))), 1, 1, 1), ~ (~ (ivec4(_GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), int(1)))), min((~ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0) ^ (_GLF_IDENTITY(int(1), int(1)))))), (~ (_GLF_IDENTITY(int(1), int(1)))))), 1, 1, 1))))))), (_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(ivec4(33469, -21687, -48026, -69033)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), int(1)))), min((~ (_GLF_IDENTITY(int(1), int(1)))), (~ (_GLF_IDENTITY(int(1), int(1)))))), 1, 1, 1), ~ (~ (ivec4(_GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), int(1)))), min((~ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0) ^ (_GLF_IDENTITY(int(1), int(1)))))), (~ (_GLF_IDENTITY(int(1), int(1)))))), 1, 1, 1))))), ((false ? _GLF_FUZZED(ivec4(33469, -21687, -48026, -69033)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), int(1)))), min((~ (_GLF_IDENTITY(int(1), int(1)))), (~ (_GLF_IDENTITY(int(1), int(1)))))), 1, 1, 1), ~ (~ (ivec4(_GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), int(1)))), min((~ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0) ^ (_GLF_IDENTITY(int(1), int(1)))))), (~ (_GLF_IDENTITY(int(1), int(1)))))), 1, 1, 1)))))) | ((false ? _GLF_FUZZED(ivec4(33469, -21687, -48026, -69033)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), int(1)))), min((~ (_GLF_IDENTITY(int(1), int(1)))), (~ (_GLF_IDENTITY(int(1), int(1)))))), 1, 1, 1), ~ (~ (ivec4(_GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), int(1)))), min((~ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0) ^ (_GLF_IDENTITY(int(1), int(1)))))), (~ (_GLF_IDENTITY(int(1), int(1)))))), 1, 1, 1))))))), (_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(ivec4(33469, -21687, -48026, -69033)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), int(1)))), min((~ (_GLF_IDENTITY(int(1), int(1)))), (~ (_GLF_IDENTITY(int(1), int(1)))))), 1, 1, 1), ~ (~ (ivec4(_GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), int(1)))), min((~ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0) ^ (_GLF_IDENTITY(int(1), int(1)))))), (~ (_GLF_IDENTITY(int(1), int(1)))))), 1, 1, 1))))), ((false ? _GLF_FUZZED(ivec4(33469, -21687, -48026, -69033)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), int(1)))), min((~ (_GLF_IDENTITY(int(1), int(1)))), (~ (_GLF_IDENTITY(int(1), int(1)))))), 1, 1, 1), ~ (~ (ivec4(_GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), int(1)))), min((~ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0) ^ (_GLF_IDENTITY(int(1), int(1)))))), (~ (_GLF_IDENTITY(int(1), int(1)))))), 1, 1, 1)))))) | ((false ? _GLF_FUZZED(ivec4(33469, -21687, -48026, -69033)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), int(1)))), min((~ (_GLF_IDENTITY(int(1), int(1)))), (~ (_GLF_IDENTITY(int(1), int(1)))))), 1, 1, 1), ~ (~ (ivec4(_GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), int(1)))), min((~ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0) ^ (_GLF_IDENTITY(int(1), int(1)))))), (~ (_GLF_IDENTITY(int(1), int(1)))))), 1, 1, 1))))))), ivec4(0, 0, 0, 0) | (_GLF_IDENTITY((false ? _GLF_FUZZED(ivec4(33469, -21687, -48026, -69033)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), int(1)))), min((~ (_GLF_IDENTITY(int(1), int(1)))), (~ (_GLF_IDENTITY(int(1), int(1)))))), 1, 1, 1), ~ (~ (ivec4(_GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), int(1)))), min((~ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0) ^ (_GLF_IDENTITY(int(1), int(1)))))), (~ (_GLF_IDENTITY(int(1), int(1)))))), 1, 1, 1))))), ((false ? _GLF_FUZZED(ivec4(33469, -21687, -48026, -69033)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), int(1)))), min((~ (_GLF_IDENTITY(int(1), int(1)))), (~ (_GLF_IDENTITY(int(1), int(1)))))), 1, 1, 1), ~ (~ (ivec4(_GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), int(1)))), min((~ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0) ^ (_GLF_IDENTITY(int(1), int(1)))))), (~ (_GLF_IDENTITY(int(1), int(1)))))), 1, 1, 1)))))) | ((false ? _GLF_FUZZED(ivec4(33469, -21687, -48026, -69033)) : _GLF_IDENTITY(ivec4(_GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), int(1)))), min((~ (_GLF_IDENTITY(int(1), int(1)))), (~ (_GLF_IDENTITY(int(1), int(1)))))), 1, 1, 1), ~ (~ (ivec4(_GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), int(1)))), min((~ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0) ^ (_GLF_IDENTITY(int(1), int(1)))))), (~ (_GLF_IDENTITY(int(1), int(1)))))), 1, 1, 1)))))))))) ^ ivec4(0, 0, 0, 0))) + ivec4(0, 0, 0, 0))))))) >> _GLF_IDENTITY(int(1), int(1))) : _GLF_FUZZED(77378))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY(((false ? 76195 : _GLF_IDENTITY((true ? 75326 : 28534), ((true ? 75326 : 28534)) << 0)) & 0), ~ (~ (((false ? 76195 : _GLF_IDENTITY((true ? 75326 : 28534), ((true ? 75326 : 28534)) << 0)) & _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))))))), _GLF_IDENTITY(bool(bvec2(_injected_loop_counter > _GLF_IDENTITY(((false ? 76195 : _GLF_IDENTITY((true ? 75326 : 28534), ((true ? 75326 : 28534)) << 0)) & 0), ~ (~ (((false ? 76195 : _GLF_IDENTITY((true ? 75326 : 28534), ((true ? 75326 : 28534)) << 0)) & _GLF_IDENTITY(0, _GLF_IDENTITY((true ? 0 : _GLF_FUZZED(_injected_loop_counter)), clamp((true ? 0 : _GLF_FUZZED(_injected_loop_counter)), (true ? 0 : _GLF_FUZZED(_injected_loop_counter)), _GLF_IDENTITY((true ? 0 : _GLF_FUZZED(_injected_loop_counter)), ~ (~ ((true ? 0 : _GLF_FUZZED(_injected_loop_counter)))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2(_injected_loop_counter > _GLF_IDENTITY(((false ? 76195 : _GLF_IDENTITY((true ? 75326 : 28534), ((true ? 75326 : 28534)) << 0)) & 0), ~ (~ (((false ? 76195 : _GLF_IDENTITY((true ? 75326 : 28534), ((true ? 75326 : 28534)) << 0)) & _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(int(0)), (int(int(0))) | (_GLF_IDENTITY(int(int(0)), 0 ^ (int(int(0))))))), (true ? 0 : _GLF_FUZZED(_injected_loop_counter))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false))), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false)), bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false)), true, false, true))))))))))), ! (! (bool(! (_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) && true) || false) || (false)))))))))))))
                      {
                      }
                     else
                      {
                       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
                        break;
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
                        break;
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y, true), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, true))))))))))
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) | (1)), 1)) & 1)); _injected_loop_counter ++)
                                {
                                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                                  {
                                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), ! (! (_GLF_IDENTITY(false, true && (false)))))), bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), ! (! ((_GLF_IDENTITY(false, true && (false))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))))
                                    {
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      return;
                                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                        {
                                         if(_GLF_DEAD(false))
                                          {
                                           do
                                            {
                                             do
                                              {
                                               do
                                                {
                                                 do
                                                  {
                                                   return;
                                                   do
                                                    {
                                                     if(_GLF_DEAD(false))
                                                      return;
                                                    }
                                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                  }
                                                 while(_GLF_WRAPPED_LOOP(false));
                                                }
                                               while(_GLF_WRAPPED_LOOP(false));
                                              }
                                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                            }
                                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))));
                                          }
                                        }
                                       else
                                        {
                                        }
                                      }
                                    }
                                   else
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                      {
                                       if(_GLF_DEAD(false))
                                        return;
                                      }
                                     else
                                      {
                                      }
                                     for(int _injected_loop_counter = _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                      {
                                       return;
                                      }
                                     if(_GLF_DEAD(false))
                                      return;
                                    }
                                  }
                                }
                              }
                             else
                              {
                              }
                            }
                          }
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false)))))))
                        continue;
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) && true))));
                }
              }
             else
              {
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x), float(mat4x3(clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)))) / 1.0)), injectionSwitch.x)) < injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, max(1, 1))))) : _GLF_FUZZED(-27983))))), _GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(22601) : _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), 0 ^ (int(1)))) / 1))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)) < (1 & (1 ^ _GLF_IDENTITY(0, clamp(0, 0, 0)))), bool(bvec3(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)) < (1 & (1 ^ _GLF_IDENTITY(0, clamp(0, 0, 0)))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6038.4480), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-3.1)), bvec2(true, false)))) - vec2(0.0, 0.0)).x))); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             do
                              {
                               do
                                {
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, false, true))))))), ! (! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, false, true))))))))))))))))
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                      }
                                     else
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         if(_GLF_WRAPPED_IF_TRUE(true))
                                          {
                                           return;
                                          }
                                         else
                                          {
                                          }
                                        }
                                      }
                                    }
                                   else
                                    {
                                    }
                                   if(_GLF_DEAD(false))
                                    return;
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                            }
                          }
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          return;
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                }
               else
                {
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
   else
    {
    }
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
