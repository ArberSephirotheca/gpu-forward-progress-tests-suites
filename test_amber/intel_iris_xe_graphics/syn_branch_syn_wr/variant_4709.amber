#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false)))))))))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, false || (true)) && (false))), false || (_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ! (! ((false)))))))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) + mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), injectionSwitch)), (injectionSwitch) / vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)), bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && (injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(inversesqrt(-80.38)) : _GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY((1 | 1), clamp((_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (_GLF_IDENTITY(int(ivec2(1, 0)), (int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0), 0), (ivec2(0, 0) << _GLF_IDENTITY(ivec2(4), ivec2(4))) | (ivec2(1, 0))))) ^ 0)) ^ (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))), clamp(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << (0 << _GLF_IDENTITY(int(3), int(3))))), _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(_GLF_IDENTITY(int(6), 1 * (int(6))), int(6))))) << 0)))) | _GLF_IDENTITY(1, ~ (~ (1)))), (1 | 1), _GLF_IDENTITY((1 | 1), 0 | ((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, 0 | (1))))))) | 1))))), (_GLF_IDENTITY((1 | 1), clamp((_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (_GLF_IDENTITY(int(ivec2(1, 0)), (int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) ^ 0), 0), (ivec2(0, 0) << _GLF_IDENTITY(ivec2(4), ivec2(4))) | (ivec2(1, 0))))) ^ 0)) ^ (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))), clamp(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << (0 << _GLF_IDENTITY(int(3), int(3))))), _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(_GLF_IDENTITY(int(6), 1 * (int(6))), int(6))))) << 0)))) | _GLF_IDENTITY(1, ~ (~ (1)))), (1 | 1), _GLF_IDENTITY((1 | 1), 0 | ((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, 0 | (1))))))) | 1)))))) << 0)); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), (true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true && (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))), _GLF_IDENTITY(false, false || (false)) || (true && (_GLF_DEAD(false)))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true && (_GLF_DEAD(false)), false || (true && (_GLF_DEAD(false)))))))))) && true)))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))), true, true, true))))
    return;
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), min((gl_NumWorkGroups), (gl_NumWorkGroups))), uvec3(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u) ^ _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, 0u)), ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) >> _GLF_IDENTITY(uvec3(3u), uvec3(3u))) * (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, (0u) - 0u) : _GLF_FUZZED(subgroup_id))), clamp(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, _GLF_IDENTITY(0u, max(0u, 0u))))))))) >> uvec3(0u, 0u, 0u))) * uvec3(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) | 0u), 1u, 1u))), min((_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, 0u)), _GLF_IDENTITY((_GLF_IDENTITY((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))), (true ? _GLF_IDENTITY((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))), ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u)))) / uvec3(1u, 1u, 1u)) : _GLF_FUZZED(uvec3(102373u, 17964u, 49067u)))) >> _GLF_IDENTITY(uvec3(3u), uvec3(3u))), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((_GLF_IDENTITY((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))), (true ? _GLF_IDENTITY((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))), ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u)))) / uvec3(1u, 1u, 1u)) : _GLF_FUZZED(uvec3(102373u, 17964u, 49067u)))) >> _GLF_IDENTITY(uvec3(3u), uvec3(3u))), (false ? _GLF_FUZZED(uvec3(39620u, 193551u, 79609u)) : (_GLF_IDENTITY((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))), (true ? _GLF_IDENTITY((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))), ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u)))) / uvec3(1u, 1u, 1u)) : _GLF_FUZZED(uvec3(102373u, 17964u, 49067u)))) >> _GLF_IDENTITY(uvec3(3u), uvec3(3u))))))) * (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, _GLF_IDENTITY(0u, max(0u, 0u))))))))) >> uvec3(0u, 0u, 0u))) * uvec3(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) | 0u), 1u, 1u))), _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, 0u)), (_GLF_IDENTITY((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))), max(_GLF_IDENTITY((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))), uvec3(uvec4((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))), 0u))), (uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))))) >> _GLF_IDENTITY(uvec3(3u), uvec3(3u))) * (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[2], 0u | (gl_NumWorkGroups[2]))))) << uvec3(_GLF_IDENTITY(0u, (0u) - 0u), 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, _GLF_IDENTITY(0u, max(0u, 0u))))))))) >> uvec3(0u, 0u, 0u))) * uvec3(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) | 0u), 1u, 1u))), ((_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, 0u)), ((uvec3(1u, 1u, _GLF_IDENTITY(1u, (1u) | (1u))) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) >> _GLF_IDENTITY(uvec3(3u), uvec3(3u))) * _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, _GLF_IDENTITY(0u, max(0u, 0u))))))), clamp((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, _GLF_IDENTITY(0u, max(0u, 0u))))))), _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, _GLF_IDENTITY(0u, max(0u, 0u))))))), ((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, _GLF_IDENTITY(0u, max(0u, 0u)))))))) + uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, _GLF_IDENTITY(0u, max(0u, 0u))))))))))) >> uvec3(0u, 0u, 0u))) * uvec3(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))))))) | 0u), 1u, 1u)))) - uvec3(0u, 0u, 0u))))), (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, 0u)), ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) >> _GLF_IDENTITY(uvec3(3u), uvec3(3u))) * (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, _GLF_IDENTITY(0u, max(0u, 0u))))))))) >> uvec3(0u, 0u, 0u))) * uvec3(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) | 0u), 1u, 1u))), min((_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, 0u)), ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) >> _GLF_IDENTITY(uvec3(3u), _GLF_IDENTITY(uvec3(3u), ~ (~ (uvec3(3u)))))) * (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), clamp(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, _GLF_IDENTITY(0u, max(0u, 0u))))))))) >> uvec3(0u, 0u, 0u))) * uvec3(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) | 0u), 1u, 1u))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, 0u)), ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) >> _GLF_IDENTITY(uvec3(3u), uvec3(3u))) * (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, _GLF_IDENTITY(0u, max(0u, 0u))))))))) >> uvec3(0u, 0u, 0u))) * uvec3(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) | 0u), 1u, 1u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, 0u)), ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) >> _GLF_IDENTITY(uvec3(3u), uvec3(3u))) * (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, _GLF_IDENTITY(0u, max(0u, 0u))))))))) >> uvec3(0u, 0u, 0u))) * uvec3(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) | 0u), 1u, 1u)), ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, 0u)), ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) >> _GLF_IDENTITY(uvec3(3u), uvec3(3u))) * (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, _GLF_IDENTITY(0u, max(0u, 0u))))))))) >> uvec3(0u, 0u, 0u))) * uvec3(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) | 0u), 1u, 1u))))), _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, 0u)), ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) >> _GLF_IDENTITY(uvec3(3u), uvec3(3u))) * (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, _GLF_IDENTITY(0u, max(0u, 0u))))))))) >> uvec3(0u, 0u, 0u))) * uvec3(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) | 0u), 1u, 1u)), _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, 0u)), ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) >> _GLF_IDENTITY(uvec3(3u), uvec3(3u))) * (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, _GLF_IDENTITY(0u, max(0u, 0u))))))))) >> uvec3(0u, 0u, 0u))) * uvec3(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) | 0u), 1u, 1u))))), ((_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, 0u)), ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(3u), uvec3(_GLF_IDENTITY(3u, clamp(_GLF_IDENTITY(3u, 0u + (3u)), _GLF_IDENTITY(3u, (3u) | (3u)), 3u))))) >> _GLF_IDENTITY(uvec3(3u), _GLF_IDENTITY(uvec3(3u), (true ? uvec3(3u) : _GLF_FUZZED(uvec3(subgroup_local_id, subgroup_id, 62073u)))))) * _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(packSnorm2x16(vec2(6.7, -4814.1907))))), ~ (~ (0u))), 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(max(0u, 0u), (_GLF_IDENTITY(max(0u, 0u), max(max(0u, 0u), _GLF_IDENTITY(max(0u, 0u), max(max(0u, 0u), max(0u, 0u)))))) << 0u))))))), (false ? _GLF_FUZZED(uvec3(59549u, 73788u, 199361u)) : (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(packSnorm2x16(vec2(6.7, -4814.1907))))), ~ (~ (0u))), 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(max(0u, 0u), (_GLF_IDENTITY(max(0u, 0u), max(max(0u, 0u), _GLF_IDENTITY(max(0u, 0u), max(max(0u, 0u), max(0u, 0u)))))) << 0u))))))))))) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(_GLF_IDENTITY(uvec3(0u, 0u, 0u), (false ? _GLF_FUZZED(uvec4(77807u, 96563u, 88346u, 168738u).yxy) : uvec3(0u, 0u, 0u))), uvec3(0u, 0u, 0u))))) * uvec3(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) | 0u), 1u, 1u)))) - uvec3(0u, 0u, 0u))))), min((_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups), max((gl_NumWorkGroups), _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - uvec3(0u, 0u, 0u)))) << uvec3(0u, 0u, 0u)), ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) >> _GLF_IDENTITY(uvec3(3u), uvec3(3u))) * (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, _GLF_IDENTITY(0u, max(0u, 0u))), 0u ^ (clamp(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, _GLF_IDENTITY(0u, max(0u, 0u))))))))))) >> uvec3(0u, 0u, 0u))) * uvec3(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) | 0u), 1u, 1u))), min((_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, 0u)), ((_GLF_IDENTITY(uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u)), ~ (~ (uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(3u, (false ? _GLF_FUZZED(subgroup_size) : 3u))), uvec3(3u)))))) >> _GLF_IDENTITY(uvec3(3u), uvec3(3u))) * (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups) << uvec3(0u, 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, _GLF_IDENTITY(0u, max(0u, 0u))))), ((gl_NumWorkGroups) << uvec3(0u, 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, _GLF_IDENTITY(0u, max(0u, 0u)))))) | ((gl_NumWorkGroups) << uvec3(0u, 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, _GLF_IDENTITY(0u, max(0u, 0u))))))))))) >> uvec3(0u, 0u, 0u))) * uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, ~ (~ (1u)))), ((_GLF_IDENTITY(1u, ~ (~ (1u))))) | ((_GLF_IDENTITY(1u, ~ (~ (1u)))))) | 0u), 1u, 1u))), _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, 0u)), ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) >> _GLF_IDENTITY(uvec3(_GLF_IDENTITY(3u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (3u))), uvec3(3u))) * (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, _GLF_IDENTITY(0u, max(0u, 0u))))))))) >> uvec3(_GLF_IDENTITY(0u, (0u) / 1u), 0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))) * uvec3(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) | 0u), 1u, 1u))), _GLF_IDENTITY(((_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, max(0u, 0u)))), 0u)), ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) >> _GLF_IDENTITY(uvec3(3u), uvec3(3u))) * (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, min(0u, 0u)))), ~ (~ (0u))), 0u, _GLF_IDENTITY(0u, max(0u, 0u))))))))) >> uvec3(0u, 0u, 0u))) * uvec3(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) | 0u), 1u, 1u)))), (((_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, max(0u, 0u)))), 0u)), ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) >> _GLF_IDENTITY(uvec3(3u), uvec3(3u))) * (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, min(0u, 0u)))), ~ (~ (0u))), 0u, _GLF_IDENTITY(0u, max(0u, 0u))))))))) >> uvec3(0u, 0u, 0u))) * uvec3(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) | 0u), 1u, 1u))))) >> uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u))))), (_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, 0u)), ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) >> _GLF_IDENTITY(uvec3(3u), uvec3(3u))) * (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, _GLF_IDENTITY(0u, max(0u, 0u))))))))) >> uvec3(0u, 0u, 0u))) * uvec3(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) | 0u), 1u, 1u))), min(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, _GLF_IDENTITY(0u, min(0u, 0u)), 0u)), ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) >> _GLF_IDENTITY(uvec3(3u), uvec3(3u))) * (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_local_id))), 0u, _GLF_IDENTITY(0u, max(0u, 0u)))), max(0u, 0u))))))))) >> uvec3(0u, 0u, 0u))) * uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, ~ (~ (1u)))) | 0u, max(_GLF_IDENTITY((_GLF_IDENTITY(1u, ~ (~ (1u)))) | 0u, uint(uint((_GLF_IDENTITY(1u, ~ (~ (1u)))) | 0u))), (_GLF_IDENTITY(1u, ~ (~ (1u)))) | 0u))), 1u, 1u))), ((_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, _GLF_IDENTITY(0u, min(0u, 0u)), 0u)), ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) >> _GLF_IDENTITY(uvec3(3u), uvec3(3u))) * (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_local_id))), 0u, _GLF_IDENTITY(0u, max(0u, 0u)))), max(0u, 0u))))))))) >> uvec3(0u, 0u, 0u))) * uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, ~ (~ (1u)))) | 0u, max(_GLF_IDENTITY((_GLF_IDENTITY(1u, ~ (~ (1u)))) | 0u, uint(uint((_GLF_IDENTITY(1u, ~ (~ (1u)))) | 0u))), (_GLF_IDENTITY(1u, ~ (~ (1u)))) | 0u))), 1u, 1u)))) ^ uvec3(0u, 0u, 0u)), _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups), max(_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) >> uvec3(0u, 0u, 0u)), (gl_NumWorkGroups))) << _GLF_IDENTITY(uvec3(0u, 0u, 0u), clamp(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)))), ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(3u), _GLF_IDENTITY(uvec3(3u), max(uvec3(3u), uvec3(3u))))) >> _GLF_IDENTITY(uvec3(3u), uvec3(3u))) * (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(max(0u, 0u), (false ? _GLF_FUZZED(127147u) : max(0u, 0u))))))))))) >> uvec3(0u, 0u, 0u))) * uvec3(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) | 0u), 1u, _GLF_IDENTITY(1u, (1u) | (0u >> _GLF_IDENTITY(uint(3u), uint(3u))))))), ((_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, 0u)), ((uvec3(1u, 1u, _GLF_IDENTITY(1u, (1u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) >> _GLF_IDENTITY(uvec3(3u), uvec3(3u))) * (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, _GLF_IDENTITY(0u, max(0u, 0u))), (clamp(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, _GLF_IDENTITY(0u, max(0u, 0u)))) | (clamp(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, _GLF_IDENTITY(0u, max(0u, 0u))))))))))) >> uvec3(0u, 0u, 0u))) * uvec3(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) | 0u), 1u, 1u)))) - uvec3(0u, 0u, 0u)))))))) | uvec3(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, 0u))), (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u) ^ ((_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, 0u))) >> uvec3(0u, 0u, 0u))) * uvec3(1u, 1u, 1u)))))) << _GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) | (uvec3(0u, 0u, 0u))))) << uvec3(0u, 0u, 0u)) - uvec3(_GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) | (0u)))), 0u, _GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, (0u) - 0u))))).x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true) ? _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)) : _GLF_FUZZED(uvec3(36600u, 126479u, 91742u)))), (gl_WorkGroupSize) ^ uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u))))))) / uvec3(1u, 1u, 1u))) ^ uvec3(_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), clamp(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(true ? _GLF_IDENTITY(0u, (0u) >> 0u) : _GLF_FUZZED(subgroup_id), min(true ? _GLF_IDENTITY(0u, (0u) >> 0u) : _GLF_FUZZED(subgroup_id), true ? _GLF_IDENTITY(0u, (0u) >> 0u) : _GLF_FUZZED(subgroup_id))))), 0u))) >> uvec3(_GLF_IDENTITY(0u, (0u) ^ 0u), 0u, 0u)).x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-93.28), _GLF_FUZZED(7.5)), bvec2(false, false))) : _GLF_FUZZED(injectionSwitch))).y))) && true))) && true))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) < 1); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), ! (! (bool(bvec4(false, true, true, true)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), ! (! (bool(bvec4(false, true, true, true))))))), ! (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), ! (_GLF_IDENTITY(! (bool(bvec4(false, true, true, true))), (! (bool(bvec4(false, true, true, true)))) || false))))))))))))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
          {
           barrier();
          }
         else
          {
          }
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) - 0.0) > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(-3882.2900)), float(injectionSwitch[1]), bool(true))))).x, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(-3882.2900)), float(injectionSwitch[1]), bool(true))))).x) / 1.0) > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(344.790)), vec2(_GLF_FUZZED(-6.0), (injectionSwitch)[1]), bvec2(false, true))).x)) | (0))], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(-3882.2900)), float(injectionSwitch[1]), _GLF_IDENTITY(bool(_GLF_IDENTITY(true, (true) && true)), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, (true) && true)), bool(bvec3(bool(_GLF_IDENTITY(true, (true) && true)), true, true))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))).x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && _GLF_IDENTITY(true, (true) && true))))));
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, min(0, 0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, ! (! (_injected_loop_counter != 1)))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) - 0))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, (false) && true) || (_GLF_DEAD(false))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(float(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, 0.0, 0.0, length(vec3(0.0, 0.0, 0.0)))), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(vec2(float(mat2(injectionSwitch.x, 0.0, 0.0, length(vec3(0.0, 0.0, 0.0)))), 1.0), max(vec2(float(mat2(injectionSwitch.x, 0.0, 0.0, length(vec3(0.0, 0.0, 0.0)))), 1.0), vec2(float(mat2(injectionSwitch.x, 0.0, 0.0, length(vec3(0.0, 0.0, 0.0)))), 1.0))), (_GLF_IDENTITY(vec2(float(mat2(injectionSwitch.x, 0.0, 0.0, length(vec3(0.0, 0.0, 0.0)))), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0))), max(vec2(float(mat2(injectionSwitch.x, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(8695.2448)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, length(vec3(0.0, 0.0, 0.0)))), 1.0), _GLF_IDENTITY(vec2(float(mat2(injectionSwitch.x, 0.0, 0.0, length(vec3(0.0, 0.0, 0.0)))), 1.0), max(vec2(float(mat2(injectionSwitch.x, 0.0, 0.0, length(vec3(0.0, 0.0, 0.0)))), 1.0), vec2(float(mat2(injectionSwitch.x, 0.0, 0.0, length(vec3(0.0, 0.0, 0.0)))), 1.0)))))) - vec2(0.0, 0.0))), max(float(_GLF_IDENTITY(vec2(float(mat2(injectionSwitch.x, 0.0, 0.0, length(vec3(0.0, 0.0, 0.0)))), 1.0), _GLF_IDENTITY(max(vec2(float(mat2(injectionSwitch.x, 0.0, 0.0, length(vec3(0.0, 0.0, 0.0)))), 1.0), vec2(float(mat2(injectionSwitch.x, 0.0, 0.0, length(vec3(0.0, 0.0, 0.0)))), 1.0)), vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (max(vec2(float(mat2(injectionSwitch.x, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), length(vec3(0.0, 0.0, 0.0)))), 1.0), vec2(float(mat2(injectionSwitch.x, 0.0, 0.0, length(vec3(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-9.8)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), 1.0)))))), float(_GLF_IDENTITY(vec2(float(mat2(injectionSwitch.x, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(7.3) : 0.0))) + 0.0), length(vec3(0.0, 0.0, 0.0)))), 1.0), _GLF_IDENTITY(max(vec2(float(mat2(injectionSwitch.x, 0.0, 0.0, length(vec3(0.0, 0.0, 0.0)))), 1.0), vec2(float(mat2(injectionSwitch.x, 0.0, 0.0, length(vec3(0.0, 0.0, 0.0)))), 1.0)), max(max(vec2(float(mat2(injectionSwitch.x, 0.0, 0.0, length(vec3(0.0, 0.0, 0.0)))), 1.0), vec2(float(mat2(injectionSwitch.x, 0.0, 0.0, length(vec3(0.0, 0.0, 0.0)))), 1.0)), max(vec2(float(mat2(injectionSwitch.x, 0.0, 0.0, length(vec3(0.0, 0.0, 0.0)))), 1.0), vec2(float(mat2(injectionSwitch.x, 0.0, 0.0, length(vec3(0.0, 0.0, 0.0)))), 1.0))))))))), (false ? _GLF_FUZZED(5.6) : float(mat2(injectionSwitch.x, 0.0, 0.0, length(vec3(0.0, 0.0, 0.0))))))) > injectionSwitch.y)) || (false)), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) && true), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) && true), true, false))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
          barrier();
         continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         if(_GLF_DEAD(false))
          break;
         break;
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))).x > injectionSwitch.y)) && true)))))))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false || (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uvec2(subgroup_local_id, 1u)), 0u | (uint(uvec2(subgroup_local_id, 1u))))) + 1, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + 1) | (_GLF_IDENTITY(subgroup_local_id + 1, 0u | (_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(5852u) : subgroup_local_id + 1))))))), (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(0u, min(0u, 0u)) ^ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))) - 0u)), max((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), ((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))) | ((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))))) - 0u)), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)), 1u, 1u, 0u)), (uint(uvec4(_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)), 1u, 1u, 0u))) / 1u))) - 0u)), ((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) * 1u)))) - 0u))) | ((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))) - 0u))))))))) << 0u) % subgroup_size), (_GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))))) + 1) % subgroup_size), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) % subgroup_size, max(_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) % subgroup_size)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) % subgroup_size, max(_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) % subgroup_size)))), (((_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) % subgroup_size))) ^ (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))))) + 0u), max(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))))) + 1) % subgroup_size), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) % subgroup_size, max(_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) % subgroup_size)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) % subgroup_size, max(_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) % subgroup_size)))), (((_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) % subgroup_size))) ^ (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))))) + 0u), _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))))) + 1) % subgroup_size), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) % subgroup_size, max(_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) % subgroup_size)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) % subgroup_size, max(_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) % subgroup_size)))), (((_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) % subgroup_size))) ^ (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))))) + 0u), (_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))))) + 1) % subgroup_size), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) % subgroup_size, max(_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) % subgroup_size)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) % subgroup_size, max(_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) % subgroup_size)))), (((_GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) % subgroup_size))) ^ (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))))) + 0u)) * 1u)))) ^ _GLF_IDENTITY(0u, (0u) >> 0u));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4813.8863, 3.8)) : injectionSwitch)).x > injectionSwitch.y), false || (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true && ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(true && ((injectionSwitch.x > injectionSwitch.y)))), (bool(bool(true && ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))) && _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(9.0))), min(_GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(9.0))), _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(9.0))))))))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
       barrier();
      }
     for(int _injected_loop_counter = (0 | (0 & 48551)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0))) != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-43.80)), float(injectionSwitch.x), _GLF_IDENTITY(bool(true), _GLF_IDENTITY(false, true && (false)) || (_GLF_IDENTITY(bool(true), false || (bool(true))))))) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         return;
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), true && (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, bool(bvec3(false, false, false))), true))), true))), true)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 + (int(2))))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -57096)); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y)))))), bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y)))))))))))) || false))
        barrier();
       for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, 0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), 0 | (((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))))); _injected_loop_counter ++)
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((next_virtual_gid), min((next_virtual_gid), (next_virtual_gid))) | (next_virtual_gid))], uint(1), _GLF_IDENTITY(4, clamp(4, 4, 4)), 64, 4);
 for(int _injected_loop_counter = (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) ^ 0)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, _GLF_IDENTITY((0) ^ 0, (_GLF_IDENTITY((0) ^ 0, ((0) ^ 0) | 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x))))), 0 ^ (~ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec3(0, 0, 1)))) ^ 0))))) << _GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) + 0)))) << _GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY((false ? _GLF_FUZZED(99776) : 8), max(_GLF_IDENTITY((false ? _GLF_FUZZED(99776) : 8), (_GLF_IDENTITY((false ? _GLF_FUZZED(99776) : 8), max((false ? _GLF_FUZZED(99776) : 8), (false ? _GLF_FUZZED(99776) : 8)))) << 0), (false ? _GLF_FUZZED(99776) : 8))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(ivec2(int(8), 0)), (int(ivec2(int(8), 0))) ^ 0)), (int(_GLF_IDENTITY(8, ~ (~ (_GLF_IDENTITY(8, max(8, 8))))))) + 0), 0 | (_GLF_IDENTITY(int(8), _GLF_IDENTITY((int(_GLF_IDENTITY(8, ~ (~ (_GLF_IDENTITY(8, max(8, 8))))))), max(_GLF_IDENTITY((int(_GLF_IDENTITY(8, ~ (~ (_GLF_IDENTITY(8, max(8, 8))))))), ((int(_GLF_IDENTITY(8, ~ (~ (_GLF_IDENTITY(8, max(8, 8)))))))) | 0), (int(_GLF_IDENTITY(8, ~ (~ (_GLF_IDENTITY(8, max(8, 8))))))))) + 0))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter), 0 | (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))))) < 1))); _GLF_IDENTITY(_injected_loop_counter ++, 1 * (_injected_loop_counter ++)))
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) && true)) || false), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec4(bvec3(bvec3(false, true, false)), true)))))), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, false)))))))))), bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), true)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), true))))))))), bvec3(bvec3(bvec3(false, true, false))))))), false))))))), bool(bvec2(bool(bvec3(false, true, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false))), true))))))))
    break;
  }
 uint read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))) >> 0u)], 4, 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(subgroup_local_id + 1 < subgroup_size)
    {
     int i = _GLF_IDENTITY(0, _GLF_IDENTITY(0 | (0), int(_GLF_IDENTITY(ivec2(0 | (0), _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, max(0, 0)), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY(0, ~ (~ (0))) ^ (0))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))))), min(ivec2(0 | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, ~ (~ (0))), 0)))) - 0)), _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), int(ivec2(~ (0), 0))))), 0))), ivec2(0 | (0), 0))))));
     do
      {
       atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, (false ? _GLF_FUZZED(64156u) : read)), 4, 64, 4);
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), true, false)), true && (bool(bvec4(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), true, false))))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9528.3131), _GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((injectionSwitch)))[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY(-91.94, (_GLF_IDENTITY(-91.94, (-91.94) + 0.0)) / _GLF_ONE(1.0, injectionSwitch.y)))), bvec2(_GLF_IDENTITY(true, (true) && true), false)))) + vec2(0.0, 0.0)).y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          continue;
         break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))));
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
      }
     atomicStore(checker[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(read, _GLF_IDENTITY(_GLF_IDENTITY(clamp(read, read, _GLF_IDENTITY(read, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(read, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(read, max(read, read))), ((_GLF_IDENTITY(read, max(read, read)))) - 0u))))), ((~ (_GLF_IDENTITY(read, ~ (~ (_GLF_IDENTITY(read, max(_GLF_IDENTITY(read, (_GLF_IDENTITY(read, (read) | 0u)) - 0u), read)))))))) | 0u))), uint(uint(_GLF_IDENTITY(clamp(read, read, _GLF_IDENTITY(read, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(read, ~ (~ (_GLF_IDENTITY(read, max(read, read))))))), ((~ (_GLF_IDENTITY(read, ~ (~ (_GLF_IDENTITY(read, max(read, read)))))))) | 0u))), max(clamp(read, _GLF_IDENTITY(read, (read) ^ 0u), _GLF_IDENTITY(read, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(read, ~ (~ (_GLF_IDENTITY(read, max(read, read))))))), ((~ (_GLF_IDENTITY(read, ~ (~ (_GLF_IDENTITY(read, max(read, read)))))))) | 0u))), _GLF_IDENTITY(clamp(read, read, _GLF_IDENTITY(read, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(read, ~ (~ (_GLF_IDENTITY(read, max(read, read))))))), ((~ (_GLF_IDENTITY(read, ~ (~ (_GLF_IDENTITY(read, max(read, read)))))))) | 0u))), min(clamp(read, read, _GLF_IDENTITY(read, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(read, ~ (~ (_GLF_IDENTITY(read, max(read, read))))), (_GLF_IDENTITY(read, ~ (~ (_GLF_IDENTITY(read, max(read, read)))))) + 0u))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(read, ~ (~ (_GLF_IDENTITY(read, max(read, read))))))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(read, ~ (~ (_GLF_IDENTITY(read, max(read, read))))))), ~ (~ ((~ (_GLF_IDENTITY(read, ~ (~ (_GLF_IDENTITY(read, max(read, read))))))))))) ^ 0u)) | 0u))), clamp(read, read, _GLF_IDENTITY(read, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(read, max(read, read)), ~ (~ (_GLF_IDENTITY(read, max(read, read))))))), ((~ (_GLF_IDENTITY(read, ~ (~ (_GLF_IDENTITY(read, max(read, read)))))))) | 0u)))))))))), (clamp(read, _GLF_IDENTITY(read, max(_GLF_IDENTITY(read, max(read, read)), read)), _GLF_IDENTITY(read, min(read, read)))) - 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(read, _GLF_IDENTITY(clamp(read, read, read), (_GLF_IDENTITY(_GLF_IDENTITY(clamp(read, read, read), uint(_GLF_IDENTITY(uvec2(clamp(read, read, read), 1u), (uvec2(clamp(read, read, read), 1u)) | uvec2(0u, 0u)))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(clamp(read, read, read), uint(_GLF_IDENTITY(uvec2(clamp(read, read, read), 1u), (uvec2(clamp(read, read, read), 1u)) | uvec2(0u, 0u)))), (_GLF_IDENTITY(clamp(read, read, read), uint(_GLF_IDENTITY(uvec2(clamp(read, read, read), 1u), (uvec2(clamp(read, read, read), 1u)) | uvec2(0u, 0u))))) ^ 0u)))) | (clamp(read, read, read)))), _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(uint(8u), _GLF_IDENTITY((uint(8u)) ^ 0u, ((uint(8u)) ^ 0u) | ((uint(8u)) ^ 0u))))), ((0u << _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(uint(8u), _GLF_IDENTITY((uint(8u)) ^ 0u, ((uint(8u)) ^ 0u) | ((uint(8u)) ^ 0u)))))) << 0u) + (_GLF_IDENTITY(_GLF_IDENTITY(read, _GLF_IDENTITY(clamp(read, read, read), (_GLF_IDENTITY(clamp(read, read, read), uint(_GLF_IDENTITY(uvec2(clamp(read, read, _GLF_IDENTITY(read, 0u | (read))), 1u), _GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)) | uvec2(0u, 0u), ((_GLF_IDENTITY(uvec2(clamp(read, read, read), 1u), (_GLF_IDENTITY(uvec2(clamp(read, read, read), 1u), uvec2(0u, 0u) ^ (uvec2(clamp(read, read, read), 1u)))) >> uvec2(0u, 0u))) | uvec2(_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (0u) | (0u)), 0u, 0u)), 0u)) * ((uvec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uvec2(3u), uvec2(3u))) >> _GLF_IDENTITY(uvec2(3u), uvec2(3u)))))))) | (clamp(read, read, read)))), clamp(_GLF_IDENTITY(read, _GLF_IDENTITY(clamp(_GLF_IDENTITY(read, (_GLF_IDENTITY(read, uint(uint(read)))) | (read)), read, read), (_GLF_IDENTITY(clamp(read, read, read), uint(_GLF_IDENTITY(uvec2(clamp(read, read, _GLF_IDENTITY(read, (_GLF_IDENTITY(read, (read) ^ 0u)) >> 0u)), 1u), (uvec2(clamp(read, read, _GLF_IDENTITY(read, (read) | (read))), 1u)) | uvec2(0u, 0u))))) | (clamp(read, read, read)))), _GLF_IDENTITY(read, _GLF_IDENTITY(clamp(read, read, read), (_GLF_IDENTITY(clamp(read, read, read), uint(_GLF_IDENTITY(uvec2(clamp(read, read, read), 1u), (uvec2(clamp(read, read, read), 1u)) | uvec2(0u, _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, 0u | (0u)))))))))) | (clamp(read, read, read)))), _GLF_IDENTITY(_GLF_IDENTITY(read, min(_GLF_IDENTITY(read, 0u ^ (read)), _GLF_IDENTITY(read, (read) - 0u))), _GLF_IDENTITY(clamp(read, read, read), (_GLF_IDENTITY(clamp(read, read, read), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(clamp(read, read, read), 1u), _GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)), (_GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)), ((uvec2(clamp(read, read, read), 1u))) | ((uvec2(clamp(read, read, read), 1u))))) * (uvec2(1u, 1u) | uvec2(1u, 1u))), 0u, 0u), ~ (~ (uvec4(_GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)), (_GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)), ((uvec2(clamp(read, read, read), 1u))) | ((uvec2(clamp(read, read, read), 1u))))) * (uvec2(1u, 1u) | uvec2(1u, 1u))), 0u, 0u))))), (uvec2(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)), (_GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)), ((uvec2(clamp(read, read, read), 1u))) | ((uvec2(clamp(read, read, read), 1u))))) * (uvec2(1u, 1u) | uvec2(1u, 1u))), 0u, 0u), ~ (~ (uvec4(_GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)), (_GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)), ((uvec2(clamp(read, read, read), 1u))) | ((uvec2(clamp(read, read, read), 1u))))) * (uvec2(1u, 1u) | uvec2(1u, 1u))), 0u, 0u)))))) ^ uvec2(0u, 0u))) | uvec2(0u, 0u))), (true ? _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(clamp(read, read, read), 1u), _GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)), (_GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)), ((uvec2(clamp(read, read, read), 1u))) | ((uvec2(clamp(read, read, read), 1u))))) * (uvec2(1u, 1u) | uvec2(1u, 1u))), 0u, 0u), ~ (~ (uvec4(_GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)), (_GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)), ((uvec2(clamp(read, read, read), 1u))) | ((uvec2(clamp(read, read, read), 1u))))) * (uvec2(1u, 1u) | uvec2(1u, 1u))), 0u, 0u))))), (uvec2(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)), (_GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)), ((uvec2(clamp(read, read, read), 1u))) | ((uvec2(clamp(read, read, read), 1u))))) * (uvec2(1u, 1u) | uvec2(1u, 1u))), 0u, 0u), ~ (~ (uvec4(_GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)), (_GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)), ((uvec2(clamp(read, read, read), 1u))) | ((uvec2(clamp(read, read, read), 1u))))) * (uvec2(1u, 1u) | uvec2(1u, 1u))), 0u, 0u)))))) ^ uvec2(0u, 0u))) | uvec2(0u, 0u))), (uint(_GLF_IDENTITY(uvec2(clamp(read, read, read), 1u), _GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)), (_GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)), ((uvec2(clamp(read, read, read), 1u))) | ((uvec2(clamp(read, read, read), 1u))))) * (uvec2(1u, 1u) | uvec2(1u, 1u))), 0u, 0u), ~ (~ (uvec4(_GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)), (_GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)), ((uvec2(clamp(read, read, read), 1u))) | ((uvec2(clamp(read, read, read), 1u))))) * (uvec2(1u, 1u) | uvec2(1u, 1u))), 0u, 0u))))), (uvec2(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)), (_GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)), ((uvec2(clamp(read, read, read), 1u))) | ((uvec2(clamp(read, read, read), 1u))))) * (uvec2(1u, 1u) | uvec2(1u, 1u))), 0u, 0u), ~ (~ (uvec4(_GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)), (_GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)), ((uvec2(clamp(read, read, read), 1u))) | ((uvec2(clamp(read, read, read), 1u))))) * (uvec2(1u, 1u) | uvec2(1u, 1u))), 0u, 0u)))))) ^ uvec2(0u, 0u))) | uvec2(0u, 0u)))) | (uint(_GLF_IDENTITY(uvec2(clamp(read, read, read), 1u), _GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)), (_GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)), ((uvec2(clamp(read, read, read), 1u))) | ((uvec2(clamp(read, read, read), 1u))))) * (uvec2(1u, 1u) | uvec2(1u, 1u))), 0u, 0u), ~ (~ (uvec4(_GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)), (_GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)), ((uvec2(clamp(read, read, read), 1u))) | ((uvec2(clamp(read, read, read), 1u))))) * (uvec2(1u, 1u) | uvec2(1u, 1u))), 0u, 0u))))), (uvec2(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)), (_GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)), ((uvec2(clamp(read, read, read), 1u))) | ((uvec2(clamp(read, read, read), 1u))))) * (uvec2(1u, 1u) | uvec2(1u, 1u))), 0u, 0u), ~ (~ (uvec4(_GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)), (_GLF_IDENTITY((uvec2(clamp(read, read, read), 1u)), ((uvec2(clamp(read, read, read), 1u))) | ((uvec2(clamp(read, read, read), 1u))))) * (uvec2(1u, 1u) | uvec2(1u, 1u))), 0u, 0u)))))) ^ uvec2(0u, 0u))) | uvec2(0u, 0u))))) : _GLF_FUZZED(num_workgroup))))) | (clamp(read, read, read))))))))) >> 0u), _GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, max(4, 4)))), 64, 4);
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
