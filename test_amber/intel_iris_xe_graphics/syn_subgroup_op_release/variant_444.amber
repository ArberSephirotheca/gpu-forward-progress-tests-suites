#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 0) uniform buf0 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY((int(0)), ((int(0))) / 1) - 0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))))))));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(1, int(int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x, mix(float(_GLF_FUZZED(5.0)), float(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x), _GLF_IDENTITY(bool(true), bool(bvec3(_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), true, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), (false ? _GLF_FUZZED(-176.483) : _GLF_IDENTITY((injectionSwitch.x), (true ? (injectionSwitch.x) : _GLF_FUZZED(4.3))))) / 1.0), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(false))), vec2(_GLF_FUZZED((- -9253.0402)), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))[1]), bvec2(false, true))).x, (injectionSwitch.x) / 1.0)) / 1.0) > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch))) - vec2(0.0, 0.0)).y)))))))
              {
               for(int _injected_loop_counter = ((_GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (1 << _GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), min(1 << _GLF_IDENTITY(int(6), int(6)), 1 << _GLF_IDENTITY(int(6), int(6)))), clamp(1 << _GLF_IDENTITY(int(6), int(6)), 1 << _GLF_IDENTITY(int(6), int(6)), 1 << _GLF_IDENTITY(int(6), int(6))))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) ^ 0))) << _GLF_IDENTITY(int(3), int(3)), (((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) / int(_GLF_ONE(1.0, injectionSwitch.y))))) | (_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), int(6)), clamp(1 << _GLF_IDENTITY(int(6), int(6)), 1 << _GLF_IDENTITY(int(6), int(6)), 1 << _GLF_IDENTITY(int(6), int(6))))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) ^ 0))) << _GLF_IDENTITY(int(3), int(3))) ^ _GLF_IDENTITY(0, (0) - 0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) >> 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
                  {
                   do
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, clamp(0, 0, 0))); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                }
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       do
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))) || false))
                              barrier();
                             if(_GLF_DEAD(false))
                              {
                               do
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    barrier();
                                   barrier();
                                  }
                                 else
                                  {
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                       barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                            }
                           barrier();
                          }
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                    }
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(178.096)), float(injectionSwitch.x), bool(true))))) < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y))) && true))) && (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (false)), true, true))), (injectionSwitch.x > injectionSwitch.y))))));
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, sqrt(1.0), 0.0, 0.0, 0.0, determinant(mat4(0.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(0.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(32.26)), bool(false)))) - sin(0.0)), 1.0, abs(1.0)), transpose(transpose(mat4x2(0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, abs(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(clamp(24.10, -3.9, 1.1)) : _GLF_IDENTITY(1.0, max(1.0, 1.0))))))))))), 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, sin(0.0), 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0, 1.0))).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(vec2(mat3(injectionSwitch, sqrt(1.0), 0.0, 0.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, sin(0.0), 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0, 1.0)), (true ? vec2(mat3(injectionSwitch, sqrt(_GLF_IDENTITY(1.0, float(vec4(1.0, 0.0, 0.0, 0.0)))), 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), determinant(_GLF_IDENTITY(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, sin(0.0), 0.0, 0.0, 0.0, 1.0, 0.0), (mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, sin(0.0), 0.0, 0.0, 0.0, 1.0, 0.0)) * mat4(1.0))), 0.0, 1.0)) : _GLF_FUZZED(injectionSwitch)))).x > injectionSwitch.y)) && true))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, max(_GLF_IDENTITY(2, max(2, 2)), 2))), clamp(int(2), int(2), int(2))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (true ? _GLF_IDENTITY(int(2), int(2)) : _GLF_FUZZED(48135)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-41.98, -681.843)))), injectionSwitch)), injectionSwitch)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(7, min(7, _GLF_IDENTITY(7, (false ? _GLF_FUZZED(-28560) : 7))))), _GLF_IDENTITY(int(7), max(int(7), int(7)))), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(7, min(7, _GLF_IDENTITY(7, (false ? _GLF_FUZZED(-28560) : 7))))), _GLF_IDENTITY(int(7), max(int(7), int(7)))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(7, min(7, _GLF_IDENTITY(7, (false ? _GLF_FUZZED(-28560) : 7))))), _GLF_IDENTITY(int(7), max(int(7), int(7)))), (_GLF_IDENTITY(int(_GLF_IDENTITY(7, min(7, _GLF_IDENTITY(7, (false ? _GLF_FUZZED(-28560) : 7))))), _GLF_IDENTITY(int(7), max(int(7), int(7))))) >> 0), _GLF_IDENTITY(int(_GLF_IDENTITY(7, min(7, _GLF_IDENTITY(7, (false ? _GLF_FUZZED(-28560) : 7))))), _GLF_IDENTITY(int(7), max(int(7), int(7)))))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), _GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), true)))));
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false)))), ! (! (false || (_GLF_WRAPPED_LOOP(false)))))));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), (false || (_GLF_IDENTITY(true, bool(bvec3(true, true, true))))) && true)), true && (_GLF_IDENTITY(true, _GLF_IDENTITY(false || (_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), (false || (_GLF_IDENTITY(true, bool(bvec3(true, true, _GLF_IDENTITY(true, bool(bvec3(true, false, false)))))))) && _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))))))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (((injectionSwitch.x > injectionSwitch.y))) || false)))));
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))) && true)))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
  }
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(0u, (0u) >> 0u) | (gl_NumWorkGroups.x)), _GLF_IDENTITY(~ (~ _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u | (gl_NumWorkGroups.x))), ~ (~ ((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u | (_GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x))))))))), clamp(~ (~ _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u | (gl_NumWorkGroups.x))), ~ (~ ((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u | (_GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x))))))))), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u | (gl_NumWorkGroups.x))), ~ (~ ((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u | (_GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x))))))))), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u | (gl_NumWorkGroups.x))), ~ (~ ((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u | (_GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x))))))))))));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), ! (! (! (_GLF_WRAPPED_IF_TRUE(true))))))))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) * 1)), (int(6)) | (int(6))), (_GLF_IDENTITY(int(6), (int(6)) | (int(6)))) / 1))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) - 0)), _GLF_IDENTITY(int(6), 0 ^ (int(6)))))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))) || false)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), true))), ! (! (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false || ((injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(false || ((injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (false || ((injectionSwitch.x > injectionSwitch.y))), false || (! (false || ((injectionSwitch.x > injectionSwitch.y))))))))))))))))))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false)))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)).x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x2(injectionSwitch.x, 1.0, 0.0, tan(0.0), tan(0.0), _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(6.6) : _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-7808.3114))))))))), transpose(_GLF_IDENTITY(transpose(mat3x2(injectionSwitch.x, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), tan(0.0), tan(0.0), _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))))), mat3(1.0) * (transpose(mat3x2(injectionSwitch.x, 1.0, 0.0, tan(0.0), tan(0.0), _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))))))))))), (false ? _GLF_FUZZED(-60.20) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x2(injectionSwitch.x, 1.0, 0.0, tan(0.0), tan(0.0), _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))), transpose(_GLF_IDENTITY(transpose(mat3x2(injectionSwitch.x, 1.0, 0.0, tan(0.0), tan(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(7.5)), bool(false)))), float(_GLF_FUZZED(-1147.5912)), bool(false)))), _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))))), mat3(1.0) * (transpose(mat3x2(injectionSwitch.x, 1.0, 0.0, tan(0.0), tan(0.0), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), (false ? _GLF_FUZZED(84.52) : _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), float(_GLF_IDENTITY(float(_GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))), 0.0 + (float(_GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))))))))))))))))), 0.0 + (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x2(injectionSwitch.x, 1.0, 0.0, tan(0.0), tan(0.0), _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))), transpose(_GLF_IDENTITY(transpose(mat3x2(injectionSwitch.x, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, float(mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-8.3)), float(1.0), bool(true))), 1.0, 1.0, 0.0))), 1.0, 1.0)), 0.0, tan(0.0), tan(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(7.5)), bool(false)))), float(_GLF_FUZZED(-1147.5912)), bool(false)))), _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))))), mat3(1.0) * (transpose(mat3x2(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-4.2)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 1.0, 0.0, tan(0.0), tan(0.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 0.0 + (_GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))))), (false ? _GLF_FUZZED(84.52) : _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), float(_GLF_IDENTITY(float(_GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(_GLF_IDENTITY(vec2(0.0, 0.0), mix(vec2(_GLF_FUZZED((7021.6002 * -4.7)), _GLF_FUZZED((-2579.3736 * 1.9))), vec2((vec2(0.0, 0.0))[0], (vec2(0.0, 0.0))[1]), bvec2(true, true))), vec2(1.0, 1.0)))), 0.0 + (float(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), min(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))), dot(vec2(0.0, 0.0), vec2(1.0, 1.0)))))))))))))))))))))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)) + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | (1)))), 1))); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     barrier();
    }
   barrier();
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(-4.4)), bool(false))))).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(-4.4)), bool(false))), mix(float(_GLF_FUZZED(-197.199)), float(_GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(-4.4)), bool(false)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY(mat2(1.0) * (vec2(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(0.3, 895.653)))), injectionSwitch, injectionSwitch))[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(-4.4)), bool(false))))), max(mat2(1.0) * _GLF_IDENTITY((vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(injectionSwitch[1], clamp(_GLF_IDENTITY(injectionSwitch[1], (false ? _GLF_FUZZED(-60.96) : injectionSwitch[1])), injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + 0.0)))), float(_GLF_FUZZED(-4.4)), bool(false))))), vec2(1.0, 1.0) * ((vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(injectionSwitch[1], clamp(_GLF_IDENTITY(injectionSwitch[1], (false ? _GLF_FUZZED(-60.96) : injectionSwitch[1])), injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + 0.0)))), float(_GLF_FUZZED(-4.4)), bool(false))))))), mat2(1.0) * (vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(-4.4)), bool(false))))))))).y) || false)) || false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, sin(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(faceforward(48.56, 479.055, -6.4)) : 0.0))) + (injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, true, _GLF_IDENTITY(false, ! (! (false))), false)))) || false), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, sin(0.0) + (injectionSwitch.x)) > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(false, ! (! (false))), false)), (_GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(false, ! (! (false))), false)), (bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(false, ! (! (false))), false))) || false)) && true))) || false, ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(false, ! (! (false))), false)), (_GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(false, ! (! (false))), false)), (bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(false, ! (! (false))), false))) || false)) && true))) || false, _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(false, ! (! (false))), false)), (_GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(false, ! (! (false))), false)), (bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(false, ! (! (false))), false))) || false)) && true))) || false)), false || (bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(false, ! (! (false))), false)), (_GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(false, ! (! (false))), false)), (bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(false, ! (! (false))), false))) || false)) && true))) || false)))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), (! (false)) || false)) || false))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (1 | ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) >> 0)), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y))))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + _GLF_IDENTITY(vec2(0.0, 0.0), max(vec2(0.0, 0.0), vec2(0.0, 0.0)))).y, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(9159.4123)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))).y, mix(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y), float(_GLF_FUZZED(-4242.0431)), bool(false))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-97.36) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, mix(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y), float(_GLF_FUZZED(-4242.0431)), bool(false))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)), float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat3x4(2.7, -53.04, -8.3, 3.5, 319.415, 9570.3912, 292.326, -817.083, 9.2, 8383.5959, -362.672, -9.1)) : mat3x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 1.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0))))))), mix(float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), vec2(vec2((injectionSwitch))))))) / vec2(1.0, 1.0)) + vec2(0.0, 0.0)).y), float(_GLF_FUZZED(-4242.0431)), bool(false))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)), 0.0, 1.0, 1.0, 0.0, sqrt(0.0), 1.0, 1.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0))))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 buf[virtual_gid] = 1;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), true), true, true)))))))
    barrier();
  }
 if(_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (subgroup_local_id + 1 < subgroup_size)))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), int(_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, 1 * (4)), 4)))), clamp((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), min(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4)))) << 0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4)))) << 0) : _GLF_FUZZED(15245))))), int(4)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(4), min(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4)))) << 0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4)))) << 0) : _GLF_FUZZED(15245))))), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), min(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4)))) << 0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4)))) << 0) : _GLF_FUZZED(15245))))), int(4)), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), min(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4)))) << 0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4)))) << 0) : _GLF_FUZZED(15245))))), int(4))) | 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) ^ (0 | 0)), min(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (4) | 0), 4, _GLF_IDENTITY(4, max(4, 4)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (0 | 0) + (_GLF_IDENTITY(4, int(ivec4(4, 0, 1, 0)))))))) * _GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(_GLF_IDENTITY(4, max(_GLF_IDENTITY(4, min(4, 4)), 4)), ~ (~ (4)))))))), (false ? _GLF_FUZZED(35987) : (1 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(_GLF_IDENTITY(4, max(_GLF_IDENTITY(4, min(4, 4)), 4)), ~ (~ (4)))))))))), int(_GLF_IDENTITY(ivec2((1 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(_GLF_IDENTITY(4, max(4, 4)), ~ (~ (4)))))))), 1), (ivec2((1 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(_GLF_IDENTITY(4, max(4, 4)), ~ (~ (4)))))))), 1)) - ivec2(0, 0)))) >> _GLF_IDENTITY(int(4), int(4))) | (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) >> (1 ^ 1)))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, min(4, 4))))) - 0)))), min((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) + _GLF_IDENTITY(0, ~ (~ (0))))), min(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY((4) | (4), ~ (~ ((4) | (4)))))) + _GLF_IDENTITY(0, ~ (~ (0))))), int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) + _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), clamp(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0, ~ (~ (0))))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), int(4), _GLF_IDENTITY(int(4), (int(4)) - 0))), int(4)), clamp((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), int(ivec3(_GLF_IDENTITY(int(_GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, (4) | 0) : _GLF_FUZZED(92875)))), int(4)), 0, 0))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) | ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ (~ (4)))), int(4)), int(_GLF_IDENTITY(ivec4(1 << _GLF_IDENTITY(int(4), int(4)), 1, 1, 1), ivec4(0, 0, 0, 0) ^ (ivec4(1 << _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-22906) : 1)), 1, 1)))))) >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(26875)))))), (_GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (4) | (4)))), clamp(1 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (4) | (4)))), 1 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (4) | _GLF_IDENTITY((4), clamp((4), (4), (4)))))), 1 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, _GLF_IDENTITY((4), (_GLF_IDENTITY((4), ((4)) | ((4)))) * 1) | (4))))))) >> _GLF_IDENTITY(int(4), int(4))), (((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (4) | (4)))), clamp(1 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (4) | (4)))), 1 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, _GLF_IDENTITY((4) | (4), (_GLF_IDENTITY((4) | (4), 0 ^ ((4) | (4)))) - 0)))), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) | (int(4))), int(_GLF_IDENTITY(4, _GLF_IDENTITY((4), 1 * (_GLF_IDENTITY((4), max((4), (4))))) | (4))))))) >> _GLF_IDENTITY(int(4), int(4)))) / 1) | (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(ivec2((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), 0)), clamp(int(ivec2((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), 0)), int(ivec2((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), 0)), int(ivec2((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), 0))))), 0 ^ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(ivec2((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), 0)), clamp(int(ivec2((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), 0)), int(ivec2((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), 0)), int(ivec2((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), 0)))))))) | ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(4), int(4)), int(ivec2(1 << _GLF_IDENTITY(int(4), int(4)), 0)))) >> _GLF_IDENTITY(int(4), int(4))))), _GLF_IDENTITY((((_GLF_IDENTITY(1, (1) << 0) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) - 0), (_GLF_IDENTITY(int(4), max(_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))), int(4)))) | (int(4))))) | ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | 0)))) - 0, (_GLF_IDENTITY((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) - 0), (int(4)) | (int(4))))) | ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | 0))), (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (0 & -22149) ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 | (_GLF_IDENTITY(int(4), int(4)))), _GLF_IDENTITY(int(4), int(4))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), ~ (~ (_GLF_IDENTITY(int(4), (int(4)) ^ 0)))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) - 0), (int(4)) | (_GLF_IDENTITY(int(_GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, (4) << 0) : _GLF_FUZZED(-20413)))), min(int(_GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, (4) << 0) : _GLF_FUZZED(-20413)))), int(_GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, (4) << 0) : _GLF_FUZZED(-20413)))))))))) | ((_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(53164))) << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 | (_GLF_IDENTITY(int(4), int(4))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (false ? _GLF_FUZZED(98016) : 4))) | (4))), _GLF_IDENTITY(int(4), (int(4)) | 0)))) - 0)) - 0, ((((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) - 0), (int(4)) | (int(4))))) | ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | 0)))) - 0) - 0)) << 0))) * 1)), _GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4)))), ((_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1)))))) ^ 0)))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) - 0), (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4)))), ((_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1)))))) ^ 0)))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) - 0), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4)))), ((_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1)))))) ^ 0)))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) - 0)) | (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4)))), ((_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1)))))) ^ 0)))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) - 0)))) >> 0)))), (_GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) * 1)))) ^ 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, _GLF_IDENTITY(int(ivec4(4, 1, 0, 0)), _GLF_IDENTITY((int(ivec4(4, 1, 0, 0))) * 1, min((int(ivec4(4, 1, 0, 0))) * 1, (int(ivec4(4, 1, 0, 0))) * 1)))))), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, _GLF_IDENTITY(int(ivec4(4, 1, 0, 0)), _GLF_IDENTITY((int(ivec4(4, 1, 0, 0))) * 1, min((int(ivec4(4, 1, 0, 0))) * 1, (int(ivec4(4, 1, 0, 0))) * 1)))))), (_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, _GLF_IDENTITY(int(ivec4(4, 1, 0, 0)), _GLF_IDENTITY((int(ivec4(4, 1, 0, 0))) * 1, min((int(ivec4(4, 1, 0, 0))) * 1, (int(ivec4(4, 1, 0, 0))) * 1))))))) - 0), 1)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) | (_GLF_IDENTITY(int(4), int(4))))))), clamp((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), ((_GLF_IDENTITY(1, (1) * 1) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) - 0)), int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0)))) | ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (int(4)) | 0)) >> 0), (_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (int(4)) | 0)) >> 0)) << 0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY((4), clamp((4), _GLF_IDENTITY((4), 0 + ((4))), _GLF_IDENTITY((4), ((4)) ^ 0))) >> 0)) << 0)), (int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY((4), clamp((4), _GLF_IDENTITY((4), 0 + ((4))), _GLF_IDENTITY((4), ((4)) ^ 0))) >> 0)) << 0))) | (int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY((4), clamp((4), _GLF_IDENTITY((4), 0 + ((4))), _GLF_IDENTITY((4), ((4)) ^ 0))) >> 0)) << 0)))), int(4)))), _GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), ((_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec4(1, 1, (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), ((1 << _GLF_IDENTITY(int(2), int(2)))) | ((1 << _GLF_IDENTITY(int(2), int(2))))) >> _GLF_IDENTITY(int(2), int(2))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3))), (((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3)))) >> 0)))) << _GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(1, int(ivec4(1, 1, ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(-11177)))), int(2))), ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) >> (0 << _GLF_IDENTITY(int(8), int(8))))), (int(_GLF_IDENTITY(3, (3) >> (0 << _GLF_IDENTITY(int(8), int(8)))))) | (int(_GLF_IDENTITY(3, (3) >> (0 << _GLF_IDENTITY(int(8), int(8))))))))))) >> _GLF_IDENTITY(int(3), int(3)))))) << _GLF_IDENTITY(int(4), int(4))) ^ 0)) >> _GLF_IDENTITY(int(4), int(4))) - 0), (true ? _GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 ^ (4))), int(4))), ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 ^ (4))), int(4)))) | ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 ^ (4))), int(4))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (int(4)) | (int(4)))), ~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), int(int(_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), (_GLF_IDENTITY(4, ~ (~ (4)))) | (_GLF_IDENTITY(4, ~ (~ (4))))))))), (int(4)) | (int(4))))), int(int(~ (int(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, (4) - 0))) | (int(4)))))))))))), clamp(int(_GLF_IDENTITY(4, _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), max(int(4), int(4)))) / 1), (int(4)) | (int(4)))), ~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ (~ (4)))), (int(4)) | (int(4))))), int(int(~ (int(_GLF_IDENTITY(int(4), (int(4)) | (int(4)))))))))))), int(_GLF_IDENTITY(4, _GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (int(4)) | (int(4)))), ~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), (~ (4)) - 0)))), (int(4)) | (int(4))))), int(int(~ (int(_GLF_IDENTITY(int(4), (int(4)) | (int(_GLF_IDENTITY(4, (4) | 0))))))))))))), _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (int(4)) | _GLF_IDENTITY((int(4)), ((int(4))) | 0))), ~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(int(4), (int(4)) | _GLF_IDENTITY((int(4)), ((int(4))) | 0)))), int(ivec4(~ (int(_GLF_IDENTITY(int(4), (int(4)) | _GLF_IDENTITY((int(4)), ((int(4))) | 0)))), 1, 1, 0))))), ~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ (~ (4)))), (int(4)) | (int(4))))), int(_GLF_IDENTITY(int(~ (int(_GLF_IDENTITY(int(4), (int(4)) | (int(4)))))), ~ (~ (int(~ (int(_GLF_IDENTITY(int(4), (int(4)) | (int(4))))))))))))))), 0 | (_GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (int(4)) | (int(4)))), ~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(~ (~ (4)), min(_GLF_IDENTITY(~ (~ (4)), 0 | (_GLF_IDENTITY(~ (~ (4)), 0 ^ (~ (~ (4)))))), ~ (~ (4)))))), (int(4)) | (int(4))))), int(int(~ (int(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (int(4)) | (int(4)))) | (int(4)))))))))))), (int(_GLF_IDENTITY(4, _GLF_IDENTITY(int(_GLF_IDENTITY(int(4), (int(4)) | (int(4)))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ (~ (4)))), (int(4)) | (int(4))))), int(int(~ (int(_GLF_IDENTITY(int(4), (int(4)) | (int(4)))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ (~ (4)))), (int(4)) | (int(4))))), int(int(~ (int(_GLF_IDENTITY(int(4), (int(4)) | (int(4)))))))), (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ (~ (4)))), (int(4)) | (int(4))))), int(int(~ (int(_GLF_IDENTITY(int(4), (int(4)) | (int(4))))))))) * 1), _GLF_IDENTITY(~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ (~ (4)))), (int(4)) | (int(4))))), int(int(~ (int(_GLF_IDENTITY(int(4), (int(4)) | (int(4)))))))), _GLF_IDENTITY(~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ (~ (4)))), (int(4)) | (int(4))))), int(int(~ (int(_GLF_IDENTITY(int(4), (int(4)) | (int(4))))))))))))))) << 0))))), int(4)), (_GLF_IDENTITY((_GLF_IDENTITY(1, int(ivec4(1, 1, ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(ivec2(int(2), 0))), int(2))) >> _GLF_IDENTITY(int(2), int(2))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), 0 + (int(3))), int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3)))))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), clamp((_GLF_IDENTITY(1, int(ivec4(1, 1, ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(ivec2(int(2), 0))), int(2))) >> _GLF_IDENTITY(int(2), int(2))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), 0 + (int(3))), int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3)))))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY((_GLF_IDENTITY(1, int(ivec4(1, 1, ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(ivec2(int(2), 0))), int(2))) >> _GLF_IDENTITY(int(2), int(2))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), 0 + (int(3))), int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3)))))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), ((_GLF_IDENTITY(1, int(ivec4(1, 1, ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(ivec2(int(2), 0))), int(2))) >> _GLF_IDENTITY(int(2), int(2))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), 0 + (int(3))), int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3)))))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) / 1), (_GLF_IDENTITY(1, int(ivec4(1, 1, ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(ivec2(int(2), 0))), int(2))) >> _GLF_IDENTITY(int(2), int(2))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), 0 | (int(3))), _GLF_IDENTITY(int(3), clamp(_GLF_IDENTITY(int(3), 0 + (int(3))), int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3)))))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))))) - 0) : _GLF_FUZZED(-61572)))))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))), false || ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))))) || false, bool(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))) || false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true), true))))))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec4(bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))) || false, bool(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))) || false, bool(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), ! (! ((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), ! (! ((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))) || false, bool(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))) || false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)))))))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), ! (! ((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))) || false, bool(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), ! (! ((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * 1)), (~ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * 1))) | (~ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * 1)))))) > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))) || false, bool(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))) || false, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false))))))))) || false))), ! (! ((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))))), bool(bvec2(! (bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))))), true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), ! (! ((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))) || false, bool(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))), bool(bvec4((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) || false, bool(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))))) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x < injectionSwitch.y), false)), true && (bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)))))), (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)), true && (bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)))), ! (! (_GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < injectionSwitch.y), false)), true && (bool(bvec2(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))), false)))))))))) || false)))) && (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)), _injected_loop_counter)) > 0)) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) || false, false || ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)), _injected_loop_counter)) > 0)) || _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) || false)), bool(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), true && (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))) && true)))))) || false, _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, 0 + (0))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, false || (_injected_loop_counter > 0))))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, 0 + (0))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, false || (_injected_loop_counter > 0))))))), false || ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, 0 + (0))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, false || (_injected_loop_counter > 0)))))))))) && true) || _GLF_IDENTITY(false, ! (! (false))), bool(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))) || false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)))))) > injectionSwitch.y))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), ((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))) || false)))) || false, bool(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), true && (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), ((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))) && true)))) || _GLF_IDENTITY(false, false || (false)))))) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) > _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, max(0, 0))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))) || _GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, true, true)))) || false, bool(bvec3((_GLF_IDENTITY(false, bool(bvec3(false, true, true)))) || false, false, false)))), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, false || (_injected_loop_counter > 0))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), true, true)))))) && true)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0))), 1.0))).x > injectionSwitch.y))), false)))) && _GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), bool(bvec3(true && (true), false, false))))))), false, _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), bool(bvec3(_GLF_IDENTITY(true, (true) || false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false))), false))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, int(ivec3(5, 0, 1)))), _GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED(_injected_loop_counter))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, ~ (~ (2)))))), 4, 64, _GLF_IDENTITY(4, _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), int(4))), ((0 << _GLF_IDENTITY(int(4), int(4)))) / 1) | (4)));
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bool((! (false))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   subgroupAll(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), ! (_GLF_IDENTITY(! (false), (! (false)) || false))), _GLF_IDENTITY(false || (false), false || (false || (false)))));
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ((false)) || false)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(_GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1])))).x < injectionSwitch.y)), true))), bool(bvec4(false, _GLF_IDENTITY(true, ! (! (true))), false, true)))), bool(bvec4((_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))), true, false, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(_GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1])))).x < injectionSwitch.y)), true))), bool(bvec4(false, _GLF_IDENTITY(true, ! (! (true))), false, _GLF_IDENTITY(true, true && (true)))))), bool(bvec4((_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))), true, false, true))))) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (_GLF_IDENTITY(0, ~ (~ (0))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, _GLF_IDENTITY(_GLF_IDENTITY((5), ((5)) >> 0) ^ (_GLF_IDENTITY(0 ^ 0, (0 ^ 0) - _GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(0, clamp(0, 0, 0)))))), _GLF_IDENTITY(((5) ^ (_GLF_IDENTITY(0 ^ 0, (0 ^ 0) - 0))), (((5) ^ (_GLF_IDENTITY(0 ^ 0, (0 ^ 0) - 0)))) - int(_GLF_ZERO(0.0, injectionSwitch.x))) | (0 & 54634)))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter) >> int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((_injected_loop_counter) >> int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp((_injected_loop_counter) >> int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY((_injected_loop_counter) >> int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 ^ ((_injected_loop_counter) >> int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))), (_injected_loop_counter) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), 1), (ivec2(_GLF_IDENTITY((_injected_loop_counter) >> int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp((_injected_loop_counter) >> int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY((_injected_loop_counter) >> int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 ^ ((_injected_loop_counter) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), (_injected_loop_counter) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), 1)) / ivec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))))) < 1, bool(bvec3(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> int(_GLF_ZERO(0.0, injectionSwitch.x))) < 1, true, true)))); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), (_GLF_IDENTITY(uint(2), (uint(2)) | (uint(2)))) << 0u)) ^ (0u >> _GLF_IDENTITY(uint(4u), uint(4u)))), 4, 64, 4);
    }
   subgroupAll(true);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
