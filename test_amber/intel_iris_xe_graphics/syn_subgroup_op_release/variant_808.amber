#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_10 {
 ivec3 _f0;
} ;

struct _GLF_struct_8 {
 uint _f0;
 bool _f1;
 mat2 _f2;
} ;

struct _GLF_struct_7 {
 float _f0;
 mat2x4 _f1;
 ivec3 _f2;
 mat4x2 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_6 {
 float _f0;
 vec2 _f1;
 float _f2;
} ;

struct _GLF_struct_5 {
 mat3x2 _f0;
} ;

struct _GLF_struct_4 {
 bvec2 _f0;
 float _f1;
} ;

struct _GLF_struct_3 {
 vec3 _f0;
} ;

struct _GLF_struct_9 {
 _GLF_struct_3 _f0;
 _GLF_struct_4 _f1;
 _GLF_struct_5 _f2;
 _GLF_struct_6 _f3;
 _GLF_struct_7 _f4;
 _GLF_struct_8 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_1 {
 ivec4 _f0;
} ;

struct _GLF_struct_2 {
 vec3 _f0;
 _GLF_struct_1 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_11 {
 _GLF_struct_2 _f0;
 uint next_virtual_gid;
 _GLF_struct_9 _f1;
 _GLF_struct_10 _f2;
} ;

struct _GLF_struct_0 {
 uint subgroup_local_id;
 uvec3 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(gl_SubgroupInvocationID, uvec3(1u));
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_struct_replacement_0.subgroup_local_id;
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(_GLF_struct_2(vec3(1.0), _GLF_struct_1(ivec4(1)), ivec4(1)), workgroup_base + subgroup_id * subgroup_size + ((_GLF_struct_replacement_0.subgroup_local_id + 1) % subgroup_size), _GLF_struct_9(_GLF_struct_3(vec3(1.0)), _GLF_struct_4(bvec2(true), 1.0), _GLF_struct_5(mat3x2(1.0)), _GLF_struct_6(1.0, vec2(1.0), 1.0), _GLF_struct_7(1.0, mat2x4(1.0), ivec3(1), mat4x2(1.0), ivec3(1)), _GLF_struct_8(1u, true, mat2(1.0)), vec3(1.0)), _GLF_struct_10(ivec3(1)));
 buf[virtual_gid] = 1;
 if(_GLF_struct_replacement_0.subgroup_local_id + 1 < subgroup_size)
  {
   atomicStore(buf[_GLF_struct_replacement_11.next_virtual_gid], uint(2), 4, 64, 4);
   subgroupAll(false);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   atomicStore(buf[_GLF_struct_replacement_11.next_virtual_gid], uint(2), 4, 64, 4);
   subgroupAll(true);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
