#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))))) && true)))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
            {
             barrier();
            }
           else
            {
            }
          }
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, true, true)), ! (! (bool(bvec4(_GLF_DEAD(false), true, true, true))))))) && true), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true)))) && true)) || false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))), true, true, true))), ! (! (_GLF_DEAD(false)))))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, min(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)), gl_WorkGroupSize)).x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 0u, 1u)));
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (workgroup_base)) + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u)) / (1u ^ 0u))) << 0u) * subgroup_size + subgroup_local_id, min(_GLF_IDENTITY(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (workgroup_base)) + _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) * subgroup_size + subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (workgroup_base)) + _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) * subgroup_size + subgroup_local_id, (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (workgroup_base), _GLF_IDENTITY(uint(uvec4(uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (workgroup_base), 1u, 0u, (1u ^ 1u))), (uint(uvec4(uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (workgroup_base), 1u, 0u, (1u ^ 1u)))) | (uint(uvec4(uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (workgroup_base), 1u, 0u, (1u ^ 1u))))))) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) * subgroup_size, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u) * subgroup_size)) + subgroup_local_id) >> 0u)));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, clamp(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))) / 1u), subgroup_id, subgroup_id)) * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, 1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, length(vec2(0.0, 0.0)), abs(1.0), 1.0, 1.0, 1.0, 1.0))).x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), bool(bool(! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), ! (! (! (! (injectionSwitch.x > injectionSwitch.y))))), true, false, true))), false, false))))))))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), ! (! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)), bool(bvec3(! ((_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, sqrt(sqrt(0.0)), cos(0.0), 1.0))).x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) << 0)) + 0), 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) || false))), _GLF_IDENTITY(false || (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), bool(bvec4(bool(_GLF_IDENTITY(false, (false) || false)), false, true, true)))) && true))))), false || (false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), bool(bvec4(bool(_GLF_IDENTITY(false, (false) || false)), false, true, true)))) && true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), bool(bvec4(bool(_GLF_IDENTITY(false, (false) || false)), false, true, true)))) && true)))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), bool(bvec4(bool(_GLF_IDENTITY(false, (false) || false)), false, true, true)))) && true))))) && true)) || false))))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false)))))), true && (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false))))))))))))), (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) << 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(0, 0 + (0)) ^ (_injected_loop_counter))))) - 0))), _injected_loop_counter)) < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, (4) - 0)))), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(_GLF_IDENTITY(4, (4) ^ 0)), int(4), int(4))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY((4), int(ivec4((4), 0, (1 | 0), 0))) << 0)) ^ 0), max(_GLF_IDENTITY(_GLF_IDENTITY(4, max(4, 4)), (_GLF_IDENTITY(4, (4) << 0)) ^ 0), _GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) << _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) | (0 << _GLF_IDENTITY(int(3), int(3)))))) ^ 0), 1 * (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) << 0)) ^ 0)))))), 0 ^ (int(_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY((4), int(ivec4((4), 0, (1 | 0), 0))) << 0)) ^ 0), max(_GLF_IDENTITY(_GLF_IDENTITY(4, max(4, 4)), (_GLF_IDENTITY(4, (4) << 0)) ^ 0), _GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) << _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) | (0 << _GLF_IDENTITY(int(3), int(3)))))) ^ 0), 1 * (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) << 0)) ^ 0)))))))), max(_GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((~ _GLF_IDENTITY((int(4)), (_GLF_IDENTITY((int(4)), clamp(_GLF_IDENTITY((int(4)), min((int(4)), (int(4)))), (int(4)), (int(4))))) | ((int(4))))), ~ (~ ((~ (int(4)))))), (_GLF_IDENTITY(~ _GLF_IDENTITY((~ _GLF_IDENTITY((int(4)), (_GLF_IDENTITY((int(4)), clamp(_GLF_IDENTITY((int(4)), min((int(4)), (int(4)))), (int(4)), (int(4))))) | ((int(4))))), ~ (~ ((~ (int(4)))))), 1 * (_GLF_IDENTITY(~ _GLF_IDENTITY((~ _GLF_IDENTITY((int(4)), (_GLF_IDENTITY((int(4)), clamp(_GLF_IDENTITY((int(4)), min((int(4)), (int(4)))), (int(4)), (int(4))))) | ((int(4))))), ~ (~ ((~ (int(4)))))), (~ _GLF_IDENTITY((~ _GLF_IDENTITY((int(4)), (_GLF_IDENTITY((int(4)), clamp(_GLF_IDENTITY((int(4)), min((int(4)), (int(4)))), (int(4)), (int(4))))) | ((int(4))))), ~ (~ ((~ (int(4))))))) >> 0)))) | (~ _GLF_IDENTITY((~ _GLF_IDENTITY((int(4)), (_GLF_IDENTITY((int(4)), clamp(_GLF_IDENTITY((int(4)), min((int(4)), (int(4)))), (int(4)), (int(4))))) | ((int(4))))), ~ (~ ((~ (int(4)))))))), int(ivec4(~ _GLF_IDENTITY((~ (int(4))), ~ (~ ((~ (int(4)))))), (0 | 0), 1, ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))))), int(4)))), ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4)))) | (_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), min(int(4), int(4)))) >> 0))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(_GLF_IDENTITY(4, (4) ^ 0)), _GLF_IDENTITY(int(4), 0 | (int(4))), int(4))), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) << 0)) ^ 0), max(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) << 0)) ^ 0), _GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) << 0)) ^ _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, min(0, 0)), 0))), _GLF_IDENTITY(1, max(1, 1)) * (_GLF_IDENTITY(_GLF_IDENTITY(4, int(int(4))), (_GLF_IDENTITY(4, (4) << 0)) ^ 0)))))), max(_GLF_IDENTITY(int(4), _GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY((~ _GLF_IDENTITY((int(4)), (_GLF_IDENTITY((int(4)), clamp(_GLF_IDENTITY(_GLF_IDENTITY((int(4)), 0 | ((int(4)))), min((int(4)), (int(_GLF_IDENTITY(4, max(4, 4)))))), (int(4)), (int(4))))) | ((int(4))))), _GLF_IDENTITY(int(_GLF_IDENTITY(int((~ _GLF_IDENTITY((int(4)), (_GLF_IDENTITY((int(4)), clamp(_GLF_IDENTITY(_GLF_IDENTITY((int(4)), 0 | ((_GLF_IDENTITY(int(4), ~ (~ (_GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), (int(4)) ^ 0))))))))), min((int(4)), (int(4)))), (int(4)), (int(4))))) | ((_GLF_IDENTITY(int(4), min(_GLF_IDENTITY(int(4), (int(4)) | (_GLF_IDENTITY(int(4), max(int(4), int(4))))), int(4)))))))), (int((~ _GLF_IDENTITY((int(4)), (_GLF_IDENTITY((int(4)), clamp(_GLF_IDENTITY(_GLF_IDENTITY((int(4)), 0 | ((int(4)))), min((int(4)), (_GLF_IDENTITY(int(4), int(ivec2(_GLF_IDENTITY(int(4), max(int(4), int(4))), 1)))))), (int(4)), (int(4))))) | ((_GLF_IDENTITY(int(4), (int(4)) | (int(4))))))))) | (int((~ _GLF_IDENTITY((int(4)), (_GLF_IDENTITY((int(4)), clamp(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(int(4), min(int(4), int(4)))), 0 | ((int(4)))), min((int(4)), (int(4)))), (int(4)), (_GLF_IDENTITY(int(4), ~ (_GLF_IDENTITY(~ (int(4)), max(~ (int(4)), ~ (int(4)))))))))) | ((int(4))))))))), clamp(int(_GLF_IDENTITY(int((~ _GLF_IDENTITY((int(4)), (_GLF_IDENTITY(_GLF_IDENTITY((int(4)), clamp(_GLF_IDENTITY(_GLF_IDENTITY((int(4)), 0 | ((int(4)))), min((int(4)), (int(4)))), (int(4)), (int(4)))), max(_GLF_IDENTITY((int(4)), clamp(_GLF_IDENTITY(_GLF_IDENTITY((int(4)), 0 | ((int(4)))), min((int(4)), (int(4)))), (int(4)), (int(4)))), _GLF_IDENTITY((int(4)), clamp(_GLF_IDENTITY(_GLF_IDENTITY((int(4)), 0 | ((int(4)))), min((int(4)), (int(4)))), (int(4)), (int(4))))))) | ((int(4)))))), (int((~ _GLF_IDENTITY((int(4)), (_GLF_IDENTITY((int(4)), clamp(_GLF_IDENTITY(_GLF_IDENTITY((int(4)), 0 | ((int(4)))), min((_GLF_IDENTITY(int(4), (int(4)) | 0)), (_GLF_IDENTITY(int(4), 0 | (_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), 0 ^ (int(4)))) << 0)))))), (int(4)), (_GLF_IDENTITY(int(4), (int(4)) >> 0))))) | _GLF_IDENTITY(((int(4))), max(((int(4))), ((int(4))))))))) | (int((~ _GLF_IDENTITY((int(4)), (_GLF_IDENTITY((int(4)), clamp(_GLF_IDENTITY(_GLF_IDENTITY((int(4)), 0 | ((_GLF_IDENTITY(int(4), (int(4)) / 1)))), min((int(4)), (int(4)))), (int(4)), (int(4))))) | (_GLF_IDENTITY((int(4)), min((int(4)), (int(4))))))))))), int(_GLF_IDENTITY(int((~ _GLF_IDENTITY((int(4)), (_GLF_IDENTITY((_GLF_IDENTITY(int(4), 0 + (int(4)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((int(4)), 0 | ((int(4)))), (_GLF_IDENTITY((int(4)), 0 | ((int(4))))) / 1), min((int(4)), (int(4)))), (int(4)), (int(4))))) | (_GLF_IDENTITY((int(4)), min(_GLF_IDENTITY((int(4)), max((int(4)), (int(4)))), (int(4)))))))), (int((~ _GLF_IDENTITY((int(4)), (_GLF_IDENTITY((int(_GLF_IDENTITY(4, (4) | 0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY((int(4)), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) ^ 0) | ((int(4)))), min((int(4)), (int(4)))), (int(4)), (int(4))))) | ((int(4))))))) | (int((~ _GLF_IDENTITY((int(4)), (_GLF_IDENTITY((int(4)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((int(4)), 0 | ((int(4)))), (_GLF_IDENTITY((_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED((_injected_loop_counter --)) : int(4)))), 0 | ((int(4))))) * 1), min((int(4)), (int(4)))), (int(4)), (int(4))))) | _GLF_IDENTITY(((int(4))), clamp(((int(4))), _GLF_IDENTITY(((int(4))), (((int(4)))) | (((int(4))))), ((int(4))))))))))), int(_GLF_IDENTITY(int((~ _GLF_IDENTITY((int(4)), _GLF_IDENTITY((_GLF_IDENTITY((int(4)), clamp(_GLF_IDENTITY(_GLF_IDENTITY((int(4)), 0 | ((int(4)))), min((_GLF_IDENTITY(int(4), (int(4)) / 1)), (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(81117) : int(4)))))), (int(4)), (int(_GLF_IDENTITY(4, (4) << (0 >> _GLF_IDENTITY(int(7), int(7))))))))), ((_GLF_IDENTITY((int(4)), clamp(_GLF_IDENTITY(_GLF_IDENTITY((int(4)), 0 | ((int(4)))), min((_GLF_IDENTITY(int(4), (int(4)) / 1)), (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(81117) : int(4)))))), (int(4)), (int(_GLF_IDENTITY(4, (4) << (0 >> _GLF_IDENTITY(int(7), int(7)))))))))) | 0) | ((int(4)))))), (int((~ _GLF_IDENTITY((int(4)), (_GLF_IDENTITY((int(4)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((int(4)), 0 | ((int(4)))), (false ? _GLF_FUZZED(-86912) : _GLF_IDENTITY((int(4)), 0 | ((int(4)))))), min((int(4)), (int(4)))), (int(4)), (_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), min(int(4), int(4)))) | (int(4))))))) | (_GLF_IDENTITY((int(4)), (_GLF_IDENTITY((int(4)), max(_GLF_IDENTITY((int(4)), ((int(4))) / 1), (int(4))))) ^ 0)))))) | (int((~ _GLF_IDENTITY((int(4)), (_GLF_IDENTITY((int(4)), clamp(_GLF_IDENTITY(_GLF_IDENTITY((int(4)), 0 | ((int(4)))), min((int(4)), (int(4)))), (int(4)), (int(4))))) | ((int(4)))))))))))), ~ (~ ((_GLF_IDENTITY(~ (int(4)), clamp(~ (int(4)), ~ (int(4)), ~ (int(4)))))))), int(ivec4(~ _GLF_IDENTITY((~ (_GLF_IDENTITY(int(4), (int(4)) - (0 >> _GLF_IDENTITY(int(2), int(2)))))), ~ (~ ((~ (int(4)))))), (0 | 0), 1, ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))))), int(4))))) * 1))); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, false, false)), (bool(bvec4(_GLF_DEAD(false), false, false, false))) && true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, bool(bvec4(true, true, true, true))), true, false)))), (_GLF_WRAPPED_IF_TRUE(true)) || false), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))), false))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false), false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false), false, false)), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false), false, false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false), false, false))))))), ! (! (bool(bool(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false), false, false))))))))))), false)), (bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false), false, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false), false, false))))), bool(bool(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true)))))), (_GLF_WRAPPED_IF_TRUE(true)) || false), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false), false, false)))))))), false))) || false))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_IDENTITY(true, false || (true))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), (_GLF_IDENTITY(! (false), ! (! (! (false))))) || false))), (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))) || false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))));
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false || (_GLF_DEAD(false)))))), false), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))), _GLF_IDENTITY(bool(bvec2(! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))), false)), (bool(bvec2(! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))), false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))), (! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))) || false)), false), true, false))))), bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), false), true, false))))), true)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), false), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), false), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), false), false))), true, true))), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), false), true, false))))), bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), false), true, false))))), true)))), false, true))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, true))))), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(0.0, sqrt(1.0) * (0.0)) + (injectionSwitch[0])), injectionSwitch[1])).x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(4, (4) | (4)), _GLF_IDENTITY(_GLF_IDENTITY(64, (64) >> 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(64, (0 | 0) ^ (_GLF_IDENTITY(64, (64) / (0 ^ 1)))), _GLF_IDENTITY((64) >> 0, int(ivec3((64) >> 0, _GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, int(ivec3(_GLF_IDENTITY((1) << 0, ((1) << 0) << 0), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), 0))))))), 1)))), 64, 64)), 4);
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) || false)))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
    }
  }
 if(_GLF_IDENTITY(subgroup_local_id, (0u << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), min(uint(0u), uint(0u))), uint(0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), min(uint(0u), uint(0u))), uint(0u))) | 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), min(uint(0u), uint(0u))), uint(0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), min(uint(_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) | (0u))))), uint(0u))), uint(0u))) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), min(uint(0u), uint(0u))), uint(0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), min(uint(0u), uint(0u))), uint(0u))) << 0u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), 0u | (_GLF_IDENTITY(uint(0u), 0u ^ (uint(0u))))), min(uint(0u), uint(0u))), uint(0u))) | 0u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), _GLF_IDENTITY(min(uint(0u), uint(0u)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(min(uint(0u), uint(0u))), (uint(min(uint(0u), uint(0u)))) ^ 0u)), (uint(_GLF_IDENTITY(uint(min(uint(0u), uint(0u))), (uint(min(uint(0u), uint(0u)))) ^ 0u))) - 0u))), uint(0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), min(uint(0u), uint(0u))), uint(0u))) | 0u)) - 0u))), (_GLF_IDENTITY(uint(0u), uint(0u))) | 0u)) ^ (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (true ? _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | _GLF_IDENTITY((subgroup_local_id), min((subgroup_local_id), (subgroup_local_id)))) : _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(subgroup_size), ~ (~ (_GLF_FUZZED(subgroup_size))))))))), min(_GLF_IDENTITY(subgroup_local_id, (true ? _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(subgroup_size), min(_GLF_FUZZED(subgroup_size), _GLF_FUZZED(subgroup_size))), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(subgroup_size), ~ (~ (_GLF_FUZZED(subgroup_size))))))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (true ? _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) : _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(subgroup_size), ~ (~ (_GLF_FUZZED(subgroup_size))))))))), max(_GLF_IDENTITY(subgroup_local_id, (true ? _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) : _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(subgroup_size), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_IDENTITY(_GLF_FUZZED(subgroup_size), min(_GLF_FUZZED(subgroup_size), _GLF_FUZZED(subgroup_size)))) ^ (0u & 146004u)))))))))), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(true ? _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) : _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(subgroup_size), ~ (~ (_GLF_FUZZED(subgroup_size))))))), (true ? _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) : _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(subgroup_size), ~ (~ (_GLF_FUZZED(subgroup_size)))))))) << 0u)))))))) / 1u))) + _GLF_IDENTITY(1, ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) * (1)) < subgroup_size)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(347.299) : injectionSwitch.y)) : _GLF_FUZZED(3315.3056)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   atomicStore(checker[_GLF_IDENTITY(virtual_gid, max(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((true ? virtual_gid : _GLF_FUZZED(workgroup_base)), (true ? _GLF_IDENTITY((true ? virtual_gid : _GLF_FUZZED(workgroup_base)), ((true ? virtual_gid : _GLF_FUZZED(workgroup_base))) | (1u ^ 1u)) : _GLF_FUZZED(uint(-5.6))))), virtual_gid))], _GLF_IDENTITY(read, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), (uint(0u)) - 0u))) * (read)), 4, 64, 4);
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) && true))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(vec4(-4.3, 2.0, -906.102, 5977.1367).x)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), true && ((injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 ^ 0) ^ 1) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x < injectionSwitch.y))), ! (! _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! ((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))))), (injectionSwitch.x < injectionSwitch.y))))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           barrier();
          }
        }
       subgroupAll(_GLF_IDENTITY(false, true && (false)));
      }
     else
      {
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), bool(bool((_GLF_DEAD(false))))) && true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((false)))))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       atomicStore(buf[virtual_gid], read, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) + 0), 64, 4);
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
      barrier();
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (! (true))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec2(false, false))))))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       subgroupAll(true);
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec3(! (_GLF_DEAD(false)), false, false))))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(28.40)), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), bool(true))), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6350.0889), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(3313.0340)), bvec2(true, false))), _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, max(1.0, 1.0))), float(_GLF_FUZZED(-7.3)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), cos(0.0)))).x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), true && (_GLF_IDENTITY(false, bool(bvec2(false, true))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), true && (_GLF_IDENTITY(false, bool(bvec2(false, true))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), true && (_GLF_IDENTITY(false, bool(bvec2(false, true))))), false, true, false)))) && true)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), true)))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), _GLF_FUZZED(-6.3)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) - sqrt(vec2(0.0, 0.0))).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.7), _GLF_FUZZED(-6.3)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) - sqrt(vec2(0.0, 0.0))).x > injectionSwitch.y)) || false))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED((7816.8572))), bool(false))), _GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec3(_GLF_IDENTITY(int(3), int(3)), 0, 0)))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec3(_GLF_IDENTITY(int(3), int(3)), 0, 0))))))) / 1))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec3(_GLF_IDENTITY(int(3), int(3)), 0, 0)))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec3(_GLF_IDENTITY(int(3), int(3)), 0, 0))))))) / 1)))) >> 0))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, _GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0, _GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), max(round(length(normalize(vec2(1.0, 1.0)))), round(length(normalize(vec2(1.0, 1.0)))))), 0.0, 0.0))) > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(atomicExchange(_injected_loop_counter, -96510))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
