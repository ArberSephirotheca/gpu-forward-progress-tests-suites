#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) << (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ int(_GLF_ONE(1.0, injectionSwitch.y)))) | 0)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)) && true)) || false)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_IDENTITY(false, false || (false))), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false))), false)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(injectionSwitch.x < injectionSwitch.y, true), bvec2(bvec2(bvec2(injectionSwitch.x < injectionSwitch.y, true))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), bool(bvec4((_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), false, true, true))), false)), ! (_GLF_IDENTITY(! (bool(bvec2(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), bool(bvec4((_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), false, true, true))), false))), (! (bool(bvec2(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), bool(bvec4((_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), false, true, true))), false)))) && true)))))))); _injected_loop_counter --)
        {
         return;
        }
      }
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false), false, false, true))))), ! (! (bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))))))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, sin(length(0.0)), _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, max(0.0, 0.0)))), 0.0), vec4(0.0, 1.0, 0.0, 0.0)), _GLF_IDENTITY(0.0 + (dot(vec4(0.0, 1.0, 0.0, 0.0), _GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), vec4(mat4(_GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), clamp(vec4(0.0, 1.0, 0.0, 0.0), _GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), max(_GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), clamp(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), vec4(0.0, 1.0, 0.0, 0.0))), vec4(0.0, 1.0, 0.0, 0.0))), determinant(mat4(0.0, 1.0, cos(0.0), 1.0, 0.0, 0.0, 1.0, exp(0.0), 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, sqrt(0.0), 0.0)), 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, abs(1.0), 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), sqrt(1.0), 0.0))))), max(0.0 + (_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), min(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))))), _GLF_IDENTITY(0.0 + (dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), (0.0 + (dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)))) / 1.0))))), 0.0), (mat3x2(injectionSwitch, 1.0, sin(length(0.0)), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), 0.0 + _GLF_IDENTITY((dot(vec4(0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), ((dot(vec4(0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)))) / _GLF_IDENTITY(dot(vec4(0.0, tan(0.0), 1.0, abs(0.0)), vec4(0.0, tan(0.0), 1.0, 0.0)), dot(_GLF_IDENTITY(vec4(0.0, tan(0.0), 1.0, abs(0.0)), _GLF_IDENTITY(_GLF_IDENTITY(vec4(mat2(vec4(0.0, tan(0.0), 1.0, abs(0.0)))), max(vec4(mat2(vec4(0.0, tan(0.0), 1.0, abs(0.0)))), vec4(mat2(vec4(0.0, tan(0.0), 1.0, abs(0.0)))))), min(_GLF_IDENTITY(vec4(mat2(vec4(0.0, tan(0.0), 1.0, abs(0.0)))), max(vec4(mat2(vec4(0.0, tan(0.0), 1.0, abs(0.0)))), vec4(mat2(vec4(0.0, tan(0.0), 1.0, abs(0.0)))))), _GLF_IDENTITY(_GLF_IDENTITY(vec4(mat2(vec4(0.0, tan(0.0), 1.0, abs(0.0)))), max(vec4(mat2(vec4(0.0, tan(0.0), 1.0, abs(0.0)))), vec4(mat2(vec4(0.0, tan(0.0), 1.0, abs(0.0)))))), (_GLF_IDENTITY(vec4(mat2(vec4(0.0, tan(0.0), 1.0, abs(0.0)))), max(vec4(mat2(vec4(0.0, tan(0.0), 1.0, abs(0.0)))), vec4(mat2(vec4(0.0, tan(0.0), 1.0, abs(0.0))))))) - vec4(0.0, 0.0, 0.0, 0.0))))), vec4(0.0, tan(0.0), 1.0, 0.0)))))), min(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), 0.0 + _GLF_IDENTITY((dot(vec4(0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), ((dot(vec4(0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)))) / _GLF_IDENTITY(dot(vec4(0.0, tan(0.0), 1.0, abs(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(312.478)), bool(false)))), float(_GLF_FUZZED(409.035)), bool(false)))) + 0.0))), vec4(0.0, tan(0.0), 1.0, 0.0)), dot(_GLF_IDENTITY(vec4(0.0, tan(0.0), 1.0, abs(0.0)), _GLF_IDENTITY(vec4(mat2(vec4(0.0, tan(0.0), 1.0, abs(0.0)))), max(vec4(mat2(vec4(0.0, tan(0.0), 1.0, abs(0.0)))), vec4(mat2(vec4(0.0, tan(0.0), 1.0, abs(0.0))))))), vec4(0.0, tan(0.0), 1.0, 0.0)))))), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), 0.0 + _GLF_IDENTITY((dot(vec4(0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), ((_GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(520.072)), float(dot(vec4(0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) / _GLF_IDENTITY(dot(vec4(0.0, tan(0.0), 1.0, abs(0.0)), vec4(0.0, tan(0.0), 1.0, 0.0)), dot(_GLF_IDENTITY(vec4(0.0, tan(0.0), 1.0, abs(0.0)), _GLF_IDENTITY(vec4(mat2(vec4(0.0, tan(0.0), 1.0, abs(0.0)))), max(vec4(mat2(vec4(0.0, tan(0.0), 1.0, abs(0.0)))), vec4(mat2(vec4(0.0, _GLF_IDENTITY(tan(0.0), float(mat2(tan(0.0), 1.0, 1.0, exp(0.0)))), 1.0, abs(0.0))))))), vec4(0.0, tan(0.0), 1.0, 0.0)))))))), 0.0)) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), max(vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0)), float(mat2x4(float(mat2x3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0)))), clamp(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0)), float(mat2x4(float(mat2x3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0)), 1.0, 1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4x3(1.0, 1.0, sqrt(1.0), 1.0, sqrt(1.0), exp(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), (mat4x3(1.0, 1.0, sqrt(1.0), 1.0, sqrt(1.0), exp(0.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 1.0, 0.0, 0.0, 1.0)))), _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0)), float(mat2x4(float(mat2x3(_GLF_IDENTITY(1.0, 0.0 + (1.0)), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(6065.7734)), bool(false))))), 1.0, 1.0, 1.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0)), float(mat2x4(float(mat2x3(_GLF_IDENTITY(1.0, float(mat3(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, 0.0, 1.0, sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, sqrt(0.0)))), 0.0, 1.0, 1.0, 1.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0)))), float(mat4x2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0)), float(mat2x4(float(mat2x3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0)))), abs(1.0), 1.0, 1.0, 0.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED((+ -6474.3973))), bool(false))), 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))), sin(length(_GLF_IDENTITY(0.0, float(mat3x2(0.0, 0.0, 0.0, 1.0, 1.0, 1.0))))), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(3.9))))), 0.0 + (_GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0), mat3(mat3x4(mat3(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0)))))), log(1.0), 0.0, 0.0))), 1.0)), 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), (false ? _GLF_FUZZED(9.9) : _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), vec4(0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), max(dot(vec4(0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), vec4(0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), dot(vec4(0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), vec4(0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0))))))))), 0.0), (mat3x2(injectionSwitch, 1.0, _GLF_IDENTITY(sin(length(0.0)), (_GLF_IDENTITY(sin(length(0.0)), mix(float(_GLF_FUZZED(-812.467)), float(_GLF_IDENTITY(sin(length(0.0)), min(sin(length(0.0)), sin(length(0.0))))), bool(true)))) - length(vec3(0.0, 0.0, 0.0))), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) - 0.0)), vec4(0.0, 1.0, 0.0, 0.0)), 0.0 + (dot(vec4(_GLF_IDENTITY(0.0, float(mat2(0.0, 1.0, 1.0, 0.0))), 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))))), 0.0)) - mat3x2(0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) - 0.0), max(_GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(0.0, (0.0) - 0.0))), 0.0, 0.0, 0.0))), vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(665.873, -100.091)))), 1.0, 1.0, _GLF_IDENTITY(sin(0.0), exp(0.0) * (sin(0.0))), 0.0, 0.0, round(length(normalize(abs(vec2(1.0, 1.0))))), 1.0, 1.0, tan(_GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0), vec3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) / round(length(normalize(vec3(1.0, 1.0, 1.0))))), (1.0) / 1.0), 1.0))) + _GLF_IDENTITY(_GLF_IDENTITY(0.0, 1.0 * (0.0)), (true ? _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-2.7)), bool(false))) : _GLF_FUZZED(-11.45)))), 1.0, 1.0)))), 1.0, cos(_GLF_IDENTITY(0.0, 1.0 * (0.0))), 0.0, 0.0, exp(0.0)))), 1.0, sin(length(0.0)), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec4(0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((+ 362.553))), float(0.0), bool(true)))), clamp(vec4(0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((+ 362.553))), float(0.0), bool(true)))), _GLF_IDENTITY(vec4(0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((+ 362.553))), float(0.0), bool(true)))), max(_GLF_IDENTITY(vec4(0.0, 1.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((+ 362.553))), float(0.0), bool(true)))), clamp(vec4(0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((+ 362.553))), float(0.0), bool(true)))), vec4(0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((+ 362.553))), float(0.0), bool(true)))), vec4(0.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((+ 362.553))), float(0.0), bool(true)))))), vec4(0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((+ 362.553))), float(0.0), bool(true)))))), vec4(0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((+ 362.553))), float(0.0), bool(true)))))), vec4(0.0, 1.0, 0.0, 0.0)), 0.0 + (dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))))), 0.0), (mat3x2(injectionSwitch, 1.0, sin(length(0.0)), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(98.25) : 1.0)))), (false ? _GLF_FUZZED(132.836) : _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(98.25) : 1.0)))))))), 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), 0.0 + _GLF_IDENTITY((dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), _GLF_IDENTITY(float(mat2((dot(vec4(0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), 0.0, 0.0), vec4(0.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(85.01), (vec3(1.0, 1.0, 1.0))[1], (vec3(1.0, 1.0, 1.0))[2]), vec3((vec3(1.0, 1.0, 1.0))[0], _GLF_FUZZED(7.0), _GLF_FUZZED(-8482.3005)), bvec3(true, false, false)))), max(float(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(85.01), (vec3(1.0, 1.0, 1.0))[1], (vec3(1.0, 1.0, 1.0))[2]), vec3((vec3(1.0, 1.0, 1.0))[0], _GLF_FUZZED(7.0), _GLF_FUZZED(-8482.3005)), bvec3(true, false, false)))), float(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(85.01), (vec3(1.0, 1.0, 1.0))[1], (vec3(1.0, 1.0, 1.0))[2]), vec3((vec3(1.0, 1.0, 1.0))[0], _GLF_FUZZED(7.0), _GLF_FUZZED(-8482.3005)), bvec3(true, false, false))))))) : _GLF_FUZZED(5983.4091))), 0.0, 0.0))), 0.0, tan(0.0), 0.0)), (float(mat2((dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 0.0, tan(0.0), 0.0))) * 1.0)))), 0.0)) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))).x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), false), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), false)), bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), false))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(147.490)), bool(false)))))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              barrier();
             return;
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(sqrt(9.5))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, min(2, 2))))), int(2))) + 0)), clamp((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, min(2, 2))))), int(2))) + 0)), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, min(2, 2))))), int(2))) + 0)), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, min(2, 2))))), int(2))) + 0)))) | 0)); _injected_loop_counter --)
        {
         return;
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(0u, 0u, 0u) | (gl_NumWorkGroups), ~ (_GLF_IDENTITY(~ (uvec3(0u, 0u, 0u) | (gl_NumWorkGroups)), (~ (uvec3(0u, 0u, 0u) | (gl_NumWorkGroups))) - uvec3(0u, 0u, 0u))))).x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, gl_WorkGroupSize)).x;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > _GLF_IDENTITY(0, 0 + (0))); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), true && (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, true)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         break;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(63.74), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((-55.88 / 2.3))), bvec2(true, false))).y, (injectionSwitch.y) - _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-5.0)), bool(false))), 0.0, 0.0))) - 0.0))))))
          return;
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, false)))))))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), ! (! (bool(injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(bool(bvec2((! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), ! (! (bool(injectionSwitch.x > injectionSwitch.y)))))))), false)), (bool(bvec2((! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), ! (! (bool(injectionSwitch.x > injectionSwitch.y)))))))), false))) && true)))))))
                return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, false, false)), (bool(bvec4(_GLF_DEAD(false), false, false, false))) && true)))
                barrier();
              }
            }
           break;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         return;
        }
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, sqrt(1.0)))).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
            barrier();
           break;
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         break;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        continue;
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       continue;
      }
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 0u + (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u), 0u | (_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u))))) + subgroup_id * subgroup_size, max(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)) + subgroup_local_id;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec4(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), true, false))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / sqrt(1.0)), false || (_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-392.308))), sin(0.0), 0.0, 1.0, 1.0, 0.0, cos(0.0), 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / sqrt(1.0))))))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)) || false))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY((((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) & 1) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), max((((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) & 1) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), (((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) & 1) << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, (4) | (4)))))) ^ 0)))) >> _GLF_IDENTITY(int(4), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
          {
           do
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)) : _GLF_FUZZED((isinf(4.9) ? injectionSwitch : vec2(-428.014, 73.11))))).y))))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(false))
        break;
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 1.0, length(vec2(0.0, 0.0)), 1.0, 1.0, 1.0)))), float(_GLF_FUZZED(3.5)), bool(false)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))), bool(bvec4(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))), true, false, false))))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     do
      {
       return;
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + _GLF_IDENTITY(1, int(int(1)))) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size))) >> 0u));
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), 4, 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false))))
    return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (-61861 & 0)); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 else
  {
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false)))))))))))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
           if(_GLF_DEAD(false))
            barrier();
           break;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))));
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)) || false)))))
    {
     for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     atomicStore(checker[virtual_gid], read, 4, _GLF_IDENTITY(64, max(64, 64)), 4);
    }
   for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(mat2x4(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(mat2x3(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, 1.0))), 0.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-5822.7620) : 1.0)))), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
            {
            }
           else
            {
             return;
            }
          }
         subgroupAll(false);
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && _GLF_IDENTITY(true, false || (true))), (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY((0) - 0, ((0) - 0) >> ((0 >> _GLF_IDENTITY(int(7), int(7))) ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4311.8399)), bool(false)))))));
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(1.7))) > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(1.7))) > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))))), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(1.7))) > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
          }
        }
       for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), max((1 << _GLF_IDENTITY(int(7), int(7))), (1 << _GLF_IDENTITY(int(7), int(7))))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), max((1 << _GLF_IDENTITY(int(7), int(7))), (1 << _GLF_IDENTITY(int(7), int(7)))))) + 0), 0)), clamp(int(ivec2(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), max((1 << _GLF_IDENTITY(int(7), int(7))), (_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(7), int(7))))), 0)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), max((1 << _GLF_IDENTITY(int(7), int(7))), (1 << _GLF_IDENTITY(int(7), int(7))))), 0), (ivec2(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), max((1 << _GLF_IDENTITY(int(7), int(7))), (1 << _GLF_IDENTITY(int(7), int(7))))), 0)) / ivec2(1, 1))), _GLF_IDENTITY((int(ivec2(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), max((1 << _GLF_IDENTITY(int(7), int(7))), (1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 1 * (int(7))))))), 0))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((int(ivec2(_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), max(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7)))))), int(7))), _GLF_IDENTITY(max((1 << _GLF_IDENTITY(int(7), int(7))), (1 << _GLF_IDENTITY(int(7), int(7)))), (false ? _GLF_FUZZED(61967) : max((1 << _GLF_IDENTITY(int(7), int(7))), (1 << _GLF_IDENTITY(int(7), int(7))))))), 0))), 0 + ((int(ivec2(_GLF_IDENTITY((_GLF_IDENTITY(1, min(1, 1)) << _GLF_IDENTITY(int(7), int(7))), max((1 << _GLF_IDENTITY(int(7), int(7))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), ((1 << _GLF_IDENTITY(int(7), int(7)))) >> 0)) | ((1 << _GLF_IDENTITY(int(7), int(7))))))), 0)))))), max(~ (_GLF_IDENTITY((int(ivec2(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), max((1 << _GLF_IDENTITY(int(7), int(7))), (1 << _GLF_IDENTITY(int(7), int(7))))), 0))), 0 + ((int(ivec2(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), max((1 << _GLF_IDENTITY(int(7), int(7))), (1 << _GLF_IDENTITY(int(7), int(7))))), 0)))))), ~ (_GLF_IDENTITY((int(ivec2(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), max((1 << _GLF_IDENTITY(int(7), int(7))), (1 << _GLF_IDENTITY(int(7), int(7))))), 0))), 0 + ((int(ivec2(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), max((1 << _GLF_IDENTITY(int(7), int(7))), (1 << _GLF_IDENTITY(int(7), int(7))))), 0)))))))))) * 1), int(ivec2(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), max((1 << _GLF_IDENTITY(int(7), int(7))), (1 << _GLF_IDENTITY(int(7), int(7))))), 0))))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, min(0, 0))))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(true, (true) || false) ? 0 : _GLF_FUZZED(85412))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)) < 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-87.95)), float(injectionSwitch.y), bool(true))) : _GLF_FUZZED(-1.1)))))) || false)))
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true))
                      break;
                     continue;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       return;
                      }
                    }
                   continue;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))))).y))))
                    break;
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   atomicStore(buf[virtual_gid], read, 4, 64, 4);
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   break;
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 0.0, tan(0.0), 0.0, abs(1.0), 0.0, 1.0)), (vec2(mat4x3(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 0.0, tan(0.0), 0.0, abs(1.0), 0.0, 1.0))) * mat2(1.0))), max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
                  continue;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                 break;
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, bool(bool(true)))))), (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 break;
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                return;
              }
             return;
            }
          }
         return;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), tan(determinant(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) + 0.0)) * 1.0))), 0.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, 1.0, sqrt(0.0), 1.0, 1.0))).x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, abs(1.0), 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))) > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               return;
              }
            }
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               break;
               if(_GLF_DEAD(false))
                barrier();
              }
             continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(933.114)), float(_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 0.0)))), bool(true))), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y))))));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       subgroupAll(true);
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
