#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), injectionSwitch)), (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(_GLF_IDENTITY(sin(injectionSwitch), mix(vec2((sin(injectionSwitch))[0], (sin(injectionSwitch))[1]), vec2(_GLF_FUZZED(-55.37), _GLF_FUZZED(-874.843)), bvec2(false, false)))))).y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), _GLF_IDENTITY(false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4(bool(bvec4(_GLF_WRAPPED_LOOP(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false, false)), bool(bvec4(bool(bvec4(bool(bvec4(_GLF_WRAPPED_LOOP(false), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)) * 1.0))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false, false)), true, true, true))))))));
        }
       else
        {
         barrier();
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), false)), bvec2(bvec4(bvec2(bvec3(bvec2(false, false), false)), true, _GLF_IDENTITY(true, (true) && true)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-7.7), _GLF_FUZZED(-0.0)), bvec2(false, false)))) / vec2(1.0, 1.0)))).x < injectionSwitch.y)) && ((false) && true)))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1, (1) + 0) & _GLF_IDENTITY(1, (1) | (1))) & 1)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = (((0 ^ 1) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | 0))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
      }
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false))))), ! (! ((_GLF_WRAPPED_LOOP(false))))), ! (_GLF_IDENTITY(! (false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false))))), ! (! ((_GLF_WRAPPED_LOOP(false)))))), (_GLF_IDENTITY(! (false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false))))), ! (! ((_GLF_WRAPPED_LOOP(false)))))), ! (! (! (false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false))))), ! (! ((_GLF_WRAPPED_LOOP(false)))))))))) && true)))));
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, clamp(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)), gl_NumWorkGroups, gl_NumWorkGroups)).x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec4(gl_WorkGroupSize, 1u))).x;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter), clamp(_GLF_IDENTITY(~ _GLF_IDENTITY((_injected_loop_counter), 0 ^ ((_injected_loop_counter))), 0 | (~ (_injected_loop_counter))), ~ (_injected_loop_counter), ~ (_injected_loop_counter)))), ((_GLF_IDENTITY(~ (_injected_loop_counter), clamp(_GLF_IDENTITY(~ _GLF_IDENTITY((_injected_loop_counter), 0 ^ ((_injected_loop_counter))), 0 | (~ (_injected_loop_counter))), ~ (_injected_loop_counter), ~ (_injected_loop_counter))))) >> 0), max(~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter), clamp(_GLF_IDENTITY(~ _GLF_IDENTITY((_injected_loop_counter), 0 ^ ((_injected_loop_counter))), 0 | (~ (_injected_loop_counter))), ~ (_injected_loop_counter), ~ (_injected_loop_counter)))), ((_GLF_IDENTITY(~ (_injected_loop_counter), clamp(_GLF_IDENTITY(~ _GLF_IDENTITY((_injected_loop_counter), 0 ^ ((_injected_loop_counter))), 0 | (~ (_injected_loop_counter))), ~ (_injected_loop_counter), ~ (_injected_loop_counter))))) >> 0), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter), clamp(_GLF_IDENTITY(~ _GLF_IDENTITY((_injected_loop_counter), 0 ^ ((_injected_loop_counter))), 0 | (~ (_injected_loop_counter))), ~ (_injected_loop_counter), ~ (_injected_loop_counter)))), ((_GLF_IDENTITY(~ (_injected_loop_counter), clamp(_GLF_IDENTITY(~ _GLF_IDENTITY((_injected_loop_counter), 0 ^ ((_injected_loop_counter))), 0 | (~ (_injected_loop_counter))), ~ (_injected_loop_counter), ~ (_injected_loop_counter))))) >> 0)))) != 1); _GLF_IDENTITY(_injected_loop_counter ++, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_injected_loop_counter ++))), (~ (_GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_injected_loop_counter ++)))) >> 0))))
    {
     barrier();
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-7.6) : 1.0)))), injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false), bvec2(bvec3(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false), true)))))) && true); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(8.5), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(4460.2283)), bvec2(true, false))), injectionSwitch)))).y, (injectionSwitch.x > injectionSwitch.y) && true)))), ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(mat2(1.0), mat2(1.0) * (mat2(1.0)))) * mat2(1.0)) * (injectionSwitch)).x, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(mat2(1.0), mat2(1.0) * (mat2(1.0)))) * mat2(1.0)) * (injectionSwitch)).x : _GLF_FUZZED(733.575))) > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))));
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, max(7, 7))), int(7))) >> _GLF_IDENTITY(int(7), int(7))) ^ 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(67.86, 563.134)) : injectionSwitch)).y))));
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (workgroup_size) | 0u) * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, ~ (~ (workgroup_base + subgroup_id * subgroup_size))), clamp(workgroup_base + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))) ^ 0u) * subgroup_size, workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, uint(_GLF_IDENTITY(uvec4(subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(7u, clamp(7u, 7u, _GLF_IDENTITY(7u, (7u) ^ 0u)))), _GLF_IDENTITY(uint(7u), (true ? uint(7u) : _GLF_FUZZED(num_workgroup))))), _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), _GLF_IDENTITY((true ? _GLF_IDENTITY(uint(7u), 0u + (uint(7u))) : _GLF_FUZZED(num_workgroup)), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY((true ? uint(7u) : _GLF_FUZZED(num_workgroup)), min((true ? uint(7u) : _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (false ? _GLF_FUZZED(subgroup_size) : _GLF_FUZZED(num_workgroup)))), (true ? uint(7u) : _GLF_FUZZED(num_workgroup)))))))))) - 0u, (((1u << _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), (true ? uint(7u) : _GLF_FUZZED(_GLF_IDENTITY(num_workgroup, ~ (_GLF_IDENTITY(~ (num_workgroup), (_GLF_IDENTITY(~ (num_workgroup), (~ (num_workgroup)) | (~ (num_workgroup)))) + 0u))))))))) - 0u) * 1u)) >> _GLF_IDENTITY(uint(7u), uint(7u)))), (uvec4(subgroup_id * subgroup_size, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), (float(vec2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, 1.0 * (0.0)), _GLF_IDENTITY(0.0, 0.0 + (0.0))))))) - length(0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(929.382) : injectionSwitch.x)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(929.382) : injectionSwitch.x)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false ? _GLF_FUZZED(929.382) : injectionSwitch.x, (true ? false ? _GLF_FUZZED(929.382) : injectionSwitch.x : _GLF_FUZZED(31.72))))), min(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(929.382) : injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(929.382) : injectionSwitch.x)))), _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(929.382) : injectionSwitch.x)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(929.382) : injectionSwitch.x)), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(929.382) : injectionSwitch.x)), 0.0, sqrt(1.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0))), 1.0, 0.0), mat2(1.0) * (mat3x2(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(929.382) : injectionSwitch.x)), 0.0, sqrt(1.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0))), 1.0, 0.0)))), (float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(929.382) : injectionSwitch.x)), 0.0, sqrt(1.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0))), 1.0, 0.0), mat2(1.0) * (mat3x2(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(929.382) : injectionSwitch.x)), 0.0, sqrt(1.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0))), 1.0, 0.0))))) - 0.0)), (false ? _GLF_FUZZED(-398.817) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(929.382) : injectionSwitch.x)), (false ? _GLF_FUZZED(-435.435) : _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(929.382) : injectionSwitch.x)))))), _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(929.382) : injectionSwitch.x)))))), 0u, ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))))) | (uvec4(subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) | (1u << _GLF_IDENTITY(uint(7u), uint(7u))))) >> _GLF_IDENTITY(uint(7u), uint(7u)))))))), workgroup_base + _GLF_IDENTITY(subgroup_id, clamp(_GLF_IDENTITY(subgroup_id, uint(uvec4(subgroup_id, 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))), subgroup_id, subgroup_id)) * subgroup_size)) + subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec2(! (false), true)), bool(bvec3(bool(bvec2(! (false), true)), false, false))))))))))
  barrier();
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), subgroup_id)) * _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(workgroup_size))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u), (subgroup_id) - 0u), subgroup_id)) * subgroup_size, uint(uvec3(_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), 0u, 1u), max(uvec3(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), 0u, 1u), uvec3(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), 0u, 1u))))), subgroup_id)) * subgroup_size, 1u, 1u)))) ^ 0u) + ((subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (_GLF_IDENTITY(next_virtual_gid, uint(uvec4(next_virtual_gid, 1u, _GLF_IDENTITY(1u, (1u) << 0u), 0u)))))], uint(1), 4, 64, 4);
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)))) != 0); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
    {
     if(subgroup_local_id + 1 < subgroup_size)
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 0.0, 0.0, 0.0, 1.0, sin(0.0)), (false ? _GLF_FUZZED(mat2x3(3.5, 2149.2657, 900.140, 792.930, 8506.0091, 8493.8071)) : mat2x3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 0.0, 0.0, 0.0, 1.0, sin(0.0))))), _GLF_IDENTITY(max(float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 0.0, 0.0, 0.0, 1.0, sin(0.0)), (false ? _GLF_FUZZED(mat2x3(3.5, 2149.2657, 900.140, 792.930, 8506.0091, 8493.8071)) : mat2x3(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, determinant(mat2(1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), 1.0)) * (injectionSwitch.y))) * 1.0), 0.0, 0.0, 0.0, 1.0, sin(0.0))))), float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 0.0, 0.0, 0.0, 1.0, sin(0.0)), (false ? _GLF_FUZZED(mat2x3(3.5, 2149.2657, 900.140, 792.930, 8506.0091, 8493.8071)) : mat2x3(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.y), mix(float(_GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) / 1.0)), float(_GLF_FUZZED(639.980)), bool(false)))), min((_GLF_IDENTITY((injectionSwitch.y), mix(float(_GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) / 1.0)), float(_GLF_FUZZED(639.980)), bool(false)))), (_GLF_IDENTITY((injectionSwitch.y), mix(float(_GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) / 1.0)), float(_GLF_FUZZED(639.980)), bool(false)))))) / abs(1.0)) * 1.0), 0.0, 0.0, 0.0, 1.0, sin(0.0)))))), (true ? _GLF_IDENTITY(max(float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 0.0, 0.0, 0.0, 1.0, sin(0.0)), (false ? _GLF_FUZZED(mat2x3(3.5, 2149.2657, 900.140, 792.930, 8506.0091, 8493.8071)) : mat2x3(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, determinant(mat2(1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), 1.0)) * (injectionSwitch.y))) * 1.0), 0.0, 0.0, 0.0, 1.0, sin(0.0))))), float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 0.0, 0.0, 0.0, 1.0, sin(0.0)), (false ? _GLF_FUZZED(mat2x3(3.5, 2149.2657, 900.140, 792.930, 8506.0091, 8493.8071)) : mat2x3(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.y), mix(float(_GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) / 1.0)), float(_GLF_FUZZED(639.980)), bool(false)))), min((_GLF_IDENTITY((injectionSwitch.y), mix(float(_GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) / 1.0)), float(_GLF_FUZZED(639.980)), bool(false)))), (_GLF_IDENTITY((injectionSwitch.y), mix(float(_GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) / 1.0)), float(_GLF_FUZZED(639.980)), bool(false)))))) / abs(1.0)) * 1.0), 0.0, 0.0, 0.0, 1.0, sin(0.0)))))), 0.0 + (max(float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 0.0, 0.0, 0.0, 1.0, sin(0.0)), (false ? _GLF_FUZZED(mat2x3(3.5, 2149.2657, 900.140, _GLF_IDENTITY(792.930, (false ? _GLF_FUZZED(-582.832) : 792.930)), 8506.0091, 8493.8071)) : mat2x3(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, determinant(mat2(1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), min(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))))), 1.0)) * (injectionSwitch.y))) * 1.0), 0.0, 0.0, 0.0, 1.0, sin(0.0))))), float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 0.0, 0.0, 0.0, 1.0, sin(0.0)), (false ? _GLF_FUZZED(mat2x3(3.5, 2149.2657, 900.140, 792.930, 8506.0091, 8493.8071)) : mat2x3(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.y), mix(float(_GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) / 1.0)), float(_GLF_FUZZED(639.980)), bool(false)))), min((_GLF_IDENTITY((injectionSwitch.y), _GLF_IDENTITY(mix(float(_GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) / 1.0)), float(_GLF_FUZZED(639.980)), bool(false)), (true ? mix(float(_GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) / 1.0)), float(_GLF_FUZZED(639.980)), bool(false)) : _GLF_FUZZED(-57.18))))), _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.y), mix(float(_GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) / 1.0)), float(_GLF_FUZZED(639.980)), bool(false)))), 0.0 + ((_GLF_IDENTITY((injectionSwitch.y), mix(float(_GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) / 1.0)), float(_GLF_FUZZED(639.980)), bool(false)))))))) / abs(1.0)) * 1.0), 0.0, 0.0, 0.0, 1.0, sin(0.0)))))))) : _GLF_FUZZED(-0.4))))))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(186553u)), _GLF_FUZZED(-3781.1445)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, (true) && true), true))).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 0.0, 0.0, 0.0, 1.0, sin(0.0)), (false ? _GLF_FUZZED(mat2x3(3.5, 2149.2657, 900.140, 792.930, 8506.0091, 8493.8071)) : mat2x3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 0.0, 0.0, 0.0, 1.0, sin(0.0))))), clamp(_GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 0.0, 0.0, 0.0, 1.0, sin(0.0)), (false ? _GLF_FUZZED(mat2x3(3.5, 2149.2657, 900.140, 792.930, 8506.0091, 8493.8071)) : mat2x3(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), max((injectionSwitch.y), (injectionSwitch.y))) * 1.0), 0.0, 0.0, 0.0, 1.0, sin(0.0))))), (float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 0.0, 0.0, 0.0, 1.0, sin(0.0)), (false ? _GLF_FUZZED(mat2x3(3.5, 2149.2657, 900.140, 792.930, 8506.0091, 8493.8071)) : mat2x3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 0.0, 0.0, 0.0, 1.0, sin(0.0)))))) + 0.0), float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 0.0, 0.0, 0.0, 1.0, sin(0.0)), (false ? _GLF_FUZZED(mat2x3(3.5, 2149.2657, 900.140, 792.930, 8506.0091, 8493.8071)) : mat2x3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 0.0, 0.0, 0.0, 1.0, sin(0.0))))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 0.0, 0.0, 0.0, 1.0, sin(0.0)), (false ? _GLF_FUZZED(mat2x3(3.5, 2149.2657, 900.140, 792.930, 8506.0091, 8493.8071)) : mat2x3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 0.0, 0.0, 0.0, 1.0, sin(0.0))))), clamp(float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 0.0, 0.0, 0.0, 1.0, sin(0.0)), (false ? _GLF_FUZZED(mat2x3(3.5, 2149.2657, 900.140, _GLF_IDENTITY(792.930, min(792.930, 792.930)), 8506.0091, 8493.8071)) : mat2x3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 0.0, 0.0, 0.0, 1.0, sin(0.0))))), float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))), 0.0, 0.0, 0.0, 1.0, sin(0.0)), (false ? _GLF_FUZZED(mat2x3(3.5, 2149.2657, 900.140, 792.930, 8506.0091, 8493.8071)) : mat2x3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 0.0, 0.0, 0.0, 1.0, sin(0.0))))), float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 0.0, 0.0, 0.0, 1.0, sin(0.0)), (false ? _GLF_FUZZED(mat2x3(3.5, 2149.2657, 900.140, 792.930, 8506.0091, 8493.8071)) : mat2x3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 0.0, 0.0, _GLF_IDENTITY(0.0, float(mat3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, sqrt(abs(1.0)), sqrt(1.0), 0.0, 1.0, abs(0.0)))), 1.0, sin(0.0))))))))), max(float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(mat2(0.0, 1.0, 0.0, 1.0)))) - 0.0), 0.0, 1.0, sin(0.0)), (false ? _GLF_FUZZED(mat2x3(3.5, 2149.2657, 900.140, 792.930, 8506.0091, 8493.8071)) : mat2x3(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, determinant(mat2(1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), 1.0)) * (injectionSwitch.y))) * 1.0), 0.0, 0.0, 0.0, 1.0, sin(0.0))))), float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 0.0, 0.0, 0.0, 1.0, sin(0.0)), (false ? _GLF_FUZZED(mat2x3(3.5, 2149.2657, 900.140, 792.930, 8506.0091, 8493.8071)) : mat2x3(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.y), mix(float(_GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) / 1.0)), float(_GLF_FUZZED(639.980)), bool(false)))), min((_GLF_IDENTITY((injectionSwitch.y), mix(float(_GLF_IDENTITY((injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)) / 1.0)), float(_GLF_FUZZED(639.980)), bool(false)))), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.y), mix(float(_GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) / 1.0)), float(_GLF_IDENTITY(_GLF_FUZZED(639.980), mix(float(_GLF_IDENTITY(_GLF_FUZZED(639.980), 1.0 * (_GLF_FUZZED(639.980)))), float(_GLF_FUZZED(-8.0)), bool(false)))), bool(false))), float(float(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.y), mix(float(_GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) / 1.0)), float(_GLF_IDENTITY(_GLF_FUZZED(639.980), mix(float(_GLF_IDENTITY(_GLF_FUZZED(639.980), 1.0 * (_GLF_FUZZED(639.980)))), float(_GLF_FUZZED(-8.0)), bool(false)))), bool(false))), clamp(_GLF_IDENTITY((injectionSwitch.y), mix(float(_GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) / 1.0)), float(_GLF_IDENTITY(_GLF_FUZZED(639.980), mix(float(_GLF_IDENTITY(_GLF_FUZZED(639.980), 1.0 * (_GLF_FUZZED(639.980)))), float(_GLF_FUZZED(-8.0)), bool(false)))), bool(false))), _GLF_IDENTITY((injectionSwitch.y), mix(float(_GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) / 1.0)), float(_GLF_IDENTITY(_GLF_FUZZED(639.980), mix(float(_GLF_IDENTITY(_GLF_FUZZED(639.980), 1.0 * (_GLF_FUZZED(639.980)))), float(_GLF_FUZZED(-8.0)), bool(false)))), bool(false))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.y), mix(float(_GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) / 1.0)), float(_GLF_IDENTITY(_GLF_FUZZED(639.980), mix(float(_GLF_IDENTITY(_GLF_FUZZED(639.980), 1.0 * (_GLF_FUZZED(639.980)))), float(_GLF_FUZZED(-8.0)), bool(false)))), bool(false))), 1.0 * (_GLF_IDENTITY((injectionSwitch.y), mix(float(_GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) / 1.0)), float(_GLF_IDENTITY(_GLF_FUZZED(639.980), mix(float(_GLF_IDENTITY(_GLF_FUZZED(639.980), 1.0 * (_GLF_FUZZED(639.980)))), float(_GLF_FUZZED(-8.0)), bool(false)))), bool(false))))))))))))) / abs(1.0)) * 1.0), 0.0, 0.0, 0.0, 1.0, sin(0.0))))))))))) || false)))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), (bool((injectionSwitch.x > injectionSwitch.y))) && true))))))
              barrier();
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(_GLF_IDENTITY(4, (4) >> 0), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(4, (4) >> 0))), 64, 4);
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (((_GLF_IDENTITY(1, _GLF_IDENTITY((1), _GLF_IDENTITY(0 | (_GLF_IDENTITY((1), ~ (~ ((1))))), ~ (_GLF_IDENTITY(~ (0 | (_GLF_IDENTITY((1), ~ (~ ((1)))))), min(_GLF_IDENTITY(~ (0 | (_GLF_IDENTITY((1), ~ (~ ((1)))))), (~ (0 | (_GLF_IDENTITY((1), ~ (~ ((1))))))) | 0), _GLF_IDENTITY(~ (0 | (_GLF_IDENTITY((1), ~ (~ ((1)))))), int(ivec4(~ (0 | (_GLF_IDENTITY((1), ~ (_GLF_IDENTITY(~ ((1)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(~ ((1)), (~ ((1))) / 1))))))), 1, 0, 0)))))))) << 0) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) ^ 1)), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (((_GLF_IDENTITY(1, (1) << _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, ~ (~ (0)))))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) ^ 1)), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter > (((_GLF_IDENTITY(1, (1) << 0) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) ^ 1)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat4(_GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 1.0, 0.0, 1.0))), 0.0, 0.0, 1.0, exp(0.0), _GLF_IDENTITY(sqrt(1.0), mix(float(sqrt(1.0)), float(_GLF_FUZZED(0.0)), bool(_GLF_IDENTITY(false, bool(bool(false)))))), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))), injectionSwitch.y)))), false, false))), true, false, false))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(0.0 + (_GLF_ONE(1.0, injectionSwitch.y)), 1.0 * (0.0 + (_GLF_ONE(1.0, injectionSwitch.y)))), max(_GLF_IDENTITY(0.0 + (_GLF_ONE(1.0, injectionSwitch.y)), 1.0 * (0.0 + (_GLF_ONE(1.0, injectionSwitch.y)))), _GLF_IDENTITY(0.0 + (_GLF_ONE(1.0, injectionSwitch.y)), 1.0 * (0.0 + (_GLF_ONE(1.0, injectionSwitch.y)))))))) - 0.0))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0 + (_GLF_ONE(1.0, injectionSwitch.y)), 1.0 * (0.0 + (_GLF_ONE(1.0, injectionSwitch.y)))))) - 0.0))))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               subgroupAll(false);
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(1, 1 * (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(float(injectionSwitch.y), 0.0 + (_GLF_IDENTITY(float(injectionSwitch.y), (true ? _GLF_IDENTITY(float(injectionSwitch.y), mix(float(float(injectionSwitch.y)), float(_GLF_FUZZED(7.9)), bool(false))) : _GLF_FUZZED(7.8))))), (float(injectionSwitch.y)) / 1.0)), mix(float(_GLF_FUZZED(float(false))), float(float(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y), (float(injectionSwitch.y)) / 1.0))), bool(true))))))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec2((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec2((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec2((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec2((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), _GLF_IDENTITY(bool(bool(! (! _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec2((true), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (bool(bvec2((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), (bool(bool(! (! _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec2((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec2((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))) || false))), (! (_GLF_IDENTITY(! (! _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec2((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec2((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), _GLF_IDENTITY(bool(bool(! (! _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec2((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec2((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), _GLF_IDENTITY((bool(bool(! (! _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec2((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec2((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))) || false, ! (! ((bool(bool(! (! _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((true), ! (! ((true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec2((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))) || false))))))) && true))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false))))))))
              barrier();
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             switch(_GLF_SWITCH(0))
              {
               case 0:
               do
                {
                 do
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, sin(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(vec2(7.1, 5.6).r)), float(0.0), bool(true)))) / 1.0)), 0.0, 1.0, 1.0, 0.0, 1.0))).y) * 1.0)))))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(false))
                          {
                           for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_injected_loop_counter ++) | 0, ((_injected_loop_counter ++) | 0) | (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, min(3, _GLF_IDENTITY(3, int(ivec2(_GLF_IDENTITY(3, (3) + 0), 0))))))) / 1))))))
                            {
                             barrier();
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                            }
                          }
                        }
                      }
                     else
                      {
                      }
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               barrier();
                              }
                             else
                              {
                              }
                            }
                          }
                         else
                          {
                           return;
                          }
                        }
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                        }
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                         else
                          {
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               case 31:
               case 10:
               for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 | (int(3))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 atomicStore(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(read, 0u ^ (read)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(read, 0u | (_GLF_IDENTITY(read, (_GLF_IDENTITY(read, uint(_GLF_IDENTITY(uvec4(read, 1u, 1u, 1u), (uvec4(read, 1u, 1u, 1u)) ^ uvec4(0u, 0u, 0u, 0u))))) | (_GLF_IDENTITY(_GLF_IDENTITY(read, clamp(read, read, read)), ~ (~ (_GLF_IDENTITY(read, clamp(_GLF_IDENTITY(read, uint(uvec3(read, 1u, 1u))), read, read))))))))))), ((~ (_GLF_IDENTITY(read, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(read, _GLF_IDENTITY((read), ~ (~ ((read)))) | (read)), (_GLF_IDENTITY(read, _GLF_IDENTITY((read), ~ (~ ((read)))) | (read))) * 1u)))))) << 0u)), 4, 64, 4);
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 barrier();
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 subgroupAll(true);
                }
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               break;
               default:
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (1 | 0), (_injected_loop_counter < (_GLF_IDENTITY(1 | 0, ~ (~ (1 | 0))))) && true)), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (1 | 0), (_injected_loop_counter < (_GLF_IDENTITY(1 | 0, ~ (~ _GLF_IDENTITY((1 | 0), clamp((1 | 0), (1 | 0), (1 | 0))))))) && true)), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (1 | 0), (_injected_loop_counter < (_GLF_IDENTITY(1 | 0, ~ (~ (1 | 0))))) && true))), true && (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (1 | 0), _GLF_IDENTITY((_injected_loop_counter < (_GLF_IDENTITY(1 | 0, ~ (~ (1 | 0))))) && true, ! (! ((_injected_loop_counter < (_GLF_IDENTITY(1 | 0, ~ _GLF_IDENTITY((~ (1 | 0)), ((~ (1 | 0))) / 1)))) && true))))))))))))); _GLF_IDENTITY(_injected_loop_counter ++, 1 * (_injected_loop_counter ++)))
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)) != 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bool(true)))))))))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                    }
                   else
                    {
                    }
                   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))) && true, ! (! ((_GLF_IDENTITY(false, ! (! (false)))) && true))))))), ! (_GLF_IDENTITY(! (false), (! (false)) || false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), ! (_GLF_IDENTITY(! (bool(bvec2(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))), bool(bvec4(! (bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), false))), false, true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), true), true)))), bool(bvec4(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), true), true)))), true, false, false)))))))))), ! (! (false)))) && true)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), true && (bool(_GLF_IDENTITY(false, (false) || false)))), true, true, false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), true && (bool(_GLF_IDENTITY(false, (false) || false)))), true, true, false)))), false || (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), true && (bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec2((false), false))) || false)))), true, true, false))))))), _GLF_IDENTITY((! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), true && (bool(_GLF_IDENTITY(false, (false) || false)))), true, true, false)))), false || (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), true && (bool(_GLF_IDENTITY(false, (false) || false)))), true, true, false)))))))), true && ((! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), true && (bool(_GLF_IDENTITY(false, (false) || false)))), true, true, false)))), false || (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), true && (bool(_GLF_IDENTITY(false, (false) || false)))), true, true, false)))))))))) || false)))))))))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) | _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))); _injected_loop_counter ++)
                          {
                           barrier();
                          }
                        }
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                        }
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         do
                          {
                           do
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               barrier();
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     do
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          {
                           do
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                              barrier();
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                              }
                             else
                              {
                               barrier();
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              {
                               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                {
                                 barrier();
                                }
                              }
                            }
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(true && (_GLF_WRAPPED_IF_TRUE(true)), (true && (_GLF_WRAPPED_IF_TRUE(true))) && true)), false, false))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)) ^ 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0))))))), bool(bvec4((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0))))))), false, true, false)))); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           barrier();
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     else
                      {
                      }
                    }
                   1;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 | (int(5)))))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
