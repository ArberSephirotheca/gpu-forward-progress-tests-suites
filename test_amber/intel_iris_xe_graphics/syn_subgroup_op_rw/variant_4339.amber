#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(subgroup_local_id + 1 < subgroup_size)
  {
   switch(_GLF_SWITCH(0))
    {
     case 0:
     case 93:
     case 83:
     atomicStore(checker[virtual_gid], read, 4, 64, 4);
     case 56:
     case 79:
     case 16:
     case 57:
     subgroupAll(false);
     break;
     case 59:
     intBitsToFloat(ivec2(6591, -16678));
     default:
     1;
    }
  }
 else
  {
   switch(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))))
    {
     case 6:
     while((mat3x4(-5710.0331, -435.843, 7366.3500, -61.90, -1.4, -1.2, -81.82, -8.5, 26.21, -794.813, -513.277, 36.88) == (outerProduct(vec3(7343.6483, -6402.4727, -6.0), vec2(1188.1363, 482.751)) , mat3x4(267.763, 1.3, -7822.5680, 322.749, 136.477, -495.393, 203.951, -680.407, 3853.6808, 483.869, 5808.8936, 7366.7700))))
      {
       switch(_GLF_SWITCH((-37239 & 0)))
        {
         case 44:
         mat2x3(6582.5796, 3.2, 3.4, -2.7, 5.0, 4.7);
         case 8:
         for(bool _GLF_SWITCH_0_0v, _GLF_SWITCH_0_1v; true; (ivec3(-70254, 99644, -52901) + ivec3(-25599, 75930, -85659)))
          {
           refract(vec4(-5346.7687, -936.919, 7.2, 40.82), reflect(vec4(9.6, 2.6, -743.328, 5181.1893), (vec4(-5.3, -590.249, -1.5, -210.743) * 3402.9815)), 5.7);
           ;
           mat2x4(131.615, -4338.6295, 93.38, 6.7, 399.477, 8.8, 1.8, -967.818);
           uint _GLF_SWITCH_0_2v, _GLF_SWITCH_0_3v;
           mat4x3(-9142.3343, 620.465, -786.505, -4.4, 9.2, 2389.8729, 8.4, 9.9, -271.449, 512.025, 595.335, -65.84);
           bvec4 _GLF_SWITCH_0_4v;
           mat3(-3.8, -4.6, -5.5, -2.4, 1.9, 85.49, 2790.2117, 310.354, -6.8);
           ;
          }
         case 0:
         case 70:
         case 71:
         floatBitsToUint(-3.3);
         case 12:
         {
          switch(_GLF_SWITCH(0))
           {
            case 75:
            all(bvec3(true, false, false));
            case 0:
            case 26:
            case 1:
            case 62:
            case 87:
            case 35:
            case 2:
            for(bool _GLF_SWITCH_1_0v, _GLF_SWITCH_1_1v; (ivec3(-23779, -40326, 18062) != ivec3(61193, 40341, -55784)); mat4x2(asinh(-49.77)))
             {
              switch(_GLF_SWITCH((int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(6), int(6)))))
               {
                case 51:
                uvec2(25762u, 66493u);
                case 0:
                case 91:
                mat2 _GLF_SWITCH_1_2v, _GLF_SWITCH_1_3v, _GLF_SWITCH_1_4v;
                case 83:
                _GLF_SWITCH_1_4v;
                case 3:
                mat4x3(2523.5450, 7.9, -95.22, -9.3, 5691.8358, 43.11, 8646.1044, 315.948, 127.534, -73.53, 10.96, -4.9);
                case 67:
                case 15:
                case 71:
                vec4 _GLF_SWITCH_1_5v, _GLF_SWITCH_1_6v[97];
                break;
                default:
                1;
               }
             }
            break;
            case 21:
            mat3(6.8, -9.6, 620.258, -1.7, -7.1, 9675.4634, -10.22, -668.163, -90.71);
            case 64:
            mat2x4(32.45, -8168.0669, -8542.4381, -593.874, 3807.2691, 49.48, 38.95, -601.804);
            default:
            1;
           }
         }
         case 17:
         case 47:
         mat4 _GLF_SWITCH_1_7v;
         case 21:
         case 39:
         case 75:
         for(         vec4(-7.8, 9.3, 49.60, 74.59);
 false; ivec2(30646, -80551))
          {
           while(true)
            {
             _GLF_SWITCH_1_7v;
             ;
             (uvec2(30441u, 63685u) / subgroup_local_id);
             9.1;
             ;
            }
           bvec3 _GLF_SWITCH_1_8v, _GLF_SWITCH_1_9v[29], _GLF_SWITCH_1_10v[59];
           injectionSwitch;
           all(lessThan(uvec3(185042u, 154315u, 191383u), uvec3(93860u, 28786u, 174654u)));
           ivec4 _GLF_SWITCH_1_11v;
           for(bool _GLF_SWITCH_1_12v, _GLF_SWITCH_1_13v; _GLF_SWITCH_1_12v; uvec3(72519u, 31578u, 2614u))
            {
            }
           -87211;
           ivec2 _GLF_SWITCH_1_14v;
          }
         for(         uvec2(126757u, 23419u);
 false; 69080)
          {
          }
         break;
         default:
         1;
        }
      }
     case 25:
     {
      if(false)
       {
        for(        ivec2(-34690, -26042);
 (true ^^ false); (vec2(6.6, 83.55) * mat4x2(-2.2, 6901.6267, 94.84, 0.6, -6.7, 37.54, 156.529, -919.099)))
         {
         }
       }
     }
     case 0:
     case 22:
     case 5:
     atomicStore(buf[virtual_gid], read, 4, 64, 4);
     case 52:
     case 58:
     subgroupAll(true);
     break;
     default:
     1;
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
