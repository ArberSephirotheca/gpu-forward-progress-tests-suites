#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) || false)))), false || (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), (! (! (_GLF_IDENTITY(false, ! (! (false)))))) || false))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + tan(0.0)), (false ? _GLF_FUZZED(9.3) : _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + tan(0.0)))) > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(7.2)), bool(false))))))), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))), bool(bvec3(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))), true, false))))))), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(5861.4406), _GLF_FUZZED((43.62 + 2.6))), bvec2(false, false))).x > injectionSwitch.y)))), true && (! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))))))))))))), ((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))), bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))), bool(bvec3(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), true && (_GLF_IDENTITY(! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), ! (! (! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))))))), true, false))))))), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(5861.4406), _GLF_FUZZED((43.62 + 2.6))), bvec2(false, false))).x > injectionSwitch.y)))), true && (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))))))))) && true))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, min(gl_WorkGroupSize, gl_WorkGroupSize)).x;
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u))) << uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))).x)))))), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x)))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x))))))), clamp(_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x)))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x))))))), max(min(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x)))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x))))))), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x)))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x))))))), uint(uint(min(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x)))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x)))))))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x)))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x)))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)).x))))))))));
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, 0u | (_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id))));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      {
       do
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
          {
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) | (subgroup_size), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY((subgroup_size) | (subgroup_size), ((subgroup_size) | _GLF_IDENTITY((subgroup_size), ((subgroup_size)) + 0u)) / 1u)))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), (subgroup_size) | (subgroup_size)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), _GLF_IDENTITY(0u ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), min(0u ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), _GLF_IDENTITY(0u ^ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) | (subgroup_size), ((subgroup_size) | (subgroup_size)) ^ 0u))), (0u ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))) | (0u ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))))))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))) | 0u), 0u ^ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), (true ? _GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size))) : _GLF_FUZZED(subgroup_size))) | (subgroup_size)))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), 0u ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), 0u ^ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) | (subgroup_size))))) >> 0u)))))) << 0u))), (subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), 0u ^ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), max((subgroup_size), _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))))), (_GLF_IDENTITY((subgroup_size), max((subgroup_size), _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))))) | (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), max((subgroup_size), _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))))), ~ (~ (_GLF_IDENTITY((subgroup_size), max((subgroup_size), _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size)))))))))) | (subgroup_size))))))) | (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), 0u ^ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) | (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))), (_GLF_IDENTITY((subgroup_size) | (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))), ((subgroup_size) | (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))) ^ 0u)) | (_GLF_IDENTITY((subgroup_size) | (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))), ((subgroup_size) | (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))) - 0u)))))))), ~ (~ (subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, (0u) >> 0u))))))), 0u ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))))))))))) + ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), min(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) / (0u | 1u)) << 0u) + 1), clamp((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1))), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) + 1)))))) % subgroup_size);
 uint read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u | (virtual_gid), (0u | (virtual_gid)) * 1u))], 4, 64, 0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, uint(uvec2(_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid))), 1u))), _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_size) : 0u)) | (next_virtual_gid))], _GLF_IDENTITY(uint(1), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, ((_GLF_IDENTITY(0 | 0, (0 | 0) << (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 + (int(2))))))) & (- -67564)) + (1)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(76659) : 1)), ((0 | 0) & (- -67564)) + (1)))))), 1u), min(uvec2(uint(1), _GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uint(1u), min(uint(1u), _GLF_IDENTITY(uint(1u), (uint(1u)) | (uint(1u)))))))), _GLF_IDENTITY(uvec2(uint(1), 1u), _GLF_IDENTITY(_GLF_IDENTITY((uvec2(uint(1), 1u)) - uvec2(0u, 0u), ((uvec2(uint(1), 1u)) - uvec2(0u, 0u)) - uvec2(0u, 0u)), _GLF_IDENTITY((_GLF_IDENTITY((uvec2(uint(1), 1u)) - uvec2(0u, 0u), ((uvec2(uint(1), 1u)) - uvec2(0u, 0u)) - uvec2(0u, 0u))), uvec2(0u, 0u) + ((_GLF_IDENTITY((uvec2(uint(1), 1u)) - uvec2(0u, 0u), ((uvec2(uint(1), 1u)) - uvec2(0u, 0u)) - uvec2(0u, 0u))))) >> uvec2(0u, 0u)))))), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(uint(1), 1u), min(uvec2(uint(1), 1u), _GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(_GLF_IDENTITY(1, clamp(1, 1, 1)))), min(int(int(_GLF_IDENTITY(1, clamp(1, 1, 1)))), int(int(_GLF_IDENTITY(1, clamp(1, 1, 1))))))), 1))), _GLF_IDENTITY(1u, clamp(1u, 1u, 1u))), _GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) | (uint(1)), (false ? _GLF_FUZZED(subgroup_local_id) : (uint(1)) | (uint(1))))), uint(1))), 1u)) - uvec2(0u, 0u), min((uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY(uint(uvec3(uint(1), 1u, 1u)), clamp(uint(uvec3(uint(1), 1u, 1u)), uint(uvec3(uint(1), 1u, 1u)), uint(uvec3(uint(1), 1u, 1u))))), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u), _GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u), _GLF_IDENTITY((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))), clamp((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))), (uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))), _GLF_IDENTITY((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))), uvec2(0u, 0u) | ((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))))))) + ((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u))))))))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(uint(1), 1u), min(uvec2(uint(1), 1u), _GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(_GLF_IDENTITY(1, clamp(1, 1, 1)))), min(int(int(_GLF_IDENTITY(1, clamp(1, 1, 1)))), int(int(_GLF_IDENTITY(1, clamp(1, 1, 1))))))), 1))), _GLF_IDENTITY(1u, clamp(1u, 1u, 1u))), _GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) | (uint(1)), (false ? _GLF_FUZZED(subgroup_local_id) : (uint(1)) | (uint(1))))), uint(1))), 1u)) - uvec2(0u, 0u), min((uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY(uint(uvec3(uint(1), 1u, 1u)), clamp(uint(uvec3(uint(1), 1u, 1u)), uint(uvec3(uint(1), 1u, 1u)), uint(uvec3(uint(1), 1u, 1u))))), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u), _GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u), _GLF_IDENTITY((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))), clamp((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))), (uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))), _GLF_IDENTITY((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))), uvec2(0u, 0u) | ((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))))))) + ((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u))))))))), uint(uvec3(uint(_GLF_IDENTITY(uvec2(uint(1), 1u), min(uvec2(uint(1), 1u), _GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(_GLF_IDENTITY(1, clamp(1, 1, 1)))), min(int(int(_GLF_IDENTITY(1, clamp(1, 1, 1)))), int(int(_GLF_IDENTITY(1, clamp(1, 1, 1))))))), 1))), _GLF_IDENTITY(1u, clamp(1u, 1u, 1u))), _GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) | (uint(1)), (false ? _GLF_FUZZED(subgroup_local_id) : (uint(1)) | (uint(1))))), uint(1))), 1u)) - uvec2(0u, 0u), min((uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY(uint(uvec3(uint(1), 1u, 1u)), clamp(uint(uvec3(uint(1), 1u, 1u)), uint(uvec3(uint(1), 1u, 1u)), uint(uvec3(uint(1), 1u, 1u))))), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u), _GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u), _GLF_IDENTITY((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))), clamp((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))), (uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))), _GLF_IDENTITY((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))), uvec2(0u, 0u) | ((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))))))) + ((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u))))))))), 0u, 0u))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(uint(1), 1u), min(uvec2(uint(1), 1u), _GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(_GLF_IDENTITY(1, clamp(1, 1, 1)))), min(int(int(_GLF_IDENTITY(1, clamp(1, 1, 1)))), int(int(_GLF_IDENTITY(1, clamp(1, 1, 1))))))), 1))), _GLF_IDENTITY(1u, clamp(1u, 1u, 1u))), _GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) | (uint(1)), (false ? _GLF_FUZZED(subgroup_local_id) : (uint(1)) | (uint(1))))), uint(1))), 1u)) - uvec2(0u, 0u), min((uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY(uint(uvec3(uint(1), 1u, 1u)), clamp(uint(uvec3(uint(1), 1u, 1u)), uint(uvec3(uint(1), 1u, 1u)), uint(uvec3(uint(1), 1u, 1u))))), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u), _GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u), _GLF_IDENTITY((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))), clamp((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))), (uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))), _GLF_IDENTITY((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))), uvec2(0u, 0u) | ((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))))))) + ((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u))))))))), clamp(uint(_GLF_IDENTITY(uvec2(uint(1), 1u), min(uvec2(uint(1), 1u), _GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(_GLF_IDENTITY(1, clamp(1, 1, 1)))), min(int(int(_GLF_IDENTITY(1, clamp(1, 1, 1)))), int(int(_GLF_IDENTITY(1, clamp(1, 1, 1))))))), 1))), _GLF_IDENTITY(1u, clamp(1u, 1u, 1u))), _GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) | (uint(1)), (false ? _GLF_FUZZED(subgroup_local_id) : (uint(1)) | (uint(1))))), uint(1))), 1u)) - uvec2(0u, 0u), min((uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY(uint(uvec3(uint(1), 1u, 1u)), clamp(uint(uvec3(uint(1), 1u, 1u)), uint(uvec3(uint(1), 1u, 1u)), uint(uvec3(uint(1), 1u, 1u))))), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u), _GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u), _GLF_IDENTITY((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))), clamp((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))), (uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))), _GLF_IDENTITY((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))), uvec2(0u, 0u) | ((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))))))) + ((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u))))))))), uint(_GLF_IDENTITY(uvec2(uint(1), 1u), min(uvec2(uint(1), 1u), _GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(_GLF_IDENTITY(1, clamp(1, 1, 1)))), min(int(int(_GLF_IDENTITY(1, clamp(1, 1, 1)))), int(int(_GLF_IDENTITY(1, clamp(1, 1, 1))))))), 1))), _GLF_IDENTITY(1u, clamp(1u, 1u, 1u))), _GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) | (uint(1)), (false ? _GLF_FUZZED(subgroup_local_id) : (uint(1)) | (uint(1))))), uint(1))), 1u)) - uvec2(0u, 0u), min((uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY(uint(uvec3(uint(1), 1u, 1u)), clamp(uint(uvec3(uint(1), 1u, 1u)), uint(uvec3(uint(1), 1u, 1u)), uint(uvec3(uint(1), 1u, 1u))))), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u), _GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u), _GLF_IDENTITY((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))), clamp((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))), (uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))), _GLF_IDENTITY((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))), uvec2(0u, 0u) | ((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))))))) + ((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u))))))))), uint(_GLF_IDENTITY(uvec2(uint(1), 1u), min(uvec2(uint(1), 1u), _GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(_GLF_IDENTITY(1, clamp(1, 1, 1)))), min(int(int(_GLF_IDENTITY(1, clamp(1, 1, 1)))), int(int(_GLF_IDENTITY(1, clamp(1, 1, 1))))))), 1))), _GLF_IDENTITY(1u, clamp(1u, 1u, 1u))), _GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) | (uint(1)), (false ? _GLF_FUZZED(subgroup_local_id) : (uint(1)) | (uint(1))))), uint(1))), 1u)) - uvec2(0u, 0u), min((uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY(uint(uvec3(uint(1), 1u, 1u)), clamp(uint(uvec3(uint(1), 1u, 1u)), uint(uvec3(uint(1), 1u, 1u)), uint(uvec3(uint(1), 1u, 1u))))), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u), _GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u), _GLF_IDENTITY((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))), clamp((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))), (uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))), _GLF_IDENTITY((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))), uvec2(0u, 0u) | ((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))))))) + ((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u))))))))))))), uint(_GLF_IDENTITY(uvec2(uint(1), 1u), min(_GLF_IDENTITY(uvec2(uint(1), 1u), clamp(uvec2(uint(1), 1u), uvec2(uint(1), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) / 1u)) | 0u)), uvec2(uint(1), 1u))), _GLF_IDENTITY(uvec2(uint(1), 1u), (uvec2(uint(1), 1u)) - uvec2(0u, 0u))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, ~ (~ (1))))))) >> 0)), 1u), min(uvec2(uint(1), 1u), _GLF_IDENTITY(uvec2(uint(1), 1u), (uvec2(uint(_GLF_IDENTITY(1, (1) | (1))), 1u)) - uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(0u, max(0u, 0u)))))), _GLF_IDENTITY(0u, (0u) | (0u))))))), ~ (~ (uint(_GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, ~ (~ (1))))))) >> 0)), 1u), min(uvec2(uint(1), 1u), _GLF_IDENTITY(uvec2(uint(1), 1u), (uvec2(uint(_GLF_IDENTITY(1, (1) | (1))), 1u)) - uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(0u, max(0u, 0u)))))), _GLF_IDENTITY(0u, (0u) | (0u)))))))))))), _GLF_IDENTITY(max(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, ((0 | 0) & (- -67564)) + (1)), ~ (~ (_GLF_IDENTITY(1, ((0 | 0) & (- -67564)) + (1)))))), 1u), min(uvec2(uint(1), _GLF_IDENTITY(1u, uint(uint(1u)))), _GLF_IDENTITY(uvec2(uint(1), 1u), _GLF_IDENTITY(_GLF_IDENTITY((uvec2(uint(1), 1u)) - uvec2(0u, 0u), ((uvec2(uint(1), 1u)) - uvec2(0u, 0u)) - uvec2(0u, 0u)), (_GLF_IDENTITY((uvec2(uint(1), 1u)) - uvec2(0u, 0u), ((uvec2(uint(1), 1u)) - uvec2(0u, 0u)) - uvec2(0u, 0u))) >> uvec2(0u, 0u)))))), clamp(uint(_GLF_IDENTITY(uvec2(uint(1), 1u), min(uvec2(uint(1), 1u), _GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(1, clamp(1, 1, 1))), 1u), _GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u), min((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u), _GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u), (uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))) + ((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u))))))))), uint(_GLF_IDENTITY(uvec2(uint(1), 1u), min(_GLF_IDENTITY(uvec2(uint(1), 1u), clamp(uvec2(uint(1), 1u), uvec2(uint(1), 1u), uvec2(uint(1), 1u))), _GLF_IDENTITY(uvec2(uint(1), 1u), (uvec2(uint(1), 1u)) - uvec2(0u, 0u))))), uint(_GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, ~ (~ (1))))))) >> 0)), 1u), min(uvec2(uint(1), 1u), _GLF_IDENTITY(uvec2(uint(1), 1u), (uvec2(uint(_GLF_IDENTITY(1, (1) | (1))), 1u)) - uvec2(_GLF_IDENTITY(0u, max(0u, 0u)), _GLF_IDENTITY(0u, (0u) | (0u))))))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, ((0 | 0) & (- -67564)) + (1)), ~ (~ (_GLF_IDENTITY(1, ((0 | 0) & (- -67564)) + (1)))))), 1u), min(uvec2(uint(1), _GLF_IDENTITY(1u, uint(uint(1u)))), _GLF_IDENTITY(uvec2(uint(1), 1u), _GLF_IDENTITY(_GLF_IDENTITY((uvec2(uint(1), 1u)) - uvec2(0u, 0u), ((uvec2(uint(1), 1u)) - uvec2(0u, 0u)) - uvec2(0u, 0u)), (_GLF_IDENTITY((uvec2(uint(1), 1u)) - uvec2(0u, 0u), ((uvec2(uint(1), 1u)) - uvec2(0u, 0u)) - uvec2(0u, 0u))) >> uvec2(0u, 0u)))))), clamp(uint(_GLF_IDENTITY(uvec2(uint(1), 1u), min(uvec2(uint(1), 1u), _GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(1, clamp(1, 1, 1))), 1u), _GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u), min((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u), _GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u), (uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))) + ((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u))))))))), uint(_GLF_IDENTITY(uvec2(uint(1), 1u), min(_GLF_IDENTITY(uvec2(uint(1), 1u), clamp(uvec2(uint(1), 1u), uvec2(uint(1), 1u), uvec2(uint(1), 1u))), _GLF_IDENTITY(uvec2(uint(1), 1u), (uvec2(uint(1), 1u)) - uvec2(0u, 0u))))), uint(_GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, ~ (~ (1))))))) >> 0)), 1u), min(uvec2(uint(1), 1u), _GLF_IDENTITY(uvec2(uint(1), 1u), (uvec2(uint(_GLF_IDENTITY(1, (1) | (1))), 1u)) - uvec2(_GLF_IDENTITY(0u, max(0u, 0u)), _GLF_IDENTITY(0u, (0u) | (0u)))))))))), (max(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, ((0 | 0) & (- -67564)) + (1)), ~ (~ (_GLF_IDENTITY(1, ((0 | 0) & (- -67564)) + (1)))))), 1u), min(uvec2(uint(1), _GLF_IDENTITY(1u, uint(uint(1u)))), _GLF_IDENTITY(uvec2(uint(1), 1u), _GLF_IDENTITY(_GLF_IDENTITY((uvec2(uint(1), 1u)) - uvec2(0u, 0u), ((uvec2(uint(1), 1u)) - uvec2(0u, 0u)) - uvec2(0u, 0u)), (_GLF_IDENTITY((uvec2(uint(1), 1u)) - uvec2(0u, 0u), ((uvec2(uint(1), 1u)) - uvec2(0u, 0u)) - uvec2(0u, 0u))) >> uvec2(0u, 0u)))))), clamp(uint(_GLF_IDENTITY(uvec2(uint(1), 1u), min(uvec2(uint(1), 1u), _GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(1, clamp(1, 1, 1))), 1u), _GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u), min((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u), _GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u), (uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))) + ((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u))))))))), uint(_GLF_IDENTITY(uvec2(uint(1), 1u), min(_GLF_IDENTITY(uvec2(uint(1), 1u), clamp(uvec2(uint(1), 1u), uvec2(uint(1), 1u), uvec2(uint(1), 1u))), _GLF_IDENTITY(uvec2(uint(1), 1u), (uvec2(uint(1), 1u)) - uvec2(0u, 0u))))), uint(_GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, ~ (~ (1))))))) >> 0)), 1u), min(uvec2(uint(1), 1u), _GLF_IDENTITY(uvec2(uint(1), 1u), (uvec2(uint(_GLF_IDENTITY(1, (1) | (1))), 1u)) - uvec2(_GLF_IDENTITY(0u, max(0u, 0u)), _GLF_IDENTITY(0u, (0u) | (0u))))))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, ((0 | 0) & (- -67564)) + (1)), ~ (~ (_GLF_IDENTITY(1, ((0 | 0) & (- -67564)) + (1)))))), 1u), min(uvec2(uint(1), _GLF_IDENTITY(1u, uint(uint(1u)))), _GLF_IDENTITY(uvec2(uint(1), 1u), _GLF_IDENTITY(_GLF_IDENTITY((uvec2(uint(1), 1u)) - uvec2(0u, 0u), ((uvec2(uint(1), 1u)) - uvec2(0u, 0u)) - uvec2(0u, 0u)), (_GLF_IDENTITY((uvec2(uint(1), 1u)) - uvec2(0u, 0u), ((uvec2(uint(1), 1u)) - uvec2(0u, 0u)) - uvec2(0u, 0u))) >> uvec2(0u, 0u)))))), clamp(uint(_GLF_IDENTITY(uvec2(uint(1), 1u), min(uvec2(uint(1), 1u), _GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(1, clamp(1, 1, 1))), 1u), _GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u), min((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u), _GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u), (uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))) + ((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u))))))))), uint(_GLF_IDENTITY(uvec2(uint(1), 1u), min(_GLF_IDENTITY(uvec2(uint(1), 1u), clamp(uvec2(uint(1), 1u), uvec2(uint(1), 1u), uvec2(uint(1), 1u))), _GLF_IDENTITY(uvec2(uint(1), 1u), (uvec2(uint(1), 1u)) - uvec2(0u, 0u))))), uint(_GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, ~ (~ (1))))))) >> 0)), 1u), min(uvec2(uint(1), 1u), _GLF_IDENTITY(uvec2(uint(1), 1u), (uvec2(uint(_GLF_IDENTITY(1, (1) | (1))), 1u)) - uvec2(_GLF_IDENTITY(0u, max(0u, 0u)), _GLF_IDENTITY(0u, (0u) | (0u))))))))))) | (max(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, ((0 | 0) & (- -67564)) + (1)), ~ (~ (_GLF_IDENTITY(1, ((0 | 0) & (- -67564)) + (1)))))), 1u), min(uvec2(uint(1), _GLF_IDENTITY(1u, uint(uint(1u)))), _GLF_IDENTITY(uvec2(uint(1), 1u), _GLF_IDENTITY(_GLF_IDENTITY((uvec2(uint(1), 1u)) - uvec2(0u, 0u), ((uvec2(uint(1), 1u)) - uvec2(0u, 0u)) - uvec2(0u, 0u)), (_GLF_IDENTITY((uvec2(uint(1), 1u)) - uvec2(0u, 0u), ((uvec2(uint(1), 1u)) - uvec2(0u, 0u)) - uvec2(0u, 0u))) >> uvec2(0u, 0u)))))), clamp(uint(_GLF_IDENTITY(uvec2(uint(1), 1u), min(uvec2(uint(1), 1u), _GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(1, clamp(1, 1, 1))), 1u), _GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u), min((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u), _GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u), (uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))) + ((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u))))))))), uint(_GLF_IDENTITY(uvec2(uint(1), 1u), min(_GLF_IDENTITY(uvec2(uint(1), 1u), clamp(uvec2(uint(1), 1u), uvec2(uint(1), 1u), uvec2(uint(1), 1u))), _GLF_IDENTITY(uvec2(uint(1), 1u), (uvec2(uint(1), 1u)) - uvec2(0u, 0u))))), uint(_GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, ~ (~ (1))))))) >> 0)), 1u), min(uvec2(uint(1), 1u), _GLF_IDENTITY(uvec2(uint(1), 1u), (uvec2(uint(_GLF_IDENTITY(1, (1) | (1))), 1u)) - uvec2(_GLF_IDENTITY(0u, max(0u, 0u)), _GLF_IDENTITY(0u, (0u) | (0u))))))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, ((0 | 0) & (- -67564)) + (1)), ~ (~ (_GLF_IDENTITY(1, ((0 | 0) & (- -67564)) + (1)))))), 1u), min(uvec2(uint(1), _GLF_IDENTITY(1u, uint(uint(1u)))), _GLF_IDENTITY(uvec2(uint(1), 1u), _GLF_IDENTITY(_GLF_IDENTITY((uvec2(uint(1), 1u)) - uvec2(0u, 0u), ((uvec2(uint(1), 1u)) - uvec2(0u, 0u)) - uvec2(0u, 0u)), (_GLF_IDENTITY((uvec2(uint(1), 1u)) - uvec2(0u, 0u), ((uvec2(uint(1), 1u)) - uvec2(0u, 0u)) - uvec2(0u, 0u))) >> uvec2(0u, 0u)))))), clamp(uint(_GLF_IDENTITY(uvec2(uint(1), 1u), min(uvec2(uint(1), 1u), _GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(1, clamp(1, 1, 1))), 1u), _GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u), min((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u), _GLF_IDENTITY((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u), (uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))) + ((uvec2(_GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 1u)) - uvec2(0u, 0u))))))))), uint(_GLF_IDENTITY(uvec2(uint(1), 1u), min(_GLF_IDENTITY(uvec2(uint(1), 1u), clamp(uvec2(uint(1), 1u), uvec2(uint(1), 1u), uvec2(uint(1), 1u))), _GLF_IDENTITY(uvec2(uint(1), 1u), (uvec2(uint(1), 1u)) - uvec2(0u, 0u))))), uint(_GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, ~ (~ (1))))))) >> 0)), 1u), min(uvec2(uint(1), 1u), _GLF_IDENTITY(uvec2(uint(1), 1u), (uvec2(uint(_GLF_IDENTITY(1, (1) | (1))), 1u)) - uvec2(_GLF_IDENTITY(0u, max(0u, 0u)), _GLF_IDENTITY(0u, (0u) | (0u)))))))))))))), 4, 64, _GLF_IDENTITY(4, ~ (~ (4))));
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, false)))))
          barrier();
        }
       else
        {
        }
       barrier();
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         atomicStore(checker[virtual_gid], read, 4, 64, 4);
        }
       else
        {
        }
      }
     else
      {
      }
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), true && (bool(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)))))))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 1.0, round(length(normalize(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), max(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0)))))), round(length(normalize(vec2(1.0, 1.0)))), 0.0)))).y, mix(float(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1.7)), float(injectionSwitch.y), bool(true)))), _GLF_IDENTITY(float(_GLF_FUZZED(4.3)), min(float(_GLF_FUZZED(4.3)), float(_GLF_FUZZED(4.3)))), bool(false)))), bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), round(length(_GLF_IDENTITY(normalize(vec2(1.0, 1.0)), (normalize(vec2(1.0, 1.0))) - vec2(0.0, 0.0)))), 0.0)))).y, mix(float(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(_GLF_FUZZED(1.7), (false ? _GLF_FUZZED(187.708) : _GLF_FUZZED(1.7)))), float(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0)))) * 1.0), injectionSwitch.y, injectionSwitch.y))), bool(true)))), _GLF_IDENTITY(float(_GLF_FUZZED(4.3)), min(float(_GLF_FUZZED(4.3)), float(_GLF_FUZZED(4.3)))), bool(false)))), true, false))))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))) && true))
    {
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       subgroupAll(false);
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))));
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), true && (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), ! (! (bool(_GLF_IDENTITY(false, ! (! (false))))))))))) || (false))))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     atomicStore(buf[virtual_gid], read, _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-37906) : 4)), _GLF_IDENTITY(4, (4) ^ 0))), 64, _GLF_IDENTITY(4, (4) | (4)));
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ 1), ((0 ^ 1)) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1, 0 | (1)) & 1)); _injected_loop_counter ++)
            {
             barrier();
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               do
                {
                 barrier();
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))))));
              }
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, true && ((_GLF_IDENTITY(false, (false) || false)) || false)))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                          barrier();
                        }
                       else
                        {
                        }
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))), ! (! (false)))))
                  barrier();
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                  barrier();
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false))))))))), (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) + 0) << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, int(int(2))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) + 0) << _GLF_IDENTITY(int(2), int(2))), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(1, min(1, 1)) * (_GLF_IDENTITY(1, 0 ^ (1)))), (1) + 0) << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) / (0 ^ 1))))))))))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-375.327), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(4.4)), bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 0.0, 0.0)))) - 0.0) < injectionSwitch.y)), false))).x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))));
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))))
    {
     subgroupAll(true);
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))))
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true && (bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     barrier();
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
