#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_13 {
 uvec3 _f0;
 uint next_virtual_gid;
 float _f1;
} ;

struct _GLF_struct_10 {
 ivec3 _f0;
 bvec3 _f1;
 float _f2;
 bvec3 _f3;
 mat4x2 _f4;
 ivec3 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_9 {
 mat3x2 _f0;
} ;

struct _GLF_struct_8 {
 uint _f0;
} ;

struct _GLF_struct_11 {
 uint _f0;
 uint virtual_gid;
 ivec4 _f1;
 _GLF_struct_8 _f2;
 _GLF_struct_9 _f3;
 mat4 _f4;
 _GLF_struct_10 _f5;
} ;

struct _GLF_struct_12 {
 bvec4 _f0;
 uint _f1;
 vec3 _f2;
 _GLF_struct_11 _f3;
} ;

struct _GLF_struct_5 {
 mat2 _f0;
 vec4 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_6 {
 mat2x3 _f0;
 _GLF_struct_5 _f1;
 uint workgroup_size;
} ;

struct _GLF_struct_3 {
 int _f0;
} ;

struct _GLF_struct_2 {
 vec2 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_4 {
 _GLF_struct_2 _f0;
 bvec4 _f1;
 _GLF_struct_3 _f2;
 mat3x4 _f3;
 mat3x4 _f4;
} ;

struct _GLF_struct_0 {
 mat2 _f0;
 mat2 _f1;
 mat4 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_1 {
 mat2x4 _f0;
 _GLF_struct_0 _f1;
} ;

struct _GLF_struct_7 {
 _GLF_struct_1 _f0;
 _GLF_struct_4 _f1;
 vec3 _f2;
 bool _f3;
 _GLF_struct_6 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_12readsubgroup_sizevirtual_gidworkgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_12readsubgroup_sizevirtual_gidworkgroup_id.y = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(_GLF_struct_1(mat2x4(1.0), _GLF_struct_0(mat2(1.0), mat2(1.0), mat4(1.0), ivec3(1))), _GLF_struct_4(_GLF_struct_2(vec2(1.0), uvec3(1u)), bvec4(true), _GLF_struct_3(1), mat3x4(1.0), mat3x4(1.0)), vec3(1.0), true, _GLF_struct_6(mat2x3(1.0), _GLF_struct_5(mat2(1.0), vec4(1.0), bvec2(true)), gl_WorkGroupSize.x));
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_12readsubgroup_sizevirtual_gidworkgroup_id.w = workgroup_id;
 uint workgroup_base = _GLF_struct_replacement_7._f4.workgroup_size * GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_12readsubgroup_sizevirtual_gidworkgroup_id.w;
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(bvec4(true), 1u, vec3(1.0), _GLF_struct_11(1u, workgroup_base + subgroup_id * GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_12readsubgroup_sizevirtual_gidworkgroup_id.y + subgroup_local_id, ivec4(1), _GLF_struct_8(1u), _GLF_struct_9(mat3x2(1.0)), mat4(1.0), _GLF_struct_10(ivec3(1), bvec3(true), 1.0, bvec3(true), mat4x2(1.0), ivec3(1), uvec4(1u))));
 GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_12readsubgroup_sizevirtual_gidworkgroup_id.z = _GLF_struct_replacement_12._f3.virtual_gid;
 _GLF_struct_13 _GLF_struct_replacement_13 = _GLF_struct_13(uvec3(1u), workgroup_base + subgroup_id * GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_12readsubgroup_sizevirtual_gidworkgroup_id.y + ((subgroup_local_id + 1) % GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_12readsubgroup_sizevirtual_gidworkgroup_id.y), 1.0);
 uint read = atomicLoad(buf[GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_12readsubgroup_sizevirtual_gidworkgroup_id.z], 4, 64, 0);
 GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_12readsubgroup_sizevirtual_gidworkgroup_id.x = read;
 atomicStore(buf[_GLF_struct_replacement_13.next_virtual_gid], uint(1), 4, 64, 4);
 if(subgroup_local_id + 1 < GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_12readsubgroup_sizevirtual_gidworkgroup_id.y)
  {
   atomicStore(checker[GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_12readsubgroup_sizevirtual_gidworkgroup_id.z], GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_12readsubgroup_sizevirtual_gidworkgroup_id.x, 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   atomicStore(buf[GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_12readsubgroup_sizevirtual_gidworkgroup_id.z], GLF_merged4_0_1_4_1_1_13_2_1_11_3_1_12readsubgroup_sizevirtual_gidworkgroup_id.x, 4, 64, 4);
   subgroupAll(true);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
