#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size;
 uvec4 GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base;
 uvec4 GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id;
 uvec4 GLF_merged2_0_2_51_2_2_45GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizeGLF_merged2_0_1_4_1_1_17readsubgroup_local_id;
 uvec4 GLF_merged4_0_1_4_1_1_11_2_1_12_3_1_14readvirtual_gidworkgroup_idworkgroup_size;
 uvec2 GLF_merged2_0_1_4_1_1_17readsubgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
    {
     return;
    }
   else
    {
    }
  }
 GLF_merged2_0_2_51_2_2_45GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizeGLF_merged2_0_1_4_1_1_17readsubgroup_local_id.zw = GLF_merged2_0_1_4_1_1_17readsubgroup_local_id;
 uvec2 GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uvec4 GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizenext_virtual_gidvirtual_gid;
 uvec2 GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size;
 GLF_merged2_0_2_51_2_2_45GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizeGLF_merged2_0_1_4_1_1_17readsubgroup_local_id.xy = GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   _GLF_IDENTITY(GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizenext_virtual_gidvirtual_gid.xy = GLF_merged2_0_2_51_2_2_45GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizeGLF_merged2_0_1_4_1_1_17readsubgroup_local_id.xy, (true ? _GLF_IDENTITY(GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizenext_virtual_gidvirtual_gid.xy = GLF_merged2_0_2_51_2_2_45GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizeGLF_merged2_0_1_4_1_1_17readsubgroup_local_id.xy, (_GLF_IDENTITY(GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizenext_virtual_gidvirtual_gid.xy = GLF_merged2_0_2_51_2_2_45GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizeGLF_merged2_0_1_4_1_1_17readsubgroup_local_id.xy, _GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) ^ uvec2(0u, 0u)) | (GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizenext_virtual_gidvirtual_gid.xy = GLF_merged2_0_2_51_2_2_45GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizeGLF_merged2_0_1_4_1_1_17readsubgroup_local_id.xy))) << uvec2(0u, 0u)) : _GLF_FUZZED((++ GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size))));
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y = subgroup_id;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.x = subgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z = GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.x;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0, length(log(1.0)), 0.0), transpose(transpose(mat2x4(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0, length(log(1.0)), 0.0))))), min(float(_GLF_IDENTITY(mat2x4(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0, length(log(1.0)), 0.0), transpose(transpose(mat2x4(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0, length(log(1.0)), 0.0))))), float(_GLF_IDENTITY(mat2x4(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0, length(log(1.0)), 0.0), transpose(transpose(mat2x4(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0, length(log(1.0)), 0.0)))))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0, length(log(1.0)), 0.0), transpose(transpose(mat2x4(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0, length(log(1.0)), 0.0))))), min(float(_GLF_IDENTITY(mat2x4(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0, length(log(1.0)), 0.0), transpose(transpose(mat2x4(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0, length(log(1.0)), 0.0))))), float(_GLF_IDENTITY(mat2x4(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0, length(log(1.0)), 0.0), transpose(transpose(mat2x4(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0, length(log(1.0)), 0.0)))))))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0, length(log(1.0)), 0.0), transpose(transpose(mat2x4(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0, length(log(1.0)), 0.0))))), min(float(_GLF_IDENTITY(mat2x4(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0, length(log(1.0)), 0.0), transpose(transpose(mat2x4(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0, length(log(1.0)), 0.0))))), float(_GLF_IDENTITY(mat2x4(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0, length(log(1.0)), 0.0), transpose(transpose(mat2x4(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0, length(log(1.0)), 0.0)))))))))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0, length(log(1.0)), 0.0), transpose(transpose(mat2x4(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0, length(log(1.0)), 0.0))))), min(float(_GLF_IDENTITY(mat2x4(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0, length(log(1.0)), 0.0), transpose(transpose(mat2x4(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0, length(log(1.0)), 0.0))))), float(_GLF_IDENTITY(mat2x4(injectionSwitch.y, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 0.0, length(log(1.0)), _GLF_IDENTITY(0.0, 0.0 + (0.0))), transpose(transpose(mat2x4(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0, length(log(1.0)), 0.0))))))))))) || false)))) || false)))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.y = subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(5.6, 918.680)) : injectionSwitch)), injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) >> 0), 0)) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) * 1)), int(ivec4(int(0), 1, 1, 1)))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   GLF_merged2_0_2_51_2_2_45GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizeGLF_merged2_0_1_4_1_1_17readsubgroup_local_id.zw.y = GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.y;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) * uvec3(1u, 1u, 1u)).x) | (gl_NumWorkGroups.x))), min(~ (_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (gl_NumWorkGroups.x))), ~ (_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | _GLF_IDENTITY((gl_NumWorkGroups.x), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((gl_NumWorkGroups.x), clamp((gl_NumWorkGroups.x), (gl_NumWorkGroups.x), (gl_NumWorkGroups.x)))), (false ? _GLF_FUZZED(subgroup_size) : ~ (_GLF_IDENTITY((gl_NumWorkGroups.x), clamp((gl_NumWorkGroups.x), (gl_NumWorkGroups.x), (gl_NumWorkGroups.x))))))))))))));
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.x = _GLF_IDENTITY(num_workgroup, _GLF_IDENTITY(uint(uint(num_workgroup)), _GLF_IDENTITY((uint(uint(num_workgroup))) >> 0u, min((uint(uint(num_workgroup))) >> 0u, (uint(uint(num_workgroup))) >> 0u))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x))));
 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.y = workgroup_size;
 if(_GLF_DEAD(false))
  return;
 GLF_merged4_0_1_4_1_1_11_2_1_12_3_1_14readvirtual_gidworkgroup_idworkgroup_size.w = GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_size.y;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           do
            {
             return;
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), (bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) && true)))
      return;
    }
   else
    {
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-89.07)), bool(false))), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizenext_virtual_gidvirtual_gid.xy.y = _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_12_3_1_14readvirtual_gidworkgroup_idworkgroup_size, (GLF_merged4_0_1_4_1_1_11_2_1_12_3_1_14readvirtual_gidworkgroup_idworkgroup_size) ^ uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).w;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(atan(-7.1, 5.7)) : injectionSwitch.y))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
            }
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       do
        {
         for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(2), int(2))) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (-88066 & 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) && true))))
              continue;
             barrier();
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (_GLF_IDENTITY((+ 79074), (0 | 0) | ((+ 79074))) & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                continue;
               barrier();
              }
            }
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             continue;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.w = workgroup_id;
 do
  {
   GLF_merged4_0_1_4_1_1_11_2_1_12_3_1_14readvirtual_gidworkgroup_idworkgroup_size.z = GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.w;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec3(_GLF_IDENTITY(false, true && (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizenext_virtual_gidvirtual_gid.xy.x = GLF_merged4_0_1_4_1_1_11_2_1_12_3_1_14readvirtual_gidworkgroup_idworkgroup_size.z;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   return;
  }
 uint workgroup_base = GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizenext_virtual_gidvirtual_gid.xy.y * _GLF_IDENTITY(GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizenext_virtual_gidvirtual_gid.xy, uvec2(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizenext_virtual_gidvirtual_gid.xy, (GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizenext_virtual_gidvirtual_gid.xy) >> (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)))), 0u), uvec3(1u, 1u, _GLF_IDENTITY(1u, min(1u, 1u))) * (uvec3(_GLF_IDENTITY(GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizenext_virtual_gidvirtual_gid.xy, (GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizenext_virtual_gidvirtual_gid.xy) >> (uvec2(0u, _GLF_IDENTITY(0u, (0u) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))) << _GLF_IDENTITY(uvec2(1u), uvec2(1u)))), 0u))))).x;
 if(_GLF_DEAD(false))
  return;
 GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w = workgroup_base;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint virtual_gid = _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z, 0u | (GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z)) + GLF_merged2_0_2_51_2_2_45GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizeGLF_merged2_0_1_4_1_1_17readsubgroup_local_id.zw.y;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.z = virtual_gid;
  }
 GLF_merged4_0_1_4_1_1_11_2_1_12_3_1_14readvirtual_gidworkgroup_idworkgroup_size.y = GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.z;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizenext_virtual_gidvirtual_gid.w = GLF_merged4_0_1_4_1_1_11_2_1_12_3_1_14readvirtual_gidworkgroup_idworkgroup_size.y;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) / int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       else
        {
        }
      }
     return;
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
  }
 uint next_virtual_gid = _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id, uvec4(0u, 0u, 0u, 0u) + (GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id)).z, (GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z) | (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z, min(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z, GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z)), (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z, min(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z, GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z))) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z, clamp(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z, GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z, GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z)), min(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z, GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id, clamp(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id, GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id, GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id)).z)), (false ? _GLF_FUZZED(105474u) : _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z, min(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id, uvec4(0u, 0u, 0u, 0u) + (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id, clamp(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id, GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id, GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id)))).z, GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z))))), max((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z, clamp(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z, GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z, GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z)), min(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z, GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id, clamp(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id, GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id, GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id)).z)), (false ? _GLF_FUZZED(105474u) : _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z, min(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id, uvec4(0u, 0u, 0u, 0u) + (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id, clamp(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id, GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id, GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id)))).z, GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z, clamp(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z, GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z, GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z)), min(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z, GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id, clamp(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id, GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id, GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id)).z)), (false ? _GLF_FUZZED(105474u) : _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z, min(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id, uvec4(0u, 0u, 0u, 0u) + (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id, clamp(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id, GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id, GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id)))).z, GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z))))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z, clamp(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z, GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z, GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z)), min(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z, GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id, clamp(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id, GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id, GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id)).z)), (false ? _GLF_FUZZED(105474u) : _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z, min(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id, uvec4(0u, 0u, 0u, 0u) + (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id, clamp(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id, GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id, GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id)))).z, GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.w + GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z)))))) << 0u)))))) + ((_GLF_IDENTITY(GLF_merged2_0_2_51_2_2_45GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizeGLF_merged2_0_1_4_1_1_17readsubgroup_local_id.zw.y, (GLF_merged2_0_2_51_2_2_45GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizeGLF_merged2_0_1_4_1_1_17readsubgroup_local_id.zw.y) ^ 0u) + 1) % GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0))), bool(_GLF_IDENTITY(bool(_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0)))), (bool(_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0))))) && true)))); _injected_loop_counter --)
  {
   GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.x = next_virtual_gid;
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.x = GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.x;
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true && (_GLF_DEAD(false)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))) || false)) && true))) && (_GLF_IDENTITY(true && (_GLF_DEAD(false)), ! (! (true && (_GLF_DEAD(false)))))))))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), true)))))));
 if(_GLF_DEAD(false))
  return;
 GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizenext_virtual_gidvirtual_gid.z = GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))) - 0.0), (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 1.0, sin(0.0), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)))), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)))), vec4(0.0, 1.0, 0.0, 0.0))), 0.0, 0.0, 1.0))))))), (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))) * 1.0))), injectionSwitch.y)), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, 0 ^ (0))), _GLF_IDENTITY(int(0), (int(0)) ^ (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), (_GLF_IDENTITY(int(8), int(8))) >> 0)))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           return;
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))), true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))), true, false), false)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))), true, false), false)), true))))), bool(bool(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))), true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))), true, false), false)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))), true, false), false)), true))))))))))
        {
        }
       else
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          return;
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)))))));
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))) && true)))))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       do
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), _GLF_IDENTITY(true, (true) && true) && ((false))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))))))
          break;
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
           break;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      continue;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) | (~ (1))))), (_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) | (~ (1))))), ! (! (_injected_loop_counter < _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) | (~ (1))))))))) && true)); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 0 + (1))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), min(int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, min(5, 5))))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 uint read = atomicLoad(_GLF_IDENTITY(buf[GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizenext_virtual_gidvirtual_gid.w], clamp(buf[GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizenext_virtual_gidvirtual_gid.w], buf[GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizenext_virtual_gidvirtual_gid.w], buf[GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizenext_virtual_gidvirtual_gid.w])), 4, 64, 0);
 GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.y = read;
 GLF_merged4_0_1_4_1_1_11_2_1_12_3_1_14readvirtual_gidworkgroup_idworkgroup_size.x = _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.y, (GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_14next_virtual_gidreadvirtual_gidworkgroup_base.y) * uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).y)));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 1)), _GLF_IDENTITY((int(ivec2(1, 1))), clamp((int(ivec2(1, _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) + ivec2(0, 0))))))), (int(ivec2(1, 1))), (int(ivec2(1, 1))))) / 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   GLF_merged2_0_2_51_2_2_45GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizeGLF_merged2_0_1_4_1_1_17readsubgroup_local_id.zw.x = _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_11_2_1_12_3_1_14readvirtual_gidworkgroup_idworkgroup_size, max(GLF_merged4_0_1_4_1_1_11_2_1_12_3_1_14readvirtual_gidworkgroup_idworkgroup_size, GLF_merged4_0_1_4_1_1_11_2_1_12_3_1_14readvirtual_gidworkgroup_idworkgroup_size)).x;
  }
 atomicStore(buf[GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizenext_virtual_gidvirtual_gid.z], uint(1), 4, 64, 4);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
    return;
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
            return;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 ^ 0), clamp((_GLF_IDENTITY(0 ^ 0, (_GLF_IDENTITY(0 ^ 0, (0 ^ 0) << 0)) ^ 0)), (0 ^ 0), (0 ^ 0)))); _injected_loop_counter --)
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), false || (! (injectionSwitch.x < injectionSwitch.y))))))) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) && true) || false)))))
              barrier();
            }
           return;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
            }
           if(GLF_merged2_0_2_51_2_2_45GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizeGLF_merged2_0_1_4_1_1_17readsubgroup_local_id.zw.y + 1 < GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_12next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_id.z)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) + vec2(0.0, 0.0)).y))))
              {
               do
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     return;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), (! (false)) && true)) && true))), (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if(_GLF_DEAD(false))
                    break;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || false))))
                  return;
                 return;
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true)))
              return;
             atomicStore(checker[GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizenext_virtual_gidvirtual_gid.w], GLF_merged2_0_2_51_2_2_45GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizeGLF_merged2_0_1_4_1_1_17readsubgroup_local_id.zw.x, _GLF_IDENTITY(4, (4) | int(_GLF_ZERO(0.0, injectionSwitch.x))), 64, 4);
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true)))))
              {
               subgroupAll(false);
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)), (bool(bvec2(_GLF_IDENTITY(false, (false) || false), true))) || false))))
                  return;
                }
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   return;
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       barrier();
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (! (! (false))), false || (_GLF_IDENTITY(! (! (! (false))), false || (! (! (! (false))))))))))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 barrier();
                }
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, true)))), (bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, true))))) && true))))
                    barrier();
                   return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, false)))))
                  return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     barrier();
                    }
                  }
                 barrier();
                }
               if(_GLF_DEAD(false))
                return;
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                        break;
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), false)))), false || (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), false))))))))
                  return;
                 do
                  {
                   for(int _injected_loop_counter = (0 & 77457); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((1 & 1), ((1 & 1)) ^ 0)); _injected_loop_counter ++)
                    {
                     return;
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x < injectionSwitch.y), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3((injectionSwitch.x < injectionSwitch.y), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false || (bool(_GLF_IDENTITY(bvec3((injectionSwitch.x < injectionSwitch.y), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3((injectionSwitch.x < injectionSwitch.y), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), (! ((injectionSwitch.x < injectionSwitch.y))) && true)))))))))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
               barrier();
              }
             for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --))) / 1))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bvec2(bool(bvec3(false, false, true)), true))), bool(bvec3(bool(bvec3(false, false, true)), true, true)))), false)))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bvec2(bool(bvec3(false, false, true)), true))), bool(bvec3(bool(bvec3(false, false, true)), true, true)))), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bvec2(bool(bvec3(false, false, true)), true))), bool(bvec3(bool(bvec3(false, false, true)), true, true)))))), false))))))), (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bvec2(bool(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, true))), bvec3(bvec4(bvec3(bvec3(bvec3(false, false, true))), true))))), true))), bool(bvec3(bool(bvec3(false, false, true)), _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, false || (true))))), true)))), false)), _GLF_IDENTITY(true, bool(bvec3(true, false, false))) && (bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bvec2(bool(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, true))), bvec3(bvec4(bvec3(bvec3(bvec3(false, false, true))), true))))), true))), bool(bvec3(bool(bvec3(false, false, true)), _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, false || (true))))), true)))), false)))), (bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bvec2(bool(bvec3(false, false, true)), true))), bool(bvec3(bool(bvec3(false, false, true)), true, true)))), false))) && true))))))) || false))))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 return;
                }
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                  }
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) && true)))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) && true)))), (bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) && true))))) || false))), bool(bool(bool(bool(_GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) && true)))), (bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) && true))))) || false))))))))))))
                return;
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                return;
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                return;
               barrier();
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), false)))) || false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 return;
                }
              }
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), _GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))))))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     return;
                    }
                   else
                    {
                    }
                  }
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
                      return;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(false))
                            return;
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(false))
                          return;
                         barrier();
                        }
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            return;
                           do
                            {
                             if(_GLF_DEAD(false))
                              break;
                             return;
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
                           if(_GLF_DEAD(false))
                            return;
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), vec2(mat4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, 1.0, tan(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, tan(0.0)))).x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             return;
                            }
                           else
                            {
                            }
                          }
                        }
                       else
                        {
                         return;
                        }
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     barrier();
                    }
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   barrier();
                  }
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       barrier();
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * cos(vec2(0.0, 0.0))).x > injectionSwitch.y))))
                      return;
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))) - 0.0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (true ? _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED(73205))), (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) - (1 ^ 1))), int(6)), (true ? _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED(73205)))) * 1))); _injected_loop_counter --)
                      {
                       for(int _injected_loop_counter = (0 & 80091); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), ! (! (_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))))), true, false, true)))); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                         if(_GLF_DEAD(false))
                          continue;
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        break;
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)) > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) + 0.0))))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))))))))
                    return;
                   atomicStore(buf[GLF_merged3_0_2_51_2_1_16_3_1_11GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizenext_virtual_gidvirtual_gid.w], GLF_merged2_0_2_51_2_2_45GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizeGLF_merged2_0_1_4_1_1_17readsubgroup_local_id.zw.x, 4, _GLF_IDENTITY(64, (true ? _GLF_IDENTITY(64, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(64, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), max(_GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(0, (0) | (0)))) | (64))), ((_GLF_IDENTITY(64, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), max(_GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(0, (0) | (0)))) | (64)))) - 0))) : _GLF_FUZZED(-95242))), 4);
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          break;
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                         if(_GLF_DEAD(false))
                          break;
                        }
                       if(_GLF_DEAD(false))
                        continue;
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) - 0), _GLF_IDENTITY(int(2), (int(2)) | 0)), _GLF_IDENTITY((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (_GLF_IDENTITY(int(2), int(ivec3(int(2), 1, 0)))))), _GLF_IDENTITY((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), int(2)), (0 >> _GLF_IDENTITY(int(2), int(2))) / 1)), clamp((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), int(2)), (0 >> _GLF_IDENTITY(int(2), int(2))) / 1)), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), int(2)), (0 >> _GLF_IDENTITY(int(2), int(2))) / 1)), _GLF_IDENTITY((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), int(2)), (0 >> _GLF_IDENTITY(int(2), int(2))) / 1)), (_GLF_IDENTITY((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), int(2)), (0 >> _GLF_IDENTITY(int(2), int(2))) / 1)), ~ (~ _GLF_IDENTITY(((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), int(2)), (0 >> _GLF_IDENTITY(int(2), int(2))) / 1))), (false ? _GLF_FUZZED(_injected_loop_counter) : ((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), int(2)), (0 >> _GLF_IDENTITY(int(2), int(2))) / 1)))))))) >> 0))) >> 0)) ^ 0, _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), int(2)), (0 >> _GLF_IDENTITY(int(2), int(2))) / 1), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED((- -51229)) : 2)), (_GLF_IDENTITY(2, _GLF_IDENTITY((false ? _GLF_FUZZED((- -51229)) : 2), clamp((false ? _GLF_FUZZED((- -51229)) : 2), _GLF_IDENTITY((false ? _GLF_FUZZED((- -51229)) : 2), clamp((false ? _GLF_FUZZED((- -51229)) : 2), (false ? _GLF_FUZZED((- -51229)) : 2), (false ? _GLF_FUZZED((- -51229)) : 2))), (false ? _GLF_FUZZED((- -51229)) : 2))))) >> _GLF_IDENTITY(0, 0 ^ (0))), 2))), ~ (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED((- -51229)) : 2)), (_GLF_IDENTITY(2, _GLF_IDENTITY((false ? _GLF_FUZZED((- -51229)) : 2), clamp((false ? _GLF_FUZZED((- -51229)) : 2), _GLF_IDENTITY((false ? _GLF_FUZZED((- -51229)) : 2), clamp((false ? _GLF_FUZZED((- -51229)) : 2), (false ? _GLF_FUZZED((- -51229)) : 2), (false ? _GLF_FUZZED((- -51229)) : 2))), (false ? _GLF_FUZZED((- -51229)) : 2))))) >> _GLF_IDENTITY(0, 0 ^ (0))), 2))), max(int(_GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED((- -51229)) : 2)), (_GLF_IDENTITY(2, _GLF_IDENTITY((false ? _GLF_FUZZED((- -51229)) : 2), clamp((false ? _GLF_FUZZED((- -51229)) : 2), _GLF_IDENTITY((false ? _GLF_FUZZED((- -51229)) : 2), clamp((false ? _GLF_FUZZED((- -51229)) : 2), (false ? _GLF_FUZZED((- -51229)) : 2), (false ? _GLF_FUZZED((- -51229)) : 2))), (false ? _GLF_FUZZED((- -51229)) : 2))))) >> _GLF_IDENTITY(0, 0 ^ (0))), 2))), int(_GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED((- -51229)) : 2)), (_GLF_IDENTITY(2, _GLF_IDENTITY((false ? _GLF_FUZZED((- -51229)) : 2), clamp((false ? _GLF_FUZZED((- -51229)) : 2), _GLF_IDENTITY((false ? _GLF_FUZZED((- -51229)) : 2), clamp((false ? _GLF_FUZZED((- -51229)) : 2), (false ? _GLF_FUZZED((- -51229)) : 2), (false ? _GLF_FUZZED((- -51229)) : 2))), (false ? _GLF_FUZZED((- -51229)) : 2))))) >> _GLF_IDENTITY(0, 0 ^ (0))), 2))))))))), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) ^ 0)) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), int(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(findMSB(_injected_loop_counter)) : _GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)) | 0, (_GLF_IDENTITY((int(2)) | 0, 1 * ((int(2)) | 0))) * 1))))), 1, 0)))) - (0 << _GLF_IDENTITY(int(7), int(7))))) / 1)) >> 0)) ^ 0) * 1, (false ? _GLF_FUZZED(-36641) : _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), int(2)), (0 >> _GLF_IDENTITY(int(2), int(2))) / 1), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, 1 * (0)) >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED((- -51229)) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_FUZZED((- -51229)) : 2))) >> 0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED((- -51229)) : 2)), (_GLF_IDENTITY(2, _GLF_IDENTITY((false ? _GLF_FUZZED((- -51229)) : 2), int(ivec4((false ? _GLF_FUZZED((- -51229)) : 2), 1, 1, 0))))) >> 0) : _GLF_FUZZED((~ -47021)))), 2)))), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) ^ 0)) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), int(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(findMSB(_injected_loop_counter)) : _GLF_IDENTITY(int(2), (int(2)) | 0)))), 1, 0)))) - (0 << _GLF_IDENTITY(int(7), int(7))))) / 1)) >> 0, ((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED((- -51229)) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_FUZZED((- -51229)) : 2))) >> 0), 2)))), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) ^ 0)) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) << 0))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(findMSB(_injected_loop_counter)) : _GLF_IDENTITY(int(2), (int(2)) | 0)))), _GLF_IDENTITY(1, (1) / 1), 0), (ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(findMSB(_injected_loop_counter)), 0 + (_GLF_IDENTITY(_GLF_FUZZED(findMSB(_injected_loop_counter)), (_GLF_FUZZED(findMSB(_injected_loop_counter))) - (67927 & 0)))) : _GLF_IDENTITY(int(2), (int(2)) | 0), (false ? _GLF_FUZZED(_injected_loop_counter) : false ? _GLF_IDENTITY(_GLF_FUZZED(findMSB(_injected_loop_counter)), 0 + (_GLF_IDENTITY(_GLF_FUZZED(findMSB(_injected_loop_counter)), (_GLF_FUZZED(findMSB(_injected_loop_counter))) - (67927 & 0)))) : _GLF_IDENTITY(int(2), (int(2)) | 0)))))), 1, 0)) ^ ivec3(0, 0, 0))))) - _GLF_IDENTITY((0 << _GLF_IDENTITY(int(7), int(7))), max(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(7), int(7))), int(int((0 << _GLF_IDENTITY(int(7), int(7)))))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(7), int(7))), max((0 << _GLF_IDENTITY(int(7), int(7))), (0 << _GLF_IDENTITY(int(7), int(7))))))))) / 1)) >> 0) + 0))), max((_GLF_IDENTITY(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), int(2)), (0 >> _GLF_IDENTITY(int(2), int(2))) / 1), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, 1 * (0)) >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED((- -51229)) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_FUZZED((- -51229)) : 2))) >> 0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED((- -51229)) : 2)), (_GLF_IDENTITY(2, _GLF_IDENTITY((false ? _GLF_FUZZED((- -51229)) : 2), int(ivec4((false ? _GLF_FUZZED((- -51229)) : 2), 1, 1, 0))))) >> 0) : _GLF_FUZZED((~ -47021)))), 2)))), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) ^ 0)) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), int(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(findMSB(_injected_loop_counter)) : _GLF_IDENTITY(int(2), (int(2)) | 0)))), 1, 0)))) - (0 << _GLF_IDENTITY(int(7), int(7))))) / 1)) >> 0, ((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED((- -51229)) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_FUZZED((- -51229)) : 2))) >> 0), 2)))), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) ^ 0)) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) << 0))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(findMSB(_injected_loop_counter)) : _GLF_IDENTITY(int(2), (int(2)) | 0)))), _GLF_IDENTITY(1, (1) / 1), 0), (ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(findMSB(_injected_loop_counter)), 0 + (_GLF_IDENTITY(_GLF_FUZZED(findMSB(_injected_loop_counter)), (_GLF_FUZZED(findMSB(_injected_loop_counter))) - (67927 & 0)))) : _GLF_IDENTITY(int(2), (int(2)) | 0), (false ? _GLF_FUZZED(_injected_loop_counter) : false ? _GLF_IDENTITY(_GLF_FUZZED(findMSB(_injected_loop_counter)), 0 + (_GLF_IDENTITY(_GLF_FUZZED(findMSB(_injected_loop_counter)), (_GLF_FUZZED(findMSB(_injected_loop_counter))) - (67927 & 0)))) : _GLF_IDENTITY(int(2), (int(2)) | 0)))))), 1, 0)) ^ ivec3(0, 0, 0))))) - _GLF_IDENTITY((0 << _GLF_IDENTITY(int(7), int(7))), max(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(7), int(7))), int(int((0 << _GLF_IDENTITY(int(7), int(7)))))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(7), int(7))), max((0 << _GLF_IDENTITY(int(7), int(7))), (0 << _GLF_IDENTITY(int(7), int(7))))))))) / 1)) >> 0) + 0))), (_GLF_IDENTITY(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), int(2)), (0 >> _GLF_IDENTITY(int(2), int(2))) / 1), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, 1 * (0)) >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED((- -51229)) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_FUZZED((- -51229)) : 2))) >> 0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED((- -51229)) : 2)), (_GLF_IDENTITY(2, _GLF_IDENTITY((false ? _GLF_FUZZED((- -51229)) : 2), int(ivec4((false ? _GLF_FUZZED((- -51229)) : 2), 1, 1, 0))))) >> 0) : _GLF_FUZZED((~ -47021)))), 2)))), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) ^ 0)) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), int(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(findMSB(_injected_loop_counter)) : _GLF_IDENTITY(int(2), (int(2)) | 0)))), 1, 0)))) - (0 << _GLF_IDENTITY(int(7), int(7))))) / 1)) >> 0, ((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED((- -51229)) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_FUZZED((- -51229)) : 2))) >> 0), 2)))), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) ^ 0)) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) << 0))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(findMSB(_injected_loop_counter)) : _GLF_IDENTITY(int(2), (int(2)) | 0)))), _GLF_IDENTITY(1, (1) / 1), 0), (ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(findMSB(_injected_loop_counter)), 0 + (_GLF_IDENTITY(_GLF_FUZZED(findMSB(_injected_loop_counter)), (_GLF_FUZZED(findMSB(_injected_loop_counter))) - (67927 & 0)))) : _GLF_IDENTITY(int(2), (int(2)) | 0), (false ? _GLF_FUZZED(_injected_loop_counter) : false ? _GLF_IDENTITY(_GLF_FUZZED(findMSB(_injected_loop_counter)), 0 + (_GLF_IDENTITY(_GLF_FUZZED(findMSB(_injected_loop_counter)), (_GLF_FUZZED(findMSB(_injected_loop_counter))) - (67927 & 0)))) : _GLF_IDENTITY(int(2), (int(2)) | 0)))))), 1, 0)) ^ ivec3(0, 0, 0))))) - _GLF_IDENTITY((0 << _GLF_IDENTITY(int(7), int(7))), max(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(7), int(7))), int(int((0 << _GLF_IDENTITY(int(7), int(7)))))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(7), int(7))), max((0 << _GLF_IDENTITY(int(7), int(7))), (0 << _GLF_IDENTITY(int(7), int(7))))))))) / 1)) >> 0) + 0))))) ^ 0), (((_GLF_IDENTITY(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), int(2)), (0 >> _GLF_IDENTITY(int(2), int(2))) / 1), _GLF_IDENTITY((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED((- -51229)) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_FUZZED((- -51229)) : 2))) >> 0), 2)))), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(_GLF_IDENTITY(2, 0 ^ (2))), (_GLF_IDENTITY(int(2), (int(2)) ^ 0)) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) | 0)), int(2)), int(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(findMSB(_injected_loop_counter)) : _GLF_IDENTITY(int(2), (int(2)) | 0)))), 1, 0)))) - (0 << _GLF_IDENTITY(int(7), int(7))))) / 1)) >> 0, ((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED((- -51229)) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_FUZZED((- -51229)) : 2))) >> 0), 2)))), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) ^ 0)) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) << 0))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(findMSB(_injected_loop_counter)) : _GLF_IDENTITY(int(2), (int(2)) | 0)))), 1, 0), (ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(findMSB(_injected_loop_counter)) : _GLF_IDENTITY(int(2), (int(2)) | 0)))), _GLF_IDENTITY(1, ~ (~ (1))), 0)) ^ ivec3(0, 0, 0))))) - (0 << _GLF_IDENTITY(int(7), int(7))))) / 1)) >> 0) + 0))) ^ 0)) | (_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), 0 ^ (_GLF_IDENTITY(int(2), int(2)))), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), int(ivec4(_GLF_IDENTITY(int(2), int(2)), 1, (1 ^ 0), 1))), _GLF_IDENTITY(int(2), int(2)))), _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(2), int(2))), ((0 >> _GLF_IDENTITY(int(2), int(2)))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))) / 1), _GLF_IDENTITY((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(_GLF_IDENTITY(2, _GLF_IDENTITY((false ? _GLF_FUZZED((- -51229)) : 2), clamp((false ? _GLF_FUZZED((- -51229)) : 2), (false ? _GLF_FUZZED((- -51229)) : 2), (false ? _GLF_FUZZED((- -51229)) : 2)))), (_GLF_IDENTITY(2, (false ? _GLF_FUZZED((- -51229)) : 2))) >> 0), 2)))), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) ^ 0)) << 0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), int(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(findMSB(_injected_loop_counter)) : _GLF_IDENTITY(int(2), (int(2)) | 0)))), 1, 0)))), max((_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), int(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(findMSB(_injected_loop_counter)) : _GLF_IDENTITY(int(2), (int(2)) | 0)))), 1, 0)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), int(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(findMSB(_injected_loop_counter)) : _GLF_IDENTITY(int(2), (int(2)) | 0)))), 1, 0)))), min((_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), int(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(findMSB(_injected_loop_counter)) : _GLF_IDENTITY(int(2), (int(2)) | 0)))), 1, 0)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), int(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(findMSB(_injected_loop_counter)) : _GLF_IDENTITY(int(2), (int(2)) | 0)))), 1, 0)))), ((_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), int(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(findMSB(_injected_loop_counter)) : _GLF_IDENTITY(int(2), (int(2)) | 0)))), 1, 0))))) ^ 0))))) - (0 << _GLF_IDENTITY(int(7), int(7))))) / 1)) >> 0, ((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED((- -51229)) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_FUZZED((- -51229)) : 2))) >> 0), 2)))), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), _GLF_IDENTITY((int(2)), max((int(2)), _GLF_IDENTITY((int(2)), ~ (~ ((int(2))))))) ^ 0)) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) << 0))), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(findMSB(_injected_loop_counter)) : _GLF_IDENTITY(int(2), (int(2)) | 0)))), 1, 0), (ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(findMSB(_injected_loop_counter)) : _GLF_IDENTITY(int(2), (int(2)) | 0)))), 1, 0)) / ivec3(1, 1, 1)), (ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(findMSB(_injected_loop_counter)) : _GLF_IDENTITY(int(2), (int(2)) | 0)))), 1, 0)) ^ ivec3(0, 0, 0))))) - (0 << _GLF_IDENTITY(int(7), int(7))))) / 1)) >> 0) + 0))) ^ 0), 1 * (((_GLF_IDENTITY(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), int(2)), (0 >> _GLF_IDENTITY(int(2), int(2))) / 1), _GLF_IDENTITY((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED((- -51229)) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_FUZZED((- -51229)) : 2))) >> 0), 2)))), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) ^ 0)) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), int(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(findMSB(_injected_loop_counter)) : _GLF_IDENTITY(int(2), (int(2)) | 0)))), 1, 0)))) - (0 << _GLF_IDENTITY(int(7), int(7)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) ^ 0)) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), int(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(findMSB(_injected_loop_counter)) : _GLF_IDENTITY(int(2), (int(2)) | 0)))), 1, 0)))) - (0 << _GLF_IDENTITY(int(7), int(7)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) ^ 0)) << 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), int(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(findMSB(_injected_loop_counter)) : _GLF_IDENTITY(int(2), (int(2)) | 0)))), 1, 0)))) - (0 << _GLF_IDENTITY(int(7), int(7))))) | 0)) << 0)) / _GLF_IDENTITY(1, 0 | (1)))) >> 0, ((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED((- -51229)) : 2)), (_GLF_IDENTITY(2, (false ? _GLF_FUZZED((- -51229)) : 2))) >> 0), 2)))), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) ^ 0)) << 0)), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) ^ 0)) << 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) << 0))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(findMSB(_injected_loop_counter)) : _GLF_IDENTITY(int(2), (int(2)) | 0)))), 1, 0), (ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(findMSB(_injected_loop_counter)) : _GLF_IDENTITY(int(2), (int(2)) | 0)))), 1, 0)) ^ ivec3(0, 0, 0)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) << 0))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(findMSB(_injected_loop_counter)) : _GLF_IDENTITY(int(2), (int(2)) | 0)))), 1, 0), (ivec3(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(false ? _GLF_FUZZED(findMSB(_injected_loop_counter)) : _GLF_IDENTITY(int(2), (int(2)) | 0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : false ? _GLF_FUZZED(findMSB(_injected_loop_counter)) : _GLF_IDENTITY(int(2), (int(2)) | 0)))))), 1, 0)) ^ ivec3(_GLF_IDENTITY(0, max(0, 0)), 0, 0)))))))) - (0 << _GLF_IDENTITY(int(7), int(7))))) / 1)) >> 0) + 0))) ^ 0))))) * 1)))))); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
                          break;
                         subgroupAll(true);
                         if(_GLF_DEAD(false))
                          break;
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  return;
                }
              }
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   else
    {
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
