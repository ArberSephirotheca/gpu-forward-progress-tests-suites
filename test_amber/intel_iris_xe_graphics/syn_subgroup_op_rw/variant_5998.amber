#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_28 {
 vec4 _f0;
 vec4 _f1;
} ;

struct _GLF_struct_29 {
 vec2 _f0;
 bvec3 _f1;
 _GLF_struct_28 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_26 {
 mat4x2 _f0;
 mat2 _f1;
 mat2x3 _f2;
 bool _f3;
} ;

struct _GLF_struct_25 {
 ivec3 _f0;
 bvec4 _f1;
 mat3 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_27 {
 bvec4 _f0;
 _GLF_struct_25 _f1;
 bvec2 _f2;
 _GLF_struct_26 _f3;
 vec3 _f4;
} ;

struct _GLF_struct_30 {
 uint virtual_gid;
 mat3x2 _f0;
 _GLF_struct_27 _f1;
 _GLF_struct_29 _f2;
 ivec4 _f3;
} ;

struct _GLF_struct_22 {
 bvec3 _f0;
} ;

struct _GLF_struct_21 {
 bool _f0;
 uvec2 _f1;
 uvec3 _f2;
 mat3x4 _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_20 {
 mat2x3 _f0;
 mat4 _f1;
 vec2 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_23 {
 _GLF_struct_20 _f0;
 mat3x4 _f1;
 _GLF_struct_21 _f2;
 uvec4 _f3;
 _GLF_struct_22 _f4;
 uint _f5;
 mat3 _f6;
} ;

struct _GLF_struct_18 {
 uvec3 _f0;
 mat3x2 _f1;
 mat3 _f2;
 uvec3 _f3;
 bvec4 _f4;
 mat3x4 _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_17 {
 mat2x3 _f0;
 bool _f1;
 mat2x3 _f2;
 mat4 _f3;
 float _f4;
} ;

struct _GLF_struct_16 {
 mat2x3 _f0;
 ivec4 _f1;
 mat4x2 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_15 {
 mat4x3 _f0;
 ivec4 _f1;
 mat2 _f2;
 uvec4 _f3;
 bvec4 _f4;
 mat3x4 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_14 {
 mat3x2 _f0;
 ivec2 _f1;
 mat2x3 _f2;
 mat3x2 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_19 {
 _GLF_struct_14 _f0;
 _GLF_struct_15 _f1;
 _GLF_struct_16 _f2;
 _GLF_struct_17 _f3;
 _GLF_struct_18 _f4;
 bool _f5;
 mat2x4 _f6;
} ;

struct _GLF_struct_12 {
 vec4 _f0;
 uvec3 _f1;
 bvec3 _f2;
 uint _f3;
} ;

struct _GLF_struct_11 {
 ivec4 _f0;
 mat3x2 _f1;
 int _f2;
 mat4 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_10 {
 uvec2 _f0;
 uvec4 _f1;
 bvec4 _f2;
 float _f3;
} ;

struct _GLF_struct_13 {
 _GLF_struct_10 _f0;
 mat3 _f1;
 int _f2;
 uvec4 _f3;
 _GLF_struct_11 _f4;
 _GLF_struct_12 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_8 {
 mat2x4 _f0;
 vec4 _f1;
 uvec3 _f2;
 vec2 _f3;
 bvec2 _f4;
 float _f5;
} ;

struct _GLF_struct_7 {
 ivec3 _f0;
 ivec2 _f1;
 uint _f2;
} ;

struct _GLF_struct_6 {
 ivec4 _f0;
 mat4x2 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_5 {
 vec2 _f0;
} ;

struct _GLF_struct_9 {
 vec2 _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_6 _f2;
 mat2 _f3;
 _GLF_struct_7 _f4;
 _GLF_struct_8 _f5;
} ;

struct _GLF_struct_24 {
 _GLF_struct_9 _f0;
 uint workgroup_size;
 int _f1;
 mat4x3 _f2;
 _GLF_struct_13 _f3;
 _GLF_struct_19 _f4;
 _GLF_struct_23 _f5;
} ;

struct _GLF_struct_2 {
 ivec3 _f0;
 uint workgroup_id;
 ivec2 _f1;
 bool _f2;
} ;

struct _GLF_struct_3 {
 _GLF_struct_2 _f0;
} ;

struct _GLF_struct_0 {
 uvec3 _f0;
 mat2x4 _f1;
 mat4x3 _f2;
 uvec4 _f3;
 ivec3 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_1 {
 ivec3 _f0;
 bvec4 _f1;
 _GLF_struct_0 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_4 {
 int _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_3 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id;
 uvec4 GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnext_virtual_gidnum_workgroup;
 uvec2 GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnext_virtual_gidnum_workgroup.xy = GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid;
  }
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w = subgroup_id;
  }
 else
  {
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) | (int(7)))))); _injected_loop_counter --)
    {
     GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y = subgroup_local_id;
    }
  }
 else
  {
  }
 do
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnext_virtual_gidnum_workgroup.xy.x = GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.y;
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnext_virtual_gidnum_workgroup.w = num_workgroup;
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.y = GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnext_virtual_gidnum_workgroup.w;
 _GLF_struct_24 _GLF_struct_replacement_24 = _GLF_struct_24(_GLF_struct_9(vec2(1.0), _GLF_struct_5(vec2(1.0)), _GLF_struct_6(ivec4(1), mat4x2(1.0), ivec4(1)), mat2(1.0), _GLF_struct_7(ivec3(1), ivec2(1), 1u), _GLF_struct_8(mat2x4(1.0), vec4(1.0), uvec3(1u), vec2(1.0), bvec2(true), 1.0)), gl_WorkGroupSize.x, 1, mat4x3(1.0), _GLF_struct_13(_GLF_struct_10(uvec2(1u), uvec4(1u), bvec4(true), 1.0), mat3(1.0), 1, uvec4(1u), _GLF_struct_11(ivec4(1), mat3x2(1.0), 1, mat4(1.0), mat4x3(1.0)), _GLF_struct_12(vec4(1.0), uvec3(1u), bvec3(true), 1u), mat2(1.0)), _GLF_struct_19(_GLF_struct_14(mat3x2(1.0), ivec2(1), mat2x3(1.0), mat3x2(1.0), bvec4(true)), _GLF_struct_15(mat4x3(1.0), ivec4(1), mat2(1.0), uvec4(1u), bvec4(true), mat3x4(1.0), mat2x3(1.0)), _GLF_struct_16(mat2x3(1.0), ivec4(1), mat4x2(1.0), uvec4(1u)), _GLF_struct_17(mat2x3(1.0), true, mat2x3(1.0), mat4(1.0), 1.0), _GLF_struct_18(uvec3(1u), mat3x2(1.0), mat3(1.0), uvec3(1u), bvec4(true), mat3x4(1.0), bvec4(true)), true, mat2x4(1.0)), _GLF_struct_23(_GLF_struct_20(mat2x3(1.0), mat4(1.0), vec2(1.0), bvec2(true)), mat3x4(1.0), _GLF_struct_21(true, uvec2(1u), uvec3(1u), mat3x4(1.0), uvec3(1u)), uvec4(1u), _GLF_struct_22(bvec3(true)), 1u, mat3(1.0)));
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(1, _GLF_struct_1(ivec3(1), bvec4(true), _GLF_struct_0(uvec3(1u), mat2x4(1.0), mat4x3(1.0), uvec4(1u), ivec3(1), bvec4(true)), ivec3(1)), _GLF_struct_3(_GLF_struct_2(ivec3(1), gl_WorkGroupID.x, ivec2(1), true)));
 uint workgroup_base = _GLF_struct_replacement_24.workgroup_size * _GLF_struct_replacement_4._f2._f0.workgroup_id;
 _GLF_struct_30 _GLF_struct_replacement_30 = _GLF_struct_30(workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w * subgroup_size + GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnext_virtual_gidnum_workgroup.xy.x, mat3x2(1.0), _GLF_struct_27(bvec4(true), _GLF_struct_25(ivec3(1), bvec4(true), mat3(1.0), mat2(1.0)), bvec2(true), _GLF_struct_26(mat4x2(1.0), mat2(1.0), mat2x3(1.0), true), vec3(1.0)), _GLF_struct_29(vec2(1.0), bvec3(true), _GLF_struct_28(vec4(1.0), vec4(1.0)), vec2(1.0)), ivec4(1));
 GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnext_virtual_gidnum_workgroup.xy.y = _GLF_struct_replacement_30.virtual_gid;
 uint next_virtual_gid = workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w * subgroup_size + ((GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnext_virtual_gidnum_workgroup.xy.x + 1) % subgroup_size);
 GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.x = next_virtual_gid;
 GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnext_virtual_gidnum_workgroup.z = GLF_merged2_0_1_16_1_1_17next_virtual_gidsubgroup_local_id.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.x = GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnext_virtual_gidnum_workgroup.z;
  }
 uint read = atomicLoad(buf[GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnext_virtual_gidnum_workgroup.xy.y], 4, 64, 0);
 do
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.z = read;
                    }
                  }
                }
               else
                {
                }
              }
            }
          }
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         do
          {
           atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.x], uint(1), 4, 64, 4);
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
 do
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = (0 ^ ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)); _injected_loop_counter --)
                {
                 do
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) ^ 0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) * 1)))); _injected_loop_counter ++)
                    {
                     if(GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnext_virtual_gidnum_workgroup.xy.x + 1 < subgroup_size)
                      {
                       do
                        {
                         atomicStore(checker[GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnext_virtual_gidnum_workgroup.xy.y], GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.z, 4, 64, 4);
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       do
                        {
                         subgroupAll(false);
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     else
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           atomicStore(buf[GLF_merged3_0_2_53_2_1_16_3_1_13GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnext_virtual_gidnum_workgroup.xy.y], GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.z, 4, 64, 4);
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         subgroupAll(true);
                        }
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
                }
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(false));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
