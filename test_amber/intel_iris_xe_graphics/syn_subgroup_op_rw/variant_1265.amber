#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), bool(bvec3(! (_GLF_IDENTITY(false, false || (false))), true, true)))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   else
    {
     barrier();
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY((1) | _GLF_IDENTITY((1), max((1), (1))), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY((1) | (1), _GLF_IDENTITY(int(int((1) | (1))), _GLF_IDENTITY((int(int((1) | (1)))) | (int(int(_GLF_IDENTITY((1) | (1), 0 ^ ((1) | (1)))))), _GLF_IDENTITY(int(ivec4((int(int((1) | (1)))) | (int(int(_GLF_IDENTITY((1) | (1), 0 ^ ((1) | (1)))))), 1, (0 << _GLF_IDENTITY(int(7), int(7))), (1 | 0))), (int(ivec4((int(int((1) | (1)))) | (int(int(_GLF_IDENTITY((1) | (1), 0 ^ ((1) | (1)))))), 1, (0 << _GLF_IDENTITY(int(7), int(7))), (1 | 0)))) | (int(ivec4((int(int((1) | (1)))) | (int(int(_GLF_IDENTITY((1) | (1), 0 ^ ((1) | (1)))))), 1, (0 << _GLF_IDENTITY(int(7), int(7))), (1 | 0)))))))), 0, 0)), 0 | (int(ivec3(_GLF_IDENTITY((1) | (1), _GLF_IDENTITY(int(int((1) | (1))), (int(_GLF_IDENTITY(int((1) | (1)), _GLF_IDENTITY((int((1) | (1))) | (int((1) | (1))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((int((1) | (1))) | (int((1) | (1))), min(_GLF_IDENTITY((int((1) | (1))) | (int((1) | (1))), min((int((1) | (1))) | (int((1) | (1))), (int((1) | (1))) | (int((1) | (1))))), (int((1) | (1))) | (int((1) | (1))))), 1), ivec2(0, 0) | (ivec2(_GLF_IDENTITY((int((1) | (1))) | (int((1) | (1))), min(_GLF_IDENTITY((int((1) | (1))) | (int((1) | (1))), min((int((1) | (1))) | (int((1) | (1))), (int((1) | (1))) | (int((1) | (1))))), (int((1) | (1))) | (int((1) | (1))))), 1)))), clamp(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((int((1) | (1))) | (int((1) | (1))), min(_GLF_IDENTITY((int((1) | (1))) | (int((1) | (1))), min((int((1) | (1))) | (int((1) | (1))), (int((1) | (1))) | (int((1) | (1))))), (int((1) | (1))) | (int((1) | (1))))), 1), ivec2(0, 0) | (ivec2(_GLF_IDENTITY((int((1) | (1))) | (int((1) | (1))), min(_GLF_IDENTITY((int((1) | (1))) | (int((1) | (1))), min((int((1) | (1))) | (int((1) | (1))), (int((1) | (1))) | (int((1) | (1))))), (int((1) | (1))) | (int((1) | (1))))), 1)))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((int((1) | (1))) | (int((1) | (1))), min(_GLF_IDENTITY((int((1) | (1))) | (int((1) | (1))), min((int((1) | (1))) | (int((1) | (1))), (int((1) | (1))) | (int((1) | (1))))), (int((1) | (1))) | (int((1) | (1))))), 1), ivec2(0, 0) | (ivec2(_GLF_IDENTITY((int((1) | (1))) | (int((1) | (1))), min(_GLF_IDENTITY((int((1) | (1))) | (int((1) | (1))), min((int((1) | (1))) | (int((1) | (1))), (int((1) | (1))) | (int((1) | (1))))), (int((1) | (1))) | (int((1) | (1))))), 1)))), (int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((int((1) | (1))) | (int((1) | (1))), min(_GLF_IDENTITY((int((1) | (1))) | (int((1) | (1))), min((int((1) | (1))) | (int((1) | (1))), (int((1) | (1))) | (int((1) | (1))))), (int((1) | (1))) | (int((1) | (1))))), 1), ivec2(0, 0) | (ivec2(_GLF_IDENTITY((int((1) | (1))) | (int((1) | (1))), min(_GLF_IDENTITY((int((1) | (1))) | (int((1) | (1))), min((int((1) | (1))) | (int((1) | (1))), (int((1) | (1))) | (int((1) | (1))))), (int((1) | (1))) | (int((1) | (1))))), 1))))) ^ 0), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((int((1) | (1))) | (int((1) | (1))), min(_GLF_IDENTITY((int((1) | (1))) | (int((1) | (1))), min((int((1) | (1))) | (int((1) | (1))), (int((1) | (1))) | (int((1) | (1))))), (int((1) | (1))) | (int((1) | (1))))), 1), ivec2(0, 0) | (ivec2(_GLF_IDENTITY((int((1) | (1))) | (int((1) | (1))), min(_GLF_IDENTITY((int((1) | (1))) | (int((1) | (1))), min((int((1) | (1))) | (int((1) | (1))), (int((1) | (1))) | (int((1) | (1))))), (int((1) | (1))) | (int((1) | (1))))), 1)))))))))) | (int(int((1) | (1)))))), 0, 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), bool(bool(bool(bool(injectionSwitch.x > injectionSwitch.y))))))) || false)))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) * uvec3(1u, 1u, 1u))), _GLF_IDENTITY(min(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) * uvec3(1u, 1u, 1u)), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) * uvec3(1u, 1u, 1u))))), uvec3(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) * uvec3(1u, 1u, 1u)))), (min(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) * uvec3(1u, 1u, 1u)), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) * uvec3(1u, 1u, 1u))))), uvec3(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) * uvec3(1u, 1u, 1u))))) | (min(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) * uvec3(1u, 1u, 1u)), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) * uvec3(1u, 1u, 1u))))), uvec3(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) * uvec3(1u, 1u, 1u))))))))).x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, clamp(_GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u), workgroup_id, _GLF_IDENTITY(workgroup_id, max(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, uint(_GLF_IDENTITY(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), clamp(_GLF_IDENTITY(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), min(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))))), uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), _GLF_IDENTITY(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), (uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))) | uvec4(0u, 0u, 0u, 0u)))))), uint(uvec2(workgroup_id, 0u))))))), ~ (~ (_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(clamp(_GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u), workgroup_id, _GLF_IDENTITY(workgroup_id, max(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, uint(_GLF_IDENTITY(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), clamp(_GLF_IDENTITY(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), min(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))))), uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), _GLF_IDENTITY(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), (uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))) | uvec4(0u, 0u, 0u, 0u)))))), uint(uvec2(workgroup_id, 0u)))))), (clamp(_GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u), workgroup_id, _GLF_IDENTITY(workgroup_id, max(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, uint(_GLF_IDENTITY(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), clamp(_GLF_IDENTITY(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), min(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))))), uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), _GLF_IDENTITY(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), (uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))) | uvec4(0u, 0u, 0u, 0u)))))), uint(uvec2(workgroup_id, 0u))))))) | 0u))))), clamp(workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, clamp(_GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u), workgroup_id, _GLF_IDENTITY(workgroup_id, max(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, uint(_GLF_IDENTITY(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), clamp(_GLF_IDENTITY(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), min(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))))), uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), _GLF_IDENTITY(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), (uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))) | uvec4(0u, 0u, 0u, 0u)))))), uint(uvec2(workgroup_id, 0u))))))), ~ (~ (_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(clamp(_GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u), workgroup_id, _GLF_IDENTITY(workgroup_id, max(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, uint(_GLF_IDENTITY(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), clamp(_GLF_IDENTITY(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), min(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))))), uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), _GLF_IDENTITY(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), (uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))) | uvec4(0u, 0u, 0u, 0u)))))), uint(uvec2(workgroup_id, 0u)))))), (clamp(_GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u), workgroup_id, _GLF_IDENTITY(workgroup_id, max(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, uint(_GLF_IDENTITY(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), clamp(_GLF_IDENTITY(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), min(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))))), uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), _GLF_IDENTITY(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), (uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))) | uvec4(0u, 0u, 0u, 0u)))))), uint(uvec2(workgroup_id, 0u))))))) | 0u))))), workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, clamp(_GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u), workgroup_id, _GLF_IDENTITY(workgroup_id, max(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, uint(_GLF_IDENTITY(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), clamp(_GLF_IDENTITY(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), min(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))))), uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), _GLF_IDENTITY(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), (uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))) | uvec4(0u, 0u, 0u, 0u)))))), uint(uvec2(workgroup_id, 0u))))))), ~ (~ (_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(clamp(_GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u), workgroup_id, _GLF_IDENTITY(workgroup_id, max(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, uint(_GLF_IDENTITY(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), clamp(_GLF_IDENTITY(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), min(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))))), uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), _GLF_IDENTITY(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), (uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))) | uvec4(0u, 0u, 0u, 0u)))))), uint(uvec2(workgroup_id, 0u)))))), (clamp(_GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u), workgroup_id, _GLF_IDENTITY(workgroup_id, max(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, uint(_GLF_IDENTITY(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), clamp(_GLF_IDENTITY(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), min(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))))), uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), _GLF_IDENTITY(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), (uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))) | uvec4(0u, 0u, 0u, 0u)))))), uint(uvec2(workgroup_id, 0u))))))) | 0u))))), workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, clamp(_GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u), workgroup_id, _GLF_IDENTITY(workgroup_id, max(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, uint(_GLF_IDENTITY(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), clamp(_GLF_IDENTITY(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), min(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))))), uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), _GLF_IDENTITY(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), (uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))) | uvec4(0u, 0u, 0u, 0u)))))), uint(uvec2(workgroup_id, 0u))))))), ~ (~ (_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(clamp(_GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u), workgroup_id, _GLF_IDENTITY(workgroup_id, max(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, uint(_GLF_IDENTITY(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), clamp(_GLF_IDENTITY(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), min(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))))), uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), _GLF_IDENTITY(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), (uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))) | uvec4(0u, 0u, 0u, 0u)))))), uint(uvec2(workgroup_id, 0u)))))), (clamp(_GLF_IDENTITY(workgroup_id, (workgroup_id) * 1u), workgroup_id, _GLF_IDENTITY(workgroup_id, max(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, uint(_GLF_IDENTITY(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), clamp(_GLF_IDENTITY(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), min(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))))), uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), _GLF_IDENTITY(uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), (uvec4(workgroup_id, 1u, (1u & 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))) | uvec4(0u, 0u, 0u, 0u)))))), uint(uvec2(workgroup_id, 0u))))))) | 0u)))))));
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), ~ (~ (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))))), (true ? _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), (subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) ^ 0u) : _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), (~ (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))) | 0u))))))), (~ (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), (true ? subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(workgroup_id))), subgroup_size)) : _GLF_FUZZED(subgroup_size))))) - 0u))) + subgroup_local_id, ~ (~ (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), (true ? subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, 0u + (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))), subgroup_size, subgroup_size)) : _GLF_FUZZED(subgroup_size)))), (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), subgroup_id)) * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), (true ? subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)) : _GLF_FUZZED(subgroup_size)))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), subgroup_id)) * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), (true ? subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)) : _GLF_FUZZED(subgroup_size))))) * 1u)) - 0u))) + subgroup_local_id, (workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), (true ? subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, 0u + (_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), clamp(~ (subgroup_size), ~ (subgroup_size), ~ (subgroup_size))))))))), subgroup_size, subgroup_size)) : _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) - (0u >> _GLF_IDENTITY(uint(5u), uint(5u))))))), (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), subgroup_id)) * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), (true ? subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)) : _GLF_FUZZED(subgroup_size)))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), subgroup_id)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), subgroup_id)), (false ? _GLF_FUZZED(58915u) : _GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), subgroup_id))))) << 0u) * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))) | 0u))), (true ? subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)) : _GLF_FUZZED(subgroup_size))))) * 1u)) - 0u))) + subgroup_local_id) - 0u))));
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)), workgroup_base)) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (_GLF_FUZZED(num_workgroup)) / 1u) : subgroup_size)), clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, 0u ^ (subgroup_id * subgroup_size)), _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED((workgroup_base / subgroup_id)))), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(_GLF_IDENTITY((workgroup_base / subgroup_id), ((workgroup_base / subgroup_id)) | (_GLF_IDENTITY((workgroup_base / subgroup_id), uint(uvec2((workgroup_base / subgroup_id), 1u)))))))), ~ (~ (_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED((_GLF_IDENTITY(workgroup_base / subgroup_id, (workgroup_base / subgroup_id) | (workgroup_base / subgroup_id))))))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED((workgroup_base / subgroup_id)))), (_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED((workgroup_base / subgroup_id))))) + 0u)))))), (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, uint(uvec2(subgroup_id * subgroup_size, 1u)))) + uint(_GLF_ZERO(0.0, injectionSwitch.x)))) * 1u), _GLF_IDENTITY(subgroup_id * subgroup_size, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(subgroup_local_id))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) * 1u), (true ? subgroup_id : _GLF_FUZZED(subgroup_local_id))), (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(subgroup_local_id)))) | 0u)))) * subgroup_size, subgroup_id * subgroup_size)))), 0u + (subgroup_id * subgroup_size)) + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, max((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size)));
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 1, false || (_injected_loop_counter != 1)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_injected_loop_counter != 1, false || (_injected_loop_counter != 1))))); _injected_loop_counter ++)
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
      }
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   else
    {
    }
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(1, (1) | (1)) ^ (1 | 1))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 0.0, 0.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-9.3, -4813.8090)))).y))))))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
    }
  }
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(97102)))))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY((uint(1)), ((uint(1))) >> (1u ^ 1u)))) | (uint(1))), max(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), _GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(uvec3(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), 0u, ((1u ^ 1u) ^ 0u))))))) | 0u), 4, 64, 4);
 if(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), max(_GLF_IDENTITY((subgroup_local_id), 1u * ((subgroup_local_id))), (subgroup_local_id))) >> 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))), _GLF_IDENTITY((subgroup_local_id), max(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id), 1u * ((subgroup_local_id))), clamp(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id), 1u * ((subgroup_local_id))), 0u | (_GLF_IDENTITY((subgroup_local_id), 1u * ((subgroup_local_id))))), _GLF_IDENTITY((subgroup_local_id), 1u * ((subgroup_local_id))), _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id), 1u * ((subgroup_local_id))), (_GLF_IDENTITY((subgroup_local_id), 1u * ((subgroup_local_id)))) * 1u))), (subgroup_local_id))) >> 0u)) * 1u))) + 1 < subgroup_size)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(888.242) : injectionSwitch.x)) > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
        }
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))), (true ? _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))) : _GLF_FUZZED(_injected_loop_counter)))) ^ (0 | 0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))), (true ? _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))) : _GLF_FUZZED(_injected_loop_counter)))) ^ (0 | 0))), (true ? _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))), (true ? _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))) : _GLF_FUZZED(_injected_loop_counter)))) ^ (0 | 0))) : _GLF_FUZZED(2321)))) >> 0))), (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 | (_GLF_IDENTITY(int(4), int(4))))) >> 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(4), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(4), min(int(4), int(4)))), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 + (int(4))), min(int(4), int(_GLF_IDENTITY(4, (4) + 0)))))))))), (~ (_GLF_IDENTITY(int(4), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) - 0)), min(int(4), int(_GLF_IDENTITY(4, 1 * (4)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (_GLF_IDENTITY(int(4), min(int(4), int(4))))))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) - 0)), min(int(4), int(_GLF_IDENTITY(4, 1 * (4)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (_GLF_IDENTITY(int(4), min(int(4), int(4)))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) - 0)), min(int(4), int(_GLF_IDENTITY(4, 1 * (4)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (_GLF_IDENTITY(int(4), min(int(4), int(4))))))), 0 | ((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) - 0)), min(int(4), int(_GLF_IDENTITY(4, 1 * (4)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (_GLF_IDENTITY(int(4), min(int(4), int(4)))))))))))))) | 0))), clamp(int(_GLF_IDENTITY(4, _GLF_IDENTITY(int(ivec2(4, 1)), (int(ivec2(4, 1))) >> 0))), int(4), _GLF_IDENTITY(int(4), clamp(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4))), int(4))))), (true ? _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))) : _GLF_FUZZED(_injected_loop_counter)))) ^ (0 | 0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(4), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(4), min(int(4), int(4)))), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 + (int(4))), min(int(4), int(_GLF_IDENTITY(4, (4) + 0)))))))))), (~ (_GLF_IDENTITY(int(4), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) - 0)), min(int(4), int(_GLF_IDENTITY(4, 1 * (4)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (_GLF_IDENTITY(int(4), min(int(4), int(4))))))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) - 0)), min(int(4), int(_GLF_IDENTITY(4, 1 * (4)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (_GLF_IDENTITY(int(4), min(int(4), int(4)))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) - 0)), min(int(4), int(_GLF_IDENTITY(4, 1 * (4)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (_GLF_IDENTITY(int(4), min(int(4), int(4))))))), 0 | ((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) - 0)), min(int(4), int(_GLF_IDENTITY(4, 1 * (4)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (_GLF_IDENTITY(int(4), min(int(4), int(4)))))))))))))) | 0))), clamp(int(_GLF_IDENTITY(4, _GLF_IDENTITY(int(ivec2(4, 1)), (int(ivec2(4, 1))) >> 0))), int(4), _GLF_IDENTITY(int(4), clamp(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4))), int(4))))), (true ? _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))) : _GLF_FUZZED(_injected_loop_counter)))) ^ (0 | 0))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(4), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(4), min(int(4), int(4)))), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 + (int(4))), min(int(4), int(_GLF_IDENTITY(4, (4) + 0)))))))))), (~ (_GLF_IDENTITY(int(4), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) - 0)), min(int(4), int(_GLF_IDENTITY(4, 1 * (4)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (_GLF_IDENTITY(int(4), min(int(4), int(4))))))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) - 0)), min(int(4), int(_GLF_IDENTITY(4, 1 * (4)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (_GLF_IDENTITY(int(4), min(int(4), int(4)))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) - 0)), min(int(4), int(_GLF_IDENTITY(4, 1 * (4)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (_GLF_IDENTITY(int(4), min(int(4), int(4))))))), 0 | ((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) - 0)), min(int(4), int(_GLF_IDENTITY(4, 1 * (4)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (_GLF_IDENTITY(int(4), min(int(4), int(4)))))))))))))) | 0))), clamp(int(_GLF_IDENTITY(4, _GLF_IDENTITY(int(ivec2(4, 1)), (int(ivec2(4, 1))) >> 0))), int(4), _GLF_IDENTITY(int(4), clamp(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4))), int(4))))), (true ? _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))) : _GLF_FUZZED(_injected_loop_counter)))) ^ (0 | 0)))))) | (_GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(4), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(4), min(int(4), int(4)))), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 + (int(4))), min(int(4), int(_GLF_IDENTITY(4, (4) + 0)))))))))), (~ (_GLF_IDENTITY(int(4), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) - 0)), min(int(4), int(_GLF_IDENTITY(4, 1 * (4)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (_GLF_IDENTITY(int(4), min(int(4), int(4))))))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) - 0)), min(int(4), int(_GLF_IDENTITY(4, 1 * (4)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (_GLF_IDENTITY(int(4), min(int(4), int(4)))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) - 0)), min(int(4), int(_GLF_IDENTITY(4, 1 * (4)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (_GLF_IDENTITY(int(4), min(int(4), int(4))))))), 0 | ((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) - 0)), min(int(4), int(_GLF_IDENTITY(4, 1 * (4)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (_GLF_IDENTITY(int(4), min(int(4), int(4)))))))))))))) | 0))), clamp(int(_GLF_IDENTITY(4, _GLF_IDENTITY(int(ivec2(4, 1)), (int(ivec2(4, 1))) >> 0))), int(4), _GLF_IDENTITY(int(4), clamp(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4))), int(4))))), (true ? _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))) : _GLF_FUZZED(_injected_loop_counter)))) ^ (0 | 0)))))))) || false); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.9)))) / 1.0), injectionSwitch.y))))))
            barrier();
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 0.0 + _GLF_IDENTITY((injectionSwitch.y), (false ? _GLF_FUZZED(7.6) : (injectionSwitch.y)))))))) || false))) && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bvec3(bool(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec3(bvec3(bool(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bvec3(bool(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec3(bvec3(bool(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))), false || (bool(_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bvec3(bool(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec3(bvec3(bool(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))))) && true)), (injectionSwitch.x < injectionSwitch.y))))))
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                              }
                             else
                              {
                               barrier();
                              }
                            }
                           else
                            {
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))));
                    }
                   else
                    {
                     atomicStore(checker[virtual_gid], read, 4, 64, 4);
                    }
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     do
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false)))))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false)))))), ! (! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false))))))))))), (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! _GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(bool(! (_GLF_IDENTITY(false, (false) && true))))))) || (bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)))))))))))) && true), (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), false || (bool(bool(! (_GLF_DEAD(false)))))))), (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)))), false || (bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))), _GLF_IDENTITY(bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)), false), bvec3(bvec3(bvec3(bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)), false)))))), false, true)))))))), ! (! (_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_DEAD(false)), false || ((_GLF_DEAD(false)))), true)), false || (bool(bvec2(_GLF_IDENTITY((_GLF_DEAD(false)), false || ((_GLF_DEAD(false)))), true))))), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)))), false || (bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))))), false), false))))))))))))))) && true)) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false)))))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false)))))), ! (! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false))))))))))), (! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_DEAD(false)), true && (_GLF_IDENTITY((_GLF_DEAD(false)), true && ((_GLF_DEAD(false)))))), bool(bool(! _GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(bool(! (_GLF_IDENTITY(false, (false) && true))))))) || (bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(bool(! (_GLF_IDENTITY(false, (false) && true))))))) || (bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)))))), bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(bool(! (_GLF_IDENTITY(false, (false) && true))))))) || (bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) && _GLF_IDENTITY(true, (true) && true)), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), true))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), true && (_GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), bool(bool(bool(bool(! (_GLF_DEAD(false))))))))), false || (bool(bool(! (_GLF_DEAD(false)))))))), (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)))), false || (bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))), _GLF_IDENTITY(bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2((_GLF_DEAD(false)), false), false), bvec3(bvec4(bvec3(bvec2((_GLF_DEAD(false)), false), false), false)))), false), bvec3(bvec3(bvec3(bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)), false)))))), false, true)))))))), ! (! (_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_DEAD(false)), false || ((_GLF_DEAD(false)))), true)), false || (bool(bvec2(_GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, true))))))), false || ((_GLF_DEAD(false)))), true))))), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), _GLF_IDENTITY(false, ! (! (false)))), false)))), false || (bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))))), false), false))))))))))))))) && true)) && true)))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))))), bool(bvec4(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false)))))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false)))))), ! (! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false))))))))))), (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! _GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(bool(! (_GLF_IDENTITY(false, (false) && true))))))) || (bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)))))))))))) && true), (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), false || (bool(bool(! (_GLF_DEAD(false)))))))), (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)))), false || (bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))), _GLF_IDENTITY(bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)), false), bvec3(bvec3(bvec3(bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)), false)))))), false, true)))))))), ! (! (_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_DEAD(false)), false || ((_GLF_DEAD(false)))), true)), false || (bool(bvec2(_GLF_IDENTITY((_GLF_DEAD(false)), false || ((_GLF_DEAD(false)))), true))))), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)))), false || (bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))))), false), false))))))))))))))) && true)) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false)))))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false)))))), ! (! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false))))))))))), (! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_DEAD(false)), true && (_GLF_IDENTITY((_GLF_DEAD(false)), true && ((_GLF_DEAD(false)))))), bool(bool(! _GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(bool(! (_GLF_IDENTITY(false, (false) && true))))))) || (bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(bool(! (_GLF_IDENTITY(false, (false) && true))))))) || (bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)))))), bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(bool(! (_GLF_IDENTITY(false, (false) && true))))))) || (bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) && _GLF_IDENTITY(true, (true) && true)), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), true))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), true && (_GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), bool(bool(bool(bool(! (_GLF_DEAD(false))))))))), false || (bool(bool(! (_GLF_DEAD(false)))))))), (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)))), false || (bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))), _GLF_IDENTITY(bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2((_GLF_DEAD(false)), false), false), bvec3(bvec4(bvec3(bvec2((_GLF_DEAD(false)), false), false), false)))), false), bvec3(bvec3(bvec3(bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)), false)))))), false, true)))))))), ! (! (_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_DEAD(false)), false || ((_GLF_DEAD(false)))), true)), false || (bool(bvec2(_GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, true))))))), false || ((_GLF_DEAD(false)))), true))))), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), _GLF_IDENTITY(false, ! (! (false)))), false)))), false || (bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))))), false), false))))))))))))))) && true)) && true)))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))))), bool(bvec4(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false)))))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false)))))), ! (! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false))))))))))), (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! _GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(bool(! (_GLF_IDENTITY(false, (false) && true))))))) || (bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)))))))))))) && true), (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), false || (bool(bool(! (_GLF_DEAD(false)))))))), (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)))), false || (bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))), _GLF_IDENTITY(bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)), false), bvec3(bvec3(bvec3(bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)), false)))))), false, true)))))))), ! (! (_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_DEAD(false)), false || ((_GLF_DEAD(false)))), true)), false || (bool(bvec2(_GLF_IDENTITY((_GLF_DEAD(false)), false || ((_GLF_DEAD(false)))), true))))), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)))), false || (bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))))), false), false))))))))))))))) && true)) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false)))))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false)))))), ! (! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false))))))))))), (! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_DEAD(false)), true && (_GLF_IDENTITY((_GLF_DEAD(false)), true && ((_GLF_DEAD(false)))))), bool(bool(! _GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(bool(! (_GLF_IDENTITY(false, (false) && true))))))) || (bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(bool(! (_GLF_IDENTITY(false, (false) && true))))))) || (bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)))))), bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(bool(! (_GLF_IDENTITY(false, (false) && true))))))) || (bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) && _GLF_IDENTITY(true, (true) && true)), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), true))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), true && (_GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), bool(bool(bool(bool(! (_GLF_DEAD(false))))))))), false || (bool(bool(! (_GLF_DEAD(false)))))))), (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)))), false || (bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))), _GLF_IDENTITY(bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2((_GLF_DEAD(false)), false), false), bvec3(bvec4(bvec3(bvec2((_GLF_DEAD(false)), false), false), false)))), false), bvec3(bvec3(bvec3(bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), false)), false)))))), false, true)))))))), ! (! (_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_DEAD(false)), false || ((_GLF_DEAD(false)))), true)), false || (bool(bvec2(_GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, true))))))), false || ((_GLF_DEAD(false)))), true))))), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), _GLF_IDENTITY(false, ! (! (false)))), false)))), false || (bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))))), false), false))))))))))))))) && true)) && true)))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))))), bool(bvec4(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))))))))))))
                        {
                         for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) * 1.0))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2)))))), ! (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(2, max(2, 2)))), int(ivec2((~ (_GLF_IDENTITY(2, max(2, 2)))), 1))))) / 1)), int(2))))), ! (! ((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, max(2, 2)))))) / 1)), int(2))), (_GLF_IDENTITY(_injected_loop_counter > (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, max(2, 2)))))) / 1)), int(2))), bool(bool(_injected_loop_counter > (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, max(2, 2)))))) / 1)), int(2))))))) || false)))))))); _injected_loop_counter --)
                          {
                           barrier();
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), (bool(bool(false))) && true)))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, tan(0.0), 0.0, 1.0, 1.0, 1.0))).x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))));
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0)) * ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))) != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) | (int(0)))))) | (0))], injectionSwitch[1])).x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(((_GLF_IDENTITY(1, min(1, 1)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(-71727)))) << 0), int(4))), _GLF_IDENTITY(int(4), _GLF_IDENTITY(0 + (int(4)), 1 * (_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) ^ 0)) + (int(4))))))), min(_GLF_IDENTITY(((_GLF_IDENTITY(1, min(1, 1)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(-71727)))) << 0), int(4))), _GLF_IDENTITY(int(4), _GLF_IDENTITY(0 + (int(4)), 1 * (_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) ^ 0)) + (int(4))))))), (((_GLF_IDENTITY(1, min(1, 1)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(-71727)))) << 0), int(4))), _GLF_IDENTITY(int(4), _GLF_IDENTITY(0 + (int(4)), 1 * (_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) ^ 0)) + (int(4)))))))) / 1), ((_GLF_IDENTITY(1, min(1, 1)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(-71727)))) << 0), int(4))), _GLF_IDENTITY(int(4), _GLF_IDENTITY(0 + (int(4)), 1 * (_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) ^ 0)) + (int(4)))))))))); _injected_loop_counter ++)
          {
           barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true))))) || false)))
                    barrier();
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
        }
       else
        {
        }
      }
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       subgroupAll(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) && true)) && true))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), (_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), true && ((_GLF_IDENTITY(false, true && (false)))))) && true))), ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), true && (false)))))))), false, _GLF_IDENTITY(false, (false) && true)), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (false))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, false))))))))) || false))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, false))))))))) || false))))), bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, false))))))))) || false))))))))))))))), false, false)))))))));
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))), ~ (~ ((~ (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(1), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))), ~ (~ ((~ (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))))))), (_GLF_IDENTITY(int(1), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))), ~ (~ ((~ (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1)))))))))) / 1), _GLF_IDENTITY(int(1), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))), ~ (~ ((~ (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))))))))), int(1))), (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) ? (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), ~ (~ (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1)))))), int(1))) : _GLF_FUZZED(_GLF_IDENTITY(ivec4(-29921, -53148, 59117, 1342), ivec4(0, 0, 0, 0) + (_GLF_IDENTITY(ivec4(-29921, -53148, 59117, 1342), ~ (~ (ivec4(-29921, -53148, 59117, 1342)))))).a))), (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))), ~ (~ ((~ (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))))))), int(1)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))), ~ (~ ((~ (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))))))), int(1)), (false ? _GLF_FUZZED(8066) : 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))), ~ (~ ((~ (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))))))), int(1))))) | 0)), (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) ? (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), ~ (~ (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1)))))), int(1))) : _GLF_FUZZED(_GLF_IDENTITY(ivec4(-29921, -53148, 59117, 1342), ivec4(0, 0, 0, 0) + (_GLF_IDENTITY(ivec4(-29921, -53148, 59117, 1342), ~ (~ (ivec4(-29921, -53148, 59117, _GLF_IDENTITY(1342, (1342) | (1342)))))))).a)))) | (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), ~ _GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))), ~ (~ ((~ (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1)))))))), (true ? _GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), clamp(int(1), int(1), _GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(-18067) : int(1))))))), ~ (~ ((~ (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1)))))))) : _GLF_FUZZED(-23263)))), int(1))), (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) ? (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))), int(int(_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))))))), int(1))) : _GLF_FUZZED(_GLF_IDENTITY(ivec4(-29921, -53148, 59117, 1342), ivec4(0, 0, 0, 0) + (_GLF_IDENTITY(ivec4(-29921, -53148, 59117, 1342), ~ (~ (ivec4(-29921, -53148, 59117, 1342)))))).a))), clamp(_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))), ~ (~ ((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1)))), ~ (~ (~ (_GLF_IDENTITY(int(1), clamp(int(_GLF_IDENTITY(1, (1) >> 0)), int(1), int(1)))))))))))), int(1))), (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) ? (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), ~ (~ (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1)))))), int(1))) : _GLF_FUZZED(_GLF_IDENTITY(ivec4(-29921, -53148, 59117, 1342), ivec4(0, 0, 0, 0) + (_GLF_IDENTITY(ivec4(-29921, _GLF_IDENTITY(-53148, (0 | 0) ^ (-53148)), 59117, 1342), ~ (~ (ivec4(-29921, -53148, 59117, _GLF_IDENTITY(1342, min(_GLF_IDENTITY(1342, ~ (~ (1342))), 1342)))))))).a))), _GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))), ~ (~ ((~ (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))))))), int(1))), (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) ? (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), ~ (~ (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1)))))), int(1))) : _GLF_FUZZED(_GLF_IDENTITY(ivec4(-29921, -53148, 59117, 1342), ivec4(0, 0, 0, 0) + (_GLF_IDENTITY(ivec4(-29921, -53148, 59117, 1342), ~ (~ (ivec4(-29921, -53148, 59117, 1342)))))).a))), 0 | (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))), ~ (~ ((~ (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))))))), int(1))), (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) ? (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), ~ (~ (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1)))))), int(1))) : _GLF_FUZZED(_GLF_IDENTITY(ivec4(-29921, -53148, 59117, 1342), ivec4(0, 0, 0, 0) + (_GLF_IDENTITY(ivec4(-29921, -53148, 59117, 1342), ~ (~ (ivec4(-29921, -53148, 59117, 1342)))))).a))))), _GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))), ~ _GLF_IDENTITY((~ ((~ (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))))), (_GLF_IDENTITY((~ ((~ (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))))), 0 + ((~ ((~ (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1)))))))))) >> 0))), int(1))), (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) ? (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, int(ivec4(1, 1, 1, 1)))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), int(1))), clamp(int(1), int(1), int(1)))))), int(1))) : _GLF_FUZZED(_GLF_IDENTITY(ivec4(-29921, -53148, 59117, 1342), ivec4(0, 0, 0, 0) + (_GLF_IDENTITY(ivec4(-29921, -53148, 59117, 1342), ~ (~ (ivec4(-29921, -53148, 59117, 1342)))))).a))))))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (! (false || (false)))))))
        {
         for(int _injected_loop_counter = (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), int(8)), _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), int(8)), clamp(0 << _GLF_IDENTITY(int(8), int(8)), 0 << _GLF_IDENTITY(int(8), int(8)), 0 << _GLF_IDENTITY(int(8), int(8))))) - 0, int(ivec3((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), int(8)), clamp(0 << _GLF_IDENTITY(int(8), int(8)), 0 << _GLF_IDENTITY(int(8), int(8)), 0 << _GLF_IDENTITY(int(8), int(8))))) - 0, 0, 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           do
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     else
      {
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       atomicStore(buf[_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid)), virtual_gid))], read, 4, 64, 4);
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --)))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)), (_GLF_IDENTITY(bool(bvec3(false, false, true)), true && (bool(bvec3(false, false, true))))) && true))))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           do
            {
             subgroupAll(true);
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | _GLF_IDENTITY(0, int(ivec2(0, 0))))); _GLF_IDENTITY(_injected_loop_counter --, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> 0)), (~ (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> 0))) - 0))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
                      barrier();
                    }
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               barrier();
              }
             else
              {
              }
            }
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), min(int(5), int(_GLF_IDENTITY(5, (5) << _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, int(ivec2(0, 0)))))))))) >> 0)))); _injected_loop_counter ++)
      {
       do
        {
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) && true)))))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = (1 ^ ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
                barrier();
              }
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (((injectionSwitch.x > injectionSwitch.y))) && true) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) || false))))), ! (! (_GLF_IDENTITY(bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) || false))))), ! (! (bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) || false)))))))))))))));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
          }
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) || false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
