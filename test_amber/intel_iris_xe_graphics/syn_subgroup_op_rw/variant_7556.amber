#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) * 1), 1, 1))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))), true && (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))))))))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (false))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, 1.0), _GLF_IDENTITY(mat2(mat4(mat2(injectionSwitch, 0.0, 1.0))), (false ? _GLF_FUZZED(mat2(_GLF_IDENTITY(-6.4, clamp(-6.4, -6.4, -6.4)), 3.1, -7.7, -8699.3758)) : mat2(mat4(mat2(injectionSwitch, 0.0, 1.0)))))))), min(injectionSwitch, injectionSwitch)), injectionSwitch)).x < injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
              }
            }
          }
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = (_GLF_IDENTITY((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(atomicXor(_injected_loop_counter, _injected_loop_counter)) : _GLF_IDENTITY(1, 0 ^ (1)))) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1))))), ((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(atomicXor(_injected_loop_counter, _injected_loop_counter)) : _GLF_IDENTITY(1, 0 ^ (1)))) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1)))))) / 1) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     do
                      {
                       for(int _injected_loop_counter = ((-68864 - -47269) & (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (_GLF_IDENTITY(1, (1) << 0)) | (_GLF_IDENTITY(0 ^ 0, (_GLF_IDENTITY(0 ^ 0, clamp(0 ^ 0, 0 ^ 0, 0 ^ 0))) * 1))), 1 * (1))), int(1)), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (_GLF_IDENTITY(1, (1) << 0)) | (_GLF_IDENTITY(0 ^ 0, _GLF_IDENTITY((_GLF_IDENTITY(0 ^ 0, clamp(0 ^ 0, 0 ^ 0, 0 ^ 0))), min((_GLF_IDENTITY(0 ^ 0, clamp(0 ^ 0, 0 ^ 0, 0 ^ 0))), (_GLF_IDENTITY(0 ^ 0, clamp(0 ^ 0, 0 ^ 0, 0 ^ 0))))) * 1))), 1 * (1))), int(1)), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (_GLF_IDENTITY(1, (1) << 0)) | (_GLF_IDENTITY(0 ^ 0, (_GLF_IDENTITY(_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, max(0, 0)) : _GLF_FUZZED(_injected_loop_counter))) ^ 0, clamp(0 ^ 0, 0 ^ 0, 0 ^ 0))) * 1))), 1 * (1))), int(1)), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (_GLF_IDENTITY(1, (1) << 0)) | (_GLF_IDENTITY(0 ^ 0, (_GLF_IDENTITY(0 ^ 0, clamp(0 ^ 0, 0 ^ 0, 0 ^ 0))) * 1))), 1 * (1))), int(1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          {
                           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                            {
                             return;
                            }
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                }
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (gl_WorkGroupSize.x)));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)) * workgroup_id;
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) + uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id))) + (0u | (1u ^ 1u))))), (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) + uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id))))) - 0u) * subgroup_size + subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))))
  {
  }
 else
  {
   do
    {
     do
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) < 1); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> (0 << _GLF_IDENTITY(int(3), int(3)))) > 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_GLF_IDENTITY(_injected_loop_counter != 1, false || (_injected_loop_counter != 1))) && true)); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                              {
                               for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) - int(_GLF_ZERO(0.0, injectionSwitch.x)))))); _injected_loop_counter ++)
                                {
                                 do
                                  {
                                   do
                                    {
                                     barrier();
                                    }
                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                  }
                                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), ! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), bool(bvec3(! (_GLF_WRAPPED_LOOP(false)), true, true))))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), ! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), bool(bvec3(! (_GLF_WRAPPED_LOOP(false)), true, true)))))))), (! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), ! (! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), bool(bvec3(! (_GLF_WRAPPED_LOOP(false)), true, true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), bool(bvec3(! (_GLF_WRAPPED_LOOP(false)), true, true)))))), true && ((_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), bool(bvec3(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))))), true, true))))))))))) && true)), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), bool(bvec3(! (_GLF_WRAPPED_LOOP(false)), true, true))), bool(bvec2(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), bool(bvec3(! (_GLF_WRAPPED_LOOP(false)), true, true))), false)))))))), (! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), ! (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), bool(bvec3(! (_GLF_WRAPPED_LOOP(false)), true, true)))), true && ((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), false || (! (_GLF_WRAPPED_LOOP(false)))), bool(bvec3(! (_GLF_WRAPPED_LOOP(false)), true, true))))))))))) && true))), true && (bool(! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false))))), bool(bvec3(! (_GLF_WRAPPED_LOOP(false)), true, true)))))))), (! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), ! (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), bool(bvec3(! (_GLF_WRAPPED_LOOP(false)), true, true)))), true && ((_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), bool(bvec3(! (_GLF_WRAPPED_LOOP(false)), true, true))))))))))) && true))))))))));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(subgroup_size)))), (((subgroup_local_id + 1) % subgroup_size)) | _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, (0u) - 0u)))) ^ 0u)), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) | _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, (0u) - 0u)))) ^ 0u)), clamp(workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uint(subgroup_id)), (uint(uint(subgroup_id))) / ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))))) * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) | _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, (0u) - 0u)))) ^ 0u)), workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) | _GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, (0u) - 0u)))) ^ 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, (0u) - 0u)))) ^ 0u)), (~ (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, (0u) - 0u)))) ^ 0u))) | (~ (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, (0u) - 0u)))) ^ 0u))))))), workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) | _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, _GLF_IDENTITY((0u) - 0u, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY((0u) - 0u, max((0u) - 0u, (0u) - 0u)))))))) ^ 0u))))) | 0u), (workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) >> 0), 1, 1))), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_local_id + 1))) % subgroup_size), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) >> 0), 1, 1))), clamp(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) >> 0), 1, 1))), uint(uvec3(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) >> 0), 1, 1))), 0u ^ ((subgroup_local_id + _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) >> 0), 1, 1))))), 1u, 1u))), (subgroup_local_id + _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) >> 0), 1, 1))), _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) >> 0), 1, 1))), ((subgroup_local_id + _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) >> 0), 1, 1)))) << 0u))), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_local_id + 1))) % subgroup_size), _GLF_IDENTITY(uint(uvec3((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) >> 0), 1, 1))), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_local_id + 1))) % subgroup_size), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), 0u ^ (uint(uvec3((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) >> 0), 1, 1))), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_local_id + 1))) % subgroup_size), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))))) | ((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) >> 0), 1, 1))), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_local_id + 1))) % subgroup_size))), _GLF_IDENTITY((((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) % subgroup_size)), (_GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), (_GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), (false ? _GLF_FUZZED(virtual_gid) : (((subgroup_local_id + 1) % subgroup_size))))) ^ 0u)) | ((((subgroup_local_id + 1) % subgroup_size)))) | _GLF_IDENTITY(0u, (0u) ^ 0u))) | 0u);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(0, 0 + (0)));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(4, max(4, 4)), _GLF_IDENTITY(64, 1 * _GLF_IDENTITY((64), ((64)) | 0)), 4);
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) * 1u) < subgroup_size, (subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) | (1)), 1)), 1)) < subgroup_size) || false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y)))) && true))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ 0))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))))), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false || (bool(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, false || (true)))))))))))))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       do
                        {
                         do
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                            {
                             if(_GLF_DEAD(false))
                              {
                               for(int _injected_loop_counter = ((82510 & 0) >> _GLF_IDENTITY(int(7), int(7))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true, true))); _injected_loop_counter ++)
                                {
                                 for(int _injected_loop_counter = (0 & 52631); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), bool(bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))); _injected_loop_counter ++)
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    {
                                     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) / 1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & -86410)); _injected_loop_counter --)
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                        {
                                         barrier();
                                        }
                                       else
                                        {
                                        }
                                      }
                                    }
                                  }
                                }
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                      }
                                     else
                                      {
                                       if(_GLF_DEAD(false))
                                        {
                                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                          {
                                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                            {
                                            }
                                           else
                                            {
                                             barrier();
                                            }
                                          }
                                         else
                                          {
                                          }
                                        }
                                      }
                                    }
                                   else
                                    {
                                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) ^ (_GLF_IDENTITY(0 ^ 0, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0 ^ 0, clamp(0 ^ 0, 0 ^ _GLF_IDENTITY(0, (0) ^ 0), 0 ^ 0))))))))); _injected_loop_counter --)
                                      {
                                       for(int _injected_loop_counter = (_GLF_IDENTITY(0, 1 * (0)) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                        {
                                         do
                                          {
                                           barrier();
                                          }
                                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(232.110)), bool(false))), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), max(_GLF_IDENTITY(float(vec3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((-0.5))), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), _GLF_IDENTITY(float(mat3x2(float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(log2(sin(5686.4386))) : _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-1782.7215)), bool(false))))), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), 0.0, 1.0, 1.0, 1.0, 1.0)), abs(_GLF_ONE(1.0, injectionSwitch.y)) * (float(mat3x2(float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(log2(sin(5686.4386))) : _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-1782.7215)), bool(false))))), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), 0.0, 1.0, 1.0, 1.0, 1.0))))), float(vec3(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))))))));
                         do
                          {
                           for(int _injected_loop_counter = _GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), 0 ^ _GLF_IDENTITY(_GLF_IDENTITY(((0 << _GLF_IDENTITY(int(8), int(8)))), max(((0 << _GLF_IDENTITY(int(8), int(8)))), ((0 << _GLF_IDENTITY(int(8), int(8)))))), (_GLF_IDENTITY(((0 << _GLF_IDENTITY(int(8), int(8)))), _GLF_IDENTITY(max(((0 << _GLF_IDENTITY(int(8), int(8)))), ((0 << _GLF_IDENTITY(int(8), int(8))))), max(max(((0 << _GLF_IDENTITY(int(8), int(8)))), ((0 << _GLF_IDENTITY(int(8), int(8))))), max(((0 << _GLF_IDENTITY(int(8), int(8)))), ((0 << _GLF_IDENTITY(int(8), int(8))))))))) + 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                            {
                             if(_GLF_DEAD(false))
                              {
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY((1 | 1), min(_GLF_IDENTITY((1 | 1), min((1 | 1), (1 | 1))), (1 | 1))), (_GLF_IDENTITY(_injected_loop_counter < (1 | 1), ! (_GLF_IDENTITY(! (_injected_loop_counter < (1 | 1)), true && (! (_injected_loop_counter < (1 | 1))))))) || false)); _GLF_IDENTITY(_injected_loop_counter ++, 0 | (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1))))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   barrier();
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                            {
                             atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, max(read, read)), _GLF_IDENTITY(_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, int(int(4)))) ^ 0), 4, _GLF_IDENTITY(4, 0 + (_GLF_IDENTITY(4, clamp(4, 4, 4)))))), (_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (_GLF_IDENTITY(_GLF_IDENTITY(4, int(int(4))), (_GLF_IDENTITY(_GLF_IDENTITY(4, int(int(4))), max(_GLF_IDENTITY(4, int(int(4))), _GLF_IDENTITY(4, int(int(4)))))) | 0)) ^ 0), 4, _GLF_IDENTITY(4, 0 + (_GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, (4) << 0), 4))))))) + (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, max(0, 0))))), int(0)))), _GLF_IDENTITY(_GLF_IDENTITY(64, min(64, 64)), (_GLF_IDENTITY(_GLF_IDENTITY(64, min(64, 64)), (_GLF_IDENTITY(64, min(64, 64))) * 1)) ^ 0), 4);
                            }
                          }
                         else
                          {
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                  }
                }
              }
             else
              {
              }
            }
           else
            {
            }
          }
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               subgroupAll(false);
              }
            }
          }
         else
          {
          }
        }
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (_GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? (injectionSwitch) * mat2(1.0) : _GLF_FUZZED(vec2(8.8, 13.82))))) * mat2(1.0))), injectionSwitch)), abs(vec2(1.0, 1.0)) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch))), max(injectionSwitch, injectionSwitch))))) + vec2(0.0, 0.0)).x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), abs(vec2(1.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), abs(vec2(1.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), abs(vec2(1.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))))) + vec2(0.0, 0.0)).x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       do
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((1), (false ? _GLF_FUZZED(-10776) : (1))))); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))))
              {
              }
             else
              {
               do
                {
                 atomicStore(buf[virtual_gid], _GLF_IDENTITY(read, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(read, (_GLF_IDENTITY(read, uint(uvec4(read, 0u, uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(injectionSwitch.y), min(float(injectionSwitch.y), float(injectionSwitch.y))), float(_GLF_FUZZED(4093.9347)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), 1u)))) | _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) | 0u)))), 4, 64, 4);
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)));
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                {
                 for(int _injected_loop_counter = (_GLF_IDENTITY(0 & -32861, (0 & -32861) - 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | (1)), 1))); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)))))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(2, ~ (~ (2)))))), int(2)), clamp((1 << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, max(2, 2))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(_GLF_IDENTITY(2, ~ (~ (2))), (_GLF_IDENTITY(2, ~ (~ (2)))) - 0)))), int(2)), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, _GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-2.1))), injectionSwitch.x)), injectionSwitch.x)))), (true ? int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(88.01))), (true ? injectionSwitch.x : _GLF_FUZZED(-2.1))), injectionSwitch.x)), injectionSwitch.x)))) : _GLF_FUZZED(_injected_loop_counter))) | (_GLF_IDENTITY(2, ~ (~ (2)))))), _GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) >> 0)), int(ivec3(int(_GLF_IDENTITY(2, (2) >> 0)), 0, 0)))), clamp((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(2, _GLF_IDENTITY(~ (~ (2)), ~ (~ (~ (~ (2))))))))), int(2)), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(2, ~ (~ (2)))))), int(2)), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), 0 | (int(2))), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(2, max(2, 2)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) | _GLF_IDENTITY((_GLF_IDENTITY(2, ~ (~ (2)))), ~ (~ ((_GLF_IDENTITY(2, ~ (~ (2))))))), (0 | 0) + (int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(2, ~ (~ (2)))))))), int(2)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(int(_GLF_IDENTITY(2, _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(2, ~ (~ (2)))), (0 | 0) + (int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(2, ~ (~ (2)))))))), int(2)) : _GLF_FUZZED((83176 % _injected_loop_counter))))) << 0), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(2), int(2)), (0 << _GLF_IDENTITY(int(7), int(7))), (0 >> _GLF_IDENTITY(int(6), int(6)))), ~ (~ (ivec3(_GLF_IDENTITY(int(2), int(2)), (0 << _GLF_IDENTITY(int(7), int(7))), (0 >> _GLF_IDENTITY(int(6), int(6)))))))), max(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(_GLF_IDENTITY(2, 0 ^ (2))), int(2)), (0 << _GLF_IDENTITY(int(7), int(7))), (0 >> _GLF_IDENTITY(int(6), int(6)))), ~ (~ (ivec3(_GLF_IDENTITY(int(2), int(2)), (0 << _GLF_IDENTITY(int(7), int(7))), (0 >> _GLF_IDENTITY(int(6), int(6)))))))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(int(2), int(2)), (0 << _GLF_IDENTITY(int(7), int(7))), (0 >> _GLF_IDENTITY(int(6), int(6)))), ~ (~ (ivec3(_GLF_IDENTITY(int(2), int(2)), (0 << _GLF_IDENTITY(int(7), int(7))), (0 >> _GLF_IDENTITY(int(6), int(6)))))))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(2, ~ (~ (2)))))), int(2)))), (1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(2, ~ (~ (2)))))), int(2))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-93167) : _injected_loop_counter))) - 0) != int(_GLF_ZERO(0.0, injectionSwitch.x)), ! (! (_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), bool(bvec4(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x), _GLF_IDENTITY(float(mat2x3(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(_GLF_IDENTITY(sqrt(0.0), (sqrt(0.0)) / 1.0) + (0.0), clamp(sqrt(0.0) + (_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(0.0, min(0.0, 0.0))))), sqrt(0.0) + (0.0), sqrt(0.0) + (0.0)))), injectionSwitch.x), 1.0, 1.0, 0.0, 0.0, 0.0)), mix(float(float(mat2x3(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))), float(_GLF_FUZZED(3.7)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) * exp(vec2(0.0, 0.0))).x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)), injectionSwitch)).x, injectionSwitch.x))) * 1.0)), (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(-396.242)))), _GLF_IDENTITY(bool(bvec4(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(mat2x3(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(sqrt(0.0) + (0.0), _GLF_IDENTITY(clamp(sqrt(0.0) + (0.0), sqrt(0.0) + (0.0), sqrt(0.0) + (0.0)), float(mat4x3(clamp(sqrt(0.0) + (0.0), sqrt(0.0) + (0.0), sqrt(0.0) + (0.0)), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(sqrt(0.0), (true ? sqrt(0.0) : _GLF_FUZZED(-6.4))), 0.0, 1.0, 1.0))))), injectionSwitch.x), 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))), mix(_GLF_IDENTITY(float(float(mat2x3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))), (float(float(mat2x3(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))))) - 0.0), float(_GLF_FUZZED(3.7)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), false || (true))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), false || (true)))), false || (! ((_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), false || (true)))))))) && true), _GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), bool(bvec3((_GLF_IDENTITY(false, true && (false))), true, true))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(mat2x3(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(sqrt(0.0) + (0.0), _GLF_IDENTITY(clamp(sqrt(0.0) + (0.0), sqrt(0.0) + (0.0), sqrt(0.0) + (0.0)), float(mat4x3(clamp(sqrt(0.0) + (0.0), sqrt(0.0) + (0.0), sqrt(0.0) + (0.0)), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(sqrt(0.0), (true ? sqrt(0.0) : _GLF_FUZZED(-6.4))), 0.0, 1.0, 1.0))))), injectionSwitch.x), 1.0, 1.0, 0.0, 0.0, 0.0)), mix(_GLF_IDENTITY(float(float(mat2x3(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))), (float(float(mat2x3(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))))) - 0.0), float(_GLF_FUZZED(3.7)), bool(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9.0), _GLF_FUZZED(-9856.5004)), bvec2(false, false)))) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).x, min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9.0), _GLF_FUZZED(-9856.5004)), bvec2(false, false)))) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).x, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9.0), _GLF_FUZZED(-9856.5004)), bvec2(false, false)))) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).x)) > injectionSwitch.y))))))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) && true), _GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), false || ((false))))))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))) || false)), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(bool(bvec4(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x))), _GLF_IDENTITY(mix(float(_GLF_FUZZED(882.845)), float(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(bool(true), false || (bool(true)))), min(mix(_GLF_IDENTITY(float(_GLF_FUZZED(882.845)), float(_GLF_IDENTITY(mat2x3(float(_GLF_FUZZED(882.845)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0))), 1.0, 0.0, 0.0, 1.0), mat3(_GLF_ONE(1.0, injectionSwitch.y)) * (mat2x3(float(_GLF_FUZZED(882.845)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0))), 1.0, 0.0, 0.0, 1.0))))), float(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 0.0)), injectionSwitch.x)), bool(true)), mix(float(_GLF_FUZZED(882.845)), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true)))))), (int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x))), _GLF_IDENTITY(mix(float(_GLF_FUZZED(882.845)), float(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(bool(true), false || (bool(true)))), min(mix(_GLF_IDENTITY(float(_GLF_FUZZED(882.845)), max(_GLF_IDENTITY(float(_GLF_FUZZED(882.845)), (false ? _GLF_FUZZED(2.5) : float(_GLF_FUZZED(882.845)))), _GLF_IDENTITY(float(_GLF_FUZZED(882.845)), (float(_GLF_FUZZED(882.845))) * 1.0))), float(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(930.796), _GLF_FUZZED(-3.0)), vec2(_GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(5.5) : (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x)), bool(true)), mix(float(_GLF_FUZZED(882.845)), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true))))))) - 0), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), mix(float(_GLF_FUZZED(882.845)), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true)))), (int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)), _GLF_IDENTITY(mix(float(_GLF_FUZZED(882.845)), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true)), mix(float(mix(float(_GLF_FUZZED(882.845)), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true))), float(_GLF_FUZZED(-17.15)), bool(false)))))) ^ _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) * ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))))), true, false, _GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(346.722), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-662.415)), bvec2(true, false))), injectionSwitch)).y)))), ! (! (bool(bvec4(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(882.845)), float(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(float(0.0), min(float(0.0), float(0.0)))))), float(_GLF_FUZZED(3595.8119)), bool(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x), max(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(float(0.0), min(float(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-67.68) : _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(83.89))), 0.0))))), float(0.0)))))), float(_GLF_FUZZED(3595.8119)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(float(0.0), min(float(0.0), float(0.0)))))), float(_GLF_FUZZED(3595.8119)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), injectionSwitch.x), float(vec4(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-9.7)), bool(false))), _GLF_IDENTITY(float(_GLF_IDENTITY(float(0.0), min(float(0.0), float(0.0)))), max(_GLF_IDENTITY(float(_GLF_IDENTITY(float(0.0), min(float(0.0), float(0.0)))), min(float(_GLF_IDENTITY(float(0.0), min(float(0.0), float(0.0)))), float(_GLF_IDENTITY(float(0.0), min(float(0.0), float(0.0)))))), float(_GLF_IDENTITY(float(0.0), min(float(0.0), float(0.0)))))))), float(_GLF_FUZZED(3595.8119)), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, 1.0, 1.0))), injectionSwitch)).x > injectionSwitch.y))))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(uint(62589))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(float(-74390))), bvec2(true, false))).x), mix(float(_GLF_FUZZED(1276.2847)), float(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(float(0.0), min(float(0.0), float(0.0)))))), _GLF_IDENTITY(float(_GLF_FUZZED(3595.8119)), max(float(_GLF_FUZZED(3595.8119)), float(_GLF_FUZZED(3595.8119)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), injectionSwitch.x)), bool(true))), 0.0, 0.0, 1.0)))))), bool(true)))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! (! (! (_GLF_IDENTITY(bool(bvec4(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(882.845)), float(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)), bool(true)))), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(882.845)), float(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)), bool(true)))))), _GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), mix(float(injectionSwitch.x), float(_GLF_IDENTITY(_GLF_FUZZED(-60.54), mix(float(_GLF_FUZZED(-64.74)), float(_GLF_IDENTITY(_GLF_FUZZED(-60.54), (true ? _GLF_FUZZED(-60.54) : _GLF_FUZZED(2.4)))), bool(true)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y)))), ! _GLF_IDENTITY((! (bool(bvec4(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(vec3(3277.7692, 19.82, -5.4)[1])))), mix(float(_GLF_FUZZED(882.845)), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true)))), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(bvec3(bvec3(true, false, true)))))), false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))))), false || ((! (bool(bvec4(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).x, (true ? injectionSwitch.x : _GLF_FUZZED(vec3(3277.7692, 19.82, -5.4)[1])))), mix(float(_GLF_FUZZED(882.845)), float(_GLF_ZERO(_GLF_IDENTITY(0.0, float(vec2(0.0, 0.0))), injectionSwitch.x)), bool(true)))), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(bvec3(bvec3(true, false, true)))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))))), (bool(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), max(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x)))), bool(bvec4(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) != int(_GLF_ZERO(0.0, injectionSwitch.x)), true, false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))))) && true)))))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_FUZZED(-5199.2605)), bool(false)))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_FUZZED(-5199.2605)), bool(false)))), clamp((_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_FUZZED(-5199.2605)), bool(false)))), (_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_FUZZED(-5199.2605)), bool(false)))), (_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_FUZZED(-5199.2605)), bool(false))))))) - 0.0) / 1.0)), max(min(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_FUZZED(-5199.2605)), _GLF_IDENTITY(bool(false), ! (! (bool(false))))))) / 1.0)), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_FUZZED(-5199.2605)), bool(false)))) / 1.0)), min(min(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_FUZZED(-5199.2605)), bool(false)))) / 1.0)), min(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_FUZZED(-5199.2605)), bool(false)))) / 1.0, mix(float((_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_FUZZED(-5199.2605)), bool(false)))) / 1.0), float(_GLF_FUZZED((104.195 / 222.845))), bool(false))))))))))), (int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), (_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_FUZZED(-5199.2605)), bool(false)))) / 1.0))))) / 1), (int(_GLF_ONE(1.0, injectionSwitch.y))) / ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) | (_GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3)))), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y))) / (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, clamp(3, 3, _GLF_IDENTITY(3, min(3, 3))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(int(dot(-48.72, 830.752))) : int(3))), _GLF_IDENTITY(int(3), int(int(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), ~ (~ (int(3))))) / 1))))), ((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, clamp(3, 3, _GLF_IDENTITY(3, min(3, 3))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(int(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), ~ (~ (int(3))))) / 1)))))) | 0)), min(_GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y))) / ((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, clamp(3, 3, _GLF_IDENTITY(3, min(3, 3))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(int(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), ~ (~ (int(3))))) / 1)))))), 0 ^ ((int(_GLF_ONE(1.0, injectionSwitch.y))) / (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(_GLF_IDENTITY(3, clamp(3, 3, 3)), clamp(3, 3, _GLF_IDENTITY(3, min(3, 3))))))), (false ? _GLF_FUZZED(bitfieldInsert(_injected_loop_counter, _injected_loop_counter, -23888, _injected_loop_counter)) : (1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(_GLF_IDENTITY(3, clamp(3, 3, 3)), clamp(3, 3, _GLF_IDENTITY(3, min(3, 3))))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(int(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), ~ (~ (int(3))))) / 1)))))))), min(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y))) / ((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, clamp(3, 3, _GLF_IDENTITY(3, min(3, 3))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(int(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), ~ (~ (int(3))))) / 1)))))), 0 ^ ((int(_GLF_ONE(1.0, injectionSwitch.y))) / (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(_GLF_IDENTITY(3, clamp(3, 3, 3)), clamp(3, 3, _GLF_IDENTITY(3, min(3, 3))))))), (false ? _GLF_FUZZED(bitfieldInsert(_injected_loop_counter, _injected_loop_counter, -23888, _injected_loop_counter)) : (1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(_GLF_IDENTITY(3, clamp(3, 3, 3)), clamp(3, 3, _GLF_IDENTITY(3, min(3, 3))))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(int(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), ~ (~ (int(3))))) / 1)))))))), _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y))) / ((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, clamp(3, 3, _GLF_IDENTITY(3, min(3, 3))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(int(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), ~ (~ (int(3))))) / 1)))))), 0 ^ ((int(_GLF_ONE(1.0, injectionSwitch.y))) / (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(_GLF_IDENTITY(3, clamp(3, 3, 3)), clamp(3, 3, _GLF_IDENTITY(3, min(3, 3))))))), (false ? _GLF_FUZZED(bitfieldInsert(_injected_loop_counter, _injected_loop_counter, -23888, _injected_loop_counter)) : (1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(_GLF_IDENTITY(3, clamp(3, 3, 3)), clamp(3, 3, _GLF_IDENTITY(3, min(3, 3))))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(int(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), ~ (~ (int(3))))) / 1)))))))))), _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y))) / ((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, clamp(3, 3, _GLF_IDENTITY(3, min(3, 3))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), ~ (~ (int(3))))) / 1), (_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), ~ (~ (int(3))))) / 1)) >> 0)))))), _GLF_IDENTITY(((int(_GLF_ONE(1.0, injectionSwitch.y))) / ((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, clamp(3, 3, _GLF_IDENTITY(3, min(3, 3))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(int(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), ~ (~ (int(3))))) / 1))))))) ^ 0, int(ivec3(((int(_GLF_ONE(1.0, injectionSwitch.y))) / ((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, clamp(3, 3, _GLF_IDENTITY(3, min(3, 3))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(int(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), ~ (~ (int(3))))) / 1))))))) ^ 0, 1, 0))))))))))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))); _injected_loop_counter ++)
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       do
                                        {
                                         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || _GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), (injectionSwitch.x > injectionSwitch.y)))) && true), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, mix(float(_GLF_FUZZED(6223.0354)), float(injectionSwitch.y), bool(true)))), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, mix(float(_GLF_FUZZED(6223.0354)), float(injectionSwitch.y), bool(true)))), false, false, true))))), bool(_GLF_IDENTITY(bvec2(! (_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(6223.0354)), float(injectionSwitch.y), bool(true)))))), true), bvec2(bvec4(bvec2(! (_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(6223.0354)), float(injectionSwitch.y), bool(true)))))), true), false, false)))))))))
                                          {
                                          }
                                         else
                                          {
                                           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                            {
                                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                              {
                                              }
                                             else
                                              {
                                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
                                                {
                                                }
                                               else
                                                {
                                                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                                  {
                                                   for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(_GLF_IDENTITY(2, ~ (~ (2)))), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                    {
                                                     return;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                      }
                                    }
                                   else
                                    {
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                        }
                      }
                    }
                  }
                 else
                  {
                  }
                }
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
     do
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY((64073 & 0), 0 | ((64073 & 0))) ^ (0 >> _GLF_IDENTITY(int(2), int(2))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, false || (_injected_loop_counter != 1))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 subgroupAll(true);
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_IDENTITY(_GLF_FUZZED(278.467), (_GLF_FUZZED(278.467)) / _GLF_IDENTITY(dot(vec2(1.0, log(1.0)), vec2(exp(0.0), 0.0)), dot(vec2(1.0, log(1.0)), vec2(exp(0.0), 0.0)))))) > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(278.467))) > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(278.467))) > injectionSwitch.y)))), false)), ! (_GLF_IDENTITY(! (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(278.467))) > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(278.467))) > injectionSwitch.y))), bool(bvec4(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(278.467))) > injectionSwitch.y))), false, false, false))))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(278.467))) > injectionSwitch.y)))), false))), ! (! (! (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(278.467))) > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(_GLF_IDENTITY(278.467, (_GLF_IDENTITY(278.467, mix(float(278.467), float(_GLF_FUZZED(float(-27449))), bool(false)))) - 0.0)))) > injectionSwitch.y)))), false)))))))))));
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
