#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(vec3(1.0, sin(0.0), sqrt(1.0)))) : _GLF_FUZZED(-882.894))))))) + vec2(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(vec3(0.0, 1.0, 0.0)))) / 1.0))).x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(vec3(1.0, sin(0.0), sqrt(1.0)))) : _GLF_FUZZED(-882.894))))))) + vec2(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(vec3(0.0, 1.0, 0.0)))) / 1.0))).x, (true ? _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(vec3(1.0, sin(0.0), sqrt(1.0)))) : _GLF_FUZZED(-882.894))))))) + vec2(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(vec3(0.0, 1.0, 0.0)))) / 1.0))).x : _GLF_FUZZED(-7.9))), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(vec3(1.0, sin(0.0), sqrt(1.0)))) : _GLF_FUZZED(-882.894))))))) + vec2(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(vec3(0.0, 1.0, 0.0)))) / 1.0))).x)), 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)))) + vec2(0.0, 0.0), clamp((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)))) + vec2(0.0, 0.0), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)))) + vec2(0.0, 0.0), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)))) + vec2(0.0, 0.0)))), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)))) + vec2(0.0, 0.0), clamp((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))), max((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))), (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))))) / sqrt(vec2(1.0, 1.0)))) + vec2(0.0, 0.0), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)))) + vec2(0.0, 0.0), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)))) + vec2(0.0, 0.0)))))).x, mix(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)))) + vec2(0.0, 0.0), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)))) + vec2(0.0, 0.0), clamp((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)))) + vec2(0.0, 0.0), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)))) + vec2(0.0, 0.0), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)))) + vec2(0.0, 0.0)))) / vec2(1.0, 1.0)), (false ? _GLF_FUZZED(faceforward(injectionSwitch, injectionSwitch, vec2(-51.22, -3.8))) : _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / _GLF_IDENTITY(sqrt(vec2(1.0, 1.0)), (true ? sqrt(vec2(1.0, 1.0)) : _GLF_FUZZED(smoothstep(fract(injectionSwitch), injectionSwitch, vec2(938.771, 477.533))))))) + vec2(0.0, 0.0), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)))) + vec2(0.0, 0.0), clamp((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)))) + vec2(0.0, 0.0), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), vec2(_GLF_IDENTITY(1.0, float(mat4x2(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)))) + vec2(0.0, 0.0), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / _GLF_IDENTITY(sqrt(vec2(1.0, 1.0)), _GLF_IDENTITY(vec2(vec3(sqrt(vec2(1.0, 1.0)), 1.0)), min(vec2(vec3(sqrt(vec2(1.0, 1.0)), 1.0)), vec2(vec3(sqrt(vec2(1.0, 1.0)), 1.0))))))) + vec2(0.0, 0.0)))) / vec2(1.0, 1.0)))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0))), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((5733.9911))), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) + vec2(0.0, 0.0))) + vec2(0.0, 0.0), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-66.51))))))) + vec2(0.0, 0.0), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)))) + vec2(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-7095.4126))), 0.0)), 0.0)))).x), mix(float(_GLF_FUZZED(53.30)), float(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), clamp(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))) * (injectionSwitch))), clamp((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), clamp(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))) * (injectionSwitch))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), clamp(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))) * (injectionSwitch))), mix(vec2(((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), clamp(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))) * (injectionSwitch))))[0], ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), clamp(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))) * (injectionSwitch))))[1]), vec2(_GLF_FUZZED(5.1), _GLF_FUZZED(-61.32)), bvec2(false, false))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), clamp(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))) * (injectionSwitch))))) / sqrt(vec2(1.0, 1.0)))), vec2(0.0, 0.0) + (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), clamp(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))) * (injectionSwitch))), clamp((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), clamp(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))) * (injectionSwitch))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), clamp(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))) * (injectionSwitch))), mix(vec2(((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), clamp(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))) * (injectionSwitch))))[0], ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), clamp(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))) * (injectionSwitch))))[1]), vec2(_GLF_FUZZED(5.1), _GLF_FUZZED(-61.32)), bvec2(false, false))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), clamp(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))) * (injectionSwitch))))) / sqrt(vec2(1.0, 1.0)))), mix(vec2(((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), clamp(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))) * (injectionSwitch))), clamp((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), clamp(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))) * (injectionSwitch))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), clamp(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))) * (injectionSwitch))), mix(vec2(((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), clamp(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))) * (injectionSwitch))))[0], ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), clamp(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))) * (injectionSwitch))))[1]), vec2(_GLF_FUZZED(5.1), _GLF_FUZZED(-61.32)), bvec2(false, false))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), clamp(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))) * (injectionSwitch))))) / sqrt(vec2(1.0, 1.0)))))[0], ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), clamp(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))) * (injectionSwitch))), clamp((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), clamp(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))) * (injectionSwitch))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), clamp(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))) * (injectionSwitch))), mix(vec2(((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), clamp(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))) * (injectionSwitch))))[0], ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), clamp(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))) * (injectionSwitch))))[1]), vec2(_GLF_FUZZED(5.1), _GLF_FUZZED(-61.32)), bvec2(false, false))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), clamp(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)), vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))) * (injectionSwitch))))) / sqrt(vec2(1.0, 1.0)))))[1]), vec2(_GLF_FUZZED(vec4(-7.9, 4.0, -78.73, 54.92).x), _GLF_FUZZED(0.3)), bvec2(false, false))))) + vec2(_GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)))) + vec2(0.0, 0.0), clamp((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)))) + vec2(0.0, 0.0), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)))) + vec2(0.0, 0.0), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)))) + vec2(0.0, 0.0)))) / vec2(1.0, 1.0)), clamp((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)))) + vec2(0.0, 0.0), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-7.2)), float(1.0), bool(true))), 1.0)), 1.0) * (injectionSwitch))) / vec2(1.0, 1.0))) / sqrt(vec2(1.0, 1.0)))) + vec2(0.0, 0.0), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)))) + vec2(0.0, 0.0)))).x), mix(float(_GLF_FUZZED(-8.3)), float(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)))) + vec2(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(1.2)), bool(false))), 0.0)), 0.0), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)))) + vec2(0.0, 0.0), clamp((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)))) + vec2(0.0, 0.0), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)))) + vec2(0.0, 0.0), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, float(mat4(1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, 1.0))))), 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)))) + vec2(0.0, 0.0)))) / vec2(1.0, 1.0)), clamp((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * ((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)))))) + vec2(0.0, 0.0), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))))) + vec2(0.0, 0.0), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)))) + vec2(0.0, 0.0)))).x), float(mat4x2(float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)))) + vec2(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(1.2)), bool(false))), 0.0)), 0.0), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)))) + vec2(0.0, 0.0), clamp((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)))) + vec2(0.0, 0.0), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)))) + vec2(0.0, 0.0), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, float(mat4(1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, 1.0))))), 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)))) + vec2(0.0, 0.0)))) / vec2(1.0, 1.0)), clamp((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * ((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)))))) + vec2(0.0, 0.0), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))))) + vec2(0.0, 0.0), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / sqrt(vec2(1.0, 1.0)))) + vec2(0.0, 0.0)))).x), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0)))), bool(true)))), bool(true))), float(_GLF_FUZZED(9169.9623)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))), true && (_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), bool(bool((_GLF_IDENTITY(false, (false) || false))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), true && (_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))), bool(bool((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))))), ! (! (_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
          return;
         return;
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)), (bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          return;
         barrier();
        }
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
    return;
   return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true && (bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, false || (false)))), ! (_GLF_IDENTITY(! ((! (_GLF_IDENTITY(false, false || (false))))), true && (! ((! (_GLF_IDENTITY(false, false || (false))))))))))))
      return;
     return;
    }
   return;
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), bool(bvec3(_GLF_DEAD(false), true, false))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), false)), bvec3(bvec4(bvec3(bvec4(bvec3(false, true, false), false)), true))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(false, false || (false)) || (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))
          return;
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), false || (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), ! (! (false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))))))))))))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && _GLF_IDENTITY((false), ! (! ((false)))), true && (true && _GLF_IDENTITY((false), ! (! ((false)))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), false, true)), bool(bvec3(bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), false, true)), false, false))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true))))))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(171.954)))) * (injectionSwitch)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, true)))))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec3(gl_NumWorkGroups)), clamp(uvec3(uvec3(gl_NumWorkGroups)), uvec3(uvec3(gl_NumWorkGroups)), uvec3(uvec3(gl_NumWorkGroups))))).x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED((- -5.4))), float(injectionSwitch[1]), bool(true))))).y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED((- -5.4))), float(injectionSwitch[1]), bool(true))))).y))), false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
           return;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) : _GLF_FUZZED(3.0))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)) > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)) > injectionSwitch.y))))))))))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(46.40)), bool(false))), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - sin(0.0)), injectionSwitch.y)))))) && true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, true, false)))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
    }
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(false))
          return;
        }
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))), (bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))))) && true)))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) / _GLF_IDENTITY(uvec3(1u, 1u, 1u), (uvec3(1u, 1u, 1u)) | (uvec3(1u, 1u, 1u))))) / uvec3(1u, 1u, 1u)).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y) || false)))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 0.0, 1.0)), vec2(mat2x3(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 0.0, 1.0)), 0.0, 0.0, 1.0, 0.0)))).x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (workgroup_size) | 0u) * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id))) | (_GLF_IDENTITY(workgroup_id, 0u ^ (_GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id))) | (_GLF_IDENTITY(workgroup_id, 0u ^ (_GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))), 1u, 1u)), 1u * (uint(uvec3(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id))) | (_GLF_IDENTITY(workgroup_id, 0u ^ (_GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))), 1u, 1u))))), 0u | (workgroup_id));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u), min(subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 1u))), subgroup_size)), subgroup_size, _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(write_val) : subgroup_size)))), subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(subgroup_id))), subgroup_size))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) << 0u)) - 0u) + _GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) | 0u, ~ (~ ((subgroup_local_id) | 0u)))), subgroup_local_id));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(write_val, uint(_GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)), 4, 64, _GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, (4) >> 0))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, sin(0.0), 0.0, 1.0, 1.0))), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, sin(0.0), 0.0, sqrt(0.0), determinant(mat4(1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 1.0, log(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), false || (bool(bvec4(false, false, false, true)))))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (_GLF_IDENTITY(bool(_GLF_DEAD(false)), true && (bool(_GLF_DEAD(false)))))))), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (_GLF_IDENTITY(bool(_GLF_DEAD(false)), true && (bool(_GLF_DEAD(false)))))))), false, true)))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))))
        return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), false))))))), ! (_GLF_IDENTITY(! ((false)), (! ((_GLF_IDENTITY(false, false || (false))))) && true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), false))))))), ! (_GLF_IDENTITY(! ((false)), _GLF_IDENTITY((! ((_GLF_IDENTITY(false, false || (false))))), (_GLF_IDENTITY((! ((_GLF_IDENTITY(false, false || (false))))), bool(bool((! ((_GLF_IDENTITY(false, false || (false))))))))) || false) && true)))))) && true))), _GLF_IDENTITY(false || ((! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), false))))))), ! (_GLF_IDENTITY(! ((false)), (! ((_GLF_IDENTITY(false, false || (false))))) && true))) && true)))), (false || ((! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), false))))))), ! (_GLF_IDENTITY(! ((false)), (! ((_GLF_IDENTITY(false, false || (false))))) && true))) && true, (_GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x < injectionSwitch.y)))) && (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(_GLF_IDENTITY(! ((false)), bool(_GLF_IDENTITY(bvec2(! ((false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(_GLF_IDENTITY(bvec2(bvec2(! ((false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec3(bvec2(bvec2(! ((false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))))))), _GLF_IDENTITY(false, (false) || false)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))))), (! (bool(_GLF_IDENTITY(bvec2((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))))) && true))))), (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bool(_GLF_IDENTITY(false, false || (false)))))))) && true))) && true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) && true)))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), false))))))), ! (_GLF_IDENTITY(! ((false)), (! ((_GLF_IDENTITY(false, false || (false))))) && true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), false))))))), ! (_GLF_IDENTITY(! ((false)), _GLF_IDENTITY((! ((_GLF_IDENTITY(false, false || (false))))), (_GLF_IDENTITY((! ((_GLF_IDENTITY(false, false || (false))))), bool(bool((! ((_GLF_IDENTITY(false, false || (false))))))))) || false) && true)))))) && true))), _GLF_IDENTITY(false || ((! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), false))))))), ! (_GLF_IDENTITY(! ((false)), (! ((_GLF_IDENTITY(false, false || (false))))) && true))) && true)))), (false || ((! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), false))))))), ! (_GLF_IDENTITY(! ((false)), (! ((_GLF_IDENTITY(false, false || (false))))) && true))) && true, (_GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x < injectionSwitch.y)))) && (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(_GLF_IDENTITY(! ((false)), bool(_GLF_IDENTITY(bvec2(! ((false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(_GLF_IDENTITY(bvec2(bvec2(! ((false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec3(bvec2(bvec2(! ((false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))))))), _GLF_IDENTITY(false, (false) || false)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))))), (! (bool(_GLF_IDENTITY(bvec2((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))))) && true))))), (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bool(_GLF_IDENTITY(false, false || (false)))))))) && true))) && true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) && true)))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), false))))))), ! (_GLF_IDENTITY(! ((false)), (! ((_GLF_IDENTITY(false, false || (false))))) && true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), false))))))), ! (_GLF_IDENTITY(! ((false)), _GLF_IDENTITY((! ((_GLF_IDENTITY(false, false || (false))))), (_GLF_IDENTITY((! ((_GLF_IDENTITY(false, false || (false))))), bool(bool((! ((_GLF_IDENTITY(false, false || (false))))))))) || false) && true)))))) && true))), _GLF_IDENTITY(false || ((! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), false))))))), ! (_GLF_IDENTITY(! ((false)), (! ((_GLF_IDENTITY(false, false || (false))))) && true))) && true)))), (false || ((! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), false))))))), ! (_GLF_IDENTITY(! ((false)), (! ((_GLF_IDENTITY(false, false || (false))))) && true))) && true, (_GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x < injectionSwitch.y)))) && (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(_GLF_IDENTITY(! ((false)), bool(_GLF_IDENTITY(bvec2(! ((false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(_GLF_IDENTITY(bvec2(bvec2(! ((false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec3(bvec2(bvec2(! ((false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))))))), _GLF_IDENTITY(false, (false) || false)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))))), (! (bool(_GLF_IDENTITY(bvec2((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))))) && true))))), (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bool(_GLF_IDENTITY(false, false || (false)))))))) && true))) && true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) && true))))))))) || false)))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, false, true)))))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint read_val = atomicLoad(write_val, _GLF_IDENTITY(4, (4) | (4)), 64, 2);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bool(! (false)), ! (! (bool(! (false)))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(11.95)), vec2(_GLF_FUZZED(2.5), (injectionSwitch)[1]), bvec2(false, true))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-60.12), _GLF_FUZZED(8.4)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))).y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_IDENTITY(true, false || (true))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 buf[virtual_gid] = uint(subgroupAllEqual(_GLF_IDENTITY(read_val, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(read_val, (_GLF_IDENTITY(read_val, _GLF_IDENTITY((read_val) << 0u, ~ (~ ((read_val) << 0u))))) / 1u)), (false ? _GLF_FUZZED(workgroup_base) : ~ (_GLF_IDENTITY(read_val, (_GLF_IDENTITY(_GLF_IDENTITY(read_val, max(read_val, read_val)), clamp(_GLF_IDENTITY(read_val, max(read_val, read_val)), _GLF_IDENTITY(read_val, max(read_val, read_val)), _GLF_IDENTITY(read_val, max(read_val, read_val))))) / _GLF_IDENTITY(1u, min(1u, 1u))))))))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 1
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
