#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uvec4 GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base;
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) || false)) || false))))
    barrier();
  }
 uvec4 GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false, false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, int(ivec4(1, 0, 1, 1)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.z = subgroup_id;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, 0.0 + (1.0))), (mat2(1.0)) - mat2(0.0, 0.0, 0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(63.25)), bool(false)))))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), true && (_GLF_IDENTITY(false, ! (! (false)))))))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.w = subgroup_size;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
  {
   GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.z = subgroup_local_id;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), injectionSwitch.y)))); _GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_injected_loop_counter ++)))
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! (false)))))));
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), false, true, true))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), true && (! (! (false))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), true && (! (! (false)))))))), bool(bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), true && (! (! (false)))))))), bool(bvec2(bool((_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), true && (! (! (false)))))))), true)))))))))))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 else
  {
   GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.x = _GLF_IDENTITY(num_workgroup, (num_workgroup) * 1u);
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(injectionSwitch, _GLF_IDENTITY(1.0, (1.0) + 0.0), sin(0.0), 0.0, 0.0, 1.0, sqrt(1.0), 1.0), transpose(transpose(mat3(injectionSwitch, 1.0, sin(0.0), 0.0, 0.0, 1.0, sqrt(1.0), 1.0))))), _GLF_IDENTITY(mat2(1.0) * (vec2(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, sin(0.0), 0.0, 0.0, 1.0, sqrt(1.0), 1.0), transpose(transpose(mat3(injectionSwitch, 1.0, sin(0.0), 0.0, 0.0, 1.0, sqrt(1.0), 1.0)))))), mat2(1.0) * (_GLF_IDENTITY(mat2(1.0) * (vec2(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, sin(0.0), 0.0, 0.0, 1.0, sqrt(1.0), 1.0), transpose(transpose(mat3(injectionSwitch, 1.0, sin(0.0), 0.0, 0.0, 1.0, sqrt(1.0), 1.0)))))), mat2(1.0) * (mat2(1.0) * (vec2(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, sin(0.0), 0.0, 0.0, 1.0, sqrt(1.0), 1.0), transpose(transpose(mat3(injectionSwitch, 1.0, sin(0.0), 0.0, 0.0, 1.0, sqrt(1.0), 1.0)))))))))))).x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
 for(int _injected_loop_counter = (1 | 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))), true, false)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))), true, false)), true)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))), true, false)), true)))))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, bool(bvec4(true, true, true, false))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, bool(bvec4(true, true, true, false))), false, false))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)))))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.w = workgroup_base;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint subgroup_base = _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.z * GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.w, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.z * GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.w, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(workgroup_id), (_GLF_FUZZED(workgroup_id)) | (_GLF_FUZZED(workgroup_id))), 0u | (_GLF_IDENTITY(_GLF_FUZZED(workgroup_id), (_GLF_FUZZED(workgroup_id)) | (_GLF_FUZZED(workgroup_id))))) : GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.z * _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.w, _GLF_IDENTITY(max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.w, 0u ^ (GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.w)), GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.w), 0u + (max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.w, 0u ^ (GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.w)), GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.w))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.z, (GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.z) | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.z, (GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.z) << 0u))) * _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.w, uint(uvec3(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.w, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 1u))), (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(workgroup_id), ~ (~ (_GLF_FUZZED(workgroup_id)))), (_GLF_FUZZED(workgroup_id)) | (_GLF_FUZZED(workgroup_id))) : GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.z * _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size, max(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size, GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size)).w, max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.w, 0u ^ (GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.w)), GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.w)))))) ^ _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), _GLF_IDENTITY(0u, 0u ^ (0u))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.y = _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(1u, _GLF_IDENTITY((1u), uint(uint((1u)))) | (1u)) * (subgroup_base)), 1u * (GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.y = _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(min(mix(subgroup_size, subgroup_size, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && true)), 115809u)))) * (subgroup_base))));
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, _GLF_IDENTITY(int(ivec2(5, 0)), clamp(int(ivec2(5, 0)), int(ivec2(5, 0)), int(ivec2(5, 0)))))) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, _GLF_IDENTITY(int(ivec2(5, 0)), clamp(int(ivec2(5, 0)), int(ivec2(5, 0)), int(ivec2(5, 0)))))) << 0), ~ (~ (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, _GLF_IDENTITY(int(ivec2(5, 0)), clamp(int(ivec2(5, 0)), int(ivec2(5, 0)), _GLF_IDENTITY(int(ivec2(5, 0)), clamp(int(ivec2(5, 0)), int(ivec2(5, 0)), int(ivec2(5, 0)))))))) << 0))))) / 1)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0)) << 0), _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), _GLF_IDENTITY(_injected_loop_counter, 0 + (_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter))))), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0)) << 0), _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, 0 + (_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter))))), (true ? clamp(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0)) << 0), _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, 0 + (_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter))))) : _GLF_FUZZED(21441)))) / 1)) > _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) - 0)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), sin(0.0), length(vec3(0.0, 0.0, 0.0)), 0.0))).y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, 1.0, 1.0, 1.0))).y), _GLF_IDENTITY(sin(0.0), min(_GLF_IDENTITY(sin(0.0), min(sin(0.0), sin(0.0))), _GLF_IDENTITY(sin(0.0), 1.0 * (sin(0.0))))), length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(0.0, exp(0.0), 0.0, 0.0, 0.0, log(1.0)), mat3x2(mat3(_GLF_IDENTITY(mat3x2(0.0, exp(0.0), 0.0, 0.0, 0.0, log(1.0)), (true ? mat3x2(0.0, exp(0.0), 0.0, 0.0, 0.0, log(1.0)) : _GLF_FUZZED(mat3x2(72.61, 3.3, 7.5, -576.533, -178.887, 213.952)))))))), (true ? float(_GLF_IDENTITY(mat3x2(0.0, exp(0.0), 0.0, 0.0, 0.0, log(1.0)), mat3x2(mat3(_GLF_IDENTITY(mat3x2(0.0, exp(0.0), 0.0, 0.0, 0.0, log(1.0)), (true ? mat3x2(0.0, exp(0.0), 0.0, 0.0, 0.0, log(1.0)) : _GLF_FUZZED(mat3x2(72.61, 3.3, 7.5, -576.533, -178.887, 213.952)))))))) : _GLF_FUZZED(8.6)))))), 0.0))).y), false), bvec2(bvec4(_GLF_IDENTITY(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), sin(0.0), length(vec3(0.0, 0.0, 0.0)), 0.0))).y), false), bvec2(bvec2(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), 1.0, 0.0, _GLF_IDENTITY(length(vec4(0.0, 0.0, 0.0, 0.0)), clamp(length(vec4(0.0, 0.0, 0.0, 0.0)), length(vec4(0.0, 0.0, 0.0, 0.0)), length(vec4(0.0, 0.0, 0.0, 0.0)))), 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), sin(0.0), length(vec3(0.0, 0.0, 0.0)), 0.0))).y), false)))), false, false))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, false || (true)) && (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))) || false, ! (_GLF_IDENTITY(! ((_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! ((_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false))))))) || false)))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))))))
    barrier();
  }
 else
  {
  }
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)), true, true))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false ? _GLF_FUZZED(fma(-3256.9698, 827.267, 3579.2569)) : injectionSwitch.x, _GLF_IDENTITY(round(length(normalize(1.0))) * (false ? _GLF_FUZZED(fma(-3256.9698, 827.267, 3579.2569)) : injectionSwitch.x), (_GLF_IDENTITY(round(length(normalize(1.0))) * (false ? _GLF_FUZZED(fma(-3256.9698, 827.267, 3579.2569)) : injectionSwitch.x), float(mat3(round(length(normalize(1.0))) * (false ? _GLF_FUZZED(fma(_GLF_IDENTITY(-3256.9698, float(mat2(-3256.9698, 1.0, log(1.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))))), 827.267, 3579.2569)) : injectionSwitch.x), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0)))) / _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))))) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
  }
 uint virtual_gid = GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.w + GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.y + _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.z, ~ (~ (GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.z)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base, (false ? _GLF_FUZZED((uvec4(uvec2(86852u, 71938u), uvec2(4367u, _GLF_IDENTITY(14889u, max(14889u, 14889u)))) & GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base)) : GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base)).w + _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.y, clamp(GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.y, GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.y, GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.y)) + _GLF_IDENTITY(((GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.z + 1) % GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.w), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(((GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.z + 1) % GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.w), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(98.61)), float(injectionSwitch.y), bool(true))))), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec3((_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(vec3(-591.370, -3152.8946, -5.0).g)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(vec3(-591.370, -3152.8946, -5.0).g)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y)) && true)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, false))), false)), bool(_GLF_IDENTITY(bvec3(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec3((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, false))), false)), false, true), bvec3(bvec4(bvec3(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec3((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, false))), false)), false, true), false)))))) && true) ? ((GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.z + 1) % GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.w) : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u))))), (false ? _GLF_FUZZED(subgroup_id) : uint(_GLF_IDENTITY(((GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.z + 1) % GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.w), (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), ! (! (bool(bvec4((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))), false || (_GLF_IDENTITY(bool(bvec4((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), ! (! (bool(bvec4((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(41.91)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), bool(true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), ! (! (_GLF_IDENTITY(true, (true) && true))))))))))))) ? ((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.z, (false ? _GLF_FUZZED(workgroup_size) : GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.z)) + 1) % GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.w) : _GLF_FUZZED(subgroup_id)))))))), min(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base, (false ? _GLF_FUZZED((uvec4(uvec2(86852u, 71938u), uvec2(4367u, _GLF_IDENTITY(14889u, max(14889u, 14889u)))) & GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base)) : GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base)).w + _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.y, clamp(GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.y, GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.y, GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.y)) + _GLF_IDENTITY(((GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.z + 1) % GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.w), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(((GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.z + 1) % GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.w), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec3((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true))))), false, false))), false)), bool(_GLF_IDENTITY(bvec3(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec3((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-658.219)), float(injectionSwitch.x), bool(true))))) < injectionSwitch.y))))), false, false))), false)), false, true), bvec3(bvec4(bvec3(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), bool(bvec3((_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)).x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, false))), _GLF_IDENTITY(false, ! (! (false))))), false, true), false)))))) && true) ? (_GLF_IDENTITY((GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.z + 1) % GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.w, (true ? (GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.z + 1) % GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.w : _GLF_FUZZED(floatBitsToUint(0.7))))) : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u))))), (false ? _GLF_FUZZED(subgroup_id) : uint(_GLF_IDENTITY(((GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.z + 1) % GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.w), (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), ! (! _GLF_IDENTITY((bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(8905.7740)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), false || ((bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(8905.7740)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))))), false || (_GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)) < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), ! (! (bool(bvec4((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(41.91)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), _GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(true), ! (! (bool(true))))) && true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), (true) && true)))))))))) ? ((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.z, (false ? _GLF_FUZZED(workgroup_size) : GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.z)) + 1) % GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.w) : _GLF_FUZZED(subgroup_id)))))))), _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base, (false ? _GLF_FUZZED((uvec4(uvec2(86852u, 71938u), uvec2(4367u, _GLF_IDENTITY(14889u, max(14889u, 14889u)))) & GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base)) : GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base)).w + _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.y, clamp(GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.y, GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.y, GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.y)) + _GLF_IDENTITY(((GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.z + 1) % GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.w), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base, (false ? _GLF_FUZZED(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size) : GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base)).z + 1) % GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.w), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec3((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, false))), false)), bool(_GLF_IDENTITY(bvec3(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, false))), false)), false, true), bvec3(bvec4(bvec3(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec3((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, false))), false)), _GLF_IDENTITY(false, (false) || false), true), false)))))) && true) ? ((GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.z + 1) % GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.w) : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u))))), (false ? _GLF_FUZZED(subgroup_id) : uint(_GLF_IDENTITY(((GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.z + _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-26453) : 1))) % GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.w), (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), ! (! (bool(bvec4((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)), false, true))))), false || (_GLF_IDENTITY(bool(bvec4((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), ! (! (bool(bvec4((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(41.91)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), bool(true)))), _GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false)))))))), (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(true, (true) && true)))))))))) ? ((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.z, (false ? _GLF_FUZZED(workgroup_size) : GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.z)) + 1) % GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.w) : _GLF_FUZZED(subgroup_id))))))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))), (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))) || false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.x = next_virtual_gid, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.x = next_virtual_gid, 1u * (GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.x = next_virtual_gid))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)))).x > injectionSwitch.y))))
  barrier();
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.y = read, 0u | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.y = read, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(num_workgroup) : GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.y = read))));
 if((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.z % 2, max(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.z % 2, clamp(GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.z % 2, GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.z % 2, _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.z, (GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.z) / 1u) % 2)), GLF_merged4_0_1_13_1_1_13_2_1_17_3_1_14num_workgroupsubgroup_basesubgroup_local_idworkgroup_base.z % 2))) == 0)
  {
   if(_GLF_DEAD(false))
    barrier();
   subgroupAll(false);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), false || ((false)))))))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     atomicStore(buf[GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.x], uint(1), 4, 64, 4);
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))), false || (_GLF_WRAPPED_LOOP(false)))))));
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))), min(float(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))), float(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)))))) > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))))))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       barrier();
      }
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   subgroupAll(false);
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, tan(0.0) + (injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), true && (bool(_GLF_IDENTITY(false, false || (false))))))))))), (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), (injectionSwitch.x > injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true, (((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true) || false))), false, false, _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (! (! (false))))), true && (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))), false)), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)), false, false, _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))), false)), false || (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)), false, false, _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), bool(bool(! (false)))))))), true && (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))), false))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(1, (1) << 0) * (int(2))))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.x, 0u + (GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.x))], _GLF_IDENTITY(uint(1), clamp(uint(1), uint(1), uint(1))), 4, 64, 4);
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y) && true), true, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (! (true)))), (bool(_GLF_IDENTITY(true, ! (! (true))))) && true)), _GLF_IDENTITY(bool(bvec4(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (! (true)))), (bool(_GLF_IDENTITY(true, ! (! (true))))) && true)), true, true, false)), bool(bvec4(bool(bvec4(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (! (true)))), (bool(_GLF_IDENTITY(true, ! (! (true))))) && true)), true, true, false)), true, false, false))))), true)), (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true), true, true, true))) && true))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / vec2(1.0, 1.0)).x < injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / vec2(1.0, 1.0)).x < injectionSwitch.y)))), true && (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / vec2(1.0, 1.0)).x < injectionSwitch.y)))))))))))) || false, ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((-7777.9704))), float(injectionSwitch.y), bool(true)))))))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) || false), (! ((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! _GLF_IDENTITY((! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ((! _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y)))), bool(bvec4((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y)))), true, true, false))))) && true))) || false)) || false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), _GLF_IDENTITY(bool(bvec4(bool(true), true, true, false)), _GLF_IDENTITY(true && _GLF_IDENTITY((bool(bvec4(bool(true), true, true, false))), ! (! (_GLF_IDENTITY((bool(bvec4(bool(true), true, true, false))), bool(bvec3((bool(bvec4(bool(true), true, true, false))), true, false)))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(true && (bool(bvec4(bool(true), true, true, false))), (true && (bool(bvec4(bool(true), true, true, false)))) && true))), false || ((! (_GLF_IDENTITY(true && (bool(bvec4(bool(true), true, true, false))), (true && (bool(bvec4(bool(true), true, true, false)))) && true)))))))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), _GLF_IDENTITY(bool(bvec4(bool(true), true, true, false)), _GLF_IDENTITY(true && _GLF_IDENTITY((bool(bvec4(bool(true), true, true, false))), ! (! (_GLF_IDENTITY((bool(bvec4(bool(true), true, true, false))), bool(bvec3((bool(bvec4(bool(true), true, true, false))), true, false)))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(true && (bool(bvec4(bool(true), true, true, false))), (true && (bool(bvec4(bool(true), true, true, false)))) && true))), false || ((! (_GLF_IDENTITY(true && (bool(bvec4(bool(true), true, true, false))), (true && (bool(bvec4(bool(true), true, true, false)))) && true)))))))))))), (bool(bool(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), _GLF_IDENTITY(bool(bvec4(bool(true), true, true, false)), _GLF_IDENTITY(true && _GLF_IDENTITY((bool(bvec4(bool(true), true, true, false))), ! (! (_GLF_IDENTITY((bool(bvec4(bool(true), true, true, false))), bool(bvec3((bool(bvec4(bool(true), true, true, false))), true, false)))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(true && (bool(bvec4(bool(true), true, true, false))), (true && (bool(bvec4(bool(true), true, true, false)))) && true))), false || ((! (_GLF_IDENTITY(true && (bool(bvec4(bool(true), true, true, false))), (true && (bool(bvec4(bool(true), true, true, false)))) && true))))))))))))) || false))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, false))))))) || false)))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(false, bool(bool(false)))) || false)))
          barrier();
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), int(ivec4(int(8), 1, 1, 1))), _GLF_IDENTITY(int(8), ~ (~ (_GLF_IDENTITY(int(8), (int(8)) | (int(8))))))))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 barrier();
                }
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), (bool(true)) || false)), (bool(_GLF_IDENTITY(bool(true), (bool(true)) || false))) || false)))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(0.8)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6.5)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6.5)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6.5)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y), ! (! (bool(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6.5)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))))))))))
          barrier();
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) / 1.0, mix(float(_GLF_FUZZED(5.1)), float(_GLF_IDENTITY((injectionSwitch.x) / 1.0, 1.0 * ((injectionSwitch.x) / 1.0))), bool(true)))) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           barrier();
          }
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 subgroupBarrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(_GLF_IDENTITY(int(4), ~ (~ (int(4)))), int(4), int(4))), (false ? _GLF_IDENTITY(_GLF_FUZZED(-14389), max(_GLF_FUZZED(-14389), _GLF_FUZZED(-14389))) : int(_GLF_IDENTITY(4, (4) - 0))))) | _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(4, int(int(4)))), (int(4)) / 1)), (false ? _GLF_FUZZED(-29664) : (_GLF_IDENTITY(int(_GLF_IDENTITY(4, int(int(4)))), (int(4)) / 1))))), max(int(4), int(4))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (false ? _GLF_IDENTITY(_GLF_FUZZED(-14389), 0 + (_GLF_FUZZED(-14389))) : int(4)))) | (_GLF_IDENTITY(int(4), (int(4)) / 1))), max(int(4), int(4))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 | (int(4))), (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-14389) : int(_GLF_IDENTITY(4, max(4, 4)))))) | (_GLF_IDENTITY(int(4), _GLF_IDENTITY((int(4)), 0 | (_GLF_IDENTITY((int(4)), int(ivec3((int(4)), (88679 & 0), 1))))) / 1))), max(int(4), int(4)))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-14389) : int(4)))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) << (81206 & 0))), (int(4)) / 1))), max(int(4), int(4))))), 0, 0, 0), (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) ^ 0)), (false ? _GLF_FUZZED(-14389) : int(4)))) | _GLF_IDENTITY((_GLF_IDENTITY(int(4), (int(4)) / 1)), (false ? _GLF_FUZZED(-30607) : _GLF_IDENTITY((_GLF_IDENTITY(int(4), (int(4)) / 1)), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(int(4), (int(4)) / 1)), 0 + ((_GLF_IDENTITY(int(4), (int(4)) / 1)))))))))), max(int(4), int(4))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 | (int(4))), (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-14389) : int(4)))) | (_GLF_IDENTITY(int(4), _GLF_IDENTITY((int(4)), 0 | (_GLF_IDENTITY((int(4)), int(ivec3((int(4)), (88679 & 0), 1))))) / 1))), max(int(4), int(4)))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-14389) : int(4)))) | (_GLF_IDENTITY(int(4), (int(4)) / 1))), max(int(4), int(4))))), 0, 0, 0), (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-14389) : int(4)))) | (_GLF_IDENTITY(int(4), (int(4)) / 1))), max(int(4), int(4))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 | (int(4))), (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-14389) : int(4)))) | (_GLF_IDENTITY(int(4), _GLF_IDENTITY((int(4)), _GLF_IDENTITY(0 | (_GLF_IDENTITY((int(4)), int(ivec3((int(4)), (88679 & 0), 1)))), (true ? _GLF_IDENTITY(0 | (_GLF_IDENTITY((int(4)), int(ivec3((int(4)), (88679 & 0), 1)))), 0 | (0 | (_GLF_IDENTITY((int(4)), int(ivec3((int(4)), (88679 & 0), 1)))))) : _GLF_FUZZED(71143)))) / 1))), max(int(4), int(4)))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-14389) : int(4)))) | (_GLF_IDENTITY(int(4), (int(4)) / 1))), max(int(4), int(4))))), 0, 0, 0), _GLF_IDENTITY((ivec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-14389) : int(4)))) | (_GLF_IDENTITY(int(4), (int(4)) / 1))), max(int(4), int(4))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 | (int(4))), (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-14389) : int(4)))) | (_GLF_IDENTITY(int(4), _GLF_IDENTITY((int(4)), 0 | (_GLF_IDENTITY((int(4)), int(ivec3((int(4)), (88679 & 0), 1))))) / 1))), max(int(4), int(4)))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-14389) : int(4)))) | (_GLF_IDENTITY(int(4), (int(4)) / 1))), max(int(4), int(4))))), 0, 0, 0)) | ivec4(0, 0, 0, 0), clamp(_GLF_IDENTITY((ivec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-14389) : int(4)))) | (_GLF_IDENTITY(int(4), (int(4)) / 1))), max(int(4), int(4))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 | (int(4))), (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-14389) : int(4)))) | (_GLF_IDENTITY(int(4), _GLF_IDENTITY((int(4)), 0 | (_GLF_IDENTITY((int(4)), int(ivec3((int(4)), (88679 & 0), 1))))) / 1))), max(int(4), int(4)))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-14389) : int(4)))) | (_GLF_IDENTITY(int(4), (int(4)) / 1))), max(int(4), int(4))))), 0, 0, 0)) | ivec4(0, 0, 0, 0), ~ (~ ((ivec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-14389) : int(4)))) | (_GLF_IDENTITY(int(4), (int(4)) / 1))), max(int(4), int(4))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 | (int(4))), (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-14389) : int(4)))) | (_GLF_IDENTITY(int(4), _GLF_IDENTITY((int(4)), 0 | (_GLF_IDENTITY((int(4)), int(ivec3((int(4)), (88679 & 0), 1))))) / 1))), max(int(4), int(4)))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-14389) : int(4)))) | (_GLF_IDENTITY(int(4), (int(4)) / 1))), max(int(4), int(4))))), 0, 0, 0)) | ivec4(0, 0, 0, 0)))), (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-14389) : int(4)))) | (_GLF_IDENTITY(int(4), (int(4)) / 1))), max(int(4), int(4))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 | (int(4))), (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-14389) : int(4)))) | (_GLF_IDENTITY(int(4), _GLF_IDENTITY((int(4)), 0 | (_GLF_IDENTITY((int(4)), int(ivec3((int(4)), (88679 & 0), 1))))) / 1))), max(int(4), int(4)))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-14389) : int(4)))) | (_GLF_IDENTITY(int(4), (int(4)) / 1))), max(int(4), int(4))))), 0, 0, 0)) | ivec4(0, 0, 0, 0), (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-14389) : int(4)))) | (_GLF_IDENTITY(int(4), (int(4)) / 1))), max(int(4), int(4))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 | (int(4))), (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-14389) : int(4)))) | (_GLF_IDENTITY(int(4), _GLF_IDENTITY((int(4)), 0 | (_GLF_IDENTITY((int(4)), int(ivec3((int(4)), (88679 & 0), 1))))) / 1))), max(int(4), int(4)))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-14389) : int(4)))) | (_GLF_IDENTITY(int(4), (int(4)) / 1))), max(int(4), int(4))))), 0, 0, 0)) | ivec4(0, 0, 0, 0))))) | (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-14389) : int(4)))) | (_GLF_IDENTITY(int(4), (int(4)) / 1))), max(int(4), int(4))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 | (int(4))), (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-14389) : int(4)))) | (_GLF_IDENTITY(int(4), _GLF_IDENTITY((int(4)), 0 | (_GLF_IDENTITY((int(4)), int(ivec3((int(4)), (88679 & 0), 1))))) / 1))), max(int(4), int(4)))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-14389) : int(4)))) | (_GLF_IDENTITY(int(4), (int(4)) / 1))), max(int(4), int(4))))), 0, 0, 0), (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-14389) : int(4)))) | (_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, (4) + int(_GLF_ZERO(0.0, injectionSwitch.x))))) / 1))), max(int(4), int(4))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 | (int(4))), (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-14389) : int(4)))) | (_GLF_IDENTITY(int(4), _GLF_IDENTITY((int(4)), 0 | (_GLF_IDENTITY((int(4)), int(ivec3((int(4)), (88679 & 0), 1))))) / 1))), max(_GLF_IDENTITY(int(4), clamp(int(4), int(4), _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(ivec3(int(4), 0, 1), (ivec3(int(4), 0, 1)) | ivec3(0, 0, 0)))))), int(4)))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY((_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-14389) : int(4)))) | (_GLF_IDENTITY(int(4), (int(4)) / 1)), int(int(_GLF_IDENTITY((_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-14389) : int(4)))) | (_GLF_IDENTITY(int(4), (int(4)) / 1)), (false ? _GLF_FUZZED(-974) : (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-14389) : int(4)))) | (_GLF_IDENTITY(int(4), (int(4)) / 1)))))))), _GLF_IDENTITY(max(int(4), int(4)), (true ? _GLF_IDENTITY(max(int(4), int(4)), (_GLF_IDENTITY(max(int(4), int(4)), (false ? _GLF_FUZZED(82469) : max(int(4), int(4))))) << 0) : _GLF_FUZZED(-25695)))))), 0, 0, 0)) | ivec4(0, 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 ^ (0))) | (0)), 0))))) << ivec4(0, 0, 0, 0))), (int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-14389) : int(4)))) | (_GLF_IDENTITY(int(4), (int(4)) / 1))), max(int(4), int(4))), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), _GLF_IDENTITY((false ? _GLF_FUZZED(-14389) : int(4)), min((false ? _GLF_FUZZED(-14389) : int(4)), (false ? _GLF_FUZZED(-14389) : int(4)))))) | (_GLF_IDENTITY(int(4), (int(4)) / 1))), max(int(4), int(4)))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-14389) : int(4)))) | (_GLF_IDENTITY(int(4), (int(4)) / 1))), max(int(4), int(4))))), 0, 0, _GLF_IDENTITY(0, min(0, 0))))) ^ 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 atomicStore(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) >> 0u)], GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_13next_virtual_gidreadsubgroup_idsubgroup_size.y, 4, 64, _GLF_IDENTITY(4, min(4, 4)));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true && (false), bool(bool(true && (false)))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bvec4(_GLF_IDENTITY(true && (false), bool(bool(true && (false)))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
