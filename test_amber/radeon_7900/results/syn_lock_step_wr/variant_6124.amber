#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true, false))))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true, false)))))) && true))))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, int(ivec3(1, 0, 1))))))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false)))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), false || (_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0), _injected_loop_counter)))) != (0 << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & 22533)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))), (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
          }
         barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))) || (false))))), bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, false, false)))))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true)))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 & -99351); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))) || false), false, _GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) && true)), _GLF_IDENTITY(false, (false) || false))), (bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false), false, _GLF_IDENTITY(false, false || (false)), false))) && true), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false), false, _GLF_IDENTITY(false, false || (false)), false)), (bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false)))) || false), false, _GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(false, ! (! (false)))))) && true), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_WRAPPED_IF_FALSE(false)) || false), false, _GLF_IDENTITY(false, false || (false)), false)), (bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false), false, _GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(false, (false) && true)))) && true), _GLF_IDENTITY(true, (true) && true)), false, false)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))) && (_GLF_WRAPPED_LOOP(false))));
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec3(bvec2(_GLF_DEAD(false), true), true))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))), ! (! ((! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) - 0.0) > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) || false)) && true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, true, false))))) || (_GLF_DEAD(false))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     barrier();
    }
  }
 for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(float(mat3x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 0.0, 0.0)), (false ? _GLF_FUZZED(-501.310) : float(mat3x2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 0.0, 0.0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), true && (_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat3(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(3269.3488, -257.898)))).y, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) + _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))))), 1.0, 1.0))), injectionSwitch.y), float(_GLF_IDENTITY(mat3x2(clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))), injectionSwitch.y), 1.0, 1.0, 1.0, 0.0, 0.0), mat3x2(mat3x4(_GLF_IDENTITY(mat3x2(clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3(injectionSwitch.y, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(1.0, 1.0, 1.0, 0.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(9.4)), float(float(mat2x3(1.0, 1.0, 1.0, 0.0, 0.0, 0.0))), bool(true)))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0), (mat3(injectionSwitch.y, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(1.0, 1.0, 1.0, 0.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(9.4)), float(float(mat2x3(1.0, 1.0, 1.0, 0.0, 0.0, 0.0))), bool(true)))), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), injectionSwitch.y), 1.0, 1.0, 1.0, 0.0, 0.0), (true ? mat3x2(clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))), injectionSwitch.y), 1.0, 1.0, 1.0, 0.0, 0.0) : _GLF_FUZZED(mat3x2(2.9, 9.8, -898.004, 8.3, 5.8, 5196.1686))))))))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)) && true)))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
      {
      }
     else
      {
       barrier();
      }
    }
   barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), 0u, 0u, 0u), (false ? _GLF_FUZZED(uvec4(99394u, 4248u, 53u, 80866u)) : uvec4(_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), 0u, 0u, 0u)))), (0u & 70621u) ^ (uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), 0u, 0u, 0u), (false ? _GLF_FUZZED(uvec4(99394u, 4248u, 53u, 80866u)) : uvec4(_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), 0u, 0u, 0u)))))))) / 1u) + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << (0u | 0u)), (false ? _GLF_FUZZED(98790u) : _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) << (_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), max(~ (0u), ~ (0u))))), max(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), max(~ (0u), ~ (0u))))), _GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), max(~ (0u), ~ (0u))))), clamp(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), max(~ (0u), ~ (0u))))), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), max(~ (0u), ~ (0u))))), _GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), max(~ (0u), ~ (0u))))), (_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), max(~ (0u), ~ (0u)))))) ^ 0u))))) | _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), (_GLF_IDENTITY(0u, max(0u, 0u))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY((subgroup_local_id) << (_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), max(~ (0u), ~ (0u))))) | _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), (_GLF_IDENTITY(0u, max(0u, 0u))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), ((subgroup_local_id) << (_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), max(~ (0u), ~ (0u))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), max(~ (0u), ~ (0u))))), max(_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), max(~ (0u), ~ (0u))))), max(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), max(~ (0u), ~ (0u))))), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), max(~ (0u), ~ (0u))))))), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), max(~ (0u), ~ (0u))))))))) | _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(0u))), (0u) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), (_GLF_IDENTITY(0u, max(0u, 0u))) | uint(_GLF_ZERO(0.0, injectionSwitch.x))))))) | (_GLF_IDENTITY((subgroup_local_id) << (_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), max(~ (0u), ~ (0u))))) | _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), (_GLF_IDENTITY(0u, max(0u, 0u))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), clamp((subgroup_local_id) << (_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), max(~ (0u), ~ _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) / 1u)), max((_GLF_IDENTITY(0u, (0u) / 1u)), (_GLF_IDENTITY(0u, (0u) / 1u)))))))) | _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), (_GLF_IDENTITY(0u, max(0u, 0u))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), (subgroup_local_id) << (_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), max(~ (0u), ~ (0u))))) | _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), (_GLF_IDENTITY(0u, max(0u, 0u))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), (subgroup_local_id) << (_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), max(~ (0u), ~ (0u))))) | _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), (_GLF_IDENTITY(0u, max(0u, 0u))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))))))), 0u ^ (uint(uint(_GLF_IDENTITY((subgroup_local_id) << (_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), max(~ (0u), _GLF_IDENTITY(~ (0u), (_GLF_IDENTITY(~ (0u), uint(_GLF_IDENTITY(uint(~ (0u)), 0u | (uint(~ (0u))))))) ^ 0u))))) | _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), (_GLF_IDENTITY(0u, max(0u, 0u))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), (_GLF_IDENTITY((subgroup_local_id) << (_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), max(~ (0u), ~ (0u))))) | _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), (_GLF_IDENTITY(0u, max(0u, 0u))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), ((subgroup_local_id) << (_GLF_IDENTITY(0u, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (0u), max(~ (0u), ~ (0u)))), ((_GLF_IDENTITY(~ (0u), max(~ (0u), ~ (0u))))) + 0u)) | _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), (_GLF_IDENTITY(0u, max(0u, 0u))) | uint(_GLF_ZERO(0.0, injectionSwitch.x))))))) / 1u)) | (_GLF_IDENTITY((subgroup_local_id) << (_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), max(~ (0u), ~ (0u))))) | _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), (_GLF_IDENTITY(0u, max(0u, 0u))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), clamp(_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) << 0u) << (_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), max(~ (0u), ~ (0u))))) | _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), (_GLF_IDENTITY(0u, _GLF_IDENTITY(max(0u, 0u), ~ (~ (max(0u, 0u)))))) | uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(263.435)))) / _GLF_IDENTITY(dot(vec4(0.0, round(length(normalize(1.0))), 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, round(length(normalize(1.0))), 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)))))) - 0.0)))))), (subgroup_local_id) << (_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), _GLF_IDENTITY(max(~ (0u), ~ (0u)), max(max(~ (0u), ~ (0u)), _GLF_IDENTITY(max(~ (0u), ~ (0u)), min(_GLF_IDENTITY(max(~ (0u), ~ (0u)), max(max(~ (0u), ~ (0u)), max(~ (0u), ~ (0u)))), max(~ (0u), ~ (0u))))))))) | _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), _GLF_IDENTITY((_GLF_IDENTITY(0u, max(0u, 0u))), ~ (~ ((_GLF_IDENTITY(0u, max(0u, 0u)))))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), (subgroup_local_id) << (_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), max(~ (0u), ~ (0u))))), 0u ^ (_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), max(~ (0u), ~ (0u))))))) | _GLF_IDENTITY(_GLF_IDENTITY(0u, 0u | (0u)), (0u) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), (_GLF_IDENTITY(0u, max(0u, 0u))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))))))))))))) + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ! (! ((! (true))))))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))) ^ 0) != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
  }
 do
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, true)))))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((+ 892.965))), float(injectionSwitch.x), bool(true))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / determinant(mat2(1.0, 0.0, 0.0, 1.0))), bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), min(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch)))).y, true)))))), _GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), clamp(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch)))).y) || false), true)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), clamp(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch)))).y) || false), true)))), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), clamp(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch)))).y) || false), true)))))))))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, true)))))))), bool(bvec4(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, true)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, true)))))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sqrt(1.0), 0.0, 1.0, 1.0))))).y, true)))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sqrt(1.0), 0.0, 1.0, 1.0))))).y, true)))))))), bool(bvec2(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sqrt(1.0), 0.0, 1.0, 1.0))))).y, true)))))))), false))), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sqrt(1.0), 0.0, 1.0, 1.0))))).y, true)))))))), bool(bvec2(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sqrt(1.0), 0.0, 1.0, 1.0))))).y, true)))))))), false))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sqrt(1.0), 0.0, 1.0, 1.0))))).y, true)))))))), bool(bvec2(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sqrt(1.0), 0.0, 1.0, 1.0))))).y, true)))))))), false))), false)))))))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sqrt(1.0), 0.0, 1.0, 1.0))))).y, true)))))))), bool(bvec2(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sqrt(1.0), 0.0, 1.0, 1.0))))).y, true)))))))), false))), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sqrt(1.0), 0.0, 1.0, 1.0))))).y, true)))))))), bool(bvec2(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sqrt(1.0), 0.0, 1.0, 1.0))))).y, true)))))))), false))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sqrt(1.0), 0.0, 1.0, 1.0))))).y, true)))))))), bool(bvec2(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sqrt(1.0), 0.0, 1.0, 1.0))))).y, true)))))))), false))), false))))))))) && true)))))))), bool(bvec3((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), clamp(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch)))).y) || false), true)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), clamp(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch)))).y) || false), true)))), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), clamp(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch)))).y) || false), true)))))))))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, true)))))))), bool(bvec4(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, true)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, true)))))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sqrt(1.0), 0.0, 1.0, 1.0))))).y, true)))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sqrt(1.0), 0.0, 1.0, 1.0))))).y, true)))))))), bool(bvec2(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sqrt(1.0), 0.0, 1.0, 1.0))))).y, true)))))))), false))), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sqrt(1.0), 0.0, 1.0, 1.0))))).y, true)))))))), bool(bvec2(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sqrt(1.0), 0.0, 1.0, 1.0))))).y, true)))))))), false))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sqrt(1.0), 0.0, 1.0, 1.0))))).y, true)))))))), bool(bvec2(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sqrt(1.0), 0.0, 1.0, 1.0))))).y, true)))))))), false))), false)))))))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sqrt(1.0), 0.0, 1.0, 1.0))))).y, true)))))))), bool(bvec2(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sqrt(1.0), 0.0, 1.0, 1.0))))).y, true)))))))), false))), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sqrt(1.0), 0.0, 1.0, 1.0))))).y, true)))))))), bool(bvec2(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sqrt(1.0), 0.0, 1.0, 1.0))))).y, true)))))))), false))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sqrt(1.0), 0.0, 1.0, 1.0))))).y, true)))))))), bool(bvec2(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sqrt(1.0), 0.0, 1.0, 1.0))))).y, true)))))))), false))), false))))))))) && true)))))))), true, true))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, true)))))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, true))))))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), true)))))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(6.9))), _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-5.6) : injectionSwitch.x)))) > injectionSwitch.y, bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, true))))))))))))), true && (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(718.960), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(718.853)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), mix(vec2(_GLF_FUZZED(float(39850u)), (min(injectionSwitch, injectionSwitch))[1]), vec2((min(injectionSwitch, injectionSwitch))[0], _GLF_FUZZED(4.8)), bvec2(true, false)))).y, true)))))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)), vec2(mat3(injectionSwitch, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(tan(0.0), 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(tan(0.0), 1.0, 0.0))), 1.0, abs(0.0)))))).y, true)))))))))))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(sign(5.8))))) / 1.0) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))), min(injectionSwitch, injectionSwitch)).y, true)))))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(true, false || (true)))), (_GLF_IDENTITY(bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(true, false || (true)))), ! (! (bool(bvec2(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), (_GLF_IDENTITY(true, false || (true))) && true)) || false))))))) && true))))))))))))))))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, false)))))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                 barrier();
                }
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(tan(1.7))))), false || ((injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
            barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, (1) ^ 0)), ((1)) - 0), ~ (_GLF_IDENTITY(~ ((1)), (_GLF_IDENTITY(~ ((1)), clamp(~ ((1)), ~ ((1)), ~ ((1))))) / 1))))), (uint(_GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY(_GLF_IDENTITY((1), ((1)) - 0), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(1, (1) << 0))), (~ ((1))) / _GLF_IDENTITY(1, min(1, 1)))))))) | 0u), 4, _GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY(int(int(64)), ~ (~ (int(int(64)))))), _GLF_IDENTITY(1 * (_GLF_IDENTITY(64, (64) / 1)), int(int(1 * (_GLF_IDENTITY(64, (64) / 1)))))), 4);
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))) || false), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, _GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), true, true, false))))), bvec3(bvec4(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))), true))))) && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       for(int _injected_loop_counter = (-43412 & (1 ^ 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       do
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), (bool(_GLF_IDENTITY(false, ! (! (false))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))))))), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true))), bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), true))), false, false, true)))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, ! (! (false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true && (_GLF_IDENTITY(false, ! (! (false)))), ! (! (true && (_GLF_IDENTITY(false, ! (! (false)))))))), true && (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(false, ! (! (false)))), ! (! (true && (_GLF_IDENTITY(false, ! (! (false)))))))))))))))), true))))), ! (! (! _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, false))), true, _GLF_IDENTITY(true, (true) || false), false)), ! (_GLF_IDENTITY(! (bool(bvec4(false, true, true, false))), bool(bool(! (bool(bvec4(false, true, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), false))))), false))))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)), bool(bvec4(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(false, bool(bool(false)))) || false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(false, bool(bool(false)))) || false), true), true)))), false, true, true)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), ! (! (bool(bvec4(false, true, true, false)))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), true)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), true))))), ! (_GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), true)))))), (! (! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), true))))))) && true)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true)), bool(bvec4(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)), false, true, true)))))), true && (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), ! (! (bool(bvec4(false, true, true, false)))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), true)))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true)), bool(bvec4(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)), false, true, true)))))), ! (! ((_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), ! (! (bool(bvec4(false, true, true, false)))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), true)))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true)), bool(bvec4(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)), false, true, true))))))))), ! (! (_GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), ! (! (bool(bvec4(false, true, true, false)))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), false || (bool(false))), (_GLF_IDENTITY(bool(false), false || (bool(false)))) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), false || (bool(false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(false), false || (bool(false))), false || (_GLF_IDENTITY(bool(false), false || (bool(false)))))))), false), true)))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && ((bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))) || (bool(false))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false)), bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false)), false)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false)), bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false)), false)))), false)))), true))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)))))))))), true)), bool(bvec4(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)), false, true, true)))))), ! (! ((_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), ! (! (bool(bvec4(false, true, true, false)))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), true)))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true)), bool(bvec4(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)), false, true, true)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), ! (! (bool(bvec4(false, true, true, false)))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), ! (! (bool(bvec4(false, true, true, false)))))), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), ! (! (bool(bvec4(false, true, true, false)))))))), true))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), true)))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(false), false || (bool(_GLF_IDENTITY(false, (false) && true)))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(false), false || (bool(_GLF_IDENTITY(false, (false) && true)))), false), false, true))), true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), true)))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(false), false || (bool(_GLF_IDENTITY(false, (false) && true)))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(false), false || (bool(_GLF_IDENTITY(false, (false) && true)))), false), false, true))), true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), true)))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(false), false || (bool(_GLF_IDENTITY(false, (false) && true)))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(false), false || (bool(_GLF_IDENTITY(false, (false) && true)))), false), false, true))), true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true)))), false), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), true)))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(false), false || (bool(_GLF_IDENTITY(false, (false) && true)))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(false), false || (bool(_GLF_IDENTITY(false, (false) && true)))), false), false, true))), true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), true)))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(false), false || (bool(false))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(false), false || (bool(_GLF_IDENTITY(false, (false) && true)))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(false), false || (bool(_GLF_IDENTITY(false, (false) && true)))), false), false, true))), true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true)))), false))))))), bool(bvec4(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), false || (_GLF_IDENTITY(false, bool(bool(false))))), true)), false, true, true))))) || false))))))))))), (_GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), ! (! (bool(bvec4(false, true, true, false)))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))) && true), bool(bool(false))), true)), bool(bvec4(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)), _GLF_IDENTITY(false, true && (false)), true, _GLF_IDENTITY(true, false || _GLF_IDENTITY((_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (true), bool(bvec4(! (true), false, true, true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (true), bool(bvec4(! (true), false, true, true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_IDENTITY(! (true), bool(bvec4(! (true), false, true, true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))), ((_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (true), bool(bvec4(! (true), false, true, true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (true), bool(bvec4(! (true), false, true, true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_IDENTITY(! (true), bool(bvec4(! (true), false, true, true))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))) || false)))))))), false || ((_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), ! (! (bool(bvec4(false, true, true, false)))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)), bool(bvec4(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(true, false || (true)))), false, true, true))))))))) && true))))))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), true && (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))))), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))))))))))) || false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(2721.4172)), bool(false))) : _GLF_FUZZED(-493.442))), ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(2721.4172)), bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))), (! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))) || false)))))) : _GLF_FUZZED(_GLF_IDENTITY(-493.442, (-493.442) * 1.0)))), ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-151.193) : injectionSwitch.x)) > injectionSwitch.y))))))))))) || false), false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))), true && (bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))), false, false))), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))))), false, _GLF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), (! (_GLF_IDENTITY(false, ! (! (false))))) || false)), _GLF_IDENTITY(false, bool(bvec4(false, true, false, false))) || ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), (! (_GLF_IDENTITY(false, ! (! (false))))) || false))))), (injectionSwitch.x > injectionSwitch.y)))))))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, true)), bool(bvec3(bool(bvec4(false, true, false, true)), true, true))))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 uint read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(vec2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0)), max(float(vec2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0)), float(vec2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0))))))))) ^ (virtual_gid))) | (virtual_gid))), clamp((_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(vec2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0)), max(float(vec2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0)), float(vec2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0))))))))) ^ (virtual_gid))) | (virtual_gid))), (_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(vec2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0)), max(float(vec2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0)), float(vec2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0))))))))) ^ (virtual_gid))) | (virtual_gid))), (_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(vec2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0)), max(float(vec2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0)), float(vec2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0))))))))) ^ (virtual_gid))) | (virtual_gid))))) ^ 0u, (_GLF_IDENTITY((virtual_gid) ^ _GLF_IDENTITY(0u, 0u + (0u)), _GLF_IDENTITY(((virtual_gid) ^ 0u), clamp(((virtual_gid) ^ 0u), ((virtual_gid) ^ 0u), _GLF_IDENTITY(((virtual_gid) ^ 0u), (((virtual_gid) ^ 0u)) << 0u))) >> 0u)) | ((virtual_gid) ^ 0u)))], _GLF_IDENTITY(4, _GLF_IDENTITY(int(int(4)), (int(int(_GLF_IDENTITY(4, clamp(4, 4, 4))))) >> 0)), 64, 2);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ (0 >> _GLF_IDENTITY(int(2), int(2))))); _injected_loop_counter ++)
  {
   subgroupBarrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true))); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), bool(bvec3((_GLF_IDENTITY(false, (false) || false)), true, true))) || false), ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! _GLF_IDENTITY((false), ((false)) || false), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! (false), true), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), false))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), bool(bvec4(_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, true))), true, true, false)))))), true), bvec2(bvec3(_GLF_IDENTITY(bvec2(! (false), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(! (false), true)), bvec2(bvec4(bvec2(bvec2(! (false), true)), false, true)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(! (false), true)), bvec2(bvec4(bvec2(bvec2(! (false), true)), false, true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(bvec2(! (false), true)), bvec2(bvec4(bvec2(bvec2(! (false), true)), false, true)))), false, true))), true, false)))), false))), true), true)))))), (bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), true), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(! (false), true && (! (false))), true), false))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec2(bvec2(! (false), true)))), bvec2(bvec3(bvec2(! (false), true), false))), true), true))))))) && true), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), false || (! (false)))))), true), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(! _GLF_IDENTITY((false), ((false)) || false), true), bvec2(bvec3(bvec2(! (false), true), false))), true), true)))))), (bool(_GLF_IDENTITY(bvec2(! (false), true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), false))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), false))), true), true))), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), false))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), false))), true), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), false))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), false))), true), true)))), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), false))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), false))), true), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), false))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), false))), true), true)))), true)))), false))))), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), false))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), false))), true), true))), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), false))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), false))), true), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), false))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), false))), true), true)))), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), false))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), false))), true), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), false))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), false))), true), true)))), true)))), false))))), true, true)), bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), false))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), false))), true), true))), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), false))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), false))), true), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), false))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), false))), true), true)))), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), false))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), false))), true), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), false))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), false))), true), true)))), true)))), false))))), true, true))))))))) && true))))) && true)), true && (_GLF_IDENTITY((! (false)), false || (_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))))), bool(bvec4((! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))))), false, true, true))), ((! (false))) && true))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false), true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, sqrt(1.0), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0))))).x < injectionSwitch.y) || false), true, true), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false), true, true), true))))))), bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false), true, true)))), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false), true, true), true)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false), true, true), true)), true))), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false), true, true), true)))))))))))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((98506 >> 98915) & 0)); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                  }
                 else
                  {
                  }
                }
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) || false)), bool(bool(true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) || false)))))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))) || (false))), (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))) || false), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, true))))), false, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))) || (false))), (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))) || false), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, true))))), false, true)), true, false, true)))))
            {
             do
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY((false) || false, bool(bvec4((false) || false, false, false, true)))), (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY((false) || false, bool(bvec4((false) || false, false, false, true)))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(_GLF_IDENTITY((false) || false, bool(bvec4((false) || false, false, false, true))), ! (! (_GLF_IDENTITY((false) || false, bool(bvec4((false) || false, false, false, true))))))), (injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))
                  barrier();
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (! ((false)))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             barrier();
            }
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, false, false)))), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), true))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), (! (false)) && true)), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), (! (false)) && true)), bool(bvec3(! (_GLF_IDENTITY(! (false), (! (false)) && true)), true, true)))))))))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (bool(true)) && true)))))))), true && (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))));
   do
    {
     atomicStore(checker[virtual_gid], read, 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(4, (1 ^ 1) + (4)), 0 | (4)));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             else
              {
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false))))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, true)), true && (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, true))))))), ((_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, true)), true && (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, true)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_IDENTITY(false, false || (false))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) | (1)), 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, log(vec2(1.0, 1.0)) + (injectionSwitch)).x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(8.5)))), float(_GLF_FUZZED(977.860)), bool(false)))))); _GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_injected_loop_counter --), ((_injected_loop_counter --)) >> 0) - 0))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                barrier();
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 0.0, 0.0))))) > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = (_GLF_IDENTITY((0 & 10157) ^ 1, ~ (~ ((0 & 10157) ^ 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     else
                      {
                      }
                    }
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             do
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter))) ^ 0) < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))))))) || false)))
                            barrier();
                          }
                         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                          barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + _GLF_IDENTITY((injectionSwitch.x), abs(sin(0.0)) + ((injectionSwitch.x)))) > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))));
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), bool(bvec2(bool(bool(_GLF_DEAD(false))), true))))) && true))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
