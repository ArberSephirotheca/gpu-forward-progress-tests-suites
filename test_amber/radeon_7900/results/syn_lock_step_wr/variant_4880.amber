#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460
struct _GLF_struct_22 {
 bool _f0;
 mat2x4 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_21 {
 vec3 _f0;
 mat3 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_23 {
 _GLF_struct_21 _f0;
 _GLF_struct_22 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_19 {
 vec4 _f0;
 ivec4 _f1;
 bvec2 _f2;
 mat2 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_18 {
 mat4 _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_20 {
 ivec2 _f0;
 _GLF_struct_18 _f1;
 mat2x3 _f2;
 _GLF_struct_19 _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_17 {
 mat2x3 _f0;
 uint workgroup_size;
} ;

struct _GLF_struct_24 {
 _GLF_struct_17 _f0;
 float _f1;
 ivec3 _f2;
 _GLF_struct_20 _f3;
 _GLF_struct_23 _f4;
} ;

struct _GLF_struct_14 {
 uvec4 _f0;
 bvec3 _f1;
 ivec4 _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_13 {
 vec3 _f0;
 float _f1;
 mat4x3 _f2;
 vec4 _f3;
 ivec2 _f4;
 bvec2 _f5;
 vec4 _f6;
} ;

struct _GLF_struct_15 {
 _GLF_struct_13 _f0;
 float _f1;
 mat2 _f2;
 mat2x3 _f3;
 _GLF_struct_14 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_12 {
 bvec4 _f0;
} ;

struct _GLF_struct_10 {
 mat3x2 _f0;
 uvec2 _f1;
 mat4x2 _f2;
 vec4 _f3;
 mat2 _f4;
 mat2 _f5;
 uint _f6;
} ;

struct _GLF_struct_9 {
 ivec3 _f0;
} ;

struct _GLF_struct_8 {
 vec4 _f0;
 bool _f1;
 vec2 _f2;
 mat4 _f3;
 ivec4 _f4;
} ;

struct _GLF_struct_7 {
 mat4x2 _f0;
 uvec4 _f1;
 mat2x4 _f2;
 mat2 _f3;
 uint _f4;
 bool _f5;
 mat2 _f6;
} ;

struct _GLF_struct_6 {
 uint subgroup_base;
 mat2x4 _f0;
} ;

struct _GLF_struct_5 {
 uvec3 _f0;
 mat2 _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_11 {
 _GLF_struct_5 _f0;
 _GLF_struct_6 _f1;
 _GLF_struct_7 _f2;
 _GLF_struct_8 _f3;
 _GLF_struct_9 _f4;
 _GLF_struct_10 _f5;
} ;

struct _GLF_struct_16 {
 _GLF_struct_11 _f0;
 _GLF_struct_12 _f1;
 mat4x3 _f2;
 _GLF_struct_15 _f3;
} ;

struct _GLF_struct_3 {
 ivec2 _f0;
 ivec4 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_1 {
 uint _f0;
 mat4x3 _f1;
 mat2x3 _f2;
 mat4x3 _f3;
 float _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_0 {
 vec3 _f0;
 ivec3 _f1;
 mat4 _f2;
 uvec4 _f3;
 vec3 _f4;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 mat4 _f1;
 _GLF_struct_1 _f2;
} ;

struct _GLF_struct_4 {
 _GLF_struct_2 _f0;
 _GLF_struct_3 _f1;
 uint next_virtual_gid;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged3_0_2_41_2_1_13_3_1_4GLF_merged2_0_1_4_1_1_13readsubgroup_basenum_workgroupread;
 uvec2 GLF_merged2_0_1_4_1_1_13readsubgroup_base;
 GLF_merged3_0_2_41_2_1_13_3_1_4GLF_merged2_0_1_4_1_1_13readsubgroup_basenum_workgroupread.xy = GLF_merged2_0_1_4_1_1_13readsubgroup_base;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged3_0_2_41_2_1_13_3_1_4GLF_merged2_0_1_4_1_1_13readsubgroup_basenum_workgroupread.z = num_workgroup;
 _GLF_struct_24 _GLF_struct_replacement_24 = _GLF_struct_24(_GLF_struct_17(mat2x3(1.0), gl_WorkGroupSize.x), 1.0, ivec3(1), _GLF_struct_20(ivec2(1), _GLF_struct_18(mat4(1.0), bvec4(true)), mat2x3(1.0), _GLF_struct_19(vec4(1.0), ivec4(1), bvec2(true), mat2(1.0), bvec4(true)), mat2x3(1.0)), _GLF_struct_23(_GLF_struct_21(vec3(1.0), mat3(1.0), mat2(1.0)), _GLF_struct_22(true, mat2x4(1.0), mat2(1.0)), vec3(1.0)));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_struct_replacement_24._f0.workgroup_size * workgroup_id;
 _GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(_GLF_struct_11(_GLF_struct_5(uvec3(1u), mat2(1.0), mat4x3(1.0)), _GLF_struct_6(subgroup_id * subgroup_size, mat2x4(1.0)), _GLF_struct_7(mat4x2(1.0), uvec4(1u), mat2x4(1.0), mat2(1.0), 1u, true, mat2(1.0)), _GLF_struct_8(vec4(1.0), true, vec2(1.0), mat4(1.0), ivec4(1)), _GLF_struct_9(ivec3(1)), _GLF_struct_10(mat3x2(1.0), uvec2(1u), mat4x2(1.0), vec4(1.0), mat2(1.0), mat2(1.0), 1u)), _GLF_struct_12(bvec4(true)), mat4x3(1.0), _GLF_struct_15(_GLF_struct_13(vec3(1.0), 1.0, mat4x3(1.0), vec4(1.0), ivec2(1), bvec2(true), vec4(1.0)), 1.0, mat2(1.0), mat2x3(1.0), _GLF_struct_14(uvec4(1u), bvec3(true), ivec4(1), bvec3(true)), vec3(1.0)));
 GLF_merged3_0_2_41_2_1_13_3_1_4GLF_merged2_0_1_4_1_1_13readsubgroup_basenum_workgroupread.xy.y = _GLF_struct_replacement_16._f0._f1.subgroup_base;
 uint virtual_gid = workgroup_base + GLF_merged3_0_2_41_2_1_13_3_1_4GLF_merged2_0_1_4_1_1_13readsubgroup_basenum_workgroupread.xy.y + subgroup_local_id;
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(_GLF_struct_2(_GLF_struct_0(vec3(1.0), ivec3(1), mat4(1.0), uvec4(1u), vec3(1.0)), mat4(1.0), _GLF_struct_1(1u, mat4x3(1.0), mat2x3(1.0), mat4x3(1.0), 1.0, ivec3(1))), _GLF_struct_3(ivec2(1), ivec4(1), vec2(1.0)), workgroup_base + GLF_merged3_0_2_41_2_1_13_3_1_4GLF_merged2_0_1_4_1_1_13readsubgroup_basenum_workgroupread.xy.y + ((subgroup_local_id + 1) % subgroup_size));
 atomicStore(buf[_GLF_struct_replacement_4.next_virtual_gid], uint(1), 4, 64, 4);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 GLF_merged3_0_2_41_2_1_13_3_1_4GLF_merged2_0_1_4_1_1_13readsubgroup_basenum_workgroupread.w = read;
 GLF_merged3_0_2_41_2_1_13_3_1_4GLF_merged2_0_1_4_1_1_13readsubgroup_basenum_workgroupread.xy.x = GLF_merged3_0_2_41_2_1_13_3_1_4GLF_merged2_0_1_4_1_1_13readsubgroup_basenum_workgroupread.w;
 subgroupBarrier();
 atomicStore(checker[virtual_gid], GLF_merged3_0_2_41_2_1_13_3_1_4GLF_merged2_0_1_4_1_1_13readsubgroup_basenum_workgroupread.xy.x, 4, 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
