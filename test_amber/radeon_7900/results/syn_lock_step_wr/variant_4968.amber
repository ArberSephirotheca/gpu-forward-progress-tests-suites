#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_16 {
 bvec3 _f0;
 float _f1;
 uint _f2;
 vec2 _f3;
} ;

struct _GLF_struct_17 {
 _GLF_struct_16 _f0;
 uvec3 _f1;
 ivec2 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_14 {
 mat2x3 _f0;
 uint _f1;
 mat4 _f2;
 uvec4 _f3;
 mat3 _f4;
} ;

struct _GLF_struct_13 {
 mat4x3 _f0;
 bvec4 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_12 {
 bvec4 _f0;
 mat3x2 _f1;
 mat3 _f2;
 mat2 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_15 {
 _GLF_struct_12 _f0;
 _GLF_struct_13 _f1;
 uint _f2;
 ivec4 _f3;
 _GLF_struct_14 _f4;
} ;

struct _GLF_struct_10 {
 vec2 _f0;
 uint workgroup_id;
 uvec2 _f1;
} ;

struct _GLF_struct_11 {
 _GLF_struct_10 _f0;
 mat4x3 _f1;
} ;

struct _GLF_struct_8 {
 mat2x4 _f0;
} ;

struct _GLF_struct_9 {
 bvec2 _f0;
 _GLF_struct_8 _f1;
 ivec3 _f2;
 mat2x3 _f3;
 ivec2 _f4;
 mat2x4 _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_18 {
 float _f0;
 _GLF_struct_9 _f1;
 uint _f2;
 _GLF_struct_11 _f3;
 _GLF_struct_15 _f4;
 _GLF_struct_17 _f5;
} ;

struct _GLF_struct_6 {
 uint _f0;
} ;

struct _GLF_struct_4 {
 uvec2 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
 ivec2 _f1;
 vec4 _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_2 {
 ivec4 _f0;
 mat2x3 _f1;
 mat3 _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_3 {
 float _f0;
 _GLF_struct_2 _f1;
} ;

struct _GLF_struct_0 {
 vec4 _f0;
} ;

struct _GLF_struct_1 {
 vec4 _f0;
 int _f1;
 _GLF_struct_0 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_7 {
 uint _f0;
 uint subgroup_id;
 _GLF_struct_1 _f1;
 _GLF_struct_3 _f2;
 _GLF_struct_5 _f3;
 mat3x4 _f4;
 _GLF_struct_6 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     break;
    }
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       continue;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (false), (! (false)) && true))), bool(bvec4(false, true, false, _GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (_GLF_IDENTITY(! (true), false || (! (true))))))), true, false), _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, (false) || false)))))), bool(bvec3(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (_GLF_IDENTITY(true, (true) && true)))))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))), true, false), true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), true, true))))))))
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)));
           return;
          }
         if(_GLF_DEAD(false))
          continue;
         return;
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(1u, gl_SubgroupID, _GLF_struct_1(_GLF_IDENTITY(vec4(1.0), (false ? _GLF_FUZZED(vec4(84.38, 32.17, 48.55, 878.068)) : vec4(1.0))), 1, _GLF_struct_0(vec4(1.0)), uvec3(1u)), _GLF_struct_3(1.0, _GLF_struct_2(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (1))) | (1)), 1))) | (1))), max(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (1))) | (1)), 1))) | (1))), _GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (1))) | (1)), 1))) | (1))), ~ (~ (ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, 1 * (1))), int(ivec3((_GLF_IDENTITY(1, 1 * (1))), 0, 0))) | (1)), 1))) | (1)))))))), max(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), (_GLF_IDENTITY(_GLF_IDENTITY(1, 1 * (1)), clamp(_GLF_IDENTITY(1, 1 * (1)), _GLF_IDENTITY(1, 1 * (1)), _GLF_IDENTITY(1, 1 * (1))))) | (1)), 1))) | (1))), ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (1))) | (1)), 1))) | (1))))), mat2x3(1.0), mat3(1.0), bvec4(true))), _GLF_struct_5(_GLF_struct_4(uvec2(1u), vec2(1.0)), _GLF_IDENTITY(ivec2(1), _GLF_IDENTITY((ivec2(1)), ((ivec2(1))) - ivec2(0, 0)) | (ivec2(1))), _GLF_IDENTITY(vec4(1.0), clamp(vec4(1.0), vec4(1.0), vec4(1.0))), bvec4(true)), mat3x4(1.0), _GLF_struct_6(1u));
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     break;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       continue;
      }
     return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))))))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, false || (false)) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))
      {
       if(_GLF_DEAD(false))
        continue;
       continue;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY((false), ((false)) && true)), (! (! (false))) || false))));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (_GLF_IDENTITY(! ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (_GLF_IDENTITY(! ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (! ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
          break;
         do
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), injectionSwitch.x)) > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                break;
               return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       return;
      }
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-4.7)), float(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))), bool(true))) < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bool(bool((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - _GLF_IDENTITY(0.0, (0.0) * abs(1.0))))))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - length(vec4(0.0, 0.0, 0.0, 0.0))) > injectionSwitch.y))))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
               if(_GLF_DEAD(false))
                return;
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), clamp((1 << _GLF_IDENTITY(int(1), int(1))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), ~ (~ ((1 << _GLF_IDENTITY(int(1), int(1))))))) / 1), (1 << _GLF_IDENTITY(int(1), int(1))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) << 0)), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_FALSE(false))), false || (bool(bool(_GLF_WRAPPED_IF_FALSE(false)))))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), 1.0, 0.0, 1.0, exp(tan(0.0))))).x > injectionSwitch.y))))
                continue;
               return;
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))))
                break;
              }
             else
              {
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             return;
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
        return;
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), true && (_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false || (bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) / vec2(1.0, 1.0)).x < injectionSwitch.y)), _GLF_IDENTITY(false, (false) || false)))))))))
        return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(_GLF_IDENTITY(4, clamp(4, 4, 4))), ~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(4, clamp(4, 4, 4)))), max(~ (int(_GLF_IDENTITY(4, clamp(4, 4, 4)))), ~ (int(_GLF_IDENTITY(4, clamp(4, 4, 4))))))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      break;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_18 _GLF_struct_replacement_18 = _GLF_struct_18(1.0, _GLF_struct_9(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), false)), bvec2(bvec3(bvec2(bvec3(bvec2(true), false)), false))), true)))), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(true), false)), false))), true)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(true), _GLF_IDENTITY(false, (false) && true))), false))), true))))))))), bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(true), false)), false))), true)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(true), false)), false)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(true), false)), false)))), false))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(true), false)), false))), true))))))))))))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(true), false)), false))), true)))), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(true), false)), false))), true)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(true), _GLF_IDENTITY(false, (false) && true))), false))), true))))))))), bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(true), false)), false))), true)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(true, false || (true))), false)), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(true), false)), false)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(true), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), false)))), false))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(true), false)), false))), true))))))))))))), false, false)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(true), false)), false))), true)))), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(true), false)), false))), true)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(true), _GLF_IDENTITY(false, (false) && true))), false))), true))))))))), bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(true), false)), false))), true)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(true, false || (true))), false)), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(true), false)), false)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(true), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), false)))), false))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(true), false)), false))), true))))))))))))), false, false)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(true), false)), false))), true)))), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(true), false)), false))), true)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(true), _GLF_IDENTITY(false, (false) && true))), false))), true))))))))), bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(true), false)), false))), true)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(true, false || (true))), false)), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(true), false)), false)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(true), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))), false)))), false))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(true), false)), false))), true))))))))))))), false, false))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_struct_8(mat2x4(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), mix(float(_GLF_FUZZED(219.897)), float((1.0)), bool(true))) * 1.0))), ivec3(1), mat2x3(1.0), ivec2(1), mat2x4(1.0), uvec2(1u)), 1u, _GLF_struct_11(_GLF_struct_10(vec2(1.0), gl_WorkGroupID.x, uvec2(1u)), mat4x3(1.0)), _GLF_struct_15(_GLF_struct_12(bvec4(true), mat3x2(1.0), mat3(1.0), _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) - mat2(0.0, 0.0, 0.0, 0.0)), mat4(1.0)), _GLF_struct_13(mat4x3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), bvec4(true), bvec4(true)), 1u, _GLF_IDENTITY(ivec4(1), (_GLF_IDENTITY(ivec4(1), ivec4(0, 0, 0, 0) ^ (ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) + 0)) ^ (0 << _GLF_IDENTITY(int(2), int(2))))) + (1 ^ 1)))))) - ivec4(0, 0, 0, 0)), _GLF_struct_14(mat2x3(1.0), 1u, mat4(1.0), _GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, (1u) + uint(_GLF_ZERO(0.0, injectionSwitch.x)))), ~ (~ (uvec4(_GLF_IDENTITY(1u, (1u) + uint(_GLF_ZERO(0.0, injectionSwitch.x))))))), mat3(1.0))), _GLF_struct_17(_GLF_struct_16(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), _GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))), 1.0, 1u, vec2(1.0)), uvec3(1u), ivec2(1), mat3(1.0)));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   do
    {
     return;
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)) : _GLF_FUZZED(vec2(8.6, 0.3)))).y))));
  }
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(_GLF_struct_replacement_18._f3._f0.workgroup_id, (_GLF_IDENTITY(_GLF_struct_replacement_18._f3._f0.workgroup_id, ~ (~ (_GLF_struct_replacement_18._f3._f0.workgroup_id)))) * uint(_GLF_ONE(1.0, injectionSwitch.y)));
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))))))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
    {
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        return;
       return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
    {
     return;
    }
  }
 uint subgroup_base = _GLF_struct_replacement_7.subgroup_id * subgroup_size;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), true && (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY((! (! (false))) || false, ! (! (_GLF_IDENTITY((! (! (false))) || false, bool(bool((! (! (false))) || false))))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (false))), bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ((_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))) || false) || false)), true, false)))))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (~ (0)))), _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(clamp(int(0), int(0), int(0)), (true ? clamp(int(0), int(0), int(0)) : _GLF_FUZZED(-86177))), (clamp(int(0), int(0), int(0))) | (clamp(int(0), int(0), int(0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))) >> _GLF_IDENTITY(int(6), int(6))) ^ (int(4))), int(4))), int(4)), int(ivec2(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) >> 0)), 1))), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4))))), clamp(max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), _GLF_IDENTITY(int(4), (0 >> _GLF_IDENTITY(int(6), int(6))) ^ (int(4))), int(4))), int(4)), int(ivec2(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) >> 0)), 1))), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(4, (4) - 0), 1, 0)), int(ivec3(_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(4, (4) - 0), 1, 0)), int(int(int(ivec3(_GLF_IDENTITY(4, (4) - 0), 1, 0))))), 1, 1))))), int(4))))), _GLF_IDENTITY(max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(6), int(6))) ^ (int(4)), min(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(6), int(6))) ^ (int(4)), ((0 >> _GLF_IDENTITY(int(6), int(6))) ^ (int(4))) | ((0 >> _GLF_IDENTITY(int(6), int(6))) ^ (int(4)))), (0 >> _GLF_IDENTITY(int(6), int(6))) ^ (int(4))))), int(4))), int(4)), int(ivec2(_GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) >> 0), (_GLF_IDENTITY(int(4), (int(4)) >> 0)) >> 0)), 1))), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4))))), (false ? _GLF_FUZZED(_injected_loop_counter) : max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(6), int(6))) ^ (int(4)), 0 ^ ((0 >> _GLF_IDENTITY(int(6), int(6))) ^ (int(4))))), int(4))), int(4)), int(ivec2(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) >> 0)), 1))), _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), (bool(bvec3(false, false, true))) && true)) ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4))), ((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), (bool(bvec3(false, false, true))) && true)) ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4)))) - 0))))), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), _GLF_IDENTITY(int(4), (0 >> _GLF_IDENTITY(int(6), int(6))) ^ (int(4))), int(4))), int(4)), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) >> 0)), 1), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) >> 0)), 1), ~ (~ (ivec2(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) >> 0)), 1))))) >> ivec2(0, 0)))), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4)))))))), _GLF_IDENTITY(int(4), int(4))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 ^ (int(4))), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED((~ _injected_loop_counter))))), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4)))))), _GLF_IDENTITY(int(4), int(4))), (min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), int(int(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, min(4, 4)))), (false ? _GLF_FUZZED(-6320) : _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) / int(_GLF_ONE(1.0, injectionSwitch.y))), int(4))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_IDENTITY(_GLF_FUZZED(-95740), 0 + (_GLF_FUZZED(-95740))) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(4)))))), _GLF_IDENTITY(int(4), int(4)))) / 1)))))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (_GLF_IDENTITY(! (bool(bool(false))), bool(bvec4(! (bool(bool(false))), false, false, true)))))) || (_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(ivec3(int(4), 0, 1)), max(int(ivec3(int(4), 0, 1)), int(ivec3(int(4), 0, _GLF_IDENTITY(1, (1) | 0)))))), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), int(ivec2(_GLF_IDENTITY(int(4), int(4)), 1))), _GLF_IDENTITY((false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4))) : _GLF_FUZZED(_injected_loop_counter)))))), _GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) << 0), int(4)), max(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) * 1)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), int(ivec2(_GLF_IDENTITY(int(4), int(4)), 1))), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4)))))), _GLF_IDENTITY(int(4), int(4))), (0 << _GLF_IDENTITY(int(5), int(5))) ^ (min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), min(_GLF_IDENTITY(int(4), (int(4)) + 0), int(4)))), int(ivec2(_GLF_IDENTITY(int(4), int(4)), 1))), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4)))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), int(ivec2(_GLF_IDENTITY(int(4), int(4)), 1))), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, ~ (~ (4))))))))))), _GLF_IDENTITY(int(4), int(4)))))) | 0), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) - 0)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 ^ (_GLF_IDENTITY(int(4), int(4)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, min(4, 4)))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 | (_GLF_IDENTITY(int(4), int(4))))), (min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (4) >> 0), 4, 4)), 4))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(4)))))), _GLF_IDENTITY(int(4), int(4)))) / 1), (_GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(_GLF_IDENTITY(4, int(_GLF_IDENTITY(ivec4(4, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 1), max(ivec4(4, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 1), ivec4(4, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 1)))))), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4)))))), _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) / 1))), (min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) << int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))), int(4)))))), _GLF_IDENTITY(int(4), int(4)))) / 1), clamp(_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, max(4, 4))) | (0 << _GLF_IDENTITY(int(6), int(6)))))), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4)))))), _GLF_IDENTITY(int(4), int(4))), (min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(4))))), (true ? _GLF_IDENTITY(max(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, 1 * (4)))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(4))))), _GLF_IDENTITY((max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(4)))))), clamp(_GLF_IDENTITY((max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(4)))))), clamp((max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(4)))))), (max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(4)))))), (max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(4)))))))), (max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(4)))))), (max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(4)))))))) / 1) : _GLF_FUZZED(_injected_loop_counter)))), _GLF_IDENTITY(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), clamp(~ (4), ~ (4), ~ (4)))))) << 0)), int(4)))) / 1), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) ^ (0 | 0)), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4))))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4)))))))) ^ 0))), _GLF_IDENTITY(int(4), int(4))), (min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(79876) : int(4)))), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ (~ (4)))), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x))), 0 ^ (_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x))))), (1 ^ 0))))), int(4)))))), _GLF_IDENTITY(int(4), int(4)))) / 1), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, int(ivec3(4, (0 >> _GLF_IDENTITY(int(1), int(1))), 1)))), int(4)))))), _GLF_IDENTITY(int(4), int(4))), (min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (int(4)) * 1)) ^ 0), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(4)))))), _GLF_IDENTITY(int(4), int(4)))) / 1)))) | (_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(false, bool(bool(false))) ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, min(4, 4)))))))))), _GLF_IDENTITY(int(4), int(4))), (min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (4) | (0 >> _GLF_IDENTITY(int(7), int(7)))))), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x)))), int(4)))))), _GLF_IDENTITY(int(4), int(4)))) / 1)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(ivec3(int(4), 0, 1)), max(int(ivec3(int(4), 0, 1)), int(ivec3(int(4), 0, _GLF_IDENTITY(1, (1) | 0)))))), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), int(ivec2(_GLF_IDENTITY(int(4), int(4)), 1))), _GLF_IDENTITY((false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4))), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)) ? (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4))) : _GLF_FUZZED(_injected_loop_counter)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), min(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4))))))), (_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) << 0), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), int(ivec2(_GLF_IDENTITY(int(4), int(4)), 1))), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4)))))), _GLF_IDENTITY(int(4), int(4))), (0 << _GLF_IDENTITY(int(5), int(5))) ^ (min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), int(ivec2(_GLF_IDENTITY(int(4), int(4)), 1))), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4)))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), int(ivec2(_GLF_IDENTITY(int(4), int(4)), 1))), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, ~ (~ (4))))))))))), _GLF_IDENTITY(int(4), int(4)))))) | 0), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 ^ (_GLF_IDENTITY(int(4), int(4)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 | (_GLF_IDENTITY(int(4), int(4))))), (min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(4)))))), _GLF_IDENTITY(int(4), int(4)))) / 1), (_GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(atomicOr(_injected_loop_counter, 69088)) : _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(97219) : _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4)))))))), max(_GLF_IDENTITY(int(_GLF_IDENTITY(4, int(_GLF_IDENTITY(ivec4(4, 1, int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(float(mat2x3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, sin(0.0), 1.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0)), (float(mat2x3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, sin(0.0), 1.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))) / 1.0))), 1), max(ivec4(4, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 1), ivec4(4, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 1)))))), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4)))))), _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) / 1))), (min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) << int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))), int(4)))))), _GLF_IDENTITY(int(4), int(4)))) / 1), clamp(_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), max(int(4), int(4)))) | ((0 << _GLF_IDENTITY(int(4), int(4))) | 0)), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4)))))), _GLF_IDENTITY(int(4), int(4))), (min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(4))))), (true ? _GLF_IDENTITY(max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(4)), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(4))) << ((0 & -74733) | 0))))), (max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(4)))))) / 1) : _GLF_FUZZED(_injected_loop_counter)))), _GLF_IDENTITY(int(4), int(4)))) / 1), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4))))) ^ 0))), _GLF_IDENTITY(int(_GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, min(4, 4))))), int(4))), (min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ _GLF_IDENTITY((~ (4)), ((~ (4))) - (0 | 0)))), int(4)), (false ? _GLF_FUZZED(_GLF_IDENTITY(-95740, (_GLF_IDENTITY(-95740, clamp(_GLF_IDENTITY(-95740, (-95740) << 0), -95740, -95740))) + 0)) : _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x))), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x))), 0 ^ (_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x))))), (1 ^ 0))))), int(4)))))), _GLF_IDENTITY(int(4), int(4)))) / 1), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, int(ivec3(4, (0 >> _GLF_IDENTITY(int(1), int(1))), 1)))), int(4)))))), _GLF_IDENTITY(int(4), int(4))), (min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(4)))))), _GLF_IDENTITY(int(4), int(4)))) / 1)))) | (_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, min(4, 4)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, min(4, 4)))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, min(4, 4)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, min(4, 4)))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, min(4, 4)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, min(4, 4)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, min(4, 4)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, min(4, 4)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, min(4, 4)))))))))))), _GLF_IDENTITY(int(4), int(4))), (min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x)))), int(4)))))), _GLF_IDENTITY(int(4), int(4)))) / 1)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(ivec3(int(4), 0, 1)), max(int(ivec3(int(4), 0, 1)), int(ivec3(int(4), 0, _GLF_IDENTITY(1, (1) | 0)))))), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), int(ivec2(_GLF_IDENTITY(int(4), int(4)), 1))), _GLF_IDENTITY((false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 ^ (int(4))), int(4))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4))) : _GLF_FUZZED(_injected_loop_counter)))))), _GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) << 0), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), int(ivec2(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | 0), 1))))), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4)))))), _GLF_IDENTITY(int(4), int(4))), (0 << _GLF_IDENTITY(int(5), int(5))) ^ (_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), int(ivec2(_GLF_IDENTITY(int(4), int(4)), 1))), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4)))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), int(ivec2(_GLF_IDENTITY(int(4), int(4)), 1))), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, ~ (~ (4))))))))))), _GLF_IDENTITY(int(4), int(4))), ~ (~ (min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), int(ivec2(_GLF_IDENTITY(int(4), int(4)), 1))), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4)))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), int(ivec2(_GLF_IDENTITY(int(4), int(4)), 1))), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, ~ (~ (4))))))))))), _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, int(ivec4(_GLF_IDENTITY(4, min(4, 4)), 0, 1, 1)))))))))))) | 0), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 ^ (_GLF_IDENTITY(int(4), int(4)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4)))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(60724) : int(4))), int(4)), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 ^ (_GLF_IDENTITY(int(4), int(4)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4)))))) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 | (_GLF_IDENTITY(int(4), int(4))))), (min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(4)), 1 * (_GLF_IDENTITY(false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(4)), (0 & -6911) + (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(4)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) / 1))))) / 1), (_GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(_GLF_IDENTITY(4, int(_GLF_IDENTITY(ivec4(4, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 1), max(ivec4(4, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 1), ivec4(4, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 1)))))), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4)))))), _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) / 1))), (min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) << int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(int(4), (true ? _GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(_injected_loop_counter) : int(4))) : _GLF_FUZZED(sign(42650))))))))), _GLF_IDENTITY(int(4), int(4)))) / 1), clamp(_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(4), int(4)), 0, 1, (0 | 0))), max(int(ivec4(_GLF_IDENTITY(int(4), int(4)), 0, 1, (0 | 0))), int(ivec4(_GLF_IDENTITY(int(4), int(4)), 0, 1, (0 | 0))))))), (min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(4))))), (true ? _GLF_IDENTITY(max(_GLF_IDENTITY(int(_GLF_IDENTITY(4, max(4, 4))), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(4))))), (max(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) + 0), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(4)), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(4))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(4)))))))) / 1) : _GLF_FUZZED(_injected_loop_counter)))), _GLF_IDENTITY(int(4), int(4)))) / 1), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4))))) ^ 0))), _GLF_IDENTITY(int(4), int(4))), (min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ (~ (4)))), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), injectionSwitch.x))), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))))), 0 ^ (_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x))))), (1 ^ 0))))), int(4)))))), _GLF_IDENTITY(int(4), int(4)))) / 1), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) | 0), (false ? _GLF_FUZZED(_GLF_IDENTITY(-95740, (_GLF_IDENTITY(-95740, (true ? _GLF_IDENTITY(-95740, 0 ^ (-95740)) : _GLF_FUZZED(_injected_loop_counter)))) | (_GLF_IDENTITY(-95740, min(-95740, -95740))))) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, int(ivec3(4, (0 >> _GLF_IDENTITY(int(1), int(1))), 1)))), int(4)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), min(_GLF_IDENTITY(int(4), (int(4)) | (int(4))), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), 0 | (int(4)))) ^ 0))), int(_GLF_IDENTITY(4, ~ (~ (4)))))), (min(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (4) ^ 0), 4))), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) << int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))), int(4)))))), _GLF_IDENTITY(int(4), int(4)))) / 1)))) | (_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, ~ (~ (4))))), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(4), int(4)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(_GLF_IDENTITY(-95740, max(-95740, -95740))) : _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, min(4, 4)))))))))), _GLF_IDENTITY(int(4), int(4))), (min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(-95740) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x)))), int(4)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) | (_GLF_IDENTITY(int(4), int(4)))))) / 1)))))))))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        break;
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         break;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), true && (bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         break;
        }
       continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, false || (false)))), ! (! (! (! (_GLF_IDENTITY(false, false || (false))))))))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))) && true)))
  return;
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-23357))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 do
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
   subgroupBarrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(2.5)))) + 0.0) > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     else
      {
      }
    }
  }
 else
  {
  }
 atomicStore(checker[virtual_gid], read, 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(4, 0 | (4)), max(4, _GLF_IDENTITY(4, (false ? _GLF_FUZZED(-23206) : 4)))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   return;
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
