#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id;
 uvec3 GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basesubgroup_size;
 uvec4 GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_size;
 uvec4 GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basesubgroup_basesubgroup_size;
 uvec4 GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup;
 uvec4 GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_base;
 uvec4 GLF_merged3_0_2_52_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), max(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((1 << _GLF_IDENTITY(int(2), int(2))))), (1 << _GLF_IDENTITY(int(2), int(2))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(_GLF_IDENTITY(int(2), ~ (~ (int(2)))), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2)))))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uvec2 GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_base;
 GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basesubgroup_size.xy = GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_base;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) ^ 0)); _injected_loop_counter --)
  {
   GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basesubgroup_basesubgroup_size.xy = GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basesubgroup_size.xy;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))), false || (bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))))))
    {
     for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y)))))), max(~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y)))))), ~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
  }
 GLF_merged3_0_2_52_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_id.xy = GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basesubgroup_basesubgroup_size.xy;
 uvec3 GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_size;
 GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup.xyz = GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_size;
 uvec3 GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidsubgroup_baseworkgroup_id;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_id.w = subgroup_id, (GLF_merged3_0_2_52_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_id.w = subgroup_id) >> 0u);
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)));
  }
 else
  {
  }
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basesubgroup_size.z = subgroup_size;
 GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basesubgroup_basesubgroup_size.w = GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basesubgroup_size.z;
 GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_base.z = GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basesubgroup_basesubgroup_size.w;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY(0, clamp(0, 0, 0)) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) / 1)), clamp(_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) / 1)), _GLF_IDENTITY(int(8), _GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) / 1), (int(8)) / 1)), _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) / 1)))), (_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) / 1))) >> 0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec4(_injected_loop_counter, 0, 1, _GLF_IDENTITY(0, max(0, 0))))) != 1); _injected_loop_counter ++)
        {
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))))));
                }
               else
                {
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         barrier();
        }
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
  {
  }
 else
  {
   GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_size.y = subgroup_local_id;
  }
 do
  {
   GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_base.y = GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_size.y;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     _GLF_IDENTITY(GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup.xyz.y = GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_base.y, (true ? GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup.xyz.y = GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_base.y : _GLF_FUZZED(uint(-6.1))));
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), ((_GLF_IDENTITY(false, (false) && true))) || false)) || false) && _GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), ((true)) || false))))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch, injectionSwitch)).y))); _injected_loop_counter ++)
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = (1 & (1 ^ 0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)))) != (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
            {
             do
              {
               do
                {
                 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((0 | 0) | 1), max(_GLF_IDENTITY(((0 | 0) | 1), 0 + (((0 | 0) | 1))), ((0 | 0) | 1)))), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 | 0) | 1))) || false, (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 | 0) | 1))) || false, true && ((_GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 | 0) | 1))) || false))) || false)); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 & 1) | _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 | (1))) | (1)))))); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)), false || (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))))))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       do
                        {
                         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             barrier();
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     else
                      {
                      }
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup.w = num_workgroup;
 GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup.xyz.x = GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup.w;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(min(gl_WorkGroupSize.x, gl_WorkGroupSize.x), (true ? min(gl_WorkGroupSize.x, gl_WorkGroupSize.x) : _GLF_FUZZED((subgroup_id)))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_size.w = workgroup_size;
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup.xyz.z = _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_size.w, (GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_size.w) << 0u);
  }
 else
  {
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID)).x;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.y = workgroup_id;
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(mat4x2(mat2(1.0) * (injectionSwitch), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)))).y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))) && true), ! (! (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec2(9.6, 6.6).x), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((- 0.2))), bvec2(true, false))).y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), bool(bool(! (! (injectionSwitch.x > injectionSwitch.y)))))) && true)))))) && true), ! (! (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x)) > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), ((! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x)) > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && true))) && true), ! (! (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), ! (! (injectionSwitch.x > injectionSwitch.y))))))) || false))))), true, true, false))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))) && true), ! (! (injectionSwitch.x > injectionSwitch.y))))), true, true, false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))) && true), ! (! (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))), true, true, false)))), bool(bvec3(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))) && true), ! (! (injectionSwitch.x > injectionSwitch.y))))), true, true, false)))), true, true)))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))) && true), ! (! (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! (! (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec4(bvec3(! (! (injectionSwitch.x > injectionSwitch.y)), false, true), false)))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(! (! (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec4(bvec3(! (! (injectionSwitch.x > injectionSwitch.y)), false, true), false)))), false, false, false))))))))) && true), ! (! (injectionSwitch.x > injectionSwitch.y)))))))), true, true, false)))), bool(bvec3(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))) && true, true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y, ! _GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), bool(bvec2((! (injectionSwitch.x > injectionSwitch.y)), true)))))))) && true))), ! (! (injectionSwitch.x > injectionSwitch.y))))), true, true, false)))), true, true))))) && true)))), ! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))) && true), ! (! (injectionSwitch.x > injectionSwitch.y))))), true, true, false))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))), ! (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))), bool(bvec4(! (! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))), true, true, false))))))) && true), ! (! (injectionSwitch.x > injectionSwitch.y))))), true, true, false)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), false))))), (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))) && true), ! (! (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), min(vec2(injectionSwitch[0], injectionSwitch[1]), vec2(injectionSwitch[0], injectionSwitch[1])))).y))))), true, true, false)))), bool(bvec3(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))) && true), _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), (! (! (injectionSwitch.x > injectionSwitch.y))) || false)))), true, true, false)))), true, true)))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))) && true), ! (! (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(abs(vec2(1.0, 1.0)))).y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! (! (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec4(bvec3(! (! (injectionSwitch.x > injectionSwitch.y)), false, true), false)))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(! (! (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec4(bvec3(! (! (injectionSwitch.x > injectionSwitch.y)), false, true), false)))), false, false, false))))))))) && true), ! (! (injectionSwitch.x > injectionSwitch.y)))))))), true, true, false)))), bool(bvec3(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))) && true, true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((injectionSwitch))) * vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y, ! _GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), bool(bvec2((! (injectionSwitch.x > injectionSwitch.y)), true)))))))) && true))), ! (! (injectionSwitch.x > injectionSwitch.y))))), true, true, false)))), true, true))))) && true))))))))));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidsubgroup_baseworkgroup_id.z = _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.y, _GLF_IDENTITY(uint(uvec2(GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.y, 0u)), (uint(uvec2(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.y, 0u ^ (GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.y)), 0u))) | 0u));
  }
 uint workgroup_base = GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup.xyz.z * _GLF_IDENTITY(GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidsubgroup_baseworkgroup_id.z, (_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidsubgroup_baseworkgroup_id, (GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidsubgroup_baseworkgroup_id) - uvec3(0u, 0u, 0u)).z) ^ 0u);
 GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_base.w = workgroup_base;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 GLF_merged3_0_2_52_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_id.xy.y = GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_base.w;
 uint subgroup_base = _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_id.w, (GLF_merged3_0_2_52_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_id.w) | (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_id.w, _GLF_IDENTITY((GLF_merged3_0_2_52_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_id.w), clamp((GLF_merged3_0_2_52_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_id.w), (GLF_merged3_0_2_52_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_id.w), (GLF_merged3_0_2_52_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_id.w))) | _GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_base.z) : _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec4(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u, 1u, 1u)))) - 0u))))), 0u ^ (_GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, uint(uvec2(0u, 0u)))))))))), 0u ^ (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_id.w, (GLF_merged3_0_2_52_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_id.w) | _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_base.z) : 0u)))), (_GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_base.z) : 0u))))) + 0u), 0u ^ (_GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, 0u ^ (0u))))))))))) * GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_base.z;
 GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.x = subgroup_base;
 GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basesubgroup_basesubgroup_size.z = GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id.x;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))
  {
   GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_base.x = GLF_merged3_0_2_52_2_1_13_3_1_13GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basesubgroup_basesubgroup_size.z;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  barrier();
 GLF_merged3_0_2_52_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_id.xy.x = GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_base.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidsubgroup_baseworkgroup_id.y = GLF_merged3_0_2_52_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_id.xy.x;
    }
  }
 uint virtual_gid = _GLF_IDENTITY(GLF_merged3_0_2_52_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_id.xy.y + GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidsubgroup_baseworkgroup_id.y, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_id.xy.y + GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidsubgroup_baseworkgroup_id.y, (GLF_merged3_0_2_52_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_id.xy.y + GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidsubgroup_baseworkgroup_id.y) >> 0u), 0u | (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_id.xy.y + _GLF_IDENTITY(GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidsubgroup_baseworkgroup_id.y, (GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidsubgroup_baseworkgroup_id.y) + 0u), (GLF_merged3_0_2_52_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_id.xy.y + GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidsubgroup_baseworkgroup_id.y) >> 0u)))), (~ (_GLF_IDENTITY(GLF_merged3_0_2_52_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_id.xy.y, (GLF_merged3_0_2_52_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_id.xy.y) ^ 0u) + GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidsubgroup_baseworkgroup_id.y)) ^ 0u))) + _GLF_IDENTITY(GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup, uvec4(GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup[0], GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup[1], GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup[2], GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup[3])).xyz.y;
 GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_size.z = virtual_gid;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   barrier();
  }
 uint next_virtual_gid = GLF_merged3_0_2_52_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_id.xy.y + _GLF_IDENTITY(GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidsubgroup_baseworkgroup_id.y, max(GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidsubgroup_baseworkgroup_id.y, GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidsubgroup_baseworkgroup_id.y)) + _GLF_IDENTITY((_GLF_IDENTITY((GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup.xyz.y + 1) % GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_base.z, ((_GLF_IDENTITY(GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup.xyz.y + 1, max(_GLF_IDENTITY(GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup.xyz.y + 1, (GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup.xyz.y + 1) * 1u), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup, min(GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup, GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup)).xyz.y + 1, max(GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup.xyz.y + 1, _GLF_IDENTITY(GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup.xyz.y + 1, (GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup.xyz.y + 1) / 1u)))))) % GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_base.z) / _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), (_GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (_GLF_IDENTITY(uint(0u), 1u * (uint(0u)))) << 0u), uint(0u))), clamp(((1u << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))) >> _GLF_IDENTITY(uint(0u), uint(0u))), ((_GLF_IDENTITY(1u, (1u) / 1u) << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), ((_GLF_IDENTITY(1u, 0u | (_GLF_IDENTITY(1u, 1u * (1u)))) << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))))) << 0u))), (_GLF_IDENTITY((_GLF_IDENTITY((GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup.xyz.y + 1) % GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_base.z, ((_GLF_IDENTITY(GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup.xyz.y + 1, max(_GLF_IDENTITY(GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup.xyz.y + 1, (GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup.xyz.y + 1) * 1u), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup, min(GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup, GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup)).xyz.y + 1, max(GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup.xyz.y + 1, _GLF_IDENTITY(GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup.xyz.y + 1, (GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup.xyz.y + 1) / 1u)))))) % GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_base.z) / _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), (_GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (_GLF_IDENTITY(uint(0u), 1u * (uint(0u)))) << 0u), uint(0u))), clamp(((1u << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))) >> _GLF_IDENTITY(uint(0u), uint(0u))), ((_GLF_IDENTITY(1u, (1u) / 1u) << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), ((_GLF_IDENTITY(1u, 0u | (_GLF_IDENTITY(1u, 1u * (1u)))) << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))))) << 0u))), ((_GLF_IDENTITY((GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup.xyz.y + 1) % GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_base.z, ((_GLF_IDENTITY(GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup.xyz.y + 1, max(_GLF_IDENTITY(GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup.xyz.y + 1, (GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup.xyz.y + 1) * 1u), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup, min(GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup, GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup)).xyz.y + 1, max(GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup.xyz.y + 1, _GLF_IDENTITY(GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup.xyz.y + 1, (GLF_merged2_0_3_76_3_1_13GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_sizenum_workgroup.xyz.y + 1) / 1u)))))) % GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_14subgroup_basesubgroup_local_idsubgroup_sizeworkgroup_base.z) / _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), (_GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (_GLF_IDENTITY(uint(0u), 1u * (uint(0u)))) << 0u), uint(0u))), clamp(((1u << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))) >> _GLF_IDENTITY(uint(0u), uint(0u))), ((_GLF_IDENTITY(1u, (1u) / 1u) << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), ((_GLF_IDENTITY(1u, 0u | (_GLF_IDENTITY(1u, 1u * (1u)))) << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))))) << 0u)))) >> 0u)) - 0u);
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> int(_GLF_ZERO(0.0, injectionSwitch.x))))
  {
   GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidsubgroup_baseworkgroup_id.x = next_virtual_gid;
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1, int(ivec3(1, 0, 0))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
  {
   atomicStore(buf[_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidsubgroup_baseworkgroup_id.x, clamp(_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidsubgroup_baseworkgroup_id.x, (_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidsubgroup_baseworkgroup_id.x, (false ? _GLF_FUZZED(num_workgroup) : GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidsubgroup_baseworkgroup_id.x))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidsubgroup_baseworkgroup_id.x, _GLF_IDENTITY(GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidsubgroup_baseworkgroup_id, (_GLF_IDENTITY(GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidsubgroup_baseworkgroup_id, uvec3(GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidsubgroup_baseworkgroup_id[0], GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidsubgroup_baseworkgroup_id[1], GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidsubgroup_baseworkgroup_id[2]))) * uvec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).x))], uint(1), 4, 64, 4);
  }
 uint read = atomicLoad(buf[GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_size.z], 4, 64, 2);
 GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_size.x = read;
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged3_0_2_52_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_id.z = _GLF_IDENTITY(GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_size, (GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_size) + uvec4(0u, 0u, 0u, 0u)).x;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(_GLF_IDENTITY(3, (3) | 0))))))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   do
    {
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED(-4657) : 1, max(false ? _GLF_FUZZED(-4657) : _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (1))) / (1 | 1)), false ? _GLF_FUZZED(-4657) : 1))))); _injected_loop_counter ++)
      {
       subgroupBarrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), _GLF_IDENTITY(int(0), (int(0)) ^ 0))))), ((0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) - (0 & -91778)), 0))), (int(0)) ^ _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) + 0)) << 0))))))) ^ 0)); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), 0.0, 1.0, 1.0, 0.0, tan(0.0)), (true ? mat3x2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), 0.0, 1.0, 1.0, 0.0, tan(0.0)) : _GLF_FUZZED(mat3x2(585.916, 0.5, -683.626, -4922.0687, 492.258, 120.534))))), (float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), 0.0, 1.0, 1.0, 0.0, tan(0.0)), (true ? mat3x2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), 0.0, 1.0, 1.0, 0.0, tan(0.0)) : _GLF_FUZZED(mat3x2(585.916, 0.5, -683.626, -4922.0687, 492.258, 120.534)))))) - 0.0)) > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-985.906), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(1.9)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), ! (! (_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (0) << 0)))))))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y) - 0.0), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), ! (! (bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).y))))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), ! (! (bool(injectionSwitch.x > injectionSwitch.y)))))) || _GLF_IDENTITY(false, true && (false)))))), (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, true))))), bool(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, true)))))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) || false) && _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false))))))) && true)))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             atomicStore(checker[GLF_merged4_0_1_4_1_1_17_2_1_11_3_1_14readsubgroup_local_idvirtual_gidworkgroup_size.z], GLF_merged3_0_2_52_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_14subgroup_baseworkgroup_basereadsubgroup_id.z, 4, 64, 4);
             do
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
