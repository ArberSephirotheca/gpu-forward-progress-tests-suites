#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
      {
       barrier();
      }
    }
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
           barrier();
          }
        }
       barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), _GLF_IDENTITY(true, (true) && true), true))))))))));
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (36167 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 | (int(7))))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) - vec2(0.0, 0.0)).x < injectionSwitch.y)) && (false))))
          barrier();
        }
       barrier();
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))))), ! (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1.4), _GLF_FUZZED(-2.2)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x < injectionSwitch.y))))) && (false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), false)))))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true)) && true))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, uvec3(1u, 1u, 1u) * (gl_WorkGroupSize)).x), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(1u, 1u, 1u) * (gl_WorkGroupSize)).x, (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(1u, 1u, 1u) * (gl_WorkGroupSize)).x) / (1u & 1u))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) * uvec3(1u, 1u, 1u)).x, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, _GLF_IDENTITY(0u, ~ (~ (0u))), 0u)).x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(_GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (0u << _GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(8u, (false ? _GLF_FUZZED(subgroup_size) : 8u))))) ^ (gl_WorkGroupSize.x)))), gl_WorkGroupSize.x, gl_WorkGroupSize.x))))), gl_WorkGroupSize.x)), _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, _GLF_IDENTITY(((_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize)).x) << 0u), (0u << _GLF_IDENTITY(uint(4u), uint(4u))) ^ (((_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, (true ? _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) / uvec3(1u, 1u, 1u)) : _GLF_FUZZED(uvec3(123174u, 160968u, 111054u)))), _GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]))))) | (gl_WorkGroupSize), clamp(_GLF_IDENTITY((gl_WorkGroupSize) | (gl_WorkGroupSize), ~ (~ ((gl_WorkGroupSize) | (gl_WorkGroupSize)))), (gl_WorkGroupSize) | (gl_WorkGroupSize), (gl_WorkGroupSize) | (gl_WorkGroupSize)))).x) << 0u))) / 1u)) | 0u), (_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uint(gl_WorkGroupSize.x)))) << _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) - 0u), 0u)), (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((gl_WorkGroupSize.x) << 0u) / 1u)) | 0u)) - 0u))), ((_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x)), _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, _GLF_IDENTITY(((_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize)))))), (uvec3(0u, 0u, 0u) ^ uvec3(0u, 0u, 0u)) + ((_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))))))))).x) << 0u), (0u << _GLF_IDENTITY(uint(4u), uint(4u))) ^ (((_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize)).x) << 0u))) / 1u)) | 0u), (_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uint(gl_WorkGroupSize.x)))) << _GLF_IDENTITY(0u, max(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) - 0u), (_GLF_IDENTITY(0u, (0u) - 0u)) << 0u), 0u)), (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | 0u)) << 0u) / 1u)) | 0u)) - 0u)))) - _GLF_IDENTITY((17294u & 0u), (_GLF_IDENTITY((17294u & 0u), _GLF_IDENTITY(uint(uint((17294u & 0u))), ~ (~ (uint(uint((17294u & 0u)))))))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (gl_WorkGroupSize.x))), min((_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) * uvec3(1u, 1u, 1u)).x, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, _GLF_IDENTITY(0u, ~ (~ (0u))), 0u)).x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(_GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (0u << _GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(8u, (false ? _GLF_FUZZED(subgroup_size) : 8u))))) ^ (gl_WorkGroupSize.x)))), gl_WorkGroupSize.x, gl_WorkGroupSize.x))))), gl_WorkGroupSize.x)), _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, _GLF_IDENTITY(((_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize)).x) << 0u), (0u << _GLF_IDENTITY(uint(4u), uint(4u))) ^ (((_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, (true ? _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) / uvec3(1u, 1u, 1u)) : _GLF_FUZZED(uvec3(123174u, 160968u, 111054u)))), _GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]))))) | (gl_WorkGroupSize), clamp(_GLF_IDENTITY((gl_WorkGroupSize) | (gl_WorkGroupSize), ~ (~ ((gl_WorkGroupSize) | (gl_WorkGroupSize)))), (gl_WorkGroupSize) | (gl_WorkGroupSize), (gl_WorkGroupSize) | (gl_WorkGroupSize)))).x) << 0u))) / 1u)) | 0u), (_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uint(gl_WorkGroupSize.x)))) << _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) - 0u), 0u)), (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((gl_WorkGroupSize.x) << 0u) / 1u)) | 0u)) - 0u))), ((_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x)), _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, _GLF_IDENTITY(((_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize)))))), (uvec3(0u, 0u, 0u) ^ uvec3(0u, 0u, 0u)) + ((_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))))))))).x) << 0u), (0u << _GLF_IDENTITY(uint(4u), uint(4u))) ^ (((_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize)).x) << 0u))) / 1u)) | 0u), (_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uint(gl_WorkGroupSize.x)))) << _GLF_IDENTITY(0u, max(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) - 0u), (_GLF_IDENTITY(0u, (0u) - 0u)) << 0u), 0u)), (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | 0u)) << 0u) / 1u)) | 0u)) - 0u)))) - _GLF_IDENTITY((17294u & 0u), (_GLF_IDENTITY((17294u & 0u), _GLF_IDENTITY(uint(uint((17294u & 0u))), ~ (~ (uint(uint((17294u & 0u)))))))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (gl_WorkGroupSize.x))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) * uvec3(1u, 1u, 1u)).x, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, _GLF_IDENTITY(0u, ~ (~ (0u))), 0u)).x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(_GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (0u << _GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(8u, (false ? _GLF_FUZZED(subgroup_size) : 8u))))) ^ (gl_WorkGroupSize.x)))), gl_WorkGroupSize.x, gl_WorkGroupSize.x))))), gl_WorkGroupSize.x)), _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, _GLF_IDENTITY(((_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize)).x) << 0u), (0u << _GLF_IDENTITY(uint(4u), uint(4u))) ^ (((_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, (true ? _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) / uvec3(1u, 1u, 1u)) : _GLF_FUZZED(uvec3(123174u, 160968u, 111054u)))), _GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]))))) | (gl_WorkGroupSize), clamp(_GLF_IDENTITY((gl_WorkGroupSize) | (gl_WorkGroupSize), ~ (~ ((gl_WorkGroupSize) | (gl_WorkGroupSize)))), (gl_WorkGroupSize) | (gl_WorkGroupSize), (gl_WorkGroupSize) | (gl_WorkGroupSize)))).x) << 0u))) / 1u)) | 0u), (_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uint(gl_WorkGroupSize.x)))) << _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) - 0u), 0u)), (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((gl_WorkGroupSize.x) << 0u) / 1u)) | 0u)) - 0u))), ((_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x)), _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, _GLF_IDENTITY(((_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize)))))), (uvec3(0u, 0u, 0u) ^ uvec3(0u, 0u, 0u)) + ((_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))))))))).x) << 0u), (0u << _GLF_IDENTITY(uint(4u), uint(4u))) ^ (((_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize)).x) << 0u))) / 1u)) | 0u), (_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uint(gl_WorkGroupSize.x)))) << _GLF_IDENTITY(0u, max(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) - 0u), (_GLF_IDENTITY(0u, (0u) - 0u)) << 0u), 0u)), (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | 0u)) << 0u) / 1u)) | 0u)) - 0u)))) - _GLF_IDENTITY((17294u & 0u), (_GLF_IDENTITY((17294u & 0u), _GLF_IDENTITY(uint(uint((17294u & 0u))), ~ (~ (uint(uint((17294u & 0u)))))))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (gl_WorkGroupSize.x))))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize)).x, _GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x))))), _GLF_IDENTITY(gl_WorkGroupSize, max(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)), gl_WorkGroupSize)).x)), max(_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize)).x, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x))))), (_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x)))))) * 1u)) | (_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x)))))))))), gl_WorkGroupSize.x)), _GLF_IDENTITY(gl_WorkGroupSize.x, clamp(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize)).x, _GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) - 0u)))))), gl_WorkGroupSize.x)))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(uint(uvec2(gl_WorkGroupSize.x, 1u)), (true ? uint(uvec2(gl_WorkGroupSize.x, 1u)) : _GLF_FUZZED(165788u))))) << 0u, (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, _GLF_IDENTITY(((gl_WorkGroupSize.x) << _GLF_IDENTITY(0u, min(0u, 0u))), min(((gl_WorkGroupSize.x) << _GLF_IDENTITY(0u, min(0u, 0u))), ((gl_WorkGroupSize.x) << _GLF_IDENTITY(0u, min(0u, 0u))))) / 1u)) | 0u)), uint(uvec3(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, (_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize)).x) << 0u, ((gl_WorkGroupSize.x) << _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))) / 1u)) | 0u)), 0u, _GLF_IDENTITY(0u, (0u) / 1u))))) | (gl_WorkGroupSize.x)))) | _GLF_IDENTITY(0u, (0u) | (0u))) | (gl_WorkGroupSize.x), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(_GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, gl_WorkGroupSize.x)), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (gl_WorkGroupSize))) >> uvec3(0u, 0u, 0u), ((gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)) | _GLF_IDENTITY((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(5u), uvec3(5u))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(5u), uvec3(5u))), ((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(5u), uvec3(5u)))) * uvec3(1u, 1u, 1u)))))).x, ~ _GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x)))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x)))), (true ? (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x)))) : _GLF_FUZZED(44653u)))) << 0u), 0u + (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x))), (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x)))) / ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))))), ~ (~ ((~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(_GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (_GLF_IDENTITY(gl_WorkGroupSize.x, 0u | (gl_WorkGroupSize.x)))), gl_WorkGroupSize.x, gl_WorkGroupSize.x)))))))))), gl_WorkGroupSize.x)), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(clamp(gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)).x, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, 0u ^ (gl_WorkGroupSize.x)))))), max(~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, 0u ^ (gl_WorkGroupSize.x)))))), ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, 0u ^ (gl_WorkGroupSize.x)))))))))))), gl_WorkGroupSize.x), (_GLF_IDENTITY(clamp(gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)).x, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, 0u ^ (gl_WorkGroupSize.x)))))), max(~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, 0u ^ (gl_WorkGroupSize.x)))))), ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, 0u ^ (gl_WorkGroupSize.x)))))))))))), gl_WorkGroupSize.x), max(clamp(gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)).x, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, 0u ^ (gl_WorkGroupSize.x)))))), max(~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, 0u ^ (gl_WorkGroupSize.x)))))), ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, 0u ^ (gl_WorkGroupSize.x)))))))))))), gl_WorkGroupSize.x), _GLF_IDENTITY(clamp(gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)).x, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, 0u ^ (gl_WorkGroupSize.x)))))), max(~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, 0u ^ (gl_WorkGroupSize.x)))))), ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, 0u ^ (gl_WorkGroupSize.x)))))))))))), gl_WorkGroupSize.x), uint(uvec4(clamp(gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)).x, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, 0u ^ (gl_WorkGroupSize.x)))))), max(~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, 0u ^ (gl_WorkGroupSize.x)))))), ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, 0u ^ (gl_WorkGroupSize.x)))))))))))), gl_WorkGroupSize.x), 0u, 1u, 1u)))))) + 0u)), (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((gl_WorkGroupSize), (_GLF_IDENTITY((gl_WorkGroupSize), (_GLF_IDENTITY((gl_WorkGroupSize), ((gl_WorkGroupSize)) | ((gl_WorkGroupSize)))) ^ uvec3(0u, 0u, 0u))) - uvec3(0u, 0u, 0u)) >> uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)).x, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, 0u ^ (gl_WorkGroupSize.x)))))), max(~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, 0u ^ (gl_WorkGroupSize.x)))))), ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, 0u ^ (gl_WorkGroupSize.x))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)).x, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, 0u ^ (gl_WorkGroupSize.x)))))), max(~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, 0u ^ (gl_WorkGroupSize.x)))))), ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, 0u ^ (gl_WorkGroupSize.x)))))))))) << _GLF_IDENTITY(0u, (0u) ^ 0u))))), gl_WorkGroupSize.x))) << 0u)) - 0u), _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, _GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, _GLF_IDENTITY(min(_GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, min(((gl_WorkGroupSize.x) << 0u) / 1u, ((gl_WorkGroupSize.x) << 0u) / 1u)), _GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, ~ (~ (_GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, max(((gl_WorkGroupSize.x) << 0u) / 1u, ((gl_WorkGroupSize.x) << 0u) / 1u)))))), (min(_GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, min(((gl_WorkGroupSize.x) << 0u) / 1u, ((gl_WorkGroupSize.x) << 0u) / 1u)), _GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, ~ (~ (_GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, max(((gl_WorkGroupSize.x) << 0u) / 1u, ((gl_WorkGroupSize.x) << 0u) / 1u))))))) | 0u)))) | 0u), (_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uint(gl_WorkGroupSize.x)))) << 0u, (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((gl_WorkGroupSize.x) << 0u) / _GLF_IDENTITY(1u, (1u) >> 0u))) | 0u)) - 0u))) | (_GLF_IDENTITY(gl_WorkGroupSize.x, max(_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uvec3(gl_WorkGroupSize.x, 0u, 0u))), gl_WorkGroupSize.x))), (_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, _GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, _GLF_IDENTITY(min(_GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, min(((gl_WorkGroupSize.x) << 0u) / 1u, ((gl_WorkGroupSize.x) << 0u) / 1u)), _GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, ~ (~ (_GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, max(((gl_WorkGroupSize.x) << 0u) / 1u, ((gl_WorkGroupSize.x) << 0u) / 1u)))))), (min(_GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, min(((gl_WorkGroupSize.x) << 0u) / 1u, ((gl_WorkGroupSize.x) << 0u) / 1u)), _GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, ~ (~ (_GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, max(((gl_WorkGroupSize.x) << 0u) / 1u, ((gl_WorkGroupSize.x) << 0u) / 1u))))))) | 0u)))) | 0u), (_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uint(gl_WorkGroupSize.x)))) << 0u, (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((gl_WorkGroupSize.x) << 0u) / _GLF_IDENTITY(1u, (1u) >> 0u))) | 0u)) - 0u))) | (_GLF_IDENTITY(gl_WorkGroupSize.x, max(_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uvec3(gl_WorkGroupSize.x, 0u, 0u))), gl_WorkGroupSize.x))), clamp((_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, _GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, _GLF_IDENTITY(min(_GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, min(((gl_WorkGroupSize.x) << 0u) / 1u, ((gl_WorkGroupSize.x) << 0u) / 1u)), _GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, ~ (~ (_GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, max(((gl_WorkGroupSize.x) << 0u) / 1u, ((gl_WorkGroupSize.x) << 0u) / 1u)))))), (min(_GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, min(((gl_WorkGroupSize.x) << 0u) / 1u, ((gl_WorkGroupSize.x) << 0u) / 1u)), _GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, ~ (~ (_GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, max(((gl_WorkGroupSize.x) << 0u) / 1u, ((gl_WorkGroupSize.x) << 0u) / 1u))))))) | 0u)))) | 0u), (_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uint(gl_WorkGroupSize.x)))) << 0u, (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((gl_WorkGroupSize.x) << 0u) / _GLF_IDENTITY(1u, (1u) >> 0u))) | 0u)) - 0u))) | (_GLF_IDENTITY(gl_WorkGroupSize.x, max(_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uvec3(gl_WorkGroupSize.x, 0u, 0u))), gl_WorkGroupSize.x))), _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, _GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, _GLF_IDENTITY(min(_GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, min(((gl_WorkGroupSize.x) << 0u) / 1u, ((gl_WorkGroupSize.x) << 0u) / 1u)), _GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, ~ (~ (_GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, max(((gl_WorkGroupSize.x) << 0u) / 1u, ((gl_WorkGroupSize.x) << 0u) / 1u)))))), (min(_GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, min(((gl_WorkGroupSize.x) << 0u) / 1u, ((gl_WorkGroupSize.x) << 0u) / 1u)), _GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, ~ (~ (_GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, max(((gl_WorkGroupSize.x) << 0u) / 1u, ((gl_WorkGroupSize.x) << 0u) / 1u))))))) | 0u)))) | 0u), (_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uint(gl_WorkGroupSize.x)))) << 0u, (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((gl_WorkGroupSize.x) << 0u) / _GLF_IDENTITY(1u, (1u) >> 0u))) | 0u)) - 0u))) | (_GLF_IDENTITY(gl_WorkGroupSize.x, max(_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uvec3(gl_WorkGroupSize.x, 0u, 0u))), gl_WorkGroupSize.x))), uint(uvec4((_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, _GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, _GLF_IDENTITY(min(_GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, min(((gl_WorkGroupSize.x) << 0u) / 1u, ((gl_WorkGroupSize.x) << 0u) / 1u)), _GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, ~ (~ (_GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, max(((gl_WorkGroupSize.x) << 0u) / 1u, ((gl_WorkGroupSize.x) << 0u) / 1u)))))), (min(_GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, min(((gl_WorkGroupSize.x) << 0u) / 1u, ((gl_WorkGroupSize.x) << 0u) / 1u)), _GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, ~ (~ (_GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, max(((gl_WorkGroupSize.x) << 0u) / 1u, ((gl_WorkGroupSize.x) << 0u) / 1u))))))) | 0u)))) | 0u), (_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uint(gl_WorkGroupSize.x)))) << 0u, (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((gl_WorkGroupSize.x) << 0u) / _GLF_IDENTITY(1u, (1u) >> 0u))) | 0u)) - 0u))) | (_GLF_IDENTITY(gl_WorkGroupSize.x, max(_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uvec3(gl_WorkGroupSize.x, 0u, 0u))), gl_WorkGroupSize.x))), 1u, 1u, 1u))), _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, _GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, _GLF_IDENTITY(min(_GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, min(((gl_WorkGroupSize.x) << 0u) / 1u, ((gl_WorkGroupSize.x) << 0u) / 1u)), _GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, ~ (~ (_GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, max(((gl_WorkGroupSize.x) << 0u) / 1u, ((gl_WorkGroupSize.x) << 0u) / 1u)))))), (min(_GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, min(((gl_WorkGroupSize.x) << 0u) / 1u, ((gl_WorkGroupSize.x) << 0u) / 1u)), _GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, ~ (~ (_GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, max(((gl_WorkGroupSize.x) << 0u) / 1u, ((gl_WorkGroupSize.x) << 0u) / 1u))))))) | 0u)))) | 0u), (_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uint(gl_WorkGroupSize.x)))) << 0u, (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((gl_WorkGroupSize.x) << 0u) / _GLF_IDENTITY(1u, (1u) >> 0u))) | 0u)) - 0u))) | (_GLF_IDENTITY(gl_WorkGroupSize.x, max(_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uvec3(gl_WorkGroupSize.x, 0u, 0u))), gl_WorkGroupSize.x))), clamp((_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, _GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, _GLF_IDENTITY(min(_GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, min(((gl_WorkGroupSize.x) << 0u) / 1u, ((gl_WorkGroupSize.x) << 0u) / 1u)), _GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, ~ (~ (_GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, max(((gl_WorkGroupSize.x) << 0u) / 1u, ((gl_WorkGroupSize.x) << 0u) / 1u)))))), (min(_GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, min(((gl_WorkGroupSize.x) << 0u) / 1u, ((gl_WorkGroupSize.x) << 0u) / 1u)), _GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, ~ (~ (_GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, max(((gl_WorkGroupSize.x) << 0u) / 1u, ((gl_WorkGroupSize.x) << 0u) / 1u))))))) | 0u)))) | 0u), (_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uint(gl_WorkGroupSize.x)))) << 0u, (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((gl_WorkGroupSize.x) << 0u) / _GLF_IDENTITY(1u, (1u) >> 0u))) | 0u)) - 0u))) | (_GLF_IDENTITY(gl_WorkGroupSize.x, max(_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uvec3(gl_WorkGroupSize.x, 0u, 0u))), gl_WorkGroupSize.x))), (_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, _GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, _GLF_IDENTITY(min(_GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, min(((gl_WorkGroupSize.x) << 0u) / 1u, ((gl_WorkGroupSize.x) << 0u) / 1u)), _GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, ~ (~ (_GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, max(((gl_WorkGroupSize.x) << 0u) / 1u, ((gl_WorkGroupSize.x) << 0u) / 1u)))))), (min(_GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, min(((gl_WorkGroupSize.x) << 0u) / 1u, ((gl_WorkGroupSize.x) << 0u) / 1u)), _GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, ~ (~ (_GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, max(((gl_WorkGroupSize.x) << 0u) / 1u, ((gl_WorkGroupSize.x) << 0u) / 1u))))))) | 0u)))) | 0u), (_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uint(gl_WorkGroupSize.x)))) << 0u, (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((gl_WorkGroupSize.x) << 0u) / _GLF_IDENTITY(1u, (1u) >> 0u))) | 0u)) - 0u))) | (_GLF_IDENTITY(gl_WorkGroupSize.x, max(_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uvec3(gl_WorkGroupSize.x, 0u, 0u))), gl_WorkGroupSize.x))), (_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, _GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, _GLF_IDENTITY(min(_GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, min(((gl_WorkGroupSize.x) << 0u) / 1u, ((gl_WorkGroupSize.x) << 0u) / 1u)), _GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, ~ (~ (_GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, max(((gl_WorkGroupSize.x) << 0u) / 1u, ((gl_WorkGroupSize.x) << 0u) / 1u)))))), (min(_GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, min(((gl_WorkGroupSize.x) << 0u) / 1u, ((gl_WorkGroupSize.x) << 0u) / 1u)), _GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, ~ (~ (_GLF_IDENTITY(((gl_WorkGroupSize.x) << 0u) / 1u, max(((gl_WorkGroupSize.x) << 0u) / 1u, ((gl_WorkGroupSize.x) << 0u) / 1u))))))) | 0u)))) | 0u), (_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uint(gl_WorkGroupSize.x)))) << 0u, (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((gl_WorkGroupSize.x) << 0u) / _GLF_IDENTITY(1u, (1u) >> 0u))) | 0u)) - 0u))) | (_GLF_IDENTITY(gl_WorkGroupSize.x, max(_GLF_IDENTITY(gl_WorkGroupSize.x, uint(uvec3(gl_WorkGroupSize.x, 0u, 0u))), gl_WorkGroupSize.x)))))))) >> 0u))), ((_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)))), (gl_WorkGroupSize) | (gl_WorkGroupSize)).x, min(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)))), (gl_WorkGroupSize) | (gl_WorkGroupSize)).x, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)))), (gl_WorkGroupSize) | (gl_WorkGroupSize)).x)), _GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x), 0u | (clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x))))))), gl_WorkGroupSize.x)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, _GLF_IDENTITY((_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((gl_WorkGroupSize.x) << 0u) / 1u)) | 0u, _GLF_IDENTITY(0u ^ ((_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x))) << 0u) / 1u)) | 0u), (_GLF_IDENTITY(0u ^ ((_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x))) << 0u) / 1u)) | 0u), 0u ^ (0u ^ ((_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x))) << 0u) / 1u)) | 0u)))) | (0u ^ ((_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x))) << 0u) / 1u)) | 0u)))))), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) - 0u), (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((gl_WorkGroupSize.x) << 0u) / 1u)) | 0u)), _GLF_IDENTITY(((0u | 0u) | 0u), (((0u | 0u) | 0u)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) | (_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) - 0u), (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((gl_WorkGroupSize.x) << 0u) / _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) >> 0u)) - 0u))) | 0u)))), 0u, 0u)))) | (_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec4(gl_WorkGroupSize, 0u), max(uvec4(gl_WorkGroupSize, 0u), uvec4(gl_WorkGroupSize, 0u)))), _GLF_IDENTITY((uvec3(uvec4(gl_WorkGroupSize, 0u))) >> uvec3(0u, 0u, 0u), ((uvec3(uvec4(gl_WorkGroupSize, 0u))) >> uvec3(0u, 0u, 0u)) | _GLF_IDENTITY(((uvec3(uvec4(gl_WorkGroupSize, _GLF_IDENTITY(0u, (0u) << 0u)))) >> uvec3(0u, 0u, 0u)), uvec3(_GLF_IDENTITY(uvec4(((uvec3(uvec4(gl_WorkGroupSize, _GLF_IDENTITY(0u, (0u) << 0u)))) >> uvec3(0u, 0u, 0u)), 1u), ~ (~ (uvec4(((uvec3(uvec4(gl_WorkGroupSize, _GLF_IDENTITY(0u, (0u) << 0u)))) >> uvec3(0u, 0u, 0u)), 1u))))))))).x), max((_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, _GLF_IDENTITY((_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((gl_WorkGroupSize.x) << 0u) / 1u)) | _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uint(0u)))) | (0u)), 0u ^ ((_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((uint(15.97) ^ 84446u)) : gl_WorkGroupSize.x)), min(gl_WorkGroupSize.x, gl_WorkGroupSize.x))) << 0u) / 1u)) | 0u)))), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) - 0u), (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((gl_WorkGroupSize.x) << 0u) / 1u)) | 0u)), ((_GLF_IDENTITY(0u, (0u) ^ 0u) | 0u) | 0u) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (gl_WorkGroupSize.x))), _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, gl_WorkGroupSize)).x) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) - 0u), (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, (_GLF_IDENTITY((gl_WorkGroupSize.x), (0u >> _GLF_IDENTITY(uint(5u), uint(5u))) | (_GLF_IDENTITY((gl_WorkGroupSize.x), ((gl_WorkGroupSize.x)) >> 0u))) << 0u) / 1u)) | 0u)))), 0u, 0u)))) | (_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(uvec4(gl_WorkGroupSize, 0u)), _GLF_IDENTITY(_GLF_IDENTITY((uvec3(uvec4(gl_WorkGroupSize, 0u))), clamp((uvec3(uvec4(gl_WorkGroupSize, 0u))), (uvec3(uvec4(gl_WorkGroupSize, 0u))), (uvec3(uvec4(gl_WorkGroupSize, 0u))))) >> uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u & (176699u & 192923u)) ^ (0u))), ((uvec3(uvec4(gl_WorkGroupSize, 0u))) >> uvec3(0u, 0u, 0u)) | ((uvec3(uvec4(gl_WorkGroupSize, 0u))) >> uvec3(0u, 0u, 0u))))).x), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x) << _GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY((_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((gl_WorkGroupSize.x) << 0u) / 1u)) | 0u, 0u ^ ((_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) ^ 0u)) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) << 0u, ((_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x))) << 0u) / 1u)) | 0u)))), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) - 0u), (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((gl_WorkGroupSize.x) << 0u) / 1u)) | 0u)), ((0u | 0u) | 0u) | (_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) - 0u), _GLF_IDENTITY((_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((gl_WorkGroupSize.x) << 0u) / 1u)), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((gl_WorkGroupSize.x) << 0u) / 1u))), (~ ((_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((gl_WorkGroupSize.x) << 0u) / 1u)))) / 1u))) | 0u)))), 0u, 0u), min(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) - 0u), (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((gl_WorkGroupSize.x) << 0u) / 1u)) | 0u)), ((0u | 0u) | 0u) | (_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) - 0u), _GLF_IDENTITY((_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((gl_WorkGroupSize.x) << 0u) / 1u)), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((gl_WorkGroupSize.x) << 0u) / 1u))), (~ ((_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((gl_WorkGroupSize.x) << 0u) / 1u)))) / 1u))) | 0u)))), 0u, 0u), uvec3(uvec4(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) - 0u), (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((gl_WorkGroupSize.x) << 0u) / 1u)) | 0u)), ((0u | 0u) | 0u) | (_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) - 0u), _GLF_IDENTITY((_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((gl_WorkGroupSize.x) << 0u) / 1u)), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((gl_WorkGroupSize.x) << 0u) / 1u))), (~ ((_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((gl_WorkGroupSize.x) << 0u) / 1u)))) / 1u))) | 0u)))), 0u, 0u), 1u))), uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) - 0u), (_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((gl_WorkGroupSize.x) << 0u) / 1u)) | 0u)), ((0u | 0u) | 0u) | (_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) - 0u), _GLF_IDENTITY((_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((gl_WorkGroupSize.x) << 0u) / 1u)), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((gl_WorkGroupSize.x) << 0u) / 1u))), (~ ((_GLF_IDENTITY((gl_WorkGroupSize.x) << 0u, ((gl_WorkGroupSize.x) << 0u) / 1u)))) / 1u))) | 0u)))), 0u, 0u)))))) | (_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec4(gl_WorkGroupSize, 0u), clamp(_GLF_IDENTITY(uvec4(gl_WorkGroupSize, 0u), (uvec4(gl_WorkGroupSize, 0u)) | (uvec4(gl_WorkGroupSize, 0u))), _GLF_IDENTITY(uvec4(gl_WorkGroupSize, 0u), (uvec4(gl_WorkGroupSize, 0u)) | (uvec4(gl_WorkGroupSize, 0u))), uvec4(gl_WorkGroupSize, 0u)))), _GLF_IDENTITY((uvec3(uvec4(gl_WorkGroupSize, 0u))) >> uvec3(0u, 0u, 0u), ((uvec3(uvec4(gl_WorkGroupSize, 0u))) >> uvec3(0u, 0u, 0u)) | ((uvec3(uvec4(gl_WorkGroupSize, 0u))) >> uvec3(0u, 0u, 0u))))).x)))))) | _GLF_IDENTITY(0u, (0u) | (0u))) | (gl_WorkGroupSize.x)))));
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id)), clamp(_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id)), (workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id))) | 0u), _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id)), (workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id))) - 0u), workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id))));
 uint subgroup_base = subgroup_id * subgroup_size;
 for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 0u + (workgroup_base)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(workgroup_base, 0u + (workgroup_base)))), max(~ (~ (_GLF_IDENTITY(workgroup_base, 0u + (workgroup_base)))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(workgroup_base, 0u + (workgroup_base)))), uint(uvec3(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(workgroup_base, 0u + (workgroup_base)))), (~ (~ (_GLF_IDENTITY(workgroup_base, 0u + (workgroup_base))))) << 0u), 1u, 1u)))))) + subgroup_base + subgroup_local_id;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-6.5)), float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y, injectionSwitch.y))), bool(_GLF_IDENTITY(true, bool(bvec4(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))) + 0.0), float(float(injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(atomicMax((subgroup_size), 79640u)) : subgroup_base)) + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_local_id))), _GLF_IDENTITY((subgroup_local_id), uint(_GLF_IDENTITY(uint((subgroup_local_id)), min(uint((subgroup_local_id)), uint((subgroup_local_id)))))) | 0u)) << 0u) + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) << 0u));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))));
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) - 0))) ^ (1 | 1))); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false)))))))));
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), (_GLF_IDENTITY((_GLF_DEAD(false)), false || ((_GLF_DEAD(false))))) || false) || _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   do
    {
     do
      {
       for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))));
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(976.535)), vec2(_GLF_FUZZED((-9.6 + -70.90)), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_IDENTITY(true, false || (true)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(0 ^ 0, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), false, true)))))), ! (! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), false, true))))))))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), (_GLF_IDENTITY(bool(bool(true)), false || (_GLF_IDENTITY(bool(bool(true)), false || (_GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true)))))))))) && true)))), ((! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), (_GLF_IDENTITY(bool(bool(true)), false || (_GLF_IDENTITY(bool(bool(true)), false || (_GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true)))))))))) && true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, false, false))))))))) ? 0 ^ _GLF_IDENTITY(0, (0) - _GLF_IDENTITY(0, (0 ^ 1) * (0))) : _GLF_FUZZED(-26484)))), ((_GLF_IDENTITY(0 ^ 0, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), false, true)))))), ! (! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), false, true))))))))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), (_GLF_IDENTITY(bool(bool(true)), false || (_GLF_IDENTITY(bool(bool(true)), false || (_GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true)))))))))) && true)))), ((! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), (_GLF_IDENTITY(bool(bool(true)), false || (_GLF_IDENTITY(bool(bool(true)), false || (_GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true)))))))))) && true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, false, false))))))))) ? 0 ^ _GLF_IDENTITY(0, (0) - _GLF_IDENTITY(0, (0 ^ 1) * (0))) : _GLF_FUZZED(-26484))))) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, int(ivec4(1, 1, 1, (1 & 1))))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false))))))))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), bool(bvec2(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), true)))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), bool(bvec2(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), true)))), bool(bool(! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), bool(bvec2(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), true))))))))))))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), (((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))) << 0)); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) < _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2x4(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0), transpose(transpose(mat2x4(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0))))))))), (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)) * 1.0)))))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             do
              {
               atomicStore(buf[next_virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, (4) | (4)))), max(4, 4)));
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) >> 0)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, false, false)))));
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false)))))));
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bool((false)))) && true)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, _GLF_IDENTITY(max(64, _GLF_IDENTITY(_GLF_IDENTITY(64, (64) ^ 0), 0 + (64))), clamp(max(64, _GLF_IDENTITY(_GLF_IDENTITY(64, (64) ^ 0), 0 + (64))), _GLF_IDENTITY(max(64, _GLF_IDENTITY(_GLF_IDENTITY(64, (64) ^ 0), 0 + (64))), int(int(max(64, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY(int(ivec2(64, int(_GLF_ZERO(0.0, injectionSwitch.x)))), (int(ivec2(64, int(_GLF_ZERO(0.0, injectionSwitch.x))))) >> 0)), (64) ^ 0), 0 + (64)))))), _GLF_IDENTITY(max(64, _GLF_IDENTITY(_GLF_IDENTITY(64, (64) ^ 0), 0 + (64))), max(max(64, _GLF_IDENTITY(_GLF_IDENTITY(64, (64) ^ 0), 0 + (64))), max(64, _GLF_IDENTITY(_GLF_IDENTITY(64, (64) ^ 0), 0 + (64)))))))), 2);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))))) && true))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 1.0, 0.0, 1.0))) > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) & -48295)); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ 1), ((0 ^ 1)) ^ _GLF_IDENTITY(0, _GLF_IDENTITY(min(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) ^ 0))), 0), (min(0, 0)) | (min(0, 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(88.20))), injectionSwitch.y))) / int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, clamp(0, 0, 0)))), 0))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), bool(bool(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), ! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))))))), true && (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), bool(bool(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), ! _GLF_IDENTITY((! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))), bool(_GLF_IDENTITY(bvec3((! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))), true, true), bvec3(bvec4(bvec3((! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))), true, true), true))))))))))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           subgroupBarrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))) || false))))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-2386.2055) : injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-787.804)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-637.480)), bool(false))))) > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             else
              {
              }
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / round(length(normalize(vec3(1.0, 1.0, 1.0)))))))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, true)), ! (! (bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, true))))))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-2983.9469) : injectionSwitch.y))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, true))))))))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     atomicStore(checker[virtual_gid], read, 4, 64, _GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, _GLF_IDENTITY((4), ((4)) | ((4))) | (_GLF_IDENTITY(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(7104))), (_GLF_IDENTITY(4, int(int(_GLF_IDENTITY(4, min(4, 4)))))) + 0))))));
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, int(ivec3(1, 0, _GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), int(5))), max((0 << _GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), int(5))), min((0 << _GLF_IDENTITY(int(5), int(5))), (0 << _GLF_IDENTITY(int(5), int(5)))))))))), bool(bvec4(_injected_loop_counter < _GLF_IDENTITY(1, int(ivec3(1, 0, _GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), int(5))), max((0 << _GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), int(5))), min((0 << _GLF_IDENTITY(int(5), int(5))), (0 << _GLF_IDENTITY(int(5), int(5)))))))))), true, true, true)))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_FUZZED(-1.4)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 | 0) ^ 0)); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))));
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
