#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_19 {
 float _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_17 {
 mat3x4 _f0;
 mat2x3 _f1;
 uint num_workgroup;
 vec2 _f2;
} ;

struct _GLF_struct_18 {
 mat4x2 _f0;
 mat2x3 _f1;
 _GLF_struct_17 _f2;
} ;

struct _GLF_struct_15 {
 mat4x2 _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_14 {
 mat3 _f0;
 mat4 _f1;
 vec3 _f2;
 bvec4 _f3;
 int _f4;
} ;

struct _GLF_struct_16 {
 _GLF_struct_14 _f0;
 _GLF_struct_15 _f1;
 ivec3 _f2;
 float _f3;
} ;

struct _GLF_struct_20 {
 _GLF_struct_16 _f0;
 _GLF_struct_18 _f1;
 bvec3 _f2;
 _GLF_struct_19 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_11 {
 mat2x4 _f0;
 bvec3 _f1;
 uvec4 _f2;
 bvec2 _f3;
 vec2 _f4;
 ivec2 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_10 {
 uvec2 _f0;
} ;

struct _GLF_struct_9 {
 mat4x2 _f0;
} ;

struct _GLF_struct_12 {
 ivec3 _f0;
 _GLF_struct_9 _f1;
 _GLF_struct_10 _f2;
 uvec3 _f3;
 _GLF_struct_11 _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_7 {
 int _f0;
 mat4 _f1;
 float _f2;
 ivec4 _f3;
 vec4 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_8 {
 _GLF_struct_7 _f0;
 mat4 _f1;
} ;

struct _GLF_struct_6 {
 mat2x4 _f0;
} ;

struct _GLF_struct_13 {
 _GLF_struct_6 _f0;
 _GLF_struct_8 _f1;
 uint subgroup_local_id;
 ivec3 _f2;
 vec4 _f3;
 _GLF_struct_12 _f4;
} ;

struct _GLF_struct_3 {
 ivec4 _f0;
 vec4 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_4 {
 uint subgroup_size;
 mat4x2 _f0;
 bvec4 _f1;
 _GLF_struct_3 _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_1 {
 vec3 _f0;
 int _f1;
} ;

struct _GLF_struct_0 {
 vec3 _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_2 {
 bvec3 _f0;
 _GLF_struct_0 _f1;
 bvec4 _f2;
 _GLF_struct_1 _f3;
 uint _f4;
} ;

struct _GLF_struct_5 {
 _GLF_struct_2 _f0;
 float _f1;
 vec2 _f2;
 ivec2 _f3;
 _GLF_struct_4 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.x = subgroup_id;
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(_GLF_struct_2(bvec3(true), _GLF_struct_0(vec3(1.0), bvec4(true)), bvec4(true), _GLF_struct_1(vec3(1.0), 1), 1u), 1.0, vec2(1.0), ivec2(1), _GLF_struct_4(gl_SubgroupSize, mat4x2(1.0), bvec4(true), _GLF_struct_3(ivec4(1), vec4(1.0), vec2(1.0)), mat4x3(1.0)));
 _GLF_struct_13 _GLF_struct_replacement_13 = _GLF_struct_13(_GLF_struct_6(mat2x4(1.0)), _GLF_struct_8(_GLF_struct_7(1, mat4(1.0), 1.0, ivec4(1), vec4(1.0), ivec3(1)), mat4(1.0)), gl_SubgroupInvocationID, ivec3(1), vec4(1.0), _GLF_struct_12(ivec3(1), _GLF_struct_9(mat4x2(1.0)), _GLF_struct_10(uvec2(1u)), uvec3(1u), _GLF_struct_11(mat2x4(1.0), bvec3(true), uvec4(1u), bvec2(true), vec2(1.0), ivec2(1), mat4x3(1.0)), uvec2(1u)));
 GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.y = _GLF_struct_replacement_13.subgroup_local_id;
 _GLF_struct_20 _GLF_struct_replacement_20 = _GLF_struct_20(_GLF_struct_16(_GLF_struct_14(mat3(1.0), mat4(1.0), vec3(1.0), bvec4(true), 1), _GLF_struct_15(mat4x2(1.0), ivec4(1)), ivec3(1), 1.0), _GLF_struct_18(mat4x2(1.0), mat2x3(1.0), _GLF_struct_17(mat3x4(1.0), mat2x3(1.0), gl_NumWorkGroups.x, vec2(1.0))), bvec3(true), _GLF_struct_19(1.0, ivec3(1)), uvec4(1u));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.w = workgroup_id;
 uint workgroup_base = workgroup_size * GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.w;
 uint subgroup_base = GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.x * _GLF_struct_replacement_5._f4.subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.y;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (0 << _GLF_IDENTITY(int(2), int(2))) ^ (int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.z = virtual_gid;
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + ((GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.y + 1) % _GLF_struct_replacement_5._f4.subgroup_size);
 atomicStore(buf[GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.z], uint(1), 4, 64, 4);
 if((GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.y % 2) == 0)
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
