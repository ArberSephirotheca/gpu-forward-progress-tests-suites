#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))) && true), false, true, false)), (bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), false, true, false))) && true))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))) && true))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || false))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(gl_NumWorkGroups.x, ~ (_GLF_IDENTITY(~ (gl_NumWorkGroups.x), min(~ (gl_NumWorkGroups.x), _GLF_IDENTITY(~ (gl_NumWorkGroups.x), (~ (gl_NumWorkGroups.x)) - 0u))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) / 1u), clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, true && (false))))))
    return;
   return;
  }
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x)), ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, (0u >> _GLF_IDENTITY(uint(1u), uint(1u))) | (gl_WorkGroupSize.x)))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))))))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), true && _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, ! (! (true))))))), (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, ! (! (true))))))), ! (! ((_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, ! (! (true))))))))))) || _GLF_IDENTITY(false, true && (false))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)), (bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true))) && true)))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (_GLF_IDENTITY(bool(bvec2(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-98.60))), injectionSwitch.x)) < injectionSwitch.y)))), (bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, true && (true)))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), ! (! (bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))))))))))))))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((false), true && ((false))))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)))), vec2(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(vec2(mat2(injectionSwitch, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)))), vec2(0.0, 0.0) + (vec2(mat2(injectionSwitch, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)))))), _GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(vec2(mat2(injectionSwitch, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)))), vec2(0.0, 0.0) + (vec2(_GLF_IDENTITY(mat2(injectionSwitch, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, max(0.0, 0.0)))), determinant(mat2(0.0, 0.0, 0.0, 0.0))), transpose(transpose(mat2(injectionSwitch, _GLF_IDENTITY(0.0, 0.0 + (0.0)), determinant(mat2(0.0, 0.0, 0.0, 0.0)))))))))), (true ? (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(vec2(mat2(injectionSwitch, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)))), vec2(0.0, 0.0) + (vec2(_GLF_IDENTITY(mat2(injectionSwitch, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, max(0.0, 0.0)))), determinant(mat2(0.0, 0.0, 0.0, 0.0))), transpose(transpose(mat2(injectionSwitch, _GLF_IDENTITY(0.0, 0.0 + (0.0)), determinant(mat2(0.0, 0.0, 0.0, 0.0)))))))))) : _GLF_FUZZED(refract(injectionSwitch, injectionSwitch, 6242.1399))))), 1.0, 1.0, tan(0.0), sqrt(0.0))))).y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))), bool(_GLF_IDENTITY(bvec3(bool(bool(_GLF_DEAD(false))), false, _GLF_IDENTITY(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), true && ((! (true))))), bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), false)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), bool(bvec4(bool(bool(_GLF_DEAD(false))), _GLF_IDENTITY(true, ! (! (true))), false, false))), false, true), true)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, min(workgroup_size, _GLF_IDENTITY(workgroup_size, (workgroup_size) | 0u))) * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, _GLF_IDENTITY(true, bool(bvec2(true, false)))))) && true)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), true))) ? _GLF_FUZZED(mix(4.0, -6893.3142, (8.8 < 80.40))) : injectionSwitch.x)), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(mix(4.0, -6893.3142, (8.8 < 80.40))) : injectionSwitch.x)), 0.0, abs(1.0), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, sin(0.0)), transpose(transpose(mat3x4(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(mix(4.0, -6893.3142, (8.8 < 80.40))) : injectionSwitch.x)), 0.0, abs(_GLF_IDENTITY(1.0, (1.0) / 1.0)), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, sin(0.0)))))), max(float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(mix(4.0, -6893.3142, (8.8 < 80.40))) : injectionSwitch.x)), 0.0, abs(1.0), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, sin(0.0)), transpose(transpose(mat3x4(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(mix(4.0, -6893.3142, (8.8 < 80.40))) : injectionSwitch.x)), 0.0, abs(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) + 0.0)) - log(1.0))), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, sin(0.0)))))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(mix(4.0, -6893.3142, (8.8 < 80.40))) : injectionSwitch.x)), 0.0, abs(1.0), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, sin(0.0)), transpose(transpose(mat3x4(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(mix(4.0, -6893.3142, (8.8 < 80.40))) : injectionSwitch.x)), 0.0, abs(1.0), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, sin(0.0)))))), 0.0 + (float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(mix(4.0, -6893.3142, (8.8 < 80.40))) : injectionSwitch.x)), max(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(mix(4.0, -6893.3142, (8.8 < 80.40))) : injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(mix(4.0, -6893.3142, (8.8 < 80.40))) : injectionSwitch.x)), min(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(mix(4.0, -6893.3142, (8.8 < 80.40))) : injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(mix(4.0, -6893.3142, (8.8 < 80.40))) : injectionSwitch.x)))))), 0.0, abs(1.0), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, sin(0.0)), transpose(transpose(mat3x4(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(mix(4.0, -6893.3142, (8.8 < 80.40))) : injectionSwitch.x)), 0.0, abs(1.0), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, sin(0.0))))))))))) > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) << 0u) + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(81275)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(44.55)), bvec2(true, false))))).y, min(injectionSwitch.y, injectionSwitch.y))))) && true)))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
     if(_GLF_DEAD(false))
      return;
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 atomicStore(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY((virtual_gid) | 0u, max((virtual_gid) | 0u, _GLF_IDENTITY((virtual_gid) | 0u, min((virtual_gid) | 0u, (virtual_gid) | 0u)))), ((virtual_gid) | 0u) / (1u ^ 0u)))], uint(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, _GLF_IDENTITY(0, (false ? _GLF_IDENTITY(_GLF_FUZZED(42675), min(_GLF_FUZZED(42675), _GLF_FUZZED(42675))) : 0)), 1, 1), (ivec4(1, 0, 1, 1)) | (ivec4(1, 0, 1, 1)))), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, _GLF_IDENTITY(0, (false ? _GLF_IDENTITY(_GLF_FUZZED(42675), min(_GLF_FUZZED(42675), _GLF_FUZZED(42675))) : 0)), 1, 1), (ivec4(1, 0, 1, 1)) | (ivec4(1, 0, 1, 1)))), ~ (~ (int(_GLF_IDENTITY(ivec4(1, _GLF_IDENTITY(0, (false ? _GLF_IDENTITY(_GLF_FUZZED(42675), min(_GLF_FUZZED(_GLF_IDENTITY(42675, (42675) | (42675))), _GLF_FUZZED(42675))) : 0)), _GLF_IDENTITY(1, int(int(1))), 1), (ivec4(1, _GLF_IDENTITY(0, _GLF_IDENTITY(int(int(_GLF_IDENTITY(0, ~ (~ (0))))), (int(int(_GLF_IDENTITY(0, ~ (~ (0)))))) * 1)), 1, 1)) | (ivec4(1, 0, 1, 1))))))) : _GLF_FUZZED((findLSB(subgroup_base) % -41579)))), clamp(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1, 0, 1, 1), (ivec4(1, 0, 1, 1)) | (ivec4(1, 0, _GLF_IDENTITY(1, max(1, 1)), 1))), _GLF_IDENTITY(_GLF_IDENTITY((ivec4(1, 0, 1, _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), min(1, 1))) | (_GLF_IDENTITY(1, 0 ^ (1)))))), ((ivec4(1, 0, _GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, max(1, 1)), 0, 1))), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) | (_GLF_IDENTITY(1, 0 ^ (1))))))) - ivec4(0, 0, 0, 0)) | (ivec4(1, 0, 1, 1)), (_GLF_IDENTITY(true, (true) && true) ? _GLF_IDENTITY((ivec4(1, 0, 1, 1)) | (ivec4(_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), 1), ~ (~ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), 1), ivec2(0, 0) | (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), min(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))))) | (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))))))), 1), ~ (~ (ivec2(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), 1)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), (_GLF_IDENTITY(~ (1), _GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0))), ~ (~ ((_GLF_IDENTITY(0, clamp(0, 0, 0)))))) << int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (~ (_GLF_IDENTITY(1, min(1, 1)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), clamp(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), _GLF_IDENTITY(~ (1), 0 ^ (~ (1))), _GLF_IDENTITY(~ (1), 0 ^ (~ (1)))))))), clamp(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))) | (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))) | _GLF_IDENTITY((_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))), ~ (~ ((_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))))))))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))) | (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))) | (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))))) - 0))))), 1)), max(_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) * 1), 1, 1))), 0 ^ (~ (1))), (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))) | (_GLF_IDENTITY(~ (1), 0 ^ (~ _GLF_IDENTITY((1), max((1), (1)))))))), clamp(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))) | (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), _GLF_IDENTITY((_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))), (_GLF_IDENTITY(true ? (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))) : _GLF_FUZZED(8505), ~ (_GLF_IDENTITY(~ (true ? (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))) : _GLF_FUZZED(8505)), int(ivec4(~ (true ? _GLF_IDENTITY((_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))), min((_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))), (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))))) : _GLF_FUZZED(8505)), 1, 0, (1 & 1)))))))) | (_GLF_IDENTITY(~ _GLF_IDENTITY((1), min((1), (_GLF_IDENTITY(1, clamp(1, 1, 1))))), 0 ^ (~ (1)))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))) | (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))))))), 1)), int(_GLF_IDENTITY(ivec3(int(ivec2(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))) | (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), min(~ (1), ~ (1)))) - 0), _GLF_IDENTITY(0, (0) - 0) ^ (~ (1)))))), clamp(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (~ (1)) | (_GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (1))))), _GLF_IDENTITY(0 ^ (~ (1)), (0 ^ (~ (1))) >> 0))) | (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), (_GLF_IDENTITY(~ (1), _GLF_IDENTITY(0, clamp(0, 0, 0)) ^ (~ (1)))) | (_GLF_IDENTITY(~ (1), 0 ^ _GLF_IDENTITY((~ (1)), _GLF_IDENTITY(int(int((~ (1)))), 0 ^ (int(int((~ (1)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), _GLF_IDENTITY(0 ^ (~ (1)), (0 ^ (~ (1))) | 0)), _GLF_IDENTITY((_GLF_IDENTITY(~ (1), _GLF_IDENTITY(0, clamp(0, 0, 0)) ^ (~ (1)))), 0 ^ ((_GLF_IDENTITY(~ (1), _GLF_IDENTITY(0, clamp(0, 0, 0)) ^ (~ (1)))))) | (_GLF_IDENTITY(~ (1), _GLF_IDENTITY(0, clamp(0, 0, 0)) ^ _GLF_IDENTITY((~ (1)), _GLF_IDENTITY(int(int((~ (1)))), 0 ^ (int(int((~ (1))))))))))) / 1)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))) | (_GLF_IDENTITY(~ (1), _GLF_IDENTITY(0 ^ (~ (1)), 0 | (0 ^ (~ (1))))))))))), _GLF_IDENTITY(1, 1 * (1)))), 1, 1), min(ivec3(int(ivec2(_GLF_IDENTITY(1, _GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))) | (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))))), 0 | ((_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))) | (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))))))), clamp(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((1), ((1)) * 1), _GLF_IDENTITY(0 ^ (~ (1)), (0 ^ (~ (_GLF_IDENTITY(1, (1) | 0)))) >> 0)), (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))) | _GLF_IDENTITY((_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))), ((_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))) | int(_GLF_ZERO(0.0, injectionSwitch.x))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (_GLF_IDENTITY(1, (1) - 0)))), (_GLF_IDENTITY(~ (1), _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(20888))) ^ (~ (1)))) | (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))) | (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))) / 1))))))), 1)), 1, 1), ivec3(int(ivec2(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))) | (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))))), clamp(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))) | (_GLF_IDENTITY(~ (1), _GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)) ^ (~ (1)), 0 + (0 ^ (~ (1)))))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, 0 + (1))), 0 ^ (~ (1))), (false ? _GLF_FUZZED((-55276)) : _GLF_IDENTITY(~ (1), 0 ^ (~ (1))))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, 0 + (1))), 0 ^ (~ (1))), (false ? _GLF_FUZZED((-55276)) : _GLF_IDENTITY(~ (1), 0 ^ (~ (1)))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, 0 + (1))), 0 ^ (~ (1))), (false ? _GLF_FUZZED((-55276)) : _GLF_IDENTITY(~ (1), 0 ^ (~ (1)))))))))))), int(ivec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, 0 + (1))), 0 ^ (~ (1))), (false ? _GLF_FUZZED((-55276)) : _GLF_IDENTITY(~ (1), 0 ^ (~ (1))))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, 0 + (1))), 0 ^ (~ (1))), (false ? _GLF_FUZZED((-55276)) : _GLF_IDENTITY(~ (1), 0 ^ (~ (1)))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, 0 + (1))), 0 ^ (~ (1))), (false ? _GLF_FUZZED((-55276)) : _GLF_IDENTITY(~ (1), 0 ^ (~ (1)))))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, 0 + (1))), 0 ^ (~ (1))), (false ? _GLF_FUZZED((-55276)) : _GLF_IDENTITY(~ (1), 0 ^ (~ (1))))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, 0 + (1))), 0 ^ (~ (1))), (false ? _GLF_FUZZED((-55276)) : _GLF_IDENTITY(~ (1), 0 ^ (~ (1)))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, 0 + (1))), 0 ^ (~ (1))), (false ? _GLF_FUZZED((-55276)) : _GLF_IDENTITY(~ (1), 0 ^ (~ (1))))))))))))) ^ 0), 0))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), (_GLF_IDENTITY(~ (1), _GLF_IDENTITY(0 ^ (~ (1)), (0 ^ (~ (1))) | (_GLF_IDENTITY(0 ^ (~ (1)), max(0 ^ (~ (1)), _GLF_IDENTITY(0 ^ (~ (1)), (0 ^ (~ (1))) ^ 0))))))) | _GLF_IDENTITY((_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))), ((_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))) | (_GLF_IDENTITY((_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))), 0 ^ ((_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))))))))))), 1)), 1, 1))))), int(ivec2(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))) | (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))))), clamp(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))) | (_GLF_IDENTITY(~ (1), 0 ^ _GLF_IDENTITY(_GLF_IDENTITY((~ (1)), ((~ (1))) | ((~ (1)))), (_GLF_IDENTITY((~ (1)), ((~ (1))) | ((~ (1))))) | 0))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))) | (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))) | (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))) | (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (_GLF_IDENTITY(1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(36961) : 1))))), (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))) | (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))))) - 0)), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))) | (_GLF_IDENTITY(~ (1), 0 ^ (~ (1)))))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ _GLF_IDENTITY((1), min((1), _GLF_IDENTITY((1), ((1)) | 0))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), int(int(~ (1)))), 0 ^ (~ (1)))) | (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))))))), 1)))), (_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 ^ (~ (1))))), 1)), ~ (~ (int(ivec2(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), (~ (1)) - 0)) << (0 >> _GLF_IDENTITY(int(5), int(5)))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), 0 ^ (~ (1))), _GLF_IDENTITY(1, (1) * 1) * (_GLF_IDENTITY(~ (1), 0 ^ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, min(1, 1)))), ((~ (_GLF_IDENTITY(1, min(1, 1))))) | ((~ (_GLF_IDENTITY(1, min(1, 1)))))))))) * 1))), 1)))))) | 0)) << 0)), 0, 1, 1)), ~ (~ ((ivec4(1, 0, 1, 1)) | (ivec4(1, 0, 1, 1))))) : _GLF_IDENTITY(_GLF_FUZZED(ivec4(77852, 29011, 59067, 53959)), (_GLF_FUZZED(ivec4(77852, 29011, 59067, 53959))) | (_GLF_FUZZED(ivec4(77852, 29011, _GLF_IDENTITY(59067, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (59067)), 53959)))))))), int(_GLF_IDENTITY(ivec4(1, 0, 1, 1), (ivec4(1, 0, 1, _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, int(ivec3(1, 0, 0))), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, 1))) / 1))))) | (ivec4(1, _GLF_IDENTITY(0, (0) >> 0), 1, 1)))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, (1) * 1), 0, 1, 1), (ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) >> 0)) / 1), 0, 1, 1)) | (ivec4(1, 0, _GLF_IDENTITY(1, (1) * (0 ^ 1)), 1)))), int(_GLF_IDENTITY(ivec3(int(_GLF_IDENTITY(ivec4(1, _GLF_IDENTITY(0, 0 | (0)), 1, 1), _GLF_IDENTITY((ivec4(1, 0, 1, 1)) | (ivec4(1, 0, _GLF_IDENTITY(1, clamp(1, 1, 1)), 1)), ((ivec4(1, 0, 1, 1)) | (ivec4(1, 0, _GLF_IDENTITY(1, clamp(1, 1, 1)), 1))) << ivec4(0, 0, 0, 0)))), 0, 0), (ivec3(int(_GLF_IDENTITY(ivec4(1, 0, 1, 1), (ivec4(1, 0, 1, 1)) | (ivec4(1, 0, 1, 1)))), 0, 0)) >> ivec3(0, 0, 0)))))))), 4, 64, 4);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if((subgroup_local_id % _GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) >> 0), (2) ^ 0))))) == 0)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u)], _GLF_IDENTITY(uint(2), clamp(uint(2), _GLF_IDENTITY(uint(2), uint(uint(uint(2)))), uint(_GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(2, (2) >> 0), 2))))), _GLF_IDENTITY(4, _GLF_IDENTITY((4), (false ? _GLF_FUZZED(int(true)) : (4))) / 1), 64, 4);
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), _GLF_IDENTITY(float(_GLF_FUZZED(6935.2526)), max(float(_GLF_FUZZED(6935.2526)), float(_GLF_FUZZED(6935.2526)))), bool(false))) > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y))))))) || false))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))), ((false)) && _GLF_IDENTITY(true, true && (true))) || false)))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
