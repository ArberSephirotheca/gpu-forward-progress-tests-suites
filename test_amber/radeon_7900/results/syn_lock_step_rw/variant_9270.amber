#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-796.722, 8577.7814)) : injectionSwitch)).x > injectionSwitch.y)) || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false)))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))), bool(bvec3(bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) || false) && true)))), true, true)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)).x > injectionSwitch.y)))), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))))))))) && true))), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))))), (_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))))))) || false)))))))
      barrier();
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)))))))) || false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, tan(vec2(0.0, 0.0)) + (injectionSwitch)).x > injectionSwitch.y) && true)) && true), false, false)))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false))))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bool(_GLF_IDENTITY(! (false), bool(bool(! (false))))))), (! (false)) && true))), (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bool(_GLF_IDENTITY(! (false), bool(bool(! (false))))))), (! (false)) && true))), (injectionSwitch.x > injectionSwitch.y)), false)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, ! (! (false))), true))), false, true))), true))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), bool(bvec3(! _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (false)) || _GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))))), _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(! (! (true)), false || (! (! (true))))) && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(true))), vec2(_GLF_FUZZED(-73.20), (injectionSwitch)[1]), bvec2(false, true))).x < injectionSwitch.y))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ((! (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) && true)))))), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false))))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))))), false))))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))))), false))))))))))), bool(bvec4(false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))))), false))))))))))), false, true, true)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))))), false))))))))))), bool(bvec4(false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))))), false))))))))))), false, true, true))))), bool(bool(! (! (_GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))))), false))))))))))), bool(bvec4(false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))))), false))))))))))), false, true, true)))))))))))))), ! (! ((_GLF_IDENTITY(false, false || _GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true && (bool(bvec4((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2((false), false)), (bool(bvec2((false), false))) && true))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec2((false), false))), true && (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2((false), false)), ! (! (_GLF_IDENTITY(bool(bvec2((false), false)), false || (bool(bvec2((false), false))))))))))))))), true && _GLF_IDENTITY((bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))), bool(bvec2((false), false)))), ! (! _GLF_IDENTITY((bool(_GLF_IDENTITY((false), bool(bvec2((false), false))))), ((bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))) && true))))), bool(bvec3((bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! _GLF_IDENTITY((bool(_GLF_IDENTITY((false), bool(bvec2((false), false))))), ! (_GLF_IDENTITY(! ((bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))), bool(bvec2(! ((bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))), true))))))))), true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))))))))))), bool(bvec4(! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), bool(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec4(bvec2((false), false), true, true)))))))))), _GLF_IDENTITY(true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false))))))))), _GLF_IDENTITY(bool(bvec3(true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false))))))))), false, false)), false || (bool(bvec3(true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false))))))))), false, false))))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false))))))))))))), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false))))))))))))), true && ((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false))))))))))))))), true, false)))))))), _GLF_IDENTITY(false, (false) && true), false, true))), true && (_GLF_IDENTITY(! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), bool(bvec2(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), false)))) && true), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! _GLF_IDENTITY(((false)), true && (((false)))), true))))), false))))))))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))))), false))))))))))), bool(bvec4(false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))))), false))))))))))), false, true, true)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))))), false))))))))))), bool(bvec4(false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))))), false))))))))))), false, true, true))))), bool(bool(! (! (_GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))))), false))))))))))), bool(bvec4(false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))))), false))))))))))), false, true, true))))))))))), true && (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true))))))))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))))), _GLF_IDENTITY(true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))))), false))))))))), (true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))))), false)))))))))) || false))), bool(bvec4(false || _GLF_IDENTITY((false), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false))))))))), (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))))))) && true))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), bool(bvec2(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))))), false))))))))))), _GLF_IDENTITY(false, true && (false)), true, true)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((_GLF_IDENTITY(false, false || (false))), false)))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), bool(_GLF_IDENTITY(bool(! ((false))), bool(bvec2(_GLF_IDENTITY(bool(! ((false))), (bool(! ((false)))) && true), true))))), bool(bvec2(! ((false)), true))))), false))))))))))), bool(bvec4(false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))))), false))))))))))), false, true, true))))), bool(bool(! (! (_GLF_IDENTITY(false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), false || ((false))), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))))), false))))))))))), bool(bvec4(false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false))))), (_GLF_IDENTITY(! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false))))), true && (! (bool(_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec2((false), false))), (_GLF_IDENTITY((false), bool(bvec2((false), false)))) || false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))))), false))), bool(bool(_GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))))), false)))))))))))))), false, true, true)))))))))))))))), ! (! ((_GLF_IDENTITY(false, false || _GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4((false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(bvec4((false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), ! (! (bool(bvec4((false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bool(bvec4((false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), ! (! (bool(bvec4((false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), false, true), true))))), true && (bool(bvec4((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2((false), false)), (bool(bvec2((false), false))) && true))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), false || ((false))), false))), true && (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2((false), false)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(bool(bvec2((false), false)), false || (bool(bvec2((false), false)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(bool(bvec2((false), false)), false || (bool(bvec2((false), false)))))), true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(bool(bvec2((false), false)), false || (bool(bvec2((false), false)))))), true), bvec2(bvec4(bvec2(! (! (_GLF_IDENTITY(bool(bvec2((false), false)), false || (bool(bvec2((false), false)))))), true), false, true))), false, true)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(bool(bvec2((false), false)), false || (bool(bvec2((false), false)))))), true), bvec2(bvec4(bvec2(! (! (_GLF_IDENTITY(bool(bvec2((false), false)), false || (bool(bvec2((false), false)))))), true), false, true))), false, true))))))), ! (! (bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(bool(bvec2((false), false)), false || (bool(bvec2((false), false)))))), true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(bool(bvec2((false), false)), false || (bool(bvec2((false), false)))))), true), bvec2(bvec4(bvec2(! (! (_GLF_IDENTITY(bool(bvec2((false), false)), false || (bool(bvec2((false), false)))))), true), false, true))), false, true)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(bool(bvec2((false), false)), false || (bool(bvec2((false), false)))))), true), bvec2(bvec4(bvec2(! (! (_GLF_IDENTITY(bool(bvec2((false), false)), false || (bool(bvec2((false), false)))))), true), false, true))), false, true)))))))))))))))))))), true && _GLF_IDENTITY((bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, false)))), false || ((_GLF_IDENTITY(false, bool(bvec2(false, false))))))))), bool(bvec2((false), false)))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), _GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))), true && (bool(bool(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))))))), ((bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))) && true))))), bool(bvec3((bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! _GLF_IDENTITY((bool(_GLF_IDENTITY((false), bool(bvec2((false), false))))), ! (_GLF_IDENTITY(! ((bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))), bool(bvec2(! ((bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))), true))))))))), true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))))))))))), bool(bvec4(! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), bool(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec4(bvec2((false), false), true, true)))))))))), _GLF_IDENTITY(true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false))))))))), _GLF_IDENTITY(bool(bvec3(true && _GLF_IDENTITY((bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false))))))))), ((bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))))))) || false), false, false)), false || (bool(bvec3(true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false))))))))), false, false))))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || _GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false))))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false))))))))))), true && (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))))))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false))))))))))), true && (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec2((false), false))), ! (! (_GLF_IDENTITY((false), bool(bvec2((false), false))))))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false))))))))))))))) && true))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false))))))))))))), true && ((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false))))))))))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false))))))))))))), true && ((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false))))))))))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((false), bool(bvec2((false), false))))))))))))), true && (_GLF_IDENTITY((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), bool(bvec2(_GLF_IDENTITY((false), bool(bool(_GLF_IDENTITY((false), false || ((false)))))), false)))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), (bool(_GLF_IDENTITY((false), bool(bvec2((false), false))))) && true)))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), bool(bvec2(_GLF_IDENTITY((false), bool(bool(_GLF_IDENTITY((false), false || ((false)))))), false)))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), (bool(_GLF_IDENTITY((false), bool(bvec2((false), false))))) && true)))))))))), false || ((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (bool(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), bool(bvec2(_GLF_IDENTITY((false), bool(bool(_GLF_IDENTITY((false), false || ((false)))))), false)))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY((false), bool(bvec2((false), false)))), (bool(_GLF_IDENTITY((false), bool(bvec2((false), false))))) && true))))))))))))) || false)))))))), true, false)))))))), _GLF_IDENTITY(false, (false) && true), false, true)))))), _GLF_IDENTITY(true, false || (true)), true)))))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bool(_GLF_DEAD(false)), false), bvec2(bvec2(bvec2(bool(_GLF_DEAD(false)), false)))), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bool(_GLF_DEAD(false)), false), bvec2(bvec2(bvec2(bool(_GLF_DEAD(false)), false)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bool(_GLF_DEAD(false)), false), bvec2(bvec2(bvec2(bool(_GLF_DEAD(false)), false)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(bool(_GLF_DEAD(false)), false), bvec2(_GLF_IDENTITY(bvec2(bvec2(bool(_GLF_DEAD(false)), false)), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(bool(_GLF_DEAD(false)), false)), bvec2(bvec4(bvec2(bvec2(bool(_GLF_DEAD(false)), false)), false, true))))), bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(bool(_GLF_DEAD(false)), false)), bvec2(bvec4(bvec2(bvec2(bool(_GLF_DEAD(false)), false)), false, true))))), true, true))))))), false || (bool(_GLF_IDENTITY(bvec2(bool(_GLF_DEAD(false)), false), bvec2(bvec2(bvec2(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))), false)))))))) && true, _GLF_IDENTITY(true, (true) && true) && ((_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(bool(_GLF_DEAD(false)), false), bvec2(bvec2(bvec2(bool(_GLF_DEAD(false)), false))))), false || (bool(_GLF_IDENTITY(bvec2(bool(_GLF_DEAD(false)), false), bvec2(bvec2(bvec2(bool(_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))), false)))))))) && true))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bool(_GLF_DEAD(false)), false), bvec2(bvec2(bvec2(bool(_GLF_DEAD(false)), false)))), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))), false), bvec2(bvec2(bvec2(bool(_GLF_DEAD(false)), false)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bool(_GLF_DEAD(false)), false), bvec2(bvec2(bvec2(bool(_GLF_DEAD(false)), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(bool(_GLF_DEAD(false)), false), bvec2(_GLF_IDENTITY(bvec2(bvec2(bool(_GLF_DEAD(false)), false)), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(bool(_GLF_DEAD(false)), false)), bvec2(bvec4(bvec2(bvec2(bool(_GLF_DEAD(false)), false)), false, true))))), bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(bool(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))), false)), bvec2(bvec4(bvec2(bvec2(bool(_GLF_DEAD(false)), false)), false, true))))), true, true))))))), false || (bool(_GLF_IDENTITY(bvec2(bool(_GLF_DEAD(false)), false), bvec2(bvec2(bvec2(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))), false)))))))) && true, _GLF_IDENTITY(true, (true) && true) && ((_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bool(_GLF_DEAD(false)), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(bool(_GLF_DEAD(false)), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(bool(_GLF_DEAD(false)), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bvec2(bvec2(bvec2(bvec4(bvec2(bool(_GLF_DEAD(false)), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), false, true)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(bool(_GLF_DEAD(false)), false), bvec2(bvec3(bvec2(bool(_GLF_DEAD(false)), false), false))))))), false || (bool(_GLF_IDENTITY(bvec2(bool(_GLF_DEAD(false)), false), bvec2(bvec2(bvec2(bool(_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))), false)))))))) && true)))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) ? _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0)), (_GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0)), mat2(1.0) * (vec2(mat3x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0))))) * vec2(1.0, 1.0))), injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)))).y)) || false)) || (false)), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.4)), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), bool(true))), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(1.0, min(1.0, 1.0))))))) && (! (false))))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false, false)), true && (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y)), false, false))) && true))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))), (false) || false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))))))
  barrier();
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_base + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), (_GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)), ((((subgroup_local_id + 1) % subgroup_size))) ^ 0u)) ^ 0u), (0u | 0u) ^ (_GLF_IDENTITY((((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))), 0u | ((((subgroup_local_id + 1) % subgroup_size)))))) / 1u);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, _GLF_IDENTITY(true, ! (! (true)))), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, _GLF_IDENTITY(true, ! (! (true)))))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, _GLF_IDENTITY(true, ! (! (true)))))))))), bvec3(bvec4(bvec3(false, true, _GLF_IDENTITY(true, ! (! (true)))), false)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bvec4(! (! (false)), true, true, false)))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), vec2(mat2(vec2(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(7830.8035) : 0.0))), 1.0, 0.0)))).x > injectionSwitch.y), _GLF_IDENTITY(false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), vec2(mat2(vec2(0.0, 0.0), 1.0, 0.0)))).x > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), vec2(mat2(vec2(0.0, 0.0), 1.0, 0.0)))).x > injectionSwitch.y))))), (false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), vec2(mat2(vec2(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0))), 1.0, 0.0)))).x > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), vec2(mat2(vec2(0.0, 0.0), 1.0, 0.0)))).x > injectionSwitch.y)))))) && true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(cos(0.0), 0.0)), dot(vec2(0.0, 1.0), vec2(cos(0.0), 0.0))), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), vec4(0.0, 0.0, 1.0, 0.0))), 1.0, 1.0, 0.0, 0.0, 1.0)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), false))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, _GLF_IDENTITY((64) | (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, max(0, 0)), 0)) | 0), (_GLF_IDENTITY((64) | (0 | 0), int(ivec4((_GLF_IDENTITY(64, (64) | (64))) | (_GLF_IDENTITY(0 | 0, min(0 | 0, _GLF_IDENTITY(0 | 0, min(0 | 0, _GLF_IDENTITY(0 | 0, (0 | 0) * 1)))))), 1, 0, 1)))) - (0 >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 ^ (int(_GLF_IDENTITY(7, (false ? _GLF_FUZZED(-45593) : 7))))), int(7)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 ^ (int(7))), int(7)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 ^ (int(7))), int(7)), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 ^ (int(7))), int(7))) / 1))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 ^ (int(7))), int(7)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 ^ _GLF_IDENTITY((int(7)), int(ivec3((int(7)), 1, 0)))), int(7)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 ^ (int(7))), int(7)), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 ^ (int(7))), int(7))) / 1))), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 ^ (int(7))), int(7)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 ^ (int(7))), int(7)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 ^ (int(7))), int(7)), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 ^ (int(7))), int(7))) >> 0), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 ^ (int(7))), int(7))) / 1))), 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) | 0))), (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 ^ (int(7))), int(7)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 ^ (int(7))), int(7)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 ^ (int(7))), int(7)), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 ^ (int(7))), int(7))) >> 0), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 ^ (int(7))), int(7))) / 1))), 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) | 0))), (int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 ^ (int(7))), int(7)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 ^ (int(7))), int(7)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 ^ (int(7))), int(7)), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 ^ (int(7))), int(7))) >> 0), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 ^ (int(7))), int(7))) / 1))), 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) | 0)))) + 0)) - (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4))))))))) ^ 0)))), 4);
 subgroupBarrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_IDENTITY(true, bool(bvec3(true, true, true))) && ((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))) && true)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(bvec2((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
