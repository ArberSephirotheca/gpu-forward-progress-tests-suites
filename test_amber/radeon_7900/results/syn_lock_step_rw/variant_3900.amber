#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))), true && ((! ((injectionSwitch.x > injectionSwitch.y)))))))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) - 0u);
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), false || (bool(false)))), bool(bool(bool(_GLF_IDENTITY(bool(false), false || (bool(false))))))))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, true))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))))), ! (! (_GLF_IDENTITY((! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))))), ((! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) && true), true && _GLF_IDENTITY((false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ((false)) && true)))), _GLF_IDENTITY(bool(bvec3((false), true, true)), bool(bool(bool(bvec3((false), true, true))))))) && true, true && ((_GLF_IDENTITY(_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ((false)) && true)))), _GLF_IDENTITY(bool(bvec3((false), true, true)), bool(bool(bool(bvec3((false), true, true))))))) && true))))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) ^ _GLF_IDENTITY((_GLF_IDENTITY(uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u)))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 1u))))), 0u, 0u) << _GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), uvec3(0u, _GLF_IDENTITY(0u, (0u) / 1u), _GLF_IDENTITY(0u, (0u) + _GLF_IDENTITY(0u, (0u) + (0u | 0u)))) | (uvec3(4u)))), uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 1u)), max(uint(uvec2(0u, 1u)), uint(uvec2(0u, 1u))))), 0u, 0u) << _GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u)))), min(uvec3(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 1u)), max(uint(uvec2(0u, 1u)), uint(uvec2(0u, 1u))))), 0u, 0u) << _GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u)))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 1u)), max(uint(uvec2(0u, 1u)), uint(uvec2(0u, 1u))))), 0u, 0u) << _GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u)))), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 1u)), max(uint(uvec2(0u, 1u)), uint(uvec2(0u, 1u))))), 0u, 0u) << _GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u)))), ~ (~ (uvec3(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 1u)), max(uint(uvec2(0u, 1u)), uint(uvec2(0u, 1u))))), 0u, 0u) << _GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u))))))))))), 1u), (false ? _GLF_FUZZED(uvec4(40625u, 136698u, 80848u, 196119u)) : _GLF_IDENTITY(uvec4(uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u)))), 1u), clamp(uvec4(uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u)))), 1u), uvec4(uvec3(0u, 0u, 0u) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (_GLF_IDENTITY(uvec3(4u), ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u))) >> _GLF_IDENTITY(uvec3(7u), uvec3(7u))) * (uvec3(4u)))))), (_GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (_GLF_IDENTITY(uvec3(4u), ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u))) >> _GLF_IDENTITY(uvec3(7u), uvec3(7u))) * (uvec3(4u))))))) / uvec3(1u, 1u, 1u)), clamp(_GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) + 0u, (false ? _GLF_FUZZED(52576u) : (0u) + 0u)))) | (uvec3(4u)))), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u)))), (_GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(4u, (4u) / 1u)), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u))))) + uvec3(0u, 0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u))), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(4u, (4u) | 0u)), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u)))) / uvec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u))))), uvec3(0u, 0u, 0u) ^ (~ (_GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u))))))))))), 1u), uvec4(uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(4u), (false ? _GLF_FUZZED((subgroup_size ^ uvec3(9256u, 78350u, 111652u))) : uvec3(4u))), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u)))), 1u))))))), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 1u))))), 0u, 0u) << _GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + _GLF_IDENTITY(0u, (0u) + (0u | 0u)))) | (uvec3(4u)))), uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 1u)), max(uint(uvec2(0u, 1u)), uint(_GLF_IDENTITY(uvec2(0u, 1u), (uvec2(0u, 1u)) >> uvec2(0u, 0u)))))), 0u, 0u) << _GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u)))), min(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(0u, 1u * (0u)), _GLF_IDENTITY(uint(uvec2(0u, 1u)), max(uint(uvec2(0u, 1u)), uint(uvec2(0u, 1u))))), 0u, 0u) << _GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u)))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 1u)), max(uint(uvec2(0u, 1u)), uint(uvec2(0u, 1u))))), 0u, 0u) << _GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)), max(uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)))) | (uvec3(4u)))), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 1u)), max(uint(uvec2(0u, 1u)), uint(uvec2(0u, 1u))))), 0u, 0u) << _GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u)))), _GLF_IDENTITY(~ (~ (uvec3(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 1u)), max(uint(uvec2(0u, 1u)), uint(uvec2(0u, 1u))))), 0u, 0u) << _GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) + 0u), (_GLF_IDENTITY(0u, (0u) + 0u)) | (_GLF_IDENTITY(0u, (0u) + 0u)))) | (uvec3(4u)))))), (~ (~ (uvec3(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 1u)), max(uint(uvec2(0u, 1u)), uint(uvec2(0u, 1u))))), 0u, 0u) << _GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) + 0u), (_GLF_IDENTITY(0u, (0u) + 0u)) | (_GLF_IDENTITY(0u, (0u) + 0u)))) | (uvec3(4u))))))) - uvec3(0u, 0u, 0u))))))), 1u), (false ? _GLF_FUZZED(uvec4(40625u, 136698u, 80848u, 196119u)) : _GLF_IDENTITY(uvec4(uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u)))), 1u), clamp(uvec4(uvec3(0u, 0u, 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uvec3(4u), (uvec3(4u)) + uvec3(0u, 0u, 0u)), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u)))), 1u), uvec4(uvec3(0u, 0u, 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(4u), (uvec3(4u)) * uvec3(1u, 1u, 1u)), _GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (_GLF_IDENTITY(uvec3(4u), ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u))) >> _GLF_IDENTITY(uvec3(7u), uvec3(7u))) * (uvec3(4u)))), (_GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (_GLF_IDENTITY(uvec3(4u), ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u))) >> _GLF_IDENTITY(uvec3(7u), uvec3(7u))) * (uvec3(4u)))), ~ (~ (uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(4u), (false ? _GLF_FUZZED(uvec3(7038u, 71128u, 68836u)) : uvec3(4u))), ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u))) >> _GLF_IDENTITY(uvec3(7u), uvec3(7u))) * (uvec3(4u)))))))) - uvec3(0u, 0u, 0u)))), clamp(_GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) + 0u, (false ? _GLF_FUZZED(52576u) : (0u) + 0u)))) | (uvec3(4u)))), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u)))), (_GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(4u, (4u) / 1u)), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u))))) + uvec3(0u, 0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u))), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(4u, (4u) | 0u)), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u)))) / uvec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u))))), uvec3(0u, 0u, 0u) ^ (~ (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), uvec3(_GLF_IDENTITY(0u, (0u) * (0u ^ 1u)), 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u)))), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, (0u) * (0u ^ 1u)), 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u)), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, (0u) * (0u ^ 1u)), 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u)), uvec3(0u, 0u, 0u) | (uvec3(_GLF_IDENTITY(0u, (0u) * (0u ^ 1u)), 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u))))) << uvec3(0u, 0u, 0u))))))))))))), 1u), uvec4(uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u)))), 1u)))))))) + _GLF_IDENTITY((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(5u), uvec3(5u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(5u), uvec3(5u)))), clamp(uvec3((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(5u), uvec3(5u)))), uvec3((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(5u), uvec3(5u)))), uvec3((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(5u), uvec3(5u))))))), (uvec3(_GLF_IDENTITY(uvec3((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(5u), uvec3(5u)))), clamp(uvec3((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(5u), uvec3(5u)))), uvec3((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(5u), uvec3(5u)))), uvec3((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(5u), uvec3(5u)))))))) | (uvec3(_GLF_IDENTITY(uvec3((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(5u), uvec3(5u)))), clamp(uvec3((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(5u), uvec3(5u)))), uvec3((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(5u), uvec3(5u)))), uvec3((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(5u), uvec3(5u)))))))))))))), ((_GLF_IDENTITY(uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u)))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, uint(uvec3(_GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, (0u) | (0u)) : _GLF_FUZZED(subgroup_id))), 0u, 1u))))), 0u, 0u) << _GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + _GLF_IDENTITY(0u, (0u) + (0u | 0u)))) | (uvec3(4u)))), uvec3(_GLF_IDENTITY(uvec4(uvec3(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, (0u) * 1u))), 1u)), max(uint(uvec2(0u, 1u)), uint(uvec2(0u, 1u))))), 0u, 0u) << _GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)), (uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u))) >> uvec3(0u, 0u, 0u)) | (_GLF_IDENTITY(uvec3(4u), uvec3(uvec3(uvec3(4u))))))), 1u), (false ? _GLF_FUZZED(uvec4(40625u, 136698u, 80848u, 196119u)) : _GLF_IDENTITY(uvec4(uvec3(0u, 0u, 0u) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(4u, clamp(4u, 4u, 4u))), (uvec3(4u)) | (uvec3(4u))), (false ? _GLF_FUZZED(uvec3(178378u, 143776u, 130476u)) : _GLF_IDENTITY(uvec3(4u), (uvec3(4u)) | (uvec3(_GLF_IDENTITY(4u, min(4u, _GLF_IDENTITY(4u, 0u + (4u))))))))), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) + 0u), min(_GLF_IDENTITY(0u, (0u) + 0u), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) + 0u), (_GLF_IDENTITY(0u, (0u) + 0u)) | 0u)))) | (uvec3(4u)))), 1u), clamp(uvec4(uvec3(_GLF_IDENTITY(0u, _GLF_IDENTITY((0u) - 0u, 1u * ((_GLF_IDENTITY(0u, ~ (~ (0u)))) - 0u))), 0u, 0u) << _GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | _GLF_IDENTITY((uvec3(4u)), min((uvec3(4u)), (uvec3(4u)))))), 1u), uvec4(_GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) | (uvec3(0u, 0u, 0u))) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, 0u) ^ (uvec3(4u))), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u)))), clamp(_GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u)))), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u)))), (_GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u))))) + _GLF_IDENTITY(uvec3(0u, 0u, 0u), ~ (_GLF_IDENTITY(~ (uvec3(0u, 0u, 0u)), (~ (uvec3(0u, 0u, 0u))) | (~ (uvec3(0u, 0u, 0u))))))), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(4u, uint(uvec3(4u, (0u | 0u), 1u)))), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) + 0u, 0u | (_GLF_IDENTITY((0u) + 0u, (false ? _GLF_FUZZED(subgroup_size) : (0u) + 0u)))))) | (uvec3(4u)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY((0u), _GLF_IDENTITY(uint(uvec4((0u), 1u, 1u, 0u)), (true ? uint(uvec4((0u), 1u, 1u, 0u)) : _GLF_FUZZED(92467u)))) + 0u)) | (uvec3(4u))))), uvec3(0u, 0u, 0u) ^ (~ (_GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u))))))))))), 1u), uvec4(uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(4u), _GLF_IDENTITY(uvec3(4u), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u)) | (uvec3(4u)))), 1u))))))))))) * uvec3(1u, 1u, 1u))).x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) || false)))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), false || ((injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(662.298), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(912.308)), bvec2(true, false))))))).y))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))), false)), ! (! (bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, true && ((injectionSwitch.x > injectionSwitch.y) && true))))), true, false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false || (bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y) && true, false)), ! (! (bool(bvec2((injectionSwitch.x > injectionSwitch.y) && true, false))))))))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), _GLF_IDENTITY(dot(vec3(1.0, sqrt(0.0), 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, sqrt(0.0), 0.0), vec3(1.0, 0.0, 0.0))), sqrt(0.0), 1.0, 1.0)), mix(float(_GLF_FUZZED(2217.2549)), float(float(mat3x4(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(3736.3717)), bool(false))), 1.0, 0.0))), _GLF_IDENTITY(dot(vec3(1.0, sqrt(0.0), 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, sqrt(0.0), 0.0), vec3(1.0, 0.0, 0.0))), sqrt(0.0), 1.0, 1.0))), bool(true)))), true))), (injectionSwitch.x > injectionSwitch.y) && true))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y) && true, false)), ! (! (bool(bvec2((injectionSwitch.x > injectionSwitch.y) && true, false))))))))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))) : _GLF_FUZZED(-6948.1556))), ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))))))), false))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) - 0.0, ((injectionSwitch.x) - 0.0) + _GLF_ZERO(0.0, injectionSwitch.x))) > _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 1.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0))))).y))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, true && (_GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), true && ((false))))))), false || (! (_GLF_IDENTITY((false), _GLF_IDENTITY(! (! (_GLF_IDENTITY((false), true && ((false))))), ! (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY((false), true && ((false)))))), false || (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY((false), true && ((false)))))), (! (! (! (_GLF_IDENTITY((false), true && ((false))))))) || false)))))))))), false || (! (_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), true && ((false))))))), false || ((_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), true && ((false))))))))), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), true && ((false))))))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), true && ((false)))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY((false), true && ((false)))), (! (_GLF_IDENTITY((false), true && ((false))))) || false)))))), true, true, true)), true && (bool(bvec4((_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), true && ((false))))))), true, true, true))))), false))), false || (! (_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), true && ((false))))))))))))) || false))), _GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y)))))), _GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1474.5321)), float(injectionSwitch.y), bool(true)))))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))) || false)))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)), false || (bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))))))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))) || false)))), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))) || false)), ! (_GLF_IDENTITY(! ((! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))))).y))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))) || false))), (! (_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))) || false)), _GLF_IDENTITY(bool(bool((! _GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))) || false)))), bool(bvec2(bool(bool((! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))) || false), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))) || false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), bool(bool(bool(bvec3(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))) || false)))), false)))))) || false)))))))))))), (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1474.5321)), float(injectionSwitch.y), bool(true)))))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))) || false)))), false || (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)), false || (bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))))))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))) || false)))), true && ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)), false || (bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))))))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))) || false)))))), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))) || false)), ! (_GLF_IDENTITY(! ((! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))))).y))), true && _GLF_IDENTITY((_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))), ((_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))) || false))) || false))), (! (_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))) || _GLF_IDENTITY(false, (false) || false))), _GLF_IDENTITY(bool(bool((! _GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))) || false)))), bool(bvec2(bool(bool((! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))) || false), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true)), (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))) || false))), bool(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))) || false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), false)))))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), bool(bool(bool(bvec3(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))) || false)))), false)))))) || false))))))))))))) && true), (! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(8.8)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).x > injectionSwitch.y))))))))) && true))))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY((_GLF_DEAD(false)) && _GLF_IDENTITY(true, (true) && true), false || (_GLF_IDENTITY((_GLF_DEAD(false)) && true, ! (! ((_GLF_DEAD(false)) && true))))))) || false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         return;
        }
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
           if(_GLF_DEAD(false))
            return;
          }
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(vec2(-7798.8657, -105.589)))), (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))) || (false))))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)), true && (bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) && true)))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) / 1u) + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), bool(bool(! (false)))))), bool(bool(! (false))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
       if(_GLF_DEAD(false))
        return;
      }
     return;
    }
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : subgroup_base)), (_GLF_IDENTITY(workgroup_base + subgroup_base, max(workgroup_base + subgroup_base, workgroup_base + subgroup_base))) | 0u) + _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), min(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size)))) - 0u), ~ (~ ((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, ~ (~ (1))), 1))), int(ivec3(~ (_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), int(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(clamp(1, 1, 1), max(clamp(1, 1, 1), clamp(1, 1, 1))))))), 0, 1)))))) >> 0)), ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, clamp(1, 1, 1))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(~ (_GLF_IDENTITY(1, clamp(1, 1, 1))), 0, 1), (ivec3(~ (_GLF_IDENTITY(1, clamp(1, 1, 1))), 0, 1)) >> _GLF_IDENTITY(ivec3(0, 0, 0), ivec3(ivec3(ivec3(0, 0, 0)))))), (int(_GLF_IDENTITY(ivec3(~ (_GLF_IDENTITY(1, clamp(1, 1, 1))), 0, 1), (ivec3(~ (_GLF_IDENTITY(1, clamp(1, 1, 1))), 0, 1)) >> _GLF_IDENTITY(ivec3(0, 0, 0), ivec3(ivec3(ivec3(0, 0, 0))))))) | (int(_GLF_IDENTITY(ivec3(~ (_GLF_IDENTITY(1, clamp(1, 1, 1))), 0, 1), (ivec3(~ (_GLF_IDENTITY(1, clamp(1, 1, 1))), 0, 1)) >> _GLF_IDENTITY(ivec3(0, 0, 0), ivec3(ivec3(ivec3(0, 0, 0)))))))))))) >> 0))) * 1u) % subgroup_size))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bool(bvec2(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), ((_GLF_IDENTITY(true, bool(bvec4(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))) || false))), true))), (injectionSwitch.x < injectionSwitch.y)), false)), _GLF_IDENTITY(true, false || (true))))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(exp(0.0), clamp(exp(0.0), _GLF_IDENTITY(exp(0.0), clamp(_GLF_IDENTITY(exp(0.0), clamp(exp(0.0), exp(0.0), exp(0.0))), exp(0.0), exp(0.0))), exp(0.0))), length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, abs(sqrt(1.0)), 0.0, 0.0, 0.0))).x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, (false) || false))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, length(0.0), 0.0, tan(0.0), 1.0, 1.0))), true && (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, length(0.0), 0.0, tan(0.0), 1.0, 1.0))), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(injectionSwitch.x, cos(0.0), 1.0, 0.0), (mat2(injectionSwitch.x, cos(0.0), 1.0, 0.0)) * mat2(1.0))), float(vec4(float(_GLF_IDENTITY(mat2(injectionSwitch.x, cos(0.0), 1.0, 0.0), (mat2(injectionSwitch.x, cos(0.0), 1.0, 0.0)) * mat2(1.0))), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))))) > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, length(0.0), 0.0, tan(0.0), 1.0, 1.0)))) && true)))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, true)), true && (bool(bvec4(false, true, false, true))))) || (false)), _GLF_IDENTITY(! (! _GLF_IDENTITY((false), bool(bvec4((false), false, true, false)))), true && (! (! _GLF_IDENTITY((false), bool(bvec4((false), false, true, false)))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
          return;
         return;
         if(_GLF_DEAD(false))
          return;
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, true && (false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bool(_GLF_IDENTITY(false, true && (false))))))), (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) || _GLF_IDENTITY(false, true && (false))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, false || (true)), false))), bool(bvec4(false, true, false, false))), ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))), bool(bvec4(false, true, false, false))), ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))))), (_GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(_GLF_FUZZED(5.2)), max(float(_GLF_FUZZED(5.2)), float(_GLF_FUZZED(5.2)))), _GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x), _GLF_IDENTITY(mix(float(float(injectionSwitch.x)), float(_GLF_FUZZED(_GLF_IDENTITY(-972.246, (true ? -972.246 : _GLF_FUZZED(4241.6616))))), bool(false)), sqrt(0.0) + (_GLF_IDENTITY(mix(float(float(injectionSwitch.x)), float(_GLF_FUZZED(-972.246)), bool(false)), mix(float(_GLF_FUZZED(-27.32)), float(_GLF_IDENTITY(mix(float(float(injectionSwitch.x)), float(_GLF_FUZZED(-972.246)), bool(false)), min(mix(float(float(injectionSwitch.x)), float(_GLF_FUZZED(-972.246)), bool(false)), mix(float(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, abs(0.0), 0.0)))), (float(injectionSwitch.x)) / sqrt(1.0))), float(_GLF_FUZZED(-972.246)), bool(false))))), bool(true)))))), bool(true))) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(injectionSwitch.y, 0.0, length(vec2(0.0, 0.0)), 0.0), _GLF_IDENTITY(mat2(mat4x2(mat2(injectionSwitch.y, 0.0, length(vec2(0.0, 0.0)), 0.0))), mat2(mat4x3(mat2(mat4x2(mat2(injectionSwitch.y, 0.0, length(vec2(0.0, 0.0)), 0.0)))))))), mix(float(float(_GLF_IDENTITY(mat2(injectionSwitch.y, 0.0, length(vec2(0.0, 0.0)), 0.0), _GLF_IDENTITY(mat2(mat4x2(mat2(injectionSwitch.y, 0.0, length(vec2(0.0, 0.0)), 0.0))), mat2(mat4x3(mat2(mat4x2(mat2(injectionSwitch.y, 0.0, length(vec2(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(acos(10.39)) : 0.0)), 0.0)), 0.0))))))))), float(_GLF_FUZZED(-2.7)), bool(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false))))))))) && (true)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true)), bool(bvec3(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true)), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true)), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true)), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true))))))))))), false, false)))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y, false, true)))))))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 subgroupBarrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       continue;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))).y)), true)))))))
      continue;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))
    continue;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    break;
   atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, min(read, _GLF_IDENTITY(read, (read) >> 0u))), 4, 64, 4);
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
