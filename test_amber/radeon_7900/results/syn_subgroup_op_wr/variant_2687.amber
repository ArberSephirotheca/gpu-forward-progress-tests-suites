#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) || false))))))), (injectionSwitch.x > injectionSwitch.y)) || (false)), (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 0.0, log(1.0), 0.0, tan(0.0), exp(0.0), 0.0, sin(0.0), sqrt(0.0), _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 0.0))) > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), bool(_GLF_IDENTITY(bool(bool(bvec2(false, false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(bool(bool(bvec2(false, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))) && true)), bvec3(bvec4(bvec3(bool(bool(bvec2(false, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(bool(bool(bvec2(false, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(bool(bool(bvec2(false, false))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y)), false, false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))), _GLF_IDENTITY(false, bool(bvec2(false, false))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(bool(bool(bvec2(false, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(bool(bool(bvec2(false, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, bool(bvec2(false, false))))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(bool(bool(bvec2(false, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(bool(bool(bvec2(false, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, bool(bvec2(false, false))))))), true, false, true)))) && true)) || false)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, true))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (! (true))))) && true)))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))) && true)))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), ((subgroup_size) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) / 1u)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    barrier();
   barrier();
  }
 uint read = 0;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) - 0)))))), 4, 64, 4);
 if((subgroup_local_id % _GLF_IDENTITY(_GLF_IDENTITY(2, max(2, 2)), (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, min(2, 2)), ~ (~ (_GLF_IDENTITY(2, min(2, 2))))), clamp(2, 2, 2)))), _GLF_IDENTITY((_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, min(2, 2)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED((84187 * -22725)) : 2)), min(2, 2))))), clamp(2, 2, 2))))) / int(_GLF_ONE(1.0, injectionSwitch.y)), (false ? _GLF_FUZZED(36099) : (_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, min(2, 2)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(2, (false ? _GLF_FUZZED((84187 * -22725)) : 2)), min(2, 2))))), clamp(2, 2, 2))))) / int(_GLF_ONE(1.0, injectionSwitch.y)))))) | (2))) == 0)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false))))), bool(bvec2(false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))))))))) || (false))) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-9.8, -0.2)))), vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-9.8, -0.2)))), vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-9.8, -0.2)))), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY((mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-9.8, -0.2)))), vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-9.8, -0.2)))), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y))) * mat3(1.0), ((mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-9.8, -0.2)))), vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-9.8, -0.2)))), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y))) * mat3(1.0)) * mat3(1.0))))).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   subgroupAll(false);
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), injectionSwitch.x)) < injectionSwitch.y)) && (_GLF_IDENTITY(false, (false) || false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   read = _GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), clamp(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(buf[virtual_gid], 4, 64, 2))), atomicLoad(buf[virtual_gid], 4, 64, 2))), 0u ^ _GLF_IDENTITY((atomicLoad(buf[_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid))], 4, 64, 2)), (true ? _GLF_IDENTITY((atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(max(virtual_gid, virtual_gid), max(_GLF_IDENTITY(max(virtual_gid, virtual_gid), uint(uvec2(max(virtual_gid, virtual_gid), 1u))), _GLF_IDENTITY(max(virtual_gid, virtual_gid), min(max(virtual_gid, virtual_gid), max(virtual_gid, virtual_gid))))))], 4, 64, 2)), ~ (~ ((atomicLoad(buf[_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))))], 4, 64, _GLF_IDENTITY(2, (2) + 0)))))) : _GLF_FUZZED(read))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)) && true)))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, determinant(mat3(1.0, 0.0, 0.0, 0.0, exp(0.0), determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(0.0, 0.0))) - _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)))), 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0)), 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4.8)), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, determinant(mat3(1.0, 0.0, 0.0, 0.0, exp(0.0), determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(-8.1, -6073.2231, 939.020, -5.3).s)), vec2(_GLF_FUZZED(8.7), (injectionSwitch)[1]), bvec2(false, true))).y), 0.0, 1.0)) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4.8)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, (true) && true)))), 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4.8)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, (true) && true)))), float(mat4x2(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4.8)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, (true) && true)))), _GLF_ONE(1.0, injectionSwitch.y), sqrt(0.0), 0.0, 1.0, 1.0, abs(1.0), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))))) > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, determinant(mat3(1.0, 0.0, 0.0, 0.0, exp(0.0), determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4.8)), float(injectionSwitch.x), bool(true))))) > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(2473.3160)))))), bool(_GLF_IDENTITY(bvec2((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, determinant(mat3(1.0, 0.0, 0.0, 0.0, exp(0.0), determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4.8)), float(injectionSwitch.x), bool(true))))) > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(2473.3160)))))), true), bvec2(bvec4(bvec2((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, determinant(mat3(1.0, 0.0, 0.0, 0.0, exp(0.0), determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4.8)), float(injectionSwitch.x), bool(true))))) > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(2473.3160)))))), true), true, true)))))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), ! (! (true))) && (false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   subgroupAll(false);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   _GLF_IDENTITY(read = atomicLoad(buf[virtual_gid], 4, 64, 2), ~ (~ (read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, min(64, 64)), 2))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, 0.0 + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), (bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))) || false))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4(injectionSwitch.x, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, cos(0.0), _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0, sin(0.0), sqrt(1.0), round(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), _GLF_IDENTITY(0.0, 1.0 * (0.0)) + (_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), (length(_GLF_IDENTITY(normalize(_GLF_IDENTITY(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mat3(1.0) * (vec3(1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0, 1.0, length(vec2(0.0, 0.0)), 0.0, cos(0.0), 1.0, 1.0)), max(float(mat3(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0, 1.0, length(vec2(0.0, 0.0)), 0.0, cos(0.0), 1.0, 1.0)), float(mat3(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0, 1.0, length(vec2(0.0, 0.0)), 0.0, cos(0.0), 1.0, 1.0)))))))), clamp(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0))), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (vec3(1.0, 1.0, 1.0)) + vec3(0.0, 0.0, 0.0)), vec3(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((- 751.567))), float(1.0), bool(true))))))), _GLF_IDENTITY((true ? normalize(_GLF_IDENTITY(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(7.4)), bool(false)))), clamp(vec3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-6074.7047)), float(1.0), bool(true))), 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (vec3(1.0, 1.0, 1.0)) + vec3(0.0, 0.0, 0.0)), vec3(1.0, 1.0, 1.0)))) : _GLF_IDENTITY(_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)), max(_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)), _GLF_FUZZED(vec3(4101.8730, 347.073, 8.2))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY((true ? normalize(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), clamp(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (vec3(1.0, 1.0, 1.0)) + vec3(0.0, 0.0, 0.0)), vec3(1.0, 1.0, 1.0)))) : _GLF_FUZZED(vec3(4101.8730, 347.073, 8.2))), _GLF_IDENTITY(((true ? normalize(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), clamp(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (vec3(1.0, 1.0, 1.0)) + vec3(0.0, 0.0, 0.0)), vec3(1.0, 1.0, 1.0)))) : _GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)))) * mat3(_GLF_ONE(1.0, injectionSwitch.y)), vec3(1.0, 1.0, 1.0) * (((true ? normalize(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), clamp(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (vec3(1.0, 1.0, 1.0)) + vec3(0.0, 0.0, 0.0)), vec3(1.0, 1.0, 1.0)))) : _GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)))) * mat3(_GLF_ONE(1.0, injectionSwitch.y))))), ((true ? normalize(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), clamp(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0), (vec3(1.0, 1.0, 1.0)) + vec3(0.0, 0.0, 0.0)), vec3(1.0, 1.0, 1.0)))) : _GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)))) * mat3(1.0)), _GLF_IDENTITY((true ? normalize(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), clamp(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (vec3(1.0, 1.0, 1.0)) + vec3(0.0, 0.0, 0.0)), vec3(1.0, 1.0, 1.0)))) : _GLF_FUZZED(vec3(4101.8730, 347.073, 8.2))), ((_GLF_IDENTITY(true ? normalize(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), clamp(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (vec3(1.0, 1.0, 1.0)) + vec3(0.0, 0.0, 0.0)), vec3(1.0, 1.0, 1.0)))) : _GLF_IDENTITY(_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)), min(_GLF_IDENTITY(_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)), mix(vec3((_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)))[0], (_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)))[1], (_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)))[2]), vec3(_GLF_FUZZED(-5616.0946), _GLF_FUZZED(_GLF_IDENTITY(7.2, min(7.2, 7.2))), _GLF_FUZZED(-55.80)), bvec3(false, false, false))), _GLF_IDENTITY(_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)), clamp(_GLF_FUZZED(_GLF_IDENTITY(vec3(4101.8730, 347.073, 8.2), max(vec3(4101.8730, 347.073, 8.2), vec3(4101.8730, 347.073, 8.2)))), _GLF_FUZZED(vec3(4101.8730, _GLF_IDENTITY(347.073, float(mat3x4(347.073, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0))), 8.2)), _GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)))))), vec3(_GLF_IDENTITY(mat2(_GLF_IDENTITY(true ? normalize(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), clamp(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (vec3(1.0, 1.0, 1.0)) + vec3(0.0, 0.0, 0.0)), vec3(1.0, 1.0, 1.0)))) : _GLF_IDENTITY(_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)), min(_GLF_IDENTITY(_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)), mix(vec3((_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)))[0], (_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)))[1], (_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)))[2]), vec3(_GLF_FUZZED(-5616.0946), _GLF_FUZZED(_GLF_IDENTITY(7.2, min(7.2, 7.2))), _GLF_FUZZED(-55.80)), bvec3(false, false, false))), _GLF_IDENTITY(_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)), clamp(_GLF_FUZZED(_GLF_IDENTITY(vec3(4101.8730, 347.073, 8.2), max(vec3(4101.8730, 347.073, 8.2), vec3(4101.8730, 347.073, 8.2)))), _GLF_FUZZED(vec3(4101.8730, _GLF_IDENTITY(347.073, float(mat3x4(347.073, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0))), 8.2)), _GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)))))), (true ? _GLF_IDENTITY(true ? normalize(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), clamp(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (vec3(1.0, 1.0, 1.0)) + vec3(0.0, 0.0, 0.0)), vec3(1.0, 1.0, 1.0)))) : _GLF_IDENTITY(_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)), min(_GLF_IDENTITY(_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)), mix(vec3((_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)))[0], (_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)))[1], (_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)))[2]), vec3(_GLF_FUZZED(-5616.0946), _GLF_FUZZED(_GLF_IDENTITY(7.2, min(7.2, 7.2))), _GLF_FUZZED(-55.80)), bvec3(false, false, false))), _GLF_IDENTITY(_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)), clamp(_GLF_FUZZED(_GLF_IDENTITY(vec3(4101.8730, 347.073, 8.2), max(vec3(4101.8730, 347.073, 8.2), vec3(4101.8730, 347.073, 8.2)))), _GLF_FUZZED(vec3(4101.8730, _GLF_IDENTITY(347.073, float(mat3x4(347.073, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0))), 8.2)), _GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)))))), (false ? _GLF_FUZZED(vec3(-6754.9158, -6.2, -0.5)) : true ? normalize(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), clamp(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (vec3(1.0, 1.0, 1.0)) + vec3(0.0, 0.0, 0.0)), vec3(1.0, 1.0, 1.0)))) : _GLF_IDENTITY(_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)), min(_GLF_IDENTITY(_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)), mix(vec3((_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)))[0], (_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)))[1], (_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)))[2]), vec3(_GLF_FUZZED(-5616.0946), _GLF_FUZZED(_GLF_IDENTITY(7.2, min(7.2, 7.2))), _GLF_FUZZED(-55.80)), bvec3(false, false, false))), _GLF_IDENTITY(_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)), clamp(_GLF_FUZZED(_GLF_IDENTITY(vec3(4101.8730, 347.073, 8.2), max(vec3(4101.8730, 347.073, 8.2), vec3(4101.8730, 347.073, 8.2)))), _GLF_FUZZED(vec3(4101.8730, _GLF_IDENTITY(347.073, float(mat3x4(347.073, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0))), 8.2)), _GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)))))))) : _GLF_FUZZED(vec3(4.6, -1.9, 5444.1448)))), 1.0), (mat2(_GLF_IDENTITY(true ? normalize(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), clamp(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (vec3(1.0, 1.0, 1.0)) + vec3(0.0, 0.0, 0.0)), vec3(1.0, 1.0, 1.0)))) : _GLF_IDENTITY(_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)), min(_GLF_IDENTITY(_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)), mix(vec3((_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)))[0], (_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)))[1], (_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)))[2]), vec3(_GLF_FUZZED(-5616.0946), _GLF_FUZZED(_GLF_IDENTITY(7.2, min(7.2, 7.2))), _GLF_FUZZED(-55.80)), bvec3(false, false, false))), _GLF_IDENTITY(_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)), clamp(_GLF_FUZZED(_GLF_IDENTITY(vec3(4101.8730, 347.073, 8.2), max(vec3(4101.8730, 347.073, 8.2), vec3(4101.8730, 347.073, 8.2)))), _GLF_FUZZED(vec3(4101.8730, _GLF_IDENTITY(347.073, float(mat3x4(347.073, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0))), 8.2)), _GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)))))), (true ? _GLF_IDENTITY(true ? normalize(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), clamp(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (vec3(1.0, 1.0, 1.0)) + vec3(0.0, 0.0, 0.0)), vec3(1.0, 1.0, 1.0)))) : _GLF_IDENTITY(_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)), min(_GLF_IDENTITY(_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)), mix(vec3((_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)))[0], (_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)))[1], (_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)))[2]), vec3(_GLF_FUZZED(-5616.0946), _GLF_FUZZED(_GLF_IDENTITY(7.2, min(7.2, 7.2))), _GLF_FUZZED(-55.80)), bvec3(false, false, false))), _GLF_IDENTITY(_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)), clamp(_GLF_FUZZED(_GLF_IDENTITY(vec3(4101.8730, 347.073, 8.2), max(vec3(4101.8730, 347.073, 8.2), vec3(4101.8730, 347.073, 8.2)))), _GLF_FUZZED(vec3(4101.8730, _GLF_IDENTITY(347.073, float(mat3x4(347.073, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0))), 8.2)), _GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)))))), (false ? _GLF_FUZZED(vec3(-6754.9158, -6.2, -0.5)) : true ? normalize(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), clamp(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (vec3(1.0, 1.0, 1.0)) + vec3(0.0, 0.0, 0.0)), vec3(1.0, 1.0, 1.0)))) : _GLF_IDENTITY(_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)), min(_GLF_IDENTITY(_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)), mix(vec3((_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)))[0], (_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)))[1], (_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)))[2]), vec3(_GLF_FUZZED(-5616.0946), _GLF_FUZZED(_GLF_IDENTITY(7.2, min(7.2, 7.2))), _GLF_FUZZED(-55.80)), bvec3(false, false, false))), _GLF_IDENTITY(_GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)), clamp(_GLF_FUZZED(_GLF_IDENTITY(vec3(4101.8730, 347.073, 8.2), max(vec3(4101.8730, 347.073, 8.2), vec3(4101.8730, 347.073, 8.2)))), _GLF_FUZZED(vec3(4101.8730, _GLF_IDENTITY(347.073, float(mat3x4(347.073, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0))), 8.2)), _GLF_FUZZED(vec3(4101.8730, 347.073, 8.2)))))))) : _GLF_FUZZED(vec3(4.6, -1.9, 5444.1448)))), 1.0)) + mat2(0.0, 0.0, 0.0, 0.0)))))) * vec3(1.0, 1.0, 1.0)), (true ? normalize(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), clamp(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY((vec3(1.0, 1.0, 1.0)) + vec3(0.0, 0.0, 0.0), _GLF_IDENTITY(vec3(mat2x4((vec3(1.0, 1.0, 1.0)) + vec3(0.0, 0.0, 0.0), 1.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, exp(0.0), 0.0)), max(vec3(mat2x4((vec3(1.0, 1.0, 1.0)) + vec3(0.0, 0.0, 0.0), 1.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, exp(0.0), 0.0)), vec3(mat2x4((vec3(1.0, 1.0, 1.0)) + vec3(0.0, 0.0, 0.0), 1.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, exp(0.0), 0.0)))))), vec3(1.0, 1.0, 1.0)))) : _GLF_FUZZED(_GLF_IDENTITY(vec3(4101.8730, 347.073, 8.2), mat3(1.0) * (vec3(4101.8730, 347.073, 8.2)))))))))) + 0.0))))), (false ? _GLF_FUZZED(mat4(38.29, -3204.5603, -57.37, 0.0, 12.73, -5.8, 284.843, -564.668, -546.325, -7.2, 9.7, -3129.6993, 0.3, -706.053, _GLF_IDENTITY(1804.5144, (false ? _GLF_FUZZED(-839.498) : 1804.5144)), -515.002)) : mat4(injectionSwitch.x, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, cos(0.0), 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0))), 0.0, sin(0.0), sqrt(1.0), round(length(normalize(vec3(1.0, 1.0, 1.0))))))))), _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 0.0, 1.0))), injectionSwitch)).x, injectionSwitch.x), clamp(min(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 0.0, 1.0))), injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(_GLF_IDENTITY(23.38, (_GLF_IDENTITY(23.38, (true ? 23.38 : _GLF_FUZZED(-18.43)))) * 1.0)) : injectionSwitch.x))), _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x, injectionSwitch.x), clamp(min(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 0.0, 1.0))), injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(14.21, -2646.0004)) : injectionSwitch)).x), min(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 0.0, 1.0))), injectionSwitch)).x, injectionSwitch.x), _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, cos(0.0), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 0.0, 1.0))), injectionSwitch)).x, injectionSwitch.x), (false ? _GLF_FUZZED(-989.076) : min(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((true ? -63.83 : (+ 7.8))), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(-5.7)), bvec2(true, false))), 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(714.204)), bool(false))), cos(0.0), 0.0, 1.0, 0.0, 1.0))), injectionSwitch)).x, injectionSwitch.x))))), min(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(cos(0.0), float(mat2(cos(0.0), 1.0, 1.0, 1.0))), 0.0, 1.0, 0.0, 1.0))), injectionSwitch)).x, injectionSwitch.x)))) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(injectionSwitch.x, sin(0.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0), (mat2x4(injectionSwitch.x, sin(0.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), clamp(float(_GLF_IDENTITY(mat2x4(injectionSwitch.x, sin(0.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0), (mat2x4(injectionSwitch.x, sin(0.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), float(_GLF_IDENTITY(mat2x4(injectionSwitch.x, sin(0.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0), (mat2x4(injectionSwitch.x, sin(0.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), float(_GLF_IDENTITY(mat2x4(injectionSwitch.x, sin(0.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0), (mat2x4(injectionSwitch.x, sin(0.0), 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(7.4))), 1.0, 1.0)) - mat2x4(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))) > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), bvec3(bvec4(bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), true)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), true))))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), true)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), true))))))))))), ! (! (! (bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), true)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), true))))))))))))))), (! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), true)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), true))))))))))), ! (! (! (bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))), true))))), true)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), true))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))), true))))), true)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), true))))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))), true))))), true)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), true)))))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))), true))))), true)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), true))))))))))))), true)))))))))))) || false))))))), bool(bool(_GLF_DEAD(false)))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), bvec3(bvec4(bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), ! (! (bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, (true) && true)), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), true)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), false)), bvec3(bvec3(bvec3(bvec4(bvec3(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) && true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), false))))))))), true))))))))))))))), bool(bool(_GLF_DEAD(false))))) || false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))), 0.0)), (vec2(vec3(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))), 0.0))) - vec2(0.0, 0.0))).x > injectionSwitch.y))))
    barrier();
  }
 subgroupBarrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))), false || (bool(_GLF_IDENTITY(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))))))))
  barrier();
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
