#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))))))), _GLF_IDENTITY(false || ((injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(false, ! (! (false))) || ((injectionSwitch.x > injectionSwitch.y))) || false)))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & 22299)); _injected_loop_counter --)
      {
       barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, false))), true, true, false)))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))) || false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, bool(bvec3(true, true, false))), true)))))
      {
      }
     else
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, length(sqrt(vec3(0.0, 0.0, 0.0))), 0.0, 0.0, 1.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, 0.0))), vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, length(sqrt(vec3(0.0, 0.0, 0.0))), 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-490.923)), bool(false))), 1.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), tan(0.0), 1.0, 1.0), mat3x2(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(9.8) : _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0)), 0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(0.0, 0.0)) : _GLF_FUZZED(vec4(-6.1, -1.4, 3408.4563, 5781.3575).x))), 0.0, 0.0, 0.0) + (mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, _GLF_IDENTITY(length(sqrt(vec3(0.0, 0.0, 0.0))), (length(sqrt(vec3(0.0, 0.0, 0.0)))) + _GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, 0.0))), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), tan(0.0), 1.0, 1.0))))).y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, length(sqrt(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), max(vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0))))), 0.0, 0.0, 1.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, 0.0))), vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, length(sqrt(vec3(0.0, 0.0, 0.0))), 0.0, 0.0, 1.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, 0.0))), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x), tan(0.0), 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0)), mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, _GLF_IDENTITY(length(sqrt(vec3(0.0, 0.0, 0.0))), mix(float(length(sqrt(vec3(0.0, 0.0, 0.0)))), float(_GLF_FUZZED(-7969.2131)), bool(false))), 0.0, 0.0, 1.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), tan(0.0), 1.0, 1.0))))).y, false, false, true))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, length(sqrt(vec3(0.0, 0.0, 0.0))), 0.0, 0.0, 1.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, 0.0))), vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, length(sqrt(vec3(0.0, 0.0, 0.0))), 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-490.923)), bool(false))), 1.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), tan(0.0), 1.0, 1.0), mat3x2(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(9.8) : _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0)), 0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(0.0, 0.0)) : _GLF_FUZZED(vec4(-6.1, -1.4, 3408.4563, 5781.3575).x))), 0.0, 0.0, 0.0) + (mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, _GLF_IDENTITY(length(sqrt(vec3(0.0, 0.0, 0.0))), (length(sqrt(vec3(0.0, 0.0, 0.0)))) + _GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, 0.0))), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), tan(0.0), 1.0, 1.0))))).y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, length(sqrt(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), max(vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0))))), 0.0, 0.0, 1.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, 0.0))), vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, length(sqrt(vec3(0.0, 0.0, 0.0))), 0.0, 0.0, 1.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, 0.0))), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x), tan(0.0), 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0)), mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, _GLF_IDENTITY(length(sqrt(vec3(0.0, 0.0, 0.0))), mix(float(length(sqrt(vec3(0.0, 0.0, 0.0)))), float(_GLF_FUZZED(-7969.2131)), bool(false))), 0.0, 0.0, 1.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), tan(0.0), 1.0, 1.0))))).y, false, false, true))))), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, length(sqrt(vec3(0.0, 0.0, 0.0))), 0.0, 0.0, 1.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, 0.0))), vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, length(sqrt(vec3(0.0, 0.0, 0.0))), 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-490.923)), bool(false))), 1.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), tan(0.0), 1.0, 1.0), mat3x2(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(9.8) : _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0)), 0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(0.0, 0.0)) : _GLF_FUZZED(vec4(-6.1, -1.4, 3408.4563, 5781.3575).x))), 0.0, 0.0, 0.0) + (mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, _GLF_IDENTITY(length(sqrt(vec3(0.0, 0.0, 0.0))), (length(sqrt(vec3(0.0, 0.0, 0.0)))) + _GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, 0.0))), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), tan(0.0), 1.0, 1.0))))).y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, length(sqrt(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), max(vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0))))), 0.0, 0.0, 1.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, 0.0))), vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, length(sqrt(vec3(0.0, 0.0, 0.0))), 0.0, 0.0, 1.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, 0.0))), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x), tan(0.0), 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0)), mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, _GLF_IDENTITY(length(sqrt(vec3(0.0, 0.0, 0.0))), mix(float(length(sqrt(vec3(0.0, 0.0, 0.0)))), float(_GLF_FUZZED(-7969.2131)), bool(false))), 0.0, 0.0, 1.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), tan(0.0), 1.0, 1.0))))).y, false, false, true))))), false, true, false))))))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))) > injectionSwitch.y))))
      continue;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, false), false))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
      {
       return;
      }
    }
   return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true ? injectionSwitch.y : _GLF_FUZZED(-7.0), mix(float(true ? injectionSwitch.y : _GLF_FUZZED(-7.0)), float(_GLF_FUZZED(-0.6)), bool(false)))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
          }
         else
          {
          }
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x4(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0), mat2x4(mat4(mat2x4(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)))))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(vec4(-1.1, 25.32, 8.2, 8.5).q)), float(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))), bool(true))) > injectionSwitch.y))) && _GLF_IDENTITY(true, _GLF_IDENTITY(true && _GLF_IDENTITY((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((true), false || ((true))))), (true && _GLF_IDENTITY((true), bool(bool((true))))) && true)))) || false)));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, (_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id)))) | 0u);
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), false || (bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, false)))))
            barrier();
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-51.46)), float(0.0), bool(true))), 1.0, 1.0, 0.0, cos(0.0)))).x > injectionSwitch.y))))
        barrier();
      }
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0))), injectionSwitch.y))))))
            barrier();
          }
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))))))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, true)), (bool(bvec3(_GLF_DEAD(false), false, true))) && true)))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
                  return;
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
          }
        }
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) && true)), _GLF_IDENTITY((_GLF_IDENTITY(false, false || _GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))), ! (! (_GLF_IDENTITY((false), ! (! ((false))))))))), ((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (! ((false))))))) || false) || false)) && true)))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(bvec2(false, true))))), (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(bvec2(false, true)))))) && true), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) && true))), (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(bvec2(false, true))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(bvec2(false, true)))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(bvec2(false, true)))), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(bvec2(false, true)))), true), true))))))))) && true), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) && true)))) || false))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            return;
          }
         else
          {
          }
         barrier();
        }
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * subgroup_size, (true ? subgroup_id * subgroup_size : _GLF_FUZZED(num_workgroup)));
 uint virtual_gid = workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id))), uint(uvec2(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), uint(uint((subgroup_local_id) | (subgroup_local_id))))), _GLF_IDENTITY(0u, (0u) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) + (subgroup_local_id))), 1u)))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id))), uint(uvec2(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), uint(uint((subgroup_local_id) | (subgroup_local_id))))), _GLF_IDENTITY(0u, (0u) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) + (subgroup_local_id))), 1u)))), clamp(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id))), uint(uvec2(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), uint(uint((subgroup_local_id) | (subgroup_local_id))))), _GLF_IDENTITY(0u, (0u) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) + (subgroup_local_id))), 1u)))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id))), uint(uvec2(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), uint(uint((subgroup_local_id) | (subgroup_local_id))))), _GLF_IDENTITY(0u, (0u) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) + (subgroup_local_id))), 1u)))), (false ? _GLF_FUZZED(subgroup_base) : ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id))), uint(uvec2(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), uint(uint((subgroup_local_id) | (subgroup_local_id))))), _GLF_IDENTITY(0u, (0u) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) + (subgroup_local_id))), 1u)))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id))), uint(uvec2(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), uint(uint((subgroup_local_id) | (subgroup_local_id))))), _GLF_IDENTITY(0u, (0u) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) + (subgroup_local_id))), 1u)))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id))), uint(uvec2(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), uint(uint((subgroup_local_id) | (subgroup_local_id))))), _GLF_IDENTITY(0u, (0u) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) + (subgroup_local_id))), 1u)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id))), uint(uvec2(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) | (subgroup_local_id), uint(uint((subgroup_local_id) | (subgroup_local_id))))), _GLF_IDENTITY(0u, (0u) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) + (subgroup_local_id))), 1u)))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u) + subgroup_base + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), 0u | (((subgroup_local_id + 1) % subgroup_size))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u) + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), (_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base))) | _GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0u, 0u ^ (0u)), (_GLF_IDENTITY(0u, 0u ^ _GLF_IDENTITY((0u), ((0u)) / 1u))) / uint(_GLF_ONE(1.0, injectionSwitch.y)))) / (1u | 1u), 0u | ((_GLF_IDENTITY(0u, 0u ^ (0u))) / (1u | 1u))))) + subgroup_base + ((subgroup_local_id + 1) % subgroup_size)), (true ? (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))), workgroup_base, workgroup_base)), (workgroup_base) | _GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0u, 0u ^ (0u)), (_GLF_IDENTITY(0u, _GLF_IDENTITY(0u, (0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (0u))) / uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y)))) / (1u | 1u), 0u | ((_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0u : _GLF_FUZZED(workgroup_base))), 0u ^ (0u))) / (1u | 1u))))) + subgroup_base + ((subgroup_local_id + 1) % subgroup_size)) : _GLF_FUZZED(workgroup_base))), (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), (workgroup_base) | _GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY(0u ^ (0u), _GLF_IDENTITY(uint(uvec2(0u ^ (0u), 0u)), ~ (~ (uint(uvec2(0u ^ (0u), 0u))))))), (_GLF_IDENTITY(0u, 0u ^ (0u))) / uint(_GLF_ONE(1.0, injectionSwitch.y)))) / (1u | 1u), 0u | ((_GLF_IDENTITY(0u, 0u ^ (0u))) / (1u | 1u))))) + subgroup_base + ((subgroup_local_id + 1) % subgroup_size)), (true ? (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), (workgroup_base) | _GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0u, 0u ^ (0u)), _GLF_IDENTITY((_GLF_IDENTITY(0u, 0u ^ (0u))), min((_GLF_IDENTITY(0u, 0u ^ (0u))), _GLF_IDENTITY((_GLF_IDENTITY(0u, 0u ^ (0u))), min((_GLF_IDENTITY(0u, 0u ^ (0u))), (_GLF_IDENTITY(0u, 0u ^ (0u))))))) / uint(_GLF_ONE(1.0, injectionSwitch.y)))) / (1u | 1u), 0u | ((_GLF_IDENTITY(0u, 0u ^ (0u))) / (1u | 1u))))) + _GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(subgroup_id) : subgroup_base)) + ((subgroup_local_id + 1) % subgroup_size)) : _GLF_FUZZED(workgroup_base)))) | (~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), (workgroup_base) | _GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, 0u ^ (0u)), (_GLF_IDENTITY(0u, 0u ^ (0u))) / uint(_GLF_ONE(1.0, injectionSwitch.y))), min(_GLF_IDENTITY(_GLF_IDENTITY(0u, 0u ^ (0u)), (_GLF_IDENTITY(0u, 0u ^ (0u))) / uint(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(0u, 0u ^ (0u)), (_GLF_IDENTITY(0u, 0u ^ (0u))) / uint(_GLF_ONE(1.0, injectionSwitch.y)))))) / (1u | 1u), 0u | ((_GLF_IDENTITY(0u, 0u ^ (0u))) / (1u | 1u))))) + _GLF_IDENTITY(subgroup_base, ~ (~ (subgroup_base))) + ((subgroup_local_id + 1) % subgroup_size)), uint(uvec4((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), (workgroup_base) | _GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, 0u ^ (0u)), (_GLF_IDENTITY(0u, 0u ^ (0u))) / uint(_GLF_ONE(1.0, injectionSwitch.y))), min(_GLF_IDENTITY(_GLF_IDENTITY(0u, 0u ^ (0u)), (_GLF_IDENTITY(0u, 0u ^ (0u))) / uint(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(0u, 0u ^ (0u)), (_GLF_IDENTITY(0u, 0u ^ (0u))) / uint(_GLF_ONE(1.0, injectionSwitch.y)))))) / (1u | 1u), 0u | ((_GLF_IDENTITY(0u, 0u ^ (0u))) / (1u | 1u))))) + _GLF_IDENTITY(subgroup_base, ~ (~ (subgroup_base))) + ((subgroup_local_id + 1) % subgroup_size)), 0u, 0u, 0u))), (true ? (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), (workgroup_base) | _GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0u, 0u ^ (0u)), (_GLF_IDENTITY(0u, 0u ^ (0u))) / uint(_GLF_ONE(1.0, injectionSwitch.y)))) / (1u | 1u), 0u | (_GLF_IDENTITY((_GLF_IDENTITY(0u, 0u ^ (0u))), ((_GLF_IDENTITY(0u, 0u ^ (0u)))) ^ 0u) / (1u | 1u))))) + subgroup_base + ((subgroup_local_id + 1) % subgroup_size)) : _GLF_FUZZED(workgroup_base))))))))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), false || (! (false)))), _GLF_IDENTITY((! (_GLF_IDENTITY(! (false), false || (! (false))))) && true, bool(bvec2((! (_GLF_IDENTITY(! (false), false || (! (false))))) && true, false)))))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint read = 0;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), bool(bvec4(! (_GLF_IDENTITY(false, (false) || false)), true, false, true)))))))))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))))))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, (64) / (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), clamp(~ (0), ~ (0), _GLF_IDENTITY(~ (0), max(~ (0), ~ (0))))))), 0)) ^ 1)), 4);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec3(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 1.0)))))))
  barrier();
 for(int _injected_loop_counter = (((1 | 1) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), max(int(0), int(0))), ~ (_GLF_IDENTITY(~ (int(0)), ~ (~ (~ (int(0))))))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, _GLF_IDENTITY((true ? 0 : _GLF_FUZZED(max(-5718, -10062))), ((true ? 0 : _GLF_FUZZED(max(-5718, -10062)))) - 0))), max(int(0), int(0))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_IDENTITY(bool(bvec3(_injected_loop_counter > 0, true, true)), ! (! (bool(bvec3(_injected_loop_counter > 0, true, true))))))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, false)))), ! (! (! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, false)))))))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(bool(_GLF_IDENTITY(bool(bvec4(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(bvec3(bool(bvec4(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), false, false)))), (! (_GLF_IDENTITY(bool(bvec4(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(bvec3(bool(bvec4(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), false, false))))) && true)))))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), false || (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, (0) / 1) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(int(int(_injected_loop_counter)), (false ? _GLF_FUZZED(_injected_loop_counter) : int(int(_injected_loop_counter))))) != _GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), (true ? int(1) : _GLF_FUZZED(_injected_loop_counter))))), (_injected_loop_counter != _GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(true ? int(1) : _GLF_FUZZED(_injected_loop_counter), int(int(true ? int(1) : _GLF_FUZZED(_injected_loop_counter))))))))) && true)); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(2.2) : _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-7.9)), float(injectionSwitch.y), bool(true)))) / 1.0)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if((_GLF_IDENTITY(subgroup_local_id % _GLF_IDENTITY(2, _GLF_IDENTITY((2), ~ (~ (_GLF_IDENTITY((2), int(ivec4((_GLF_IDENTITY(2, ~ (~ (2)))), 1, 0, 1)))))) * 1), (subgroup_local_id % 2) << 0u)) == 0)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-1.5)), bool(false))) < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         subgroupAll(false);
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)))).y))))), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6623.5691), _GLF_FUZZED(-4.9)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))))), true), false), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6623.5691), _GLF_FUZZED(-4.9)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))))), true), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
          barrier();
        }
       else
        {
        }
      }
     read = _GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, max(64, 64)), _GLF_IDENTITY(_GLF_IDENTITY(2, max(_GLF_IDENTITY(2, 0 + (_GLF_IDENTITY(2, _GLF_IDENTITY(int(int(2)), min(_GLF_IDENTITY(int(int(2)), 0 | (_GLF_IDENTITY(int(int(2)), 0 ^ (int(int(2)))))), int(int(2))))))), 2)), max(2, _GLF_IDENTITY(2, (2) << 0)))), max(atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, max(64, 64)), _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, max(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) << 0), max(2, _GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, 0 | (2)), 2, 2)))), 2)), _GLF_IDENTITY(2, (2) << 0)))), atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(_GLF_IDENTITY(64, max(64, 64)), max(64, 64)), _GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, (2) << 0)))))), (_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, max(64, 64)), _GLF_IDENTITY(_GLF_IDENTITY(2, max(_GLF_IDENTITY(2, 0 + (_GLF_IDENTITY(2, _GLF_IDENTITY(int(int(2)), min(_GLF_IDENTITY(int(int(2)), 0 | (_GLF_IDENTITY(int(int(2)), 0 ^ (int(int(2)))))), int(int(2))))))), 2)), max(2, _GLF_IDENTITY(2, (2) << 0)))), max(atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, max(64, 64)), _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, max(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) << 0), max(2, _GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, 0 | (2)), 2, 2)))), 2)), _GLF_IDENTITY(2, (2) << 0)))), atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(_GLF_IDENTITY(64, max(64, 64)), max(64, 64)), _GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, (2) << 0))))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)));
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0))).y))) && _GLF_TRUE(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)))))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true))))), ! (! (bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))))), bvec3(bvec3(bvec3(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true))))), ! (! (bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))))), bvec3(bvec3(bvec3(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(bvec2((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true))))), ! (! (bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))))), bvec3(bvec3(bvec3(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))), true, true))), true)), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true))))), ! (! (bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))))), bvec3(bvec3(bvec3(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(bvec2((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true))))), ! (! (bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))))), bvec3(bvec3(bvec3(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))), true, true))), true)), bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true))))), ! (! (bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))))), bvec3(bvec3(bvec3(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(bvec2((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true))))), ! (! (bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))))), bvec3(bvec3(bvec3(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))), true, true))), true)), true))), false), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true))))), ! (! (bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))))), bvec3(bvec3(bvec3(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(bvec2((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true))))), ! (! (bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))))), bvec3(bvec3(bvec3(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))), true, true))), true)), bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true))))), ! (! (bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))))), bvec3(bvec3(bvec3(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(bvec2((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true))))), ! (! (bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))))), bvec3(bvec3(bvec3(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))), true, true))), true)), true))), false)))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   else
    {
     subgroupAll(_GLF_IDENTITY(false, ! (! (false))));
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))) || false)))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
      }
     do
      {
       for(int _injected_loop_counter = (0 | _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) | (0)), (0) | _GLF_IDENTITY((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) ^ 0)), min(_GLF_IDENTITY((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) ^ 0)), clamp((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) ^ 0)), (_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(0, 0 ^ (0)))), 0))) ^ 0), (false ? _GLF_FUZZED(54583) : _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, 0 | (0)), 0, 0)), 0))) ^ 0), _GLF_IDENTITY(0, 0 + (0)) ^ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) ^ 0)))))), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) ^ 0)))), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) ^ 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         _GLF_IDENTITY(read = atomicLoad(buf[virtual_gid], 4, 64, 2), _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(atomicAnd(workgroup_base, workgroup_id), (_GLF_IDENTITY(atomicAnd(workgroup_base, workgroup_id), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (atomicAnd(workgroup_base, workgroup_id)))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_IDENTITY(read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), clamp(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(buf[virtual_gid], 4, 64, 2), _GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (false ? _GLF_FUZZED(subgroup_base) : atomicLoad(buf[virtual_gid], 4, 64, 2))), (_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (false ? _GLF_FUZZED(subgroup_base) : atomicLoad(buf[virtual_gid], 4, 64, 2))), 0u + (_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (false ? _GLF_FUZZED(subgroup_base) : atomicLoad(buf[virtual_gid], 4, 64, 2)))))) << 0u))), (read = _GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], max(buf[virtual_gid], buf[virtual_gid])), 4, _GLF_IDENTITY(64, (64) - 0), 2), uint(uvec3(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(workgroup_id) : virtual_gid))], 4, 64, 2), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) * 1u)), (1u & 1u) * ((false ? _GLF_FUZZED(_GLF_IDENTITY(atomicAnd(workgroup_base, workgroup_id), (_GLF_IDENTITY(atomicAnd(workgroup_base, workgroup_id), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (atomicAnd(workgroup_base, workgroup_id)))) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_IDENTITY(read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), clamp(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(buf[virtual_gid], 4, 64, 2), _GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (false ? _GLF_FUZZED(subgroup_base) : atomicLoad(buf[virtual_gid], 4, 64, 2))), (_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (false ? _GLF_FUZZED(subgroup_base) : atomicLoad(buf[virtual_gid], 4, 64, 2))), 0u + (_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (false ? _GLF_FUZZED(subgroup_base) : atomicLoad(buf[virtual_gid], 4, 64, 2)))))) << 0u))), (read = _GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], max(buf[virtual_gid], buf[virtual_gid])), 4, _GLF_IDENTITY(64, (64) - 0), 2), uint(uvec3(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(workgroup_id) : virtual_gid))], 4, 64, 2), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) * 1u)))));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))) && true))), true, false))), true, false, false))))
      barrier();
     return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false), (_GLF_IDENTITY((false), false || ((false)))) || _GLF_IDENTITY(false, ! (! (false)))) && true)))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) && (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) && true))), _GLF_IDENTITY(true && (! (! (_GLF_IDENTITY(false, (false) && true)))), ! (_GLF_IDENTITY(! (true && (! (! (_GLF_IDENTITY(false, (false) && true))))), (! (true && (! (! (_GLF_IDENTITY(false, (false) && true)))))) || false)))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, (false) || false))))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false))))) || false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), (injectionSwitch.y) - determinant(mat2(0.0, 0.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0)))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))) && true)))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false))))));
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(vec3(0.0, 1.0, 1.0)), 0.0 + (float(vec3(0.0, 1.0, 1.0))))))).y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(vec3(0.0, 1.0, 1.0)), 0.0 + (float(vec3(0.0, 1.0, 1.0))))))).y))))))
      {
       for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4(_GLF_ONE(1.0, injectionSwitch.y), 1.0, abs(0.0), log(1.0), tan(0.0), 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, round(length(normalize(1.0))), 0.0, 1.0, 0.0), transpose(transpose(mat4(_GLF_ONE(1.0, injectionSwitch.y), 1.0, abs(0.0), log(1.0), tan(0.0), 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, round(length(normalize(1.0))), 0.0, 1.0, 0.0))))), float(vec3(float(_GLF_IDENTITY(mat4(_GLF_ONE(1.0, injectionSwitch.y), 1.0, abs(0.0), log(1.0), tan(0.0), 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, round(length(normalize(1.0))), 0.0, 1.0, 0.0), transpose(transpose(mat4(_GLF_ONE(1.0, injectionSwitch.y), 1.0, abs(0.0), log(1.0), tan(0.0), 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, round(length(normalize(1.0))), 0.0, 1.0, 0.0))))), 1.0, 0.0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
     barrier();
    }
  }
 else
  {
  }
 subgroupBarrier();
 for(int _injected_loop_counter = (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(3.9, -4.2)) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3(0.0, 0.0, 1.0, abs(1.0), 0.0, cos(0.0), 0.0, 0.0, 1.0)), clamp(float(mat3(0.0, 0.0, 1.0, abs(1.0), 0.0, cos(0.0), 0.0, 0.0, 1.0)), float(mat3(0.0, 0.0, 1.0, abs(1.0), 0.0, cos(0.0), 0.0, 0.0, 1.0)), _GLF_IDENTITY(float(mat3(0.0, 0.0, 1.0, _GLF_IDENTITY(abs(1.0), (abs(1.0)) - 0.0), 0.0, cos(0.0), 0.0, 0.0, 1.0)), min(float(mat3(0.0, 0.0, 1.0, abs(1.0), 0.0, cos(0.0), 0.0, 0.0, 1.0)), float(mat3(_GLF_IDENTITY(0.0, (0.0) - abs(length(vec3(0.0, 0.0, 0.0)))), 0.0, 1.0, abs(1.0), 0.0, cos(0.0), 0.0, 0.0, 1.0))))))), sqrt(1.0))), _GLF_IDENTITY(clamp(vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0))), vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0))), vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0)))), min(clamp(vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0))), vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0))), vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0)))), clamp(vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0))), vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0))), vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0)))))))), clamp(false ? _GLF_FUZZED(vec2(3.9, -4.2)) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3(0.0, 0.0, 1.0, abs(1.0), 0.0, cos(0.0), 0.0, 0.0, 1.0)), clamp(float(mat3(0.0, 0.0, 1.0, abs(1.0), 0.0, cos(0.0), 0.0, 0.0, 1.0)), float(mat3(0.0, 0.0, 1.0, abs(1.0), 0.0, cos(0.0), 0.0, 0.0, 1.0)), _GLF_IDENTITY(float(mat3(0.0, 0.0, 1.0, _GLF_IDENTITY(abs(1.0), (abs(1.0)) - 0.0), 0.0, cos(0.0), 0.0, 0.0, 1.0)), min(float(mat3(0.0, 0.0, 1.0, abs(1.0), 0.0, cos(0.0), 0.0, 0.0, 1.0)), float(mat3(_GLF_IDENTITY(0.0, (0.0) - abs(length(vec3(0.0, 0.0, 0.0)))), 0.0, 1.0, abs(1.0), 0.0, cos(0.0), 0.0, 0.0, 1.0))))))), sqrt(1.0))), _GLF_IDENTITY(clamp(vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0))), vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0))), vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0)))), min(clamp(vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0))), vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0))), vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0)))), clamp(vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0))), vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0))), vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0)))))))), false ? _GLF_FUZZED(vec2(3.9, -4.2)) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3(0.0, 0.0, 1.0, abs(1.0), 0.0, cos(0.0), 0.0, 0.0, 1.0)), clamp(float(mat3(0.0, 0.0, 1.0, abs(1.0), 0.0, cos(0.0), 0.0, 0.0, 1.0)), float(mat3(0.0, 0.0, 1.0, abs(1.0), 0.0, cos(0.0), 0.0, 0.0, 1.0)), _GLF_IDENTITY(float(mat3(0.0, 0.0, 1.0, _GLF_IDENTITY(abs(1.0), (abs(1.0)) - 0.0), 0.0, cos(0.0), 0.0, 0.0, 1.0)), min(float(mat3(0.0, 0.0, 1.0, abs(1.0), 0.0, cos(0.0), 0.0, 0.0, 1.0)), float(mat3(_GLF_IDENTITY(0.0, (0.0) - abs(length(vec3(0.0, 0.0, 0.0)))), 0.0, 1.0, abs(1.0), 0.0, cos(0.0), 0.0, 0.0, 1.0))))))), sqrt(1.0))), _GLF_IDENTITY(clamp(vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0))), vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0))), vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0)))), min(clamp(vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0))), vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0))), vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0)))), clamp(vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0))), vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0))), vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0)))))))), false ? _GLF_FUZZED(vec2(3.9, -4.2)) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3(0.0, 0.0, 1.0, abs(1.0), 0.0, cos(0.0), 0.0, 0.0, 1.0)), clamp(float(mat3(0.0, 0.0, 1.0, abs(1.0), 0.0, cos(0.0), 0.0, 0.0, 1.0)), float(mat3(0.0, 0.0, 1.0, abs(1.0), 0.0, cos(0.0), 0.0, 0.0, 1.0)), _GLF_IDENTITY(float(mat3(0.0, 0.0, 1.0, _GLF_IDENTITY(abs(1.0), (abs(1.0)) - 0.0), 0.0, cos(0.0), 0.0, 0.0, 1.0)), min(float(mat3(0.0, 0.0, 1.0, abs(1.0), 0.0, cos(0.0), 0.0, 0.0, 1.0)), float(mat3(_GLF_IDENTITY(0.0, (0.0) - abs(length(vec3(0.0, 0.0, 0.0)))), 0.0, 1.0, abs(1.0), 0.0, cos(0.0), 0.0, 0.0, 1.0))))))), sqrt(1.0))), _GLF_IDENTITY(clamp(vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0))), vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0))), vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0)))), min(clamp(vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0))), vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0))), vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0)))), clamp(vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0))), vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0))), vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0)))))))))))).y)), (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(3.9, mix(float(3.9), float(_GLF_FUZZED(-76.89)), bool(false))), -4.2)) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-9.3))))), _GLF_IDENTITY(float(mat3(0.0, 0.0, 1.0, abs(1.0), 0.0, cos(0.0), 0.0, 0.0, 1.0)), clamp(float(mat3(0.0, 0.0, 1.0, abs(1.0), 0.0, cos(0.0), 0.0, 0.0, 1.0)), float(mat3(0.0, 0.0, 1.0, abs(1.0), 0.0, cos(0.0), 0.0, 0.0, 1.0)), _GLF_IDENTITY(float(mat3(0.0, 0.0, 1.0, abs(1.0), 0.0, cos(0.0), 0.0, 0.0, 1.0)), min(float(mat3(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, abs(1.0), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-5398.1430) : 0.0)), cos(0.0), 0.0, 0.0, 1.0)), float(mat3(0.0, 0.0, 1.0, abs(1.0), 0.0, cos(0.0), 0.0, 0.0, 1.0))))))), sqrt(1.0))), _GLF_IDENTITY(clamp(vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0))), vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0))), vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0)))), min(clamp(vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0))), vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0))), vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0)))), clamp(vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0))), vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0))), vec2(mat3x2(injectionSwitch, 1.0, 0.0, 0.0, sqrt(1.0)))))))))).y))) >> (0 | 0)) & ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 | (int(4))))) >> _GLF_IDENTITY(int(4), int(4)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) != _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) >> 0)); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(float(injectionSwitch.y)), clamp(float(float(injectionSwitch.y)), _GLF_IDENTITY(float(float(injectionSwitch.y)), (_GLF_IDENTITY(float(float(injectionSwitch.y)), max(float(float(injectionSwitch.y)), float(float(injectionSwitch.y))))) / abs(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(3437.3940)), bool(_GLF_IDENTITY(false, bool(bvec2(false, true)))))))), _GLF_IDENTITY(float(float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-4.0) : injectionSwitch.y)))), max(float(float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-4.0) : injectionSwitch.y)))), _GLF_IDENTITY(float(float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-4.0) : injectionSwitch.y)))), mix(float(_GLF_FUZZED(-4.3)), float(float(float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-4.0) : injectionSwitch.y))))), bool(true)))))))))), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0)), _GLF_IDENTITY(vec2(vec2(vec2(vec3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0)))), vec2(mat4x2(vec2(vec2(vec2(vec3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0)))), _GLF_IDENTITY(dot(vec3(1.0, sqrt(1.0), 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, sqrt(1.0), 1.0), vec3(0.0, 0.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 1.0))))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(vec3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) - 0), 1))]), _GLF_IDENTITY(vec2(_GLF_FUZZED(94.38), _GLF_FUZZED(62.30)), (vec2(_GLF_FUZZED(94.38), _GLF_FUZZED(62.30))) * _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2((vec2(1.0, 1.0))[0], _GLF_IDENTITY((vec2(1.0, 1.0))[1], min((vec2(1.0, 1.0))[1], (vec2(1.0, 1.0))[1]))), vec2(_GLF_FUZZED(-5.6), _GLF_FUZZED(320.703)), bvec2(false, false)))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) / vec2(1.0, 1.0)), 0.0)), vec2(mat3x4(vec2(vec3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), _GLF_IDENTITY(vec2(_GLF_FUZZED(94.38), _GLF_FUZZED(62.30)), (vec2(_GLF_IDENTITY(_GLF_FUZZED(94.38), mix(float(_GLF_FUZZED(4303.3740)), float(_GLF_IDENTITY(_GLF_FUZZED(94.38), mix(float(_GLF_FUZZED(94.38)), float(_GLF_FUZZED(-1.7)), bool(false)))), bool(true))), _GLF_FUZZED(62.30))) * vec2(1.0, 1.0)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) / vec2(1.0, 1.0)), 0.0)), 1.0, 0.0, cos(0.0), 1.0, 0.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0))), _GLF_IDENTITY(vec2(vec2(vec2(vec3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0)))), max(_GLF_IDENTITY(vec2(vec2(vec2(vec3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0)))), mix(vec2((vec2(vec2(vec2(vec3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0)))))[0], (vec2(vec2(vec2(vec3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0)))))[1]), vec2(_GLF_FUZZED(-817.034), _GLF_FUZZED(1.9)), bvec2(false, false))), vec2(vec2(vec2(vec3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0))))))))) / vec2(1.0, 1.0)).y, false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY((true), _GLF_IDENTITY(! (! (_GLF_IDENTITY((true), true && ((true))))), false || (! (! (_GLF_IDENTITY((true), true && ((_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, true)), bool(bool(bool(bvec3(true, false, true))))))))))))))))) && true), true, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))), (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true))))))))) && true)))))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (true) && true), true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, (true) && true), true, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, (true) && true), true, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))) || false)), true))))), false)), (bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0)), _GLF_IDENTITY(vec2(vec2(vec2(vec3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0)))), vec2(mat4x2(vec2(vec2(vec2(vec3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0)))), _GLF_IDENTITY(dot(vec3(1.0, sqrt(1.0), 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, sqrt(1.0), 1.0), vec3(0.0, 0.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 1.0))))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(vec3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) - 0), 1))]), _GLF_IDENTITY(vec2(_GLF_FUZZED(94.38), _GLF_FUZZED(62.30)), (vec2(_GLF_FUZZED(94.38), _GLF_FUZZED(62.30))) * _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2((vec2(1.0, 1.0))[0], _GLF_IDENTITY((vec2(1.0, 1.0))[1], min((vec2(1.0, 1.0))[1], (vec2(1.0, 1.0))[1]))), vec2(_GLF_FUZZED(-5.6), _GLF_FUZZED(320.703)), bvec2(false, false)))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) / vec2(1.0, 1.0)), 0.0)), vec2(mat3x4(vec2(vec3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), _GLF_IDENTITY(vec2(_GLF_FUZZED(94.38), _GLF_FUZZED(62.30)), (vec2(_GLF_IDENTITY(_GLF_FUZZED(94.38), mix(float(_GLF_FUZZED(4303.3740)), float(_GLF_IDENTITY(_GLF_FUZZED(94.38), mix(float(_GLF_FUZZED(94.38)), float(_GLF_FUZZED(-1.7)), bool(false)))), bool(true))), _GLF_FUZZED(62.30))) * vec2(1.0, 1.0)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) / vec2(1.0, 1.0)), 0.0)), 1.0, 0.0, cos(0.0), 1.0, 0.0, 1.0, 1.0, 0.0, sqrt(0.0), 0.0))), _GLF_IDENTITY(vec2(vec2(vec2(vec3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0)))), max(_GLF_IDENTITY(vec2(vec2(vec2(vec3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0)))), mix(vec2((vec2(vec2(vec2(vec3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0)))))[0], (vec2(vec2(vec2(vec3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0)))))[1]), vec2(_GLF_FUZZED(-817.034), _GLF_FUZZED(1.9)), bvec2(false, false))), vec2(vec2(vec2(vec3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0))))))))) / vec2(1.0, 1.0)).y, false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY((true), _GLF_IDENTITY(! (! (_GLF_IDENTITY((true), true && ((true))))), false || (! (! (_GLF_IDENTITY((true), true && ((_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, true)), bool(bool(bool(bvec3(true, false, true))))))))))))))))) && true), true, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))), (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true))))))))) && true)))))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (true) && true), true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, (true) && true), true, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, (true) && true), true, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))) || false)), true))))), false))) && true))))
        return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true))))) || (_GLF_DEAD(false))))), false || _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), ! (! (_GLF_IDENTITY((bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), false || ((bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 do
  {
   atomicStore(checker[virtual_gid], read, 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(4, (4) | 0), (4) | (_GLF_IDENTITY(0 | 0, (0 | 0) | (0 | 0)))));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   do
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true)))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true, false || (true))), bool(bvec2((_GLF_IDENTITY(true, false || (true))), true))) || false, (_GLF_IDENTITY((_GLF_IDENTITY(true, false || (true))) || false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false) || ((_GLF_IDENTITY(true, false || (true))) || false))) || false))) || false, true && (_GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true, false || (true))), bool(bvec2((_GLF_IDENTITY(true, false || (true))), true))) || false, (_GLF_IDENTITY((_GLF_IDENTITY(true, false || (true))) || false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false) || ((_GLF_IDENTITY(true, false || (true))) || false))) || false))) || false, ! (! ((_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true, false || (true))), bool(bvec2((_GLF_IDENTITY(true, false || (true))), true))) || false, (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true, false || (true))) || false, ((_GLF_IDENTITY(true, false || (true))) || false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false) || ((_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (true))) || false))) || false))) || false))))))))
      {
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter ++, 0 | (_injected_loop_counter ++))), (~ (_GLF_IDENTITY(_injected_loop_counter ++, 0 | (_injected_loop_counter ++)))) << (0 | 0)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
                      {
                      }
                     else
                      {
                       return;
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                         barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
                          barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false))))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(((injectionSwitch) * mat2(1.0))[0], _GLF_FUZZED(-5.9)), vec2(_GLF_FUZZED(-5.7), ((injectionSwitch) * mat2(1.0))[1]), bvec2(false, true))), (injectionSwitch) * mat2(1.0)))).y))))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))) && true))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true && (false), ! (_GLF_IDENTITY(! (true && (false)), ! (! (! (true && (false))))))), (_GLF_IDENTITY(_GLF_IDENTITY(true && (false), ! (_GLF_IDENTITY(! (true && (false)), ! (! (! (true && (false))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true && (false), ! (_GLF_IDENTITY(! (true && (false)), ! (! (! (true && (false)))))))), (! (_GLF_IDENTITY(true && (false), ! (_GLF_IDENTITY(! (true && (false)), ! (! (! (true && (false))))))))) || false)))) && true)), true, false))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, true && (false)), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, true && (false)), true, false)))))))), ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))) || false), ! (! (false))), true && (false)), true, false))))))))) || false)))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY((((1 | 1) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) / 1), int(7))), ~ (_GLF_IDENTITY(~ ((((1 | 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(7), max(int(7), int(7))), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 ^ (_GLF_IDENTITY(int(7), 1 * (int(7)))))))), clamp(~ ((((1 | 1) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, clamp(_GLF_IDENTITY(7, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (7)), 7, _GLF_IDENTITY(7, min(7, 7)))))))), ~ ((((1 | 1) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))), ~ ((((1 | 1) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), true && (bool(bvec2(_GLF_DEAD(false), false))))))
                barrier();
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
