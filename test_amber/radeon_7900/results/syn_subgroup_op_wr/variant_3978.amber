#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, true, true)))))
        {
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(6327.6812))) > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
        return;
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-75.47)), float(injectionSwitch.x), bool(true))), injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
          break;
         barrier();
        }
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))), false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))))))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bool((false)))) || false), false || (_GLF_IDENTITY(false, (false) || false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) && true)))
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(7.2)), vec2(_GLF_FUZZED(-1.2), (injectionSwitch)[1]), bvec2(false, true))).y))))));
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(583.520)), bool(false))) > injectionSwitch.y))))
              return;
             barrier();
            }
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, true && (false)))), false || (bool(bool(_GLF_IDENTITY(false, true && (false)))))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(767.445)), bool(false))) > injectionSwitch.y))))
                  break;
                 break;
                }
               return;
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, (false) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bvec3(bool(bvec3(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, (false) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true, false)))), false || (false))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
            {
            }
           else
            {
             return;
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
      barrier();
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), ! (! (bool(bvec2(_GLF_DEAD(false), false))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (_GLF_IDENTITY(false, true && (false))))) && true), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            return;
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             continue;
            }
           if(_GLF_DEAD(false))
            break;
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              barrier();
             continue;
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y), false)))))))))
          {
           for(int _injected_loop_counter = (-63066 & (0 & -57036)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec2(bool(bool(false)), true)))))))))
                  barrier();
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), ! (! (_GLF_IDENTITY((true), false || ((true)))))))) && (false))))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, true, true))))
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   return;
                  }
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  return;
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  return;
                 continue;
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              barrier();
             for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -65359)); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((false), ! (! ((false))))), bool(bool(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((false), ! (! ((false)))))))), (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 else
                  {
                   return;
                  }
                }
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
          }
         return;
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(42.82, _GLF_IDENTITY(-5.7, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? -5.7 : _GLF_FUZZED(1313.0968))))) : injectionSwitch)).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) && true)) || false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false, _GLF_IDENTITY(bool(bvec4((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false, false, false, true)), (bool(bvec4((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false, false, false, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true, false)), true && (bool(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, true), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), false, true), false)))), bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(length(-30.19)) : injectionSwitch.y))), false, true), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), false, true), false)))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(length(-30.19)) : injectionSwitch.y))), false, true), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), false, true), false)))), ! (! (bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(length(-30.19)) : injectionSwitch.y))), false, true), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), false, true), false)))))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, false))))))))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), 0 ^ (int(2)))) << 0))), int(2))), 1 * (((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), ~ (~ (_GLF_IDENTITY(int(2), int(2)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), bool(bool(bool(bvec4(false, true, true, true))))))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false), true)))))) || false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                continue;
              }
             return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             break;
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bool(! (false)))), bool(bvec3(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))) && true)), true, false)))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
       barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false, true), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false, true)))))))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), max(_GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, (1) - 0)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec4(! (injectionSwitch.x > injectionSwitch.y), false, true, true)))))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) + 0)) ^ 0)])), injectionSwitch)).y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), true, false, false)))))
      barrier();
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true)));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), _GLF_IDENTITY(int(6), (true ? int(6) : _GLF_FUZZED(92067))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, 0 + (1))))) & int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-404.426) : injectionSwitch.y))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         continue;
        }
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (false)) || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, true, true, false)), false || (_GLF_IDENTITY(bool(bvec4(false, true, true, false)), _GLF_IDENTITY(bool(bvec2(bool(bvec4(false, true, true, false)), false)), bool(bool(bool(bvec2(bool(bvec4(false, true, true, false)), false)))))))), ! (! (bool(bvec4(false, true, true, false)))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), ! (! (bool(bvec4(false, true, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))), false))))))) && true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, true, true, false)), false || (_GLF_IDENTITY(bool(bvec4(false, true, true, false)), _GLF_IDENTITY(bool(bvec2(bool(bvec4(false, true, true, false)), false)), bool(bool(bool(bvec2(bool(bvec4(false, true, true, false)), false)))))))), ! (! (bool(bvec4(false, true, true, false)))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), ! (! (bool(bvec4(false, true, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))), false))))))) && true)), false || ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, true, true, false)), false || (_GLF_IDENTITY(bool(bvec4(false, true, true, false)), _GLF_IDENTITY(bool(bvec2(bool(bvec4(false, true, true, false)), false)), bool(bool(bool(bvec2(bool(bvec4(false, true, true, false)), false)))))))), ! (! (bool(bvec4(false, true, true, false)))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), ! (! (bool(bvec4(false, true, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))), false))))))) && true))))), bool(bvec2(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, true, true, false)), false || (_GLF_IDENTITY(bool(bvec4(false, true, true, false)), _GLF_IDENTITY(bool(bvec2(bool(bvec4(false, true, true, false)), false)), bool(bool(bool(bvec2(bool(bvec4(false, true, true, false)), false)))))))), ! (! (bool(bvec4(false, true, true, false)))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), ! (! (bool(bvec4(false, true, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))), false))))))) && true)), false || ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, true, true, false)), false || (_GLF_IDENTITY(bool(bvec4(false, true, true, false)), _GLF_IDENTITY(bool(bvec2(bool(bvec4(false, true, true, false)), false)), bool(bool(bool(bvec2(bool(bvec4(false, true, true, false)), false)))))))), ! (! (bool(bvec4(false, true, true, false)))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), ! (! (bool(bvec4(false, true, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))), false))))))) && true))))), true))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && _GLF_IDENTITY((_GLF_DEAD(false)), false || ((_GLF_DEAD(false))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
    {
    }
   else
    {
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_IDENTITY(false ? _GLF_FUZZED(-38775) : 0, min(false ? _GLF_FUZZED(-38775) : 0, _GLF_IDENTITY(false ? _GLF_FUZZED(-38775) : 0, int(ivec3(false ? _GLF_FUZZED(-38775) : 0, 1, 1)))))))); _injected_loop_counter --)
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, int(int(0))) << _GLF_IDENTITY(int(0), int(0)))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + 0)) + 0))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false), (injectionSwitch.x > injectionSwitch.y))))
              return;
             continue;
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) || false), ! (! (_GLF_IDENTITY(false, (false) || false)))))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bool(_GLF_IDENTITY(false, ! (! (false))))))) || false)))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false))), ! (! (bool(bool(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (injectionSwitch)))).x > injectionSwitch.y))))
    return;
  }
 uint subgroup_base = _GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), uint(uvec3(~ (subgroup_id), 0u, 0u))))) * subgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))))))))) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-5.2)), bool(false)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       continue;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec3(bvec3(_GLF_DEAD(false), true, false))))), false || (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec3(bvec3(_GLF_DEAD(false), true, false)))))))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), float(_GLF_IDENTITY(mat4x3((injectionSwitch.x), round(length(normalize(exp(vec4(0.0, 0.0, 0.0, 0.0))))), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 1.0)), 0.0, 0.0, 1.0), (mat4x3((injectionSwitch.x), round(length(normalize(exp(vec4(0.0, 0.0, 0.0, 0.0))))), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(-45.39)), bool(false)))), 0.0, 1.0, 0.0, 1.0)), 0.0, 0.0, 1.0)) * mat4(1.0)))) / 1.0) > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
        return;
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, _GLF_IDENTITY(~ (~ (workgroup_base + subgroup_base)), _GLF_IDENTITY(uint(uvec3(~ (~ (workgroup_base + subgroup_base)), 1u, 1u)), max(uint(uvec3(~ (~ (workgroup_base + subgroup_base)), 1u, 1u)), _GLF_IDENTITY(uint(uvec3(~ _GLF_IDENTITY((~ (workgroup_base + subgroup_base)), min((~ (workgroup_base + subgroup_base)), (~ (workgroup_base + subgroup_base)))), 1u, 1u)), max(uint(_GLF_IDENTITY(uvec3(~ (~ (workgroup_base + subgroup_base)), 1u, 1u), (_GLF_IDENTITY(uvec3(~ (~ (workgroup_base + subgroup_base)), 1u, 1u), clamp(uvec3(~ (~ (workgroup_base + subgroup_base)), 1u, 1u), uvec3(~ (~ (workgroup_base + subgroup_base)), 1u, 1u), uvec3(~ (~ (workgroup_base + subgroup_base)), 1u, 1u)))) / uvec3(1u, 1u, 1u))), uint(uvec3(~ (~ (workgroup_base + subgroup_base)), 1u, 1u)))))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base)))), 0u ^ (~ (_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base))))))) | (~ (_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base)))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base)))), (~ (_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base))))) | (~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base))), (_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base)))) ^ 0u))))) | 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, _GLF_IDENTITY(~ (~ (workgroup_base + subgroup_base)), _GLF_IDENTITY(uint(uvec3(~ (~ (workgroup_base + subgroup_base)), 1u, 1u)), max(uint(uvec3(~ (~ (workgroup_base + subgroup_base)), 1u, 1u)), _GLF_IDENTITY(uint(uvec3(~ (~ (workgroup_base + subgroup_base)), 1u, 1u)), max(uint(uvec3(~ (~ (workgroup_base + subgroup_base)), 1u, 1u)), uint(uvec3(~ (~ (workgroup_base + subgroup_base)), 1u, 1u)))))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base)))), min((_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base)))), (_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base)))))), (~ (_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base + subgroup_base), (~ (workgroup_base + subgroup_base)) ^ 0u))))) | (~ (_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base)))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base)))), (~ (_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base))))) | (~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base))), clamp(_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base))), _GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base))), _GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base))))))))) | 0u))), (1u ^ 1u) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, _GLF_IDENTITY(~ (~ (workgroup_base + subgroup_base)), _GLF_IDENTITY(uint(uvec3(~ (~ (workgroup_base + subgroup_base)), 1u, 1u)), max(uint(uvec3(~ (~ (workgroup_base + subgroup_base)), 1u, 1u)), _GLF_IDENTITY(uint(uvec3(~ (~ (workgroup_base + subgroup_base)), 1u, 1u)), max(uint(uvec3(~ (~ (workgroup_base + subgroup_base)), 1u, 1u)), uint(uvec3(~ (~ (workgroup_base + subgroup_base)), 1u, 1u)))))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base)))), (~ (_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base))))) | (~ (_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base)))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + _GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(num_workgroup) : subgroup_base)))))), (~ (_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base))))) | (~ (_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base))))))) | 0u)))))) / 1u), _GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base))))) + ((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : subgroup_size)), 0u | (subgroup_size)));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), bool(bool(! (_GLF_IDENTITY(false, false || (false))))))))), true && (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), bool(bool(! (_GLF_IDENTITY(false, false || (false)))))))))))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec3(bool(_GLF_DEAD(false)), true, false)))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec3(bool(_GLF_DEAD(false)), true, false)))))), bool(bvec4(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec3(bool(_GLF_DEAD(false)), true, false)))))), false, true, false)))) && true))))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
  return;
 uint read = 0;
 atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(4, (4) ^ 0), 64, 4);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
    }
   do
    {
     do
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1))); _injected_loop_counter --)
        {
         do
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)))), min(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y)), min(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-3.9)), float(injectionSwitch.y), bool(true))))), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) << 0)))), (int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))), float(_GLF_FUZZED(-661.132)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y))) << 0, _GLF_IDENTITY(int(int((int(_GLF_ONE(1.0, injectionSwitch.y))) << 0)), (int(int((int(_GLF_ONE(1.0, injectionSwitch.y))) << 0))) >> _GLF_IDENTITY(0, min(0, 0))))))))) | (int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), (_GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), float(mat2x3(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), 0.0, 1.0, 0.0, 1.0, 0.0)))) + 0.0)))), (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), (_GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), float(mat2x3(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), 0.0, 1.0, 0.0, 1.0, 0.0)))) + 0.0))))) + int(_GLF_ZERO(0.0, injectionSwitch.x))), (int(_GLF_ONE(1.0, injectionSwitch.y))) << 0))))))))), max(~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(int(int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (1.0) - 0.0)), float(_GLF_FUZZED((81.33 / -75.90))), bool(false))), injectionSwitch.y)))))), ~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))), int(int(int(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-1.9) : 0.0)), 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(23.14) : 0.0)), 0.0))), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0))), (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0, 1.0, 0.0)) * mat3(1.0)))) / 1.0), 0.0 + (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * _GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), _GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, (1.0) * 1.0))), 1.0)))), (true ? mat3(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), _GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, (1.0) * 1.0))), 1.0)))) : _GLF_FUZZED(mat3(56.26, -266.541, 6.8, -1.5, 19.09, -20.66, 3.8, -2.6, 11.22)))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(164.313) : sin(0.0))), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0))), (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0)))) / 1.0), 0.0 + (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), float(_GLF_FUZZED(8.8)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), (mat3x4(1.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0))), (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) / determinant(mat2(1.0, 0.0, abs(0.0), 1.0))), _GLF_IDENTITY(0.0, (0.0) - sin(0.0)))), 0.0, log(1.0), 0.0, sin(_GLF_IDENTITY(0.0, float(mat2x4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0)))), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0)))) / 1.0), 0.0 + (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(dot(vec2(length(vec3(0.0, 0.0, 0.0)), 1.0), vec2(1.0, 0.0)), dot(vec2(length(vec3(0.0, 0.0, 0.0)), 1.0), vec2(1.0, 0.0)))), log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0), (mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))))) * 1.0), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0))), (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec3(1.0, 1.0, 1.0)), (_GLF_IDENTITY(float(vec3(1.0, 1.0, 1.0)), clamp(float(vec3(1.0, 1.0, 1.0)), float(vec3(1.0, 1.0, 1.0)), float(vec3(1.0, 1.0, 1.0))))) / 1.0)), 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 0.0)) * mat3(1.0)))) / 1.0), 0.0 + (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))))), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-965.999))), 0.0)) * mat3(1.0))), (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) - sin(0.0)))), 0.0, log(1.0), 0.0, sin(_GLF_IDENTITY(0.0, float(mat2x4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0)))), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0)))) / 1.0), 0.0 + (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(dot(vec2(length(vec3(0.0, 0.0, 0.0)), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-7232.2632)), bool(false)))), vec2(1.0, 0.0)), dot(vec2(length(vec3(0.0, 0.0, 0.0)), 1.0), vec2(1.0, 0.0)))), log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), (mat3x4(1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0))))))))) * 1.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, _GLF_IDENTITY(sin(0.0), (sin(0.0)) + sqrt(0.0)), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0))), (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, _GLF_IDENTITY(log(1.0), mix(float(log(1.0)), float(_GLF_FUZZED(-1088.0974)), bool(false))), 0.0, sin(0.0), 1.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0))))) * 1.0), 0.0, 1.0, 0.0)) * mat3(1.0)))) / 1.0), _GLF_IDENTITY(0.0 + (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0))))))), min(0.0 + (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0))))))), _GLF_IDENTITY(0.0 + (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0))))))), (0.0 + (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0)))))))) - 0.0)))), (_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((- 93.97))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) * mat3(1.0))), (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(791.460)), float(0.0), bool(true)))) / 1.0), 0.0))), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) - sin(0.0)))), 0.0, log(1.0), 0.0, sin(_GLF_IDENTITY(0.0, float(mat2x4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0)))), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0)))) / 1.0), 0.0 + (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(dot(vec2(length(vec3(0.0, 0.0, 0.0)), 1.0), vec2(1.0, 0.0)), dot(vec2(length(vec3(0.0, 0.0, 0.0)), 1.0), vec2(1.0, 0.0)))), float(mat2(_GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(dot(vec2(length(vec3(0.0, 0.0, 0.0)), 1.0), vec2(1.0, 0.0)), dot(vec2(length(vec3(0.0, 0.0, 0.0)), 1.0), vec2(1.0, 0.0)))), 0.0, 1.0, 1.0))), log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-8.9)), float(0.0), bool(true))), 1.0, 0.0)) * mat3(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0))))))))) * 1.0)))), _GLF_IDENTITY(float(vec4((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(164.313) : sin(0.0))), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0))), (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0)))) / 1.0), 0.0 + (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), float(_GLF_FUZZED(8.8)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), (mat3x4(1.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0))), (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) / determinant(mat2(1.0, 0.0, abs(0.0), 1.0))), _GLF_IDENTITY(0.0, (0.0) - sin(0.0)))), 0.0, log(1.0), 0.0, sin(_GLF_IDENTITY(0.0, float(mat2x4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0)))), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0)))) / 1.0), 0.0 + (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(dot(vec2(length(vec3(0.0, 0.0, 0.0)), 1.0), vec2(1.0, 0.0)), dot(vec2(length(vec3(0.0, 0.0, 0.0)), 1.0), vec2(1.0, 0.0)))), log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0), (mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))))) * 1.0), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0))), (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec3(1.0, 1.0, 1.0)), (_GLF_IDENTITY(float(vec3(1.0, 1.0, 1.0)), clamp(float(vec3(1.0, 1.0, 1.0)), float(vec3(1.0, 1.0, 1.0)), float(vec3(1.0, 1.0, 1.0))))) / 1.0)), 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 0.0)) * mat3(1.0)))) / 1.0), 0.0 + (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))))), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-965.999))), 0.0)) * mat3(1.0))), (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) - sin(0.0)))), 0.0, log(1.0), 0.0, sin(_GLF_IDENTITY(0.0, float(mat2x4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0)))), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0)))) / 1.0), 0.0 + (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(dot(vec2(length(vec3(0.0, 0.0, 0.0)), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-7232.2632)), bool(false)))), vec2(1.0, 0.0)), dot(vec2(length(vec3(0.0, 0.0, 0.0)), 1.0), vec2(1.0, 0.0)))), log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), (mat3x4(1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0))))))))) * 1.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, _GLF_IDENTITY(sin(0.0), (sin(0.0)) + sqrt(0.0)), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0))), (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, _GLF_IDENTITY(log(1.0), mix(float(log(1.0)), float(_GLF_FUZZED(-1088.0974)), bool(false))), 0.0, sin(0.0), 1.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0))))) * 1.0), 0.0, 1.0, 0.0)) * mat3(1.0)))) / 1.0), _GLF_IDENTITY(0.0 + (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0))))))), min(0.0 + (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0))))))), _GLF_IDENTITY(0.0 + (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0))))))), (0.0 + (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0)))))))) - 0.0)))), (_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((- 93.97))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) * mat3(1.0))), (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(791.460)), float(0.0), bool(true)))) / 1.0), 0.0))), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) - sin(0.0)))), 0.0, log(1.0), 0.0, sin(_GLF_IDENTITY(0.0, float(mat2x4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0)))), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0)))) / 1.0), 0.0 + (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(dot(vec2(length(vec3(0.0, 0.0, 0.0)), 1.0), vec2(1.0, 0.0)), dot(vec2(length(vec3(0.0, 0.0, 0.0)), 1.0), vec2(1.0, 0.0)))), float(mat2(_GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(dot(vec2(length(vec3(0.0, 0.0, 0.0)), 1.0), vec2(1.0, 0.0)), dot(vec2(length(vec3(0.0, 0.0, 0.0)), 1.0), vec2(1.0, 0.0)))), 0.0, 1.0, 1.0))), log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-8.9)), float(0.0), bool(true))), 1.0, 0.0)) * mat3(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0))))))))) * 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0)), (float(vec4((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(164.313) : sin(0.0))), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0))), (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0)))) / 1.0), 0.0 + (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), float(_GLF_FUZZED(8.8)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), (mat3x4(1.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0))), (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) / determinant(mat2(1.0, 0.0, abs(0.0), 1.0))), _GLF_IDENTITY(0.0, (0.0) - sin(0.0)))), 0.0, log(1.0), 0.0, sin(_GLF_IDENTITY(0.0, float(mat2x4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0)))), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0)))) / 1.0), 0.0 + (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(dot(vec2(length(vec3(0.0, 0.0, 0.0)), 1.0), vec2(1.0, 0.0)), dot(vec2(length(vec3(0.0, 0.0, 0.0)), 1.0), vec2(1.0, 0.0)))), log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0), (mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))))) * 1.0), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0))), (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec3(1.0, 1.0, 1.0)), (_GLF_IDENTITY(float(vec3(1.0, 1.0, 1.0)), clamp(float(vec3(1.0, 1.0, 1.0)), float(vec3(1.0, 1.0, 1.0)), float(vec3(1.0, 1.0, 1.0))))) / 1.0)), 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 0.0)) * mat3(1.0)))) / 1.0), 0.0 + (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))))), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-965.999))), 0.0)) * mat3(1.0))), (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) - sin(0.0)))), 0.0, log(1.0), 0.0, sin(_GLF_IDENTITY(0.0, float(mat2x4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0)))), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0)))) / 1.0), 0.0 + (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(dot(vec2(length(vec3(0.0, 0.0, 0.0)), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-7232.2632)), bool(false)))), vec2(1.0, 0.0)), dot(vec2(length(vec3(0.0, 0.0, 0.0)), 1.0), vec2(1.0, 0.0)))), log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), (mat3x4(1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0))))))))) * 1.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, _GLF_IDENTITY(sin(0.0), (sin(0.0)) + sqrt(0.0)), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0))), (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, _GLF_IDENTITY(log(1.0), mix(float(log(1.0)), float(_GLF_FUZZED(-1088.0974)), bool(false))), 0.0, sin(0.0), 1.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0))))) * 1.0), 0.0, 1.0, 0.0)) * mat3(1.0)))) / 1.0), _GLF_IDENTITY(0.0 + (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0))))))), min(0.0 + (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0))))))), _GLF_IDENTITY(0.0 + (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0))))))), (0.0 + (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0)))))))) - 0.0)))), (_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((- 93.97))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) * mat3(1.0))), (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(791.460)), float(0.0), bool(true)))) / 1.0), 0.0))), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) - sin(0.0)))), 0.0, log(1.0), 0.0, sin(_GLF_IDENTITY(0.0, float(mat2x4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0)))), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0)))) / 1.0), 0.0 + (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(dot(vec2(length(vec3(0.0, 0.0, 0.0)), 1.0), vec2(1.0, 0.0)), dot(vec2(length(vec3(0.0, 0.0, 0.0)), 1.0), vec2(1.0, 0.0)))), float(mat2(_GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(dot(vec2(length(vec3(0.0, 0.0, 0.0)), 1.0), vec2(1.0, 0.0)), dot(vec2(length(vec3(0.0, 0.0, 0.0)), 1.0), vec2(1.0, 0.0)))), 0.0, 1.0, 1.0))), log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-8.9)), float(0.0), bool(true))), 1.0, 0.0)) * mat3(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0))))))))) * 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0))) - 0.0)) * 1.0)), injectionSwitch.y)))))))))), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, float(mat2x4(1.0, 0.0, 0.0, 1.0, abs(1.0), length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0))), injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) << 0)))), (int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) >> (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))))) << 0))))) | (int(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)) : _GLF_FUZZED(vec2(-4075.9967, 5197.9134)))).y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), (int(_GLF_ONE(1.0, injectionSwitch.y))) << 0))))))))), max(~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(int(int(_GLF_ONE(1.0, injectionSwitch.y)))))), ~ (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))), min(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))), _GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), (false ? _GLF_FUZZED(7.7) : _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))))))), int(int(int(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(float(35061u))), bool(false))), 0.0, 1.0, 0.0), (mat3x4(1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-958.304) : 0.0)), 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0))), _GLF_IDENTITY((float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2x4(1.0, 1.0, 1.0, abs(0.0), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, 0.0), (false ? _GLF_FUZZED(mat2x4(-5.5, -5.3, -9.6, -397.898, 3.4, 20.92, -68.53, 527.656)) : mat2x4(1.0, 1.0, 1.0, abs(0.0), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0, 0.0)))))), 0.0, sin(0.0), _GLF_IDENTITY(1.0, float(vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(4.1) : 1.0)), 1.0))), 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0)))), ((float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, sin(0.0), abs(1.0), abs(1.0), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), float(mat2(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0)))))), mix(float(float(mat4x3(1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, sin(0.0), abs(1.0), abs(1.0), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))))), float(_GLF_FUZZED(-5637.9990)), bool(false))))), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0))))) - 0.0) / 1.0), 0.0 + (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), (mat3x4(1.0, 0.0, 0.0, log(1.0), _GLF_IDENTITY(0.0, 0.0 + (0.0)), sin(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-4.4)), float(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(9.3, min(9.3, 9.3)))), bool(false))), 0.0, 0.0))), bool(true)))) - 0.0)), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * _GLF_IDENTITY(mat3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0))), (true ? _GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0))) : _GLF_FUZZED(-6.0)))), (mat3(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.6)), float(0.0), bool(true)))) / 1.0), 0.0, abs(1.0), 1.0, 1.0))))) * mat3(1.0)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(5.1)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), 0.0, sin(0.0), 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(4.7) : 0.0)))), 1.0, 0.0)) * mat3(1.0))), (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0)))) / 1.0), max(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0))), (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0)))) / 1.0), min(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0))), (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, float(mat4x3(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-9973.7778)), float(0.0), bool(true))), 0.0, 0.0, 0.0, 1.0, 0.0, sin(log(1.0)), sqrt(1.0), _GLF_IDENTITY(1.0, float(mat2x3(1.0, 1.0, 0.0, 1.0, 1.0, 1.0))), 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0))))))))) * mat3(1.0)))) / 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(_GLF_IDENTITY(1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0))) + (_GLF_IDENTITY(1.0, min(1.0, 1.0))))), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0))), (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0)))) / 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0))), _GLF_IDENTITY((float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0)))), float(mat4((float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0)))), 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), cos(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, sin(0.0), 1.0, 1.0))) / 1.0), max(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0))), (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(_GLF_IDENTITY(0.0, min(0.0, 0.0))), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0)))) / 1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0))), (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-789.961))), 0.0, 1.0, 0.0)) * mat3(1.0)))) / 1.0))))), 0.0 + (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(_GLF_IDENTITY(1.0, float(vec2(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-502.686))), 0.0)))), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-935.937)), bool(false))), 0.0, 0.0, 1.0, 0.0)) * mat3(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), abs(1.0), 1.0, 1.0)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, _GLF_IDENTITY(log(1.0), float(vec2(log(1.0), 0.0))), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 1.0), clamp(_GLF_IDENTITY(vec3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 1.0), (false ? _GLF_FUZZED(vec3(8.2, 43.77, 86.24)) : vec3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 1.0))), _GLF_IDENTITY(vec3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 1.0), mix(vec3(_GLF_FUZZED(4.6), (vec3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 1.0))[1], _GLF_FUZZED(343.681)), vec3((vec3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 1.0))[0], _GLF_FUZZED(-68.96), (vec3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 1.0))[2]), bvec3(true, false, true))), vec3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 1.0))))))) * mat3(1.0))), (float(_GLF_IDENTITY(mat3x4(1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) - sin(0.0)))), 0.0, log(1.0), 0.0, sin(_GLF_IDENTITY(0.0, float(mat2x4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0)))), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0)))) / 1.0), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, _GLF_IDENTITY(log(1.0), float(vec2(log(1.0), 0.0))), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 1.0), clamp(_GLF_IDENTITY(vec3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 1.0), (false ? _GLF_FUZZED(vec3(8.2, 43.77, 86.24)) : vec3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 1.0))), _GLF_IDENTITY(vec3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 1.0), mix(vec3(_GLF_FUZZED(4.6), (vec3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 1.0))[1], _GLF_FUZZED(343.681)), vec3((vec3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 1.0))[0], _GLF_FUZZED(-68.96), (vec3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 1.0))[2]), bvec3(true, false, true))), vec3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 1.0))))))) * mat3(1.0))), (float(_GLF_IDENTITY(mat3x4(1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) - sin(0.0)))), 0.0, log(1.0), 0.0, sin(_GLF_IDENTITY(0.0, float(mat2x4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0)))), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0)))) / 1.0), (_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, _GLF_IDENTITY(log(1.0), float(vec2(log(1.0), 0.0))), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 1.0), clamp(_GLF_IDENTITY(vec3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 1.0), (false ? _GLF_FUZZED(vec3(8.2, 43.77, 86.24)) : vec3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 1.0))), _GLF_IDENTITY(vec3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 1.0), mix(vec3(_GLF_FUZZED(4.6), (vec3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 1.0))[1], _GLF_FUZZED(343.681)), vec3((vec3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 1.0))[0], _GLF_FUZZED(-68.96), (vec3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 1.0))[2]), bvec3(true, false, true))), vec3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 1.0))))))) * mat3(1.0))), (float(_GLF_IDENTITY(mat3x4(1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) - sin(0.0)))), 0.0, log(1.0), 0.0, sin(_GLF_IDENTITY(0.0, float(mat2x4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0)))), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0)))) / 1.0)) - 0.0)), float(_GLF_FUZZED(5.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0 + (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(dot(vec2(length(vec3(0.0, 0.0, 0.0)), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), vec2(1.0, 0.0)), dot(vec2(length(vec3(0.0, 0.0, 0.0)), 1.0), vec2(1.0, 0.0)))), min(_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0) - _GLF_IDENTITY(dot(vec2(length(vec3(0.0, 0.0, 0.0)), 1.0), vec2(1.0, 0.0)), dot(vec2(length(vec3(0.0, 0.0, 0.0)), 1.0), vec2(1.0, 0.0))), (false ? _GLF_FUZZED(-6.1) : (0.0) - _GLF_IDENTITY(dot(vec2(length(vec3(0.0, 0.0, 0.0)), 1.0), vec2(1.0, 0.0)), dot(_GLF_IDENTITY(vec2(length(vec3(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0, 0.0)), 1.0), (false ? _GLF_FUZZED(vec2(0.6, -9321.1239)) : vec2(length(vec3(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0, 0.0)), 1.0))), vec2(1.0, 0.0)))))), _GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(dot(vec2(length(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), (vec3(0.0, 0.0, 0.0)) * mat3(1.0))), 1.0), vec2(1.0, 0.0)), dot(vec2(length(vec3(0.0, 0.0, 0.0)), 1.0), vec2(1.0, 0.0)))))), log(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(exp(-8.3)) : 1.0))), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0))), 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, 0.0, 0.0, log(_GLF_IDENTITY(1.0, float(mat4(1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0)))), 0.0, sin(0.0), 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x4(1.0, 0.0, tan(sqrt(0.0)), 0.0, 1.0, 1.0, 1.0, 1.0)), max(float(mat2x4(1.0, 0.0, tan(sqrt(0.0)), 0.0, 1.0, 1.0, 1.0, 1.0)), float(mat2x4(1.0, 0.0, tan(sqrt(0.0)), 0.0, 1.0, 1.0, 1.0, 1.0))))), 0.0, 0.0, 1.0, 0.0)) * mat3(1.0))), (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0), (mat3x4(1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) - sin(0.0)))), 0.0, log(1.0), 0.0, sin(_GLF_IDENTITY(0.0, float(mat2x4(_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0), 0.0 + ((0.0))) / 1.0), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(vec3(-432.237, -25.34, 5.4).s)), bool(false))), 1.0 * (0.0)), 0.0)), _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0), (mat4x2(0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0)) * mat4(1.0)))), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))), 1.0, 0.0, 1.0, 1.0, 0.0)))), 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(88.02))), 1.0)), 0.0)) * mat3(1.0)))) / 1.0), 0.0 + (float(_GLF_IDENTITY(mat3x4(1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(dot(vec2(length(vec3(0.0, 0.0, 0.0)), 1.0), vec2(1.0, _GLF_IDENTITY(0.0, (0.0) * _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))), dot(vec2(length(vec3(0.0, 0.0, 0.0)), 1.0), vec2(_GLF_IDENTITY(1.0, (1.0) + _GLF_IDENTITY(0.0, float(mat2x3(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0)))), 0.0)))), log(1.0), 0.0, sin(0.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 0.0, _GLF_IDENTITY(0.0, float(mat4x2(_GLF_IDENTITY(0.0, (0.0) / _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec2(1.0, 0.0)), max(_GLF_IDENTITY(float(vec2(1.0, 0.0)), mix(float(float(vec2(1.0, 0.0))), float(_GLF_FUZZED(-13.37)), bool(false))), float(vec2(1.0, 0.0)))))), 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), _GLF_IDENTITY(vec4(abs(1.0), 0.0, 1.0, 0.0), mix(vec4((vec4(abs(1.0), 0.0, 1.0, 0.0))[0], (vec4(abs(1.0), 0.0, 1.0, 0.0))[1], _GLF_FUZZED(-73.42), (vec4(abs(1.0), 0.0, 1.0, 0.0))[3]), vec4(_GLF_FUZZED((_GLF_IDENTITY(true, (true) && true) ? (-9283.9265 + 2.2) : 2.8)), _GLF_FUZZED(-86.68), (vec4(abs(1.0), 0.0, 1.0, 0.0))[2], _GLF_FUZZED(-596.510)), bvec4(false, false, true, false)))), dot(vec4(0.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 0.0, 1.0), vec4(abs(1.0), 0.0, 1.0, 0.0))), 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))), 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), (mat3x4(1.0, 0.0, 0.0, log(1.0), 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)) * mat3(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, abs(1.0), 1.0, 1.0))))))))) / 1.0)) * 1.0)) * 1.0)), injectionSwitch.y))))))))))) / 1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, true && (_GLF_IDENTITY(_injected_loop_counter != 0, (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != 0) && true)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               barrier();
              }
             if((subgroup_local_id % 2) == 0)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 subgroupAll(false);
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_injected_loop_counter, 0), max(ivec2(_injected_loop_counter, 0), ivec2(_injected_loop_counter, 0)))), min(int(ivec2(_injected_loop_counter, 0)), int(ivec2(_injected_loop_counter, 0))))) != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_DEAD(false))
                    break;
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, true))))))
                    barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               read = atomicLoad(buf[virtual_gid], 4, 64, 2);
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) || _GLF_IDENTITY(false, (false) || false)), bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))) && true), true, false))))))
                {
                }
               else
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   subgroupAll(false);
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)))))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   break;
                  }
                }
               do
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, true && (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), vec2(0.0, 0.0) + (injectionSwitch)).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), vec2(0.0, 0.0) + (injectionSwitch)).y) / 1.0)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, true && (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), vec2(0.0, 0.0) + (injectionSwitch)).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), vec2(0.0, 0.0) + (injectionSwitch)).y) / 1.0)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, true && (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), vec2(0.0, 0.0) + (injectionSwitch)).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), vec2(0.0, 0.0) + (injectionSwitch)).y) / 1.0))))))))))) && true)))));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                break;
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
                    return;
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec2(bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true)), false || (bool(bvec2(bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true))))))))
                  continue;
                 for(int _injected_loop_counter = (1 & _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_IDENTITY(ivec3(int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1), max(ivec3(int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1), ivec3(int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
                  {
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
                    break;
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                barrier();
               read = _GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], ~ (~ (buf[virtual_gid]))))), 4, 64, 2), (_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, ~ (~ (64))), 2), (atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, ~ (~ (4))), 64, _GLF_IDENTITY(2, (2) ^ 0))) << 0u)) / 1u);
              }
             if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 continue;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  return;
                }
               continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), int(ivec4(int(5), 1, 1, (0 ^ 0))))) | (int(5))))), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5))))), ((0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(_GLF_IDENTITY(5, min(_GLF_IDENTITY(5, (5) - 0), 5)))) | (int(5)))))) | 0)) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     break;
                    }
                   return;
                  }
                }
               continue;
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(false))
                  return;
                }
               barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 barrier();
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false)))))));
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 subgroupBarrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         return;
         if(_GLF_DEAD(false))
          break;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), true)))))))
    barrier();
   return;
  }
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
