#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)) && true)) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)) && true), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)) && true, ((_GLF_IDENTITY(false, (false) && true)) && true) || false))) && true), ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)) && true, ! (! ((_GLF_IDENTITY(false, (false) && true)) && true))))) && true)))), false))))))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)), (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))) && true))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))))) || false))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y) && true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)).x > injectionSwitch.y))) || false)))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) - 0.0), _GLF_FUZZED(float(57453))), vec2(_GLF_FUZZED(0.0), (injectionSwitch)[1]), bvec2(false, true))).y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * abs(1.0)) > injectionSwitch.y)))) && true)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_IDENTITY(false, (false) || false))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)) || false)))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))), false || (bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true))))))) && true))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(6.2)), bool(false))), (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / sqrt(1.0)))) > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), injectionSwitch.x)), (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / sqrt(1.0))), max(max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / sqrt(1.0))), max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / sqrt(1.0)))))), max(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), injectionSwitch.x)), (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / sqrt(1.0))), max(max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / sqrt(1.0))), max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / sqrt(1.0)))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), injectionSwitch.x)), (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / sqrt(1.0))), max(max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / sqrt(1.0))), max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / sqrt(1.0)))))), mix(float(_GLF_FUZZED(-376.560)), float(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), injectionSwitch.x)), (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / sqrt(1.0))), max(max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / sqrt(1.0))), max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / sqrt(1.0))))))), bool(true))))) > injectionSwitch.y), (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(0.0, _GLF_IDENTITY(min(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED((true ? 8.5 : 7.8)))), 0.0), (_GLF_IDENTITY(min(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED((true ? 8.5 : 7.8)))), 0.0), (min(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED((true ? 8.5 : 7.8)))), 0.0)) / 1.0)) - 0.0))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / sqrt(1.0)))), max(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(0.0, (0.0) * 1.0))), 0.0)), min(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED((true ? 8.5 : 7.8)))), 0.0))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / sqrt(1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(true, ! (! (true))) ? 0.0 : _GLF_FUZZED((true ? 8.5 : 7.8)))), 0.0))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / sqrt(1.0)))), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED((true ? 8.5 : 7.8)))), 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).x, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x) / sqrt(1.0))))) / 1.0))) > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) || false)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 ^ (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (false ? _GLF_FUZZED(length(vec2(98.63, 392.745))) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)) > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))) || false)));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((1 & 1), (_GLF_IDENTITY((1 & 1), int(ivec2((1 & 1), (1 & 1))))) << 0)); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), (bool(bvec2(_GLF_DEAD(false), false))) || false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)), bool(bool(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true))))))))));
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, uint(uvec2(_GLF_IDENTITY(workgroup_size, clamp(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size) - 0u, min((_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, ~ (~ (workgroup_size))), workgroup_size))) - 0u, _GLF_IDENTITY((workgroup_size) - 0u, uint(uint((workgroup_size) - 0u)))))), workgroup_size, workgroup_size)), 0u))) * _GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, (workgroup_id) / 1u)) | (workgroup_id));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(7.1))), max(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(7.1))), _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(7.1)))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 uint subgroup_base = _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * subgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) >> 0)], _GLF_FUZZED(3.9)), vec2(_GLF_FUZZED(98.32), _GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(2.7), _GLF_FUZZED(4.2)), bvec2(false, false)))[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         barrier();
        }
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u) + subgroup_base + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (true ? _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (true ? (subgroup_local_id + 1) % subgroup_size : _GLF_FUZZED(workgroup_id))) : _GLF_FUZZED(workgroup_id)))) << 0u, (_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), subgroup_local_id))))), ~ (~ (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), subgroup_local_id))))), ~ (~ (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))))))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), subgroup_local_id))))), ~ (~ (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))))))), _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), subgroup_local_id))))), ~ (~ (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))))))), 1u * (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), subgroup_local_id))))), ~ (~ (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), subgroup_local_id))))), ~ (~ (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))))))))))) << ((100631u & 0u) << _GLF_IDENTITY(uint(2u), uint(2u)))))), clamp(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) - 0u, _GLF_IDENTITY(((subgroup_local_id) - 0u) / 1u, ~ (_GLF_IDENTITY(~ (((subgroup_local_id) - 0u) / 1u), uint(uint(_GLF_IDENTITY(~ (((subgroup_local_id) - 0u) / 1u), 1u * (~ (((subgroup_local_id) - 0u) / 1u)))))))))), (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(1u), uint(1u))), min(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(1u), uint(1u))), ((1u << _GLF_IDENTITY(uint(1u), uint(1u)))) - 0u), _GLF_IDENTITY((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(1u), uint(1u)), (1u << _GLF_IDENTITY(uint(1u), uint(1u))) - 0u)), ~ (~ ((1u << _GLF_IDENTITY(uint(1u), uint(1u)))))))) >> _GLF_IDENTITY(uint(1u), uint(_GLF_IDENTITY(1u, (1u) / 1u)))), 0u), uvec3(uvec4(uvec3(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))) - 0u), (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)), 0u ^ ((_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, min(1u, 1u)), 1u)) << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))))), 0u), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(1u, (1u) / 1u)))))))), subgroup_local_id)) + 1) % subgroup_size) << 0u, (((subgroup_local_id + 1) % subgroup_size) << 0u) | 0u)) ^ _GLF_IDENTITY(0u, (0u) ^ 0u))));
 if(_GLF_DEAD(false))
  barrier();
 uint read = 0;
 atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(70400) : 1))), _GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(4, clamp(4, 4, 4))) * 1, (_GLF_IDENTITY((_GLF_IDENTITY(4, clamp(4, 4, 4))), ((_GLF_IDENTITY(4, clamp(4, 4, 4)))) << (1 ^ 1)) * 1) ^ 0)), 64, 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if((subgroup_local_id % 2) == 0)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, false)))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, false)))), true && (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, false)))), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, false)))))))))))))))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, false))))), ((_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, false)))))) && true)), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, false))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, false))))))), (! (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, false))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, false)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(((! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, false))))))), (_GLF_IDENTITY(((! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, false))))))), false || (((! (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, false)))))))))) || false) || false), true, false))))) && true)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY((true ? -55086 : -88409) & 0, ((true ? -55086 : -88409) & 0) ^ 0)), ((_GLF_IDENTITY((true ? -55086 : -88409) & 0, ((true ? -55086 : -88409) & 0) ^ 0))) / 1)); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << 0))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
                  barrier();
                 barrier();
                }
               barrier();
              }
            }
          }
         else
          {
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))), (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(1, min(_GLF_IDENTITY(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, int(ivec3(1, 0, 1))), 1)), _GLF_IDENTITY(1, min(1, 1)))), max(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1)), 1)) | 1), ((_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1)), 1)) | 1)) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             do
              {
               barrier();
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0))).x > injectionSwitch.y)))), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0))).x > injectionSwitch.y)))))))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))) && true); _injected_loop_counter --)
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))));
          }
        }
       subgroupAll(_GLF_IDENTITY(false, ! (! (false))));
       _GLF_IDENTITY(read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(2, (_GLF_IDENTITY(true ? 2 : _GLF_FUZZED(int(true)), (true ? 2 : _GLF_FUZZED(_GLF_IDENTITY(int(true), ~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), true && (! (_GLF_IDENTITY(true, false || (true)))))))) && true))), (~ (int(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), true && (! (_GLF_IDENTITY(true, false || (true)))))))) && true)))) | 0))))) / 1))), 0)), _GLF_IDENTITY((int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(true, ! (! (true))) ? 2 : _GLF_FUZZED(int(true)))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(true, ! (! (true))) ? 2 : _GLF_FUZZED(int(true)))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))) | 0), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), false || (! (_GLF_IDENTITY(true, ! (! (true)))))))) ? 2 : _GLF_FUZZED(int(true)))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))) | 0)))) + 0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), 1 * (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))))), min(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (clamp(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), min(_GLF_IDENTITY(2, (_GLF_IDENTITY(true, ! (! (true))) ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) << 0)) - int(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? _GLF_IDENTITY(2, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (2)) : _GLF_FUZZED(int(true)))))))), (~ (clamp(_GLF_IDENTITY(2, _GLF_IDENTITY((true ? 2 : _GLF_FUZZED(int(true))), max((true ? 2 : _GLF_FUZZED(int(true))), (true ? 2 : _GLF_FUZZED(int(true)))))), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), 1 * (_GLF_FUZZED(_GLF_IDENTITY(int(true), (true ? int(true) : _GLF_FUZZED(_injected_loop_counter)))))))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), min(_GLF_FUZZED(int(true)), _GLF_IDENTITY(_GLF_FUZZED(int(true)), (_GLF_FUZZED(int(true))) >> 0)))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), min(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))))))) - 0), min(_GLF_IDENTITY(~ (clamp(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(_GLF_IDENTITY(2, _GLF_IDENTITY((true ? 2 : _GLF_FUZZED(int(true))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((true ? 2 : _GLF_FUZZED(int(true))), (_GLF_IDENTITY((true ? 2 : _GLF_FUZZED(int(true))), ((true ? 2 : _GLF_FUZZED(int(true)))) | 0)) << 0) : _GLF_FUZZED(72323)))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), ~ (~ (_GLF_FUZZED(int(true)))))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), min(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))))))), (~ (clamp(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, min(2, 2))) << 0), (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), 1 * (_GLF_FUZZED(int(true)))))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), min(_GLF_FUZZED(int(true)), _GLF_IDENTITY(_GLF_FUZZED(int(true)), (_GLF_FUZZED(int(_GLF_IDENTITY(true, ! (! (true)))))) >> 0)))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))) ? 2 : _GLF_FUZZED(int(true)))), min(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))))))) - 0), _GLF_IDENTITY(~ (clamp(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), min(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))))))), (~ _GLF_IDENTITY((clamp(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), 1 * (_GLF_FUZZED(int(true)))))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), min(_GLF_FUZZED(int(true)), _GLF_IDENTITY(_GLF_FUZZED(int(true)), (_GLF_FUZZED(int(true))) >> 0)))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), min(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))))))), ((clamp(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), 1 * (_GLF_FUZZED(int(true)))))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), min(_GLF_FUZZED(int(true)), _GLF_IDENTITY(_GLF_FUZZED(int(true)), (_GLF_FUZZED(int(true))) >> 0)))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), min(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))))))) | ((clamp(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), 1 * (_GLF_FUZZED(int(true)))))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), min(_GLF_FUZZED(int(true)), _GLF_IDENTITY(_GLF_FUZZED(int(true)), (_GLF_FUZZED(int(true))) >> 0)))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), min(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))))))))) - 0)))))), _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))))) ^ 0, (_GLF_IDENTITY((int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(true, ! (! (true))) ? 2 : _GLF_FUZZED(int(true)))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(true, ! (! (true))) ? 2 : _GLF_FUZZED(int(true)))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))) | 0), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), false || (! (_GLF_IDENTITY(true, ! (! (true)))))))) ? 2 : _GLF_FUZZED(int(true)))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))) | 0)))) + 0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), 1 * (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))))), min(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (clamp(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), min(_GLF_IDENTITY(2, (_GLF_IDENTITY(true, ! (! (true))) ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) << 0)) - int(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? _GLF_IDENTITY(2, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (2)) : _GLF_FUZZED(int(true)))))))), (~ (clamp(_GLF_IDENTITY(2, _GLF_IDENTITY((true ? 2 : _GLF_FUZZED(int(true))), max((true ? 2 : _GLF_FUZZED(int(true))), (true ? 2 : _GLF_FUZZED(int(true)))))), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), 1 * (_GLF_FUZZED(_GLF_IDENTITY(int(true), (true ? int(true) : _GLF_FUZZED(_injected_loop_counter)))))))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), min(_GLF_FUZZED(int(true)), _GLF_IDENTITY(_GLF_FUZZED(int(true)), (_GLF_FUZZED(int(true))) >> 0)))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), min(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))))))) - 0), min(_GLF_IDENTITY(~ (clamp(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(_GLF_IDENTITY(2, _GLF_IDENTITY((true ? 2 : _GLF_FUZZED(int(true))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((true ? 2 : _GLF_FUZZED(int(true))), (_GLF_IDENTITY((true ? 2 : _GLF_FUZZED(int(true))), ((true ? 2 : _GLF_FUZZED(int(true)))) | 0)) << 0) : _GLF_FUZZED(72323)))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), ~ (~ (_GLF_FUZZED(int(true)))))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), min(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))))))), (~ (clamp(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, min(2, 2))) << 0), (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), 1 * (_GLF_FUZZED(int(true)))))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), min(_GLF_FUZZED(int(true)), _GLF_IDENTITY(_GLF_FUZZED(int(true)), (_GLF_FUZZED(int(_GLF_IDENTITY(true, ! (! (true)))))) >> 0)))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))) ? 2 : _GLF_FUZZED(int(true)))), min(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))))))) - 0), _GLF_IDENTITY(~ (clamp(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), min(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))))))), (~ _GLF_IDENTITY((clamp(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), 1 * (_GLF_FUZZED(int(true)))))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), min(_GLF_FUZZED(int(true)), _GLF_IDENTITY(_GLF_FUZZED(int(true)), (_GLF_FUZZED(int(true))) >> 0)))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), min(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))))))), ((clamp(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), 1 * (_GLF_FUZZED(int(true)))))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), min(_GLF_FUZZED(int(true)), _GLF_IDENTITY(_GLF_FUZZED(int(true)), (_GLF_FUZZED(int(true))) >> 0)))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), min(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))))))) | ((clamp(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), 1 * (_GLF_FUZZED(int(true)))))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), min(_GLF_FUZZED(int(true)), _GLF_IDENTITY(_GLF_FUZZED(int(true)), (_GLF_FUZZED(int(true))) >> 0)))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), min(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))))))))) - 0)))))), _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))))) ^ 0, min((int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(true, ! (! (true))) ? 2 : _GLF_FUZZED(int(true)))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(true, ! (! (true))) ? 2 : _GLF_FUZZED(int(true)))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))) | 0), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), false || (! (_GLF_IDENTITY(true, ! (! (true)))))))) ? 2 : _GLF_FUZZED(int(true)))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))) | 0)))) + 0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), 1 * (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))))), min(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (clamp(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), min(_GLF_IDENTITY(2, (_GLF_IDENTITY(true, ! (! (true))) ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) << 0)) - int(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? _GLF_IDENTITY(2, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (2)) : _GLF_FUZZED(int(true)))))))), (~ (clamp(_GLF_IDENTITY(2, _GLF_IDENTITY((true ? 2 : _GLF_FUZZED(int(true))), max((true ? 2 : _GLF_FUZZED(int(true))), (true ? 2 : _GLF_FUZZED(int(true)))))), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), 1 * (_GLF_FUZZED(_GLF_IDENTITY(int(true), (true ? int(true) : _GLF_FUZZED(_injected_loop_counter)))))))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), min(_GLF_FUZZED(int(true)), _GLF_IDENTITY(_GLF_FUZZED(int(true)), (_GLF_FUZZED(int(true))) >> 0)))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), min(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))))))) - 0), min(_GLF_IDENTITY(~ (clamp(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(_GLF_IDENTITY(2, _GLF_IDENTITY((true ? 2 : _GLF_FUZZED(int(true))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((true ? 2 : _GLF_FUZZED(int(true))), (_GLF_IDENTITY((true ? 2 : _GLF_FUZZED(int(true))), ((true ? 2 : _GLF_FUZZED(int(true)))) | 0)) << 0) : _GLF_FUZZED(72323)))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), ~ (~ (_GLF_FUZZED(int(true)))))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), min(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))))))), (~ (clamp(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, min(2, 2))) << 0), (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), 1 * (_GLF_FUZZED(int(true)))))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), min(_GLF_FUZZED(int(true)), _GLF_IDENTITY(_GLF_FUZZED(int(true)), (_GLF_FUZZED(int(_GLF_IDENTITY(true, ! (! (true)))))) >> 0)))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))) ? 2 : _GLF_FUZZED(int(true)))), min(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))))))) - 0), _GLF_IDENTITY(~ (clamp(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), min(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))))))), (~ _GLF_IDENTITY((clamp(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), 1 * (_GLF_FUZZED(int(true)))))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), min(_GLF_FUZZED(int(true)), _GLF_IDENTITY(_GLF_FUZZED(int(true)), (_GLF_FUZZED(int(true))) >> 0)))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), min(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))))))), ((clamp(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), 1 * (_GLF_FUZZED(int(true)))))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), min(_GLF_FUZZED(int(true)), _GLF_IDENTITY(_GLF_FUZZED(int(true)), (_GLF_FUZZED(int(true))) >> 0)))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), min(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))))))) | ((clamp(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), 1 * (_GLF_FUZZED(int(true)))))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), min(_GLF_FUZZED(int(true)), _GLF_IDENTITY(_GLF_FUZZED(int(true)), (_GLF_FUZZED(int(true))) >> 0)))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), min(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))))))))) - 0)))))), _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))))) ^ 0, (int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(true, ! (! (true))) ? 2 : _GLF_FUZZED(int(true)))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(true, ! (! (true))) ? 2 : _GLF_FUZZED(int(true)))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))) | 0), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), false || (! (_GLF_IDENTITY(true, ! (! (true)))))))) ? 2 : _GLF_FUZZED(int(true)))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))) | 0)))) + 0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), 1 * (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))))), min(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (clamp(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), min(_GLF_IDENTITY(2, (_GLF_IDENTITY(true, ! (! (true))) ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) << 0)) - int(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? _GLF_IDENTITY(2, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (2)) : _GLF_FUZZED(int(true)))))))), (~ (clamp(_GLF_IDENTITY(2, _GLF_IDENTITY((true ? 2 : _GLF_FUZZED(int(true))), max((true ? 2 : _GLF_FUZZED(int(true))), (true ? 2 : _GLF_FUZZED(int(true)))))), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), 1 * (_GLF_FUZZED(_GLF_IDENTITY(int(true), (true ? int(true) : _GLF_FUZZED(_injected_loop_counter)))))))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), min(_GLF_FUZZED(int(true)), _GLF_IDENTITY(_GLF_FUZZED(int(true)), (_GLF_FUZZED(int(true))) >> 0)))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), min(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))))))) - 0), min(_GLF_IDENTITY(~ (clamp(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(_GLF_IDENTITY(2, _GLF_IDENTITY((true ? 2 : _GLF_FUZZED(int(true))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((true ? 2 : _GLF_FUZZED(int(true))), (_GLF_IDENTITY((true ? 2 : _GLF_FUZZED(int(true))), ((true ? 2 : _GLF_FUZZED(int(true)))) | 0)) << 0) : _GLF_FUZZED(72323)))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), ~ (~ (_GLF_FUZZED(int(true)))))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), min(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))))))), (~ (clamp(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, min(2, 2))) << 0), (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), 1 * (_GLF_FUZZED(int(true)))))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), min(_GLF_FUZZED(int(true)), _GLF_IDENTITY(_GLF_FUZZED(int(true)), (_GLF_FUZZED(int(_GLF_IDENTITY(true, ! (! (true)))))) >> 0)))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))) ? 2 : _GLF_FUZZED(int(true)))), min(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))))))) - 0), _GLF_IDENTITY(~ (clamp(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), min(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))))))), (~ _GLF_IDENTITY((clamp(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), 1 * (_GLF_FUZZED(int(true)))))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), min(_GLF_FUZZED(int(true)), _GLF_IDENTITY(_GLF_FUZZED(int(true)), (_GLF_FUZZED(int(true))) >> 0)))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), min(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))))))), ((clamp(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), 1 * (_GLF_FUZZED(int(true)))))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), min(_GLF_FUZZED(int(true)), _GLF_IDENTITY(_GLF_FUZZED(int(true)), (_GLF_FUZZED(int(true))) >> 0)))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), min(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))))))) | ((clamp(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), 1 * (_GLF_FUZZED(int(true)))))), (_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(int(true)), min(_GLF_FUZZED(int(true)), _GLF_IDENTITY(_GLF_FUZZED(int(true)), (_GLF_FUZZED(int(true))) >> 0)))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), min(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true))))))))))) - 0)))))), _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))))) ^ 0))) | 0)))), ~ (~ (atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(true ? 2 : _GLF_FUZZED(int(true)), (true ? 2 : _GLF_FUZZED(int(true))) / 1), 0 | (_GLF_IDENTITY(true ? 2 : _GLF_FUZZED(int(true)), (_GLF_IDENTITY(true ? 2 : _GLF_FUZZED(int(true)), min(true ? 2 : _GLF_FUZZED(int(true)), true ? 2 : _GLF_FUZZED(int(true))))) / 1))))), 0)), ~ (~ (int(ivec2(_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(true ? 2 : _GLF_FUZZED(int(true)), (true ? 2 : _GLF_FUZZED(int(true))) / 1), 0 | (_GLF_IDENTITY(true ? 2 : _GLF_FUZZED(int(true)), (_GLF_IDENTITY(true ? 2 : _GLF_FUZZED(int(true)), min(true ? 2 : _GLF_FUZZED(int(true)), true ? 2 : _GLF_FUZZED(int(true))))) / 1))))), 0))))), (int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), clamp(_GLF_IDENTITY(2, (true ? _GLF_IDENTITY(2, 1 * (2)) : _GLF_FUZZED(_GLF_IDENTITY(int(true), ~ (~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(int(true), (int(true)) | (int(true)))), ((_GLF_IDENTITY(int(true), (int(true)) | (int(true))))) >> 0), max((int(true)), (int(true))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (2) ^ 0), 2))) * ((_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(5), int(5))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(int(_GLF_IDENTITY(int(5), int(5)))), max(int(int(_GLF_IDENTITY(int(5), int(5)))), int(int(_GLF_IDENTITY(int(5), int(5))))))), _GLF_IDENTITY(int(5), int(5)))))), _GLF_IDENTITY((true ? 2 : _GLF_FUZZED(int(true))), ((true ? 2 : _GLF_FUZZED(int(true)))) - 0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(2, (true ? _GLF_IDENTITY(2, min(2, 2)) : _GLF_FUZZED(int(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, false, false)))) || false))))), (_GLF_IDENTITY(_GLF_IDENTITY(2, (true ? _GLF_IDENTITY(2, min(2, 2)) : _GLF_FUZZED(int(true)))), (_GLF_IDENTITY(2, (true ? _GLF_IDENTITY(2, min(2, 2)) : _GLF_FUZZED(int(true))))) ^ 0)) >> 0)), ((_GLF_IDENTITY(_GLF_IDENTITY(2, (true ? _GLF_IDENTITY(2, min(2, 2)) : _GLF_FUZZED(int(true)))), (_GLF_IDENTITY(_GLF_IDENTITY(2, (true ? _GLF_IDENTITY(_GLF_IDENTITY(2, min(2, 2)), 1 * (_GLF_IDENTITY(2, min(2, 2)))) : _GLF_FUZZED(int(_GLF_IDENTITY(true, (true) || false))))), (_GLF_IDENTITY(2, (true ? _GLF_IDENTITY(2, min(2, 2)) : _GLF_FUZZED(int(true))))) ^ 0)) >> 0))) | 0) | 0), _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, (2) ^ 0))), 0 | (2)), (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, (2) ^ 0))), _GLF_IDENTITY(0, min(0, 0)) | (2))) / ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), 0 | (_GLF_IDENTITY(int(6), min(int(6), int(6)))))) ^ 0), int(6))) >> _GLF_IDENTITY(int(6), int(6)))) : _GLF_FUZZED(int(true)))), min(_GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), (true ? 2 : _GLF_FUZZED(int(true)))), clamp(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(int(true)))))))), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(_GLF_IDENTITY(int(true), ~ (~ (int(true))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, ~ (~ (0))), 1))), _GLF_IDENTITY(0, (0) | (0)))), (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, ~ (~ (0))), 1))), _GLF_IDENTITY(0, (0) | _GLF_IDENTITY((0), (0 ^ 1) * (_GLF_IDENTITY((0), ((0)) >> 0))))))) | _GLF_IDENTITY((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, ~ (~ (0))), 1))), _GLF_IDENTITY(0, (0) | (0))))), (_GLF_IDENTITY((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, ~ (~ (0))), 1))), _GLF_IDENTITY(0, (0) | (0))))), 0 + ((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, ~ (~ (0))), 1))), _GLF_IDENTITY(0, (0) | (0)))))))) / 1)), (false ? _GLF_FUZZED(_injected_loop_counter) : 0))))) ^ 0)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read = _GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]), ((buf[virtual_gid])) | _GLF_IDENTITY(0u, 0u | (0u))) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4)), _GLF_IDENTITY(64, (64) - 0), 2), min(atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), 0u ^ (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4)), _GLF_IDENTITY(64, (64) - 0), 2), _GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4)), _GLF_IDENTITY(64, (64) - 0), 2), _GLF_IDENTITY(uint(uvec2(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4)), _GLF_IDENTITY(64, (64) - 0), 2), 0u)), min(uint(uvec2(atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], uint(_GLF_IDENTITY(uvec2(buf[virtual_gid], uint(_GLF_ONE(1.0, injectionSwitch.y))), max(uvec2(buf[virtual_gid], uint(_GLF_ONE(1.0, injectionSwitch.y))), uvec2(buf[virtual_gid], uint(_GLF_ONE(1.0, injectionSwitch.y))))))), (buf[virtual_gid]) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4)), _GLF_IDENTITY(64, (64) - 0), 2), 0u)), uint(uvec2(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) | uint(_GLF_ZERO(0.0, injectionSwitch.x))), uint(6u)))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4)), _GLF_IDENTITY(64, (64) - 0), 2), 0u))))))), (read = _GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]), ((buf[virtual_gid])) | _GLF_IDENTITY(0u, 0u | (0u))) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4)), _GLF_IDENTITY(64, (64) - 0), 2), min(atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), (buf[virtual_gid]) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), 0u ^ (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4)), _GLF_IDENTITY(64, (64) - 0), 2), _GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4)), _GLF_IDENTITY(64, (64) - 0), 2), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4)), _GLF_IDENTITY(64, (64) - 0), 2), ~ (_GLF_IDENTITY(~ (atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4)), _GLF_IDENTITY(64, (64) - 0), 2)), 0u ^ (~ (atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4)), _GLF_IDENTITY(64, (64) - 0), 2)))))), 0u)), min(uint(uvec2(atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], uint(_GLF_IDENTITY(uvec2(buf[virtual_gid], uint(_GLF_ONE(1.0, injectionSwitch.y))), max(uvec2(buf[virtual_gid], uint(_GLF_ONE(1.0, injectionSwitch.y))), uvec2(buf[virtual_gid], uint(_GLF_ONE(1.0, injectionSwitch.y))))))), (buf[virtual_gid]) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4)), _GLF_IDENTITY(64, (64) - 0), 2), 0u)), uint(uvec2(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) | uint(_GLF_ZERO(0.0, injectionSwitch.x))), uint(6u)))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4)), _GLF_IDENTITY(64, (64) - 0), 2), 0u)))))))) / 1u), (read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY((4) / 1, ~ (~ ((4) / 1)))), _GLF_IDENTITY(min(4, 4), (true ? min(4, 4) : _GLF_FUZZED(-49682)))), 64, 2)) << 0u), (_GLF_IDENTITY(read = _GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]), ((buf[virtual_gid])) | _GLF_IDENTITY(0u, 0u | (0u))) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4)), _GLF_IDENTITY(64, (64) - 0), 2), min(atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), 0u ^ (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, (4) - 0))), 4)), _GLF_IDENTITY(64, (64) - 0), 2), _GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4)), _GLF_IDENTITY(64, (64) - 0), 2), _GLF_IDENTITY(uint(uvec2(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4)), _GLF_IDENTITY(64, (64) - 0), 2), 0u)), min(uint(uvec2(atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], uint(_GLF_IDENTITY(uvec2(buf[virtual_gid], uint(_GLF_ONE(1.0, injectionSwitch.y))), max(uvec2(buf[virtual_gid], uint(_GLF_ONE(1.0, injectionSwitch.y))), uvec2(buf[virtual_gid], uint(_GLF_ONE(1.0, injectionSwitch.y))))))), (buf[virtual_gid]) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4)), _GLF_IDENTITY(64, (64) - 0), 2), 0u)), uint(uvec2(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) | uint(_GLF_ZERO(0.0, injectionSwitch.x))), uint(6u)))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4)), _GLF_IDENTITY(64, (64) - 0), 2), 0u))))), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4)), _GLF_IDENTITY(64, (64) - 0), 2), _GLF_IDENTITY(uint(uvec2(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4)), _GLF_IDENTITY(64, (64) - 0), 2), 0u)), min(uint(uvec2(atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], uint(_GLF_IDENTITY(uvec2(buf[virtual_gid], uint(_GLF_ONE(1.0, injectionSwitch.y))), max(uvec2(buf[virtual_gid], uint(_GLF_ONE(1.0, injectionSwitch.y))), uvec2(buf[virtual_gid], uint(_GLF_ONE(1.0, injectionSwitch.y))))))), (buf[virtual_gid]) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4)), _GLF_IDENTITY(64, (64) - 0), 2), 0u)), uint(uvec2(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) | uint(_GLF_ZERO(0.0, injectionSwitch.x))), uint(6u)))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4)), _GLF_IDENTITY(64, (64) - 0), 2), 0u))))), 0u, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))), min(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4)), _GLF_IDENTITY(64, (64) - 0), 2), _GLF_IDENTITY(uint(uvec2(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4)), _GLF_IDENTITY(64, (64) - 0), 2), 0u)), min(uint(uvec2(atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], uint(_GLF_IDENTITY(uvec2(buf[virtual_gid], uint(_GLF_ONE(1.0, injectionSwitch.y))), max(uvec2(buf[virtual_gid], uint(_GLF_ONE(1.0, injectionSwitch.y))), uvec2(buf[virtual_gid], uint(_GLF_ONE(1.0, injectionSwitch.y))))))), (buf[virtual_gid]) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4)), _GLF_IDENTITY(64, (64) - 0), 2), 0u)), uint(uvec2(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) | uint(_GLF_ZERO(0.0, injectionSwitch.x))), uint(6u)))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4)), _GLF_IDENTITY(64, (64) - 0), 2), 0u))))), 0u, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uvec4(_GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4)), _GLF_IDENTITY(64, (64) - 0), 2), _GLF_IDENTITY(uint(uvec2(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4)), _GLF_IDENTITY(64, (64) - 0), 2), 0u)), min(uint(uvec2(atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], uint(_GLF_IDENTITY(uvec2(buf[virtual_gid], uint(_GLF_ONE(1.0, injectionSwitch.y))), max(uvec2(buf[virtual_gid], uint(_GLF_ONE(1.0, injectionSwitch.y))), uvec2(buf[virtual_gid], uint(_GLF_ONE(1.0, injectionSwitch.y))))))), (buf[virtual_gid]) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4)), _GLF_IDENTITY(64, (64) - 0), 2), 0u)), uint(uvec2(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) | uint(_GLF_ZERO(0.0, injectionSwitch.x))), uint(6u)))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4)), _GLF_IDENTITY(64, (64) - 0), 2), 0u))))), 0u, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))) - uvec4(0u, 0u, 0u, 0u)), uvec4(_GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4)), _GLF_IDENTITY(64, (64) - 0), 2), _GLF_IDENTITY(uint(uvec2(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4)), _GLF_IDENTITY(64, (64) - 0), 2), 0u)), min(uint(uvec2(atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], uint(_GLF_IDENTITY(uvec2(buf[virtual_gid], uint(_GLF_ONE(1.0, injectionSwitch.y))), max(uvec2(buf[virtual_gid], uint(_GLF_ONE(1.0, injectionSwitch.y))), uvec2(buf[virtual_gid], uint(_GLF_ONE(1.0, injectionSwitch.y))))))), (buf[virtual_gid]) >> (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4)), _GLF_IDENTITY(64, (64) - 0), 2), 0u)), uint(uvec2(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), (uint(6u)) | uint(_GLF_ZERO(0.0, injectionSwitch.x))), uint(6u)))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4)), _GLF_IDENTITY(64, (64) - 0), 2), 0u))))), 0u, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))))))), (read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY((4) / 1, ~ (~ ((4) / 1)))), _GLF_IDENTITY(min(4, 4), (true ? min(4, 4) : _GLF_FUZZED(-49682)))), 64, 2)) << 0u)) | 0u)) / 1u);
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-7.4, 924.316))))) / vec2(1.0, 1.0))) * mat2(1.0)).y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), mix(vec2(_GLF_FUZZED(-4.8), _GLF_FUZZED(-1213.6810)), vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))[0], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))[1]), bvec2(true, true))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))), (injectionSwitch) * mat2(1.0)).y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(_GLF_IDENTITY(bvec2(bool(false), true), bvec2(bvec2(bvec2(bool(false), true))))))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               do
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   subgroupAll(false);
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (bool(bool(false))), (! (bool(bool(false)))) || false), ! (! (_GLF_IDENTITY(! (bool(bool(false))), (! (bool(bool(false)))) || false))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (bool(bool(false))), (! (bool(bool(false)))) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY(bool(false), false || (bool(false))))))), (! (bool(bool(false)))) || false)))))))))));
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))), true && (! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))))))))
                            barrier();
                           barrier();
                          }
                        }
                       else
                        {
                        }
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
                        {
                         barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))) && true), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))), false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(25.09)), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y))))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec4(vec2(0.0, 0.0), 0.0, sin(0.0)), (vec4(vec2(0.0, 0.0), 0.0, sin(0.0))) * mat4(1.0))), mix(vec2(_GLF_FUZZED(3.1), _GLF_FUZZED(-2.4)), vec2((vec2(_GLF_IDENTITY(vec4(vec2(0.0, 0.0), 0.0, sin(0.0)), (vec4(vec2(0.0, 0.0), 0.0, sin(0.0))) * mat4(1.0))))[0], (vec2(_GLF_IDENTITY(vec4(vec2(0.0, 0.0), 0.0, sin(0.0)), (vec4(vec2(0.0, 0.0), 0.0, sin(0.0))) * mat4(1.0))))[1]), bvec2(true, true))))).x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(mix(-898.479, -978.917, 9.6)))))).x > injectionSwitch.y) && true), true)))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false) || _GLF_IDENTITY(false, bool(bool(false))), ! (! ((false) || false))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY((false) || false, ! (! ((false) || false))), true && (_GLF_IDENTITY((false) || false, ! (! ((false) || false)))))), _GLF_IDENTITY(false, true && (false)) || (bool(_GLF_IDENTITY(_GLF_IDENTITY((false) || false, _GLF_IDENTITY(! (! ((false) || false)), bool(bvec2(! (! ((false) || false)), true)))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false) || false, ! (! ((false) || false))), (_GLF_IDENTITY((false) || false, ! (! ((false) || false)))) && true), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((false) || false, ! (! ((false) || false))), (_GLF_IDENTITY((false) || false, ! (! ((false) || false)))) && true), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((false) || false, ! (! ((false) || false))), (_GLF_IDENTITY((false) || false, ! (! ((false) || false)))) && true), true, true))))))))))))))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (! (! (false))))), (! (_GLF_IDENTITY(! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ((false)) || false)))), ! _GLF_IDENTITY((! (! (false))), ((! (! (false)))) && true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-78.04) : injectionSwitch.y)))), false)))))
                  barrier();
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))) : _GLF_FUZZED(5813.4265))))) || (false)), (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).y)))), (_GLF_IDENTITY(true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).y)))), (_GLF_IDENTITY(true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).y)))), ! (! (true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).y)))))))) && true)) || false)))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), true, true))), true, true)))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! ((false))))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))) * (1.0)))) * (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))
              barrier();
             barrier();
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))), (bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))))) && true)), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true)))), ! (! (_GLF_WRAPPED_LOOP(false)))));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(float(-70778))), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, true && (true))))) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true)))))))
            barrier();
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7306.4372), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-5447.3463)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7306.4372), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-5447.3463)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y))))).x > injectionSwitch.y))))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))))))
              {
               do
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(9949.9669)), float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(9949.9669)), float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) > injectionSwitch.y))) && true)));
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(9.2))), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 1.0))).y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
            }
           else
            {
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, _GLF_IDENTITY(max(4, 4), (false ? _GLF_FUZZED(_injected_loop_counter) : max(4, 4)))), _GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, (64) + 0))), 2);
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-7.8)), float(injectionSwitch.x), bool(true))) < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))), (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))))) / vec2(1.0, 1.0)).y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))))), true, false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, false)), (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true, false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true, false)), bool(bvec4(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true, false)), false, false, true))), true, false, true)), false || (bool(bvec4(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true, false)), bool(bvec4(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true, false)), false, false, true))), true, false, true)))))) || false)), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))).x > injectionSwitch.y)))))), true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y)))))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))))), true, false)))), false))))))))));
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), true, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec2(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), true, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true)))))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), max((_injected_loop_counter), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter))))) | (_injected_loop_counter)) != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   subgroupBarrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 | (~ (0)))))), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (0 << _GLF_IDENTITY(int(4), int(4))) ^ (int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(77679) : _injected_loop_counter --)))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), true)))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bool(true))))), false))), true, false))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false)))))) && true))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))))
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, mix(float(_GLF_FUZZED((9788.5841 / -7726.8261))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))), bool(true))))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, mix(float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), float(_GLF_FUZZED(4.8)), bool(false))), mix(float(_GLF_FUZZED((9788.5841 / -7726.8261))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))), bool(true)))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
