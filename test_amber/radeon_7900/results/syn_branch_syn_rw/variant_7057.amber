#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_11 {
 mat3x2 _f0;
 ivec3 _f1;
 mat4 _f2;
 mat3x4 _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_12 {
 int _f0;
 _GLF_struct_11 _f1;
 float _f2;
} ;

struct _GLF_struct_9 {
 ivec4 _f0;
} ;

struct _GLF_struct_8 {
 mat2x4 _f0;
 ivec2 _f1;
 vec2 _f2;
 bvec4 _f3;
 mat4x2 _f4;
 mat3x2 _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_10 {
 mat3 _f0;
 _GLF_struct_8 _f1;
 uvec3 _f2;
 mat2x3 _f3;
 _GLF_struct_9 _f4;
} ;

struct _GLF_struct_6 {
 vec3 _f0;
 ivec3 _f1;
 mat4x2 _f2;
 bool _f3;
 vec2 _f4;
 mat4x3 _f5;
} ;

struct _GLF_struct_5 {
 vec4 _f0;
 mat3x4 _f1;
 uvec2 _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_4 {
 mat2x4 _f0;
 vec3 _f1;
 bvec2 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_7 {
 _GLF_struct_4 _f0;
 mat4 _f1;
 mat4x3 _f2;
 _GLF_struct_5 _f3;
 _GLF_struct_6 _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_2 {
 mat3 _f0;
 bvec2 _f1;
 bvec4 _f2;
 mat4 _f3;
} ;

struct _GLF_struct_1 {
 ivec2 _f0;
 mat2 _f1;
 mat3 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_0 {
 bool _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 bvec3 _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_2 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_13 {
 _GLF_struct_3 _f0;
 uint subgroup_base;
 _GLF_struct_7 _f1;
 bvec4 _f2;
 _GLF_struct_10 _f3;
 _GLF_struct_12 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && (_GLF_IDENTITY(false, ! (! (false))))), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, log(1.0) + (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-465.994)), float(injectionSwitch.x), bool(true))))), injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)), false, false)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), ((_GLF_IDENTITY(false, (false) && true))) && true), false)))))) && true)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (false)))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, _GLF_IDENTITY(true, ! (! (true))))))))), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(float(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))) + (injectionSwitch.y)))))), false, true))))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, min(7u, 7u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, (7u) - 0u)), (uvec3(7u)) - uvec3(0u, 0u, 0u)))), ((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, min(7u, 7u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, (7u) - 0u)), (uvec3(7u)) - uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), max(uvec4(gl_NumWorkGroups, 0u), _GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), (uvec4(gl_NumWorkGroups, 0u)) << uvec4(0u, 0u, 0u, 0u))))), max(_GLF_IDENTITY(uvec3(uvec4(gl_NumWorkGroups, 0u)), ~ (~ (uvec3(uvec4(gl_NumWorkGroups, 0u))))), uvec3(_GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), min(uvec4(gl_NumWorkGroups, 0u), _GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), ~ (~ (uvec4(gl_NumWorkGroups, 0u)))))))))), _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, min(7u, 7u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, (7u) - 0u)), (uvec3(7u)) - uvec3(0u, 0u, 0u)))), ((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, min(7u, 7u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, (7u) - 0u)), (uvec3(7u)) - uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), max(uvec4(gl_NumWorkGroups, 0u), _GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), (uvec4(gl_NumWorkGroups, 0u)) << uvec4(0u, 0u, 0u, 0u))))), max(_GLF_IDENTITY(uvec3(uvec4(gl_NumWorkGroups, 0u)), ~ (~ (uvec3(uvec4(gl_NumWorkGroups, 0u))))), uvec3(_GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), min(uvec4(gl_NumWorkGroups, 0u), _GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), ~ (~ (uvec4(gl_NumWorkGroups, 0u)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, min(7u, 7u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, (7u) - 0u)), (uvec3(7u)) - uvec3(0u, 0u, 0u)))), ((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, min(7u, 7u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, (7u) - 0u)), (uvec3(7u)) - uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), max(uvec4(gl_NumWorkGroups, 0u), _GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), (uvec4(gl_NumWorkGroups, 0u)) << uvec4(0u, 0u, 0u, 0u))))), max(_GLF_IDENTITY(uvec3(uvec4(gl_NumWorkGroups, 0u)), ~ (~ (uvec3(uvec4(gl_NumWorkGroups, 0u))))), uvec3(_GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), min(uvec4(gl_NumWorkGroups, 0u), _GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), ~ (~ (uvec4(gl_NumWorkGroups, 0u))))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, min(7u, 7u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, (7u) - 0u)), (uvec3(7u)) - uvec3(0u, 0u, 0u)))), ((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, min(7u, 7u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, (7u) - 0u)), (uvec3(7u)) - uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), max(uvec4(gl_NumWorkGroups, 0u), _GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), (uvec4(gl_NumWorkGroups, 0u)) << uvec4(0u, 0u, 0u, 0u))))), max(_GLF_IDENTITY(uvec3(uvec4(gl_NumWorkGroups, 0u)), ~ (~ (uvec3(uvec4(gl_NumWorkGroups, 0u))))), uvec3(_GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), min(uvec4(gl_NumWorkGroups, 0u), _GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), ~ (~ (uvec4(gl_NumWorkGroups, 0u)))))))))))))), clamp(uvec3(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, min(7u, 7u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, (7u) - 0u)), (uvec3(7u)) - uvec3(0u, 0u, 0u)))), ((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, min(7u, 7u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, (7u) - 0u)), (uvec3(7u)) - uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), max(uvec4(gl_NumWorkGroups, 0u), _GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), (uvec4(gl_NumWorkGroups, 0u)) << uvec4(0u, 0u, 0u, 0u))))), max(_GLF_IDENTITY(uvec3(uvec4(gl_NumWorkGroups, 0u)), ~ (~ (uvec3(uvec4(gl_NumWorkGroups, 0u))))), uvec3(_GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), min(uvec4(gl_NumWorkGroups, 0u), _GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), ~ (~ (uvec4(gl_NumWorkGroups, 0u)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, min(7u, 7u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, (7u) - 0u)), (uvec3(7u)) - uvec3(0u, 0u, 0u)))), ((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, min(7u, 7u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, (7u) - 0u)), (uvec3(7u)) - uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), max(uvec4(gl_NumWorkGroups, 0u), _GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), (uvec4(gl_NumWorkGroups, 0u)) << uvec4(0u, 0u, 0u, 0u))))), max(_GLF_IDENTITY(uvec3(uvec4(gl_NumWorkGroups, 0u)), ~ (~ (uvec3(uvec4(gl_NumWorkGroups, 0u))))), uvec3(_GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), min(uvec4(gl_NumWorkGroups, 0u), _GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), ~ (~ (uvec4(gl_NumWorkGroups, 0u))))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, min(7u, 7u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, (7u) - 0u)), (uvec3(7u)) - uvec3(0u, 0u, 0u)))), ((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, min(7u, 7u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, (7u) - 0u)), (uvec3(7u)) - uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), max(uvec4(gl_NumWorkGroups, 0u), _GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), (uvec4(gl_NumWorkGroups, 0u)) << uvec4(0u, 0u, 0u, 0u))))), max(_GLF_IDENTITY(uvec3(uvec4(gl_NumWorkGroups, 0u)), ~ (~ (uvec3(uvec4(gl_NumWorkGroups, 0u))))), uvec3(_GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), min(uvec4(gl_NumWorkGroups, 0u), _GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), ~ (~ (uvec4(gl_NumWorkGroups, 0u)))))))))))))), uvec3(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, min(7u, 7u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, (7u) - 0u)), (uvec3(7u)) - uvec3(0u, 0u, 0u)))), ((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, min(7u, 7u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, (7u) - 0u)), (uvec3(7u)) - uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), max(uvec4(gl_NumWorkGroups, 0u), _GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), (uvec4(gl_NumWorkGroups, 0u)) << uvec4(0u, 0u, 0u, 0u))))), max(_GLF_IDENTITY(uvec3(uvec4(gl_NumWorkGroups, 0u)), ~ (~ (uvec3(uvec4(gl_NumWorkGroups, 0u))))), uvec3(_GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), min(uvec4(gl_NumWorkGroups, 0u), _GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), ~ (~ (uvec4(gl_NumWorkGroups, 0u)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, min(7u, 7u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, (7u) - 0u)), (uvec3(7u)) - uvec3(0u, 0u, 0u)))), ((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, min(7u, 7u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, (7u) - 0u)), (uvec3(7u)) - uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), max(uvec4(gl_NumWorkGroups, 0u), _GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), (uvec4(gl_NumWorkGroups, 0u)) << uvec4(0u, 0u, 0u, 0u))))), max(_GLF_IDENTITY(uvec3(uvec4(gl_NumWorkGroups, 0u)), ~ (~ (uvec3(uvec4(gl_NumWorkGroups, 0u))))), uvec3(_GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), min(uvec4(gl_NumWorkGroups, 0u), _GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), ~ (~ (uvec4(gl_NumWorkGroups, 0u))))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, min(7u, 7u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, (7u) - 0u)), (uvec3(7u)) - uvec3(0u, 0u, 0u)))), ((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, min(7u, 7u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, (7u) - 0u)), (uvec3(7u)) - uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), max(uvec4(gl_NumWorkGroups, 0u), _GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), (uvec4(gl_NumWorkGroups, 0u)) << uvec4(0u, 0u, 0u, 0u))))), max(_GLF_IDENTITY(uvec3(uvec4(gl_NumWorkGroups, 0u)), ~ (~ (uvec3(uvec4(gl_NumWorkGroups, 0u))))), uvec3(_GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), min(uvec4(gl_NumWorkGroups, 0u), _GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), ~ (~ (uvec4(gl_NumWorkGroups, 0u)))))))))))))), uvec3(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, min(7u, 7u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, (7u) - 0u)), (uvec3(7u)) - uvec3(0u, 0u, 0u)))), ((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, min(7u, 7u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, (7u) - 0u)), (uvec3(7u)) - uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), max(uvec4(gl_NumWorkGroups, 0u), _GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), (uvec4(gl_NumWorkGroups, 0u)) << uvec4(0u, 0u, 0u, 0u))))), max(_GLF_IDENTITY(uvec3(uvec4(gl_NumWorkGroups, 0u)), ~ (~ (uvec3(uvec4(gl_NumWorkGroups, 0u))))), uvec3(_GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), min(uvec4(gl_NumWorkGroups, 0u), _GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), ~ (~ (uvec4(gl_NumWorkGroups, 0u)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, min(7u, 7u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, (7u) - 0u)), (uvec3(7u)) - uvec3(0u, 0u, 0u)))), ((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, min(7u, 7u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, (7u) - 0u)), (uvec3(7u)) - uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), max(uvec4(gl_NumWorkGroups, 0u), _GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), (uvec4(gl_NumWorkGroups, 0u)) << uvec4(0u, 0u, 0u, 0u))))), max(_GLF_IDENTITY(uvec3(uvec4(gl_NumWorkGroups, 0u)), ~ (~ (uvec3(uvec4(gl_NumWorkGroups, 0u))))), uvec3(_GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), min(uvec4(gl_NumWorkGroups, 0u), _GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), ~ (~ (uvec4(gl_NumWorkGroups, 0u))))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, min(7u, 7u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, (7u) - 0u)), (uvec3(7u)) - uvec3(0u, 0u, 0u)))), ((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, min(7u, 7u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, (7u) - 0u)), (uvec3(7u)) - uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), max(uvec4(gl_NumWorkGroups, 0u), _GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), (uvec4(gl_NumWorkGroups, 0u)) << uvec4(0u, 0u, 0u, 0u))))), max(_GLF_IDENTITY(uvec3(uvec4(gl_NumWorkGroups, 0u)), ~ (~ (uvec3(uvec4(gl_NumWorkGroups, 0u))))), uvec3(_GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), min(uvec4(gl_NumWorkGroups, 0u), _GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), ~ (~ (uvec4(gl_NumWorkGroups, 0u))))))))))))))))), min(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec4(gl_NumWorkGroups, 0u))), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec4(gl_NumWorkGroups, 0u))), (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec4(gl_NumWorkGroups, 0u)))) << uvec3(0u, 0u, 0u)))), _GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ _GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(110202u, 45816u, 73022u)) : gl_NumWorkGroups))), ((gl_NumWorkGroups)) ^ uvec3(0u, 0u, 0u)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), ((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)))))) ^ uvec3(0u, 0u, 0u)), uvec3(uvec3(_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) ^ uvec3(0u, 0u, 0u))))))), uvec3(uvec4((~ (_GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) ^ uvec3(0u, 0u, 0u)), uvec3(uvec3(_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) ^ uvec3(0u, 0u, 0u))))))), 0u)))))), (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), ((injectionSwitch.x > injectionSwitch.y)) && true)) ? _GLF_FUZZED(uvec3(110202u, 45816u, 73022u)) : gl_NumWorkGroups))), ((gl_NumWorkGroups)) ^ uvec3(0u, 0u, 0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) * 1u))), uvec3(uvec3(_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) ^ uvec3(0u, 0u, 0u)))))), uvec3(uvec4(~ (_GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) * 1u, ((0u) * 1u) * 1u)))), uvec3(uvec3(_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) ^ uvec3(0u, 0u, 0u)))))), 1u))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), ((injectionSwitch.x > injectionSwitch.y)) && true)) ? _GLF_FUZZED(uvec3(110202u, 45816u, 73022u)) : gl_NumWorkGroups))), ((gl_NumWorkGroups)) ^ uvec3(0u, 0u, 0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) * 1u))), uvec3(uvec3(_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) ^ uvec3(0u, 0u, 0u)))))), uvec3(uvec4(~ (_GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) * 1u, ((0u) * 1u) * 1u)))), uvec3(uvec3(_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) ^ uvec3(0u, 0u, 0u)))))), 1u))))) : _GLF_FUZZED(uvec3(184342u, 73168u, 131179u))))))) - uvec3(0u, 0u, 0u)))))).x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (! (! (false))), (_GLF_IDENTITY(! (! (! (false))), bool(bvec2(! (! (! (false))), false)))) && true))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(6.6)), float(injectionSwitch.y), bool(true))), injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(1039.7710)), float(1.0), bool(true))), sqrt(_GLF_IDENTITY(1.0, max(1.0, 1.0))), 1.0, 1.0, 0.0))))), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2x3(injectionSwitch.y, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(1039.7710)), float(1.0), bool(true))), sqrt(1.0), 1.0, 1.0, 0.0)), max(_GLF_IDENTITY(float(mat2x3(injectionSwitch.y, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(1039.7710)), float(_GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, determinant(mat3(0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0)), 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))), length(vec2(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))))), bool(true))), sqrt(1.0), 1.0, 1.0, 0.0)), max(float(mat2x3(injectionSwitch.y, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(1039.7710)), float(1.0), bool(true))), sqrt(1.0), 1.0, 1.0, 0.0)), float(mat2x3(injectionSwitch.y, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(1039.7710)), float(1.0), bool(true))), sqrt(1.0), 1.0, 1.0, 0.0)))), _GLF_IDENTITY(float(mat2x3(injectionSwitch.y, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(1039.7710)), float(1.0), bool(true))), sqrt(1.0), 1.0, 1.0, 0.0)), (false ? _GLF_FUZZED(5860.4630) : float(mat2x3(injectionSwitch.y, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(1039.7710)), float(1.0), bool(true))), sqrt(1.0), 1.0, 1.0, 0.0)))))))))), bool(bvec4(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(1039.7710)), float(1.0), bool(true))), sqrt(1.0), 1.0, 1.0, 0.0)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, sqrt(1.0), 1.0, 1.0, 0.0)))))))), ! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), (false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) : vec2((injectionSwitch)[0], (injectionSwitch)[1]))), vec2(_GLF_FUZZED((397.033 - 74.60)), _GLF_FUZZED(1612.9071)), bvec2(false, _GLF_IDENTITY(false, ! (! (false)))))).y, 1.0, sqrt(1.0), 1.0, 1.0, 0.0)))))))), ! (! ((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), (false ? _GLF_FUZZED(injectionSwitch) : vec2((_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 1.0))))[0], (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch))))[1]))), vec2(_GLF_FUZZED(_GLF_IDENTITY((397.033 - 74.60), max(_GLF_IDENTITY((397.033 - 74.60), min((397.033 - 74.60), (397.033 - 74.60))), (397.033 - 74.60)))), _GLF_FUZZED(1612.9071)), bvec2(false, false))).y, 1.0, sqrt(1.0), 1.0, 1.0, 0.0)))))))))))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, float(mat2x3(injectionSwitch.y, 1.0, sqrt(1.0), 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-17.06) : _GLF_IDENTITY(0.0, (0.0) - 0.0))))))))), false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) || false), _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY((_GLF_IDENTITY(! (! (false)), false || (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) || false)))), false || (! (_GLF_IDENTITY(! _GLF_IDENTITY((false), bool(bool((false)))), (! (false)) || false))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! ((_GLF_IDENTITY(! (! (false)), false || (_GLF_IDENTITY(! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(bool(bvec3((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(bvec2(bool(bvec3((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false))))), false)))), false || (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (bool(! (_GLF_IDENTITY(false, ! (! (false))))))))))))), _GLF_IDENTITY((! (false)), ! (! ((! (false))))) || false))))))) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * determinant(mat3(sqrt(1.0), sqrt(1.0), 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0))))))))))) && true)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch, injectionSwitch)).x, (injectionSwitch.x) - length(vec4(0.0, 0.0, 0.0, 0.0)))) + 0.0) < injectionSwitch.y))), true, false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), 1.0, 1.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, round(length(normalize(1.0))), 0.0, 0.0), transpose(transpose(mat4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), 1.0, 1.0, 0.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, round(length(normalize(1.0))), 0.0, 0.0)))))) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec4(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false))), true)))), bool(bool(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec4(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false))), true)))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, true, _GLF_IDENTITY(false, (false) && true))))) && true), ! (! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false), ! (! ((false)))))), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false), ! _GLF_IDENTITY((! ((false))), true && ((! ((false)))))))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3((false), true, false), bvec3(bvec3(bvec3((false), true, false)))))), _GLF_IDENTITY(! (! ((false))), ! (! (! (! ((false))))))))))))) || false))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(vec4(injectionSwitch[1], 1.0, 1.0, 1.0))))).x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, determinant(mat3(0.0, 0.0, determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 1.0, 0.0)), 0.0, tan(abs(0.0)), 0.0, 0.0, 0.0, abs(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))), 0.0)))))), (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)) * 1.0), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 _GLF_struct_13 _GLF_struct_replacement_13 = _GLF_struct_13(_GLF_struct_3(_GLF_struct_0(true, mat4x2(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)))))), bvec3(true), _GLF_struct_1(ivec2(1), _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), (true ? _GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0)))) : _GLF_FUZZED(mat2(4.2, -84.49, -378.619, 6.6)))), (false ? _GLF_FUZZED(transpose(mat2(-9821.7121, 4.0, -96.43, -1504.2194))) : mat2(1.0))), mat3(1.0), vec4(1.0)), _GLF_struct_2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(vec2(1.0, 0.0))), _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(1.0, float(vec2(1.0, 0.0))), determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, determinant(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)))), (float(vec2(_GLF_IDENTITY(1.0, float(vec2(1.0, 0.0))), determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), determinant(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0))))) / 1.0))), mat3(mat4x3(_GLF_IDENTITY(mat3(1.0), _GLF_IDENTITY(transpose(transpose(mat3(1.0))), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)))), 0.0) + (transpose(transpose(mat3(1.0))))))))), bvec2(true), bvec4(true), mat4(1.0)), mat4x2(1.0)), subgroup_id * subgroup_size, _GLF_struct_7(_GLF_struct_4(mat2x4(1.0), vec3(1.0), bvec2(true), vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(101.251)), float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-7.7)))), bool(true))))), mat4(1.0), mat4x3(1.0), _GLF_struct_5(vec4(1.0), mat3x4(1.0), uvec2(1u), ivec2(1)), _GLF_struct_6(vec3(1.0), ivec3(1), mat4x2(1.0), true, vec2(1.0), mat4x3(1.0)), mat2x4(1.0)), bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), (! (_GLF_IDENTITY(true, false || (true)))) || false)))), _GLF_struct_10(mat3(1.0), _GLF_struct_8(mat2x4(1.0), ivec2(1), vec2(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, float(vec4(1.0, 0.0, 0.0, 1.0)))))), bvec4(true), mat4x2(1.0), mat3x2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-7.2)))))), clamp(clamp(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) - 0.0, max((1.0) - 0.0, (1.0) - 0.0))), _GLF_IDENTITY(1.0, max(1.0, 1.0))), clamp(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), max(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, _GLF_IDENTITY(max(1.0, 1.0), max(max(1.0, 1.0), max(1.0, 1.0))))))), clamp(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) - 0.0, ((1.0) - 0.0) / 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0))))))), bvec4(true)), uvec3(1u), mat2x3(1.0), _GLF_struct_9(ivec4(1))), _GLF_struct_12(1, _GLF_struct_11(mat3x2(1.0), ivec3(1), _GLF_IDENTITY(mat4(1.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY(mat4(1.0), (mat4(1.0)) * mat4(1.0)))), mat3x4(1.0), mat3x2(1.0)), 1.0));
 uint virtual_gid = workgroup_base + _GLF_struct_replacement_13.subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true))), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), false, false)), false || (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)), false, false))))))), true)))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (! ((false)))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 uint next_virtual_gid = workgroup_base + _GLF_struct_replacement_13.subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(_GLF_IDENTITY(4, int(_GLF_IDENTITY(ivec3(4, int(_GLF_ONE(1.0, injectionSwitch.y)), 1), (ivec3(4, int(_GLF_ONE(1.0, injectionSwitch.y)), 1)) * ivec3(1, 1, 1)))), max(4, 4)), _GLF_IDENTITY(4, (4) | (4)), 4)), 64, 2);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if((_GLF_IDENTITY(subgroup_local_id, ~ _GLF_IDENTITY((~ (subgroup_local_id)), min((~ (subgroup_local_id)), _GLF_IDENTITY((~ (subgroup_local_id)), ((~ (subgroup_local_id))) | ((~ (subgroup_local_id))))))) % _GLF_IDENTITY(2, _GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(-15830) : _GLF_IDENTITY(2, (2) << 0)), max((_GLF_IDENTITY(false ? _GLF_FUZZED(-15830) : _GLF_IDENTITY(2, _GLF_IDENTITY((2) << 0, 0 ^ ((2) << 0))), (_GLF_IDENTITY(false ? _GLF_FUZZED(-15830) : _GLF_IDENTITY(2, _GLF_IDENTITY((2) << 0, 0 ^ ((2) << 0))), (false ? _GLF_FUZZED(-15830) : _GLF_IDENTITY(2, _GLF_IDENTITY((2) << 0, 0 ^ (_GLF_IDENTITY((2) << 0, clamp(_GLF_IDENTITY((2) << 0, max((2) << 0, (2) << 0)), (2) << 0, (2) << 0)))))) >> 0)) >> 0)), (false ? _GLF_FUZZED(-15830) : _GLF_IDENTITY(2, (2) << 0)))), min(_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(-15830) : _GLF_IDENTITY(2, (2) << 0)), max((_GLF_IDENTITY(false ? _GLF_FUZZED(-15830) : _GLF_IDENTITY(2, _GLF_IDENTITY((2) << 0, 0 ^ ((2) << 0))), (_GLF_IDENTITY(false ? _GLF_FUZZED(-15830) : _GLF_IDENTITY(2, _GLF_IDENTITY((2) << 0, 0 ^ ((2) << 0))), (false ? _GLF_FUZZED(-15830) : _GLF_IDENTITY(2, _GLF_IDENTITY((2) << 0, 0 ^ (_GLF_IDENTITY((2) << 0, clamp(_GLF_IDENTITY((2) << 0, max((2) << 0, (2) << 0)), (2) << 0, (2) << 0)))))) >> 0)) >> 0)), (false ? _GLF_FUZZED(-15830) : _GLF_IDENTITY(2, (2) << 0)))), 1 * (_GLF_IDENTITY((false ? _GLF_FUZZED(-15830) : _GLF_IDENTITY(2, (2) << 0)), max((_GLF_IDENTITY(false ? _GLF_FUZZED(-15830) : _GLF_IDENTITY(2, _GLF_IDENTITY((2) << 0, 0 ^ ((2) << 0))), (_GLF_IDENTITY(false ? _GLF_FUZZED(-15830) : _GLF_IDENTITY(2, _GLF_IDENTITY((2) << 0, 0 ^ ((2) << 0))), (false ? _GLF_FUZZED(-15830) : _GLF_IDENTITY(2, _GLF_IDENTITY((2) << 0, 0 ^ (_GLF_IDENTITY((2) << 0, clamp(_GLF_IDENTITY((2) << 0, max((2) << 0, (2) << 0)), (2) << 0, (2) << 0)))))) >> 0)) >> 0)), (false ? _GLF_FUZZED(-15830) : _GLF_IDENTITY(2, (2) << 0)))))), _GLF_IDENTITY((false ? _GLF_FUZZED(-15830) : _GLF_IDENTITY(2, (2) << 0)), max((_GLF_IDENTITY(false ? _GLF_FUZZED(-15830) : _GLF_IDENTITY(2, _GLF_IDENTITY((2) << 0, 0 ^ ((2) << 0))), (_GLF_IDENTITY(false ? _GLF_FUZZED(-15830) : _GLF_IDENTITY(2, _GLF_IDENTITY((2) << 0, 0 ^ ((2) << 0))), (false ? _GLF_FUZZED(-15830) : _GLF_IDENTITY(2, _GLF_IDENTITY((2) << 0, 0 ^ (_GLF_IDENTITY((2) << 0, clamp(_GLF_IDENTITY((2) << 0, max((2) << 0, (2) << 0)), (2) << 0, (2) << 0)))))) >> 0)) >> 0)), (false ? _GLF_FUZZED(-15830) : _GLF_IDENTITY(2, (2) << 0)))))))) == 0)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, _GLF_ONE(1.0, injectionSwitch.y)))), injectionSwitch.y))))) || false)))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) >> 0)) ^ 0), 4)));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(mat4x2(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, 0.0, determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0))), injectionSwitch.x)) > injectionSwitch.y)))))), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false), true, true)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false), true, true)), bvec2(bvec3(_GLF_IDENTITY(bvec2(bvec4(bvec2(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false), true, true)), bvec2(bvec3(bvec2(bvec4(bvec2(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false), true, true)), false))), false))), false))))))))) || false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), false, true, true))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))), false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, ~ (~ (64))), 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), true && (bool(bvec3(false, false, false))))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 subgroupBarrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
