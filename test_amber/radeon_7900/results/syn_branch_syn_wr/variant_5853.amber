#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && (false)), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false))))), false)))) || false)))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = (0 & 51396); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) / 1.0) > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, 0.0, 1.0)))))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true && (false), ! (! (true && (false)))), false), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(true && (false), ! (! (true && (false)))), false)), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(true && (false), ! (! (true && (false)))), false)), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(true && (false), ! (! (true && (false)))), false))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(true && (false), ! (! (true && (false)))), false))))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(true && (false), ! (! (true && (false)))), false))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(true && (false), ! (! (true && (false)))), false))))))))))), false), bvec3(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY(true && (false), ! (! (true && (false)))), false)), false))))))))), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)) && (false), ! (! _GLF_IDENTITY((true && (false)), ! (! ((true && (false))))))), false)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec4(injectionSwitch.y, 0.0, 0.0, determinant(mat2(1.0, 0.0, sqrt(0.0), 1.0)))), (float(vec4(injectionSwitch.y, 0.0, 0.0, determinant(mat2(1.0, 0.0, sqrt(0.0), 1.0))))) - _GLF_IDENTITY(0.0, max(0.0, 0.0))))))))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter))) ^ _GLF_IDENTITY(0, (0) | (0))) != (-98118 & 0)); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
      }
     else
      {
      }
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bool(! (false)), ! (! (bool(! (false)))))))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, false)))))))
      {
      }
     else
      {
       barrier();
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
             else
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, int(int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), false)))))));
                  }
                 do
                  {
                   for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec4(_injected_loop_counter > 0, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))); _injected_loop_counter --)
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                         do
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
                            {
                             for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
                              {
                               barrier();
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                              {
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                {
                                 barrier();
                                }
                              }
                             else
                              {
                              }
                            }
                           barrier();
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              {
                               do
                                {
                                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
                                  {
                                   barrier();
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(8.0)))))));
                              }
                             barrier();
                            }
                          }
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))))))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                          barrier();
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           else
            {
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(5582.8248)), bool(false))), _GLF_FUZZED(2947.8403)), vec2(_GLF_FUZZED(-6446.9866), (injectionSwitch)[1]), bvec2(false, true))).y))))
          {
           do
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 ^ 0), max(_GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) | (_GLF_IDENTITY((0 ^ 0), (_GLF_IDENTITY((0 ^ 0), max((0 ^ 0), (0 ^ 0)))) * 1))), (0 ^ 0)))); _injected_loop_counter --)
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(2.4), _GLF_FUZZED(-8.6)), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).y))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 1.0, 0.0, tan(0.0), 1.0, 0.0, sqrt(0.0), 1.0, cos(0.0), 0.0, 1.0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mat4x3(-612.842, -5717.9933, 5.4, -8.8, -33.66, -4.5, 2.4, 9161.9490, 47.79, -99.44, 657.692, 595.906)) : mat4x3(injectionSwitch, 1.0, 0.0, tan(0.0), 1.0, 0.0, sqrt(0.0), 1.0, cos(0.0), 0.0, 1.0))))).x > injectionSwitch.y)))))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   else
    {
    }
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) | _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), subgroup_base), max(_GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), subgroup_base), (min(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), subgroup_base)) << 0u), min(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), subgroup_base))))), ~ (~ ((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, (0u ^ 0u) ^ (subgroup_base)), subgroup_base)), subgroup_base)))))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)))), (false ? _GLF_FUZZED(subgroup_id) : (~ (_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))))))), subgroup_base))), (false ? _GLF_FUZZED(subgroup_base) : (_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(subgroup_base, _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, 0u | (subgroup_base))) / _GLF_IDENTITY(1u, max(1u, 1u))))), subgroup_base)))))) >> 0u)) + subgroup_local_id, min(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) | _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), subgroup_base))), ~ (~ ((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, (0u ^ 0u) ^ (subgroup_base)), subgroup_base)), subgroup_base)))))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)))), (false ? _GLF_FUZZED(subgroup_id) : (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), max(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), _GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))))) * 1u)))))), _GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(subgroup_id) : subgroup_base)), subgroup_base))))), (false ? _GLF_FUZZED(subgroup_base) : (_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(subgroup_base, _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, 0u | (subgroup_base))) / 1u))), subgroup_base)))))) >> _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u, 0u))) + 0u))) + subgroup_local_id, max(workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) | _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), subgroup_base))), ~ (~ ((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, (0u ^ 0u) ^ (subgroup_base)), subgroup_base)), subgroup_base)))))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)))), (false ? _GLF_FUZZED(subgroup_id) : (~ (_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))))))), subgroup_base))), (false ? _GLF_FUZZED(subgroup_base) : (_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(subgroup_base, _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, 0u | (subgroup_base))) / 1u))), subgroup_base)))))) >> 0u)) + _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), (subgroup_base) | _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), subgroup_base))), ~ (~ ((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, (0u ^ 0u) ^ (subgroup_base)), subgroup_base)), subgroup_base)))))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)))), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(subgroup_id) : (~ (_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))))))), subgroup_base))), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, 0u + (_GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)))), min(_GLF_IDENTITY(subgroup_base, min(subgroup_base, _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, 0u | (subgroup_base))) / 1u))), subgroup_base))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, 0u + (_GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)))), min(_GLF_IDENTITY(subgroup_base, min(subgroup_base, _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, 0u | (subgroup_base))) / 1u))), subgroup_base)))))))) >> 0u)) + subgroup_local_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) | _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), subgroup_base))), ~ (~ ((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, (0u ^ 0u) ^ (subgroup_base)), subgroup_base)), subgroup_base)))))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)))), (false ? _GLF_FUZZED(subgroup_id) : (~ (_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))))))), subgroup_base))), (false ? _GLF_FUZZED(subgroup_base) : (_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(subgroup_base, _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, 0u | (subgroup_base))) / 1u))), subgroup_base)))))) >> 0u)) + subgroup_local_id, clamp(workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) | _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), subgroup_base))), ~ (~ ((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, (0u ^ 0u) ^ (subgroup_base)), subgroup_base)), subgroup_base)))))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)))), (false ? _GLF_FUZZED(subgroup_id) : (~ (_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))))))), subgroup_base))), (false ? _GLF_FUZZED(subgroup_base) : (_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(subgroup_base, _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, 0u | (subgroup_base))) / 1u))), subgroup_base)))))) >> 0u)) + subgroup_local_id, _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) | _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), subgroup_base))), ~ (~ ((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, (0u ^ 0u) ^ (subgroup_base)), subgroup_base)), subgroup_base)))))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)))), (false ? _GLF_FUZZED(subgroup_id) : (~ (_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))))))), subgroup_base))), (false ? _GLF_FUZZED(subgroup_base) : (_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(subgroup_base, _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, 0u | (subgroup_base))) / 1u))), subgroup_base)))))) >> 0u)) + subgroup_local_id, (workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) | _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), subgroup_base))), ~ (~ ((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, (0u ^ 0u) ^ (subgroup_base)), subgroup_base)), subgroup_base)))))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)))), (false ? _GLF_FUZZED(subgroup_id) : (~ (_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))))))), subgroup_base))), (false ? _GLF_FUZZED(subgroup_base) : (_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(subgroup_base, _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, 0u | (subgroup_base))) / 1u))), subgroup_base)))))) >> 0u)) + subgroup_local_id) >> 0u), workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) | _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), subgroup_base))), ~ (~ ((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, (0u ^ 0u) ^ (subgroup_base)), subgroup_base)), subgroup_base)))))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)))), (false ? _GLF_FUZZED(subgroup_id) : (~ (_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))))))), subgroup_base))), (false ? _GLF_FUZZED(subgroup_base) : (_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(subgroup_base, _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, 0u | (subgroup_base))) / 1u))), subgroup_base)))))) >> 0u)) + subgroup_local_id)), 0u | (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) | _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), subgroup_base))), ~ (~ ((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, (0u ^ 0u) ^ (subgroup_base)), subgroup_base)), subgroup_base)))))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)))), (false ? _GLF_FUZZED(subgroup_id) : (~ (_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))))))), subgroup_base))), (false ? _GLF_FUZZED(subgroup_base) : (_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(subgroup_base, _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, 0u | (subgroup_base))) / 1u))), subgroup_base)))))) >> 0u)) + subgroup_local_id, clamp(workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) | _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), subgroup_base))), ~ (~ ((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, (0u ^ 0u) ^ (subgroup_base)), subgroup_base)), subgroup_base)))))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)))), (false ? _GLF_FUZZED(subgroup_id) : (~ (_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))))))), subgroup_base))), (false ? _GLF_FUZZED(subgroup_base) : (_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(subgroup_base, _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, 0u | (subgroup_base))) / 1u))), subgroup_base)))))) >> 0u)) + subgroup_local_id, _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) | _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), subgroup_base))), ~ (~ ((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, (0u ^ 0u) ^ (subgroup_base)), subgroup_base)), subgroup_base)))))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)))), (false ? _GLF_FUZZED(subgroup_id) : (~ (_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))))))), subgroup_base))), (false ? _GLF_FUZZED(subgroup_base) : (_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(subgroup_base, _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, 0u | (subgroup_base))) / 1u))), subgroup_base)))))) >> 0u)) + subgroup_local_id, (workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) | _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), subgroup_base))), ~ (~ ((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, (0u ^ 0u) ^ (subgroup_base)), subgroup_base)), subgroup_base)))))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)))), (false ? _GLF_FUZZED(subgroup_id) : (~ (_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))))))), subgroup_base))), (false ? _GLF_FUZZED(subgroup_base) : (_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(subgroup_base, _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, 0u | (subgroup_base))) / 1u))), subgroup_base)))))) >> 0u)) + subgroup_local_id) >> 0u), workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) | _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), subgroup_base))), ~ (~ ((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, (0u ^ 0u) ^ (subgroup_base)), subgroup_base)), subgroup_base)))))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)))), (false ? _GLF_FUZZED(subgroup_id) : (~ (_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))))))), subgroup_base))), (false ? _GLF_FUZZED(subgroup_base) : (_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, min(subgroup_base, _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, 0u | (subgroup_base))) / 1u))), subgroup_base)))))) >> 0u)) + subgroup_local_id))))));
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) | 0)), (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) | 0))) >> (0 >> _GLF_IDENTITY(int(5), int(5))))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, (true) && true)), (bool(_GLF_IDENTITY(true, (true) && true))) || false))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, (true) && true)), (bool(_GLF_IDENTITY(true, (true) && true))) || false))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, (true) && true)), (bool(_GLF_IDENTITY(true, (true) && true))) || false))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true)), false || (_GLF_IDENTITY(bool(bvec3(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true)), ! (! (bool(bvec3(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true)))))))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 for(int _injected_loop_counter = (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) - 0))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)), ! (! (bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))))))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                 barrier();
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), true && (_GLF_IDENTITY(false, bool(bvec2(false, true)))))))
                    barrier();
                  }
                }
              }
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     else
      {
      }
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) * (0u ^ 1u)), (_GLF_IDENTITY(workgroup_base, (workgroup_base) * (0u ^ _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(1u, 0u + (1u))))))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 uint read = 0;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))))
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), true, true, true))))))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, false || (false)), true)), false || (bool(bvec2(_GLF_IDENTITY(false, false || (false)), true)))))))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), 1.0 * (injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY((false ? vec2(-176.069, -5.7) : vec2(-87.24, 523.770)), ((false ? vec2(-176.069, -5.7) : vec2(-87.24, 523.770))) + vec2(0.0, 0.0))) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))))) + sin(vec2(0.0, 0.0)), max((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED((false ? vec2(-176.069, -5.7) : vec2(-87.24, 523.770))), (_GLF_IDENTITY(_GLF_FUZZED((false ? vec2(-176.069, -5.7) : vec2(-87.24, 523.770))), mix(vec2(_GLF_FUZZED(-7.3), (_GLF_FUZZED((false ? vec2(-176.069, -5.7) : vec2(-87.24, 523.770))))[1]), vec2((_GLF_FUZZED((false ? vec2(-176.069, -5.7) : vec2(-87.24, 523.770))))[0], _GLF_FUZZED(-3.9)), bvec2(true, false)))) / vec2(1.0, 1.0)) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))))) + sin(vec2(0.0, 0.0)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((false ? vec2(-176.069, -5.7) : vec2(-87.24, 523.770))) : _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, min(_GLF_IDENTITY(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, (true ? false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch : _GLF_FUZZED(inversesqrt(injectionSwitch)))), false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))))))) + sin(vec2(0.0, 0.0)), clamp((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((false ? _GLF_IDENTITY(vec2(-176.069, -5.7), (vec2(-176.069, -5.7)) * mat2(1.0)) : vec2(-87.24, 523.770))) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))))) + sin(vec2(0.0, 0.0)), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((false ? vec2(-176.069, -5.7) : vec2(-87.24, 523.770))) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))))) + sin(vec2(0.0, 0.0)), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((_GLF_IDENTITY(false, ! (! (false))) ? vec2(-176.069, -5.7) : vec2(-87.24, 523.770))) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))))) + sin(vec2(0.0, 0.0))))))).y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((false ? vec2(-176.069, -5.7) : vec2(-87.24, 523.770))) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))))) + sin(vec2(0.0, 0.0))).y)), _GLF_IDENTITY(true && (! ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((false ? vec2(-176.069, -5.7) : vec2(-87.24, 523.770))) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))))) + sin(vec2(0.0, 0.0))).y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((false ? vec2(-176.069, -5.7) : vec2(-87.24, 523.770))) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))))) + sin(vec2(0.0, 0.0))).y, float(vec4(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY((false ? vec2(-176.069, -5.7) : vec2(-87.24, 523.770)), clamp((false ? vec2(-176.069, -5.7) : vec2(-87.24, 523.770)), (false ? vec2(-176.069, -5.7) : vec2(-87.24, 523.770)), _GLF_IDENTITY((false ? vec2(-176.069, -5.7) : vec2(-87.24, 523.770)), (false ? _GLF_FUZZED(injectionSwitch) : (false ? vec2(-176.069, -5.7) : vec2(-87.24, 523.770))))))) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))))) + sin(vec2(0.0, 0.0))).y, 1.0, 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((false ? vec2(-176.069, -5.7) : vec2(-87.24, 523.770))) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))))) + sin(vec2(0.0, 0.0))).y))))), (true && (! ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((false ? vec2(-176.069, -5.7) : vec2(-87.24, 523.770))) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))))) + sin(vec2(0.0, 0.0))).y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((false ? vec2(-176.069, -5.7) : vec2(-87.24, 523.770))) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))))) + sin(vec2(0.0, 0.0))).y, float(vec4(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY((false ? vec2(-176.069, -5.7) : vec2(-87.24, 523.770)), clamp((false ? vec2(-176.069, -5.7) : vec2(-87.24, 523.770)), (false ? vec2(-176.069, -5.7) : vec2(-87.24, 523.770)), _GLF_IDENTITY((false ? vec2(-176.069, -5.7) : vec2(-87.24, 523.770)), (false ? _GLF_FUZZED(injectionSwitch) : (false ? vec2(-176.069, -5.7) : vec2(-87.24, 523.770))))))) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))))) + sin(vec2(0.0, 0.0))).y, 1.0, 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((false ? vec2(-176.069, -5.7) : vec2(-87.24, 523.770))) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))))) + sin(vec2(0.0, 0.0))).y)))))) || false)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))) && true)), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))) && true)), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))) && true)), ! (! ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))) && true)))))) || false)))))), true))), (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(-22926) : int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = (0 & 91583); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + determinant(mat2(0.0, 0.0, 1.0, 0.0)))))) && true)))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED(_injected_loop_counter))))
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool(false))) || false))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false))), true && (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false))))))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec3(true, true, false))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), transpose(transpose(_GLF_IDENTITY(mat3x4(injectionSwitch, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-39.04)), float(1.0), bool(true))), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), mat4(1.0) * (mat3x4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))).x > injectionSwitch.y))))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4)))))); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) + 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true))), (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        barrier();
       for(int _injected_loop_counter = (1 & (0 ^ 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -19637)); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y)))) || false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
      {
      }
     else
      {
       barrier();
      }
    }
   barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), min(int(3), int(3))))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if((subgroup_local_id % 2) == 0)
  {
   do
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, _GLF_IDENTITY(0 + (1), (0 >> _GLF_IDENTITY(int(7), int(7))) + _GLF_IDENTITY((_GLF_IDENTITY(0 + (1), (0 + (1)) << 0)), max(_GLF_IDENTITY((_GLF_IDENTITY(0 + _GLF_IDENTITY((1), min((1), (1))), (0 + (1)) << 0)), max(_GLF_IDENTITY((_GLF_IDENTITY(0 + _GLF_IDENTITY((1), int(ivec4((1), 1, (0 ^ 1), 0))), (0 + (1)) << 0)), (true ? (_GLF_IDENTITY(0 + (1), (0 + (_GLF_IDENTITY(1, (1) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))) << 0)) : _GLF_FUZZED(-58915))), _GLF_IDENTITY((_GLF_IDENTITY(0 + (1), (0 + (1)) << 0)), ((_GLF_IDENTITY(0 + (1), (0 + (1)) << 0))) | ((_GLF_IDENTITY(0 + (1), (0 + (1)) << 0)))))), (_GLF_IDENTITY(0 + (1), (0 + (1)) << 0))))))))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       else
        {
         read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, min(4, 4)), 64, 2);
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(92015)))))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))), true)))), false, true), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), false, true), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), _GLF_IDENTITY(false, (false) && true), true), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), false, true))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(true, false || (true)))))), false, true), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), false, true))))), false)))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), false, true), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), false, true), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), false, true))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), false, true), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), false, true))))), false)))))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), false, true), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), false, true), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), false, true))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), false, true), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), false, true))))), false)))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), true && (_GLF_IDENTITY(bool(bvec3(false, true, true)), false || (_GLF_IDENTITY(bool(bvec3(false, true, true)), bool(bvec2(bool(bvec3(false, true, true)), false))))))))), false, true), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), false, true), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), false, true)))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), false, true), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), false, true))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), false, true), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), false, true))))))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), false, true), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), false, true))))), false)))))))))))))))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                    }
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           barrier();
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true))))))));
                   barrier();
                  }
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * sqrt(vec2(_GLF_IDENTITY(1.0, (1.0) * _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), mix(float(_GLF_FUZZED(-30.73)), float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), bool(true))) : _GLF_FUZZED(-6.4))), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)))), 1.0)))) - vec2(0.0, 0.0)).y))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 do
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   barrier();
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), false)), (bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), false))) && true)))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                        {
                         for(int _injected_loop_counter = (0 ^ int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               barrier();
                              }
                            }
                          }
                         barrier();
                        }
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))), bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), true, true))))), true))))))))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
                      }
                     barrier();
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))), true, false)))))))
                    {
                    }
                   else
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                      }
                     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                          {
                           barrier();
                          }
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) || false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), max(int(1), int(1))), int(1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)), (false ? _GLF_FUZZED(-96839) : _injected_loop_counter)), _injected_loop_counter)) < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) - 0)) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY((_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ((_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6)))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
          }
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))) || _GLF_IDENTITY(false, bool(bvec3(false, false, true))))) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
            barrier();
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) && true))))))
            barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, clamp(0, 0, 0))); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) - 0)))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter --))) ^ 0))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               else
                {
                }
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 << _GLF_IDENTITY(int(2), int(2))), (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(2), int(2))), ((0 << _GLF_IDENTITY(int(2), int(2)))) * (0 | 1))) / 1)); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))) - vec2(0.0, 0.0)).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))) - vec2(0.0, 0.0)).y, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))) - vec2(0.0, 0.0)).y : _GLF_FUZZED(-8565.1499)))) / 1.0)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), injectionSwitch[0])), injectionSwitch[1])).x > injectionSwitch.y))))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1, min(1, 1)) | 0)); _injected_loop_counter ++)
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, true)), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, true)))))))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, true)), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), true, true)))))))))))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(46547)))), ~ (~ (int(5)))), int(5)))))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   barrier();
                  }
                 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | (1 & 1))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               else
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 0.0, 0.0, 0.0))), injectionSwitch.y, injectionSwitch.y))) / 1.0)))))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) << 0)); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 1.0, 1.0, 0.0)))) / 1.0) > injectionSwitch.y))))
                        barrier();
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(float(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(86.32)), float(injectionSwitch.y), bool(true))))))))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         do
          {
           do
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((5.6)), _GLF_FUZZED(475.750)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((5.6)), _GLF_FUZZED(475.750)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((5.6)), _GLF_FUZZED(475.750)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((5.6)), _GLF_FUZZED(475.750)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))), false, false, false))))))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter))))) != 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * sqrt(vec2(1.0, 1.0))).x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x) - 0.0) < injectionSwitch.y))))
              {
               do
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) / 1))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
                {
                 for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(79.17)), bool(false))), _GLF_IDENTITY(1.0, (1.0) * 1.0))), injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), _GLF_IDENTITY(false, bool(bvec3(false, true, false))) || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 barrier();
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), (! ((false))) && true))) || false)))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, uint(_GLF_IDENTITY(uvec2(virtual_gid, uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 0.0 + (_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(clamp(uvec2(virtual_gid, _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(uint(uint(uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY(uint(uint(uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (true ? uint(uint(uint(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x)))) : _GLF_FUZZED(workgroup_size)))) << 0u))), uvec2(virtual_gid, uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(virtual_gid, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uvec2(virtual_gid, uint(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ uvec2(0u, 0u)), uvec2(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(virtual_gid, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uvec2(virtual_gid, uint(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ uvec2(0u, 0u)), clamp(_GLF_IDENTITY(uvec2(virtual_gid, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uvec2(virtual_gid, uint(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ uvec2(0u, 0u)), _GLF_IDENTITY(uvec2(virtual_gid, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uvec2(_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(subgroup_size)))) / 1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ uvec2(0u, 0u)), _GLF_IDENTITY(uvec2(virtual_gid, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uvec2(virtual_gid, uint(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ uvec2(0u, 0u)))), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), ~ (~ (clamp(uvec2(virtual_gid, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0)))), uvec2(_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))) >> 0u), uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat2x4(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(-6133.3289) : _GLF_ZERO(0.0, injectionSwitch.x))), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0))), _GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(uvec2(virtual_gid, uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY((uvec2(virtual_gid, uint(_GLF_ZERO(0.0, injectionSwitch.x)))), ((uvec2(virtual_gid, uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | ((uvec2(virtual_gid, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, min(0.0, 0.0))), float(_GLF_FUZZED((556.312 / 6.2))), bool(_GLF_IDENTITY(false, (false) || false))))), injectionSwitch.x)))))) ^ uvec2(0u, 0u)))))))))], 4, _GLF_IDENTITY(64, 0 ^ (64)), _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(-79421))));
                }
              }
             else
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             barrier();
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
                         barrier();
                         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                        }
                      }
                     else
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                        barrier();
                       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
        }
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec2((false), true))))))), true && (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, false || (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bool(bool(bvec3(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(bvec4((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), false))))))))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), (int(5)) ^ 0)) - int(_GLF_ZERO(0.0, injectionSwitch.x))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       barrier();
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x < injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
  }
 do
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))) && true))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, false, true)))));
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
           else
            {
             barrier();
            }
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               do
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec4(_GLF_IDENTITY(bool(false), ! (! (bool(false)))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))));
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), false))))))
                  barrier();
                }
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, true), true, true)))))))));
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, abs(0.0)))).y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! ((false) && true))))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 subgroupBarrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))).x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (int(4)) * (_GLF_IDENTITY(0 ^ 1, (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(0), int(0)), min(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(0), int(0)), int(int(0 >> _GLF_IDENTITY(int(0), int(0))))), _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(0), int(0)), max(0 >> _GLF_IDENTITY(int(0), int(0)), 0 >> _GLF_IDENTITY(int(0), int(0))))) * 1)))) + (_GLF_IDENTITY(0 ^ 1, max(0 ^ 1, 0 ^ 1))))))) - 0))) & _GLF_IDENTITY(1, clamp(1, 1, 1)))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     atomicStore(checker[_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, _GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))))], read, 4, 64, 4);
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))).x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-6.7)), bool(false))), float(mat3x4(injectionSwitch.y, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), cos(0.0), 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0))), 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y))))))))
        barrier();
      }
     for(int _injected_loop_counter = (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0)), 0 | (0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), true, false, false))))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) && true))))
          barrier();
        }
       else
        {
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter))) * 1), _injected_loop_counter)) != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 0)); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
