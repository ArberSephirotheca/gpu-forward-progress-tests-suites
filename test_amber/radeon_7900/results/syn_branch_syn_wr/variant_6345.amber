#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-50881))), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) * 1), (0) >> 0))) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (_GLF_IDENTITY(int(2), min(int(2), int(2)))))), int(ivec4(_GLF_IDENTITY(0, _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), (true ? 0 : _GLF_FUZZED(-50881))), _GLF_IDENTITY(0, (0) >> 0)), ~ (_GLF_IDENTITY(~ (min(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), (true ? 0 : _GLF_FUZZED(-50881))), _GLF_IDENTITY(0, (0) >> 0))), (~ (min(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), (true ? 0 : _GLF_FUZZED(-50881))), _GLF_IDENTITY(0, (0) >> 0)))) | (_GLF_IDENTITY(~ (min(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), (true ? 0 : _GLF_FUZZED(-50881))), _GLF_IDENTITY(0, (0) >> 0))), (~ (min(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), (true ? 0 : _GLF_FUZZED(-50881))), _GLF_IDENTITY(0, (0) >> 0)))) / 1)))))) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (_GLF_IDENTITY(int(2), max(int(2), int(2)))))), 0, 0, (0 >> _GLF_IDENTITY(int(0), int(0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (true ? _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) : _GLF_FUZZED(_injected_loop_counter)))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), ((_GLF_IDENTITY(false, (false) && true))) && true) && true), (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - determinant(_GLF_IDENTITY(mat2(0.0, 0.0, 0.0, 0.0), (_GLF_IDENTITY(mat2(0.0, 0.0, 0.0, 0.0), (mat2(0.0, 0.0, 0.0, 0.0)) - mat2(0.0, 0.0, 0.0, 0.0))) - mat2(0.0, 0.0, 0.0, 0.0)))))), determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, determinant(mat2(determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-233.113))), 0.0, 0.0)))), 0.0, 0.0, 0.0)), 1.0, sqrt(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(46.38))), max(1.0, 1.0))), sqrt(0.0), cos(0.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) + sqrt(vec2(0.0, 0.0))).x), _GLF_ZERO(0.0, injectionSwitch.x))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) + sqrt(vec2(0.0, 0.0))).x), _GLF_ZERO(0.0, injectionSwitch.x))), (false ? _GLF_FUZZED(-8250.5519) : _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) + sqrt(vec2(0.0, 0.0))).x), _GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) + sqrt(vec2(0.0, 0.0))).x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) + sqrt(vec2(0.0, 0.0))).x), _GLF_ZERO(0.0, injectionSwitch.x))), max(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) + sqrt(vec2(0.0, 0.0))).x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) + sqrt(vec2(0.0, 0.0))).x), _GLF_ZERO(0.0, injectionSwitch.x))))))), 0.0, 0.0)))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(_GLF_IDENTITY(bool(! ((false))), _GLF_IDENTITY(! (! (bool(! ((false))))), bool(bool(! (! (bool(! ((false))))))))))))) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-74318))) >> _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (_GLF_IDENTITY(_GLF_IDENTITY(int(4), ~ (~ (int(4)))), 1 * (int(4)))))))); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))), injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(-26.44, -926.599)))).x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED((115.690))), bool(false)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true, false))))
              break;
             barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) - 0)), (~ (0)) ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(0.0 + (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), max(0.0 + (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), 0.0 + (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(12.70), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-9.6)), bvec2(true, false))))), injectionSwitch)).y, max(injectionSwitch.y, injectionSwitch.y)))))))), ! (! (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), mix(float(_GLF_FUZZED(-2.4)), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), bool(true))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((0 ^ 1) | 1)); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
              barrier();
            }
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(true, true && (true)), true, false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(true, true && (true)), true, false)), ! (! (bool(bvec4(false, _GLF_IDENTITY(true, true && (true)), true, false)))))), ! (! (! (_GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(true, true && (true)), true, false)), ! (! (bool(bvec4(false, _GLF_IDENTITY(true, true && (true)), true, false)))))))))))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))) || (bool(bvec4(false, true, true, false))))), false || _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, _GLF_IDENTITY(false, ! (! (false))))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-5.9))), injectionSwitch.y)) * (injectionSwitch)).y), true && ((injectionSwitch.x > injectionSwitch.y)))) || (bool(bvec4(false, true, true, false)))))), ((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true))), (! (bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))) && true)))))), _GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))) || (bool(bvec4(false, true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true), false))))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y) && true))))))), true && ((! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))) || (bool(bvec4(false, true, true, false))))), false || _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, _GLF_IDENTITY(false, ! (! (false))))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-5.9))), injectionSwitch.y)) * (injectionSwitch)).y), true && ((injectionSwitch.x > injectionSwitch.y)))) || (bool(bvec4(false, true, true, false)))))), ((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true))), (! (bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))) && true)))))), _GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))) || (bool(bvec4(false, true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true), false))))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y) && true))))))))))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && _GLF_IDENTITY(true, true && (true))) || (false)), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, sqrt(1.0) * (injectionSwitch.y)))) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))), true && (bool(bool(injectionSwitch.x > injectionSwitch.y)))))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))), true && (bool(bool(injectionSwitch.x > injectionSwitch.y))))))) && true))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), true && (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))
      {
       barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, false, false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) - 0.0), injectionSwitch.x)) > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, true && (true)))))) || false, bool(bvec4((false) || false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false || _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))), ((injectionSwitch.x > injectionSwitch.y)) || false), ! (! (false || _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))), ((injectionSwitch.x > injectionSwitch.y)) || false)))))))))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, false || (false)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), true)), ! (! (bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, false || (false)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), true)), ! (! (bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, false || (false)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), true)), ! (! (bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), (_GLF_IDENTITY(bool(bvec4(_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(! (! (! (true))), ! (! (! (! (! (true))))))))), (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) && true), false))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), true)), ! (! (bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) && true)) && true)) && true))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, bool(bvec2(false, false))) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))) && true))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), _GLF_IDENTITY(true, (true) || false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))))), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, false, false)))) && true)))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), false, true))), ! (! (_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), false, true)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), false, true)))), ! (! (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), false, _GLF_IDENTITY(true, false || (true))), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, true && (true)), false, _GLF_IDENTITY(true, false || (true))), false))))))))))), true && (true)), true, true)))), ((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false))), false, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), false, true)))), ! (! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(false, ! (! (false))), true)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(bool(bvec3(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(false, ! (! (false))), true)), false, true), bvec3(bvec4(bvec3(bool(bvec3(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(false, ! (! (false))), true)), false, true), true)))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(bool(bvec3(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(false, ! (! (false))), true)), false, true), bvec3(bvec4(bvec3(bool(bvec3(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(false, ! (! (false))), true)), false, true), true)))), false || (bool(_GLF_IDENTITY(bvec3(bool(bvec3(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(false, ! (! (false))), true)), false, true), bvec3(bvec4(bvec3(bool(bvec3(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(false, ! (! (false))), true)), false, true), true)))))), true, false, true))))))))))), true && (true)), true, true))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true), (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), false, true))), ! (! (_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), false, true)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))), false, _GLF_IDENTITY(true, ! (! (true))))))), ! (! (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), false, _GLF_IDENTITY(true, false || (true))), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, true && (true)), false, _GLF_IDENTITY(true, false || (true))), false))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, true && (true)), false, _GLF_IDENTITY(true, false || (true))), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, true && (true)), false, _GLF_IDENTITY(true, false || (true))), false)))))))))))))), true && (true)), true, true)))), ((_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false))), false, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), false, true)))), ! (! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(false, ! (! (false))), true)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(bool(bvec3(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(false, ! (! (false))), true)), false, true), bvec3(bvec4(bvec3(bool(bvec3(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(false, ! (! (false))), true)), false, true), true)))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(bool(bvec3(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(false, ! (! (false))), true)), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(bool(bvec3(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(false, ! (! (false))), true)), false, true), true)), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(bool(bvec3(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(false, ! (! (false))), true)), false, true), true)), bvec3(bvec3(bvec3(bvec4(bvec3(bool(bvec3(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(false, ! (! (false))), true)), false, true), true))))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec4(bvec3(bool(bvec3(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(false, ! (! (false))), true)), false, true), true)), bvec3(bvec3(bvec3(bvec4(bvec3(bool(bvec3(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(false, ! (! (false))), true)), false, true), true))))))))))))), _GLF_IDENTITY(false || (bool(_GLF_IDENTITY(bvec3(bool(bvec3(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(false, ! (! (false))), true)), false, true), bvec3(bvec4(bvec3(bool(bvec3(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(false, ! (! (false))), true)), false, true), true))))), bool(bvec4(false || (bool(_GLF_IDENTITY(bvec3(bool(bvec3(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(false, ! (! (false))), true)), false, true), bvec3(bvec4(bvec3(bool(bvec3(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(false, ! (! (false))), true)), false, true), true))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), true, false, true))))))))))), true && (true)), true, true))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)) || false)))
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0), (mat2x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0)) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0), (mat2x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0)) - mat2x3(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(9692.9858)), float(0.0), bool(true))), 0.0))))))))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            break;
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, true, _GLF_IDENTITY(true, bool(bvec3(true, true, true))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           else
            {
            }
          }
        }
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) || false)), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << 0))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true)))))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, false))))
              barrier();
             return;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), bool(bvec2(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), false)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))) && true)))), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, 0.0, 0.0, abs(0.0), 0.0)), max(float(mat3x2(injectionSwitch.y, 1.0, 0.0, 0.0, abs(0.0), 0.0)), float(mat3x2(injectionSwitch.y, 1.0, 0.0, 0.0, abs(0.0), 0.0))))))))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))))) && true), true))))))), true, false, false)), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false, true))))), bool(bvec3(bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false, true))))), true, true))))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-98.75, -6.4)))).y))))), false, true))))), bool(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false, true)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false, true)))))))), true, true)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false, false))) && true)))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))))))
        return;
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y) && true)))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, abs(exp(vec2(0.0, 0.0))) * (injectionSwitch)).y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, abs(exp(vec2(0.0, 0.0))) * (injectionSwitch)).y))))))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y), true && (! (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y)))))))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, true && (false)), false, true), bvec3(bvec4(bvec3(false, false, true), false)))))))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) && true)))
    barrier();
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), ((_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)) : _GLF_FUZZED(mat3x2(-6.7, -2.9, 321.623, 311.619, -7.4, 6.9)[2]))).x > injectionSwitch.y)) || false))))
  {
   for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), ~ (~ (_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(2, 0 | (_GLF_IDENTITY(2, clamp(2, 2, 2)))), 2)))))))) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, max(gl_WorkGroupID.x, gl_WorkGroupID.x))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), ~ (~ (subgroup_id * subgroup_size))), (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), ~ (~ (subgroup_id * subgroup_size)))) | 0u), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u), ~ (~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u)))) * subgroup_size, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u), ~ (~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u)))) * subgroup_size, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u), ~ (~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u)))) * subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u), ~ (~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u)))) * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u), ~ (~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u)))) * subgroup_size)), 1u, 0u))), (_GLF_IDENTITY(true ? _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, 0u | (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))), _GLF_IDENTITY(0u | (subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u, (0u) | (0u)) | (subgroup_size))), (1u ^ 0u) * (0u | (subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), _GLF_IDENTITY(clamp(uvec4(subgroup_size, 0u, 0u, 0u), uvec4(subgroup_size, 0u, 0u, 0u), uvec4(subgroup_size, 0u, 0u, 0u)), (uvec4(67636u, 14570u, 35070u, 171430u) & uvec4(0u, 0u, 0u, 0u)) | (clamp(uvec4(subgroup_size, 0u, 0u, 0u), uvec4(subgroup_size, 0u, 0u, 0u), uvec4(subgroup_size, 0u, 0u, 0u))))))))))))) : _GLF_FUZZED(workgroup_size), ~ (~ (_GLF_IDENTITY(true ? _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, 0u | (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))), _GLF_IDENTITY(0u | (subgroup_id * _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size))), _GLF_IDENTITY((_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_size) : 1u)) ^ 0u), ((_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_size) : 1u)) ^ 0u)) / 1u) * (0u | (subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), clamp(uvec4(subgroup_size, 0u, 0u, 0u), uvec4(subgroup_size, 0u, _GLF_IDENTITY(0u, (0u) | (0u)), 0u), uvec4(subgroup_size, 0u, 0u, 0u))))))))))) : _GLF_FUZZED(workgroup_size), (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u) * _GLF_IDENTITY(subgroup_size, 0u | (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))), _GLF_IDENTITY(_GLF_IDENTITY(0u | (subgroup_id * _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size))), (0u | (subgroup_id * _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)))) - 0u), (1u ^ 0u) * (0u | (subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), clamp(uvec4(subgroup_size, 0u, 0u, 0u), uvec4(subgroup_size, 0u, 0u, 0u), _GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) + (uvec4(subgroup_size, 0u, 0u, 0u))))))))))))) : _GLF_FUZZED(workgroup_size)) | (true ? _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, 0u | (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))), _GLF_IDENTITY(0u | (subgroup_id * _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size))), (1u ^ 0u) * (0u | (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), clamp(uvec4(subgroup_size, 0u, 0u, 0u), uvec4(subgroup_size, 0u, 0u, 0u), uvec4(subgroup_size, 0u, 0u, 0u))))))), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), clamp(uvec4(subgroup_size, 0u, 0u, 0u), uvec4(subgroup_size, 0u, 0u, 0u), uvec4(subgroup_size, 0u, 0u, 0u))))))), (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), clamp(uvec4(subgroup_size, 0u, 0u, 0u), uvec4(subgroup_size, 0u, 0u, 0u), uvec4(subgroup_size, 0u, 0u, 0u))))))))), ((uint(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))), 1u, 1u)), min(uint(uvec4(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), clamp(uvec4(subgroup_size, 0u, 0u, 0u), uvec4(subgroup_size, 0u, 0u, 0u), uvec4(subgroup_size, 0u, 0u, 0u))))))), (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), clamp(uvec4(subgroup_size, 0u, 0u, 0u), uvec4(subgroup_size, 0u, 0u, 0u), uvec4(subgroup_size, 0u, 0u, 0u))))))))), ((uint(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))), 1u, 1u)), uint(uvec4(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), clamp(uvec4(subgroup_size, 0u, 0u, 0u), uvec4(subgroup_size, 0u, 0u, 0u), uvec4(subgroup_size, 0u, 0u, 0u))))))), (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec4(subgroup_size, 0u, 0u, 0u), clamp(uvec4(subgroup_size, 0u, 0u, 0u), uvec4(subgroup_size, 0u, 0u, 0u), uvec4(subgroup_size, 0u, 0u, 0u))))))))), ((uint(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))), 1u, 1u))))))))) : _GLF_FUZZED(workgroup_size))))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) || false), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))) || false, (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))) || false, ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), ! (! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))) || false)))) || false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))) || false, true && (_GLF_IDENTITY((bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))) || false, true && (_GLF_IDENTITY((bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))) || false, ((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))), (bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))) && true)) || false) || false))))))), (false) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), ! (! ((false)))), ! _GLF_IDENTITY((! (! (false))), ! (_GLF_IDENTITY(! ((! (! (false)))), false || (_GLF_IDENTITY(! ((! (! (false)))), ! (! (! ((! (! (false))))))))))))))) || false))) && true)) && _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) < injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) < injectionSwitch.y))))))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bvec4(bool(injectionSwitch.x > injectionSwitch.y), true, false, false)))))))))
        barrier();
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(atan(-9.4, 357.230)) : injectionSwitch.x)) > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))) || false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))));
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-0.4, -3249.1751)))).x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-0.4, -3249.1751)))), (true ? _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-0.4, -3249.1751)))) : _GLF_FUZZED(injectionSwitch))).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((false) || false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false) || false, ! (! ((false) || false)))), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY((false) || false, ! (! ((false) || false))))), ! (! (bool(! (_GLF_IDENTITY((false) || false, ! (! ((false) || false)))))))))))))))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-5.5)), bool(false)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))), _GLF_IDENTITY(false, ! (! (false))) || _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) || false)))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true), bool(bool(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true))))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))));
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u) + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) * (_GLF_IDENTITY(int(1), (int(1)) >> 0)))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) * (_GLF_IDENTITY(int(1), (int(1)) >> 0)))))), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) * (_GLF_IDENTITY(int(1), (int(1)) >> 0)))))))))) && true); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(((72.67) + 8853.5620))), vec2(_GLF_FUZZED(-2842.3573), (injectionSwitch)[1]), bvec2(false, true))).y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > 0))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false), false)))), false || (bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false), false)))))))))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
      }
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, true, false))))) || (false))))
          barrier();
         barrier();
        }
      }
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)), _GLF_IDENTITY((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), _GLF_IDENTITY(uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)), max(uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)), uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u))))) | 0u))), (true ? _GLF_IDENTITY(workgroup_base + subgroup_base, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)), _GLF_IDENTITY(_GLF_IDENTITY((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), _GLF_IDENTITY(uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)), max(uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)), uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u))))), max(_GLF_IDENTITY(_GLF_IDENTITY((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), _GLF_IDENTITY(uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)), max(uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)), uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u))))), (_GLF_IDENTITY((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), _GLF_IDENTITY(uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)), max(uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)), uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)))))) | (_GLF_IDENTITY((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), _GLF_IDENTITY(uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)), max(uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)), uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u))))))), _GLF_IDENTITY((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), _GLF_IDENTITY(uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)), max(uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)), uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u))))))) | 0u))) : _GLF_FUZZED(workgroup_size))), _GLF_IDENTITY(0u, 1u * (0u)) ^ (workgroup_base + subgroup_base)) + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, 0u | (_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 0u, 0u, 0u))))) + _GLF_IDENTITY(_GLF_IDENTITY(1, (0 << _GLF_IDENTITY(int(3), int(3))) ^ (1)), (1) >> _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), clamp(0, 0, 0)))) % _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), ((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (0 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, ~ (~ (3)))))) ^ (1)), (1) >> _GLF_IDENTITY(0, clamp(0, 0, 0)))) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), max(subgroup_size, subgroup_size))) / 1u)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)), _GLF_IDENTITY((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), _GLF_IDENTITY(uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)), max(uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)), uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u))))) | 0u))), (true ? _GLF_IDENTITY(workgroup_base + subgroup_base, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)), _GLF_IDENTITY(_GLF_IDENTITY((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), _GLF_IDENTITY(uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)), max(uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)), uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u))))), max(_GLF_IDENTITY(_GLF_IDENTITY((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), _GLF_IDENTITY(uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)), max(uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)), uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u))))), (_GLF_IDENTITY((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), _GLF_IDENTITY(uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)), max(uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)), uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)))))) | (_GLF_IDENTITY((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), _GLF_IDENTITY(uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)), max(uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)), uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u))))))), _GLF_IDENTITY((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), _GLF_IDENTITY(uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)), max(uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)), uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u))))))) | 0u))) : _GLF_FUZZED(workgroup_size))), _GLF_IDENTITY(0u, 1u * (0u)) ^ (workgroup_base + subgroup_base)) + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, 0u | (_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 0u, 0u, 0u))))) + _GLF_IDENTITY(_GLF_IDENTITY(1, (0 << _GLF_IDENTITY(int(3), int(3))) ^ (1)), (1) >> _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), clamp(0, 0, 0)))) % _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), ((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (0 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, ~ (~ (3)))))) ^ (1)), (1) >> _GLF_IDENTITY(0, clamp(0, 0, 0)))) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), max(subgroup_size, subgroup_size))) / 1u)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)), _GLF_IDENTITY((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), _GLF_IDENTITY(uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)), max(uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)), uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u))))) | 0u))), (true ? _GLF_IDENTITY(workgroup_base + subgroup_base, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)), _GLF_IDENTITY(_GLF_IDENTITY((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), _GLF_IDENTITY(uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)), max(uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)), uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u))))), max(_GLF_IDENTITY(_GLF_IDENTITY((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), _GLF_IDENTITY(uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)), max(uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)), uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u))))), (_GLF_IDENTITY((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), _GLF_IDENTITY(uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)), max(uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)), uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)))))) | (_GLF_IDENTITY((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), _GLF_IDENTITY(uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)), max(uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)), uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u))))))), _GLF_IDENTITY((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), _GLF_IDENTITY(uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)), max(uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u)), uint(uvec4((uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))), 0u, 0u, 1u))))))) | 0u))) : _GLF_FUZZED(workgroup_size))), _GLF_IDENTITY(0u, 1u * (0u)) ^ (workgroup_base + subgroup_base)) + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, 0u | (_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 0u, 0u, 0u))))) + _GLF_IDENTITY(_GLF_IDENTITY(1, (0 << _GLF_IDENTITY(int(3), int(3))) ^ (1)), (1) >> _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), clamp(0, 0, 0)))) % _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), ((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (0 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, ~ (~ (3)))))) ^ (1)), (1) >> _GLF_IDENTITY(0, clamp(0, 0, 0)))) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), max(subgroup_size, subgroup_size))) / 1u))) >> 0u)) >> 0u);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(835.406)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), true && (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), bool(bool((_GLF_IDENTITY(false, (false) || false))))))) || _GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (false) && true), (injectionSwitch.x > injectionSwitch.y)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, mix(float(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x), float(_GLF_FUZZED(-593.209)), bool(false))))) > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x) - length(vec3(0.0, 0.0, 0.0))) > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), (false ? _GLF_FUZZED(vec2(-3.9, 34.97)) : (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(((injectionSwitch) * mat2(1.0))[_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))], ((injectionSwitch) * mat2(1.0))[1]), vec2(_GLF_FUZZED(-9.7), _GLF_FUZZED(87.14)), bvec2(false, false)))))).y), ! (! ((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-2.2, -4.6)) : injectionSwitch))[0], injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), (false ? _GLF_FUZZED(vec2(-3.9, 34.97)) : (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(((injectionSwitch) * mat2(1.0))[0], ((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch))) * mat2(1.0))[1]), vec2(_GLF_FUZZED(-9.7), _GLF_FUZZED(87.14)), bvec2(false, false)))))).y)))))))))) && true))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-1.0))) > injectionSwitch.y))))
          barrier();
         return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), ((_GLF_IDENTITY(false, (false) && true))) || false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))));
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint read = 0;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * 1), _GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)))) != 0); _injected_loop_counter --)
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, (64) | (0 >> _GLF_IDENTITY(int(6), int(6)))), _GLF_IDENTITY(4, _GLF_IDENTITY(clamp(_GLF_IDENTITY(4, int(ivec3(4, 0, 1))), _GLF_IDENTITY(4, ~ (~ (4))), 4), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(4, int(ivec3(4, 0, 1))), _GLF_IDENTITY(4, ~ (~ (4))), 4), (clamp(_GLF_IDENTITY(4, int(ivec3(4, 0, 1))), _GLF_IDENTITY(4, ~ (~ (4))), 4)) + 0)) ^ 0)));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
         barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
  {
   do
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), true && ((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_IDENTITY((subgroup_local_id % 2) == 0, ((subgroup_local_id % 2) == 0) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), bool(bvec4(true && (_GLF_DEAD(false)), true, true, false)))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, sqrt(0.0) + (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
           return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
              {
              }
             else
              {
               barrier();
              }
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec2(0, 1)))) / 1) | int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, tan(vec2(0.0, 0.0)) + (injectionSwitch)).x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)))))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((-7949.5288 - float(194418u)))), bool(false))) > injectionSwitch.y))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                     barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)), min(dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0))))), 0.0))).y, min(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y, injectionSwitch.y)))), injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(692.011) : injectionSwitch.y))))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(692.011) : injectionSwitch.y)))))) || false))));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY((0 | 0), int(ivec4((0 | 0), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2))) / 1)) - 0)) >> _GLF_IDENTITY(int(2), int(2))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), (((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))) >> 0)) | (((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))))); _GLF_IDENTITY(_injected_loop_counter ++, 0 + (_injected_loop_counter ++)))
                    {
                     return;
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
                        barrier();
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))) || false))
                        barrier();
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       barrier();
                      }
                    }
                  }
                 else
                  {
                  }
                }
              }
            }
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (_GLF_IDENTITY(! (false || (false)), true && (! (false || (false))))))), true, false)))))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 return;
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), false || _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec4(false, true, true, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec4(false, true, true, true))))), bool(bvec4((_GLF_IDENTITY(bool(bvec4(false, true, true, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec4(false, true, true, true))))), true, true, true)))))) && true)))
                return;
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
         return;
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))));
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))) || false)))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1)))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - abs(0.0))), ((injectionSwitch.x > injectionSwitch.y)) || false)))))))
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(8915) : 0)), (0) >> 0), 0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                }
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
   read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(buf[virtual_gid], clamp(buf[virtual_gid], buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], ~ (_GLF_IDENTITY(~ (buf[virtual_gid]), (~ (buf[virtual_gid])) >> 0u))), _GLF_IDENTITY((buf[virtual_gid]) * 1u, (_GLF_IDENTITY((buf[virtual_gid]) * 1u, uint(uvec3((_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))], ~ (_GLF_IDENTITY(~ (buf[_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))]), uint(uvec4(~ (buf[_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))]), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))))) * 1u, 0u, 1u)))) - 0u))))), max(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(buf[virtual_gid], clamp(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))], buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]) * 1u, (_GLF_IDENTITY((buf[virtual_gid]) * 1u, uint(uvec3(_GLF_IDENTITY((buf[virtual_gid]) * 1u, clamp((buf[virtual_gid]) * 1u, (buf[virtual_gid]) * 1u, (buf[virtual_gid]) * 1u)), 0u, 1u)))) - 0u)))), (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))) ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(buf[virtual_gid], clamp(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))], buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]) * 1u, (_GLF_IDENTITY((buf[virtual_gid]) * 1u, uint(uvec3(_GLF_IDENTITY((buf[virtual_gid]) * 1u, clamp((buf[virtual_gid]) * _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), (buf[virtual_gid]) * 1u, _GLF_IDENTITY((buf[virtual_gid]) * 1u, clamp((buf[virtual_gid]) * 1u, (buf[virtual_gid]) * 1u, (buf[virtual_gid]) * 1u)))), 0u, 1u)))) - 0u))))) + 0u)), uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(_GLF_IDENTITY(num_workgroup, 0u ^ (_GLF_IDENTITY(num_workgroup, clamp(num_workgroup, num_workgroup, num_workgroup))))) : _GLF_IDENTITY(buf[virtual_gid], clamp(buf[_GLF_IDENTITY(virtual_gid, 0u + (virtual_gid))], buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]) * 1u, (_GLF_IDENTITY((buf[virtual_gid]) * 1u, uint(uvec3((buf[virtual_gid]) * 1u, 0u, 1u)))) - 0u)))), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(_GLF_IDENTITY(num_workgroup, 0u ^ (_GLF_IDENTITY(num_workgroup, clamp(num_workgroup, num_workgroup, num_workgroup))))) : _GLF_IDENTITY(buf[virtual_gid], clamp(buf[_GLF_IDENTITY(virtual_gid, 0u + (virtual_gid))], buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]) * 1u, (_GLF_IDENTITY((buf[virtual_gid]) * 1u, uint(uvec3((buf[virtual_gid]) * 1u, 0u, 1u)))) - 0u))))) | 0u)), 0u + ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), true && (false)) ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(buf[virtual_gid], clamp(buf[virtual_gid], buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY((buf[virtual_gid]) * 1u, (_GLF_IDENTITY((buf[virtual_gid]) * 1u, uint(uvec3((buf[virtual_gid]) * 1u, 0u, 1u)))) - 0u), (_GLF_IDENTITY((buf[virtual_gid]) * 1u, (_GLF_IDENTITY((buf[virtual_gid]) * _GLF_IDENTITY(1u, min(1u, 1u)), uint(uvec3((buf[virtual_gid]) * 1u, 0u, 1u)))) - 0u)) / 1u))))))), 1u, 0u))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY(false, true && (false))))), bool(bvec3(! (! (! (_GLF_IDENTITY(false, true && (false))))), false, true)))))) ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (_GLF_FUZZED(num_workgroup)) >> 0u) : _GLF_IDENTITY(buf[virtual_gid], clamp(buf[virtual_gid], buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((_GLF_IDENTITY(buf[virtual_gid], uint(_GLF_IDENTITY(uvec3(buf[virtual_gid], 1u, 1u), (uvec3(buf[virtual_gid], 1u, 1u)) / uvec3(1u, 1u, 1u))))) * 1u, (_GLF_IDENTITY((buf[virtual_gid]) * 1u, _GLF_IDENTITY(uint(uvec3((buf[virtual_gid]) * 1u, 0u, _GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, 0u ^ (1u))) << 0u, (true ? (_GLF_IDENTITY(1u, 0u ^ (1u))) << 0u : _GLF_FUZZED(virtual_gid)))))), min(uint(uvec3((buf[virtual_gid]) * 1u, 0u, _GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, 0u ^ (1u))) << 0u, (true ? (_GLF_IDENTITY(1u, 0u ^ (1u))) << 0u : _GLF_FUZZED(virtual_gid)))))), _GLF_IDENTITY(uint(uvec3((buf[virtual_gid]) * 1u, 0u, _GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, 0u ^ (1u))) << 0u, (true ? (_GLF_IDENTITY(1u, 0u ^ (1u))) << 0u : _GLF_FUZZED(virtual_gid)))))), (_GLF_IDENTITY(uint(uvec3((buf[virtual_gid]) * 1u, 0u, _GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, 0u ^ (1u))) << 0u, (true ? (_GLF_IDENTITY(1u, 0u ^ (1u))) << 0u : _GLF_FUZZED(virtual_gid)))))), (uint(uvec3((buf[virtual_gid]) * 1u, 0u, _GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, 0u ^ (1u))) << 0u, (true ? (_GLF_IDENTITY(1u, 0u ^ (1u))) << 0u : _GLF_FUZZED(virtual_gid))))))) | (uint(uvec3((buf[virtual_gid]) * 1u, 0u, _GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, 0u ^ (1u))) << 0u, (true ? (_GLF_IDENTITY(1u, 0u ^ (1u))) << 0u : _GLF_FUZZED(virtual_gid))))))))) | 0u))))) - 0u))))), ((_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(buf[virtual_gid], clamp(buf[virtual_gid], buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]) * 1u, (_GLF_IDENTITY((_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid]))) * 1u, uint(uvec3((buf[virtual_gid]) * 1u, 0u, 1u)))) - 0u)))))) - 0u)))), 4, _GLF_IDENTITY(64, 0 | _GLF_IDENTITY((64), ((64)) + 0)), 2);
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / cos(0.0))))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), ((int(_GLF_ZERO(0.0, injectionSwitch.x)))) - (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4))))))), (_GLF_IDENTITY(~ (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x))), min(~ (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mat2(1.0) * (mat2(1.0) * (injectionSwitch))), mat2(1.0) * (injectionSwitch)))).x))), ~ _GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), ((int(_GLF_ZERO(0.0, injectionSwitch.x)))) | 0)))) >> 0)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_IDENTITY(_GLF_FUZZED(-72.82), min(_GLF_FUZZED(-72.82), _GLF_FUZZED(-72.82)))))))) * mat2(1.0), (true ? (injectionSwitch) * mat2(1.0) : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), mix(_GLF_IDENTITY(vec2((_GLF_FUZZED(injectionSwitch))[0], _GLF_FUZZED(9.4)), vec2(vec3(vec2((_GLF_FUZZED(injectionSwitch))[0], _GLF_FUZZED(9.4)), 0.0))), vec2(_GLF_FUZZED(6399.3074), (_GLF_FUZZED(injectionSwitch))[1]), bvec2(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))))))).x > injectionSwitch.y)))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) && true))))) && true)))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | 0), 1, 1)))))), (_GLF_IDENTITY(_GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) - 0)) << 0), min(_GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) - 0)) << 0), _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) - 0)) << 0)))) | _GLF_IDENTITY((_GLF_IDENTITY((1), ~ (~ ((1))))), clamp((_GLF_IDENTITY((1), ~ (~ ((1))))), (_GLF_IDENTITY((1), ~ (~ ((1))))), _GLF_IDENTITY((_GLF_IDENTITY((1), ~ (~ ((1))))), ((_GLF_IDENTITY((1), ~ (~ ((1)))))) ^ 0)))) - 0)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) / 1)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       break;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        continue;
      }
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), tan(_GLF_IDENTITY(0.0, 0.0 + (0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0))) > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 0.0, 0.0))), tan(_GLF_IDENTITY(0.0, 0.0 + (0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0))) > injectionSwitch.y, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false, true))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, tan(_GLF_IDENTITY(0.0, 0.0 + (0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, tan(_GLF_IDENTITY(0.0, 0.0 + (0.0))), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(mat3x2(0.0, 1.0, 0.0, 0.0, 1.0, 1.0)))) / abs(1.0)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0))) > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, tan(_GLF_IDENTITY(0.0, 0.0 + (0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0))) > injectionSwitch.y, _GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-228.195), _GLF_FUZZED(-19.17)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)).y, (injectionSwitch.y) - 0.0))) && true)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))), ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y)))) && true)))))), false, true)))) || false)))))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(7.6))), _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(float(-1956))), bool(false)))))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true, false)))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec4(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)), false), true, false))))))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (_GLF_IDENTITY(false, (false) || false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
            {
             do
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true)))) && (_GLF_WRAPPED_LOOP(false))));
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((9893.2009 + 9.6)), _GLF_FUZZED(2.1)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), (true) && true)))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))), ! (! (! ((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))))) || false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
          continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read = atomicLoad(buf[virtual_gid], 4, 64, 2), (read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, max(_GLF_IDENTITY(64, (64) ^ 0), 64)), 2)) >> 0u), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(read = atomicLoad(buf[virtual_gid], 4, 64, 2), (read = atomicLoad(buf[virtual_gid], 4, 64, 2)) >> 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(read = atomicLoad(buf[virtual_gid], 4, 64, 2), (read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, max(_GLF_IDENTITY(64, (64) ^ 0), 64)), 2)) >> 0u), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(read = atomicLoad(buf[virtual_gid], 4, 64, 2), (read = atomicLoad(buf[virtual_gid], 4, 64, 2)) >> 0u)))) << 0u);
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(tan(-3.0)) : injectionSwitch[0])), injectionSwitch[1])).x : _GLF_FUZZED(61.63))) < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-1039.0659)), bool(false))))) > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          break;
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_WRAPPED_LOOP(false)))));
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.2)))))))))), _GLF_IDENTITY(true, ! (! (true))) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), min(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))))))), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-50313) : _GLF_IDENTITY(int(4), _GLF_IDENTITY((int(4)) | (int(4)), _GLF_IDENTITY(((int(4)) | (int(4))), max(_GLF_IDENTITY(((int(4)) | (int(4))), (((int(4)) | (int(4)))) - 0), ((int(4)) | (int(4))))) - 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), ! (! (! _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), ! (_GLF_IDENTITY(! ((_GLF_WRAPPED_IF_FALSE(false))), (! ((_GLF_WRAPPED_IF_FALSE(false)))) && true))))))))) || false))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat4x3(injectionSwitch[0], 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0))), injectionSwitch[1])).y, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_ZERO(0.0, injectionSwitch.x)), min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_ZERO(0.0, injectionSwitch.x)))), injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sin(_GLF_IDENTITY(_GLF_IDENTITY(vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), mat2(1.0) * (vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))), (vec2(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))), 0.0)) / vec2(1.0, 1.0)))).y)) || _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(8.9)), bool(false))), 0.0))))), (max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))) - vec2(0.0, 0.0)), 0.0, 0.0, log(1.0), sqrt(1.0), 0.0, 1.0, 0.0), transpose(transpose(mat3(_GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), (max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))) - vec2(0.0, 0.0)), 0.0, 0.0, log(1.0), _GLF_IDENTITY(_GLF_IDENTITY(sqrt(1.0), (sqrt(1.0)) / _GLF_ONE(1.0, injectionSwitch.y)), mix(_GLF_IDENTITY(float(_GLF_IDENTITY(sqrt(1.0), _GLF_IDENTITY(mix(float(sqrt(1.0)), float(_GLF_FUZZED(-8998.7122)), bool(false)), 1.0 * (mix(float(sqrt(1.0)), float(_GLF_FUZZED(-8998.7122)), bool(false)))))), 1.0 * (float(_GLF_IDENTITY(sqrt(1.0), _GLF_IDENTITY(mix(float(sqrt(1.0)), float(_GLF_FUZZED(-8998.7122)), bool(false)), 1.0 * (mix(float(sqrt(1.0)), float(_GLF_FUZZED(-8998.7122)), bool(false)))))))), float(_GLF_FUZZED(9.3)), bool(false))), 0.0, 1.0, 0.0))))))).x > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) - vec2(0.0, 0.0))), vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat3(_GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), (max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))) - vec2(0.0, 0.0)), 0.0, 0.0, log(1.0), sqrt(1.0), 0.0, 1.0, 0.0), transpose(transpose(mat3(_GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), (max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))), (injectionSwitch) - vec2(0.0, 0.0)))) - vec2(0.0, 0.0)), 0.0, 0.0, _GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), sqrt(1.0), 0.0, 1.0, 0.0)))), (_GLF_IDENTITY(mat3(_GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), (max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))) - vec2(0.0, 0.0)), 0.0, 0.0, log(1.0), sqrt(1.0), 0.0, 1.0, 0.0), transpose(transpose(mat3(_GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), (max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))), _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), clamp((injectionSwitch) - vec2(0.0, 0.0), (injectionSwitch) - vec2(0.0, 0.0), (injectionSwitch) - vec2(0.0, 0.0)))))) - vec2(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0, _GLF_IDENTITY(0.0, float(mat2x3(0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), tan(0.0), 0.0, cos(0.0), tan(0.0)))), _GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), sqrt(1.0), 0.0, 1.0, 0.0))))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))).x > injectionSwitch.y), true))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(8.3, -2.9)))).y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), bool(bool(! _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))), bool(bvec2((! ((injectionSwitch.x > injectionSwitch.y))), false)))))))), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))), ((! ((injectionSwitch.x > injectionSwitch.y)))) || false), bool(bool(! _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))), bool(bvec2((! ((injectionSwitch.x > injectionSwitch.y))), false)))))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))))) || false)))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0, 1.0))), injectionSwitch.x)) < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(6.8)), vec2(_GLF_FUZZED(-4708.0074), (injectionSwitch)[1]), bvec2(false, true))).y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)))))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     subgroupBarrier();
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 1.0, _GLF_IDENTITY(dot(vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), float(mat2x4(dot(vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 1.0)), 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, tan(0.0), 1.0)))), exp(0.0), 1.0, sin(0.0), 0.0, 0.0))))), max(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 1.0, _GLF_IDENTITY(dot(vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0), _GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), min(_GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), mat4(1.0) * (vec4(0.0, 1.0, 0.0, 0.0))), vec4(0.0, 1.0, 0.0, 0.0)))), dot(vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0), vec4(0.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-78.22)), bool(false))), 0.0)), 0.0))), exp(0.0), 1.0, sin(0.0), 0.0, 0.0))))), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 1.0, _GLF_IDENTITY(dot(vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), exp(0.0), 1.0, sin(0.0), 0.0, 0.0))))))))))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  break;
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))));
              }
             else
              {
              }
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), false, false)), false || (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch))) - vec2(0.0, 0.0)).x > injectionSwitch.y))), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - vec2(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_ONE(1.0, injectionSwitch.y), sqrt(_GLF_ZERO(0.0, injectionSwitch.x))), (vec3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_ONE(1.0, injectionSwitch.y), sqrt(_GLF_ZERO(0.0, injectionSwitch.x)))) * vec3(1.0, 1.0, 1.0)))), 0.0)).x > injectionSwitch.y))), false, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_FUZZED(-6.2)), float((injectionSwitch)[0]), bool(true))), _GLF_FUZZED(-4.0)), vec2(_GLF_FUZZED(282.493), (injectionSwitch)[1]), bvec2(false, true))).y))), false, false), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))))))))))))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(2.4)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(81.37, 45.40)) : injectionSwitch)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y)))))) && true)));
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
