#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))), ~ (~ (~ _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))), max((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups)))))))), ~ _GLF_IDENTITY((~ _GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), ((gl_NumWorkGroups) | (gl_NumWorkGroups)) | ((gl_NumWorkGroups) | (gl_NumWorkGroups)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ~ (_GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), ((gl_NumWorkGroups) | (gl_NumWorkGroups)) | ((gl_NumWorkGroups) | (gl_NumWorkGroups)))) : _GLF_FUZZED(uvec3(124380u, 174056u, 197213u)))))), min(_GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), ((gl_NumWorkGroups) | (gl_NumWorkGroups)) | ((gl_NumWorkGroups) | (gl_NumWorkGroups)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ~ (_GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), ((gl_NumWorkGroups) | (gl_NumWorkGroups)) | ((gl_NumWorkGroups) | (gl_NumWorkGroups)))) : _GLF_FUZZED(uvec3(124380u, 174056u, 197213u)))))), _GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), ((gl_NumWorkGroups) | (gl_NumWorkGroups)) | ((gl_NumWorkGroups) | (gl_NumWorkGroups)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ~ (_GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), ((gl_NumWorkGroups) | (gl_NumWorkGroups)) | ((gl_NumWorkGroups) | (gl_NumWorkGroups)))) : _GLF_FUZZED(uvec3(124380u, 174056u, 197213u))))))))))), ((~ (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))))) | ((~ (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((gl_NumWorkGroups), clamp((gl_NumWorkGroups), (gl_NumWorkGroups), (gl_NumWorkGroups))))) | (gl_NumWorkGroups), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), ((gl_NumWorkGroups) | (gl_NumWorkGroups)) | ((gl_NumWorkGroups) | (gl_NumWorkGroups)))), max(~ (_GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), ((gl_NumWorkGroups) | (gl_NumWorkGroups)) | ((gl_NumWorkGroups) | (gl_NumWorkGroups)))), ~ (_GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), ((gl_NumWorkGroups) | (gl_NumWorkGroups)) | ((gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), min(_GLF_IDENTITY((gl_NumWorkGroups), min((gl_NumWorkGroups), (gl_NumWorkGroups))), (gl_NumWorkGroups))))))))))))))), _GLF_IDENTITY(uvec3(uvec4(_GLF_IDENTITY((~ (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), ((gl_NumWorkGroups) | (gl_NumWorkGroups)) | ((gl_NumWorkGroups) | (gl_NumWorkGroups)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ~ (_GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), ((gl_NumWorkGroups) | (gl_NumWorkGroups)) | ((gl_NumWorkGroups) | (gl_NumWorkGroups)))) : _GLF_FUZZED(uvec3(124380u, 174056u, 197213u))))))))), ((~ (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))))) | ((~ (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), ((gl_NumWorkGroups) | (gl_NumWorkGroups)) | ((gl_NumWorkGroups) | (gl_NumWorkGroups)))), max(~ (_GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), _GLF_IDENTITY(((gl_NumWorkGroups) | (gl_NumWorkGroups)) | ((gl_NumWorkGroups) | (gl_NumWorkGroups)), (((gl_NumWorkGroups) | (gl_NumWorkGroups)) | (_GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), uvec3(uvec4((gl_NumWorkGroups) | (gl_NumWorkGroups), 1u))))) - uvec3(0u, 0u, 0u)))), ~ (_GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), ((gl_NumWorkGroups) | (gl_NumWorkGroups)) | ((gl_NumWorkGroups) | (gl_NumWorkGroups))))))))))))), 0u)), (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(7u), uvec3(7u))) | (uvec3(uvec4(_GLF_IDENTITY((~ (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), ((gl_NumWorkGroups) | (gl_NumWorkGroups)) | ((gl_NumWorkGroups) | (gl_NumWorkGroups)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ~ (_GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), ((gl_NumWorkGroups) | (gl_NumWorkGroups)) | ((gl_NumWorkGroups) | (gl_NumWorkGroups)))) : _GLF_FUZZED(uvec3(124380u, 174056u, 197213u))))))))), ((~ (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))))) | ((~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, 0u, 0u)), _GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED(uvec3(196252u, 43098u, 59709u))))) | (gl_NumWorkGroups), ((gl_NumWorkGroups) | (gl_NumWorkGroups)) | ((gl_NumWorkGroups) | (gl_NumWorkGroups)))), max(~ (_GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), ((gl_NumWorkGroups) | (gl_NumWorkGroups)) | ((gl_NumWorkGroups) | (gl_NumWorkGroups)))), ~ (_GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), ((gl_NumWorkGroups) | (gl_NumWorkGroups)) | ((gl_NumWorkGroups) | (gl_NumWorkGroups))))))))))))), 0u)))))), clamp((~ _GLF_IDENTITY((~ (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups)))), _GLF_IDENTITY(((~ (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))))), max(((~ (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))))), _GLF_IDENTITY(((~ (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))))), (false ? _GLF_FUZZED(uvec3(189551u, 156995u, 89751u)) : ((~ (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))))))))) | ((~ (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))))))), (~ _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) ^ uvec3(0u, 0u, 0u))), ~ (~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) ^ uvec3(0u, 0u, 0u))))))))) | (gl_NumWorkGroups))), ~ (~ ((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))))))), ((~ (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))))) | ((~ (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))))))), (~ _GLF_IDENTITY((~ (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups)))), ((~ (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))))) | ((~ (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups)))))))))), uvec3(_GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY((0u) + 0u, ((0u) + 0u) / uint(_GLF_ONE(1.0, injectionSwitch.y)))), _GLF_IDENTITY((_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (0u) ^ 0u), _GLF_IDENTITY(0u, min(0u, 0u)), 0u)), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), (_GLF_IDENTITY(0u, (0u) ^ 0u)) | (_GLF_IDENTITY(0u, (0u) ^ 0u))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), (_GLF_IDENTITY(0u, (0u) ^ 0u)) | (_GLF_IDENTITY(0u, _GLF_IDENTITY((0u) ^ 0u, max(_GLF_IDENTITY((0u) ^ 0u, (false ? _GLF_FUZZED(subgroup_local_id) : (0u) ^ 0u)), _GLF_IDENTITY((0u) ^ 0u, (true ? (0u) ^ 0u : _GLF_FUZZED(subgroup_id)))))))), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), (_GLF_IDENTITY(0u, (0u) ^ 0u)) | (_GLF_IDENTITY(0u, (0u) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ _GLF_IDENTITY(0u, (0u) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY(0u, _GLF_IDENTITY((0u), ((0u)) << 0u) ^ 0u)) | (_GLF_IDENTITY(0u, (0u) ^ 0u)))))))))) >> 0u, clamp((_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (0u) ^ 0u), _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) | (0u)), 0u)), 0u)), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec3(0u, 1u, 0u)))) ^ 0u)) | (_GLF_IDENTITY(0u, (0u) ^ 0u))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), (_GLF_IDENTITY(0u, (0u) ^ 0u)) | (_GLF_IDENTITY(0u, (0u) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), (_GLF_IDENTITY(0u, (0u) ^ 0u)) | (_GLF_IDENTITY(0u, (0u) ^ _GLF_IDENTITY(0u, (0u) | (0u << _GLF_IDENTITY(uint(7u), uint(7u))))))), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), (_GLF_IDENTITY(0u, _GLF_IDENTITY((0u), ((0u)) << 0u) ^ 0u)) | (_GLF_IDENTITY(0u, (0u) ^ 0u)))))))))) >> 0u, (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) + 0u), (0u) ^ 0u), _GLF_IDENTITY(0u, min(0u, 0u)), 0u)), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), (_GLF_IDENTITY(0u, (0u) ^ 0u)) | (_GLF_IDENTITY(0u, (0u) ^ 0u))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), (_GLF_IDENTITY(0u, (0u) ^ 0u)) | (_GLF_IDENTITY(0u, (0u) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), (_GLF_IDENTITY(0u, (0u) ^ 0u)) | (_GLF_IDENTITY(0u, (0u) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), (_GLF_IDENTITY(0u, _GLF_IDENTITY((0u), ((0u)) << 0u) ^ 0u)) | (_GLF_IDENTITY(0u, (0u) ^ 0u)))))))))) >> 0u, (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (0u) ^ 0u), _GLF_IDENTITY(0u, min(0u, 0u)), 0u)), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), 0u ^ (~ (0u)))))) ^ 0u), (_GLF_IDENTITY(0u, (0u) ^ 0u)) | (_GLF_IDENTITY(0u, (0u) ^ 0u))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), (_GLF_IDENTITY(0u, _GLF_IDENTITY((0u) ^ 0u, uint(_GLF_IDENTITY(uvec3((0u) ^ 0u, 1u, 0u), max(uvec3((0u) ^ 0u, 1u, 0u), uvec3((0u) ^ 0u, 1u, 0u))))))) | (_GLF_IDENTITY(0u, (0u) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), (_GLF_IDENTITY(0u, (0u) ^ 0u)) | _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) ^ 0u)), ((_GLF_IDENTITY(0u, (0u) ^ 0u))) ^ 0u)), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ 0u), (_GLF_IDENTITY(0u, _GLF_IDENTITY((0u), ((0u)) << 0u) ^ 0u)) | (_GLF_IDENTITY(0u, (0u) ^ 0u)))))))))) >> 0u))), 0u, 0u) ^ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_FUZZED(uvec3(79653u, _GLF_IDENTITY(179964u, min(_GLF_IDENTITY(179964u, (179964u) - 0u), 179964u)), 189795u)) : _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, 0u))) >> uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ (0u)))))))) | (gl_NumWorkGroups))))))).x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(1205.3688)), bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (false)), ! (! ((! (false)))))), ! (! (! (_GLF_IDENTITY((! (false)), ! (! ((_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), (! (false)) && true)))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), (! (false)) && true)))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))))))))))))))))) > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x), float(_GLF_FUZZED(1205.3688)), bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec2(_GLF_IDENTITY(false, (false) && true), true))), ! (! (false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false))))))))) && true))), (false ? _GLF_FUZZED(mod(21.62, 84.79)) : mix(float(injectionSwitch.x), float(_GLF_FUZZED(1205.3688)), bool(_GLF_IDENTITY(false, ! (! (false)))))))) > injectionSwitch.y)))), (bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(1205.3688)), bool(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! _GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, false, false))), bool(bvec3(! (! _GLF_IDENTITY((false), ! (! ((false))))), true, true)))), (bool(_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), true, true))))) && _GLF_IDENTITY(true, ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)) || ((! (_GLF_IDENTITY(true, false || (true))))))))))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! _GLF_IDENTITY((false), ! (! ((false))))), true, true)))), (bool(_GLF_IDENTITY(! (! _GLF_IDENTITY((false), ((false)) || false)), bool(bvec3(! (! (false)), true, true))))) && _GLF_IDENTITY(true, ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, false || (true)))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, abs(1.0), 1.0))))) || ((! (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bool(true))))))))))))))) && true)), _GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(61.09) : _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).y))))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), true, true)))), (bool(_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) || false))), bool(bvec3(! _GLF_IDENTITY((! (false)), bool(_GLF_IDENTITY(bvec3((! (false)), false, false), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3((! (false)), false, false), bvec3(bvec4(bvec3((! (false)), false, false), true))), bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3((! (false)), false, false), bvec3(bvec4(bvec3((! (false)), false, false), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3((! (false)), false, false), bvec3(bvec4(bvec3((! (false)), false, false), true)))), false))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3((! (false)), false, false), bvec3(bvec4(bvec3((! (false)), false, false), true)))), false))))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3((! (false)), false, false), bvec3(bvec4(bvec3((! (_GLF_IDENTITY(false, false || (false)))), false, false), true))), bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3((! (false)), false, false), bvec3(bvec4(bvec3((! (false)), false, false), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3((! (false)), false, false), bvec3(bvec4(bvec3((! (false)), false, false), true)))), false))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3((! (false)), false, false), bvec3(bvec4(bvec3((! (false)), false, false), true)))), false))))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3((! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))))), false, false), bvec3(bvec4(bvec3((! (false)), false, false), true)))), false)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3((! (false)), false, false), bvec3(bvec4(bvec3((! (_GLF_IDENTITY(false, bool(bool(false))))), false, false), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3((! (false)), false, false), bvec3(bvec4(bvec3((! (false)), false, false), true)))), false)))), false)))))), _GLF_IDENTITY(true, ! (! (true))), true))))) && true))), true), false)))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (! (false)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(! _GLF_IDENTITY((! (false)), (_GLF_IDENTITY((! (false)), bool(bool((! (false)))))) || false), bool(bvec3(! (! (false)), true, true)))), bool(bvec4(bool(_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), true, true)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), _GLF_IDENTITY((bool(_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), _GLF_IDENTITY(true, ! (! (true))), true))))), true && ((bool(_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), true, true))))))) && true))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(! (! (false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), true, true)))), (bool(_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), true, true))))) && true))), true), false))))), true && ((bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (! (false)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3((false), false, false), bvec3(bvec4(bvec3((false), false, false), true))))))))))), bool(bvec3(! (! (false)), true, true)))), (bool(_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), true, true))))) && true), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), true, true)))), (bool(_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), true, true))))) && true), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! _GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((false), true && ((false)))))), bool(bvec3(! (! (false)), true, true)))), (bool(_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), true, true))))) && true), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! _GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((false), true && ((false)))))), bool(bvec3(! (! (false)), true, true)))), (bool(_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), true, true))))) && true), true), false)))))))))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(! (! (false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! _GLF_IDENTITY((false), ((false)) || false)), true, true)))), _GLF_IDENTITY((bool(_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), true, true))))), ! (! (_GLF_IDENTITY((bool(_GLF_IDENTITY(! (! (false)), bool(bvec3(! _GLF_IDENTITY((! (false)), ! (! ((! (false))))), true, true))))), bool(bvec3((bool(_GLF_IDENTITY(! (! (false)), bool(_GLF_IDENTITY(bvec3(! (! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((false), bool(bool((false)))), true, false, true)), false || (bool(bvec4(_GLF_IDENTITY((false), bool(bool((false)))), true, false, true))))), true, true, true)))), true, true), bvec3(bvec4(bvec3(! (! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), bool(bool((false)))), true, false, true))), true, true, true)))), true, true), false))))))), false, false)))))) && true))), true), false))))))) || false)))))) > _GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))) + (injectionSwitch)).y))))) || false)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(1205.3688)), bool(_GLF_IDENTITY(false, ! (! (false)))))) > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(1205.3688)), bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false))))))) && true)))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), _GLF_IDENTITY(vec4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0, 1.0, 0.0), (vec4(_GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0, 1.0, 0.0)) - vec4(0.0, 0.0, 0.0, 0.0))), dot(vec4(1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / exp(0.0)), 1.0), vec4(0.0, 1.0, 1.0, 0.0))) + (injectionSwitch.x))), float(_GLF_IDENTITY(_GLF_FUZZED(1205.3688), max(_GLF_IDENTITY(_GLF_FUZZED(1205.3688), float(mat2x4(_GLF_FUZZED(1205.3688), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), tan(0.0), 1.0, 0.0, 1.0))), _GLF_FUZZED(1205.3688)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(false, ! (! (false))))), ! (! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), true, true)))))))), true && ((! (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), true, true)))))))))))))))) > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))) || false)) && true))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))), true, false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) && true), true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))).x > injectionSwitch.y), false))))))
  barrier();
 atomicStore(buf[virtual_gid], uint(_GLF_IDENTITY(1, (1) ^ (27945 & 0))), 4, 64, _GLF_IDENTITY(4, (4) + (1 ^ 1)));
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 if(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) >> 0u)) == 0, (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % _GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, (2) * 1), 2, 2))) == 0, bool(bvec2((subgroup_local_id % 2) == 0, false))), false || (_GLF_IDENTITY((subgroup_local_id % 2) == 0, bool(bvec2((_GLF_IDENTITY(subgroup_local_id % 2, max(subgroup_local_id % 2, _GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) ^ 0u)))) == 0, false)))))) && true))
  {
   subgroupAll(true);
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))), bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, ~ (~ (4))), 64, 4);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (_GLF_IDENTITY(! (false || (false)), ! (! (_GLF_IDENTITY(! (false || (false)), _GLF_IDENTITY(bool(bvec4(! (false || (false)), false, true, false)), bool(bool(bool(bvec4(! (false || (false)), false, true, false)))))))))))))) && true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   subgroupAll(false);
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0)), min(vec2(mat3x4(injectionSwitch, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0)), vec2(mat3x4(injectionSwitch, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0))))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(sin(7977.6545)) : injectionSwitch.y)), injectionSwitch.y)))), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(8.4)), float(injectionSwitch.y), bool(true))), clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(degrees(-51.56)))), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(sin(7977.6545)) : injectionSwitch.y)), injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) && true)), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(-7529.4512, -8.8, -88.68, 463.395).z)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
    barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
