#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y)))))))
  return;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false), ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))))))) && true)))), ! (! (injectionSwitch.x < injectionSwitch.y))))) && (false))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, clamp(0, 0, 0)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))), int(4)))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), (_GLF_IDENTITY(1, clamp(1, 1, 1))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false)))))))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(719.984)), bool(false))) > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), (! (! (_GLF_DEAD(false)))) || false)))
        break;
       return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, false || (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(bool(injectionSwitch.x > injectionSwitch.y), true, true), bvec3(bvec3(bvec3(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, 1.0, 0.0)), (true ? vec2(vec4(injectionSwitch, 1.0, 0.0)) : _GLF_FUZZED(injectionSwitch)))).y), true, true))))), ! (! (bool(_GLF_IDENTITY(bvec3(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec2(-2.6, -1.4).t), _GLF_FUZZED(6.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y), true, true), bvec3(bvec3(bvec3(bool(injectionSwitch.x > injectionSwitch.y), true, true)))))))))))))))
          break;
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))), (injectionSwitch) * mat2(1.0)))), injectionSwitch)).x), min(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))), (injectionSwitch) * mat2(1.0)))), injectionSwitch)).x), min(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))), (injectionSwitch) * mat2(1.0)))), injectionSwitch)).x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))), (injectionSwitch) * mat2(1.0)))), injectionSwitch)).x))), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))), (injectionSwitch) * mat2(1.0)))), injectionSwitch)).x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(vec2(1.0, 1.0))) : _GLF_FUZZED(-5044.6575))), 1.0)), _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(vec4(_GLF_IDENTITY(46.29, clamp(46.29, 46.29, 46.29)), -5.2, -1.0, 20.77).s)), bool(false)))))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
          continue;
        }
       if(_GLF_DEAD(false))
        break;
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, bool(bool(injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, bool(bool(injectionSwitch.x > injectionSwitch.y))))))))) && true)))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true)) && true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
      }
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) || false)))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = _GLF_IDENTITY((0 | 0), (_GLF_IDENTITY((_GLF_IDENTITY(0 | 0, (0 | 0) * 1)), ((0 | 0)) / 1)) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0))).y, max(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], _GLF_FUZZED(76.82)), vec2(_GLF_FUZZED(3.4), ((injectionSwitch))[1]), bvec2(false, true)))).y, 0.0 + (injectionSwitch.y)))), (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, false, true)))) || false)), false || (! (true))))) && (injectionSwitch.x < injectionSwitch.y))) && true))), _GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(! (false), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(! (false), true), true)), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec3(bvec2(! (false), true), true)), true), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec3(bvec2(! (false), true), true)), true), bvec3(bvec3(bvec3(bvec2(bvec3(bvec2(! (false), true), true)), true))))))))))))), (! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), true))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(! (false), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(! (false), true), true)), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec3(bvec2(! (false), true), true)), true), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec3(bvec2(! (false), true), true)), true), bvec3(bvec3(bvec3(bvec2(bvec3(bvec2(! (false), true), true)), true))))))))))))), (! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), true))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(! (false), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(! (false), true), true)), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec3(bvec2(! (false), true), true)), true), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec3(bvec2(! (false), true), true)), true), bvec3(bvec3(bvec3(bvec2(bvec3(bvec2(! (false), true), true)), true))))))))))))), (! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), true))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(! (false), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(! (false), true), true)), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec3(bvec2(! (false), true), true)), true), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec3(bvec2(! (false), true), true)), true), bvec3(bvec3(bvec3(bvec2(bvec3(bvec2(! (false), true), true)), true))))))))))))), (! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec3(bvec2(! (false), true), true))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))))), true)))) || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))))))) && true)), (bool(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true))) && true)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) || false))))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, false || ((_GLF_IDENTITY(false, (false) && true)) || false))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))
          return;
         continue;
        }
       for(int _injected_loop_counter = (_GLF_IDENTITY(0, (0) | 0) | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(7122.3545, -2.3)))))).x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
             for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) ^ 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) != 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
                {
                 return;
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              continue;
            }
          }
        }
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) | 0u);
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))))), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false))))))) || false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))))), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false))))))) || false))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))))), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false))))))) || false)))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))))), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false))))))) || false))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) || false, false || ((_GLF_IDENTITY(false, (false) || false)) || false))))) && true))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))))), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false))))))) || false))))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, (true ? _GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id)) : _GLF_FUZZED(num_workgroup)));
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, min(workgroup_base + subgroup_base, workgroup_base + subgroup_base)) + subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec4(! (false), false, false, false)), bool(bvec2(bool(bvec4(! (false), false, false, false)), true)))))), false || (false))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      break;
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3710.2773), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(6274.9301)), bvec2(true, _GLF_IDENTITY(false, (false) || false)))).x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), true, false)))), (bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), true, false))))) && true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), true, false)))), (bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), true, false))))) && true), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), true, false)))), (bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), true, false))))) && true)))), false, false, true)), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), true, false)))), (bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), true, false))))) && true), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), true, false)))), (bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), true, false))))) && true)))), false, false, true))) || false))))), bool(bvec4(! (! (injectionSwitch.x > injectionSwitch.y)), true, true, true)))))))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) | 0u, (_GLF_IDENTITY((subgroup_local_id) | 0u, 0u ^ ((subgroup_local_id) | 0u))) + 0u)), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u)) ^ 0u) + 1), max((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u)) - 0u), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u)) ^ 0u) + 1), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u)) ^ 0u) + 1))) % subgroup_size);
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true, false))))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), max(_GLF_IDENTITY(min(injectionSwitch, injectionSwitch), clamp(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch))), min(injectionSwitch, injectionSwitch)))), clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(90.44) : 1.0))), float(_GLF_FUZZED(5.9)), bool(false))))), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (1.0) / 1.0)), float(_GLF_FUZZED(460.574)), bool(false))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0)), mix(vec2(_GLF_FUZZED(2.1), (vec2(mat4(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4(0.0, 0.0, 0.0, exp(0.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), exp(0.0), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, abs(1.0)), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(0.0, 0.0, 0.0, exp(0.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), exp(0.0), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, abs(1.0)))))), 0.0, 0.0)))[1]), vec2((_GLF_IDENTITY(vec2(mat4(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0)), mat2(1.0) * (vec2(mat4(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0)))))[0], _GLF_FUZZED(4773.5412)), bvec2(true, false)))), injectionSwitch)), vec2(1.0, 1.0) * (injectionSwitch)))), injectionSwitch)).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! _GLF_IDENTITY((false), ((false)) || false)), bool(bvec2(_GLF_IDENTITY(! (! _GLF_IDENTITY((false), ((false)) || false)), ! (! (! (! _GLF_IDENTITY((false), ((false)) || false))))), _GLF_IDENTITY(true, (true) || false))))))) && true)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         break;
        }
       return;
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, int(ivec4(_GLF_IDENTITY(0, min(0, 0)), 1, 1, 0))), bool(bvec4(_injected_loop_counter != _GLF_IDENTITY(0, int(ivec4(_GLF_IDENTITY(0, min(0, 0)), 1, 1, 0))), true, false, true)))); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, max(subgroup_local_id % 2, subgroup_local_id % 2)), (_GLF_IDENTITY(subgroup_local_id % 2, max(subgroup_local_id % 2, subgroup_local_id % 2))) / 1u)), ((_GLF_IDENTITY(subgroup_local_id % 2, max(subgroup_local_id % 2, subgroup_local_id % 2)))) / 1u) == 0)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true), (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true), false || (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))))) && true)))) && true), bool(bool(! (injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))).y), bool(bool(! (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-4137.4472)), bvec2(true, false))).x > injectionSwitch.y)))))))), (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), ((! (injectionSwitch.x > injectionSwitch.y))) || false)), ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y)))))), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y))))))))))) && true)) && true))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0)).x), (_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), float(_GLF_IDENTITY(mat4x2(min(injectionSwitch.x, injectionSwitch.x), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0), (mat4x2(min(injectionSwitch.x, injectionSwitch.x), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0)) - mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))) - _GLF_IDENTITY(0.0, float(vec3(_GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0)))), (true ? _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), (min(injectionSwitch.x, injectionSwitch.x)) - 0.0)))) - 0.0) : _GLF_IDENTITY(_GLF_FUZZED(min(317.241, 2499.3942)), min(_GLF_FUZZED(min(317.241, 2499.3942)), _GLF_FUZZED(min(317.241, 2499.3942)))))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) >> _GLF_IDENTITY(int(0), int(0)))); _GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --)))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), true && (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1279.1953)), float(injectionSwitch.y), bool(true)))), ((injectionSwitch.x > injectionSwitch.y)) && true)))))))))
              continue;
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               return;
               if(_GLF_DEAD(false))
                break;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            continue;
          }
        }
       else
        {
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), ! (! (true)))))
        {
         for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, false || (_injected_loop_counter != 1))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            continue;
           subgroupAll(true);
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1.6)), float(_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))).y), _GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), true), bvec3(bvec3(bvec3(bvec2(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), true))))))))))))))
          continue;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y)))), false || (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y) || false))))), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y))))), ((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y) * 1.0)), true && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y) * 1.0), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y) * 1.0)) && true)), true && ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y) * 1.0, ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y) * 1.0) - 0.0))))))))) && true)), ((! ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))).y)))) && true))) || false)))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x : _GLF_FUZZED(_GLF_IDENTITY(9953.5635, mix(float(9953.5635), float(_GLF_FUZZED((+ 122.162))), bool(false)))))))) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) / cos(0.0)), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-218.451))))).y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0), (mat3(injectionSwitch.x, 1.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))) > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(vec4(_GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, clamp(-85.42, _GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, mix(float(_GLF_IDENTITY(-85.42, float(vec2(-85.42, 0.0)))), float(_GLF_FUZZED(-23.16)), bool(false)))) * 1.0), -85.42))) + 0.0), 2.5, -5.7, -2.5).g)), float(injectionSwitch[0]), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true)))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true))))))))))), mix(float(_GLF_FUZZED(786.033)), float(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(vec4(_GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, clamp(-85.42, _GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, mix(float(_GLF_IDENTITY(-85.42, float(vec2(-85.42, 0.0)))), float(_GLF_FUZZED(-23.16)), bool(false)))) * 1.0), -85.42))) + 0.0), 2.5, -5.7, -2.5).g)), float(injectionSwitch[0]), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true)))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true)))))))))))), bool(true))), injectionSwitch[1])).y), ((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0), (mat3(injectionSwitch.x, 1.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 0.0 + (_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_FUZZED((+ 39.61)))))), 1.0, 1.0, 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))) > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(vec4(_GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, clamp(-85.42, _GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, mix(float(_GLF_IDENTITY(-85.42, float(vec2(-85.42, 0.0)))), float(_GLF_FUZZED(-23.16)), _GLF_IDENTITY(bool(false), true && (bool(false)))))) * 1.0), -85.42))) + 0.0), 2.5, -5.7, -2.5).g)), float(injectionSwitch[0]), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true)))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, true)), (bool(bvec3(true, true, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true))))))))))), injectionSwitch[1])).y)) || false)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0), (mat3(injectionSwitch.x, 1.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))) > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(vec4(_GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, clamp(-85.42, _GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, mix(float(_GLF_IDENTITY(-85.42, float(vec2(-85.42, 0.0)))), float(_GLF_FUZZED(-23.16)), bool(false)))) * 1.0), -85.42))) + 0.0), 2.5, -5.7, -2.5).g)), float(injectionSwitch[0]), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true)))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true))))))))))), injectionSwitch[1])).y), ((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0), (mat3(injectionSwitch.x, 1.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))) > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(vec4(_GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, clamp(-85.42, _GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, mix(float(_GLF_IDENTITY(-85.42, float(vec2(-85.42, 0.0)))), float(_GLF_FUZZED(-23.16)), bool(false)))) * 1.0), -85.42))) + 0.0), 2.5, -5.7, -2.5).g)), float(injectionSwitch[0]), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true)))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true))))))))))), injectionSwitch[1])).y)) || false), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0), (mat3(injectionSwitch.x, 1.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))) > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(vec4(_GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, clamp(-85.42, _GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, mix(float(_GLF_IDENTITY(-85.42, float(vec2(-85.42, 0.0)))), float(_GLF_FUZZED(-23.16)), bool(false)))) * 1.0), -85.42))) + 0.0), 2.5, -5.7, -2.5).g)), float(injectionSwitch[0]), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true)))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true))))))))))), injectionSwitch[1])).y), ((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0), (mat3(injectionSwitch.x, 1.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))) > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(vec4(_GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, clamp(-85.42, _GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, mix(float(_GLF_IDENTITY(-85.42, float(vec2(-85.42, 0.0)))), float(_GLF_FUZZED(-23.16)), bool(false)))) * 1.0), -85.42))) + 0.0), 2.5, -5.7, -2.5).g)), float(injectionSwitch[0]), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true)))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true))))))))))), injectionSwitch[1])).y)) || false), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ! (! (! (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0)))), (mat3(injectionSwitch.x, 1.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))) > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(vec4(_GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, clamp(-85.42, _GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, mix(float(_GLF_IDENTITY(-85.42, float(vec2(-85.42, 0.0)))), float(_GLF_FUZZED(-23.16)), bool(false)))) * 1.0), -85.42))) + 0.0), 2.5, -5.7, -2.5).g)), float(injectionSwitch[0]), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(true, true, true))), false || (_GLF_IDENTITY(true, bool(bvec3(true, true, true)))))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true)))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), _GLF_IDENTITY(bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true)), bool(_GLF_IDENTITY(bvec3(bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true)), true, true), bvec3(bvec4(bvec3(bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true)), true, true), true)))))))))))))), injectionSwitch[1])).y), ((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0), (mat3(injectionSwitch.x, 1.0, 1.0, 1.0, _GLF_IDENTITY(determinant(mat2(1.0, 0.0, 1.0, 1.0)), 1.0 * (determinant(mat2(1.0, 0.0, 1.0, 1.0)))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))) > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(vec4(_GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, clamp(-85.42, _GLF_IDENTITY(-85.42, (_GLF_IDENTITY(_GLF_IDENTITY(-85.42, min(-85.42, -85.42)), mix(float(_GLF_IDENTITY(-85.42, float(vec2(-85.42, 0.0)))), float(_GLF_FUZZED(-23.16)), bool(false)))) * 1.0), -85.42))) + 0.0), 2.5, -5.7, -2.5).g)), float(injectionSwitch[0]), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))))), true)))), true, true)))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))), injectionSwitch[1])).y)) || false), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0), (mat3(injectionSwitch.x, 1.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)), (mat3(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) : _GLF_FUZZED(-73.12))), 1.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(vec3((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(8.3)), float(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-5.6))), 1.0))), bool(true)))), 1.0)))).y), 1.0, 1.0, 0.0)) / mat3(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-6982.6345)), float(1.0), bool(true))))), 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(38.75)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(mix(float(_GLF_FUZZED(vec4(_GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, clamp(-85.42, _GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, mix(float(_GLF_IDENTITY(-85.42, float(vec2(-85.42, 0.0)))), float(_GLF_FUZZED(-23.16)), bool(false)))) * 1.0), -85.42))) + 0.0), 2.5, -5.7, -2.5).g)), float(injectionSwitch[0]), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec3(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, true)), ! (! (_GLF_IDENTITY(bool(bvec3(true, true, true)), bool(bvec4(bool(bvec3(true, true, true)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))), true, true)))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), bool(bvec3(true, true, true)))), bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true && (bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))))), true, true)))))))))), clamp(mix(float(_GLF_FUZZED(vec4(_GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, clamp(-85.42, _GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, mix(float(_GLF_IDENTITY(-85.42, float(vec2(-85.42, 0.0)))), float(_GLF_FUZZED(-23.16)), bool(false)))) * 1.0), -85.42))) + 0.0), 2.5, -5.7, -2.5).g)), float(injectionSwitch[0]), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true)))), ! (! _GLF_IDENTITY((bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), false, true))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true))))), ! (! ((bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), false, true))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true))))))))))))), _GLF_IDENTITY(mix(float(_GLF_FUZZED(vec4(_GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, clamp(-85.42, _GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, mix(float(_GLF_IDENTITY(-85.42, float(vec2(-85.42, 0.0)))), float(_GLF_FUZZED(-23.16)), bool(false)))) * 1.0), -85.42))) + 0.0), 2.5, -5.7, -2.5).g)), float(injectionSwitch[0]), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true)))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true)))))))))), max(_GLF_IDENTITY(mix(float(_GLF_FUZZED(vec4(_GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, clamp(-85.42, _GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, mix(float(_GLF_IDENTITY(-85.42, float(vec2(-85.42, 0.0)))), float(_GLF_FUZZED(-23.16)), bool(false)))) * 1.0), -85.42))) + 0.0), 2.5, -5.7, -2.5).g)), float(injectionSwitch[0]), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true)))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true)))))))))), min(mix(float(_GLF_FUZZED(vec4(_GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, clamp(-85.42, _GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, mix(float(_GLF_IDENTITY(-85.42, float(vec2(-85.42, 0.0)))), float(_GLF_FUZZED(-23.16)), bool(false)))) * 1.0), -85.42))) + 0.0), 2.5, -5.7, -2.5).g)), float(injectionSwitch[0]), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true)))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true)))))))))), mix(float(_GLF_FUZZED(vec4(_GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, clamp(-85.42, _GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, mix(float(_GLF_IDENTITY(-85.42, float(vec2(-85.42, 0.0)))), float(_GLF_FUZZED(-23.16)), bool(false)))) * 1.0), -85.42))) + 0.0), 2.5, -5.7, -2.5).g)), float(injectionSwitch[0]), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true)))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true)))))))))))), mix(float(_GLF_FUZZED(vec4(_GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, clamp(-85.42, _GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, mix(float(_GLF_IDENTITY(-85.42, float(vec2(-85.42, 0.0)))), float(_GLF_FUZZED(-23.16)), bool(false)))) * 1.0), -85.42))) + 0.0), 2.5, -5.7, -2.5).g)), float(injectionSwitch[0]), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true)))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true)))))))))))), _GLF_IDENTITY(mix(float(_GLF_FUZZED(vec4(_GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, clamp(-85.42, _GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, mix(float(_GLF_IDENTITY(-85.42, float(vec2(-85.42, 0.0)))), float(_GLF_FUZZED(-23.16)), bool(false)))) * 1.0), -85.42))) + 0.0), 2.5, -5.7, -2.5).g)), float(injectionSwitch[0]), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true)))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true)))))))))), (true ? mix(float(_GLF_FUZZED(vec4(_GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, clamp(-85.42, _GLF_IDENTITY(_GLF_IDENTITY(-85.42, float(float(-85.42))), (_GLF_IDENTITY(-85.42, mix(float(_GLF_IDENTITY(-85.42, float(vec2(-85.42, 0.0)))), float(_GLF_FUZZED(-23.16)), bool(false)))) * 1.0), -85.42))) + 0.0), 2.5, -5.7, _GLF_IDENTITY(-2.5, (true ? -2.5 : _GLF_FUZZED(-2.6)))).g)), float(_GLF_IDENTITY(injectionSwitch[0], float(vec2(injectionSwitch[0], 0.0)))), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true)))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), _GLF_IDENTITY(true, ! (! (true))), true)))))))))) : _GLF_FUZZED(0.8)))))), injectionSwitch[1])).y), ((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0), (mat3(injectionSwitch.x, 1.0, 1.0, 1.0, determinant(mat2(1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(5107.2544)), bool(false))), _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0)))), 0.0)), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x4(1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), (false ? _GLF_FUZZED(-7.4) : float(mat3x4(1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0))))))), 1.0)), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(653.572)), float(1.0), bool(true))), 1.0, 0.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))) > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(vec4(_GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, clamp(-85.42, _GLF_IDENTITY(_GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, mix(float(_GLF_IDENTITY(-85.42, float(vec2(-85.42, 0.0)))), float(_GLF_FUZZED(-23.16)), bool(false)))) * 1.0), _GLF_IDENTITY(clamp(_GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, mix(float(_GLF_IDENTITY(-85.42, float(vec2(-85.42, 0.0)))), float(_GLF_FUZZED(-23.16)), bool(false)))) * 1.0), _GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, mix(float(_GLF_IDENTITY(-85.42, float(vec2(-85.42, 0.0)))), float(_GLF_FUZZED(-23.16)), bool(false)))) * 1.0), _GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, mix(float(_GLF_IDENTITY(-85.42, float(vec2(-85.42, 0.0)))), float(_GLF_FUZZED(-23.16)), bool(false)))) * 1.0)), mix(float(_GLF_FUZZED(-7.3)), float(clamp(_GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, mix(float(_GLF_IDENTITY(-85.42, float(vec2(-85.42, 0.0)))), float(_GLF_FUZZED(-23.16)), bool(false)))) * 1.0), _GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, mix(float(_GLF_IDENTITY(-85.42, float(vec2(-85.42, 0.0)))), float(_GLF_FUZZED(-23.16)), bool(false)))) * 1.0), _GLF_IDENTITY(-85.42, (_GLF_IDENTITY(-85.42, mix(float(_GLF_IDENTITY(-85.42, float(vec2(-85.42, 0.0)))), float(_GLF_FUZZED(-23.16)), bool(false)))) * 1.0))), bool(true)))), -85.42))) + 0.0), 2.5, -5.7, _GLF_IDENTITY(-2.5, max(-2.5, _GLF_IDENTITY(-2.5, (_GLF_IDENTITY(-2.5, (-2.5) - _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))))) - 0.0)))).g)), float(injectionSwitch[0]), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true)))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec3(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), true, true))))))))))), injectionSwitch[1])).y)) || false)))))))))))))))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))), float(_GLF_FUZZED(5.1)), bool(false))), 0.0, 0.0, 1.0)), (float(mat2(injectionSwitch.y, 0.0, 0.0, 1.0))) / _GLF_ONE(1.0, injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(-546.949))) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))) || false)) && true)))), ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))), float(_GLF_FUZZED(5.1)), bool(false))), 0.0, 0.0, 1.0)), (float(mat2(injectionSwitch.y, 0.0, 0.0, 1.0))) / _GLF_ONE(1.0, injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(-546.949))) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))) || false)) && true))))) && true))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2(injectionSwitch.y, 0.0, 0.0, 1.0)), _GLF_IDENTITY((float(mat2(injectionSwitch.y, 0.0, 0.0, 1.0))), ((float(mat2(injectionSwitch.y, 0.0, 0.0, 1.0)))) * 1.0) / _GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 1.0), (true ? mat2(injectionSwitch.y, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 1.0) : _GLF_FUZZED(mat2(808.178, 18.86, -0.0, 415.915))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 0.0, 0.0, 1.0)), max(float(mat2(injectionSwitch.y, 0.0, 0.0, 1.0)), float(mat2(injectionSwitch.y, 0.0, 0.0, 1.0)))), (false ? _GLF_FUZZED(33.45) : _GLF_IDENTITY(float(mat2(injectionSwitch.y, 0.0, 0.0, 1.0)), max(float(mat2(injectionSwitch.y, 0.0, 0.0, 1.0)), float(mat2(injectionSwitch.y, 0.0, 0.0, 1.0))))))), ((float(mat2(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 0.0, 1.0)))) * 1.0) / _GLF_ONE(1.0, injectionSwitch.y)))) / 1.0), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)) && true))))))))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec2(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) || false), false))))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           break;
          }
         if(_GLF_DEAD(false))
          break;
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        break;
       do
        {
         atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, clamp(4, 4, 4)), 64, _GLF_IDENTITY(4, (4) / ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))), false || (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch)))).y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false))), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)) - 0.0)) * round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))) > injectionSwitch.y))) && true)) || false)), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) * round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))) > injectionSwitch.y))) && true)) || false))), (! ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) * round(length(normalize(vec4(1.0, 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-6.8))), 1.0))))) > injectionSwitch.y))) && true)) || false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))));
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       else
        {
         subgroupAll(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bool(_GLF_IDENTITY(false, ! (! (false))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(false, (false) && true))), (_GLF_IDENTITY(bool((_GLF_IDENTITY(false, (false) && true))), ! (_GLF_IDENTITY(! (bool((_GLF_IDENTITY(false, (false) && true)))), (! (bool((_GLF_IDENTITY(false, (false) && true))))) || false)))) || false))) && true));
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
              continue;
             break;
            }
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true)) || false)))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true), true, true)))), ((_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true), true, true))))) || false), _GLF_IDENTITY(bool(bvec4(! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y, injectionSwitch.y)))))))))))), true, true)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y, injectionSwitch.y)))))))))))), true, true)))), ! (! ((_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y, injectionSwitch.y)))))))))))), true, true))))))))), ! _GLF_IDENTITY((_GLF_IDENTITY(! ((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (_GLF_IDENTITY(injectionSwitch[1], float(mat4x2(injectionSwitch[1], 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0)))) + 0.0))).x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, true)), true && (bool(bvec4(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (_GLF_IDENTITY(injectionSwitch[1], float(mat4x2(injectionSwitch[1], 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0)))) + 0.0))).x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, true))))))), ! (! (! ((_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), true, true))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, true))))), ! (! (! ((_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), true, true)))))))), bool(bvec4(_GLF_IDENTITY(! ((_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, true))))), ! (! (! ((_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), true, true)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))))) || false)), false, true, false)), bool(bvec3(bool(bvec4(! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))), (injectionSwitch.x < injectionSwitch.y))))), bool(bvec4((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false, false)))))))), true, true)))), ! _GLF_IDENTITY((! ((_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false, false)))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false, false)))))), false)), _GLF_IDENTITY(bool(bool(bool(bvec2(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false, false)))))), false)))), false || (bool(bool(bool(bvec2(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false, false)))))), false)))))))))), true, true)))))), bool(bvec4(_GLF_IDENTITY((! ((_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false, false)))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false, false)))))), false)), _GLF_IDENTITY(bool(bool(bool(bvec2(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false, false)))))), false)))), false || (bool(bool(bool(bvec2(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false, false)))))), false)))))))))), true, true)))))), bool(bool((! ((_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false, false)))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false, false)))))), false)), _GLF_IDENTITY(bool(bool(bool(bvec2(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false, false)))))), false)))), false || (bool(bool(bool(bvec2(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false, false)))))), false)))))))))), true, true))))))))), false, false, false)))), false, true, false)), true, _GLF_IDENTITY(false, ! (! (false)))))))), true && ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, true)))), ! _GLF_IDENTITY((_GLF_IDENTITY(! ((_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, true))))), ! (! (! ((_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), true, true))))))))), ((_GLF_IDENTITY(! ((_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, true))))), ! (! (! ((_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), true, true)))))))))) || false)), false, true, false)), bool(bvec3(bool(bvec4(! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false, false)))))))), true, true)))), ! (! ((_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false, false)))))))), true, true))))))), false, true, false)), true, false))), (_GLF_IDENTITY(bool(bvec4(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), bool(bvec4(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true, true)))), ! _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY(((_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (_GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))) && true)), true, true))))), (((_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (_GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))) && true)), true, true)))))) && true), ! (! (! ((_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), true, true))))))))), ((_GLF_IDENTITY(! ((_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, true))))), ! (! (! ((_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), true, true)))))))))) || false)), false, true, false)), bool(bvec3(bool(bvec4(! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))), ! (! _GLF_IDENTITY((_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), bvec2(bvec3(bvec2(bvec2(bvec2(false, false))), false)))))))))), ((_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), bvec2(bvec3(bvec2(bvec2(bvec2(false, false))), false))))))))))) || false))))), true, true)))), ! (! ((_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4((_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true), (injectionSwitch.x < injectionSwitch.y))), true, false, false)))))))), true, true))))))), false, true, false)), true, false)))) && true))))))))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))
            continue;
           continue;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))))), ! (! (_GLF_DEAD(false)))))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true))))))))
          {
          }
         else
          {
           for(int _injected_loop_counter = ((_GLF_IDENTITY(1 & (1 & 1), max(1 & (1 & 1), _GLF_IDENTITY(1 & (1 & 1), min(1 & (1 & 1), _GLF_IDENTITY(1 & (1 & 1), int(ivec3(1 & (1 & 1), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), 1)))))))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             atomicStore(buf[next_virtual_gid], uint(2), 4, _GLF_IDENTITY(64, 0 | (64)), 4);
             if(_GLF_DEAD(false))
              continue;
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)) : _GLF_FUZZED(vec2(25.50, 8.2)))).x > injectionSwitch.y))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6.0)), float(injectionSwitch.x), bool(true))), 1.0, _GLF_IDENTITY(0.0, 1.0 * (0.0))), (vec3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6.0)), float(injectionSwitch.x), bool(true))), 1.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)))) / vec3(1.0, 1.0, 1.0))), (_GLF_IDENTITY(float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6.0)), float(injectionSwitch.x), bool(true))), 1.0, _GLF_IDENTITY(0.0, 1.0 * (0.0))), (vec3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6.0)), float(injectionSwitch.x), bool(true))), 1.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)))) / vec3(1.0, 1.0, 1.0))), clamp(float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6.0)), float(injectionSwitch.x), bool(true))), 1.0, _GLF_IDENTITY(0.0, 1.0 * (0.0))), (vec3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6.0)), float(injectionSwitch.x), bool(true))), 1.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)))) / vec3(1.0, 1.0, 1.0))), float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6.0)), float(injectionSwitch.x), bool(true))), 1.0, _GLF_IDENTITY(0.0, 1.0 * (0.0))), (vec3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6.0)), float(injectionSwitch.x), bool(true))), 1.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)))) / vec3(1.0, 1.0, 1.0))), float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6.0)), float(injectionSwitch.x), bool(true))), 1.0, _GLF_IDENTITY(0.0, 1.0 * (0.0))), (vec3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6.0)), float(injectionSwitch.x), bool(true))), 1.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)))) / vec3(1.0, 1.0, 1.0)))))) - 0.0)) > injectionSwitch.y))))
              break;
             return;
            }
           else
            {
            }
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), mat2(mat4x2(mat2(1.0))))))).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
              return;
             continue;
            }
           return;
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      break;
     continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
