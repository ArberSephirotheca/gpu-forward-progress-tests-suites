#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size;
 uvec4 GLF_merged2_0_3_86_3_1_13GLF_merged2_0_2_48_2_1_13GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idsubgroup_basenum_workgroup;
 uvec4 GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size;
 uvec2 GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size;
 GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size.zw = GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size;
 uvec3 GLF_merged2_0_2_48_2_1_13GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idsubgroup_base;
 GLF_merged2_0_3_86_3_1_13GLF_merged2_0_2_48_2_1_13GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idsubgroup_basenum_workgroup.xyz = GLF_merged2_0_2_48_2_1_13GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idsubgroup_base;
 uvec2 GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id;
 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
  {
   GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size.xy = GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id;
  }
 GLF_merged2_0_3_86_3_1_13GLF_merged2_0_2_48_2_1_13GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idsubgroup_basenum_workgroup.xyz.xy = GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size.xy;
 uvec4 GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_14subgroup_basesubgroup_idvirtual_gidworkgroup_base;
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidnum_workgroupsubgroup_local_idsubgroup_size;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size.zw.x = subgroup_id;
 GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_14subgroup_basesubgroup_idvirtual_gidworkgroup_base.y = GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size.zw.x;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size.zw.y = subgroup_size;
 GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidnum_workgroupsubgroup_local_idsubgroup_size.w = GLF_merged2_0_2_48_2_2_49GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idGLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size.zw.y;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidnum_workgroupsubgroup_local_idsubgroup_size.z = subgroup_local_id;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged2_0_3_86_3_1_13GLF_merged2_0_2_48_2_1_13GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idsubgroup_basenum_workgroup.w = num_workgroup;
 do
  {
   do
    {
     GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidnum_workgroupsubgroup_local_idsubgroup_size.y = GLF_merged2_0_3_86_3_1_13GLF_merged2_0_2_48_2_1_13GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idsubgroup_basenum_workgroup.w;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.y = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x = workgroup_id;
 do
  {
   GLF_merged2_0_3_86_3_1_13GLF_merged2_0_2_48_2_1_13GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idsubgroup_basenum_workgroup.xyz.xy.y = GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_base = GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.y * GLF_merged2_0_3_86_3_1_13GLF_merged2_0_2_48_2_1_13GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idsubgroup_basenum_workgroup.xyz.xy.y;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   do
    {
     GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_14subgroup_basesubgroup_idvirtual_gidworkgroup_base.w = workgroup_base;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 uint subgroup_base = GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_14subgroup_basesubgroup_idvirtual_gidworkgroup_base.y * GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidnum_workgroupsubgroup_local_idsubgroup_size.w;
 do
  {
   GLF_merged2_0_3_86_3_1_13GLF_merged2_0_2_48_2_1_13GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idsubgroup_basenum_workgroup.xyz.z = subgroup_base;
  }
 while(_GLF_WRAPPED_LOOP(false));
 GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_14subgroup_basesubgroup_idvirtual_gidworkgroup_base.x = GLF_merged2_0_3_86_3_1_13GLF_merged2_0_2_48_2_1_13GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idsubgroup_basenum_workgroup.xyz.z;
 uint virtual_gid = GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_14subgroup_basesubgroup_idvirtual_gidworkgroup_base.w + GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_14subgroup_basesubgroup_idvirtual_gidworkgroup_base.x + GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidnum_workgroupsubgroup_local_idsubgroup_size.z;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   GLF_merged2_0_3_86_3_1_13GLF_merged2_0_2_48_2_1_13GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idsubgroup_basenum_workgroup.xyz.xy.x = virtual_gid;
  }
 GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_14subgroup_basesubgroup_idvirtual_gidworkgroup_base.z = GLF_merged2_0_3_86_3_1_13GLF_merged2_0_2_48_2_1_13GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_idsubgroup_basenum_workgroup.xyz.xy.x;
 uint next_virtual_gid = GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_14subgroup_basesubgroup_idvirtual_gidworkgroup_base.w + GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_14subgroup_basesubgroup_idvirtual_gidworkgroup_base.x + ((GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidnum_workgroupsubgroup_local_idsubgroup_size.z + 1) % GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidnum_workgroupsubgroup_local_idsubgroup_size.w);
 GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidnum_workgroupsubgroup_local_idsubgroup_size.x = next_virtual_gid;
 atomicStore(buf[GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_14subgroup_basesubgroup_idvirtual_gidworkgroup_base.z], uint(1), 4, 64, 4);
 if((GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidnum_workgroupsubgroup_local_idsubgroup_size.z % 2) == 0)
  {
   subgroupAll(true);
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidnum_workgroupsubgroup_local_idsubgroup_size.x], uint(2), 4, 64, 4);
    }
  }
 else
  {
   subgroupAll(false);
   atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidnum_workgroupsubgroup_local_idsubgroup_size.x], uint(2), 4, 64, 4);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
