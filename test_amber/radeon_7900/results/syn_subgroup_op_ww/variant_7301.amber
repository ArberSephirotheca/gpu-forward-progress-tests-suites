#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 uvec4 GLF_merged2_0_3_68_3_1_14GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_idworkgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     else
      {
      }
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | (_GLF_IDENTITY(int(1), max(int(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-43710)))), int(1))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | (_GLF_IDENTITY(int(1), max(int(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-43710)))), _GLF_IDENTITY(int(1), (true ? _GLF_IDENTITY(int(1), int(int(int(1)))) : _GLF_FUZZED(13353))))))), (_GLF_IDENTITY(int(1), (int(1)) | (_GLF_IDENTITY(int(1), max(int(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-43710)))), int(1)))))) | (_GLF_IDENTITY(int(1), (int(1)) | (_GLF_IDENTITY(int(1), max(int(_GLF_IDENTITY(1, _GLF_IDENTITY((true ? 1 : _GLF_FUZZED(-43710)), ~ (_GLF_IDENTITY(~ ((true ? 1 : _GLF_FUZZED(-43710))), max(_GLF_IDENTITY(~ ((true ? 1 : _GLF_FUZZED(-43710))), (~ ((true ? 1 : _GLF_IDENTITY(_GLF_FUZZED(-43710), 1 * (_GLF_FUZZED(-43710)))))) + 0), ~ _GLF_IDENTITY(((true ? 1 : _GLF_FUZZED(-43710))), (_GLF_IDENTITY(((true ? 1 : _GLF_FUZZED(-43710))), (((true ? 1 : _GLF_FUZZED(-43710)))) + 0)) << 0))))))), int(1)))))))) | (_GLF_IDENTITY(int(1), (int(1)) | (_GLF_IDENTITY(int(1), max(int(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-43710)))), int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | 0), 1, 1)))))))))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | (_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) + 0)), max(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), 0 | (int(1)))) | 0), int(1))))))) >> 0)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> 0)), (_GLF_IDENTITY(int(1), min(int(1), int(1)))) << 0), int(1))), _GLF_IDENTITY(int(1), clamp(int(1), int(1), _GLF_IDENTITY(int(1), max(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) - 0)) - int(_GLF_ZERO(0.0, injectionSwitch.x))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))) && true))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (6) | 0)) | (6))), 0 + (_GLF_IDENTITY(int(6), (int(6)) | (int(6))))), int(6)))); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       do
        {
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), mix(float(injectionSwitch.y), float(_GLF_FUZZED(5.5)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, false || (false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(0.0 + (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), _GLF_IDENTITY(float(mat3(0.0 + (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 1.0, 0.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0)), max(float(mat3(0.0 + (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 1.0, 0.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0)), float(mat3(0.0 + (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 1.0, 0.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0))))))) * 1.0) > injectionSwitch.y))))
    barrier();
  }
 uvec3 GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
        }
      }
    }
   else
    {
    }
   GLF_merged2_0_3_68_3_1_14GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_idworkgroup_size.xyz = GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bool((false))), ! (! (bool(bool((false))))))), true && (! _GLF_IDENTITY((false), ((false)) && true)))), (! (_GLF_IDENTITY(! (false), true && (! _GLF_IDENTITY((false), ((false)) && true))))) && true))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uvec2 GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-0.4), _GLF_FUZZED(vec3(-0.3, 661.166, 7980.9680).p)), vec2((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (true ? injectionSwitch[0] : _GLF_FUZZED(6819.7766))), injectionSwitch[1])))[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, true)), bool(bool(bool(bvec3(true, false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), true))).x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) && true))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))));
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-56418) : 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(-658.953, -3274.5856)))).x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 0.0), mat3x2(_GLF_IDENTITY(mat4x2(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, (injectionSwitch.y) * 1.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 0.0)), transpose(transpose(mat4x2(mat3x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 0.0))))))))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(-658.953, -3274.5856)))).x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 0.0), mat3x2(_GLF_IDENTITY(mat4x2(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, (injectionSwitch.y) * 1.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 0.0)), transpose(transpose(mat4x2(mat3x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 0.0)))))))))))), ! (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(-658.953, -3274.5856)))).x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 0.0), mat3x2(_GLF_IDENTITY(mat4x2(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, (injectionSwitch.y) * 1.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 0.0)), transpose(transpose(mat4x2(mat3x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 0.0)))))))))))), true && (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(-658.953, -3274.5856)))).x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 0.0), mat3x2(_GLF_IDENTITY(mat4x2(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, (injectionSwitch.y) * 1.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 0.0)), transpose(transpose(mat4x2(mat3x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 0.0)))))))))))))))))))))
    barrier();
  }
 _GLF_IDENTITY(GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.xy = GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid, _GLF_IDENTITY(uvec2(0u, 0u) ^ (GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.xy = GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid), (false ? _GLF_FUZZED(GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid) : _GLF_IDENTITY(uvec2(0u, 0u) ^ _GLF_IDENTITY((GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.xy = GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid), (true ? (GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.xy = GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid) : _GLF_FUZZED(floatBitsToUint(injectionSwitch)))), uvec2(0u, 0u) + (uvec2(0u, _GLF_IDENTITY(0u, min(0u, 0u))) ^ (GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.xy = GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid))))));
 for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, 0)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y))))))))))))
        barrier();
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), 1 * (int(3))), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y)))))))), _GLF_IDENTITY(false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), ! (! (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))))), (_GLF_IDENTITY(false, (false) && true) || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) && true) && (false))) || false), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), true && (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (false)), true, true))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(_GLF_FUZZED(1774.1459)), float(injectionSwitch.y), bool(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(bvec3(true, true, false), true))))))), 1.0 * (mix(float(_GLF_FUZZED(1774.1459)), _GLF_IDENTITY(float(injectionSwitch.y), clamp(_GLF_IDENTITY(float(injectionSwitch.y), 0.0 + (float(injectionSwitch.y))), float(injectionSwitch.y), float(injectionSwitch.y))), bool(true)))))))))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))));
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.w = subgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false, true))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_68_3_1_14GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_idworkgroup_size.xyz.y = _GLF_IDENTITY(GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id, min(GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id, GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id)).w, (_GLF_IDENTITY(GLF_merged2_0_3_68_3_1_14GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_idworkgroup_size.xyz.y = GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.w, (_GLF_IDENTITY(GLF_merged2_0_3_68_3_1_14GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_idworkgroup_size.xyz.y = GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.w, (_GLF_IDENTITY(GLF_merged2_0_3_68_3_1_14GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_idworkgroup_size.xyz.y = GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.w, (GLF_merged2_0_3_68_3_1_14GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_idworkgroup_size.xyz.y = GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.w) >> 0u)) + 0u)) / 1u)) / 1u), (_GLF_IDENTITY(GLF_merged2_0_3_68_3_1_14GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_idworkgroup_size.xyz.y = _GLF_IDENTITY(GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id, min(GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id, GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id)).w, (_GLF_IDENTITY(GLF_merged2_0_3_68_3_1_14GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_idworkgroup_size.xyz.y = GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.w, (_GLF_IDENTITY(GLF_merged2_0_3_68_3_1_14GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_idworkgroup_size.xyz.y = GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.w, (_GLF_IDENTITY(GLF_merged2_0_3_68_3_1_14GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_idworkgroup_size.xyz.y = GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.w, (GLF_merged2_0_3_68_3_1_14GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_idworkgroup_size.xyz.y = GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.w) >> 0u)) + 0u)) / 1u)) / 1u)) ^ 0u);
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ((false) || false) || false))))
      barrier();
     barrier();
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))) && true)))
      barrier();
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), (bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))) || false)) && (false))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(6), int(6))) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
                    barrier();
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
              barrier();
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             do
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), false), bvec3(bvec4(bvec3(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), false), true))))))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, false))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         do
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), (bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))) || false))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.xy.x = _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u), subgroup_local_id)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u), subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u), subgroup_local_id))) | 0u) : _GLF_FUZZED(subgroup_local_id)));
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.z = _GLF_IDENTITY(num_workgroup, max(num_workgroup, num_workgroup));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 _GLF_IDENTITY(GLF_merged2_0_3_68_3_1_14GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_idworkgroup_size.xyz.x = GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.z, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(GLF_merged2_0_3_68_3_1_14GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_idworkgroup_size.xyz.x = GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.z, (_GLF_IDENTITY(false ? _GLF_FUZZED(num_workgroup) : GLF_merged2_0_3_68_3_1_14GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_idworkgroup_size.xyz.x = GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.z, (false ? _GLF_FUZZED(num_workgroup) : GLF_merged2_0_3_68_3_1_14GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_idworkgroup_size.xyz.x = GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.z) + 0u)))), _GLF_IDENTITY((~ (_GLF_IDENTITY(GLF_merged2_0_3_68_3_1_14GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_idworkgroup_size.xyz.x = GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.z, (false ? _GLF_FUZZED(num_workgroup) : GLF_merged2_0_3_68_3_1_14GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_idworkgroup_size.xyz.x = GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.z)))) / 1u, (_GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(GLF_merged2_0_3_68_3_1_14GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_idworkgroup_size.xyz.x = GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.z, (false ? _GLF_FUZZED(num_workgroup) : GLF_merged2_0_3_68_3_1_14GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_idworkgroup_size.xyz.x = _GLF_IDENTITY(GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.z, _GLF_IDENTITY((GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.z), clamp((GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.z), (GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.z), (GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.z))) | (GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.z)))))), (true ? _GLF_IDENTITY((~ (_GLF_IDENTITY(GLF_merged2_0_3_68_3_1_14GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_idworkgroup_size.xyz.x = GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.z, (false ? _GLF_FUZZED(num_workgroup) : GLF_merged2_0_3_68_3_1_14GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_idworkgroup_size.xyz.x = _GLF_IDENTITY(GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.z, (GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.z) | (GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.z)))))), ~ (~ ((~ (_GLF_IDENTITY(GLF_merged2_0_3_68_3_1_14GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_idworkgroup_size.xyz.x = GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.z, (false ? _GLF_FUZZED(num_workgroup) : GLF_merged2_0_3_68_3_1_14GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_idworkgroup_size.xyz.x = _GLF_IDENTITY(GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.z, (GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.z) | (GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.z))))))))) : _GLF_FUZZED(subgroup_id))) / 1u, (false ? _GLF_FUZZED(subgroup_local_id) : (~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_68_3_1_14GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_idworkgroup_size.xyz.x = _GLF_IDENTITY(GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.z, 0u + (GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.z)), (GLF_merged2_0_3_68_3_1_14GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_idworkgroup_size.xyz.x = _GLF_IDENTITY(GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.z, 0u + (GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.z))) << 0u), (false ? _GLF_FUZZED(num_workgroup) : GLF_merged2_0_3_68_3_1_14GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_idworkgroup_size.xyz.x = GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.z)))) / 1u))) / ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(1.0, float(vec2(1.0, 1.0))), 1.0), vec3(1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, determinant(mat3(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-6.2)), float(0.0), bool(true))))), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 0.0)))) < injectionSwitch.y)))) && true)) && true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y, false, false, true)))))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   barrier();
  }
 GLF_merged2_0_3_68_3_1_14GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_idworkgroup_size.w = workgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 1.0, 0.0, 0.0)))) / 1.0)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_IDENTITY(true, (true) && true)))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(2740.4757)), bool(false)))))))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))))))), true, true, true))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 GLF_merged2_0_3_68_3_1_14GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_idworkgroup_size.xyz.z = workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), true, true))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))) || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), true, true)))) && true)))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = GLF_merged2_0_3_68_3_1_14GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_idworkgroup_size.w * GLF_merged2_0_3_68_3_1_14GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_idworkgroup_size.xyz.z;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) && true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   barrier();
  }
 uint subgroup_base = GLF_merged2_0_3_68_3_1_14GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_idworkgroup_size.xyz.y * subgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), _GLF_IDENTITY(true, false || (true)) && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))) && true)), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))) && true))), bool(bool(! ((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, true && (false)), true, false)))) && true))))))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint virtual_gid = workgroup_base + subgroup_base + GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.xy.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), mix(float(min(injectionSwitch.x, injectionSwitch.x)), float(_GLF_FUZZED(-3613.2948)), bool(false)))) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), ! (! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), false || ((_GLF_IDENTITY(false, ! (! (false)))))))))))))))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    barrier();
  }
 else
  {
   GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.xy.y = virtual_gid;
  }
 for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) * 1)) >> _GLF_IDENTITY(int(1), int(1))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ _GLF_IDENTITY(1, (1) - 0))), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (1 ^ _GLF_IDENTITY(1, (1) - 0)), ! (! (_GLF_IDENTITY(_injected_loop_counter > (1 ^ _GLF_IDENTITY(1, (1) - 0)), bool(bvec3(_GLF_IDENTITY(_injected_loop_counter > (1 ^ _GLF_IDENTITY(1, (1) - 0)), ! (! (_injected_loop_counter > (1 ^ _GLF_IDENTITY(1, (1) - 0))))), true, false))))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, 0.0))).y))))
          barrier();
         for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3)))))); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(3), int(3))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)), bool(bool(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(8.4) : injectionSwitch.x)) > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2x4(injectionSwitch.y, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-0.2))), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0), (false ? _GLF_FUZZED(mat2x4(6.1, -9.9, -1.2, -8.5, 1012.9362, 895.584, 1.2, 4632.8917)) : mat2x4(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
            {
             barrier();
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_base + ((_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id, uvec4(GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id[0], GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id[1], GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id[2], _GLF_IDENTITY(GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id[3], 0u ^ (GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id[3])))).xy.x + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 1u, 0u, 1u))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))), _GLF_IDENTITY((_GLF_IDENTITY(~ (subgroup_size), uint(uint(~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(false ? _GLF_FUZZED(113160u) : subgroup_size, (false ? _GLF_FUZZED(113160u) : subgroup_size) / 1u)))))))), 0u + ((_GLF_IDENTITY(~ (subgroup_size), uint(uint(~ (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(false ? _GLF_FUZZED(113160u) : subgroup_size, (false ? _GLF_FUZZED(113160u) : subgroup_size) / 1u)))))))))) | _GLF_IDENTITY(0u, (0u) - 0u))), min((_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) | (~ (subgroup_size))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_size), uint(uint(~ (subgroup_size)))), (true ? _GLF_IDENTITY(~ (subgroup_size), uint(uint(~ _GLF_IDENTITY((subgroup_size), 1u * (_GLF_IDENTITY((subgroup_size), 1u * ((subgroup_size)))))))) : _GLF_FUZZED(subgroup_id)))) | 0u)), (_GLF_IDENTITY(~ (subgroup_size), (_GLF_IDENTITY(~ _GLF_IDENTITY((subgroup_size), ~ (_GLF_IDENTITY(~ ((subgroup_size)), 0u + (~ ((subgroup_size)))))), uint(uint(_GLF_IDENTITY(~ (subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(~ (subgroup_size), 1u), (uvec2(~ (subgroup_size), 1u)) | (uvec2(0u, 0u) | uvec2(0u, 0u)))), ~ (~ (uint(uvec2(~ (subgroup_size), 1u))))), (uint(uvec2(~ (subgroup_size), 1u))) / 1u)))))) | 0u))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1, (1) << 0) ^ 0)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY(int(int(4)), (_GLF_IDENTITY(int(int(4)), (false ? _GLF_FUZZED(_injected_loop_counter) : int(int(4))))) * 1))), int(4)))); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))) || (false), (_GLF_IDENTITY(false, ! (! (false))) || (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
            barrier();
           barrier();
          }
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, ! (! (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) != 1))))), (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))) || false))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), true))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, true, false)))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1482.9006), _GLF_FUZZED((-9772.8740 + -3.6))), vec2(_GLF_IDENTITY((injectionSwitch)[0], 1.0 * ((injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(88.30), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], (true ? (injectionSwitch)[0] : _GLF_FUZZED(413.516))), _GLF_FUZZED(-7.0)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0))) * cos(vec2(0.0, 0.0))), (_GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0))) * cos(vec2(0.0, 0.0)))) / vec2(1.0, 1.0)) / vec2(1.0, 1.0)).y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           atomicStore(buf[_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.xy.y, (GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id.xy.y) * uint(_GLF_ONE(1.0, injectionSwitch.y)))], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), 0u + (uint(1))), max(uint(1), uint(_GLF_IDENTITY(1, 0 ^ (1))))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (uint(1)), (_GLF_IDENTITY(~ (uint(1)), (~ (uint(1))) | (~ (uint(1))))) | (_GLF_IDENTITY(~ (uint(1)), uint(uvec4(~ (uint(1)), 1u, 0u, 1u))))), 1u * (_GLF_IDENTITY(~ (uint(1)), min(~ (uint(1)), ~ (uint(1)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), 0u ^ (_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) | (1))), _GLF_IDENTITY(max(uint(1), uint(1)), min(max(uint(1), uint(1)), max(uint(1), uint(1))))))), ~ (_GLF_IDENTITY(~ (uint(1)), 1u * (~ _GLF_IDENTITY((uint(1)), (false ? _GLF_FUZZED(virtual_gid) : (uint(1))))))))) / 1u), 4, 64, 4);
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)).y)))))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-492.149), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-35.19)), bvec2(true, false))).x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), bool(bool(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false || ((injectionSwitch.x > injectionSwitch.y)), (false || ((injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec4((false), true, true, true))) && true)) || false)))
          barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec4(bool(bool(false)), false, false, false))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) | 0)) - int(_GLF_ZERO(0.0, injectionSwitch.x))) | (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-93997) : _GLF_IDENTITY(0, (0) >> _GLF_IDENTITY(0, max(0, 0))))) | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) - 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec3(_GLF_IDENTITY(false, false || (false)), true, true))), (false) && true)))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
        }
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), _GLF_IDENTITY((bool(bvec3(false, false, false))) && true, ! (_GLF_IDENTITY(! ((bool(bvec3(false, false, false))) && true), (! ((bool(bvec3(false, false, false))) && true)) && true)))))))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)) || false)), ! (! (bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)) || false))))))); _injected_loop_counter ++)
  {
   if((_GLF_IDENTITY(GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id, _GLF_IDENTITY((GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id) | uvec4(0u, _GLF_IDENTITY(0u, (0u) * (0u ^ 1u)), 0u, 0u), ((GLF_merged3_0_2_53_2_1_13_3_1_11GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gidnum_workgroupsubgroup_id) | _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), uvec4(0u, 0u, 0u, 0u) | (uvec4(0u, 0u, 0u, 0u)))) / uvec4(1u, 1u, 1u, 1u))).xy.x % 2) == _GLF_IDENTITY(0, (0) ^ (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(ivec2(0 >> _GLF_IDENTITY(int(1), int(1)), 1)), int(_GLF_IDENTITY(ivec3(int(ivec2(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_injected_loop_counter), max(true ? 0 : _GLF_FUZZED(_injected_loop_counter), _GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_injected_loop_counter), (true ? 0 : _GLF_FUZZED(_injected_loop_counter)) | (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))))))) << 0), 0)) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, int(ivec3(1, (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(-26822) : int(2))))), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))))))), 1)), _GLF_IDENTITY(0, (0) ^ 0), _GLF_IDENTITY(0, _GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) ^ 0))))) + (0))), (ivec3(int(ivec2(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(ivec2(int(1), 1)), (_GLF_IDENTITY(int(ivec2(int(1), 1)), clamp(int(ivec2(int(1), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) ^ 0))), int(ivec2(int(1), 1)), int(ivec2(int(1), 1))))) | (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), clamp(int(8), int(8), int(8))))))), int(1)), 1)), 0, 0)) - ivec3(0, _GLF_IDENTITY(0, max(0, 0)), 0))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, false || (false)))), (! _GLF_IDENTITY((! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))))), ! (! ((! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       subgroupAll(_GLF_IDENTITY(true, true && (true)));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), bool(bvec3(_GLF_IDENTITY(! (! (false)), bool(bvec3(_GLF_IDENTITY(! (! (false)), (! (! (false))) || false), true, true))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(! (! (false)), false, true))), false, true, true)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, (false) || false), false))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, (false) || false), false)))))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-4.7), _GLF_FUZZED(_GLF_IDENTITY(-3641.1245, min(-3641.1245, -3641.1245)))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-4.7), _GLF_FUZZED(-3641.1245)), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))), false))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))), false))))))))).x > injectionSwitch.y, false, true))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(sin(vec2(0.0, 0.0)), mat2(1.0) * (_GLF_IDENTITY(sin(vec2(0.0, 0.0)), vec2(vec3(sin(vec2(0.0, 0.0)), 1.0)))))), mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(1, (1) | (1))], min((injectionSwitch)[1], (injectionSwitch)[1]))), vec2(_GLF_FUZZED(_GLF_IDENTITY(-4.7, min(_GLF_IDENTITY(-4.7, float(vec4(-4.7, 0.0, 0.0, 1.0))), -4.7))), _GLF_FUZZED(-3641.1245)), bvec2(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))), false))).x, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(sin(vec2(0.0, 0.0)), mat2(1.0) * (_GLF_IDENTITY(sin(vec2(0.0, 0.0)), vec2(vec3(sin(vec2(0.0, 0.0)), 1.0)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(sin(vec2(0.0, 0.0)), mat2(1.0) * (_GLF_IDENTITY(sin(vec2(0.0, 0.0)), _GLF_IDENTITY(vec2(vec3(sin(vec2(0.0, 0.0)), 1.0)), (true ? vec2(vec3(sin(vec2(0.0, 0.0)), 1.0)) : _GLF_FUZZED(injectionSwitch))))))), vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(sin(vec2(0.0, 0.0)), _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) / mat2(1.0, 1.0, 1.0, 1.0)) * (_GLF_IDENTITY(sin(vec2(0.0, 0.0)), vec2(vec3(sin(vec2(0.0, 0.0)), 1.0)))))))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(sin(vec2(0.0, 0.0)), mat2(1.0) * (_GLF_IDENTITY(sin(vec2(0.0, 0.0)), vec2(vec3(sin(vec2(0.0, 0.0)), 1.0)))))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(sin(vec2(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0)), mat2(1.0) * (_GLF_IDENTITY(sin(vec2(0.0, 0.0)), vec2(vec3(sin(vec2(0.0, 0.0)), 1.0)))))))), mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(1, (1) | (1))], min((injectionSwitch)[_GLF_IDENTITY(1, 0 | (1))], (injectionSwitch)[1]))), vec2(_GLF_FUZZED(-4.7), _GLF_FUZZED(-3641.1245)), bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec2(false, false)))))).x, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(sin(vec2(0.0, 0.0)), mat2(1.0) * (_GLF_IDENTITY(sin(vec2(0.0, 0.0)), vec2(_GLF_IDENTITY(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), _GLF_IDENTITY(vec3(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), vec3(mat4x2(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), sqrt(0.0), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), transpose(transpose(mat2x4(_GLF_IDENTITY(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), vec3(mat4x2(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), sqrt(0.0), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))))))), _GLF_IDENTITY(vec3(_GLF_IDENTITY(mat4(_GLF_IDENTITY(vec3(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), vec3(mat4x2(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), sqrt(0.0), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), transpose(transpose(mat2x4(_GLF_IDENTITY(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), vec3(mat4x2(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), sqrt(0.0), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))))))), (vec3(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), vec3(mat4x2(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), sqrt(0.0), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), transpose(transpose(mat2x4(_GLF_IDENTITY(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), vec3(mat4x2(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), sqrt(0.0), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))))))) / vec3(1.0, 1.0, 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), sqrt(1.0), 0.0, 1.0, 0.0, 0.0), transpose(transpose(mat4(_GLF_IDENTITY(vec3(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), vec3(mat4x2(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), sqrt(0.0), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), transpose(transpose(mat2x4(_GLF_IDENTITY(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), vec3(mat4x2(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), sqrt(0.0), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))))))), (vec3(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), vec3(mat4x2(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), sqrt(0.0), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), transpose(transpose(mat2x4(_GLF_IDENTITY(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), vec3(mat4x2(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), sqrt(0.0), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))))))) / vec3(1.0, 1.0, 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), sqrt(1.0), 0.0, 1.0, 0.0, 0.0))))), mix(vec3((vec3(_GLF_IDENTITY(mat4(_GLF_IDENTITY(vec3(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), vec3(mat4x2(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), sqrt(0.0), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), transpose(transpose(mat2x4(_GLF_IDENTITY(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), vec3(mat4x2(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), sqrt(0.0), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))))))), (vec3(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), vec3(mat4x2(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), sqrt(0.0), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), transpose(transpose(mat2x4(_GLF_IDENTITY(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), vec3(mat4x2(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), sqrt(0.0), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))))))) / vec3(1.0, 1.0, 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), sqrt(1.0), 0.0, 1.0, 0.0, 0.0), transpose(transpose(mat4(_GLF_IDENTITY(vec3(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), vec3(mat4x2(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), sqrt(0.0), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), transpose(transpose(mat2x4(_GLF_IDENTITY(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), vec3(mat4x2(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), sqrt(0.0), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))))))), (vec3(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), vec3(mat4x2(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), sqrt(0.0), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), transpose(transpose(mat2x4(_GLF_IDENTITY(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), vec3(mat4x2(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), sqrt(0.0), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))))))) / vec3(1.0, 1.0, 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), sqrt(1.0), 0.0, 1.0, 0.0, 0.0))))))[0], (vec3(_GLF_IDENTITY(mat4(_GLF_IDENTITY(vec3(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), vec3(mat4x2(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), sqrt(0.0), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), transpose(transpose(mat2x4(_GLF_IDENTITY(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), vec3(mat4x2(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), sqrt(0.0), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))))))), (vec3(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), vec3(mat4x2(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), sqrt(0.0), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), transpose(transpose(mat2x4(_GLF_IDENTITY(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), vec3(mat4x2(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), sqrt(0.0), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))))))) / vec3(1.0, 1.0, 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), sqrt(1.0), 0.0, 1.0, 0.0, 0.0), transpose(transpose(mat4(_GLF_IDENTITY(vec3(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), vec3(mat4x2(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), sqrt(0.0), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), transpose(transpose(mat2x4(_GLF_IDENTITY(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), vec3(mat4x2(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), sqrt(0.0), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))))))), (vec3(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), vec3(mat4x2(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), sqrt(0.0), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), transpose(transpose(mat2x4(_GLF_IDENTITY(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), vec3(mat4x2(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), sqrt(0.0), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))))))) / vec3(1.0, 1.0, 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), sqrt(1.0), 0.0, 1.0, 0.0, 0.0))))))[1], (vec3(_GLF_IDENTITY(mat4(_GLF_IDENTITY(vec3(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), vec3(mat4x2(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), sqrt(0.0), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), transpose(transpose(mat2x4(_GLF_IDENTITY(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), vec3(mat4x2(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), sqrt(0.0), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))))))), (vec3(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), vec3(mat4x2(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), sqrt(0.0), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), transpose(transpose(mat2x4(_GLF_IDENTITY(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), vec3(mat4x2(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), sqrt(0.0), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))))))) / vec3(1.0, 1.0, 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), sqrt(1.0), 0.0, 1.0, 0.0, 0.0), transpose(transpose(mat4(_GLF_IDENTITY(vec3(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), vec3(mat4x2(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), sqrt(0.0), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), transpose(transpose(mat2x4(_GLF_IDENTITY(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), vec3(mat4x2(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), sqrt(0.0), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))))))), (vec3(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), vec3(mat4x2(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), sqrt(0.0), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), transpose(transpose(mat2x4(_GLF_IDENTITY(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), vec3(mat4x2(vec3(sin(vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 1.0), 0.0, 0.0, 1.0, 1.0, 1.0))), sqrt(0.0), 1.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))))))) / vec3(1.0, 1.0, 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), sqrt(1.0), 0.0, 1.0, 0.0, 0.0))))))[2]), vec3(_GLF_FUZZED(-5.0), _GLF_FUZZED(5105.3937), _GLF_FUZZED(3414.0721)), bvec3(false, false, false)))))))))), mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(1, (1) | (1))], min((injectionSwitch)[1], (injectionSwitch)[1]))), vec2(_GLF_FUZZED(-4.7), _GLF_FUZZED(-3641.1245)), bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))))).x > injectionSwitch.y)), false))).x : _GLF_FUZZED(1.5)))) - 0.0) > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-4.7), _GLF_FUZZED(-3641.1245)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), (mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(1800.3727)), bool(false)))), min(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(1800.3727)), bool(false)))), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(1800.3727)), bool(false)))))), vec2(_GLF_FUZZED(-4.7), _GLF_FUZZED(-3641.1245)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) / vec2(1.0, 1.0))).x > injectionSwitch.y, false, true)))) && true)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
          }
         for(int _injected_loop_counter = (0 & -44146); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), min(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, 0 | (1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = _GLF_IDENTITY((0 & -88312), clamp((0 & -88312), _GLF_IDENTITY((0 & -88312), (false ? _GLF_FUZZED(_injected_loop_counter) : (0 & -88312))), (0 & -88312))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (1 | 0), bool(bvec2(_GLF_IDENTITY(_injected_loop_counter < (1 | 0), bool(bool(_injected_loop_counter < (1 | 0)))), false)))); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
              barrier();
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), 1 * ((~ (1))))), (_injected_loop_counter != _GLF_IDENTITY(1, ~ (~ (1)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) || false)))))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec4(! (injectionSwitch.x > injectionSwitch.y), true, false, false))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec4(! (injectionSwitch.x > injectionSwitch.y), true, false, false))))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec4(! (injectionSwitch.x > injectionSwitch.y), true, false, false))))))))))), bool(bool(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec4(! (injectionSwitch.x > injectionSwitch.y), true, false, false))))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec4(! (injectionSwitch.x > injectionSwitch.y), true, false, false))))))))))))))))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec2(! (_GLF_DEAD(false)), false)), (_GLF_IDENTITY(bool(bvec2(! (_GLF_DEAD(false)), false)), true && (bool(bvec2(! (_GLF_DEAD(false)), false))))) || false)))))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), true && (false)))))));
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 ^ 1) & ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))) || (! (false)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y)))) || false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             barrier();
            }
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           do
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), false, false)))), (bool(_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), false, false))))) && true))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(false, (false) && true), true, false)), (bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(false, (false) && true), true, false))) && true)), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_DEAD(false)), true && ((_GLF_DEAD(false)))), (! (_GLF_DEAD(false))) && true)))), (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))) || false), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) && true)), true, false)), (bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(true, ! (! (true))), false))) && true)), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_DEAD(false)), true && ((_GLF_DEAD(false)))), (! (_GLF_DEAD(false))) && true)))), (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))) || false)))))), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-349.857) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)))) || (_GLF_IDENTITY(false, (false) && true)))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), false)), bool(bvec2(bool(bvec2(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), false)), true))))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0), _injected_loop_counter)) != 0); _injected_loop_counter --)
              {
               barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))
                barrier();
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec2((! (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (false) || false)))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
        }
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 ^ (int(1))), int(1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), max(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))), false || (_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), max(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) - mat2(0.0, 0.0, 0.0, 0.0)) * (injectionSwitch), (_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) - mat2(0.0, 0.0, 0.0, 0.0)) * (injectionSwitch)) * mat2(1.0))).x))))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false))))))))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid))], uint(2), 4, 64, _GLF_IDENTITY(4, _GLF_IDENTITY(0 + (4), (0 + (4)) << 0)));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3(injectionSwitch.x, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, determinant(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0), (false ? _GLF_FUZZED(mat3(-959.017, 51.08, -3.6, -2.4, 1.4, 630.298, 62.54, 94.00, -713.606)) : _GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0), (true ? mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0) : _GLF_FUZZED((mat4x3(1.8, 1.5, -15.09, -8.6, -7.3, 95.38, 691.265, -44.66, -4.5, 73.24, 81.89, 7947.4829) * mat3x4(-98.50, -4474.5514, 7530.9942, 92.08, 8.2, -9.7, -851.024, -7279.2520, -5.8, 2.2, -4500.9946, -1.2)))))))), 0.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, min(1.0, 1.0)) : _GLF_FUZZED(5.3))), 1.0, 1.0)))), 1.0, 0.0, sqrt(1.0), 1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(432.535) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), sqrt(0.0))), clamp(_GLF_IDENTITY(float(mat3(injectionSwitch.x, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, determinant(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0), (false ? _GLF_FUZZED(mat3(-959.017, 51.08, -3.6, -2.4, 1.4, 630.298, 62.54, 94.00, -713.606)) : _GLF_IDENTITY(mat3(1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 1.0), (true ? mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0) : _GLF_FUZZED((mat4x3(1.8, 1.5, -15.09, -8.6, -7.3, 95.38, 691.265, -44.66, -4.5, 73.24, 81.89, 7947.4829) * mat3x4(-98.50, -4474.5514, 7530.9942, 92.08, 8.2, -9.7, -851.024, -7279.2520, -5.8, 2.2, -4500.9946, -1.2)))))))), 0.0, 1.0)), 1.0, 0.0, sqrt(1.0), 1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(432.535) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), sqrt(0.0))), (float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 1.0, 1.0, exp(determinant(mat2(0.0, 0.0, 0.0, 0.0)))))), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, determinant(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0), (false ? _GLF_FUZZED(mat3(-959.017, 51.08, -3.6, -2.4, 1.4, 630.298, 62.54, 94.00, -713.606)) : _GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0), (true ? mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0) : _GLF_FUZZED((mat4x3(_GLF_IDENTITY(1.8, min(1.8, 1.8)), 1.5, -15.09, -8.6, -7.3, 95.38, 691.265, -44.66, -4.5, 73.24, 81.89, 7947.4829) * mat3x4(-98.50, -4474.5514, 7530.9942, 92.08, 8.2, -9.7, -851.024, -7279.2520, -5.8, 2.2, -4500.9946, -1.2)))))))), 0.0, 1.0)), 1.0, 0.0, sqrt(1.0), 1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(432.535) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), sqrt(0.0)), transpose(transpose(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 1.0, 1.0, exp(determinant(mat2(0.0, 0.0, 0.0, 0.0)))))), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, determinant(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0), (false ? _GLF_FUZZED(mat3(-959.017, 51.08, -3.6, -2.4, 1.4, 630.298, 62.54, 94.00, -713.606)) : _GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0), (true ? mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0) : _GLF_FUZZED((mat4x3(_GLF_IDENTITY(1.8, min(1.8, 1.8)), 1.5, -15.09, -8.6, -7.3, 95.38, 691.265, -44.66, -4.5, 73.24, 81.89, 7947.4829) * mat3x4(-98.50, -4474.5514, 7530.9942, 92.08, 8.2, -9.7, -851.024, -7279.2520, -5.8, 2.2, -4500.9946, -1.2)))))))), 0.0, 1.0)), 1.0, 0.0, sqrt(1.0), 1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(432.535) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), sqrt(0.0)), (false ? _GLF_FUZZED(mat3(-9.0, -13.57, -56.45, 48.43, -41.24, -0.2, -4293.9505, -8.4, 19.69)) : mat3(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 1.0, 1.0, exp(determinant(mat2(0.0, 0.0, 0.0, 0.0)))))), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, determinant(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0), (false ? _GLF_FUZZED(mat3(-959.017, 51.08, -3.6, -2.4, 1.4, 630.298, 62.54, 94.00, -713.606)) : _GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0), (true ? mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0) : _GLF_FUZZED((mat4x3(_GLF_IDENTITY(1.8, min(1.8, 1.8)), 1.5, -15.09, -8.6, -7.3, 95.38, 691.265, -44.66, -4.5, 73.24, 81.89, 7947.4829) * mat3x4(-98.50, -4474.5514, 7530.9942, 92.08, 8.2, -9.7, -851.024, -7279.2520, -5.8, 2.2, -4500.9946, -1.2)))))))), 0.0, 1.0)), 1.0, 0.0, sqrt(1.0), 1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(432.535) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), sqrt(0.0))))))))) - 0.0), float(mat3(injectionSwitch.x, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, determinant(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0), (false ? _GLF_FUZZED(mat3(-959.017, 51.08, -3.6, -2.4, 1.4, 630.298, 62.54, 94.00, -713.606)) : _GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0), (true ? mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0) : _GLF_FUZZED((mat4x3(1.8, 1.5, -15.09, -8.6, -7.3, 95.38, 691.265, -44.66, -4.5, 73.24, 81.89, 7947.4829) * mat3x4(-98.50, _GLF_IDENTITY(-4474.5514, (-4474.5514) + 0.0), 7530.9942, 92.08, 8.2, -9.7, -851.024, -7279.2520, -5.8, 2.2, -4500.9946, -1.2)))))))), 0.0, 1.0)), 1.0, 0.0, sqrt(1.0), 1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(432.535) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), sqrt(0.0))), float(mat3(injectionSwitch.x, 1.0, determinant(mat3(1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, determinant(_GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0), (false ? _GLF_FUZZED(mat3(-959.017, 51.08, -3.6, -2.4, 1.4, 630.298, 62.54, 94.00, -713.606)) : _GLF_IDENTITY(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0), (true ? mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0) : _GLF_FUZZED((mat4x3(1.8, 1.5, -15.09, -8.6, -7.3, 95.38, 691.265, -44.66, -4.5, 73.24, 81.89, 7947.4829) * mat3x4(-98.50, -4474.5514, 7530.9942, 92.08, _GLF_IDENTITY(8.2, min(8.2, 8.2)), -9.7, -851.024, -7279.2520, -5.8, 2.2, -4500.9946, -1.2)))))))), 0.0, 1.0)), _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)), 0.0, sqrt(1.0), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(432.535) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0 + (_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(432.535) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))))), sqrt(0.0)))))) > injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       for(int _injected_loop_counter = (((1 & 1) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     subgroupAll(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, true, _GLF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, true && (true))), (injectionSwitch.x < injectionSwitch.y))))), bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, true, _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true)))))), (injectionSwitch.x < injectionSwitch.y))))), true, true))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     do
      {
       atomicStore(buf[next_virtual_gid], uint(2), 4, 64, _GLF_IDENTITY(4, 0 + (4)));
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     for(int _injected_loop_counter = (0 & (38468 << -61833)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, true)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
