#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8065.0140), _GLF_FUZZED(float(true))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y))))
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), bool(bool(! (! (_GLF_DEAD(false))))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, (1) ^ 0)]), vec2(_GLF_FUZZED(_GLF_IDENTITY(-135.456, mix(float(_GLF_FUZZED((- 6479.4739))), float(-135.456), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_FUZZED(849.309)), bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, bool(bvec3(false, false, true))) || (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y, _GLF_IDENTITY(false, bool(bvec3(false, false, true))) || (injectionSwitch.x > injectionSwitch.y)), true, true, false))), false))))))) || false))), false))).y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0), transpose(_GLF_IDENTITY(transpose(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0)), (transpose(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0))) * mat2(1.0))))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) << 0)]), clamp(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0), transpose(_GLF_IDENTITY(transpose(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0)), (transpose(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), vec2(mat3x4(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x2(0.0, determinant(mat3(1.0, 0.0, tan(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0)), clamp(float(mat4x2(0.0, determinant(mat3(1.0, 0.0, tan(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0)), _GLF_IDENTITY(float(mat4x2(0.0, determinant(mat3(1.0, 0.0, tan(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0)), (float(mat4x2(0.0, determinant(mat3(1.0, 0.0, tan(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0))) + 0.0), float(mat4x2(0.0, determinant(mat3(1.0, 0.0, tan(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0))))), 0.0, sqrt(0.0), sin(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), 1.0))), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0))), 1.0, 1.0, cos(0.0), 1.0))) * mat2(1.0))))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) << 0)]), (true ? vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0), transpose(_GLF_IDENTITY(transpose(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0)), (transpose(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), _GLF_IDENTITY(sin(0.0), _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(sin(0.0), 0.0 + (_GLF_IDENTITY(sin(0.0), float(vec2(sin(0.0), 0.0))))), 1.0, log(1.0), 1.0, 0.0, abs(abs(0.0)), 0.0, log(1.0), 0.0)), min(float(mat3(_GLF_IDENTITY(sin(0.0), 0.0 + (_GLF_IDENTITY(sin(0.0), float(vec2(sin(0.0), 0.0))))), 1.0, log(1.0), 1.0, 0.0, abs(abs(0.0)), 0.0, log(1.0), 0.0)), float(mat3(_GLF_IDENTITY(sin(0.0), 0.0 + (_GLF_IDENTITY(sin(0.0), float(vec2(sin(0.0), 0.0))))), 1.0, log(1.0), 1.0, 0.0, abs(abs(0.0)), 0.0, log(1.0), 0.0))))), 1.0))), 1.0, 1.0, cos(0.0), 1.0))) * mat2(1.0))))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) << 0)]) : _GLF_FUZZED(vec2(-595.225, -3.9)))), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0)), cos(0.0), 1.0), transpose(_GLF_IDENTITY(transpose(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(20.63)), vec2(_GLF_FUZZED(8350.4194), (injectionSwitch)[1]), bvec2(false, true)))), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0)), (transpose(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(_GLF_IDENTITY(0.0, float(mat3x2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))), 0.0, 0.0)), 0.0, 0.0))) - 0.0), 0.0, 1.0, 1.0, 0.0, 1.0)))), 1.0))) * mat2(1.0))))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - _GLF_IDENTITY(0, (false ? _GLF_FUZZED(22323) : 0)))) << 0)]), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0), transpose(_GLF_IDENTITY(transpose(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0)), (transpose(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0))) * mat2(1.0))))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) << 0)]), _GLF_IDENTITY((_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false))) ? _GLF_IDENTITY(_GLF_IDENTITY(vec2((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[0], _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0), transpose(_GLF_IDENTITY(transpose(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0)), (transpose(mat3x2(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0)), (true ? vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0)) : _GLF_FUZZED(vec2(7080.7409, 7.2))))), 1.0, 1.0, cos(0.0), 1.0))) * mat2(1.0))))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - _GLF_IDENTITY(0, 0 | (0)))) << 0)]), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0), transpose(_GLF_IDENTITY(transpose(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0)), (transpose(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0))) * mat2(1.0))))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) << 0)]) : _GLF_FUZZED(injectionSwitch))), max(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0), transpose(_GLF_IDENTITY(transpose(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), mix(vec2((_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(45.08) : 0.0)) : _GLF_FUZZED(20.18))), 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))))[0], (_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(_GLF_IDENTITY(0.0, max(0.0, 0.0))), 1.0))))[1]), vec2(_GLF_FUZZED(-991.961), _GLF_FUZZED(8.1)), bvec2(false, false))), 1.0, 1.0, cos(0.0), 1.0)), (transpose(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((-6246.4550 * 9.9))), bool(false))), sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0))) * mat2(1.0))))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) << 0)]), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0), transpose(_GLF_IDENTITY(transpose(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0)), (transpose(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0))) * mat2(1.0))))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) << _GLF_IDENTITY(0, 0 ^ (0)))]))) : _GLF_FUZZED(injectionSwitch)), mix(vec2(_GLF_FUZZED(-793.543), ((_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false))) ? _GLF_IDENTITY(_GLF_IDENTITY(vec2((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[0], _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0), transpose(_GLF_IDENTITY(transpose(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0)), (transpose(mat3x2(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0)), (true ? vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0)) : _GLF_FUZZED(vec2(7080.7409, 7.2))))), 1.0, 1.0, cos(0.0), 1.0))) * mat2(1.0))))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - _GLF_IDENTITY(0, 0 | (0)))) << 0)]), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0), transpose(_GLF_IDENTITY(transpose(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0)), (transpose(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0))) * mat2(1.0))))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) << 0)]) : _GLF_FUZZED(injectionSwitch))), max(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0), transpose(_GLF_IDENTITY(transpose(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), mix(vec2((_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(45.08) : 0.0)) : _GLF_FUZZED(20.18))), 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))))[0], (_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(_GLF_IDENTITY(0.0, max(0.0, 0.0))), 1.0))))[1]), vec2(_GLF_FUZZED(-991.961), _GLF_FUZZED(8.1)), bvec2(false, false))), 1.0, 1.0, cos(0.0), 1.0)), (transpose(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((-6246.4550 * 9.9))), bool(false))), sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0))) * mat2(1.0))))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) << 0)]), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0), transpose(_GLF_IDENTITY(transpose(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0)), (transpose(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0))) * mat2(1.0))))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) << _GLF_IDENTITY(0, 0 ^ (0)))]))) : _GLF_FUZZED(injectionSwitch)))[1]), vec2(((_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false))) ? _GLF_IDENTITY(_GLF_IDENTITY(vec2((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[0], _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0), transpose(_GLF_IDENTITY(transpose(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0)), (transpose(mat3x2(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0)), (true ? vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0)) : _GLF_FUZZED(vec2(7080.7409, 7.2))))), 1.0, 1.0, cos(0.0), 1.0))) * mat2(1.0))))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - _GLF_IDENTITY(0, 0 | (0)))) << 0)]), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0), transpose(_GLF_IDENTITY(transpose(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0)), (transpose(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0))) * mat2(1.0))))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) << 0)]) : _GLF_FUZZED(injectionSwitch))), max(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0), transpose(_GLF_IDENTITY(transpose(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), mix(vec2((_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(45.08) : 0.0)) : _GLF_FUZZED(20.18))), 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))))[0], (_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(_GLF_IDENTITY(0.0, max(0.0, 0.0))), 1.0))))[1]), vec2(_GLF_FUZZED(-991.961), _GLF_FUZZED(8.1)), bvec2(false, false))), 1.0, 1.0, cos(0.0), 1.0)), (transpose(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((-6246.4550 * 9.9))), bool(false))), sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0))) * mat2(1.0))))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) << 0)]), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0), transpose(_GLF_IDENTITY(transpose(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, 0.0, sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0)), (transpose(mat3x2(_GLF_IDENTITY((injectionSwitch), vec2(mat3((injectionSwitch), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), sqrt(0.0), sin(0.0), 1.0))), 1.0, 1.0, cos(0.0), 1.0))) * mat2(1.0))))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) << _GLF_IDENTITY(0, 0 ^ (0)))]))) : _GLF_FUZZED(injectionSwitch)))[0], _GLF_FUZZED(169.722)), bvec2(true, false)))))), _GLF_IDENTITY(vec2(_GLF_FUZZED(-135.456), _GLF_FUZZED(849.309)), mix(vec2(_GLF_FUZZED(5.1), (_GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_FUZZED(-135.456), _GLF_FUZZED(849.309)), (vec2(_GLF_FUZZED(-135.456), _GLF_FUZZED(849.309))) + vec2(0.0, 0.0)), max(_GLF_IDENTITY(vec2(_GLF_FUZZED(-135.456), _GLF_FUZZED(849.309)), (vec2(_GLF_FUZZED(-135.456), _GLF_FUZZED(849.309))) + vec2(0.0, 0.0)), _GLF_IDENTITY(vec2(_GLF_FUZZED(-135.456), _GLF_FUZZED(849.309)), (vec2(_GLF_FUZZED(-135.456), _GLF_FUZZED(849.309))) + vec2(0.0, 0.0)))))[1]), vec2((vec2(_GLF_FUZZED(-135.456), _GLF_FUZZED(849.309)))[0], _GLF_FUZZED((74.10 - vec4(-195.347, -185.219, 804.403, 3254.7063)).x)), bvec2(true, false))), bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(-2.5))) > injectionSwitch.y, true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, true, false)))))), false))))))) || false))), _GLF_IDENTITY(false, ! (! (false)))))).y, _GLF_IDENTITY(1.0, max(1.0, 1.0)) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), mix(vec2(((injectionSwitch))[0], _GLF_FUZZED(6.2)), vec2(_GLF_FUZZED(2.4), ((injectionSwitch))[1]), bvec2(false, true)))[0], (injectionSwitch)[_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY((1), ~ (~ (_GLF_IDENTITY((1), max((1), (1)))))) - 0)), ((_GLF_IDENTITY(1, (1) - 0))) | ((_GLF_IDENTITY(1, (1) - 0)))) << 0)]), _GLF_IDENTITY(vec2(_GLF_FUZZED(-135.456), _GLF_FUZZED(849.309)), mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(5.1, max(_GLF_IDENTITY(5.1, max(5.1, 5.1)), 5.1))), (_GLF_IDENTITY(vec2(_GLF_FUZZED(-135.456), _GLF_FUZZED(849.309)), (vec2(_GLF_FUZZED(-135.456), _GLF_FUZZED(849.309))) + vec2(0.0, 0.0)))[1]), vec2((vec2(_GLF_FUZZED(-135.456), _GLF_FUZZED(849.309)))[0], _GLF_FUZZED((74.10 - vec4(-195.347, -185.219, 804.403, 3254.7063)).x)), bvec2(true, _GLF_IDENTITY(false, bool(bool(false)))))), _GLF_IDENTITY(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(-5.6))) > injectionSwitch.y, true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))) ? injectionSwitch.x : _GLF_FUZZED(-5.6))) > injectionSwitch.y, true, _GLF_IDENTITY(false, true && (false)))))), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))))), false))))))) || false)), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(-5.6))) > injectionSwitch.y, true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))) ? injectionSwitch.x : _GLF_FUZZED(-5.6))) > injectionSwitch.y, true, _GLF_IDENTITY(false, true && (false)))))), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))))), false))))))) || false)), false || ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(-5.6))) > injectionSwitch.y, true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))) ? injectionSwitch.x : _GLF_FUZZED(-5.6))) > injectionSwitch.y, true, _GLF_IDENTITY(false, true && (false)))))), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))))), false))))))) || false))))) || false)), false), bvec2(bvec4(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 1.0, 1.0))))))), min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(-5.6))) > injectionSwitch.y, true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(-5.6))) > injectionSwitch.y, true, false)))), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, false || (true)), false)))))), false))))))) || false))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))).y, float(vec2(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) - 0)) << 0, int(int((_GLF_IDENTITY(1, (1) - 0)) << _GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec2(0, 1)))) | (0))))))]), _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_FUZZED(-135.456), min(_GLF_FUZZED(-135.456), _GLF_FUZZED(-135.456))), _GLF_FUZZED(849.309)), mix(vec2(_GLF_FUZZED(5.1), (_GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_FUZZED(-135.456), _GLF_FUZZED(849.309)), (vec2(_GLF_FUZZED(-135.456), _GLF_FUZZED(849.309))) + vec2(0.0, 0.0)), min(_GLF_IDENTITY(vec2(_GLF_FUZZED(-135.456), _GLF_FUZZED(849.309)), (vec2(_GLF_FUZZED(-135.456), _GLF_FUZZED(849.309))) + vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_FUZZED(-135.456), _GLF_FUZZED(849.309)), (vec2(_GLF_FUZZED(-135.456), _GLF_FUZZED(849.309))) + vec2(0.0, 0.0)), (true ? _GLF_IDENTITY(vec2(_GLF_FUZZED(-135.456), _GLF_FUZZED(849.309)), (vec2(_GLF_FUZZED(-135.456), _GLF_FUZZED(849.309))) + vec2(0.0, 0.0)) : _GLF_FUZZED(injectionSwitch))))))[1]), vec2((vec2(_GLF_FUZZED(-135.456), _GLF_FUZZED(849.309)))[0], _GLF_FUZZED((74.10 - vec4(-195.347, -185.219, 804.403, 3254.7063)).x)), bvec2(true, false))), bvec2(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), false)))))), false)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), false)))))), false))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), false)))))), false)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), false)))))), false))))))), true))))))), false))))))) || false)), true && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), false)))))), false)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), false)))))), false))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), false)))))), false)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), false)))))), false))))))), true))))))), false))))))) || false)), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), false)))))), false)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), false)))))), false))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), false)))))), false)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), false)))))), false))))))), true))))))), false))))))) || false)), false)))))), false))).y, 0.0)))))), _GLF_IDENTITY((! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(-135.456), float(vec3(_GLF_FUZZED(-135.456), 1.0, 0.0))), _GLF_IDENTITY(_GLF_FUZZED(849.309), mix(float(_GLF_FUZZED(849.309)), float(_GLF_FUZZED((-140.673 * -895.600))), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))))), bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y, false), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, false)))), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y, false), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, false)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y, false), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))), true, true)))))) || false), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(612.872), _GLF_FUZZED(2864.4588)), bvec2(false, false))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y, false), bvec2(bvec2(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), false))))))) || false), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, false)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))))) || false))))) && _GLF_IDENTITY(true, false || (true))))), false))).y)) && true, _GLF_IDENTITY(bool(bvec3((! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(normalize(vec2(83.97, -79.45)))))[0], (injectionSwitch)[1]), vec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-135.456), float(vec3(_GLF_FUZZED(-135.456), 1.0, 0.0))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-135.456), float(vec3(_GLF_FUZZED(-135.456), 1.0, 0.0))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-135.456), float(vec3(_GLF_FUZZED(-135.456), 1.0, 0.0))), (_GLF_IDENTITY(_GLF_FUZZED(-135.456), float(vec3(_GLF_FUZZED(-135.456), 1.0, 0.0)))) - 0.0), _GLF_IDENTITY(_GLF_FUZZED(-135.456), float(vec3(_GLF_FUZZED(-135.456), 1.0, 0.0))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-135.456), float(vec3(_GLF_FUZZED(-135.456), 1.0, 0.0))), max(_GLF_IDENTITY(_GLF_FUZZED(-135.456), float(vec3(_GLF_FUZZED(-135.456), 1.0, 0.0))), _GLF_IDENTITY(_GLF_FUZZED(-135.456), float(vec3(_GLF_FUZZED(-135.456), 1.0, 0.0))))))), _GLF_IDENTITY(_GLF_FUZZED(849.309), mix(float(_GLF_FUZZED(849.309)), float(_GLF_FUZZED((_GLF_IDENTITY(-140.673 * -895.600, clamp(-140.673 * -895.600, -140.673 * -895.600, _GLF_IDENTITY(-140.673 * -895.600, (-140.673 * -895.600) / exp(0.0))))))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y, false), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))) || false), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec2(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), false))))))) || false), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec2(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), false))))))) || false))))) && _GLF_IDENTITY(true, false || (true))))), false))).y)) && true, false, true)), false || (bool(bvec3((! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(-135.456), float(vec3(_GLF_FUZZED(-135.456), 1.0, 0.0))), _GLF_IDENTITY(_GLF_FUZZED(849.309), mix(float(_GLF_FUZZED(849.309)), float(_GLF_FUZZED((-140.673 * -895.600))), bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9315.0296)), bool(false))))))))), bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y, false), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))) || false), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y, false), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))) || false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec2(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), false))))), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec2(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), false))))), true, false), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec2(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), false))))), true, false), false))))))) || false), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), _GLF_IDENTITY(bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), false, true)), bvec2(bvec2(bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), false, true)))))))), false), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))) || false))))) && _GLF_IDENTITY(true, false || (true))))), false))).y)) && _GLF_IDENTITY(true, false || (true)), false, true))))))))))))
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, _GLF_IDENTITY(bool(bvec2((false) || false, true)), (bool(bvec2((false) || false, true))) && true)))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) || false)))), true, false), false)))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (_GLF_IDENTITY(false, (false) || false))), true, false), false))))) && true), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), false))))) && true))));
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           else
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)), (bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) - 0.0)))));
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y)) && true))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) && true)), false || (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))))) && true))))), false || ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))) && true)) && true)), false || (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) && true)))))))), true && (_GLF_DEAD(false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (_GLF_IDENTITY(! ((! (false))), bool(bvec4(_GLF_IDENTITY(! ((! (false))), ! (! (! ((! (false)))))), false, false, true)))))))))) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, false)))), (_GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false, true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), bool(bvec4(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), true, false, true)))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), bool(bvec4(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), true, false, true)))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), bool(bvec4(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), true, false, true))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), bool(bvec4(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), true, false, true))))))) || false), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), bool(bvec4(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), true, false, true)))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), ! (! (bool(bvec3(false, false, false)))))), bool(bvec4(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), true, false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) && true))))))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), bool(bvec4(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false)), false))), true, false, true)))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 1.0, length(0.0), 0.0, 0.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 1.0, 0.0, exp(0.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0))).x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && ((false)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) - 0.0), mix(float(_GLF_FUZZED(449.979)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, max(0, 0)), 0, 0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_IDENTITY(bool(bvec3(_injected_loop_counter < 1, false, false)), (bool(bvec3(_injected_loop_counter < 1, false, false))) || false))); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (_GLF_IDENTITY(~ (int(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? ~ (int(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(90088))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & (1 | 1))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) && true)) && (_GLF_IDENTITY(false, (false) && true)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), max(_GLF_IDENTITY(~ (0), (~ (0)) << 0), ~ (0))))) | (0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, 1))), _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0))))), (_injected_loop_counter) / 1)))), (~ (_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_injected_loop_counter), (false ? _GLF_FUZZED(40670) : _GLF_IDENTITY(~ (_injected_loop_counter), max(~ (_injected_loop_counter), ~ (_injected_loop_counter))))))), _GLF_IDENTITY(_injected_loop_counter, int(ivec2(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)), 1))), _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1))))) | (~ (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, 1))), _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((++ _injected_loop_counter)) : 1)))))))))))) != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, true && ((false) && true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))) || false)))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         else
          {
          }
        }
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / determinant(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))) > injectionSwitch.y)))) && true))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))).y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))));
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (false))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       barrier();
      }
    }
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) / (0u | 1u));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), ! (! (! (! (_GLF_DEAD(false))))))), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, true))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))) && _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)))), true && (bool(bvec4(false, true, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)))), true && (bool(bvec4(false, true, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))));
          }
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || false))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(71.00)), bool(false))), _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(2371.3199)), bool(false))))) > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (4)), (4) << 0), 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
