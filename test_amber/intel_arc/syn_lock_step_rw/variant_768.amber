#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_7 {
 float _f0;
 mat2x3 _f1;
 mat2x4 _f2;
 int _f3;
} ;

struct _GLF_struct_6 {
 uint _f0;
 mat3 _f1;
 vec2 _f2;
 uvec4 _f3;
 mat4x3 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_5 {
 mat2x4 _f0;
} ;

struct _GLF_struct_4 {
 float _f0;
 uvec2 _f1;
 mat4x3 _f2;
 vec4 _f3;
 vec3 _f4;
} ;

struct _GLF_struct_3 {
 vec3 _f0;
} ;

struct _GLF_struct_8 {
 _GLF_struct_3 _f0;
 uint subgroup_base;
 _GLF_struct_4 _f1;
 _GLF_struct_5 _f2;
 _GLF_struct_6 _f3;
 _GLF_struct_7 _f4;
 int _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_1 {
 ivec2 _f0;
 ivec2 _f1;
 uint _f2;
 bvec2 _f3;
 uvec4 _f4;
 bvec2 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_0 {
 uvec4 _f0;
 int _f1;
} ;

struct _GLF_struct_2 {
 bvec2 _f0;
 mat2x3 _f1;
 uvec4 _f2;
 ivec2 _f3;
 _GLF_struct_0 _f4;
 _GLF_struct_1 _f5;
} ;

struct _GLF_struct_9 {
 _GLF_struct_2 _f0;
 _GLF_struct_8 _f1;
 mat2 _f2;
 bvec4 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_4_1_1_12readworkgroup_id;
 uvec4 GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_basenext_virtual_gid;
 uvec3 GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base;
 GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_basenext_virtual_gid.xyz = GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base;
 uvec3 GLF_merged3_0_1_13_1_1_4_2_1_14num_workgroupreadworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_basenext_virtual_gid.xyz.y = subgroup_size;
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_basenext_virtual_gid.xyz.x = subgroup_local_id;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged3_0_1_13_1_1_4_2_1_14num_workgroupreadworkgroup_size.x = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged3_0_1_13_1_1_4_2_1_14num_workgroupreadworkgroup_size.z = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged2_0_1_4_1_1_12readworkgroup_id.y = workgroup_id;
 uint workgroup_base = GLF_merged3_0_1_13_1_1_4_2_1_14num_workgroupreadworkgroup_size.z * GLF_merged2_0_1_4_1_1_12readworkgroup_id.y;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
  {
   do
    {
     GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_basenext_virtual_gid.xyz.z = workgroup_base;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
  }
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(_GLF_struct_2(bvec2(true), mat2x3(1.0), uvec4(1u), ivec2(1), _GLF_struct_0(uvec4(1u), 1), _GLF_struct_1(ivec2(1), ivec2(1), 1u, bvec2(true), uvec4(1u), bvec2(true), mat4(1.0))), _GLF_struct_8(_GLF_struct_3(vec3(1.0)), subgroup_id * GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_basenext_virtual_gid.xyz.y, _GLF_struct_4(1.0, uvec2(1u), mat4x3(1.0), vec4(1.0), vec3(1.0)), _GLF_struct_5(mat2x4(1.0)), _GLF_struct_6(1u, mat3(1.0), vec2(1.0), uvec4(1u), mat4x3(1.0), mat2x3(1.0)), _GLF_struct_7(1.0, mat2x3(1.0), mat2x4(1.0), 1), 1, mat4x2(1.0)), mat2(1.0), bvec4(true));
 uint virtual_gid = GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_basenext_virtual_gid.xyz.z + _GLF_struct_replacement_9._f1.subgroup_base + GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_basenext_virtual_gid.xyz.x;
 uint next_virtual_gid = GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_basenext_virtual_gid.xyz.z + _GLF_struct_replacement_9._f1.subgroup_base + ((GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_basenext_virtual_gid.xyz.x + 1) % GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_basenext_virtual_gid.xyz.y);
 GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_basenext_virtual_gid.w = next_virtual_gid;
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 GLF_merged2_0_1_4_1_1_12readworkgroup_id.x = read;
 GLF_merged3_0_1_13_1_1_4_2_1_14num_workgroupreadworkgroup_size.y = GLF_merged2_0_1_4_1_1_12readworkgroup_id.x;
 atomicStore(buf[GLF_merged2_0_3_76_3_1_16GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_basenext_virtual_gid.w], uint(1), 4, 64, 4);
 do
  {
   subgroupBarrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 atomicStore(checker[virtual_gid], GLF_merged3_0_1_13_1_1_4_2_1_14num_workgroupreadworkgroup_size.y, 4, 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
