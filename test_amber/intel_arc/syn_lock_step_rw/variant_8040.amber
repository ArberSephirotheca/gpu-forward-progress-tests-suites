#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (false)) || (false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (true ? _GLF_IDENTITY(gl_NumWorkGroups.x, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, 1u * (_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x), min(clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x))), clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << _GLF_IDENTITY(uvec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), (uvec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))) - uvec3(0u, 0u, 0u))).x, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).x)), _GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, gl_NumWorkGroups.x)))))) : _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), clamp(_GLF_FUZZED(subgroup_size), _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) + 0u)) | 0u), _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), clamp(_GLF_FUZZED(subgroup_size), _GLF_FUZZED(subgroup_size), _GLF_FUZZED(subgroup_size)))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(38.83)), vec2(_GLF_FUZZED(-907.828), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y) && true, ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-6.7)), float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), bool(true))), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0))) > injectionSwitch.y) && true, ! _GLF_IDENTITY(_GLF_IDENTITY((! ((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y) && true)), true && (_GLF_IDENTITY((! ((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y) && true)), bool(bvec4(_GLF_IDENTITY((! ((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y) && true)), false || ((! ((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y) && true)))), false, true, false))))), _GLF_IDENTITY(bool(bvec2((! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y) && true), ! (! (((injectionSwitch.x > injectionSwitch.y) && true))))), true)), _GLF_IDENTITY(true && (bool(bvec2(_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y) && _GLF_IDENTITY(true, (true) || false))), true && ((! ((injectionSwitch.x > injectionSwitch.y) && _GLF_IDENTITY(true, (true) || false))))), true))), false || (_GLF_IDENTITY(true && (bool(bvec2(_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y) && _GLF_IDENTITY(true, (true) || false))), true && ((! ((injectionSwitch.x > injectionSwitch.y) && _GLF_IDENTITY(true, (true) || false))))), true))), bool(bvec3(true && (bool(bvec2(_GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y) && _GLF_IDENTITY(true, (true) || false))), true && ((! ((injectionSwitch.x > injectionSwitch.y) && _GLF_IDENTITY(true, (true) || false))))), true))), false, true)))))))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ! _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y) && true)), bool(_GLF_IDENTITY(bvec2((! ((injectionSwitch.x > injectionSwitch.y) && true)), true), bvec2(bvec4(bvec2((! ((injectionSwitch.x > injectionSwitch.y) && true)), true), true, false)))))))))))), bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ! (! ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y) && true)))))))))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y) && true), ! (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))) && true)))))))))))))))), _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, false || ((injectionSwitch.x > injectionSwitch.y) && true)), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))))))) && true, ! (! ((injectionSwitch.x > injectionSwitch.y) && true)))))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / determinant(mat2(1.0, 1.0, 0.0, 1.0))) > injectionSwitch.y) && true, ! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))) && true, ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, true && ((injectionSwitch.x > injectionSwitch.y) && true))))))))) || false)))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, cos(0.0), 1.0, determinant(mat3(0.0, 0.0, sqrt(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))) > injectionSwitch.y) && true, _GLF_IDENTITY(! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0))).y) && true, ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y) && true))))), (_GLF_IDENTITY(! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && _GLF_IDENTITY(true, (true) && true), ! (! ((injectionSwitch.x > injectionSwitch.y) && true))))), true && (! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, _GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y) && true)), false || (! _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y) && true)), ! (! ((! ((injectionSwitch.x > injectionSwitch.y) && true))))))))), true && (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, _GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y) && true)), false || (! _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y) && true)), ! (! ((! ((injectionSwitch.x > injectionSwitch.y) && true))))))))))))))) && true)))))))))), bool(bvec4(_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)) && true, false || ((injectionSwitch.x > injectionSwitch.y) && true)), ! (! _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) && true, ! (! ((injectionSwitch.x > injectionSwitch.y) && true)))), false || ((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) && true, ! (! ((injectionSwitch.x > injectionSwitch.y) && true)))))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (injectionSwitch.x) / determinant(mat2(1.0, 1.0, 0.0, 1.0))) > injectionSwitch.y) && true, ! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-9.2, -58.34)))).x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))) && true, ! (! ((injectionSwitch.x > injectionSwitch.y) && true))))))) || false)))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, _GLF_IDENTITY(! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y) && true))))), (_GLF_IDENTITY(! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ! (! ((injectionSwitch.x > injectionSwitch.y) && true))))), true && (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, _GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y) && true)), false || (! _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y) && true)), ! (! ((! ((injectionSwitch.x > injectionSwitch.y) && true))))))))))))) && true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, _GLF_IDENTITY(! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y) && true))))), (_GLF_IDENTITY(! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ! (! ((injectionSwitch.x > injectionSwitch.y) && true))))), true && (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, _GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y) && true)), false || (! _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y) && true)), ! (! ((! ((injectionSwitch.x > injectionSwitch.y) && true))))))))))))) && true)))), ! (! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y))) && true, ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y) && true))))), (_GLF_IDENTITY(! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ! (! ((injectionSwitch.x > injectionSwitch.y) && true))))), true && (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, _GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y) && true)), false || (! _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y) && true)), ! (! ((! ((injectionSwitch.x > injectionSwitch.y) && true))))))))))))) && true)))))))))))))))), false || ((! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, false || ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))) && _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true))))))))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) && true, ! (! ((injectionSwitch.x > injectionSwitch.y) && true))))), bool(bvec4((! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) && true, ! (! ((injectionSwitch.x > injectionSwitch.y) && true))))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) / determinant(mat2(1.0, 1.0, 0.0, 1.0)), max((injectionSwitch.x) / determinant(mat2(1.0, 1.0, 0.0, 1.0)), (injectionSwitch.x) / determinant(mat2(1.0, 1.0, 0.0, 1.0))))) > injectionSwitch.y) && true, ! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))) && true, ! (! ((injectionSwitch.x > injectionSwitch.y) && true))))))) || false)))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, _GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y) && true))))), (! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, true && ((injectionSwitch.x > injectionSwitch.y) && true)), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))) && true)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, ! (! ((injectionSwitch.x > injectionSwitch.y) && true))))), true && (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && true, _GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y) && true)), false || (_GLF_IDENTITY(! _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y) && true)), ! (! ((! ((injectionSwitch.x > injectionSwitch.y) && true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y) && true)), ! (! ((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))) && true))))))))))))))) && true)))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))) && true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, clamp(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((gl_WorkGroupSize) >> uvec3(0u, 0u, 0u), ((gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)) | ((gl_WorkGroupSize) >> uvec3(0u, 0u, 0u)))))), gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)))).x, (gl_WorkGroupSize.x) >> 0u)) - 0u);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), (false) && true)))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bool(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)), false || (bool(bvec2(false, true))))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec2(52.13, -7.5).s), _GLF_FUZZED(1661.0718)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y)) && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), false), false), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), false), false))))))))))))))), _GLF_IDENTITY(false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, false)))))), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, false)))), true, false)))))), true, true)), bool(_GLF_IDENTITY(bvec2(bool(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, false)))), true, false)))))), true, true)), false), bvec2(bvec2(bvec2(bool(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(_GLF_IDENTITY(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, false)), bvec2(bvec4(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, false)), false, false))))), true, false)))))), true, true)), false)))))))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true && (false), (_GLF_IDENTITY(true && (false), (true && (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), ! (! (_GLF_IDENTITY(true && (false), (_GLF_IDENTITY(true && (false), (true && (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true), false)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(vec3(-11.79, -841.166, -3.9).p)), bool(false)))))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, sqrt(1.0) * (injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ! (! ((false))))))) && true)))))))))), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))) || (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (! (_GLF_IDENTITY((false) || false, ((false) || false) && true))))), bool(bool(_GLF_IDENTITY(false, (false) && true)))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) && true)))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    return;
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, 1.0, 0.0, round(length(normalize(exp(vec3(0.0, 0.0, 0.0))))), 0.0, exp(0.0), 1.0, 0.0, 0.0, 0.0, 1.0))) > injectionSwitch.y))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), _GLF_IDENTITY(false, false || (false)) || ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)))))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec4(bvec2(_GLF_DEAD(false), false), false, true))))))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bool(! (_GLF_DEAD(false)))), bool(bool(bool(bool(! (_GLF_DEAD(false)))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_base = _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u), _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))) | 0u)) | (subgroup_id)), subgroup_id), ~ (~ (clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u), 1u)), (uint(uvec2(_GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u), 1u))) | 0u)), (subgroup_id) / 1u), _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))) | 0u)) | (subgroup_id)), subgroup_id))))) * subgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, uint(_GLF_IDENTITY(uvec3(workgroup_base + subgroup_base, 0u, 1u), (uvec3(workgroup_base + subgroup_base, 0u, 1u)) | (_GLF_IDENTITY(uvec3(workgroup_base + subgroup_base, 0u, 1u), ~ (~ (uvec3(workgroup_base + subgroup_base, 0u, 1u)))))))) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), true && _GLF_IDENTITY((bool(false)), true && (_GLF_IDENTITY((bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, true && (_GLF_IDENTITY((false) || false, _GLF_IDENTITY(true && ((false) || false), bool(bool(true && ((false) || false)))))))))), bool(bvec3((bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, true && (_GLF_IDENTITY((false) || false, _GLF_IDENTITY(true && ((false) || false), ! (! (true && ((false) || false)))))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), (bool(_GLF_IDENTITY(bool(false), true && _GLF_IDENTITY((bool(false)), true && (_GLF_IDENTITY((bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, true && (_GLF_IDENTITY((false) || false, _GLF_IDENTITY(true && ((false) || false), bool(bool(true && ((false) || false)))))))))), bool(bvec3((bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, true && (_GLF_IDENTITY((false) || false, _GLF_IDENTITY(true && ((false) || false), ! (! (true && ((false) || false)))))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))) || false))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 uint read = atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) - 0u), _GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (virtual_gid) : _GLF_FUZZED(54095u))) | (uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), 0u | (uint(2u))))))], 4, 64, 2);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), mix(vec2(_GLF_FUZZED(18.80), _GLF_FUZZED(5.1)), vec2((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))[1], float(vec4((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))[1], cos(0.0), 1.0, 0.0)))), bvec2(true, true)))) + vec2(0.0, 0.0)).x > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-955.224) : injectionSwitch.y)), false || (injectionSwitch.x > injectionSwitch.y))), bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), (bool(true)) || _GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, float(mat4x3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, 1.0, 0.0, 1.0, 0.0, 0.0, log(1.0), 0.0, 0.0, 1.0, 0.0, 1.0)))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(true), (bool(true)) || _GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, float(mat4x3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, 1.0, 0.0, 1.0, 0.0, 0.0, log(1.0), 0.0, 0.0, 1.0, 0.0, 1.0)))))), false, true)), ! (! (bool(bvec3(_GLF_IDENTITY(bool(true), (bool(true)) || _GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, float(mat4x3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, 1.0, 0.0, 1.0, 0.0, 0.0, log(1.0), 0.0, 0.0, 1.0, 0.0, 1.0)))))), false, true))))))), ! (! (bool(bool(true)))))), true)))))), false, true, false))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(next_virtual_gid, 0u + (next_virtual_gid))), ((_GLF_IDENTITY(next_virtual_gid, 0u + (next_virtual_gid)))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))) | (0u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), 0u | (uint(0u))))), ((_GLF_IDENTITY(next_virtual_gid, 0u + (next_virtual_gid))) | (0u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) - 0u)), 0u | (uint(0u)))))) ^ 0u))], _GLF_IDENTITY(uint(1), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(1), max(uint(1), uint(1)))), (~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(1, 0 ^ (1))), max(uint(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), (! (! (false))) || false), (_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), (! (! (false))) || false), bool(bvec4(_GLF_IDENTITY(! (! (false)), (! (! (false))) || false), true, true, false)))) || false))))) ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(85546), clamp(_GLF_FUZZED(85546), _GLF_FUZZED(85546), _GLF_FUZZED(85546))), max(_GLF_FUZZED(_GLF_IDENTITY(85546, (85546) / 1)), _GLF_FUZZED(85546))) : 1)), 1))), _GLF_IDENTITY(uint(_GLF_IDENTITY(1, max(1, 1))), (uint(1)) + 0u)))), ((_GLF_IDENTITY(uint(_GLF_IDENTITY(1, 0 ^ (1))), max(uint(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) || false))))) ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(85546), clamp(_GLF_FUZZED(85546), _GLF_FUZZED(85546), _GLF_FUZZED(85546))), max(_GLF_FUZZED(85546), _GLF_FUZZED(85546))) : 1)), 1))), _GLF_IDENTITY(uint(_GLF_IDENTITY(1, max(1, 1))), (uint(1)) + 0u))))) >> (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))), ((_GLF_IDENTITY(_GLF_IDENTITY(uint(1), max(uint(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(85546) : 1)), _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, min(1, 1)), 1))))), uint(1))), (_GLF_IDENTITY(uint(1), max(uint(_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(85546) : 1)), 1), (true ? min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(85546) : 1)), max(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(85546) : 1)), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(85546) : 1)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(85546) : 1)), max(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(85546) : 1)), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(85546) : 1)))), (_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(85546) : 1)), max(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(85546) : 1)), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(85546) : 1))))) - 0)) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(85546) : 1)), max(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(85546) : 1)), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(85546) : 1)))))), 1) : _GLF_FUZZED(7591))))), uint(1)))) / 1u))) | _GLF_IDENTITY(((_GLF_IDENTITY(uint(1), max(uint(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(85546, 1 * (85546)), (_GLF_IDENTITY(85546, 1 * (_GLF_IDENTITY(85546, 0 ^ (85546))))) >> 0)) : 1)), 1), (min(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(85546, 1 * (85546)), (_GLF_IDENTITY(85546, 1 * (85546))) >> 0)) : 1)), 1)) << (0 << _GLF_IDENTITY(int(1), int(1)))), (min(_GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(85546), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(85546, 0 ^ (85546))), (_GLF_FUZZED(_GLF_IDENTITY(85546, 0 ^ (85546)))) - 0)), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_FUZZED(85546)), int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1)))), min((_GLF_IDENTITY((_GLF_FUZZED(85546)), int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1)))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FUZZED(85546)), _GLF_IDENTITY(int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1)), (int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1))) / 1)), (_GLF_IDENTITY((_GLF_FUZZED(85546)), int(ivec4((_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(85546, ~ (~ (85546)))), (_GLF_FUZZED(85546)) ^ _GLF_IDENTITY(0, (0) | 0))), 1, 0, 1)))) / 1)))) >> 0) ^ 0) : 1, clamp(false ? _GLF_IDENTITY(_GLF_FUZZED(85546), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(85546, _GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, ~ (~ (0))))) : _GLF_FUZZED(-8377))) ^ (85546))), (_GLF_FUZZED(_GLF_IDENTITY(85546, 0 ^ (85546)))) - 0)), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_FUZZED(85546)), int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1)))), min(_GLF_IDENTITY((_GLF_IDENTITY((_GLF_FUZZED(85546)), int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1)))), min((_GLF_IDENTITY((_GLF_FUZZED(85546)), int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1)))), (_GLF_IDENTITY((_GLF_FUZZED(85546)), int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1)))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FUZZED(85546)), int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1))), (_GLF_IDENTITY((_GLF_FUZZED(85546)), int(ivec4((_GLF_IDENTITY(_GLF_FUZZED(85546), (_GLF_FUZZED(85546)) ^ _GLF_IDENTITY(0, (0) | 0))), 1, 0, 1)))) / 1)))) >> 0) ^ 0) : 1, false ? _GLF_IDENTITY(_GLF_FUZZED(85546), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(85546, 0 ^ (85546))), (_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(85546, (false ? _GLF_FUZZED(-62291) : 85546)), 0 ^ (85546)))) - 0)), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_FUZZED(85546)), _GLF_IDENTITY(int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1)), max(_GLF_IDENTITY(int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1)), (int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1))) >> 0), int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1)))))), min((_GLF_IDENTITY((_GLF_FUZZED(85546)), int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1)))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FUZZED(85546)), int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1))), (_GLF_IDENTITY((_GLF_FUZZED(85546)), int(ivec4((_GLF_IDENTITY(_GLF_FUZZED(85546), (_GLF_FUZZED(85546)) ^ _GLF_IDENTITY(0, (0) | 0))), 1, 0, 1)))) / 1)))) >> 0) ^ 0) : 1, _GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(85546), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(85546, 0 ^ (85546))), (_GLF_FUZZED(_GLF_IDENTITY(85546, 0 ^ (85546)))) - 0)), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_FUZZED(85546)), int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1)))), min((_GLF_IDENTITY((_GLF_FUZZED(85546)), int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1)))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FUZZED(85546)), int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FUZZED(85546)), int(ivec4((_GLF_IDENTITY(_GLF_FUZZED(85546), (_GLF_FUZZED(85546)) ^ _GLF_IDENTITY(0, (0) | 0))), 1, 0, 1))), max(_GLF_IDENTITY((_GLF_FUZZED(85546)), int(ivec4((_GLF_IDENTITY(_GLF_FUZZED(85546), (_GLF_FUZZED(85546)) ^ _GLF_IDENTITY(0, (0) | 0))), 1, 0, 1))), _GLF_IDENTITY((_GLF_FUZZED(85546)), int(ivec4((_GLF_IDENTITY(_GLF_FUZZED(85546), (_GLF_FUZZED(85546)) ^ _GLF_IDENTITY(0, (0) | 0))), 1, 0, 1)))))) / 1)))) >> 0) ^ _GLF_IDENTITY(0, (0) - int(_GLF_ZERO(0.0, injectionSwitch.x)))) : 1, (false ? _GLF_IDENTITY(_GLF_FUZZED(85546), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(85546, _GLF_IDENTITY(0, (0) / 1) ^ (85546))), (_GLF_FUZZED(_GLF_IDENTITY(85546, 0 ^ (85546)))) - 0)), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_FUZZED(85546)), int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1)))), min((_GLF_IDENTITY((_GLF_FUZZED(85546)), int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1)))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FUZZED(85546)), int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1))), (_GLF_IDENTITY((_GLF_FUZZED(85546)), int(ivec4((_GLF_IDENTITY(_GLF_FUZZED(85546), (_GLF_FUZZED(_GLF_IDENTITY(85546, 0 | (_GLF_IDENTITY(85546, (85546) | (85546)))))) ^ _GLF_IDENTITY(0, (0) | 0))), 1, 0, 1)))) / 1)))) >> _GLF_IDENTITY(0, (0) | 0)) ^ 0) : 1) << 0))))), 1)) + 0))), uint(1))))), (((_GLF_IDENTITY(uint(1), max(uint(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY(85546, 1 * (85546))) : 1)), 1), (min(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (false ? _GLF_IDENTITY(_GLF_FUZZED(85546), _GLF_IDENTITY((_GLF_FUZZED(85546)), (_GLF_IDENTITY((_GLF_FUZZED(85546)), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1)), clamp(int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1)), int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1)), _GLF_IDENTITY(int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1)), (_GLF_IDENTITY(int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1)), (int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1))) - 0)) / 1))), (int(ivec4((_GLF_FUZZED(85546)), _GLF_IDENTITY(1, (1) | 0), 0, 1))) | (int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1)))))) >> 0) ^ 0) : _GLF_IDENTITY(1, (1) | (1)))), 1)) + 0), min(_GLF_IDENTITY(min(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY(85546, 1 * (85546))) : 1)), 1), (min(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (false ? _GLF_IDENTITY(_GLF_FUZZED(85546), _GLF_IDENTITY((_GLF_FUZZED(85546)), (_GLF_IDENTITY((_GLF_FUZZED(85546)), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1)), clamp(int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1)), int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1)), _GLF_IDENTITY(int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1)), (_GLF_IDENTITY(int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1)), (int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1))) - 0)) / 1))), (int(ivec4((_GLF_FUZZED(85546)), _GLF_IDENTITY(1, (1) | 0), 0, 1))) | (int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1)))))) >> 0) ^ 0) : _GLF_IDENTITY(1, (1) | (1)))), 1)) + 0), _GLF_IDENTITY(min(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY(85546, 1 * (85546))) : 1)), 1), (min(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (false ? _GLF_IDENTITY(_GLF_FUZZED(85546), _GLF_IDENTITY((_GLF_FUZZED(85546)), (_GLF_IDENTITY((_GLF_FUZZED(85546)), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1)), clamp(int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1)), int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1)), _GLF_IDENTITY(int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1)), (_GLF_IDENTITY(int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1)), (int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1))) - 0)) / 1))), (int(ivec4((_GLF_FUZZED(85546)), _GLF_IDENTITY(1, (1) | 0), 0, 1))) | (int(ivec4((_GLF_FUZZED(85546)), 1, 0, 1)))))) >> 0) ^ 0) : _GLF_IDENTITY(1, (1) | (1)))), 1)) + 0))))), uint(1)))))) / 1u))) - 0u))), 4, 64, 4);
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), (bool(bool(_GLF_IDENTITY(false, false || (false))))) && true)), (false) && true)) && true)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, _GLF_IDENTITY(false, bool(bvec4(false, true, true, false))))), ! (! (bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
  barrier();
 subgroupBarrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
