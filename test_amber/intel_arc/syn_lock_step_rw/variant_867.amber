#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) || false))), bool(bvec3(bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false))), false, true))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) && true, ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, false || (false))) && true), false || (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, false || (false))) && true), (! ((_GLF_IDENTITY(false, false || (false))) && true)) && true)))))), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)) && true), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && _GLF_IDENTITY(true, ! (! (true)))), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)) && true))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)) && true), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)) && true))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))))), (_GLF_IDENTITY(false, false || (false))) && true)) && true), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)) && true))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && _GLF_IDENTITY(true, bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, true)))))) && true)) && true), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), _GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)) && true, ((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) && true)) && true) && true)))))))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false))) && true)) && _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) || false)))) && true), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)) && true))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)) && true), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (_GLF_IDENTITY(! (true && (false)), (! (true && (false))) && true))))) && true)) && true)))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-60.34)), vec2(_GLF_FUZZED(8589.0060), (injectionSwitch)[1]), bvec2(false, true))).y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), ! (! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, 0u + (gl_WorkGroupSize.x));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, false)), bool(bvec2(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, false)), true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && _GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(bool(bvec3((false) && true, true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(25.09))))))), (bool(bvec3((false) && true, true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(25.09)))))))) && true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec4(true, false, false, true))) && ((injectionSwitch.x > injectionSwitch.y))), ((injectionSwitch.x > injectionSwitch.y)) && true))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((injectionSwitch))), clamp(mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((injectionSwitch))), _GLF_IDENTITY(mat2(1.0) * _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((injectionSwitch))), vec2(0.0, 0.0) + (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((injectionSwitch))), (false ? _GLF_FUZZED(vec2(-7.4, 88.28)) : _GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((injectionSwitch))))))), vec2(mat4x2(_GLF_IDENTITY(mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((injectionSwitch))), min(mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((injectionSwitch))), mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((injectionSwitch))))), 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0)))))), mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((injectionSwitch))))))), vec2(vec2(min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))))))).y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) | (workgroup_size * workgroup_id)), (workgroup_size * workgroup_id) | 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4(_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 0.0, 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, abs(1.0), sqrt(0.0), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(_GLF_IDENTITY(1.0, _GLF_ONE(1.0, injectionSwitch.y) * (1.0)), 1.0, 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, tan(_GLF_IDENTITY(sin(0.0), min(sin(0.0), sin(0.0)))), 1.0, 1.0))) > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, true))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) && true)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) | (workgroup_base + subgroup_id * subgroup_size)) + subgroup_local_id, (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) | (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false), bvec2(bvec2(bvec2(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y) || false))), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (injectionSwitch) * vec2(1.0, 1.0)), 1.0, 1.0, 0.0, 0.0, sqrt(1.0), 1.0, 0.0, log(1.0), 1.0, 0.0)))) * _GLF_IDENTITY(_GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(0.0, 0.0), vec2(mat3x2(vec2(0.0, 0.0), 0.0, 1.0, 1.0, 0.0)))), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(1.0, 1.0)) * mat2(1.0)), (_GLF_IDENTITY(_GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(0.0, 0.0), vec2(mat3x2(vec2(0.0, 0.0), 0.0, 1.0, 1.0, 0.0)))), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(1.0, 1.0)) * mat2(1.0)), (_GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, (1.0) + _GLF_IDENTITY(dot(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(0.0, 0.0), vec2(mat3x2(vec2(0.0, 0.0), 0.0, 1.0, 1.0, 0.0)))), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(1.0, 1.0)) * mat2(1.0))) * mat2(1.0))) * vec2(1.0, 1.0))).y, ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, _GLF_IDENTITY(sqrt(1.0), clamp(sqrt(1.0), sqrt(1.0), sqrt(1.0))) * (0.0)), 0.0), (vec2(_GLF_IDENTITY(0.0, _GLF_IDENTITY(sqrt(1.0), clamp(sqrt(1.0), sqrt(1.0), sqrt(1.0))) * (0.0)), 0.0)) / vec2(1.0, 1.0))), (injectionSwitch) * vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec4(1.0, 1.0, 1.0, 1.0)), mix(float(float(vec4(1.0, 1.0, 1.0, 1.0))), float(_GLF_FUZZED(-92.39)), bool(false)))), 1.0)), 1.0, 1.0, 0.0, 0.0, sqrt(1.0), 1.0, 0.0, log(1.0), 1.0, 0.0)))) * vec2(1.0, 1.0)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (injectionSwitch) * vec2(1.0, 1.0)), 1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(mat3x4(1.0, 0.0, 0.0, 1.0, sqrt(0.0), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0))))), 1.0)), 0.0, 0.0, sqrt(1.0), 1.0, 0.0, log(_GLF_IDENTITY(1.0, (1.0) * 1.0)), 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(max(0.0, 0.0), min(_GLF_IDENTITY(max(0.0, 0.0), (true ? max(0.0, 0.0) : _GLF_FUZZED(119.216))), max(0.0, 0.0)))))))) * vec2(1.0, 1.0)).y) || false))))))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 0.0, 0.0, _GLF_ONE(_GLF_IDENTITY(1.0, (1.0) - 0.0), injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0)), mix(vec2(_GLF_FUZZED(4155.3160), _GLF_FUZZED(5646.5452)), vec2((vec2(mat3x4(injectionSwitch, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0)))[0], (vec2(mat3x4(injectionSwitch, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, max(0.0, 0.0)) : _GLF_FUZZED(7.1))), 0.0, 0.0, 1.0, 1.0, 1.0)))[1]), bvec2(true, true)))), vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (injectionSwitch) * vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x4(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)), clamp(float(mat2x4(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)), float(mat2x4(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)), float(mat2x4(1.0, 1.0, 1.0, 1.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0))))), 1.0)), 1.0, 1.0, 0.0, 0.0, sqrt(1.0), 1.0, 0.0, log(_GLF_IDENTITY(1.0, max(1.0, 1.0))), 1.0, 0.0)))) * _GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) * mat2(1.0))).y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-76.96) : _GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 0.0, 1.0))))) > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (injectionSwitch) * vec2(1.0, 1.0)), 1.0, 1.0, 0.0, 0.0, sqrt(1.0), 1.0, 0.0, log(1.0), 1.0, 0.0)))) * vec2(1.0, 1.0)).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (injectionSwitch) * vec2(1.0, 1.0)), 1.0, 1.0, 0.0, 0.0, sqrt(1.0), 1.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), log(1.0), 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))) * vec2(1.0, 1.0)).y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (injectionSwitch) * vec2(1.0, 1.0)), 1.0, 1.0, 0.0, 0.0, sqrt(1.0), 1.0, 0.0, log(1.0), 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))) * vec2(1.0, 1.0)).y, true, false), bvec3(bvec4(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (injectionSwitch) * vec2(1.0, 1.0)), 1.0, 1.0, 0.0, 0.0, sqrt(1.0), 1.0, 0.0, log(1.0), 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))) * vec2(1.0, 1.0)).y, true, false), false)))))) || false))))))), ! (! ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)) : _GLF_FUZZED(vec2(37.71, 7586.0415)))), (injectionSwitch) * vec2(1.0, 1.0)), 1.0, 1.0, 0.0, 0.0, sqrt(1.0), 1.0, 0.0, log(1.0), 1.0, 0.0)))) * _GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) * _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) / mat2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), mat2(mat3x4(mat2(1.0)))))).y, ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (injectionSwitch) * vec2(1.0, 1.0)), 1.0, 1.0, 0.0, 0.0, sqrt(1.0), 1.0, 0.0, log(1.0), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(3191.3068) : _GLF_IDENTITY(1.0, (1.0) * 1.0))), 0.0)))) * _GLF_IDENTITY(vec2(1.0, 1.0), max(vec2(1.0, 1.0), vec2(1.0, 1.0)))).y, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(70.20)), vec2(_GLF_IDENTITY(_GLF_FUZZED(6.6), clamp(_GLF_IDENTITY(_GLF_FUZZED(6.6), min(_GLF_FUZZED(6.6), _GLF_IDENTITY(_GLF_FUZZED(6.6), min(_GLF_FUZZED(6.6), _GLF_FUZZED(6.6))))), _GLF_FUZZED(6.6), _GLF_FUZZED(6.6))), (injectionSwitch)[_GLF_IDENTITY(1, (1) | (1))]), bvec2(false, true))), (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (injectionSwitch) * vec2(1.0, 1.0)), _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec2(1.0, 0.0)), min(float(vec2(1.0, 0.0)), float(vec2(1.0, 0.0))))), 1.0)), 1.0, 0.0, 0.0, sqrt(1.0), 1.0, 0.0, log(1.0), 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))) * vec2(1.0, 1.0)).y) || false))))))))))))))) && true)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(false, false || (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true), bvec3(bvec4(bvec3((_GLF_IDENTITY(false, false || (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true), true)))), bool(bvec4(bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(false, false || (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true), bvec3(bvec4(bvec3((_GLF_IDENTITY(false, false || (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true), true)))), false, false, true)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))) + subgroup_id * subgroup_size)) + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (~ ((subgroup_local_id + 1) % subgroup_size))));
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, _GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), clamp(_GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), mix(float(_GLF_FUZZED(233.417)), float(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), bool(true))), _GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), clamp(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(sin(0.0), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(sin(0.0), 0.0, 1.0))), 1.0, 0.0), transpose(_GLF_IDENTITY(transpose(mat2(_GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), clamp(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(sin(0.0), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(sin(0.0), 0.0, 1.0))), 1.0, 0.0)), (transpose(mat2(_GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), clamp(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(sin(0.0), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(sin(0.0), 0.0, 1.0))), 1.0, 0.0))) - mat2(0.0, 0.0, 0.0, 0.0)))))), _GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), max(clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(vec3((injectionSwitch)[1], 0.0, 1.0)))), vec2(_GLF_FUZZED(float(-6092)), _GLF_FUZZED(-51.32)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y, injectionSwitch.y, injectionSwitch.y), clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), bool(bool(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) - vec2(0.0, 0.0))) / vec2(1.0, 1.0)).y, injectionSwitch.y))) / 1.0)))) && true)))))))), ((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-26.35, -8.1)))).x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, (1.0) * 1.0)) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).y, float(mat3x2(injectionSwitch.y, cos(0.0), 0.0, 1.0, _GLF_IDENTITY(0.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED((-34.68 / -9.9))), min(float(_GLF_FUZZED((-34.68 / -9.9))), float(_GLF_FUZZED((-34.68 / -9.9))))), float(0.0), bool(true))), 1.0))))) && true)) || false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(855.277)), bool(false))))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(855.277)), bool(false))))), false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(855.277)), bool(false)))))))))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(855.277)), bool(false))))))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-5.7)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (! (_GLF_IDENTITY((false) || false, ((false) || false) && true))))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), bool(bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0), _injected_loop_counter)) > 0), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), max(_GLF_IDENTITY((_injected_loop_counter), min((_injected_loop_counter), (_injected_loop_counter))), _GLF_IDENTITY((_injected_loop_counter), int(ivec2((_injected_loop_counter), (0 >> _GLF_IDENTITY(int(5), int(5)))))))) | (_injected_loop_counter)) > _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, min(0, 0))))) << (0 & 99327)), (0) ^ 0)))))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), (true ? (_injected_loop_counter) : _GLF_FUZZED(_injected_loop_counter))) | 0) > _GLF_IDENTITY(0, (0) - (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | (_GLF_IDENTITY(int(3), 0 ^ (_GLF_IDENTITY(int(3), (int(3)) >> 0))))))))), _GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > 0))), (! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), int(ivec2((_injected_loop_counter), int(_GLF_ZERO(0.0, injectionSwitch.x))))) | (_injected_loop_counter)) > 0)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) | (0))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > 0)), (_injected_loop_counter > 0) || false))))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false)))) || false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > 0, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > 0)))), true && (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)), (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter) | (_injected_loop_counter), _GLF_IDENTITY(int(int((_injected_loop_counter) | (_injected_loop_counter))), min(int(int((_injected_loop_counter) | (_injected_loop_counter))), int(int((_injected_loop_counter) | (_injected_loop_counter)))))))) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)))) > 0)), true && (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)), (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter) | (_injected_loop_counter), _GLF_IDENTITY(int(int((_injected_loop_counter) | (_injected_loop_counter))), min(int(int((_injected_loop_counter) | (_injected_loop_counter))), int(int((_injected_loop_counter) | (_injected_loop_counter)))))))) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)))) > 0)), false || (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)), (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter) | (_injected_loop_counter), _GLF_IDENTITY(int(int((_injected_loop_counter) | (_injected_loop_counter))), min(int(int((_injected_loop_counter) | (_injected_loop_counter))), int(int((_injected_loop_counter) | (_injected_loop_counter)))))))) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)))) > 0)), ! (! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)), (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter) | (_injected_loop_counter), _GLF_IDENTITY(int(int((_injected_loop_counter) | (_injected_loop_counter))), min(int(int((_injected_loop_counter) | (_injected_loop_counter))), int(int((_injected_loop_counter) | (_injected_loop_counter)))))))) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)))) > 0))))))))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > 0))), (! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > 0)))) && true)), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), max((_injected_loop_counter), (_injected_loop_counter))) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1))), (_injected_loop_counter) | (_injected_loop_counter)) > 0)), true && (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), max((_injected_loop_counter), (_injected_loop_counter))) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1))), (_injected_loop_counter) | (_injected_loop_counter)) > 0)), false || (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), max((_injected_loop_counter), (_injected_loop_counter))) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1))), (_injected_loop_counter) | (_injected_loop_counter)) > 0))))))), (! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > 0)))) && true))) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), (bool(bvec4(false, false, false, true))) || false))))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > 0))))), _GLF_IDENTITY(bool(bool(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > 0))))))), _GLF_IDENTITY(bool(bvec4(bool(bool(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(0, (0) - (0 << _GLF_IDENTITY(int(5), int(5))))))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter) | (_injected_loop_counter), ((_injected_loop_counter) | (_injected_loop_counter)) | 0)) > 0), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 1, 0), ivec3(0, 0, 0) | (_GLF_IDENTITY(ivec3(0, 1, 0), (false ? _GLF_IDENTITY(_GLF_FUZZED(ivec3(-50286, 4149, 40790)), min(_GLF_FUZZED(ivec3(-50286, 4149, 40790)), _GLF_IDENTITY(_GLF_FUZZED(ivec3(-50286, 4149, 40790)), (_GLF_FUZZED(ivec3(-50286, 4149, 40790))) + ivec3(0, 0, 0)))) : ivec3(0, 1, 0)))))))), _GLF_IDENTITY(false, bool(bool(false))))))), ! (! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - (0 << _GLF_IDENTITY(int(7), int(7))))) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0))) > 0), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > _GLF_IDENTITY(0, (0) >> 0)), false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - (0 << _GLF_IDENTITY(int(7), int(7))))) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0))) > 0), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > _GLF_IDENTITY(0, (0) >> 0)), false))))), bool(bvec2((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - (0 << _GLF_IDENTITY(int(7), int(7))))) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0))) > 0), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > _GLF_IDENTITY(0, (0) >> 0)), false))))), false)))), (! (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - (0 << _GLF_IDENTITY(int(7), int(7))))) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0))) > 0), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > _GLF_IDENTITY(0, (0) >> 0)), false))))), bool(bvec2((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - (0 << _GLF_IDENTITY(int(7), int(7))))) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0))) > 0), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > _GLF_IDENTITY(0, (0) >> 0)), false))))), false))))) && true)))))), false || ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) | ((_injected_loop_counter))) | (_injected_loop_counter)) > 0), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) * 1) | (_injected_loop_counter)) > 0), false)))), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0))) > 0), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > 0), false)))))))))))))), _GLF_IDENTITY(false, bool(bool(false))), true, true)), false || (bool(bvec4(bool(bool(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0)))), _GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), (0) - (0 << _GLF_IDENTITY(int(5), int(5))))))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | _GLF_IDENTITY((_injected_loop_counter), (_GLF_IDENTITY((_injected_loop_counter), int(_GLF_IDENTITY(int((_injected_loop_counter)), int(int(int((_injected_loop_counter)))))))) >> 0)) > 0), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > 0), false)))), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), ~ (~ ((_injected_loop_counter)))) | (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))), max(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))), clamp((_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))), (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))), (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))))), _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))), ((_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))) >> 0))) - _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(0, clamp(0, 0, 0)))), 0, 0))))) > 0), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > 0), false)))))))), false || _GLF_IDENTITY(((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > 0), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > 0), false)))), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0))) > 0, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0))) > 0)), _GLF_IDENTITY(true, ! (! (true))) && (bool(bool(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0))) > 0)))))), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > 0), false))))))))), ! (_GLF_IDENTITY(! (((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > 0), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > 0), false)))), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0))) > 0, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0))) > 0)), _GLF_IDENTITY(true, ! (! (true))) && (bool(bool(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0))) > 0)))))), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > 0), false)))))))))), ! (! (! (((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > 0), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > 0), false)))), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0))) > 0, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0))) > 0)), _GLF_IDENTITY(true, ! (! (true))) && (bool(bool(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0))) > 0)))))), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > 0), false)))))))))))))))))))), _GLF_IDENTITY(false, bool(bool(false))), true, true)))))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y) || false)) && true)))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(0u ^ (next_virtual_gid), (0u ^ (next_virtual_gid)) ^ 0u))], uint(1), 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), (bool((injectionSwitch.x > injectionSwitch.y))) && true))))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(4.0, -5.6)))) : _GLF_FUZZED(vec2(-15.14, 98.52)))).x > injectionSwitch.y)))) || false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > injectionSwitch.y))) && true)))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(checker[virtual_gid], read, 4, 64, _GLF_IDENTITY(4, (4) / 1));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
