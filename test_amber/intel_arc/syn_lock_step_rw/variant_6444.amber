#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), true && (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (_GLF_IDENTITY((injectionSwitch) * mat2(1.0), max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))) - vec2(0.0, _GLF_IDENTITY(0.0, (0.0) * _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))))))).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, (true) && true) && ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (_GLF_IDENTITY((injectionSwitch) * mat2(1.0), max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))) - vec2(0.0, 0.0))).y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) * mat2(1.0), (_GLF_IDENTITY((injectionSwitch) * mat2(1.0), max(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(((injectionSwitch)) * mat2(1.0), _GLF_IDENTITY(max(((injectionSwitch)) * mat2(1.0), ((injectionSwitch)) * mat2(1.0)), (max(((injectionSwitch)) * _GLF_IDENTITY(mat2(1.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(1.0))), ((injectionSwitch)) * mat2(1.0))) - vec2(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((- 903.669))), float(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-821.445)), float(0.0), bool(true))), 0.0, 0.0))), bool(true))))))) * mat2(1.0), (injectionSwitch) * mat2(1.0)))) - vec2(0.0, 0.0))).y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
    return;
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter)))) / int(_GLF_ONE(1.0, injectionSwitch.y)))) / 1) != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0))
    {
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
        {
         return;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
    }
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || (! (! (false)))))) && true)))
      break;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, ! (! (true))))))))))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        continue;
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), true && (_GLF_IDENTITY(true && (false), (_GLF_IDENTITY(true && (false), (true && (false)) && true)) && true)))), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 0.0)))))) && true)))) || false))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) ^ 0u), _GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY((gl_NumWorkGroups.x) >> _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(1u), uint(1u))), ((0u >> _GLF_IDENTITY(uint(1u), uint(1u)))) ^ (0u | 0u)), _GLF_IDENTITY(uint(uvec3((gl_NumWorkGroups.x) >> (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u))))))), 0u, 1u)), clamp(uint(uvec3((gl_NumWorkGroups.x) >> (0u >> _GLF_IDENTITY(uint(1u), uint(1u))), 0u, 1u)), uint(uvec3((gl_NumWorkGroups.x) >> _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(1u), uint(1u))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (0u >> _GLF_IDENTITY(uint(1u), uint(1u))) : _GLF_FUZZED(26960u))), 0u, 1u)), uint(uvec3((gl_NumWorkGroups.x) >> (0u >> _GLF_IDENTITY(uint(1u), uint(1u))), 0u, 1u)))))), gl_NumWorkGroups.x));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(5.6)), bool(false))), mix(float(_GLF_FUZZED(((- 934.554) / -613.563))), float(_GLF_IDENTITY(0.0, _GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED(5.6)), bool(false)), (mix(float(0.0), float(_GLF_FUZZED(5.6)), bool(false))) - 0.0))), bool(true))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-79.68), ((injectionSwitch))[1]), vec2(_GLF_IDENTITY(((injectionSwitch))[0], clamp(((injectionSwitch))[0], ((injectionSwitch))[0], ((injectionSwitch))[0])), _GLF_FUZZED(-5834.0651)), bvec2(true, false))), (mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(mat2x4((injectionSwitch), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, determinant(mat3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)))), (mat2x4((injectionSwitch), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, determinant(mat3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), max(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))))))) * mat2(1.0))))) + vec2(0.0, 0.0))).x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)), _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - tan(vec2(0.0, 0.0))).y)) ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (true ? (injectionSwitch)[0] : _GLF_FUZZED(-5.9))), _GLF_FUZZED(93.00)), vec2(_GLF_FUZZED(-3.4), (injectionSwitch)[1]), bvec2(false, true))) : _GLF_FUZZED(vec2(89.89, 2.4)))).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1])), (injectionSwitch)[1]))), vec2(_GLF_FUZZED(_GLF_IDENTITY(351.479, (_GLF_IDENTITY(_GLF_IDENTITY(351.479, mix(float(351.479), float(_GLF_FUZZED(4113.5628)), bool(false))), (false ? _GLF_FUZZED(-9619.9650) : _GLF_IDENTITY(351.479, min(351.479, 351.479))))) * 1.0)), _GLF_FUZZED(-4008.3188)), bvec2(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, mix(float(_GLF_FUZZED(-1720.6626)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(float(float(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), clamp(float(float(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), float(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y)), float(float(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).y)))))), bool(true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - tan(vec2(0.0, 0.0))).y)) ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (true ? (injectionSwitch)[0] : _GLF_FUZZED(-5.9))), _GLF_FUZZED(93.00)), vec2(_GLF_FUZZED(-3.4), (injectionSwitch)[1]), bvec2(false, true))) : _GLF_FUZZED(vec2(89.89, 2.4)))).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1])), (injectionSwitch)[1]))), vec2(_GLF_FUZZED(_GLF_IDENTITY(351.479, (_GLF_IDENTITY(_GLF_IDENTITY(351.479, mix(float(351.479), float(_GLF_FUZZED(4113.5628)), bool(false))), (false ? _GLF_FUZZED(-9619.9650) : _GLF_IDENTITY(351.479, min(351.479, 351.479))))) * 1.0)), _GLF_FUZZED(-4008.3188)), bvec2(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, mix(float(_GLF_FUZZED(-1720.6626)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(float(float(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), clamp(float(float(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), float(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y)), float(float(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).y)))))), bool(true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y))), ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - tan(vec2(0.0, 0.0))).y)) ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (true ? (injectionSwitch)[0] : _GLF_FUZZED(-5.9))), _GLF_FUZZED(93.00)), vec2(_GLF_FUZZED(-3.4), (injectionSwitch)[1]), bvec2(false, true))) : _GLF_FUZZED(vec2(89.89, 2.4)))).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1])), (injectionSwitch)[1]))), vec2(_GLF_FUZZED(_GLF_IDENTITY(351.479, (_GLF_IDENTITY(_GLF_IDENTITY(351.479, mix(float(351.479), float(_GLF_FUZZED(4113.5628)), bool(false))), (false ? _GLF_FUZZED(-9619.9650) : _GLF_IDENTITY(351.479, min(351.479, 351.479))))) * 1.0)), _GLF_FUZZED(-4008.3188)), bvec2(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, mix(float(_GLF_FUZZED(-1720.6626)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(float(float(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), clamp(float(float(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), float(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y)), float(float(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).y)))))), bool(true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y)))) || false)), ! (! (! (_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - tan(vec2(0.0, 0.0))).y)) ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (true ? (injectionSwitch)[0] : _GLF_FUZZED(-5.9))), _GLF_FUZZED(93.00)), vec2(_GLF_FUZZED(-3.4), (injectionSwitch)[1]), bvec2(false, true))) : _GLF_FUZZED(vec2(89.89, 2.4)))).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1])), (injectionSwitch)[1]))), vec2(_GLF_FUZZED(_GLF_IDENTITY(351.479, (_GLF_IDENTITY(_GLF_IDENTITY(351.479, mix(float(351.479), float(_GLF_FUZZED(4113.5628)), bool(false))), (false ? _GLF_FUZZED(-9619.9650) : _GLF_IDENTITY(351.479, min(351.479, 351.479))))) * 1.0)), _GLF_FUZZED(-4008.3188)), bvec2(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, mix(float(_GLF_FUZZED(-1720.6626)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(float(float(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), clamp(float(float(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), float(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y)), float(float(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).y)))))), bool(true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y))), ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - tan(vec2(0.0, 0.0))).y)) ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (true ? (injectionSwitch)[0] : _GLF_FUZZED(-5.9))), _GLF_FUZZED(93.00)), vec2(_GLF_FUZZED(-3.4), (injectionSwitch)[1]), bvec2(false, true))) : _GLF_FUZZED(vec2(89.89, 2.4)))).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1])), (injectionSwitch)[1]))), vec2(_GLF_FUZZED(_GLF_IDENTITY(351.479, (_GLF_IDENTITY(_GLF_IDENTITY(351.479, mix(float(351.479), float(_GLF_FUZZED(4113.5628)), bool(false))), (false ? _GLF_FUZZED(-9619.9650) : _GLF_IDENTITY(351.479, min(351.479, 351.479))))) * 1.0)), _GLF_FUZZED(-4008.3188)), bvec2(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, mix(float(_GLF_FUZZED(-1720.6626)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(float(float(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), clamp(float(float(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), float(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y)), float(float(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).y)))))), bool(true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y)))) || false))))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))) && true))))), ! (! ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], clamp((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(1.0, 1.0))))[1], (injectionSwitch)[1], (injectionSwitch)[1])), (injectionSwitch)[1]))), _GLF_IDENTITY(vec2(_GLF_FUZZED(351.479), _GLF_FUZZED(-4008.3188)), vec2(vec3(vec2(_GLF_FUZZED(351.479), _GLF_FUZZED(-4008.3188)), exp(0.0)))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y))) || _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 1.0, cos(0.0), 1.0, 0.0)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))) && true), bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))) && true), true))))))))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY((! (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), float(float(_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), min(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(injectionSwitch[0]), float(_GLF_FUZZED(6887.0112)), bool(false))), injectionSwitch[1])).x), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))))) > injectionSwitch.y)))), bool(bool((! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, false)), false || (bool(bvec3(true, false, false))))), (injectionSwitch.x < injectionSwitch.y))))))))), bool(bvec2((_GLF_IDENTITY((! (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), float(float(_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), min(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(injectionSwitch[0]), float(_GLF_FUZZED(6887.0112)), bool(false))), injectionSwitch[1])).x), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))))) > injectionSwitch.y)))), bool(bool((! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, false)), false || (bool(bvec3(true, false, false))))), (injectionSwitch.x < injectionSwitch.y))))))))), true))), ! _GLF_IDENTITY((! (! (_GLF_IDENTITY((! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(fract(injectionSwitch)) : injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(fract(injectionSwitch)) : injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(fract(injectionSwitch)) : injectionSwitch)), vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(fract(injectionSwitch)) : injectionSwitch)), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(fract(injectionSwitch)) : injectionSwitch)))).x > injectionSwitch.y)))), bool(bool(_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))) || false))))))), (_GLF_IDENTITY((! (! (_GLF_IDENTITY((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(fract(injectionSwitch)) : injectionSwitch)).x > injectionSwitch.y)))), bool(bool(_GLF_IDENTITY((! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))), ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))))))), bool(bool((! (! (_GLF_IDENTITY((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(fract(injectionSwitch)) : injectionSwitch)).x > injectionSwitch.y)))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))))))))))) && true)))))), ! (_GLF_IDENTITY(! ((! (_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY((! (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), float(float(_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), min(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(injectionSwitch[0]), float(_GLF_FUZZED(6887.0112)), bool(false))), injectionSwitch[1])).x), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))))) > injectionSwitch.y)))), bool(bool((! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, false)), false || (bool(bvec3(true, false, false))))), (injectionSwitch.x < injectionSwitch.y))))))))), bool(bvec2((_GLF_IDENTITY((! (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), float(float(_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), min(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(injectionSwitch[0]), float(_GLF_FUZZED(6887.0112)), bool(false))), injectionSwitch[1])).x), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))))) > injectionSwitch.y)))), bool(bool((! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, false)), false || (bool(bvec3(true, false, false))))), (injectionSwitch.x < injectionSwitch.y))))))))), true))), ! _GLF_IDENTITY((! (! (_GLF_IDENTITY((! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(fract(injectionSwitch)) : injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(fract(injectionSwitch)) : injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(fract(injectionSwitch)) : injectionSwitch)), vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(fract(injectionSwitch)) : injectionSwitch)), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(fract(injectionSwitch)) : injectionSwitch)))).x > injectionSwitch.y)))), bool(bool(_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))) || false))))))), (_GLF_IDENTITY((! (! (_GLF_IDENTITY((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(fract(injectionSwitch)) : injectionSwitch)).x > injectionSwitch.y)))), bool(bool(_GLF_IDENTITY((! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))), ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))))))), bool(bool((! (! (_GLF_IDENTITY((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(fract(injectionSwitch)) : injectionSwitch)).x > injectionSwitch.y)))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))))))))))) && true))))))), false || (! ((! (_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY((! (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), float(float(_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), min(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(injectionSwitch[0]), float(_GLF_FUZZED(6887.0112)), bool(false))), injectionSwitch[1])).x), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))))) > injectionSwitch.y)))), bool(bool((! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, false)), false || (bool(bvec3(true, false, false))))), (injectionSwitch.x < injectionSwitch.y))))))))), bool(bvec2((_GLF_IDENTITY((! (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), float(float(_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), min(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(injectionSwitch[0]), float(_GLF_FUZZED(6887.0112)), bool(false))), injectionSwitch[1])).x), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))))) > injectionSwitch.y)))), bool(bool((! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, false)), false || (bool(bvec3(true, false, false))))), (injectionSwitch.x < injectionSwitch.y))))))))), true))), ! _GLF_IDENTITY((! (! (_GLF_IDENTITY((! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(fract(injectionSwitch)) : injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(fract(injectionSwitch)) : injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(fract(injectionSwitch)) : injectionSwitch)), vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(fract(injectionSwitch)) : injectionSwitch)), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(fract(injectionSwitch)) : injectionSwitch)))).x > injectionSwitch.y)))), bool(bool(_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))) || false))))))), (_GLF_IDENTITY((! (! (_GLF_IDENTITY((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(fract(injectionSwitch)) : injectionSwitch)).x > injectionSwitch.y)))), bool(bool(_GLF_IDENTITY((! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))), ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))))))), bool(bool((! (! (_GLF_IDENTITY((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(fract(injectionSwitch)) : injectionSwitch)).x > injectionSwitch.y)))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))))))))))) && true)))))))))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       return;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), false || (bool(false))))))))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, (0u) / (1u & 1u)), 0u, 0u), min(uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), (false ? _GLF_FUZZED(uvec3(45809u, 138811u, 180505u)) : uvec3(0u, 0u, 0u)))))) + (gl_WorkGroupSize)))).x;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 0)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          break;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
            }
           return;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), clamp((_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), min(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), max((_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))), (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))), (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))) / 1.0), bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) / 1.0), _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) / 1.0), sqrt(0.0), 0.0)), min(float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) / 1.0), sqrt(0.0), 0.0)), _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) / 1.0), sqrt(0.0), 0.0)), (false ? _GLF_FUZZED(8.1) : float(vec3(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) / 1.0), sqrt(0.0), 0.0))))))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - length(0.0)), (true ? injectionSwitch.y : _GLF_FUZZED(mod(-515.008, 8.3)))), (injectionSwitch.y) - 0.0)) / 1.0)) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(7.7), _GLF_FUZZED(8.7)), bvec2(false, false))).x < injectionSwitch.y))))) && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(mod(-515.008, 8.3)))), (injectionSwitch.y) - 0.0)) / 1.0)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true)))))))
            continue;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(clamp(54119, _GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), -92998))))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), 0 | ((1 << _GLF_IDENTITY(int(1), int(1))))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(1, 1, (0 >> _GLF_IDENTITY(int(5), int(5)))), (true ? _GLF_IDENTITY(ivec3(1, 1, (0 >> _GLF_IDENTITY(int(5), int(5)))), ivec3(ivec4(ivec3(1, 1, (0 >> _GLF_IDENTITY(int(5), int(5)))), 1))) : _GLF_FUZZED((ivec3(-93506, -52588, 41446) ^ ivec3(63018, 68218, 76325))))))))), (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), 0 | ((1 << _GLF_IDENTITY(int(1), int(1))))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(1, 1, (0 >> _GLF_IDENTITY(int(5), int(5)))), (true ? _GLF_IDENTITY(ivec3(1, 1, (0 >> _GLF_IDENTITY(int(5), int(5)))), ivec3(ivec4(ivec3(1, 1, (0 >> _GLF_IDENTITY(int(5), int(5)))), 1))) : _GLF_FUZZED((ivec3(-93506, -52588, 41446) ^ ivec3(63018, 68218, 76325))))))))), ~ (~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) | 0)))), 0 | ((1 << _GLF_IDENTITY(int(1), int(1))))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(1, 1, (0 >> _GLF_IDENTITY(int(5), int(5)))), (true ? _GLF_IDENTITY(ivec3(1, 1, (0 >> _GLF_IDENTITY(int(5), int(5)))), ivec3(ivec4(ivec3(1, 1, (0 >> _GLF_IDENTITY(int(5), int(5)))), 1))) : _GLF_FUZZED((ivec3(_GLF_IDENTITY(-93506, (false ? _GLF_FUZZED(_injected_loop_counter) : -93506)), -52588, 41446) ^ ivec3(63018, 68218, 76325))))))))))))) / 1)), ! (! (_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), 0 | ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) ^ 0))))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(1, 1, (0 >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, min(5, 5)))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(ivec3(82146, -17645, 85645)) : ivec3(1, 1, (0 >> _GLF_IDENTITY(int(5), int(5)))))), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(ivec3(1, 1, (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) / _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(70125))))), int(5)))), ivec3(ivec4(ivec3(1, 1, (0 >> _GLF_IDENTITY(int(5), int(5)))), 1))), (_GLF_IDENTITY(ivec3(1, 1, (0 >> _GLF_IDENTITY(int(5), int(5)))), ivec3(ivec4(ivec3(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter))), (0 >> _GLF_IDENTITY(int(5), int(5)))), 1)))) | (ivec3(0, 0, 0) << _GLF_IDENTITY(ivec3(3), ivec3(3)))) : _GLF_FUZZED((ivec3(-93506, _GLF_IDENTITY(-52588, min(-52588, -52588)), 41446) ^ ivec3(63018, 68218, 76325))), _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(ivec3(1, 1, (0 >> _GLF_IDENTITY(int(5), int(5)))), ivec3(ivec4(ivec3(1, 1, (0 >> _GLF_IDENTITY(int(5), int(5)))), 1))), (_GLF_IDENTITY(ivec3(1, 1, (0 >> _GLF_IDENTITY(int(5), int(5)))), ivec3(ivec4(ivec3(1, 1, (0 >> _GLF_IDENTITY(int(5), int(5)))), 1)))) | (ivec3(0, 0, 0) << _GLF_IDENTITY(ivec3(3), ivec3(3)))) : _GLF_FUZZED((ivec3(-93506, _GLF_IDENTITY(-52588, min(-52588, -52588)), 41446) ^ ivec3(63018, 68218, 76325)))), ivec3(ivec4(_GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(ivec3(1, 1, (0 >> _GLF_IDENTITY(int(5), int(5)))), ivec3(ivec4(ivec3(1, 1, (0 >> _GLF_IDENTITY(int(5), int(5)))), 1))), (_GLF_IDENTITY(ivec3(1, 1, (0 >> _GLF_IDENTITY(int(5), int(5)))), ivec3(ivec4(ivec3(1, 1, (0 >> _GLF_IDENTITY(int(5), int(5)))), 1)))) | (ivec3(0, 0, 0) << _GLF_IDENTITY(ivec3(3), ivec3(3)))) : _GLF_FUZZED((ivec3(-93506, _GLF_IDENTITY(-52588, min(-52588, -52588)), 41446) ^ ivec3(63018, 68218, 76325)))), min((true ? _GLF_IDENTITY(_GLF_IDENTITY(ivec3(1, 1, (0 >> _GLF_IDENTITY(int(5), int(5)))), ivec3(ivec4(ivec3(1, 1, (0 >> _GLF_IDENTITY(int(5), int(5)))), 1))), (_GLF_IDENTITY(ivec3(1, 1, (0 >> _GLF_IDENTITY(int(5), int(5)))), ivec3(ivec4(ivec3(1, 1, (0 >> _GLF_IDENTITY(int(5), int(5)))), 1)))) | (ivec3(0, 0, 0) << _GLF_IDENTITY(ivec3(3), ivec3(3)))) : _GLF_FUZZED((ivec3(-93506, _GLF_IDENTITY(-52588, min(-52588, -52588)), 41446) ^ ivec3(63018, 68218, 76325)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(ivec3(1, 1, (0 >> _GLF_IDENTITY(int(5), int(5)))), ivec3(ivec4(ivec3(1, 1, (0 >> _GLF_IDENTITY(int(5), int(5)))), 1))), (_GLF_IDENTITY(ivec3(1, 1, (0 >> _GLF_IDENTITY(int(5), int(5)))), ivec3(ivec4(ivec3(1, 1, (0 >> _GLF_IDENTITY(int(5), int(5)))), 1)))) | (ivec3(0, 0, 0) << _GLF_IDENTITY(ivec3(3), ivec3(3)))) : _GLF_FUZZED((ivec3(-93506, _GLF_IDENTITY(-52588, min(-52588, -52588)), 41446) ^ ivec3(63018, 68218, 76325)))))), 1))) << ivec3(0, 0, 0))))))))), bool(bool(_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), int(ivec4((1 << _GLF_IDENTITY(int(1), int(1))), 1, 1, 0))), 0 | ((1 << _GLF_IDENTITY(int(1), int(1))))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(1, 1, (0 >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, min(5, 5)))))), ~ (~ (_GLF_IDENTITY(ivec3(1, 1, (0 >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, min(5, 5)))))), ivec3(ivec4(ivec3(1, 1, (0 >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, min(5, 5)))))), 1)))))), (true ? _GLF_IDENTITY(ivec3(1, 1, (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(findMSB(_injected_loop_counter)) : int(5)))))), ivec3(ivec4(ivec3(1, 1, (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) << 0)), int(5)))), 1))) : _GLF_FUZZED((ivec3(-93506, -52588, 41446) ^ ivec3(63018, 68218, 76325))))))))))))))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, mix(float(_GLF_FUZZED(8.2)), float(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x), bool(true))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 1.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(length(0.0), _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0)), 0.0, 0.0)), 1.0, cos(0.0))), float(vec2(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(length(0.0), _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0)), 0.0, 0.0)), 1.0, cos(0.0))), 0.0))), dot(vec4(1.0, _GLF_IDENTITY(1.0, float(mat2x3(1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0))), 0.0, 0.0), vec4(_GLF_IDENTITY(length(0.0), float(mat2(length(0.0), _GLF_IDENTITY(dot(vec2(sqrt(0.0), 1.0), vec2(0.0, 1.0)), dot(vec2(sqrt(0.0), 1.0), vec2(0.0, 1.0))), 0.0, 1.0))), 0.0, 1.0, cos(0.0)))))), max(vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(length(0.0), 0.0, 1.0, cos(0.0))), dot(vec4(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 0.0, 0.0), vec4(length(0.0), 0.0, 1.0, _GLF_IDENTITY(cos(0.0), max(cos(0.0), _GLF_IDENTITY(cos(0.0), mix(float(cos(0.0)), float(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-822.486, (_GLF_IDENTITY(-822.486, clamp(-822.486, -822.486, -822.486))) * 1.0), (false ? _GLF_FUZZED(43.48) : _GLF_IDENTITY(-822.486, (_GLF_IDENTITY(-822.486, clamp(-822.486, -822.486, _GLF_IDENTITY(-822.486, float(mat4x2(-822.486, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), sin(0.0), 1.0, 1.0)))))) * 1.0))))), bool(false)))))))))), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(tan(10.63)) : 1.0)), 1.0)), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) - 0.0)) + 0.0), (_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(0.0, (0.0) - 0.0))) + 0.0)) / _GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, 0.0))))), injectionSwitch.y)), 0.0), vec4(length(0.0), 0.0, 1.0, cos(0.0))), _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(_GLF_IDENTITY(length(0.0), (false ? _GLF_FUZZED(-2.4) : length(0.0))), 0.0, 1.0, cos(0.0))), mix(float(_GLF_FUZZED(7.4)), float(dot(vec4(1.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)), 0.0), vec4(length(0.0), 0.0, 1.0, cos(0.0)))), bool(true))))))))).y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))) && true)))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 return;
                }
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      continue;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(_GLF_IDENTITY(bvec3(false || (false), true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(false || (false), true, _GLF_IDENTITY(true, true && (true))), false)), bvec3(bvec4(bvec3(bvec4(bvec3(false || (false), true, true), false)), true)))))))))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) && true))))
      return;
    }
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))) && true)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec3(injectionSwitch.x, 0.0, round(_GLF_IDENTITY(length(normalize(vec2(1.0, 1.0))), clamp(length(normalize(vec2(1.0, 1.0))), _GLF_IDENTITY(length(normalize(vec2(1.0, 1.0))), clamp(_GLF_IDENTITY(length(normalize(vec2(1.0, 1.0))), 0.0 + (length(normalize(vec2(1.0, 1.0))))), length(normalize(vec2(1.0, 1.0))), length(normalize(vec2(1.0, 1.0))))), length(normalize(vec2(1.0, 1.0)))))))), _GLF_IDENTITY((true ? float(vec3(injectionSwitch.x, 0.0, round(length(normalize(vec2(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(0.1)), bool(false)), (_GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(0.1)), bool(false)), (false ? _GLF_FUZZED(_GLF_IDENTITY(774.680, (774.680) + 0.0)) : mix(float(1.0), _GLF_IDENTITY(float(_GLF_FUZZED(0.1)), max(float(_GLF_FUZZED(0.1)), float(_GLF_FUZZED(0.1)))), bool(false))))) - 0.0)))))))) : _GLF_FUZZED(3.1)), mix(float(_GLF_FUZZED(45.84)), float(_GLF_IDENTITY((true ? float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - log(1.0)), min(injectionSwitch.x, injectionSwitch.x)), 0.0, round(length(normalize(vec2(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(0.1)), bool(false))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(0.1)), bool(false))), float(mat3x2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(0.1)), bool(false))), 0.0, 1.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(0.1)), bool(false))), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(0.1)), bool(false))))))))))) : _GLF_FUZZED(3.1)), ((true ? float(vec3(injectionSwitch.x, 0.0, round(length(normalize(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(0.1)), bool(false))))))))) : _GLF_FUZZED(3.1))) + sqrt(0.0))), bool(true))))) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, false, false)), ! (! (bool(bvec4(_GLF_DEAD(false), true, false, false))))), false || (bool(bvec4(_GLF_DEAD(false), true, false, false))))), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, false, false)), _GLF_IDENTITY(! (! (bool(bvec4(_GLF_DEAD(false), true, false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))))))), true && (! (! (bool(bvec4(_GLF_DEAD(false), true, false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))))))), false || (bool(bvec4(_GLF_DEAD(false), true, false, false)))))) || false))
        return;
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u)) << (0u >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), (uint(1u)) | (uint(1u)))))) * subgroup_size));
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), uint(_GLF_IDENTITY(uvec4(subgroup_base, 1u, 0u, 1u), max(uvec4(subgroup_base, 1u, 0u, 1u), uvec4(subgroup_base, 1u, 0u, 1u))))) + subgroup_local_id, uint(_GLF_IDENTITY(uint(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), min(_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), _GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)))), uint(_GLF_IDENTITY(uvec4(subgroup_base, 1u, 0u, 1u), max(uvec4(subgroup_base, 1u, 0u, 1u), uvec4(_GLF_IDENTITY(subgroup_base, 0u | (subgroup_base)), 1u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(subgroup_base) : 0u)), 1u))))) + subgroup_local_id), (true ? uint(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, max(subgroup_base, _GLF_IDENTITY(subgroup_base, 0u ^ (subgroup_base)))), uint(_GLF_IDENTITY(uvec4(subgroup_base, 1u, 0u, 1u), max(_GLF_IDENTITY(uvec4(subgroup_base, 1u, 0u, 1u), (uvec4(subgroup_base, 1u, 0u, 1u)) | (uvec4(subgroup_base, 1u, 0u, 1u))), uvec4(subgroup_base, 1u, 0u, 1u))))) + subgroup_local_id) : _GLF_FUZZED(num_workgroup)))));
 uint next_virtual_gid = workgroup_base + subgroup_base + (_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY(true ? _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), _GLF_IDENTITY((1), min((1), (1))) - 0))))))), ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), _GLF_IDENTITY((1), min((1), (1))) - 0)))))))) + 0u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1)))), clamp(~ (_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1)))), ~ (_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1)))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (~ (_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))))))))))))), min((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u))), (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u))), ~ (_GLF_IDENTITY(~ (uint(uint(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u)))), (~ (uint(uint(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u))))) | 0u)))) | 0u), (uint(_GLF_IDENTITY(uint(subgroup_local_id + 1), clamp(uint(subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, clamp(1, 1, 1))))), uint(subgroup_local_id + 1), uint(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) + 0u)))))) | (uint(_GLF_IDENTITY(uint(subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, _GLF_IDENTITY(max(1, 1), clamp(max(1, 1), max(1, 1), max(1, 1))))))), 1u * (uint(subgroup_local_id + _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | (1)))), 1, _GLF_IDENTITY(1, _GLF_IDENTITY(max(1, 1), clamp(max(1, 1), max(1, 1), max(1, 1)))))))))))))), (subgroup_local_id + 1))) : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY((85690 , workgroup_id), min((_GLF_IDENTITY(85690, _GLF_IDENTITY((85690) << 0, _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(62872))), 0, 0)), 0)) + ((85690) << 0))) , workgroup_id), _GLF_IDENTITY((85690 , workgroup_id), 0u ^ ((85690 , workgroup_id)))))), _GLF_IDENTITY((_GLF_FUZZED(_GLF_IDENTITY((85690 , workgroup_id), min((_GLF_IDENTITY(85690, _GLF_IDENTITY((85690) << 0, _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(62872))), 0, 0)), 0)) + ((85690) << _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, min(0, 0))))))) , workgroup_id), (85690 , workgroup_id))))), (false ? _GLF_FUZZED(virtual_gid) : (_GLF_FUZZED(_GLF_IDENTITY((85690 , workgroup_id), min((_GLF_IDENTITY(85690, _GLF_IDENTITY((85690) << 0, _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(62872))), 0, 0)), 0)) + ((85690) << _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, min(0, 0))))))) , workgroup_id), (85690 , workgroup_id))))))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), uint(uint(_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)), clamp(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)), ~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (1u) | (1u)))))), ~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)))))) + 1), clamp(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)), clamp(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)), ~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)), ~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)))))) + 1), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)), clamp(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)), ~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)), ~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)))))) + 1), uint(uvec2((_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)), clamp(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)), ~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)), ~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)))))) + 1), 1u)))) | ((_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)), clamp(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)), ~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)), ~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)))))) + 1))), ((_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)), clamp(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u), 0u ^ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)))), ~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)), ~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)))))) + 1)) / 1u), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)), clamp(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)), ~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)), ~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)))))) + 1), ((_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)), clamp(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)), ~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)), ~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id))) / 1u)), min((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id))) / 1u)), (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id))) / 1u)))))))) + 1)) | 0u), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)), clamp(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)), ~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)), ~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)))))) + 1), ((_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)), clamp(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)), ~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)), ~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)))))) + 1)) | ((_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)), clamp(~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)), ~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)), ~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)))))) + 1))))), min((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uint(subgroup_local_id + 1)), (uint(uint(subgroup_local_id + 1))) | (_GLF_IDENTITY(uint(uint(subgroup_local_id + _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(70004))))), (uint(uint(subgroup_local_id + 1))) << 0u))))), (subgroup_local_id + 1))) : _GLF_FUZZED(_GLF_IDENTITY((85690 , workgroup_id), min((85690 , workgroup_id), _GLF_IDENTITY((85690 , workgroup_id), ((85690 , workgroup_id)) - 0u)))), 0u ^ (true ? _GLF_IDENTITY((subgroup_local_id + 1), min((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(46274)))) >> 0), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1))) / 1u)) >> 0u))), (uint(uint(subgroup_local_id + 1))) | _GLF_IDENTITY((uint(uint(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, ~ (~ _GLF_IDENTITY((subgroup_local_id + 1), 0u | (_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))), (subgroup_local_id + 1)))))))))))), ((uint(uint(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + _GLF_IDENTITY(1, (1) / (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)), int(ivec2(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)), ~ (~ ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))), 1))))), _GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u) + 1))))))))) << 0u)))), (subgroup_local_id + 1))) : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY((85690 , workgroup_id), min((85690 , workgroup_id), (85690 , workgroup_id)))), (false ? _GLF_FUZZED(uaddCarry(workgroup_base, subgroup_id, num_workgroup)) : _GLF_FUZZED(_GLF_IDENTITY((85690 , workgroup_id), min((85690 , workgroup_id), (85690 , workgroup_id))))))))))))) % _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) | 0u))));
 uint read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (64) >> (_GLF_IDENTITY(0, max(0, 0)) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, 0 ^ (1)), 1))), _GLF_IDENTITY((false ? _GLF_FUZZED(83930) : int(1)), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, true && (false)), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, true && (false)), true))))), false || (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, true && (false)), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, true && (false)), true)))))))) ? _GLF_FUZZED(83930) : int(1), (false ? _GLF_FUZZED(83930) : int(1)) | (false ? _GLF_FUZZED(83930) : int(1))), (_GLF_IDENTITY(false ? _GLF_FUZZED(83930) : int(1), (false ? _GLF_FUZZED(83930) : int(1)) | (false ? _GLF_FUZZED(83930) : int(1)))) | 0))) | 0)), int(1)))), _GLF_IDENTITY(2, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED((88955 % 35381))))), (true ? (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED((88955 % 35381))))) : _GLF_FUZZED(90264))), (_GLF_IDENTITY((_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED((88955 % 35381))))), (true ? (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED((88955 % 35381))))) : _GLF_FUZZED(90264)))) | (_GLF_IDENTITY((_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED((88955 % 35381))))), (true ? (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED((88955 % 35381))))) : _GLF_FUZZED(90264))))) << 0));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, (1) | (1))), 4, 64, 4);
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))), false)), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))), false)), bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))), false)), true, false)))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, false)), bvec2(bvec3(bvec2(bvec2(false, false)), false)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, false)), bvec2(bvec3(bvec2(bvec2(false, false)), false)))))))))))), ((! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, false)), bvec2(bvec3(bvec2(bvec2(false, false)), false)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, false)), bvec2(bvec3(bvec2(bvec2(false, false)), false))))))))))))) || false)))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, false)), bvec2(bvec3(bvec2(bvec2(false, false)), false)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, false)), bvec2(bvec3(bvec2(bvec2(false, false)), false)))))))))))), ((! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, false)), bvec2(bvec3(bvec2(bvec2(false, false)), false)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, false)), bvec2(bvec3(bvec2(bvec2(false, false)), false))))))))))))) || false))))), false || (! (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, false)), bvec2(bvec3(bvec2(bvec2(false, false)), false)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, false)), bvec2(bvec3(bvec2(bvec2(false, false)), false)))))))))))), ((! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, false)), bvec2(bvec3(bvec2(bvec2(false, false)), false)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, false)), bvec2(bvec3(bvec2(bvec2(false, false)), false))))))))))))) || false))))))))), _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))))))))) || false))
    {
     if(_GLF_DEAD(false))
      return;
     continue;
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) * 1))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))), false)), (bool(bvec2(_GLF_DEAD(false), false))) && true)))
          continue;
         subgroupBarrier();
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(true && _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), ((_GLF_WRAPPED_LOOP(false))) || false), ! (! (_GLF_IDENTITY(true && _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), ((_GLF_WRAPPED_LOOP(false))) || false), ! (! (true && _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), _GLF_IDENTITY(((_GLF_WRAPPED_LOOP(false))), true && (((_GLF_WRAPPED_LOOP(false))))) || false)))))))));
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    continue;
  }
 atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, min(4, 4)))), 64, 4);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))), (_injected_loop_counter --) - 0))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-5.0))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) > _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) | (0))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), (bool(bvec3(false, false, false))) && true))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 | (int(4)))))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
              }
            }
           if(_GLF_DEAD(false))
            continue;
           for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec3(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), 1.0, _GLF_ONE(1.0, injectionSwitch.y))))))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
                  {
                   return;
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_DEAD(false))
                    continue;
                  }
                }
               return;
              }
            }
           return;
           if(_GLF_DEAD(false))
            break;
          }
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), mix(vec2(_GLF_FUZZED(-1.0), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))[1]), vec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))[0], _GLF_FUZZED(8400.4630)), bvec2(true, false))) : _GLF_FUZZED(asin(mix(vec2(185.504, -6171.9256), injectionSwitch, bvec2(true, false)))))), 0.0), mix(vec3(_GLF_FUZZED(5.1), _GLF_FUZZED(_GLF_IDENTITY(2.7, (2.7) - 0.0)), _GLF_FUZZED(1561.7883)), vec3((vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), 0.0))[0], (vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), 0.0))[1], (vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), 0.0))[2]), bvec3(true, _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))), max(vec2(vec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), min(vec2(0.0, 0.0) + (injectionSwitch), _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), (vec2(0.0, 0.0) + (injectionSwitch)) * vec2(1.0, 1.0))))), injectionSwitch, injectionSwitch)), max(injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), 0.0)), vec2(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), 0.0))))).y))))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
