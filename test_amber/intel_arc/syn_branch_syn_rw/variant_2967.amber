#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 if((subgroup_local_id % 2) == 0)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     switch(_GLF_SWITCH(0))
      {
       case 20:
       mat3 _GLF_SWITCH_0_0v, _GLF_SWITCH_0_1v, _GLF_SWITCH_0_2v[6];
       case 0:
       case 48:
       case 43:
       case 91:
       case 33:
       case 28:
       atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
       break;
       case 98:
       if((ivec3(87795, 45197, 28546) != ivec3(33317, 32657, 70240)))
        {
         subgroup_local_id;
         bvec2 _GLF_SWITCH_0_3v[20], _GLF_SWITCH_0_4v, _GLF_SWITCH_0_5v[79];
         (_GLF_SWITCH_0_1v * (_GLF_SWITCH_0_0v * mat4x3(-694.012, 3933.2026, 6.5, 69.53, -8275.4424, -205.481, -819.538, 64.93, -608.647, -700.542, -551.399, -2.1)));
        }
       else
        {
         for(         (mat4x2(82.59, -448.032, 8.2, -4.0, 5.7, -2681.8316, 9856.2351, 0.3));
 (bvec3(true, false, true) == bvec3(false, false, true)); mat2(-805.209, 9490.0801, 95.47, 1.6))
          {
           log(-27.03);
           bvec4 _GLF_SWITCH_0_6v[38], _GLF_SWITCH_0_7v;
           vec2 _GLF_SWITCH_0_8v, _GLF_SWITCH_0_9v, _GLF_SWITCH_0_10v;
           ;
           vec4 _GLF_SWITCH_0_11v[55];
           mat2x4(710.101, -4918.1121, -9.6, 7510.2174, 225.466, -987.387, 25.34, 829.921);
           mat2x4 _GLF_SWITCH_0_12v;
          }
         for(uvec4 _GLF_SWITCH_0_13v, _GLF_SWITCH_0_14v, _GLF_SWITCH_0_15v[56]; true; ivec4(57476, -53953, 39259, 598))
          {
           ;
           mat3((true ? mat2x4(9.2, -2662.0241, 99.61, 163.620, 9.9, -658.791, -39.47, -676.313) : mat2x4(4832.5384, 22.13, 96.34, -5385.7890, -218.668, -265.548, 21.54, 66.89)));
           vec2 _GLF_SWITCH_0_16v[99], _GLF_SWITCH_0_17v, _GLF_SWITCH_0_18v[66];
          }
         for(bvec4 _GLF_SWITCH_0_19v[10], _GLF_SWITCH_0_20v[39]; (exp(vec3(3.6, -8.1, -519.329)) != vec3(-1.9, -3.9, -950.786)); mat2(498.692, -890.903, 683.128, 0.3))
          {
           switch(_GLF_SWITCH(0))
            {
             case 0:
             case 11:
             case 99:
             case 22:
             case 57:
             case 91:
             mat3x2 _GLF_SWITCH_0_21v[47];
             break;
             default:
             1;
            }
          }
         for(         (uvec3(80938u, 137607u, 3799u) / subgroup_local_id);
 (-85296 < -42296); outerProduct(injectionSwitch, injectionSwitch))
          {
           min(uvec2(24480u, 86601u), uvec2(91652u, 136296u));
           mat3x2(3792.6209, -7619.2392, -57.89, 9.5, -5.7, -29.42);
          }
         {
          bvec2(true, true);
          ivec2 _GLF_SWITCH_0_22v[74];
          ;
          mat3x4(_GLF_SWITCH_0_1v);
          bvec3(true, false, true);
          mat2 _GLF_SWITCH_0_23v[15];
          mat2 _GLF_SWITCH_0_24v[39];
          mat3x4 _GLF_SWITCH_0_25v, _GLF_SWITCH_0_26v;
          mat2x4(81.32, -7.7, -876.905, -5.0, 48.38, -30.74, -883.090, -938.375);
         }
         {
          mat3x2(-734.097, -6823.5619, -251.689, 2.3, -8.6, -38.50);
          -73269;
          pow(injectionSwitch, vec2(10.12, -29.76));
         }
        }
       default:
       1;
      }
    }
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 subgroupBarrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), ! (! (! (_GLF_IDENTITY(true, (true) || false)))))))))
  {
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
