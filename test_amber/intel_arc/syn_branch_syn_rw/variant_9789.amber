#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(subgroup_local_id + 1 < subgroup_size)
  {
   switch(_GLF_SWITCH(0))
    {
     case 0:
     case 55:
     case 12:
     int i = 0;
     case 58:
     atomicStore(checker[virtual_gid], read, 4, 64, 4);
     break;
     case 29:
     vec2(-6.4, 0.8);
     case 22:
     {
      for(ivec3 _GLF_SWITCH_0_0v, _GLF_SWITCH_0_1v[73]; (false && true); mat3(2209.5940, -2303.4634, -41.51, 291.221, -6051.4062, 26.36, -69.83, -2.0, -8799.0342))
       {
        ivec3 _GLF_SWITCH_0_2v, _GLF_SWITCH_0_3v, _GLF_SWITCH_0_4v;
        for(        mat3x2(-20.45, -760.479, -7300.5896, 1235.3283, -905.810, 8.3);
 false; (mat3x2(mat3x4(mat4x2(-5.0, 98.46, 7653.5244, 3095.8826, -5.8, -2250.0614, -48.69, -578.663))) - mat3x2(245.406, 4971.1473, -0.5, -0.5, -50.19, 108.140)))
         {
          ;
          true;
          mat4(0.6, 1519.2128, 4.1, -2953.1769, 37.21, 65.88, -6160.9568, 4.8, -35.02, -2775.3568, 6.6, -607.187, 0.9, -85.67, -2.5, -9.3);
          bool _GLF_SWITCH_0_5v;
          reflect(ldexp(vec2(1.7, 68.71), ivec2(-23983, 9327)), vec2(21.61, 25.85));
          mat3x4(70.70, -3180.8211, 623.302, 263.452, -99.62, 793.576, 2.1, -4.8, -2.1, -8423.0790, 6.5, 5842.7601);
          ;
          mat2 _GLF_SWITCH_0_6v;
         }
        ;
        vec4(-3.7, 0.5, -6.8, 8.9);
        for(        floatBitsToUint(vec4(8593.6907, -3299.3271, 186.101, -918.188));
 false; mat3x2(mat4x3(-1.6, 1.9, 9228.7039, 1274.3325, 8.3, -6310.9382, -8.0, -6.0, -38.85, 14.54, 934.824, 7.9)))
         {
          ivec4 _GLF_SWITCH_0_7v, _GLF_SWITCH_0_8v[75], _GLF_SWITCH_0_9v;
          exp(vec3(662.048, -14.30, -1.1));
          ;
          ;
          mat3x2(mat2x3(-8.0, 49.83, 8.8, -7.4, -25.95, 33.44));
          mat2(mat3(9.4, -5078.1481, -53.25, 1.6, -77.18, 8.4, -2979.1493, -980.560, 0.3));
          float _GLF_SWITCH_0_10v[88];
          uint _GLF_SWITCH_0_11v, _GLF_SWITCH_0_12v, _GLF_SWITCH_0_13v[86];
         }
        mat4x3(mat3(-4530.7208, 2.3, -117.132, 9525.8669, 958.826, -286.122, 7.9, -9.5, -4.6));
        -4.5;
        for(        vec4(-6055.2816, 9060.7635, 3.5, -7.7);
 (true ? true : true); bvec4(false, false, true, false))
         {
          int _GLF_SWITCH_0_14v, _GLF_SWITCH_0_15v, _GLF_SWITCH_0_16v;
          mat2x4 _GLF_SWITCH_0_17v;
          int _GLF_SWITCH_0_18v, _GLF_SWITCH_0_19v;
          bvec3(true, true, true);
          mat4x3 _GLF_SWITCH_0_20v, _GLF_SWITCH_0_21v;
         }
       }
      {
       switch(_GLF_SWITCH(0))
        {
         case 0:
         case 69:
         if(false)
          {
           (mat2(-0.4) - mat2(-2813.9210, -166.393, 4.2, -5.8));
           ivec3 _GLF_SWITCH_0_22v[88], _GLF_SWITCH_0_23v, _GLF_SWITCH_0_24v;
           transpose(mat2(67.96, -6.6, 403.385, 813.695));
           bvec4 _GLF_SWITCH_0_25v;
           mat4x3 _GLF_SWITCH_0_26v, _GLF_SWITCH_0_27v;
          }
         (- mat2x3(-4.4, -7.5, -501.188, 85.11, 833.891, -8799.8875));
         case 68:
         if(false)
          {
           mat3x4 _GLF_SWITCH_0_28v;
           ;
           bvec2(true, false);
           greaterThanEqual(ivec3(42560, -97766, 28119), ivec3(62342, 77357, -21562));
           next_virtual_gid;
           (uvec3(183811u, 60953u, 76445u) - virtual_gid);
           mat4x2 _GLF_SWITCH_0_29v, _GLF_SWITCH_0_30v;
           (mat4x3(8.8, -9.5, -634.057, 6348.7158, 2819.0093, 794.120, -75.31, 734.474, -3.5, 4.0, 5.7, -9359.9455) * unpackUnorm4x8(next_virtual_gid));
           ivec4 _GLF_SWITCH_0_31v;
          }
         case 35:
         if(true)
          {
           switch(_GLF_SWITCH(0))
            {
             case 33:
             uvec2(149110u, 121530u);
             case 31:
             uvec3 _GLF_SWITCH_2_0v[97], _GLF_SWITCH_2_1v;
             case 0:
             case 74:
             case 65:
             case 3:
             case 94:
             ivec3 _GLF_SWITCH_0_32v[4], _GLF_SWITCH_0_33v, _GLF_SWITCH_0_34v;
             break;
             case 32:
             (99.20 + mat2x4(-0.0, -6.1, -385.889, -8.1, -19.79, 399.221, -2348.1576, 2.7));
             default:
             1;
            }
          }
         else
          {
           switch(_GLF_SWITCH((0 | 0)))
            {
             case 5:
             mat3x4 _GLF_SWITCH_3_0v;
             case 0:
             case 21:
             mat3x4 _GLF_SWITCH_0_35v;
             mat4x2 _GLF_SWITCH_0_36v[5];
             case 8:
             case 38:
             mat3(-139.207, -91.07, 11.02, 2824.9943, -4452.3180, 57.30, 6733.7074, -1.9, 99.38);
             case 69:
             uvec2(189127u, 79517u);
             case 11:
             bvec3 _GLF_SWITCH_0_37v, _GLF_SWITCH_0_38v[14], _GLF_SWITCH_0_39v;
             bool _GLF_SWITCH_0_40v[52];
             break;
             case 25:
             mat2x4 _GLF_SWITCH_3_1v;
             default:
             1;
            }
          }
         subgroup_local_id;
         while(false)
          {
           switch(_GLF_SWITCH(0))
            {
             case 0:
             case 21:
             case 31:
             mat2x3 _GLF_SWITCH_0_41v[71], _GLF_SWITCH_0_42v[43];
             mat2 _GLF_SWITCH_0_43v, _GLF_SWITCH_0_44v[20], _GLF_SWITCH_0_45v;
             (+ mat2x3(24.71, -3117.9838, 3043.9439, 4.8, 4.6, 4088.6899));
             (uvec4(23905u, 76478u, 189983u, 122681u) ^ (false ? num_workgroup : subgroup_id));
             case 93:
             exp2(vec2(327.270, 8.8));
             case 95:
             vec3(-4.8, -9.9, 86.07);
             break;
             case 71:
             mat2x4(-7224.8857, 4309.9394, 167.389, -0.0, 8.8, -2.3, 6382.8941, 1151.7568);
             default:
             1;
            }
          }
         break;
         case 17:
         mat4 _GLF_SWITCH_2_0v[2];
         case 94:
         ivec2(i, -46769);
         default:
         1;
        }
      }
      mat2x4(613.574, -849.246, 20.06, -1.5, 7.0, -9727.5062, -575.627, 4.6);
      bvec2(false, false);
      if(true)
       {
        switch(_GLF_SWITCH(0))
         {
          case 74:
          (mat2x3(-8.8, 61.59, 60.28, -5382.0137, 2.3, -285.395) / 54.63);
          case 3:
          ((-86173 ^ ivec2(31697, -50005)) & i);
          case 0:
          case 50:
          case 61:
          float _GLF_SWITCH_0_46v;
          break;
          case 58:
          ;
          default:
          1;
         }
       }
      else
       {
        switch(_GLF_SWITCH(0))
         {
          case 60:
          ;
          case 12:
          (ivec3(-20994, -42152, -27945) >> ivec3(-58790, 29586, 81993));
          case 0:
          case 68:
          case 87:
          vec3(73.33, 56.81, -3.6);
          case 19:
          for(ivec4 _GLF_SWITCH_0_47v[65]; false; 81.20)
           {
            mat2(2.7, -9664.6844, 6449.3845, -2.1);
            vec4 _GLF_SWITCH_0_48v[13], _GLF_SWITCH_0_49v, _GLF_SWITCH_0_50v[51];
            vec2(-6673.0298, 973.743).r;
            log(vec3(-38.44, -77.00, 442.514));
            ;
            findMSB(ivec2(-59540, 51406));
            mat2(-807.797, -8879.7407, -7.9, 98.63);
           }
          while((uvec4(169466u, 62257u, 155272u, 174814u) != uvec4(126941u, 166521u, 80063u, 17734u)))
           {
            switch(_GLF_SWITCH(0))
             {
              case 17:
              (mat4(2.4, 940.539, -4.5, 359.903, 71.15, 4.1, 9.3, -8389.9584, -752.790, 8.0, 7.2, 0.4, -1.8, -56.20, 59.91, 233.858) + 9.3);
              case 0:
              case 2:
              case 85:
              case 87:
              switch(_GLF_SWITCH(0))
               {
                case 34:
                vec4(-495.193, 7210.5493, 3.7, 62.22);
                case 17:
                ;
                case 0:
                float _GLF_SWITCH_0_51v, _GLF_SWITCH_0_52v;
                mat2x4 _GLF_SWITCH_0_53v, _GLF_SWITCH_0_54v[54], _GLF_SWITCH_0_55v;
                mat2x4(8.1, -125.788, 105.880, -2.8, 1.4, -5737.0470, -1687.7307, 2.7);
                case 48:
                bvec3 _GLF_SWITCH_0_56v[84], _GLF_SWITCH_0_57v;
                mat4 _GLF_SWITCH_0_58v, _GLF_SWITCH_0_59v, _GLF_SWITCH_0_60v;
                float _GLF_SWITCH_0_61v, _GLF_SWITCH_0_62v[85], _GLF_SWITCH_0_63v[35];
                notEqual(injectionSwitch, (injectionSwitch / inversesqrt(_GLF_SWITCH_0_52v)));
                mat3x4(-9.7, -3.8, -359.436, -9039.5697, 3.0, -9.2, -3.2, 651.226, 51.74, -520.630, -5.4, -9679.6267);
                case 79:
                (ivec3(-19337, -79376, 16311) >> i);
                break;
                default:
                1;
               }
              break;
              case 86:
              bvec3(true, false, false);
              case 26:
              mat4x3 _GLF_SWITCH_4_0v, _GLF_SWITCH_4_1v;
              default:
              1;
             }
           }
          case 7:
          {
           bvec4(true, true, false, false);
           bvec4 _GLF_SWITCH_0_64v[45], _GLF_SWITCH_0_65v, _GLF_SWITCH_0_66v;
          }
          case 63:
          if((mix(injectionSwitch, vec2(-8791.7406, 7.5), -17.38) != injectionSwitch))
           {
            ivec3(-6065, 10283, -29677);
            mat2x3(258.816, 350.917, -9235.4747, 39.64, -804.844, 5.6);
            lessThanEqual(ivec2(98732, 22018), ivec2(-99552, -4001));
            ivec2 _GLF_SWITCH_0_67v;
           }
          else
           {
            (uvec4(174983u, 85423u, 131422u, 152944u) & (subgroup_local_id ++));
            ;
           }
          int _GLF_SWITCH_0_68v, _GLF_SWITCH_0_69v, _GLF_SWITCH_0_70v;
          case 70:
          (vec2(-19.60, 4.4) * mat4x2(68.75, -2125.2398, 88.35, -1844.5373, 48.39, 5.3, 9.2, 7.8));
          break;
          case 45:
          atomicMin(_GLF_SWITCH_0_70v, (_GLF_SWITCH_0_69v / 6970));
          default:
          1;
         }
       }
      while(bool(-7568.1472))
       {
       }
     }
     default:
     1;
    }
  }
 else
  {
   switch(_GLF_SWITCH(0))
    {
     case 21:
     if(((96.66 + (mat3x4(49.14, 5.0, -867.101, -562.651, -43.81, -7.1, -4.3, -7.5, -64.13, 1974.0377, -9.3, 673.087) - 0.6)) == mat3x4(-94.03, 37.22, 483.052, -7.8, 1787.4914, -4.2, 50.47, -2.1, -910.634, 6.2, 43.83, -63.68)))
      {
      }
     else
      {
       mat3x2(2.8, 72.61, 4535.5357, 39.46, 4.1, 7330.8191);
       ivec2(-30963);
       if(true)
        {
         vec3 _GLF_SWITCH_1_0v[14];
         ;
         while(true)
          {
          }
         mat4x3(9855.1600, -337.891, 74.94, 91.23, 91.29, 5.1, 6.6, 806.791, 6.1, -945.595, 987.654, 0.2);
         mat4x2 _GLF_SWITCH_1_1v[62], _GLF_SWITCH_1_2v, _GLF_SWITCH_1_3v;
         mat3x4 _GLF_SWITCH_1_4v[67], _GLF_SWITCH_1_5v[26], _GLF_SWITCH_1_6v;
        }
       uvec3(146945u, 118814u, 101109u);
       ;
       ivec2(62091, -55439);
       (47750 % ivec3(-2561, 81627, -48919).z);
       mat3x4 _GLF_SWITCH_1_7v, _GLF_SWITCH_1_8v;
       for(ivec3 _GLF_SWITCH_1_9v, _GLF_SWITCH_1_10v, _GLF_SWITCH_1_11v; true; (injectionSwitch[0] - ldexp(656.732, 64382)))
        {
         float _GLF_SWITCH_1_12v;
         _GLF_SWITCH_1_12v;
         bvec2 _GLF_SWITCH_1_13v[16], _GLF_SWITCH_1_14v[62];
         ;
         uint _GLF_SWITCH_1_15v, _GLF_SWITCH_1_16v;
         uvec2(74656u, 58885u);
        }
      }
     case 68:
     (length(vec2(1.1, -3137.9471)) + (mat2x3(5565.8474, -67.81, 30.29, 30.65, -42.91, 2.2)));
     case 0:
     case 93:
     case 65:
     atomicStore(checker[virtual_gid], read, 4, 64, 4);
     break;
     case 48:
     while((mat4(vec4(938.463, -3862.8468, 9.7, -0.6), vec4(-1705.4633, 5.9, -46.08, 56.77), vec4(-214.517, -599.947, -897.334, -26.74), vec4(8.1, 92.28, 4.2, 112.249)) != mat4(5.4, -473.489, -3032.3388, -91.96, 0.5, -8.7, -59.07, -74.38, 94.13, -8.6, 8.1, -2986.3977, 2.2, -673.258, -4.8, -78.00)))
      {
       for(mat4x3 _GLF_SWITCH_1_17v; true; injectionSwitch)
        {
         if(false)
          {
           ;
           ivec3(-68386, 81854, 11486);
           ivec4(-61832, -9506, -61670, -72213);
           bool _GLF_SWITCH_1_18v[15], _GLF_SWITCH_1_19v;
           (811.662 + mat3x4(-6395.9581, -7469.9516, 380.044, 6338.9561, 87.06, -9.6, -897.862, 6.5, 5.5, 7349.5379, 857.973, -870.556));
          }
         else
          {
           mat3(975.681, -4.5, 7.1, -1.1, 4627.3710, -902.061, 873.999, 503.534, 7.1);
           subgroup_size;
          }
         true;
         vec3(-5.7, 630.794, 30.91);
         for(         37943u;
 ((- mat4(1.7, -91.42, 4449.4815, 4.0, -8791.4761, -223.968, -7511.7288, -85.75, 9418.4032, 5.4, 612.416, -0.6, -635.979, 75.23, -6.9, -8499.2663)) != mat4(8.9, -5787.2911, -464.618, 311.540, -260.536, 0.6, -348.300, 618.294, -3.1, 7082.9079, -58.11, -20.89, 13.48, -0.4, -35.62, 9.6)); mat3x2(0.0, -919.289, 185.541, -6.9, 5.6, -6.1))
          {
           (step(vec4(-338.825, -7.4, 6.6, -10.77), vec4(6.4, -95.99, 34.07, 2.6)) - -238.588);
           cos(vec2(-3076.1301, -1431.7266));
          }
         ivec2(-55993, 61208);
         -91828;
        }
       ;
       while(((length(-45.16) == 7280.9283) ? true : false))
        {
         if((mat4(-50.34, -3.2, 9790.0051, 2.9, -25.75, 288.518, 38.96, 232.859, 98.98, 15.03, -79.32, -7.0, -71.46, 269.507, -820.215, -711.819) != mat4(114.848, -5.8, -95.46, -2.1, -7152.1865, 28.26, 442.652, -6137.8296, 8713.9976, 248.904, -2.1, -6.2, -1.4, -1923.6773, 4692.7250, -2.9)))
          {
           vec3 _GLF_SWITCH_1_20v[25], _GLF_SWITCH_1_21v;
           mat2x3 _GLF_SWITCH_1_22v[85], _GLF_SWITCH_1_23v;
           ;
           vec4 _GLF_SWITCH_1_24v, _GLF_SWITCH_1_25v[65];
           -31.67;
           ivec4(-17443, 50793, -41305, 30510);
          }
         else
          {
           mat4(9.8, -88.07, -1.5, 268.855, -9557.8433, 9.6, -5.6, -655.908, -5.4, 0.5, 5437.3802, 4.2, -23.89, 19.74, 9.5, -4.0);
           uvec4(112574u, 101110u, 59924u, 28155u);
           mat2 _GLF_SWITCH_1_26v, _GLF_SWITCH_1_27v[66];
           mat4(-96.30, -725.424, -2.4, 1.5, 893.318, -67.21, 1037.4757, 8.4, 464.619, 8.3, 12.75, -70.73, -982.641, 4790.2337, -8621.3357, -448.739);
           ivec2(71845, 70913);
          }
         uvec3 _GLF_SWITCH_1_28v;
         (mat3x2(-34.93, 268.585, 6.9, 36.95, 6.8, -3414.1190));
         mat4x3 _GLF_SWITCH_1_29v, _GLF_SWITCH_1_30v;
        }
       fma(ceil(vec2(-78.86, 2.3)), abs(injectionSwitch), injectionSwitch);
      }
     case 14:
     vec3(-847.770, 2155.4896, 23.38);
     default:
     1;
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
