#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_1 {
 mat3 _f0;
 mat4x3 _f1;
 vec4 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_0 {
 mat3x4 _f0;
 ivec4 _f1;
 mat4x2 _f2;
 bvec2 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 uint subgroup_size;
 mat4x3 _f1;
 mat2 _f2;
 mat2x3 _f3;
 _GLF_struct_1 _f4;
 vec2 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(_GLF_struct_0(mat3x4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, float(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-3337.8498)), bool(false))), 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)) : _GLF_FUZZED(-219.298)))))), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-1.6)), bool(false))), _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 1.0)), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(1.0, max(1.0, 1.0)))), mix(_GLF_IDENTITY(float(_GLF_FUZZED(5.3)), _GLF_IDENTITY(float(float(_GLF_IDENTITY(float(_GLF_FUZZED(5.3)), float(mat2(_GLF_IDENTITY(float(_GLF_FUZZED(5.3)), float(vec2(float(_GLF_FUZZED(5.3)), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) - 0.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0))))), min(float(float(_GLF_IDENTITY(float(_GLF_FUZZED(5.3)), float(mat2(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(5.3), float(vec2(_GLF_FUZZED(5.3), 1.0)))), float(vec2(float(_GLF_FUZZED(5.3)), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) - 0.0)))), length(vec4(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(0.0, 1.0, 0.0, 0.0, 1.0, 0.0), transpose(transpose(mat2x3(0.0, 1.0, 0.0, 0.0, 1.0, 0.0))))), clamp(float(_GLF_IDENTITY(mat2x3(0.0, 1.0, 0.0, 0.0, 1.0, 0.0), transpose(transpose(mat2x3(0.0, 1.0, 0.0, 0.0, 1.0, 0.0))))), float(_GLF_IDENTITY(mat2x3(0.0, 1.0, 0.0, 0.0, 1.0, 0.0), transpose(transpose(mat2x3(0.0, 1.0, 0.0, 0.0, 1.0, 0.0))))), float(_GLF_IDENTITY(mat2x3(0.0, 1.0, 0.0, 0.0, 1.0, 0.0), transpose(transpose(mat2x3(0.0, 1.0, 0.0, 0.0, 1.0, 0.0)))))))), 0.0, 0.0, 0.0)), 1.0, 1.0))))), float(float(_GLF_IDENTITY(float(_GLF_FUZZED(5.3)), _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(float(_GLF_FUZZED(5.3)), float(vec2(float(_GLF_FUZZED(5.3)), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) - 0.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0)), (_GLF_IDENTITY(float(mat2(_GLF_IDENTITY(float(_GLF_FUZZED(5.3)), float(vec2(float(_GLF_FUZZED(5.3)), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) - 0.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0)), (float(mat2(_GLF_IDENTITY(float(_GLF_FUZZED(5.3)), float(vec2(float(_GLF_FUZZED(5.3)), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) - 0.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0))) * 1.0)) - 0.0))))))), float(_GLF_IDENTITY(clamp(1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY((1.0), (true ? (1.0) : _GLF_FUZZED(-473.114))), _GLF_IDENTITY(mix(float(_GLF_IDENTITY((1.0), float(mat4(_GLF_IDENTITY((1.0), 1.0 * _GLF_IDENTITY(((1.0)), clamp(((1.0)), _GLF_IDENTITY(((1.0)), float(vec3(_GLF_IDENTITY(((1.0)), min(((1.0)), ((1.0)))), 0.0, 1.0))), ((1.0))))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(0.5)), float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), bool(true))), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(tan(0.0), clamp(tan(0.0), tan(0.0), _GLF_IDENTITY(tan(0.0), (false ? _GLF_FUZZED(float(-89452)) : _GLF_IDENTITY(tan(0.0), min(tan(0.0), _GLF_IDENTITY(tan(0.0), (false ? _GLF_FUZZED(-38.22) : tan(0.0))))))))), 1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-4.0) : 0.0)))))), _GLF_IDENTITY(float(_GLF_FUZZED(9.2)), (float(_GLF_FUZZED(_GLF_IDENTITY(9.2, _GLF_IDENTITY(float(mat4x2(9.2, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, exp(0.0), 0.0, 1.0, sqrt(1.0))), _GLF_IDENTITY(1.0 * (_GLF_IDENTITY(float(mat4x2(9.2, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, exp(0.0), 0.0, 1.0, sqrt(1.0))), min(float(mat4x2(9.2, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, exp(0.0), 0.0, 1.0, sqrt(1.0))), float(mat4x2(9.2, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, exp(0.0), 0.0, 1.0, sqrt(1.0)))))), (true ? 1.0 * (_GLF_IDENTITY(float(mat4x2(9.2, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, exp(0.0), 0.0, 1.0, sqrt(1.0))), min(float(mat4x2(9.2, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, exp(0.0), 0.0, 1.0, sqrt(1.0))), float(mat4x2(_GLF_IDENTITY(9.2, (9.2) - 0.0), round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, exp(0.0), 0.0, 1.0, sqrt(1.0)))))) : _GLF_FUZZED(986.553)))))))) * sqrt(1.0)), bool(false)), mix(float(_GLF_IDENTITY(mix(float(_GLF_IDENTITY(_GLF_IDENTITY((1.0), float(mat4(_GLF_IDENTITY(_GLF_IDENTITY((1.0), 1.0 * ((1.0))), 1.0 * ((1.0))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(0.5)), float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), bool(true))), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, tan(0.0), 1.0, 0.0))), mix(float(_GLF_FUZZED((- -25.88))), float(_GLF_IDENTITY((1.0), float(mat4(_GLF_IDENTITY((1.0), 1.0 * ((1.0))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(0.5)), float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), bool(true))), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, tan(0.0), 1.0, 0.0)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), float(_GLF_FUZZED(9.2)), bool(false)), _GLF_IDENTITY(float(float(mix(float(_GLF_IDENTITY(_GLF_IDENTITY((1.0), float(mat4(_GLF_IDENTITY(_GLF_IDENTITY((1.0), 1.0 * ((1.0))), 1.0 * ((1.0))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(0.5)), float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), bool(true))), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, tan(0.0), 1.0, 0.0))), mix(float(_GLF_FUZZED((- -25.88))), float(_GLF_IDENTITY((1.0), float(mat4(_GLF_IDENTITY((1.0), 1.0 * ((1.0))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(0.5)), float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), bool(true))), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, tan(0.0), 1.0, 0.0)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), float(_GLF_FUZZED(9.2)), bool(false)))), (float(float(mix(float(_GLF_IDENTITY(_GLF_IDENTITY((1.0), float(mat4(_GLF_IDENTITY(_GLF_IDENTITY((1.0), 1.0 * ((1.0))), 1.0 * ((1.0))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(0.5)), float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), bool(true))), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, tan(0.0), 1.0, 0.0))), mix(float(_GLF_FUZZED((- -25.88))), float(_GLF_IDENTITY((1.0), float(mat4(_GLF_IDENTITY((1.0), 1.0 * ((1.0))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(0.5)), float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), bool(true))), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, tan(0.0), 1.0, 0.0)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), float(_GLF_FUZZED(9.2)), bool(false))))) / 1.0))), float(_GLF_FUZZED(3118.5084)), _GLF_IDENTITY(bool(false), bool(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))))))) / 1.0)), min(clamp(1.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) / 1.0), (1.0) / _GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat4(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 0.0, abs(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 1.0))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))) * (_GLF_IDENTITY(1.0, float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), (_GLF_IDENTITY(1.0, max(1.0, 1.0))) + 0.0), 1.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 0.0, abs(0.0), _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), float(_GLF_FUZZED(-1.6)), bool(false))), 1.0, 0.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 1.0))))))), clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(3.4))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) / 1.0), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 1.0, 0.0, 0.0, 1.0))))) : _GLF_IDENTITY(_GLF_FUZZED(392.319), 1.0 * (_GLF_FUZZED(_GLF_IDENTITY(392.319, min(392.319, 392.319))))))), float(mat4x3(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 1.0, 0.0, 0.0, 1.0))))) : _GLF_IDENTITY(_GLF_FUZZED(392.319), 1.0 * (_GLF_FUZZED(_GLF_IDENTITY(392.319, min(392.319, 392.319))))))), 1.0, 1.0, 0.0, 1.0, log(1.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0)))) / 1.0), float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) / 1.0, clamp(_GLF_IDENTITY(_GLF_IDENTITY((1.0) / 1.0, _GLF_IDENTITY(float(mat2((1.0) / 1.0, 1.0, 0.0, _GLF_IDENTITY(tan(0.0), max(tan(0.0), tan(0.0))))), mix(_GLF_IDENTITY(float(_GLF_FUZZED(-9084.7085)), 1.0 * (float(_GLF_FUZZED(-9084.7085)))), float(float(mat2((1.0) / 1.0, 1.0, 0.0, tan(0.0)))), bool(true)))), float(mat2x4(_GLF_IDENTITY((1.0) / 1.0, _GLF_IDENTITY(float(mat2((1.0) / 1.0, 1.0, 0.0, tan(0.0))), mix(float(_GLF_FUZZED(-9084.7085)), float(float(mat2(_GLF_IDENTITY((1.0) / 1.0, mix(float(_GLF_IDENTITY((1.0) / 1.0, ((1.0) / 1.0) - 0.0)), float(_GLF_FUZZED(24.50)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0, 0.0, tan(0.0)))), bool(true)))), 0.0, 0.0, 0.0, 1.0, 0.0, round(length(normalize(sqrt(vec3(1.0, 1.0, 1.0))))), 0.0))), (1.0) / 1.0, (1.0) / 1.0))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-2.8, clamp(-2.8, -2.8, -2.8)), float(mat2x4(_GLF_IDENTITY(-2.8, clamp(-2.8, -2.8, -2.8)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 0.0)))) : _GLF_IDENTITY(1.0, (1.0) / 1.0), clamp(false ? _GLF_FUZZED(_GLF_IDENTITY(-2.8, clamp(-2.8, -2.8, -2.8))) : _GLF_IDENTITY(1.0, (1.0) / 1.0), false ? _GLF_FUZZED(_GLF_IDENTITY(-2.8, clamp(-2.8, -2.8, -2.8))) : _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) / 1.0)) / 1.0), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(-2.8, clamp(-2.8, -2.8, -2.8))) : _GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-36.76) : 1.0))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(-2.8, clamp(-2.8, -2.8, -2.8))) : _GLF_IDENTITY(1.0, (1.0) / 1.0)) - 0.0))))), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)))), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(-6.0), (true ? _GLF_FUZZED(-6.0) : _GLF_FUZZED(932.952)))), max(_GLF_IDENTITY(float(_GLF_FUZZED(-6.0)), mix(float(float(_GLF_FUZZED(-6.0))), float(_GLF_FUZZED(-0.5)), bool(false))), float(_GLF_FUZZED(-6.0)))), bool(false))))))), bool(true))))), ivec4(1), mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0)))), mix(float(1.0), float(_GLF_FUZZED(8043.8860)), _GLF_IDENTITY(bool(false), ! (! (bool(false)))))), (true ? 1.0 : _GLF_FUZZED(-9.8))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0)))), mix(float(1.0), float(_GLF_FUZZED(_GLF_IDENTITY(8043.8860, (8043.8860) - 0.0))), bool(false))), (true ? 1.0 : _GLF_FUZZED(-9.8))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0)))), mix(float(1.0), float(_GLF_FUZZED(_GLF_IDENTITY(8043.8860, 0.0 + (8043.8860)))), _GLF_IDENTITY(bool(false), true && _GLF_IDENTITY((bool(false)), ! (! (_GLF_IDENTITY((bool(false)), ((bool(false))) && true))))))), (true ? 1.0 : _GLF_FUZZED(-9.8))), 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0))), clamp(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0))), _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0))), _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0))))))), _GLF_IDENTITY(mix(float(1.0), float(_GLF_FUZZED(8043.8860)), bool(false)), float(mat2x4(mix(float(1.0), float(_GLF_FUZZED(8043.8860)), bool(false)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0)))), (true ? 1.0 : _GLF_FUZZED(-9.8))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0)), mix(float(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0))), float(_GLF_FUZZED(-66.94)), bool(false))))), mix(_GLF_IDENTITY(float(1.0), min(float(1.0), float(1.0))), float(_GLF_FUZZED(_GLF_IDENTITY(8043.8860, min(_GLF_IDENTITY(8043.8860, float(mat2x3(8043.8860, 1.0, 0.0, 1.0, exp(0.0), 0.0))), 8043.8860)))), bool(false))), (true ? 1.0 : _GLF_FUZZED(-9.8))))), _GLF_IDENTITY(mix(_GLF_IDENTITY(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-9.8)))), (float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-9.8))))) - 0.0), float(_GLF_FUZZED(34.50)), bool(_GLF_IDENTITY(false, (false) && true))), (false ? _GLF_FUZZED(9815.3677) : _GLF_IDENTITY(mix(_GLF_IDENTITY(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-9.8)))), (float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-9.8))))) - 0.0), float(_GLF_FUZZED(34.50)), bool(_GLF_IDENTITY(false, (false) && true))), clamp(mix(_GLF_IDENTITY(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-9.8)))), (float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-9.8))))) - 0.0), float(_GLF_FUZZED(34.50)), bool(_GLF_IDENTITY(false, (false) && true))), mix(_GLF_IDENTITY(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-9.8)))), (float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-9.8))))) - 0.0), float(_GLF_FUZZED(34.50)), bool(_GLF_IDENTITY(false, (false) && true))), _GLF_IDENTITY(mix(_GLF_IDENTITY(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-9.8)))), (float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-9.8))))) - 0.0), float(_GLF_FUZZED(34.50)), bool(_GLF_IDENTITY(false, (false) && true))), (false ? _GLF_FUZZED(2.6) : mix(_GLF_IDENTITY(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-9.8)))), (float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-9.8))))) - 0.0), float(_GLF_FUZZED(34.50)), bool(_GLF_IDENTITY(false, (false) && true))))))))))), bvec2(_GLF_IDENTITY(true, (true) || false)), mat4x2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(0.0 + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1.0, (1.0) - sin(0.0))), clamp((_GLF_IDENTITY(1.0, (1.0) - sin(_GLF_IDENTITY(0.0, _GLF_ONE(1.0, injectionSwitch.y) * (_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(float(0.0), float(mat4x2(float(0.0), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))))), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(2.6)), float(0.0), bool(true)))))))))), (_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), ((1.0)) - _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, 1.0)))), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)))))) - sin(0.0))), (_GLF_IDENTITY(1.0, (1.0) - sin(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1.0, (1.0) - sin(0.0))), clamp((_GLF_IDENTITY(1.0, (1.0) - sin(_GLF_IDENTITY(0.0, _GLF_ONE(1.0, injectionSwitch.y) * (_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(float(0.0), float(mat4x2(float(0.0), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))))), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(2.6)), float(0.0), bool(true)))))))))), (_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), ((1.0)) - _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, 1.0)))), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)))))) - sin(0.0))), (_GLF_IDENTITY(1.0, (1.0) - sin(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))))), mix(float(_GLF_IDENTITY((_GLF_IDENTITY(1.0, (1.0) - sin(0.0))), clamp((_GLF_IDENTITY(1.0, (1.0) - sin(_GLF_IDENTITY(0.0, _GLF_ONE(1.0, injectionSwitch.y) * (_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(float(0.0), float(mat4x2(float(0.0), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))))), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(2.6)), float(0.0), bool(true)))))))))), (_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), ((1.0)) - _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, 1.0)))), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)))))) - sin(0.0))), (_GLF_IDENTITY(1.0, (1.0) - sin(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))))))), float(_GLF_FUZZED(53.41)), bool(false))), _GLF_IDENTITY((_GLF_IDENTITY(1.0, (1.0) - sin(0.0))), clamp((_GLF_IDENTITY(1.0, (1.0) - sin(_GLF_IDENTITY(0.0, _GLF_ONE(1.0, injectionSwitch.y) * (_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(float(0.0), float(mat4x2(float(0.0), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))))), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(2.6)), float(0.0), bool(true)))))))))), (_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), ((1.0)) - _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, 1.0)))), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)))))) - sin(0.0))), (_GLF_IDENTITY(1.0, (1.0) - sin(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))))), _GLF_IDENTITY((_GLF_IDENTITY(1.0, (1.0) - sin(0.0))), clamp((_GLF_IDENTITY(1.0, (1.0) - sin(_GLF_IDENTITY(0.0, _GLF_ONE(1.0, injectionSwitch.y) * (_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(float(0.0), float(mat4x2(float(0.0), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))))), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(2.6)), float(0.0), bool(true)))))))))), (_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), ((1.0)) - _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, 1.0)))), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)))))) - sin(0.0))), (_GLF_IDENTITY(1.0, (1.0) - sin(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1.0, (1.0) - sin(0.0))), (false ? _GLF_FUZZED(-1639.1909) : (_GLF_IDENTITY(1.0, (1.0) - sin(0.0))))), clamp((_GLF_IDENTITY(1.0, (1.0) - sin(_GLF_IDENTITY(0.0, _GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-378.596)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), injectionSwitch.y) * (_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(float(0.0), float(mat4x2(float(_GLF_IDENTITY(0.0, min(0.0, 0.0))), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))))), _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(2.6), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))) ? _GLF_FUZZED(2.3) : _GLF_FUZZED(2.6)))), float(0.0), bool(true)))))))))), (_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), ((1.0)) - _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-23.27))), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 1.0, 1.0)))), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))))), mix(float(_GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-23.27))), determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 1.0, 1.0)))), dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)))))), float(_GLF_FUZZED(612.462)), bool(false)))) - sin(0.0))), (_GLF_IDENTITY(1.0, (1.0) - sin(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))))))) * 1.0), (false ? _GLF_FUZZED(exp(-65.09)) : 0.0 + (_GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1.0), max((1.0), (1.0))) - sin(0.0), _GLF_IDENTITY(((1.0) - sin(0.0)), _GLF_IDENTITY(float(mat4x3(((1.0) - sin(0.0)), _GLF_IDENTITY(dot(vec2(1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0))), vec2(0.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0))), vec2(0.0, 0.0)), (dot(vec2(1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0))), vec2(0.0, 0.0))) / 1.0)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, sqrt(0.0), 1.0, 0.0)), (false ? _GLF_FUZZED(-14.06) : float(mat4x3(((1.0) - sin(0.0)), _GLF_IDENTITY(dot(vec2(1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0))), vec2(0.0, 0.0)), dot(vec2(1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0))), vec2(0.0, 0.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, sqrt(0.0), 1.0, 0.0))))) / 1.0), float(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY((1.0), max((1.0), (1.0))) - sin(0.0), ((_GLF_IDENTITY(1.0, (1.0) - 0.0)) - sin(0.0)) / 1.0), 0.0, tan(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), (false ? _GLF_FUZZED(661.669) : _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), clamp(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), clamp(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)))), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)))))), dot(_GLF_IDENTITY(vec4(0.0, 0.0, 1.0, 1.0), mix(vec4((_GLF_IDENTITY(vec4(0.0, 0.0, 1.0, 1.0), vec4(_GLF_IDENTITY(mat3x2(vec4(0.0, 0.0, 1.0, 1.0), 1.0, 1.0), (mat3x2(vec4(0.0, 0.0, 1.0, 1.0), 1.0, 1.0)) * mat3(1.0)))))[0], _GLF_FUZZED(-4.5), (vec4(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0, 1.0, 1.0))[2], _GLF_FUZZED(-3553.8669)), vec4(_GLF_FUZZED(39.00), (vec4(0.0, 0.0, 1.0, 1.0))[1], _GLF_FUZZED(-6.3), (vec4(0.0, 0.0, 1.0, 1.0))[3]), bvec4(false, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), vec4(1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(0.0, 0.0))) * cos(0.0)))))), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-9233.0977))), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, determinant(mat4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, 1.0 * (0.0))), float(_GLF_FUZZED(15.50)), bool(false))), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-52.15))), 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), 0.0, 1.0), _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 1.0), vec4(mat2(vec4(0.0, 0.0, 0.0, 1.0))))), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec4(0.0, determinant(mat4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, float(vec4(0.0, 0.0, 1.0, 0.0))))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), float(_GLF_FUZZED(6.4)), bool(false)))), clamp(vec4(0.0, determinant(mat4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, float(vec4(0.0, 0.0, 1.0, 0.0))))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 0.0)), 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), float(_GLF_FUZZED(6.4)), bool(false)))), _GLF_IDENTITY(vec4(0.0, determinant(mat4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-340.600))), _GLF_IDENTITY(0.0, float(vec4(0.0, 0.0, 1.0, 0.0))))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), float(_GLF_FUZZED(6.4)), bool(false)))), (true ? _GLF_IDENTITY(vec4(0.0, _GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, float(vec4(0.0, 0.0, 1.0, 0.0))))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), (determinant(mat4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, float(vec4(0.0, 0.0, 1.0, 0.0))))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0))) / 1.0), 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), float(_GLF_FUZZED(6.4)), bool(false)))), min(vec4(0.0, _GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, float(vec4(0.0, 0.0, 1.0, 0.0))))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), (false ? _GLF_FUZZED(6.6) : determinant(mat4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(vec4(0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0))), 0.0)), (_GLF_IDENTITY(float(vec4(0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0))), 0.0)), (true ? float(vec4(0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0))), 0.0)) : _GLF_FUZZED(-12.19)))) * determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))))), 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-121.096))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(vec4(1.0, 0.0, 0.0, 0.0))), 1.0)), 1.0)), 1.0, 1.0, 0.0)))), 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(1.0, max(1.0, 1.0)))) : _GLF_FUZZED(-8.1)))))), float(_GLF_FUZZED(6.4)), bool(false)))), vec4(0.0, determinant(mat4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, float(vec4(0.0, 0.0, 1.0, 0.0))))), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(27.73)), float(0.0), bool(true))), 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(-398.890))), 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), float(_GLF_FUZZED(6.4)), bool(false)))))) : _GLF_FUZZED(vec4(356.128, 8228.2600, 2.6, 9.5)))), vec4(0.0, determinant(mat4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, float(vec4(0.0, 0.0, 1.0, 0.0))))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), _GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), float(_GLF_FUZZED(6.4)), bool(false)))))), vec4(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), 0.0, 1.0)), mix(float(dot(vec4(0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), 0.0, 1.0), vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, exp(0.0), 1.0, 0.0, 1.0)))))), float(_GLF_FUZZED(-4.4)), bool(false)))))))))))))), gl_SubgroupSize, mat4x3(1.0), mat2(1.0), mat2x3(1.0), _GLF_struct_1(mat3(1.0), mat4x3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat2x4(1.0, abs(0.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0))), clamp(1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))))) + 0.0)), vec4(1.0), mat3x4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x4(1.0, 1.0, round(length(normalize(1.0))), 1.0, 0.0, _GLF_IDENTITY(abs(0.0), max(abs(0.0), abs(0.0))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), min(float(mat3x4(1.0, 1.0, round(length(normalize(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-6.7)), float(1.0), bool(true))), _GLF_IDENTITY(float(mat4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-6.7)), float(1.0), bool(true))), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), 1.0, 0.0, 0.0, 1.0, abs(0.0), _GLF_IDENTITY(dot(vec2(sqrt(1.0), length(vec2(0.0, 0.0))), vec2(sqrt(0.0), 1.0)), _GLF_IDENTITY(dot(vec2(sqrt(1.0), length(vec2(0.0, 0.0))), vec2(sqrt(0.0), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-39.34) : 1.0)))), min(dot(vec2(_GLF_IDENTITY(sqrt(1.0), float(mat3x2(sqrt(1.0), 0.0, 1.0, sin(0.0), 1.0, 1.0))), length(vec2(0.0, 0.0))), vec2(sqrt(0.0), 1.0)), dot(vec2(sqrt(1.0), length(vec2(0.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, (0.0) / 1.0)))))), vec2(sqrt(0.0), 1.0))))))), (float(mat4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-6.7)), float(1.0), bool(true))), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0)), 1.0, abs(0.0), _GLF_IDENTITY(dot(vec2(sqrt(1.0), length(vec2(0.0, 0.0))), vec2(sqrt(0.0), 1.0)), _GLF_IDENTITY(dot(vec2(sqrt(1.0), length(vec2(0.0, 0.0))), _GLF_IDENTITY(vec2(sqrt(0.0), 1.0), mix(vec2(_GLF_FUZZED(254.328), (vec2(sqrt(0.0), 1.0))[1]), vec2((vec2(sqrt(0.0), 1.0))[0], _GLF_FUZZED(-55.13)), bvec2(true, false)))), min(dot(vec2(sqrt(1.0), length(vec2(_GLF_IDENTITY(0.0, (0.0) - tan(0.0)), 0.0))), vec2(sqrt(0.0), 1.0)), dot(vec2(sqrt(1.0), length(vec2(0.0, 0.0))), vec2(sqrt(0.0), 1.0)))))))) / 1.0))))), 1.0, 0.0, abs(0.0), 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(float(mat3x4(1.0, 1.0, round(length(normalize(1.0))), 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), abs(_GLF_IDENTITY(0.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), 1.0, abs(1.0), 0.0, 1.0))) * (0.0))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(6.7)), float(float(mat3x4(1.0, _GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, float(mat2(1.0, 1.0, 0.0, 1.0))))), round(length(normalize(1.0))), 1.0, 0.0, abs(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), (true && (true)) || false)))))))))), vec2(1.0));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))) || (bool(bool(_GLF_WRAPPED_IF_FALSE(false)))))))
    {
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     barrier();
    }
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-332.256)), bool(false))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-30.80)), bool(false))))) < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, min(1, 1))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, (true) && true))), bool(_GLF_IDENTITY(bvec3(bool(bool(_GLF_IDENTITY(true, (true) && true))), false, false), bvec3(bvec3(bvec3(bool(bool(_GLF_IDENTITY(true, (true) && true))), false, false)))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u | (gl_NumWorkGroups.x))), max((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)).x), _GLF_IDENTITY((gl_NumWorkGroups.x), ((gl_NumWorkGroups.x)) ^ 0u))), min(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u | (gl_NumWorkGroups.x))), max((gl_NumWorkGroups.x), _GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups.x), ((gl_NumWorkGroups.x)) ^ 0u), min(_GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups.x), ((gl_NumWorkGroups.x)) ^ 0u), clamp(_GLF_IDENTITY((gl_NumWorkGroups.x), ((gl_NumWorkGroups.x)) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups.x), ((gl_NumWorkGroups.x)) ^ 0u), (_GLF_IDENTITY((gl_NumWorkGroups.x), ((gl_NumWorkGroups.x)) ^ 0u)) * 1u), _GLF_IDENTITY((gl_NumWorkGroups.x), ((gl_NumWorkGroups.x)) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups.x), ((gl_NumWorkGroups.x)) ^ 0u), 0u | (_GLF_IDENTITY((gl_NumWorkGroups.x), ((gl_NumWorkGroups.x)) ^ 0u))))))), _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u | (gl_NumWorkGroups.x))), max(_GLF_IDENTITY((gl_NumWorkGroups.x), 0u | (_GLF_IDENTITY((gl_NumWorkGroups.x), 0u ^ (_GLF_IDENTITY((gl_NumWorkGroups.x), clamp((gl_NumWorkGroups.x), (gl_NumWorkGroups.x), (gl_NumWorkGroups.x))))))), _GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups.x), ((gl_NumWorkGroups.x)) ^ 0u), (_GLF_IDENTITY((gl_NumWorkGroups.x), ((gl_NumWorkGroups.x)) ^ 0u)) | (_GLF_IDENTITY((gl_NumWorkGroups.x), ((gl_NumWorkGroups.x)) ^ 0u))))))) * 1u);
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bool(! (false))), ! (! (bool(bool(! (false)))))))))))
      barrier();
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, (workgroup_id) << (0u << _GLF_IDENTITY(uint(5u), uint(5u))))) + 0u);
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (_GLF_IDENTITY(! (bool(bool(false))), (! (bool(bool(false)))) || false)))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + tan(0.0))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), min(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), clamp(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4)))), _GLF_IDENTITY(int(4), int(4))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && true))
  {
   do
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), round(length(normalize(1.0))), 1.0))).x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
          barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, true))))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y)))))))))
    barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_2.subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], _GLF_IDENTITY(float(vec2(injectionSwitch[_GLF_IDENTITY(1, max(1, 1))], 0.0)), max(_GLF_IDENTITY(float(vec2(injectionSwitch[1], 0.0)), max(float(vec2(injectionSwitch[1], 0.0)), float(vec2(injectionSwitch[1], 0.0)))), float(vec2(injectionSwitch[1], 0.0))))))).y))))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_id * _GLF_struct_replacement_2.subgroup_size + ((subgroup_local_id + 1) % _GLF_struct_replacement_2.subgroup_size), (_GLF_IDENTITY(true, (true) || false) ? _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_id * _GLF_struct_replacement_2.subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), 0u | (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) << 0), 1, 1)))) | ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))))) % _GLF_struct_replacement_2.subgroup_size), uint(uvec3((_GLF_IDENTITY((subgroup_local_id + 1), 0u | (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) << 0), 1, 1)))) | ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))))) % _GLF_struct_replacement_2.subgroup_size), 0u, 1u))), (((subgroup_local_id + 1) % _GLF_struct_replacement_2.subgroup_size)) ^ 0u) : _GLF_FUZZED(workgroup_size)));
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
        barrier();
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec4(int(4), 1, 0, 0))))), ((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec4(int(4), 1, 0, 0)))))) * 1)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)) && true, ! (! (_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)) && true, true && ((_GLF_WRAPPED_IF_FALSE(false)) && true)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 0)); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), vec2(0.0, 0.0) + (vec2(injectionSwitch[0], injectionSwitch[1])))).x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-3.1))), injectionSwitch.y))))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), bool(bvec3(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), false, false)))))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3.7), _GLF_FUZZED(66.87)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
         do
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-149.778)), bool(false)), (false ? _GLF_FUZZED(-55.28) : mix(float(injectionSwitch.x), float(_GLF_FUZZED(-149.778)), _GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), (bool(false)) || false)))))))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
              {
               for(int _injected_loop_counter = (0 ^ _GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), int(ivec4(int(0), 0, 1, 0)))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, false || (_injected_loop_counter != 1))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))) - vec2(0.0, 0.0)).y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y, injectionSwitch.y)), injectionSwitch.y))), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y, injectionSwitch.y)), injectionSwitch.y))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec3(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y)), injectionSwitch.y)))), false, false)))))) || false))))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (false))))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), clamp(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y)))), false || (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x)) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), clamp(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y))))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   else
    {
    }
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, 0 | (64)), 4);
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, 1.0)))) / abs(vec2(1.0, 1.0))).y))));
     barrier();
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) && true)))))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0))) * vec2(1.0, 1.0)).y))), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), bool(bvec4((! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), true, false, true))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true)))) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false)))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y)), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(atan(9048.9404)))) > injectionSwitch.y), true, true, false)), true && (bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    barrier();
  }
 if(_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + 1 < _GLF_struct_replacement_2.subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size), ! (_GLF_IDENTITY(! ((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size)), true && (! ((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size)))))), false || _GLF_IDENTITY(((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size)), ! (! (((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size)))))) || false)), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + 1 < _GLF_struct_replacement_2.subgroup_size), false || _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size, ! (! (subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size))))), ! (! (((_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size, ! (! (subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size))))))))) || false)))), ! (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_size, clamp(_GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_size, clamp(_GLF_struct_replacement_2.subgroup_size, _GLF_struct_replacement_2.subgroup_size, _GLF_struct_replacement_2.subgroup_size)), _GLF_struct_replacement_2.subgroup_size, _GLF_struct_replacement_2.subgroup_size)), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(virtual_gid) : subgroup_local_id + 1)) < _GLF_struct_replacement_2.subgroup_size), false || ((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size))) || false)), true && ((_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size), false || ((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size), false || ((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size), false || ((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size)))), bool(bool(! (_GLF_IDENTITY((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size), false || ((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size)))))))))))) || false)))))), (bool(bool((_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1 < _GLF_struct_replacement_2.subgroup_size), false || ((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size))), bool(bool(_GLF_IDENTITY((subgroup_local_id + 1 < _GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_size, 0u ^ (_GLF_struct_replacement_2.subgroup_size))), false || ((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size)))))) || false))))) && true))))) && true)), false || (bool(_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_size, (_GLF_IDENTITY(true, false || (true)) ? _GLF_struct_replacement_2.subgroup_size : _GLF_FUZZED(read))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, min(_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec3(subgroup_local_id + 1, 1u, 1u))), subgroup_local_id + 1)) < _GLF_struct_replacement_2.subgroup_size), _GLF_IDENTITY(false || _GLF_IDENTITY(((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size)), false || (((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size)))), ! (! (false || _GLF_IDENTITY(((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size)), false || (((subgroup_local_id + _GLF_IDENTITY(1, int(ivec3(1, 0, 1))) < _GLF_struct_replacement_2.subgroup_size)))))))) || false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_size, (_GLF_IDENTITY(true, false || (true)) ? _GLF_struct_replacement_2.subgroup_size : _GLF_FUZZED(read))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, min(_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec3(subgroup_local_id + 1, 1u, 1u))), subgroup_local_id + 1)) < _GLF_struct_replacement_2.subgroup_size), _GLF_IDENTITY(false || _GLF_IDENTITY(((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size)), false || (((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size)))), ! (! (false || _GLF_IDENTITY(((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size)), false || (((subgroup_local_id + _GLF_IDENTITY(1, int(ivec3(1, 0, 1))) < _GLF_struct_replacement_2.subgroup_size)))))))) || false)))), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1 < _GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_size, max(_GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_size, clamp(_GLF_struct_replacement_2.subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_size, uint(uvec3(_GLF_struct_replacement_2.subgroup_size, 1u, 0u))), _GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_size, (_GLF_struct_replacement_2.subgroup_size) | 0u))), _GLF_struct_replacement_2.subgroup_size))), _GLF_IDENTITY(false, true && (false)) || ((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size))) || false)))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size), false || ((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size))) || false))), (_GLF_IDENTITY(bool((_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size), false || ((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size))) || false))), ! (! (bool((_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size), false || ((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size))) || false))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bool((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1))) < _GLF_struct_replacement_2.subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size), false || ((subgroup_local_id + _GLF_IDENTITY(1, (1) + 0) < _GLF_struct_replacement_2.subgroup_size))) || false))))) && true)), true && ((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size), false || ((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size))) || false))), (_GLF_IDENTITY(bool((_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size), false || ((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size))) || false))), ! (! (bool((_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size), false || ((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size))) || false))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bool((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1))) < _GLF_struct_replacement_2.subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size), false || ((subgroup_local_id + _GLF_IDENTITY(1, (1) + 0) < _GLF_struct_replacement_2.subgroup_size))) || false))))) && true))))))) && true)))), bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + 1 < _GLF_struct_replacement_2.subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size), ! (_GLF_IDENTITY(! ((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size)), true && (! ((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size)))))), false || _GLF_IDENTITY(((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size)), ! (! (((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size)))))) || false)), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + 1 < _GLF_struct_replacement_2.subgroup_size), false || _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size, ! (! (subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size))))), ! (! (((_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size, ! (! (subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size))))))))) || false)))), ! (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_size, clamp(_GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_size, clamp(_GLF_struct_replacement_2.subgroup_size, _GLF_struct_replacement_2.subgroup_size, _GLF_struct_replacement_2.subgroup_size)), _GLF_struct_replacement_2.subgroup_size, _GLF_struct_replacement_2.subgroup_size)), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(virtual_gid) : subgroup_local_id + 1)) < _GLF_struct_replacement_2.subgroup_size), false || ((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size))) || false)), true && ((_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size), false || ((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size), false || ((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size), false || ((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size)))), bool(bool(! (_GLF_IDENTITY((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size), false || ((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size)))))))))))) || false)))))), (bool(bool((_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1 < _GLF_struct_replacement_2.subgroup_size), false || ((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size))), bool(bool(_GLF_IDENTITY((subgroup_local_id + 1 < _GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_size, 0u ^ (_GLF_struct_replacement_2.subgroup_size))), false || ((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size)))))) || false))))) && true))))) && true)), false || (bool(_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_size, (_GLF_IDENTITY(true, false || (true)) ? _GLF_struct_replacement_2.subgroup_size : _GLF_FUZZED(read))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, min(_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec3(subgroup_local_id + 1, 1u, 1u))), subgroup_local_id + 1)) < _GLF_struct_replacement_2.subgroup_size), _GLF_IDENTITY(false || _GLF_IDENTITY(((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size)), false || (((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size)))), ! (! (false || _GLF_IDENTITY(((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size)), false || (((subgroup_local_id + _GLF_IDENTITY(1, int(ivec3(1, 0, 1))) < _GLF_struct_replacement_2.subgroup_size)))))))) || false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_size, (_GLF_IDENTITY(true, false || (true)) ? _GLF_struct_replacement_2.subgroup_size : _GLF_FUZZED(read))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, min(_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec3(subgroup_local_id + 1, 1u, 1u))), subgroup_local_id + 1)) < _GLF_struct_replacement_2.subgroup_size), _GLF_IDENTITY(false || _GLF_IDENTITY(((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size)), false || (((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size)))), ! (! (false || _GLF_IDENTITY(((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size)), false || (((subgroup_local_id + _GLF_IDENTITY(1, int(ivec3(1, 0, 1))) < _GLF_struct_replacement_2.subgroup_size)))))))) || false)))), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1 < _GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_size, max(_GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_size, clamp(_GLF_struct_replacement_2.subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_size, uint(uvec3(_GLF_struct_replacement_2.subgroup_size, 1u, 0u))), _GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_size, (_GLF_struct_replacement_2.subgroup_size) | 0u))), _GLF_struct_replacement_2.subgroup_size))), _GLF_IDENTITY(false, true && (false)) || ((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size))) || false)))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size), false || ((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size))) || false))), (_GLF_IDENTITY(bool((_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size), false || ((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size))) || false))), ! (! (bool((_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size), false || ((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size))) || false))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bool((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1))) < _GLF_struct_replacement_2.subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size), false || ((subgroup_local_id + _GLF_IDENTITY(1, (1) + 0) < _GLF_struct_replacement_2.subgroup_size))) || false))))) && true)), true && ((_GLF_IDENTITY(bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size), false || ((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size))) || false))), (_GLF_IDENTITY(bool((_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size), false || ((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size))) || false))), ! (! (bool((_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size), false || ((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size))) || false))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bool((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1))) < _GLF_struct_replacement_2.subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size), false || ((subgroup_local_id + _GLF_IDENTITY(1, (1) + 0) < _GLF_struct_replacement_2.subgroup_size))) || false))))) && true))))))) && true)))))))), _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (subgroup_local_id), clamp(~ (subgroup_local_id), ~ (subgroup_local_id), ~ (subgroup_local_id))))), min(_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (subgroup_local_id), clamp(~ (subgroup_local_id), ~ (subgroup_local_id), ~ (subgroup_local_id))))), _GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (subgroup_local_id), clamp(~ (subgroup_local_id), ~ (subgroup_local_id), ~ (subgroup_local_id))))))) + 1) | (subgroup_local_id + 1)) < _GLF_struct_replacement_2.subgroup_size, (_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size) || false, false || ((subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size) || false)))) && true)))) || false, bool(bvec4((bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)) < _GLF_struct_replacement_2.subgroup_size, (_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size, (subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size) || false)) && true), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 0u))) + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)) < _GLF_struct_replacement_2.subgroup_size, (_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_struct_replacement_2.subgroup_size, (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1)) < _GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_size, ~ (~ (_GLF_struct_replacement_2.subgroup_size)))) || false)) && true)) && true)))) || false, false, false, true))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), false || (! (false))), _GLF_IDENTITY((_GLF_IDENTITY(! (false), false || (! (false)))) || _GLF_IDENTITY(false, true && (false)), false || ((_GLF_IDENTITY(! (false), _GLF_IDENTITY(false || (! (false)), (false || (! (false))) || false))) || false)))))))))
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   int i = 0;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))))), (injectionSwitch.x > injectionSwitch.y)))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true && (false), ! (! (true && (false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))) && (false), ! (! (true && (false))))))))))) && true) || _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), true && ((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, determinant(mat3(1.0, length(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), (false ? _GLF_FUZZED(vec4(-9.7, -9.3, 3766.7281, -4.2)) : _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), mat4(1.0) * (vec4(0.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0)))))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0))).x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (((1 ^ 0) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), bool(bool(bool(bool(true))))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               atomicStore(checker[_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))], _GLF_IDENTITY(read, max(read, read)), 4, 64, 4);
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                }
              }
            }
           for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 ^ (_GLF_IDENTITY(int(5), (int(5)) ^ 0))), int(5))), ~ (~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(ivec3(_GLF_IDENTITY(int(5), 1 * (int(5))), 1, 0))), int(5))), ((1 << _GLF_IDENTITY(int(5), int(5)))) | (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))), min((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), 1 * (_GLF_IDENTITY(int(5), int(5))))), (1 << _GLF_IDENTITY(int(5), int(5)))))))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(ivec2(int(5), 1), (ivec2(int(5), 1)) | (ivec2(int(5), 1))))), max(int(5), int(5)))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (5))) / 1)), _GLF_IDENTITY(int(5), max(int(5), int(5)))), int(ivec4(_GLF_IDENTITY((_GLF_IDENTITY(1, 1 * (1)) << _GLF_IDENTITY(int(5), int(5))), int(_GLF_IDENTITY(ivec3((_GLF_IDENTITY(1, 1 * (1)) << _GLF_IDENTITY(int(5), int(5))), 0, 1), (ivec3((_GLF_IDENTITY(1, 1 * (1)) << _GLF_IDENTITY(int(5), int(5))), 0, 1)) ^ ivec3(0, 0, 0)))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(_GLF_IDENTITY(5, (5) + 0))))), 1, 0, 1)))) * 1), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) >> 0)) * 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(int(5), (int(5)) ^ 0)), ~ (_GLF_IDENTITY(~ (0 ^ (_GLF_IDENTITY(int(5), (int(5)) ^ 0))), min(~ (0 ^ (_GLF_IDENTITY(int(5), (int(5)) ^ 0))), ~ (0 ^ (_GLF_IDENTITY(int(5), (int(5)) ^ 0)))))))), int(5))), ~ (~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(ivec3(_GLF_IDENTITY(int(5), 1 * (int(5))), 1, 0))), int(5))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), int(5)))) | (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))), min((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), 1 * (_GLF_IDENTITY(int(5), int(5))))), (1 << _GLF_IDENTITY(int(5), int(5)))))), 0 + (((1 << _GLF_IDENTITY(int(5), int(5)))) | (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) * 1))), min((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), 1 * (_GLF_IDENTITY(int(5), int(5))))), (1 << _GLF_IDENTITY(int(5), int(5)))))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(ivec2(int(5), 1), (ivec2(int(5), 1)) | (ivec2(int(5), 1))))), max(int(5), int(5)))), (false ? _GLF_FUZZED(i) : _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(_GLF_IDENTITY(ivec2(int(5), 1), (ivec2(int(5), 1)) | (ivec2(int(5), 1))))), max(_GLF_IDENTITY(int(5), (int(5)) ^ 0), int(5)))))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (5))) / 1), 0 + (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (5))) / 1)))), _GLF_IDENTITY(int(5), max(int(5), int(5)))), int(ivec4(_GLF_IDENTITY((_GLF_IDENTITY(1, 1 * (1)) << _GLF_IDENTITY(int(5), int(5))), int(_GLF_IDENTITY(ivec3((_GLF_IDENTITY(1, 1 * (1)) << _GLF_IDENTITY(int(5), int(5))), 0, 1), (ivec3((_GLF_IDENTITY(1, _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-98937) : 1))) | (1)))) * (1)) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (true ? _GLF_IDENTITY(int(5), int(5)) : _GLF_FUZZED(i)))), 0, 1)) ^ ivec3(0, 0, 0)))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(_GLF_IDENTITY(5, (5) + 0))))), 1, 0, 1)))) * 1))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 | (int(4))), int(4))), true && (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 | (int(4))), int(4)))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(! _GLF_IDENTITY((! _GLF_IDENTITY(_GLF_IDENTITY(((! (false))), ! (_GLF_IDENTITY(! (((! (false)))), ! (_GLF_IDENTITY(! (! (((! (false))))), false || (! (! (((! (false))))))))))), ! (_GLF_IDENTITY(! (((! (false)))), bool(bvec2(! (((! (false)))), false)))))), ((! _GLF_IDENTITY(((! (false))), ! (_GLF_IDENTITY(! (((! (false)))), bool(bvec2(! (((! (false)))), false))))))) && true), false || (! _GLF_IDENTITY((! _GLF_IDENTITY(_GLF_IDENTITY(((! (false))), ! (_GLF_IDENTITY(! (((! (false)))), ! (_GLF_IDENTITY(! (! (((! (false))))), false || (! (! (((! (false))))))))))), ! (_GLF_IDENTITY(! (((_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))))), bool(bvec2(! _GLF_IDENTITY((((! (false)))), ! (! ((((! (false))))))), false)))))), ((! _GLF_IDENTITY(((! (false))), ! (_GLF_IDENTITY(! (((! (false)))), bool(bvec2(! (((! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))) && true))))), false))))))) && true)))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 0.0))) > injectionSwitch.y)))))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) && true)))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
              barrier();
             barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) * 1), 1, _GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (1)), int(ivec4(_GLF_IDENTITY(1, ~ (~ (1))), 1, 0, 1)))))], _GLF_IDENTITY(injectionSwitch[1], max(_GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(-1.0)), float(injectionSwitch[1]), bool(true))), injectionSwitch[1])))))).x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], _GLF_IDENTITY(min(injectionSwitch[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) * 1), 1, _GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, ~ (~ (1))), 1, 0, 1)))))], _GLF_IDENTITY(injectionSwitch[1], max(_GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(-1.0)), float(injectionSwitch[1]), bool(true))), injectionSwitch[1]))), min(min(injectionSwitch[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) * 1), 1, _GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, ~ (~ (1))), 1, 0, 1)))))], _GLF_IDENTITY(injectionSwitch[1], max(_GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(-1.0)), float(injectionSwitch[1]), bool(true))), injectionSwitch[1]))), _GLF_IDENTITY(min(injectionSwitch[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) * 1), 1, _GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, ~ (~ (1))), 1, 0, 1)))))], _GLF_IDENTITY(injectionSwitch[1], max(_GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(-1.0)), float(injectionSwitch[1]), bool(true))), injectionSwitch[1]))), mix(float(min(injectionSwitch[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) * 1), 1, _GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, ~ (~ (1))), 1, 0, 1)))))], _GLF_IDENTITY(injectionSwitch[1], max(_GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(-1.0)), float(injectionSwitch[1]), bool(true))), injectionSwitch[1])))), float(_GLF_FUZZED(3.5)), bool(false)))))))).x, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY((1), ~ (~ ((1)))) * 1), 1, _GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, ~ (~ (1))), 1, 0, 1)))))], _GLF_IDENTITY(injectionSwitch[1], max(_GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(-1.0)), float(injectionSwitch[1]), bool(true))), injectionSwitch[1])))))).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))[1], min(injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) * 1), 1, _GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, ~ (~ (1))), 1, 0, 1))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) * 1), 1, _GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, ~ (~ (1))), 1, 0, 1))))), 0 ^ (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) * 1), 1, _GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, ~ (~ (1))), 1, 0, 1)))))))) - 0)], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch)))[1], max(_GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(-1.0)), float(injectionSwitch[1]), bool(true))), injectionSwitch[1])))))).x)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) * 1), 1, _GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, ~ (~ (1))), 1, 0, 1)))))], _GLF_IDENTITY(injectionSwitch[1], max(_GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(-1.0)), float(injectionSwitch[1]), bool(true))), injectionSwitch[_GLF_IDENTITY(1, ~ (~ (1)))])))))).x)) < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), false || (false)), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bvec2(bool(injectionSwitch.x > injectionSwitch.y), false)))))))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, false, false))) || false), true && (_GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, false, false))) || false)))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, false, false))) || false), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, true && (true)), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, true && (true)), true), false, true))))) && (_GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, false, false))) || false)))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, false, false))) || false), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, true && (true)), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, true && (true)), true), false, true))))) && (_GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, false, false))) || false)))), bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, false, false))) || false), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, true && (true)), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, true && (true)), true), false, true))))) && (_GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, false, false))) || false)))), false, false, true))))), (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))) || false) || (false), ! (! _GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)), false))) || false)), (injectionSwitch.x > injectionSwitch.y)) || (false)), ((_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)), false))) || false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)), false))) || false))), false || (bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)), false))) || false))))))), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)) || (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           atomicStore(checker[virtual_gid], read, 4, 64, 4);
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
              {
               barrier();
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bool(_GLF_IDENTITY(false, (false) && true))))))
              barrier();
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 0)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), (! (_GLF_WRAPPED_LOOP(false))) || false))));
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y) || false)))), _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((vec4(1794.7650, -685.856, -31.81, 1.8).x - -951.341))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))))))), bvec2(bvec4(bvec2(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y) || false)))), _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((vec4(1794.7650, -685.856, -31.81, 1.8).x - -951.341))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec2(bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y) || false))), bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y) || false))), true, false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4.2), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(3208.4062)), bvec2(true, false))), 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(length(vec4(0.0, 0.0, 0.0, 0.0)), float(vec2(_GLF_IDENTITY(length(vec4(0.0, 0.0, 0.0, 0.0)), min(length(vec4(0.0, 0.0, 0.0, 0.0)), length(vec4(0.0, 0.0, 0.0, 0.0)))), round(length(_GLF_IDENTITY(normalize(1.0), clamp(normalize(1.0), _GLF_IDENTITY(normalize(1.0), _GLF_IDENTITY(float(float(normalize(1.0))), clamp(float(float(normalize(1.0))), float(float(normalize(1.0))), float(float(normalize(1.0)))))), normalize(1.0)))))))), 1.0), _GLF_IDENTITY(transpose(transpose(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4.2), _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1]))), vec2(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(float(-47038))), bool(false))))), _GLF_FUZZED(3208.4062)), bvec2(true, false))), 0.0, 0.0, 1.0, 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0))), (transpose(transpose(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4.2), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(3208.4062)), bvec2(true, false))), 0.0, 0.0, 1.0, 1.0, 0.0, length(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), (vec4(0.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(13.12))))), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)) - vec4(0.0, 0.0, 0.0, 0.0))), 1.0)))) + mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), mix(vec2((vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4.2), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(3208.4062)), bvec2(true, false))), 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(length(vec4(0.0, 0.0, 0.0, 0.0)), float(vec2(_GLF_IDENTITY(length(vec4(0.0, 0.0, 0.0, 0.0)), min(length(vec4(0.0, 0.0, 0.0, 0.0)), length(vec4(0.0, 0.0, 0.0, 0.0)))), round(length(_GLF_IDENTITY(normalize(1.0), clamp(normalize(1.0), _GLF_IDENTITY(normalize(1.0), _GLF_IDENTITY(float(float(normalize(1.0))), clamp(float(float(normalize(1.0))), float(float(normalize(1.0))), float(float(normalize(1.0)))))), normalize(1.0)))))))), 1.0), _GLF_IDENTITY(transpose(transpose(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4.2), _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1]))), vec2(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(float(-47038))), bool(false))))), _GLF_FUZZED(3208.4062)), bvec2(true, false))), 0.0, 0.0, 1.0, 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0))), (transpose(transpose(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4.2), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(3208.4062)), bvec2(true, false))), 0.0, 0.0, 1.0, 1.0, 0.0, length(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), (vec4(0.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(13.12))))), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)) - vec4(0.0, 0.0, 0.0, 0.0))), 1.0)))) + mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))))[0], _GLF_FUZZED(9.3)), vec2(_GLF_FUZZED(318.697), (vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4.2), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(3208.4062)), bvec2(true, false))), 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(length(vec4(0.0, 0.0, 0.0, 0.0)), float(vec2(_GLF_IDENTITY(length(vec4(0.0, 0.0, 0.0, 0.0)), min(length(vec4(0.0, 0.0, 0.0, 0.0)), length(vec4(0.0, 0.0, 0.0, 0.0)))), round(length(_GLF_IDENTITY(normalize(1.0), clamp(normalize(1.0), _GLF_IDENTITY(normalize(1.0), _GLF_IDENTITY(float(float(normalize(1.0))), clamp(float(float(normalize(1.0))), float(float(normalize(1.0))), float(float(normalize(1.0)))))), normalize(1.0)))))))), 1.0), _GLF_IDENTITY(transpose(transpose(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4.2), _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1]))), vec2(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(float(-47038))), bool(false))))), _GLF_FUZZED(3208.4062)), bvec2(true, false))), 0.0, 0.0, 1.0, 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0))), (transpose(transpose(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4.2), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(3208.4062)), bvec2(true, false))), 0.0, 0.0, 1.0, 1.0, 0.0, length(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), (vec4(0.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(13.12))))), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)) - vec4(0.0, 0.0, 0.0, 0.0))), 1.0)))) + mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))))[1]), bvec2(false, _GLF_IDENTITY(true, true && (true)))))).y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(0.1)), float(injectionSwitch.y), bool(true))), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), false, true))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
