#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_4 {
 int _f0;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_2 {
 uvec2 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_3 {
 mat3 _f0;
 uint subgroup_base;
 uvec2 _f1;
 _GLF_struct_2 _f2;
 uvec3 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_0 {
 uint _f0;
 mat4 _f1;
 int _f2;
} ;

struct _GLF_struct_1 {
 mat4 _f0;
 _GLF_struct_0 _f1;
 bvec4 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_6 {
 _GLF_struct_1 _f0;
 _GLF_struct_3 _f1;
 _GLF_struct_5 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))))), (! (_GLF_IDENTITY(false, (false) && true))) && true)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0))).y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0))).y))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0))).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0))).y))))))) && true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), false || ((! (false)))))))), (injectionSwitch.x > injectionSwitch.y)))))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (_GLF_IDENTITY(false, (false) || false)))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))) > injectionSwitch.y) || false))) && true)))) && true)), false)), (bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))) || false)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, sqrt(0.0) + (injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-7.6)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), bool(true)))))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false)))))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))) > injectionSwitch.y, true, true, true)))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, determinant(mat3(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-0.2)), bool(false))), 1.0)) * (injectionSwitch.x)) > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, determinant(_GLF_IDENTITY(mat3(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(_GLF_IDENTITY(vec2(0.0, 1.0), (vec2(0.0, 1.0)) * mat2(1.0)), vec2(0.0, 1.0))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0), mat3(mat4(mat3(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(_GLF_IDENTITY(vec2(0.0, 1.0), (vec2(0.0, 1.0)) * mat2(1.0)), vec2(0.0, 1.0))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))))) * (injectionSwitch.x)) > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, determinant(mat3(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)) * (injectionSwitch.x)) > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x, determinant(mat3(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)) * (injectionSwitch.x)) > injectionSwitch.y)))))), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), true)))), true && (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), true))))))))), true)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch, injectionSwitch)))).y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(-9.4)), bool(false))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(-9.4)), bool(false))), (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(-5305.0292), clamp(_GLF_FUZZED(-5305.0292), _GLF_FUZZED(-5305.0292), _GLF_FUZZED(-5305.0292))) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) / 1.0), mix(float(injectionSwitch[1]), float(_GLF_FUZZED(-9.4)), bool(false))), (false ? _GLF_IDENTITY(_GLF_FUZZED(-5305.0292), clamp(_GLF_FUZZED(-5305.0292), _GLF_FUZZED(-5305.0292), _GLF_FUZZED(-5305.0292))) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) / 1.0), mix(float(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec2(-7.3, 29.40).r)), vec2(_GLF_FUZZED(-5.0), (injectionSwitch)[1]), bvec2(false, true)))[1]), float(_GLF_FUZZED(-9.4)), bool(false)))) * 1.0))), _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5259.9790), _GLF_FUZZED(-7.0)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))[1]), float(_GLF_FUZZED(-9.4)), bool(false))))))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(ldexp(injectionSwitch, ivec2(-85006, 4971))) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, _GLF_IDENTITY(false, false || (false)), true))))), (_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) || false))))), false)))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(_GLF_struct_1(mat4(1.0), _GLF_struct_0(1u, mat4(1.0), 1), bvec4(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), false, true)))), mat3x4(1.0)), _GLF_struct_3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(mat3(1.0), transpose(transpose(_GLF_IDENTITY(mat3(1.0), (true ? mat3(1.0) : _GLF_FUZZED(mat3(mat2x3(3.3, 0.4, 6.9, 0.8, -82.07, -659.900)))))))), mat3(mat4(_GLF_IDENTITY(mat3(1.0), _GLF_IDENTITY(mat3(mat4(_GLF_IDENTITY(_GLF_IDENTITY(mat3(1.0), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3(1.0))), mat3(mat3x4(_GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY(max(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), mix(float(_GLF_FUZZED(-4.8)), float(1.0), bool(true)))), 0.0 + (max(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), mix(float(_GLF_FUZZED(-4.8)), float(1.0), bool(true)))))), clamp(max(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), mix(float(_GLF_FUZZED(-4.8)), float(1.0), bool(true)))), max(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), mix(float(_GLF_FUZZED(-4.8)), float(1.0), bool(true)))), _GLF_IDENTITY(max(1.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2x3(1.0, 1.0, sqrt(0.0), 0.0, 0.0, 1.0), mat2x3(mat4(mat2x3(1.0, 1.0, sqrt(0.0), 0.0, 0.0, 1.0)))))))), clamp(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(84.24) : 1.0)), _GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 1.0))))), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-43.83))), 1.0)), mix(float(_GLF_FUZZED(-4.8)), float(1.0), bool(true)))), max(max(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), mix(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(-4.8), _GLF_IDENTITY((_GLF_FUZZED(-4.8)), max(_GLF_IDENTITY((_GLF_FUZZED(-4.8)), 0.0 + ((_GLF_FUZZED(-4.8)))), _GLF_IDENTITY((_GLF_FUZZED(-4.8)), ((_GLF_FUZZED(-4.8))) / 1.0))) * 1.0)), min(float(_GLF_IDENTITY(_GLF_FUZZED(-4.8), _GLF_IDENTITY((_GLF_FUZZED(-4.8)), max(_GLF_IDENTITY((_GLF_FUZZED(-4.8)), 0.0 + ((_GLF_FUZZED(-4.8)))), _GLF_IDENTITY((_GLF_FUZZED(-4.8)), ((_GLF_FUZZED(-4.8))) / _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(8.1)), float(1.0), bool(true)))))) * _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(57.99)), float(1.0), bool(true))))), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_FUZZED(-4.8), _GLF_IDENTITY((_GLF_FUZZED(-4.8)), max(_GLF_IDENTITY((_GLF_FUZZED(-4.8)), 0.0 + ((_GLF_FUZZED(-4.8)))), _GLF_IDENTITY((_GLF_FUZZED(-4.8)), ((_GLF_FUZZED(-4.8))) / 1.0))) * 1.0)), mix(float(_GLF_FUZZED((650.393))), float(float(_GLF_IDENTITY(_GLF_FUZZED(-4.8), _GLF_IDENTITY((_GLF_FUZZED(-4.8)), max(_GLF_IDENTITY((_GLF_FUZZED(-4.8)), 0.0 + _GLF_IDENTITY(((_GLF_FUZZED(-4.8))), (false ? _GLF_FUZZED(3.8) : ((_GLF_FUZZED(-4.8)))))), _GLF_IDENTITY((_GLF_FUZZED(-4.8)), ((_GLF_FUZZED(-4.8))) / 1.0))) * 1.0))), bool(true))))), (false ? _GLF_FUZZED(-4.9) : float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-4.8), (_GLF_FUZZED(-4.8)) * _GLF_IDENTITY(1.0, float(vec4(1.0, 1.0, 1.0, 0.0)))), min(_GLF_IDENTITY(_GLF_FUZZED(-4.8), (_GLF_FUZZED(-4.8)) * _GLF_IDENTITY(1.0, float(vec4(1.0, 1.0, 1.0, 0.0)))), _GLF_IDENTITY(_GLF_FUZZED(-4.8), (_GLF_FUZZED(-4.8)) * _GLF_IDENTITY(1.0, float(vec4(1.0, 1.0, 1.0, 0.0))))))))), float(1.0), bool(true)))), max(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), mix(float(_GLF_FUZZED(-4.8)), float(1.0), bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec2(true, true))))))))))))))), _GLF_IDENTITY(transpose(transpose(_GLF_IDENTITY(mat3(1.0), transpose(transpose(mat3(1.0)))))), (transpose(transpose(_GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(atanh(round(2019.7320))) : 1.0))), transpose(transpose(mat3(1.0))))))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))))), (false ? _GLF_IDENTITY(_GLF_FUZZED(mat3(-9226.8760, -97.36, -1.6, 847.611, 6.4, -9.3, 55.40, _GLF_IDENTITY(-3.8, (-3.8) * determinant(mat2(1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 1.0, 1.0))))), -1343.4219)), _GLF_IDENTITY(_GLF_IDENTITY(mat3(mat3x4(_GLF_IDENTITY(_GLF_FUZZED(mat3(-9226.8760, -97.36, -1.6, 847.611, 6.4, -9.3, 55.40, _GLF_IDENTITY(-3.8, (-3.8) * determinant(mat2(1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 1.0, 1.0))))), -1343.4219)), (_GLF_FUZZED(mat3(-9226.8760, -97.36, -1.6, 847.611, 6.4, -9.3, 55.40, _GLF_IDENTITY(-3.8, (-3.8) * determinant(mat2(1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))))))), 1.0, 1.0))))), -1343.4219))) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), (mat3(mat3x4(_GLF_IDENTITY(_GLF_FUZZED(mat3(-9226.8760, -97.36, -1.6, 847.611, 6.4, -9.3, 55.40, _GLF_IDENTITY(-3.8, (-3.8) * determinant(mat2(1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 1.0, 1.0))))), -1343.4219)), (_GLF_FUZZED(mat3(-9226.8760, -97.36, -1.6, 847.611, 6.4, -9.3, 55.40, _GLF_IDENTITY(-3.8, (-3.8) * determinant(mat2(1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))))))), 1.0, 1.0))))), -1343.4219))) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))) * mat3(1.0)), (_GLF_IDENTITY(mat3(mat3x4(_GLF_IDENTITY(_GLF_FUZZED(mat3(-9226.8760, -97.36, -1.6, 847.611, 6.4, -9.3, 55.40, _GLF_IDENTITY(-3.8, (-3.8) * determinant(mat2(1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 1.0, 1.0))))), -1343.4219)), mat3(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_FUZZED(mat3(-9226.8760, -97.36, -1.6, 847.611, 6.4, -9.3, 55.40, _GLF_IDENTITY(-3.8, (-3.8) * determinant(_GLF_IDENTITY(mat2(1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 1.0, 1.0))), transpose(transpose(mat2(1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 1.0, 1.0)))))))), -1343.4219)))))), transpose(transpose(mat3(mat3x4(_GLF_FUZZED(mat3(-9226.8760, -97.36, -1.6, 847.611, 6.4, -9.3, 55.40, _GLF_IDENTITY(_GLF_IDENTITY(-3.8, min(-3.8, -3.8)), (-3.8) * determinant(mat2(1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 1.0, 1.0))))), -1343.4219)))))))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))) : mat3(mat4(_GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, float(mat2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(299.431)), bool(false))))), 0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)) : _GLF_FUZZED(-4821.1598))), (false ? _GLF_FUZZED(-61.28) : 1.0)), 0.0)))), _GLF_IDENTITY(mat3(mat3x4(_GLF_IDENTITY(mat3(1.0), transpose(transpose(mat3(1.0)))))), mat3(1.0) * (_GLF_IDENTITY(mat3(mat3x4(mat3(1.0))), (mat3(mat3x4(mat3(1.0)))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))))))))))), transpose(transpose(_GLF_IDENTITY(mat3(1.0), mat3(mat4(_GLF_IDENTITY(mat3(1.0), _GLF_IDENTITY(mat3(_GLF_IDENTITY(mat4(_GLF_IDENTITY(mat3(1.0), mat3(mat3x4(_GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), mix(float(_GLF_FUZZED(-4.8)), float(1.0), bool(true)))))), _GLF_IDENTITY(transpose(transpose(_GLF_IDENTITY(_GLF_IDENTITY(mat3(1.0), (_GLF_IDENTITY(mat3(1.0), (mat3(1.0)) / mat3(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)), transpose(transpose(mat3(1.0)))))), (transpose(transpose(_GLF_IDENTITY(_GLF_IDENTITY(mat3(1.0), transpose(transpose(mat3(1.0)))), (false ? _GLF_FUZZED((- mat3(-1.4, 3.7, 8225.3024, 9.5, -6.2, -8.8, -9669.2396, 979.870, 9962.9889))) : _GLF_IDENTITY(_GLF_IDENTITY(mat3(1.0), transpose(transpose(mat3(1.0)))), mat3(mat3(_GLF_IDENTITY(mat3(1.0), transpose(transpose(mat3(1.0)))))))))))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))))), (true ? mat4(_GLF_IDENTITY(mat3(1.0), mat3(mat3x4(_GLF_IDENTITY(mat3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(normalize(-6.0)))), max(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), mix(float(_GLF_FUZZED(-4.8)), float(1.0), bool(true)))))), _GLF_IDENTITY(_GLF_IDENTITY(transpose(transpose(_GLF_IDENTITY(_GLF_IDENTITY(mat3(1.0), (_GLF_IDENTITY(mat3(1.0), (mat3(1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)), transpose(transpose(mat3(1.0)))))), (transpose(transpose(_GLF_IDENTITY(mat3(1.0), transpose(transpose(mat3(1.0))))))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(transpose(transpose(_GLF_IDENTITY(_GLF_IDENTITY(mat3(1.0), (_GLF_IDENTITY(mat3(1.0), (mat3(1.0)) / mat3(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, 1.0, 1.0, 1.0))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)), transpose(transpose(mat3(1.0)))))), (true ? transpose(transpose(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(mat3(1.0), (_GLF_IDENTITY(mat3(1.0), (mat3(1.0)) / mat3(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, 1.0, 1.0, 1.0))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)), transpose(transpose(_GLF_IDENTITY(_GLF_IDENTITY(mat3(1.0), (_GLF_IDENTITY(mat3(1.0), (mat3(1.0)) / mat3(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, 1.0, 1.0, 1.0))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)), (true ? _GLF_IDENTITY(mat3(1.0), (_GLF_IDENTITY(mat3(1.0), (mat3(1.0)) / mat3(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, 1.0, 1.0, 1.0))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)) : _GLF_FUZZED((6857.6861 / mat3(-7.2, -76.73, -2393.3866, 9534.7697, -6.5, -9242.9803, -4.1, -7188.4749, -93.72)))))))), transpose(transpose(mat3(1.0)))))) : _GLF_FUZZED(mat3(-3.6, 6.5, 8.8, 528.668, 1.7, -5.6, -34.32, 9962.9661, 777.964)))), (transpose(transpose(_GLF_IDENTITY(mat3(1.0), transpose(transpose(mat3(1.0))))))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)) : _GLF_FUZZED(mat3(-571.699, 60.64, -3.6, _GLF_IDENTITY(-4.9, min(-4.9, _GLF_IDENTITY(-4.9, (-4.9) - 0.0))), -1.1, -54.35, 2.0, -9.0, 1.0))))))))) : _GLF_FUZZED(mat4(-1.7, 8.7, -352.451, -63.40, -44.50, -58.60, 853.637, -747.643, 8.4, 2.7, 7223.9676, -52.29, -1344.7857, -9.4, -8.6, -3.3))))), (false ? _GLF_FUZZED(mat3(-9226.8760, -97.36, -1.6, 847.611, 6.4, -9.3, 55.40, _GLF_IDENTITY(-3.8, (_GLF_IDENTITY(-3.8, max(_GLF_IDENTITY(-3.8, clamp(-3.8, -3.8, -3.8)), -3.8))) * determinant(_GLF_IDENTITY(mat2(1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-354.988)), bool(false))), 1.0), (false ? _GLF_FUZZED(mat2(146.405, -43.23, 4057.9670, -98.14)) : mat2(1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-354.988)), bool(false))), 1.0))))), -1343.4219)) : mat3(mat4(_GLF_IDENTITY(mat3(1.0), mat3(mat3x4(mat3(1.0))))))))))))))), subgroup_id * subgroup_size, uvec2(1u), _GLF_struct_2(uvec2(1u), mat2x4(1.0)), uvec3(1u), ivec3(_GLF_IDENTITY(1, (1) | 0))), _GLF_struct_5(_GLF_struct_4(1), bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), bool(bool(_GLF_IDENTITY(true, (true) || false)))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), false, true, true))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((subgroup_size , reflect(injectionSwitch, injectionSwitch))) : injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((-76.89))), float(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, tan(0.0), sqrt(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)), 1.0 * (float(mat3x4(injectionSwitch.y, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, tan(0.0), sqrt(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)))))), bool(true)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(float(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0)) * (injectionSwitch)).x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(-3.9)))))), mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(-6.2)), bool(false))) > injectionSwitch.y))))
  barrier();
 uint virtual_gid = workgroup_base + _GLF_struct_replacement_6._f1.subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(-2675.2634, -289.204)))))).y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))) || false, true && _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((false) || false, true && ((false) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), _GLF_IDENTITY(bool(bvec4(bool(bvec4(false, true, true, true)), false, true, true)), true && (bool(bvec4(bool(bvec4(false, true, true, true)), false, true, true))))))))), false || (_GLF_IDENTITY((_GLF_IDENTITY((false) || false, true && ((false) || false))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY((false) || false, true && ((false) || false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! ((_GLF_IDENTITY(_GLF_IDENTITY((false) || false, ! (! (_GLF_IDENTITY((false) || false, bool(bool((false) || false)))))), true && ((false) || _GLF_IDENTITY(false, true && (false)))))))))))), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY((false) || false, true && ((false) || _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))))), false)))))))), bool(bvec4((_GLF_IDENTITY((false) || false, true && ((false) || false))), true, false, true))), false)))))), false || ((_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, true && (_GLF_IDENTITY((false) || _GLF_IDENTITY(false, (false) || false), true && ((false) || false)))))))))), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))) || false, true && _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((false) || false, true && ((false) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), _GLF_IDENTITY(bool(bvec4(bool(bvec4(false, true, true, true)), false, true, true)), true && (bool(bvec4(bool(bvec4(false, true, true, true)), false, true, true))))))))), false || (_GLF_IDENTITY((_GLF_IDENTITY((false) || false, true && ((false) || false))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY((false) || false, true && ((false) || false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! ((_GLF_IDENTITY(_GLF_IDENTITY((false) || false, ! (! (_GLF_IDENTITY((false) || false, bool(bool((false) || false)))))), true && ((false) || _GLF_IDENTITY(false, true && (false)))))))))))), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY((false) || false, true && ((false) || _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))))), false)))))))), bool(bvec4((_GLF_IDENTITY((false) || false, true && ((false) || false))), true, false, true))), false)))))), false || ((_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, true && (_GLF_IDENTITY((false) || _GLF_IDENTITY(false, (false) || false), true && ((false) || false)))))))))), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))) || false, true && _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((false) || false, true && ((false) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), _GLF_IDENTITY(bool(bvec4(bool(bvec4(false, true, true, true)), false, true, true)), true && (bool(bvec4(bool(bvec4(false, true, true, true)), false, true, true))))))))), false || (_GLF_IDENTITY((_GLF_IDENTITY((false) || false, true && ((false) || false))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY((false) || false, _GLF_IDENTITY(true && ((false) || false), (true && ((false) || false)) || false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! ((_GLF_IDENTITY(_GLF_IDENTITY((false) || false, ! (! (_GLF_IDENTITY((false) || false, bool(bool((false) || false)))))), true && ((false) || _GLF_IDENTITY(false, true && (false)))))))))))), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY((false) || false, true && ((false) || _GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))))), false))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))))), false))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))))), false))))), true, true)), bool(bvec2(bool(bvec3(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))))), false))))), true, true)), true))))))))), bool(bvec4((_GLF_IDENTITY((false) || false, true && ((false) || false))), true, false, true))), false)))))), false || ((_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, true && (_GLF_IDENTITY((false) || _GLF_IDENTITY(false, (false) || false), true && ((false) || false))))))))))) || false))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)) && true), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), 0.0 + (clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(815.248)), float(injectionSwitch.y), bool(true))), (false ? _GLF_FUZZED(8.2) : _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(815.248)), float(injectionSwitch.y), bool(true))))))))) && true), false, true)))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false)))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(write_val, uint(virtual_gid), 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, 0 | (64))) * 1), 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, 1.0, 0.0, abs(0.0), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, 1.0, 1.0, 0.0, 0.0))), injectionSwitch, injectionSwitch)).y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, true && ((false) && true)))) && true), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))), 1.0, 1.0))).y, (false ? _GLF_FUZZED(-62.15) : injectionSwitch.y))) * 1.0)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))), true && (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))), false, true), bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))), false, true), false))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec4(_GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false), false, true, true)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(roundEven(_GLF_IDENTITY(0.1, (true ? 0.1 : _GLF_FUZZED(145.607))))) : injectionSwitch.y))))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), (_GLF_IDENTITY(true, true && (true))) && true)), bool(bool(! (true)))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), ! (! (! (_GLF_IDENTITY(true, true && (true)))))), bool(bool(! (true)))))), (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), bool(bool(! (true))))))) || false), true, false, false)))))))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.9)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), _GLF_IDENTITY(0.0, (0.0) - 0.0))), max(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(943.744)), bool(false))), 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0))))), _GLF_IDENTITY(! _GLF_IDENTITY((! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), max(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), _GLF_IDENTITY(sin(0.0), (sin(0.0)) * 1.0))), 0.0, 1.0, 1.0, log(1.0), 0.0))))))), ! (! (_GLF_IDENTITY((! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), max(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), _GLF_IDENTITY(sin(0.0), (sin(0.0)) * 1.0))), 0.0, 1.0, 1.0, log(1.0), 0.0))))))), ! (_GLF_IDENTITY(! ((! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), max(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), _GLF_IDENTITY(sin(0.0), (sin(0.0)) * 1.0))), 0.0, 1.0, 1.0, log(1.0), 0.0)))))))), ! (! (! ((! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), max(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), _GLF_IDENTITY(sin(0.0), (sin(0.0)) * 1.0))), 0.0, 1.0, 1.0, log(1.0), 0.0)))))))))))))))), true && (_GLF_IDENTITY(! _GLF_IDENTITY((! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), max(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), _GLF_IDENTITY(sin(0.0), (sin(0.0)) * 1.0))), 0.0, 1.0, 1.0, log(1.0), 0.0))))))), ! (! (_GLF_IDENTITY((! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), max(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), _GLF_IDENTITY(sin(0.0), (sin(0.0)) * 1.0))), 0.0, 1.0, 1.0, log(1.0), 0.0))))))), ! (_GLF_IDENTITY(! ((! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), max(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), _GLF_IDENTITY(sin(0.0), (sin(0.0)) * 1.0))), 0.0, 1.0, 1.0, log(1.0), 0.0)))))))), ! (! (! ((! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), max(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), _GLF_IDENTITY(sin(0.0), (sin(0.0)) * 1.0))), 0.0, 1.0, 1.0, log(1.0), 0.0)))))))))))))))), ! (! (! _GLF_IDENTITY((! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), max(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), _GLF_IDENTITY(_GLF_IDENTITY(sin(0.0), max(sin(0.0), sin(0.0))), _GLF_IDENTITY((sin(0.0)), max(_GLF_IDENTITY((sin(0.0)), clamp((sin(0.0)), (sin(0.0)), (sin(0.0)))), (sin(0.0)))) * 1.0))), 0.0, 1.0, 1.0, log(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-0.5)), bool(false)))), 0.0))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), max(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), _GLF_IDENTITY(sin(0.0), (sin(0.0)) * 1.0))), 0.0, 1.0, 1.0, log(1.0), 0.0))))))), ! (_GLF_IDENTITY(! ((! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), max(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), _GLF_IDENTITY(sin(0.0), (sin(0.0)) * 1.0))), 0.0, 1.0, 1.0, log(1.0), 0.0)))))))), ! (! (! ((! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), max(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), _GLF_IDENTITY(sin(0.0), (sin(0.0)) * 1.0))), 0.0, 1.0, 1.0, log(1.0), 0.0)))))))))))))), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY((! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), max(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), _GLF_IDENTITY(sin(0.0), (sin(0.0)) * 1.0))), 0.0, 1.0, 1.0, log(1.0), 0.0))))))), ! (_GLF_IDENTITY(! ((! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), max(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), _GLF_IDENTITY(sin(0.0), (sin(0.0)) * 1.0))), 0.0, 1.0, 1.0, log(1.0), 0.0)))))))), ! (! (! ((! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), max(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), _GLF_IDENTITY(sin(0.0), (sin(0.0)) * 1.0))), 0.0, 1.0, 1.0, log(1.0), 0.0)))))))))))))), false), _GLF_IDENTITY(bvec2(bvec3(bvec2(! (_GLF_IDENTITY((! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), max(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), _GLF_IDENTITY(sin(0.0), (sin(0.0)) * 1.0))), 0.0, 1.0, 1.0, log(1.0), 0.0))))))), ! (_GLF_IDENTITY(! ((! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), max(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), _GLF_IDENTITY(sin(0.0), (sin(0.0)) * 1.0))), 0.0, 1.0, 1.0, log(1.0), 0.0)))))))), ! (! (! ((! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), max(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), _GLF_IDENTITY(sin(0.0), (sin(0.0)) * 1.0))), 0.0, 1.0, 1.0, log(1.0), 0.0)))))))))))))), false), false)), bvec2(bvec4(bvec2(bvec3(bvec2(! (_GLF_IDENTITY((! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), max(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), _GLF_IDENTITY(sin(0.0), (sin(0.0)) * 1.0))), 0.0, 1.0, 1.0, log(1.0), 0.0))))))), ! (_GLF_IDENTITY(! ((! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), max(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), _GLF_IDENTITY(sin(0.0), (sin(0.0)) * 1.0))), 0.0, 1.0, 1.0, log(1.0), 0.0)))))))), ! (! (! ((! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), max(float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 0.0, 1.0, 1.0, log(1.0), 0.0)), float(mat3x4(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), _GLF_IDENTITY(sin(0.0), (sin(0.0)) * 1.0))), 0.0, 1.0, 1.0, log(1.0), 0.0)))))))))))))), false), false)), true, false))))))))))))))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(cosh(vec2(-1.9, -4664.4204))) : injectionSwitch)).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) && true))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), false)))))))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_IDENTITY(true, ! (! (true))), false))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint read_val = atomicLoad(write_val, 4, 64, 2);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), true && (_GLF_IDENTITY(false, (false) && true)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 _GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(read_val)), 0u ^ (buf[virtual_gid] = uint(subgroupAllEqual(read_val))));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 1
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
