#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_0 {
 ivec4 _f0;
 uint subgroup_local_id;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 _GLF_struct_1 _GLF_struct_replacement_1 = _GLF_struct_1(_GLF_struct_0(_GLF_IDENTITY(ivec4(1), ~ (~ (_GLF_IDENTITY(ivec4(1), max(ivec4(1), ivec4(1)))))), gl_SubgroupInvocationID));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)), 1.0, 0.0, 1.0, 1.0, 1.0, exp(0.0)), (mat4x2(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), 1.0, 1.0, determinant(mat3(1.0, 0.0, 1.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 1.0)), 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0))))))), injectionSwitch)), injectionSwitch)), 1.0, 0.0, 1.0, 1.0, 1.0, exp(0.0))) * mat4(1.0)))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-541.781), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(9037.6002)), bvec2(true, false))))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))), _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), bool(bvec2(! (_GLF_IDENTITY(false, false || (false))), false)))) && true))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      break;
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), min((injectionSwitch.x), _GLF_IDENTITY((injectionSwitch.x), float(_GLF_IDENTITY(mat3(_GLF_IDENTITY((injectionSwitch.x), mix(float(_GLF_IDENTITY((injectionSwitch.x), mix(float((injectionSwitch.x)), float(_GLF_FUZZED(-4.1)), bool(_GLF_IDENTITY(false, (false) || false))))), float(_GLF_FUZZED(-8.3)), bool(false))), 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-74.36))), cos(0.0), determinant(mat3(0.0, sin(0.0), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, float(mat3(1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), 1.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(31.62))), _GLF_IDENTITY(1.0, min(1.0, 1.0))))))), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 1.0, 0.0), (_GLF_IDENTITY(mat3(_GLF_IDENTITY((injectionSwitch.x), mix(float(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x), ((injectionSwitch.x)) / 1.0), mix(float((injectionSwitch.x)), float(_GLF_FUZZED(-4.1)), bool(false)))), float(_GLF_FUZZED(-8.3)), bool(false))), 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-74.36))), cos(0.0), determinant(mat3(0.0, sin(0.0), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), float(mat4(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), 1.0, 0.0, 0.0, sin(0.0), sqrt(0.0), 0.0, 1.0, sin(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0))), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(8.9)), bool(false)))) - 0.0), 0.0, 1.0, 0.0)), 0.0, 1.0, 1.0, 0.0), (mat3(_GLF_IDENTITY((injectionSwitch.x), mix(float(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), mix(float((injectionSwitch.x)), float(_GLF_FUZZED(_GLF_IDENTITY(-4.1, (true ? -4.1 : _GLF_FUZZED(-1.1))))), bool(false)))), float(_GLF_FUZZED(-8.3)), bool(false))), 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-74.36))), cos(0.0), determinant(mat3(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4662.7414)), bool(false))), 0.0, 0.0)), sin(0.0), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), mix(float(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), (false ? _GLF_FUZZED(872.245) : dot(vec2(1.0, 0.0), vec2(0.0, 1.0))))), float(_GLF_FUZZED(80.04)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 1.0, 0.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0, 0.0, 0.0))) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))) * 1.0) > injectionSwitch.y)))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false)))))))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, clamp(_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x)), gl_WorkGroupSize.x, gl_WorkGroupSize.x));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), true && (bool(bvec2(false, true))))), (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mix(injectionSwitch, injectionSwitch, bvec2(false, false))) : injectionSwitch)).y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(workgroup_size, 1u, 1u, 0u), (uvec4(workgroup_size, 1u, 1u, 0u)) ^ uvec4(0u, 0u, 0u, 0u))), clamp(uint(_GLF_IDENTITY(uvec4(workgroup_size, 1u, 1u, 0u), (_GLF_IDENTITY(uvec4(workgroup_size, 1u, 1u, 0u), min(uvec4(workgroup_size, 1u, 1u, 0u), _GLF_IDENTITY(uvec4(workgroup_size, 1u, 1u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(workgroup_size, 1u, 1u, 0u)))))) ^ uvec4(0u, 0u, 0u, 0u))), uint(_GLF_IDENTITY(uvec4(workgroup_size, 1u, 1u, 0u), (uvec4(workgroup_size, 1u, 1u, 0u)) ^ uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u))))))), uint(_GLF_IDENTITY(uvec4(workgroup_size, 1u, 1u, 0u), (uvec4(workgroup_size, 1u, 1u, 0u)) ^ _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), ~ (~ (_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), clamp(uvec4(0u, 0u, 0u, 0u), _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), (uvec4(0u, 0u, 0u, 0u)) >> uvec4(0u, 0u, 0u, 0u)), uvec4(0u, 0u, 0u, 0u))))))))))) * workgroup_id, ~ (~ _GLF_IDENTITY((workgroup_size * workgroup_id), 0u + (_GLF_IDENTITY((workgroup_size * workgroup_id), ((workgroup_size * workgroup_id)) | ((workgroup_size * workgroup_id)))))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id))))), (false ? _GLF_FUZZED(workgroup_id) : ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id)))), (~ (_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id))))) * 1u)))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id))))), (~ (~ (_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id)))))) - 0u), ~ (~ (_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id))))), ~ (~ (_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id)))))), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(clamp(~ (~ (_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id))))), ~ (~ (_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ _GLF_IDENTITY((workgroup_size * workgroup_id), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((workgroup_size * workgroup_id), 1u * ((workgroup_size * workgroup_id))))))))), ~ (~ (_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * _GLF_IDENTITY(workgroup_id, uint(uvec4(workgroup_id, 1u, ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), ~ (~ (uint(7u)))))), 1u))))))))), max(clamp(~ (~ (_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), ~ (~ (workgroup_size * workgroup_id))))), ~ (~ (_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id))))), ~ (~ (_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id)))))), clamp(~ (~ (_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id)))), (~ (_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id))))) / 1u)), ~ (~ (_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id)))))))), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)))), (uvec2(_GLF_IDENTITY(clamp(~ (~ (_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id))))), ~ (~ (_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id))))), ~ (~ (_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id)))))), max(clamp(~ (~ (_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id))))), ~ (~ (_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id))))), ~ (~ (_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id)))))), clamp(~ (~ (_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id))))), ~ (~ (_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id))))), ~ (~ (_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id)))))))), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))))) * uvec2(1u, 1u)))))))));
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_id, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)), 0u, 1u, 0u), (true ? uvec4(subgroup_id, 0u, _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(bitfieldExtract(workgroup_id, 47741, -54958)) : 1u)), 0u) : _GLF_FUZZED(uvec4(33117u, 40981u, 65042u, 98209u))))) | (uvec4(_GLF_IDENTITY(subgroup_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (subgroup_id)), 0u, 1u, 0u)))), 0u ^ (uint(_GLF_IDENTITY(uvec4(subgroup_id, 0u, 1u, 0u), (_GLF_IDENTITY(_GLF_IDENTITY(uvec4(subgroup_id, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(subgroup_id, 0u, 1u, 0u), (true ? uvec4(subgroup_id, 0u, 1u, 0u) : _GLF_FUZZED(uvec4(164838u, 79121u, 165752u, 179005u))))) | (uvec4(subgroup_id, 0u, 1u, 0u))), (true ? uvec4(subgroup_id, 0u, 1u, 0u) : _GLF_FUZZED(uvec4(33117u, 40981u, 65042u, 98209u))))) | (uvec4(subgroup_id, 0u, 1u, 0u))))))) * subgroup_size + _GLF_struct_replacement_1._f0.subgroup_local_id, uint(_GLF_IDENTITY(uvec2(workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_id, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)), 0u, 1u, 0u), (true ? uvec4(_GLF_IDENTITY(subgroup_id, uint(uvec3(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u), ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u))), 0u, 1u, 0u) : _GLF_FUZZED(uvec4(33117u, 40981u, 65042u, 98209u))))) | (uvec4(subgroup_id, 0u, 1u, 0u)))), 0u ^ (uint(_GLF_IDENTITY(uvec4(subgroup_id, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), 0u, 1u, 0u), (true ? uvec4(subgroup_id, 0u, 1u, 0u) : _GLF_FUZZED(uvec4(_GLF_IDENTITY(33117u, (true ? 33117u : _GLF_FUZZED(workgroup_id))), 40981u, 65042u, 98209u))))) | (uvec4(subgroup_id, 0u, 1u, 0u))))))) * subgroup_size + _GLF_struct_replacement_1._f0.subgroup_local_id, 0u), (true ? _GLF_IDENTITY(uvec2(workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_id, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)), 0u, 1u, 0u), (true ? uvec4(subgroup_id, 0u, 1u, 0u) : _GLF_FUZZED(uvec4(33117u, 40981u, 65042u, 98209u))))) | (uvec4(subgroup_id, 0u, 1u, 0u)))), 0u ^ (uint(_GLF_IDENTITY(uvec4(subgroup_id, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(subgroup_id, 0u, 1u, 0u), (true ? uvec4(subgroup_id, 0u, 1u, 0u) : _GLF_FUZZED(uvec4(33117u, 40981u, 65042u, 98209u))))) | (uvec4(subgroup_id, 0u, 1u, 0u)))))), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_id, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)), 0u, 1u, 0u), (true ? uvec4(subgroup_id, 0u, 1u, 0u) : _GLF_FUZZED(uvec4(33117u, 40981u, 65042u, 98209u))))) | (uvec4(subgroup_id, 0u, 1u, 0u)))), 0u ^ (uint(_GLF_IDENTITY(uvec4(subgroup_id, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(subgroup_id, 0u, 1u, 0u), (true ? uvec4(subgroup_id, 0u, 1u, 0u) : _GLF_FUZZED(uvec4(33117u, 40981u, 65042u, 98209u))))) | (uvec4(subgroup_id, 0u, 1u, 0u)))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_id, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)), 0u, 1u, 0u), (true ? uvec4(subgroup_id, 0u, 1u, 0u) : _GLF_FUZZED(uvec4(33117u, 40981u, 65042u, 98209u))))) | (uvec4(subgroup_id, 0u, 1u, 0u)))), 0u ^ (uint(_GLF_IDENTITY(uvec4(subgroup_id, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(subgroup_id, 0u, 1u, 0u), (true ? uvec4(subgroup_id, 0u, 1u, 0u) : _GLF_FUZZED(uvec4(33117u, 40981u, 65042u, 98209u))))) | (uvec4(subgroup_id, 0u, 1u, 0u)))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_id, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)), 0u, 1u, 0u), (true ? uvec4(subgroup_id, 0u, 1u, 0u) : _GLF_FUZZED(uvec4(33117u, 40981u, 65042u, 98209u))))) | (uvec4(subgroup_id, 0u, 1u, 0u)))), 0u ^ (uint(_GLF_IDENTITY(uvec4(subgroup_id, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(subgroup_id, 0u, 1u, 0u), (true ? uvec4(subgroup_id, 0u, 1u, 0u) : _GLF_FUZZED(uvec4(33117u, 40981u, 65042u, 98209u))))) | (uvec4(subgroup_id, 0u, 1u, 0u)))))), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_id, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)), 0u, 1u, 0u), (true ? uvec4(subgroup_id, 0u, 1u, 0u) : _GLF_FUZZED(uvec4(33117u, 40981u, 65042u, 98209u))))) | (uvec4(subgroup_id, 0u, 1u, 0u)))), 0u ^ (uint(_GLF_IDENTITY(uvec4(subgroup_id, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(subgroup_id, 0u, 1u, 0u), (true ? uvec4(subgroup_id, 0u, 1u, 0u) : _GLF_FUZZED(uvec4(33117u, 40981u, 65042u, 98209u))))) | (uvec4(subgroup_id, 0u, 1u, 0u)))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_id, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)), 0u, 1u, 0u), (true ? uvec4(subgroup_id, 0u, 1u, 0u) : _GLF_FUZZED(uvec4(33117u, 40981u, 65042u, 98209u))))) | (uvec4(subgroup_id, 0u, 1u, 0u)))), 0u ^ (uint(_GLF_IDENTITY(uvec4(subgroup_id, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(subgroup_id, 0u, 1u, 0u), (true ? uvec4(subgroup_id, 0u, 1u, 0u) : _GLF_FUZZED(uvec4(33117u, 40981u, 65042u, 98209u))))) | (uvec4(subgroup_id, 0u, 1u, 0u)))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_id, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)), 0u, 1u, 0u), (true ? uvec4(subgroup_id, 0u, 1u, 0u) : _GLF_FUZZED(uvec4(33117u, 40981u, 65042u, 98209u))))) | (uvec4(subgroup_id, 0u, 1u, 0u)))), 0u ^ (uint(_GLF_IDENTITY(uvec4(subgroup_id, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(subgroup_id, 0u, 1u, 0u), (true ? uvec4(subgroup_id, 0u, 1u, 0u) : _GLF_FUZZED(uvec4(33117u, 40981u, 65042u, 98209u))))) | (uvec4(subgroup_id, 0u, 1u, 0u))))))))))) * subgroup_size + _GLF_struct_replacement_1._f0.subgroup_local_id, 0u), min(uvec2(workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_id, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)), 0u, 1u, 0u), (true ? uvec4(subgroup_id, 0u, 1u, 0u) : _GLF_FUZZED(uvec4(33117u, 40981u, 65042u, 98209u))))) | (uvec4(subgroup_id, 0u, 1u, 0u)))), 0u ^ (uint(_GLF_IDENTITY(uvec4(subgroup_id, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u))) | uint(_GLF_ZERO(0.0, injectionSwitch.x))), 1u, 0u), _GLF_IDENTITY((_GLF_IDENTITY(uvec4(subgroup_id, 0u, 1u, 0u), (true ? uvec4(subgroup_id, 0u, 1u, 0u) : _GLF_FUZZED(uvec4(33117u, 40981u, 65042u, 98209u))))) | (uvec4(subgroup_id, 0u, 1u, 0u)), min(_GLF_IDENTITY((_GLF_IDENTITY(uvec4(subgroup_id, 0u, 1u, 0u), (true ? uvec4(subgroup_id, 0u, 1u, 0u) : _GLF_FUZZED(uvec4(33117u, 40981u, 65042u, 98209u))))) | (uvec4(subgroup_id, 0u, 1u, 0u)), ((_GLF_IDENTITY(uvec4(subgroup_id, 0u, 1u, 0u), (true ? uvec4(subgroup_id, 0u, 1u, 0u) : _GLF_FUZZED(uvec4(33117u, 40981u, 65042u, 98209u))))) | (uvec4(subgroup_id, 0u, 1u, 0u))) / uvec4(1u, 1u, 1u, 1u)), (_GLF_IDENTITY(uvec4(subgroup_id, 0u, 1u, 0u), (true ? uvec4(subgroup_id, 0u, 1u, 0u) : _GLF_FUZZED(uvec4(33117u, 40981u, 65042u, 98209u))))) | (uvec4(subgroup_id, 0u, 1u, 0u))))))))) * subgroup_size + _GLF_struct_replacement_1._f0.subgroup_local_id, 0u), uvec2(workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_id, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_id, 0u | _GLF_IDENTITY((subgroup_id), uint(_GLF_IDENTITY(uvec3((subgroup_id), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u), ~ (~ (uvec3((subgroup_id), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))))))), 0u, 1u, 0u), (true ? _GLF_IDENTITY(uvec4(subgroup_id, 0u, 1u, 0u), (uvec4(subgroup_id, 0u, 1u, 0u)) << uvec4(0u, 0u, 0u, 0u)) : _GLF_FUZZED(uvec4(33117u, 40981u, 65042u, 98209u))))) | (uvec4(subgroup_id, 0u, 1u, 0u)))), 0u ^ (uint(_GLF_IDENTITY(uvec4(subgroup_id, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u), 0u, 1u, 0u), (true ? uvec4(subgroup_id, 0u, 1u, 0u) : _GLF_FUZZED(uvec4(33117u, 40981u, 65042u, 98209u))))) | (uvec4(subgroup_id, 0u, 1u, 0u))))))) * subgroup_size + _GLF_struct_replacement_1._f0.subgroup_local_id, 0u))) : _GLF_FUZZED(uvec2(61026u, 144603u))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((_GLF_struct_replacement_1._f0.subgroup_local_id + 1) % subgroup_size);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, false, false)), ! (! (bool(bvec4(_GLF_DEAD(false), true, false, false)))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), bool(bool(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, false, false)), ! (! (bool(bvec4(_GLF_DEAD(false), true, false, false)))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       return;
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y)))))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, min(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (next_virtual_gid)), next_virtual_gid))) | 0u)], _GLF_IDENTITY(uint(1), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(uint(1), 0u, 0u), clamp(uvec3(uint(1), 0u, 0u), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 0u, 0u), _GLF_IDENTITY((uvec3(uint(1), 0u, 0u)) | uvec3(0u, 0u, 0u), min(_GLF_IDENTITY((uvec3(uint(1), 0u, 0u)) | uvec3(0u, 0u, 0u), clamp((uvec3(uint(1), 0u, 0u)) | uvec3(0u, 0u, 0u), _GLF_IDENTITY((uvec3(uint(1), 0u, 0u)) | uvec3(0u, 0u, 0u), ((uvec3(uint(1), 0u, 0u)) | uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u)), (uvec3(uint(1), 0u, 0u)) | uvec3(0u, 0u, 0u))), (uvec3(uint(1), 0u, 0u)) | uvec3(0u, 0u, 0u)))), uvec3(_GLF_IDENTITY(uint(1), max(uint(1), uint(1))), 0u, 0u))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(uint(1), 0u, 0u), clamp(uvec3(uint(1), 0u, 0u), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 0u, 0u), _GLF_IDENTITY((uvec3(uint(1), 0u, 0u)) | uvec3(0u, 0u, 0u), min(_GLF_IDENTITY((uvec3(uint(1), 0u, 0u)) | uvec3(0u, 0u, 0u), clamp((uvec3(uint(1), 0u, 0u)) | uvec3(0u, 0u, 0u), _GLF_IDENTITY((uvec3(uint(1), 0u, 0u)) | uvec3(0u, 0u, 0u), ((uvec3(uint(1), 0u, 0u)) | uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u)), (uvec3(uint(1), 0u, 0u)) | uvec3(0u, 0u, 0u))), (uvec3(uint(1), 0u, 0u)) | uvec3(0u, 0u, 0u)))), uvec3(_GLF_IDENTITY(uint(1), max(uint(1), uint(1))), 0u, 0u))), min(_GLF_IDENTITY(uvec3(uint(1), 0u, 0u), clamp(uvec3(uint(1), 0u, 0u), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 0u, 0u), _GLF_IDENTITY((uvec3(uint(1), 0u, 0u)) | uvec3(0u, 0u, 0u), min(_GLF_IDENTITY((uvec3(uint(1), 0u, 0u)) | uvec3(0u, 0u, 0u), clamp((uvec3(uint(1), 0u, 0u)) | uvec3(0u, 0u, 0u), _GLF_IDENTITY((uvec3(uint(1), 0u, 0u)) | uvec3(0u, 0u, 0u), ((uvec3(uint(1), 0u, 0u)) | uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u)), (uvec3(uint(1), 0u, 0u)) | uvec3(0u, 0u, 0u))), (uvec3(uint(1), 0u, 0u)) | uvec3(0u, 0u, 0u)))), uvec3(_GLF_IDENTITY(uint(1), max(uint(1), uint(1))), 0u, 0u))), _GLF_IDENTITY(uvec3(uint(1), 0u, 0u), clamp(uvec3(uint(1), 0u, 0u), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uint(1), min(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))), 0u, 0u), _GLF_IDENTITY((uvec3(uint(1), 0u, 0u)) | uvec3(0u, 0u, 0u), min(_GLF_IDENTITY((uvec3(uint(1), 0u, 0u)) | uvec3(0u, 0u, 0u), clamp((uvec3(uint(1), 0u, 0u)) | uvec3(0u, 0u, 0u), _GLF_IDENTITY((uvec3(uint(1), 0u, 0u)) | uvec3(0u, 0u, 0u), ((uvec3(uint(1), 0u, 0u)) | uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u)), (uvec3(uint(1), 0u, 0u)) | uvec3(0u, 0u, 0u))), (uvec3(uint(1), 0u, 0u)) | uvec3(0u, 0u, 0u)))), uvec3(_GLF_IDENTITY(uint(1), max(uint(1), uint(1))), 0u, 0u)))))))))), 4, 64, 4);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(ivec4(-15280, 73376, -37468, 55438)[1]))), 4)), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(ivec4(-15280, 73376, -37468, 55438)[1]))), 4)), 0 ^ (_GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(ivec4(-15280, 73376, -37468, 55438)[1]))), 4)))), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))))), 64, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) / ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (1 << _GLF_IDENTITY(int(6), int(6))) | (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) >> 0)), (1 ^ 1) | (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) >> 0))))))))) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) | (6)))))), (_GLF_IDENTITY(0, (0) / (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec3(1, 0, 0))) << _GLF_IDENTITY(int(6), int(6)), (1 << _GLF_IDENTITY(int(6), int(6))) | (1 << _GLF_IDENTITY(int(6), int(6))))), 0 + ((_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec3(1, 0, 0))) << _GLF_IDENTITY(int(6), int(6)), (1 << _GLF_IDENTITY(int(6), int(6))) | (1 << _GLF_IDENTITY(int(6), int(6))))))) >> _GLF_IDENTITY(int(6), int(6))))) * ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))));
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), ! (! (bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     continue;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 1.0), (false ? _GLF_FUZZED(vec3(-516.851, 2283.9209, -5.8)) : vec3(1.0, 0.0, 1.0)))), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(5.3))), 1.0)))), (mat2(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), min(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), mix(vec3(_GLF_FUZZED(-6.9), _GLF_FUZZED(-5146.5211), (vec3(0.0, 1.0, 0.0))[2]), vec3((vec3(0.0, 1.0, 0.0))[0], (vec3(0.0, 1.0, 0.0))[1], _GLF_FUZZED(-517.834)), bvec3(true, true, false))), vec3(0.0, 1.0, 0.0))), vec3(1.0, 0.0, 1.0))))) * mat2(1.0))))))) && true)))
    return;
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(3639.9375), _GLF_FUZZED(-1.7)), vec2((vec2(1.0, 1.0))[0], (vec2(1.0, 1.0))[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) * (_GLF_IDENTITY(vec2(1.0, 1.0), vec2(0.0, 0.0) + (_GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) / _GLF_IDENTITY(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(mat3x2(vec2(1.0, 1.0), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), mat2(1.0) * (mat3x2(vec2(1.0, 1.0), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)))))))))) * (injectionSwitch)).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
    }
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-8165.0725))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-8165.0725))), mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-8165.0725)))), float(_GLF_FUZZED(-7.6)), bool(false))), _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-8165.0725))))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) ^ 0)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(61.63)), vec2(_GLF_FUZZED(2.0), (injectionSwitch)[1]), bvec2(false, true))), clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(61.63)), vec2(_GLF_FUZZED(2.0), (injectionSwitch)[1]), bvec2(false, true))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(61.63)), vec2(_GLF_FUZZED(2.0), (injectionSwitch)[1]), bvec2(false, true))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)))[0], _GLF_FUZZED(61.63)), vec2(_GLF_FUZZED(2.0), (injectionSwitch)[1]), bvec2(false, true))))).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), mix(float(_GLF_FUZZED(-6493.9539)), float(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0)), bool(true))))), (injectionSwitch)[0])), _GLF_FUZZED(61.63)), vec2(_GLF_FUZZED(2.0), _GLF_IDENTITY((injectionSwitch)[1], float(_GLF_IDENTITY(mat4((injectionSwitch)[1], 1.0, 0.0, 0.0, abs(0.0), 0.0, 0.0, 1.0, 0.0, 1.0, sqrt(1.0), 0.0, _GLF_IDENTITY(length(0.0), (false ? _GLF_FUZZED(-5.6) : length(0.0))), 1.0, 1.0, 0.0), (mat4((injectionSwitch)[1], 1.0, 0.0, 0.0, abs(0.0), 0.0, 0.0, 1.0, 0.0, 1.0, sqrt(1.0), 0.0, _GLF_IDENTITY(length(0.0), (false ? _GLF_FUZZED(-5.6) : length(0.0))), 1.0, 1.0, 0.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), bvec2(false, true))), clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(61.63)), vec2(_GLF_FUZZED(2.0), (injectionSwitch)[1]), _GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), true, false)), bvec2(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), true, false))))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), true, false)), bvec2(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), true, false))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), true, false)), bvec2(bvec2(bvec2(bvec4(bvec2(bvec2(bvec2(false, true))), true, false))))))), false, false))), false, true))))), _GLF_IDENTITY(bvec2(bvec2(bvec2(bvec2(bvec2(false, true))))), bvec2(bvec4(bvec2(bvec2(bvec2(bvec2(bvec2(false, true))))), false, true)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(61.63)), vec2(_GLF_FUZZED(2.0), (injectionSwitch)[1]), bvec2(false, true))), vec2(mat2(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(61.63)), vec2(_GLF_FUZZED(2.0), (injectionSwitch)[1]), bvec2(false, true))), cos(sin(0.0)), 0.0))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(61.63)), vec2(_GLF_FUZZED(2.0), _GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) / 1.0), 1.0, sqrt(0.0), abs(1.0), 0.0, 0.0)), clamp(float(mat3x2(_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) / 1.0), 1.0, sqrt(0.0), abs(1.0), 0.0, 0.0)), float(mat3x2(_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) / 1.0), 1.0, sqrt(0.0), abs(1.0), 0.0, 0.0)), float(mat3x2(_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) / 1.0), 1.0, sqrt(0.0), abs(1.0), 0.0, 0.0)))))), bvec2(false, true))))).y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], 0.0 + (_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[_GLF_IDENTITY(0, 1 * (0))]) / 1.0))), (injectionSwitch)[0])), _GLF_FUZZED(61.63)), vec2(_GLF_FUZZED(2.0), (injectionSwitch)[1]), bvec2(false, true))), clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(61.63)), vec2(_GLF_FUZZED(2.0), (injectionSwitch)[1]), _GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec2(bvec2(bvec2(bvec2(false, true)))))))))))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(4.6)), bool(false))), _GLF_FUZZED(61.63)), vec2(_GLF_FUZZED(2.0), (injectionSwitch)[1]), bvec2(false, true))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(61.63)), vec2(_GLF_FUZZED(2.0), (injectionSwitch)[1]), bvec2(false, true))))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], 0.0 + (_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0))))), (injectionSwitch)[0])), _GLF_FUZZED(61.63)), vec2(_GLF_FUZZED(2.0), (injectionSwitch)[1]), bvec2(false, true))), clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)))[0], _GLF_FUZZED(61.63)), vec2(_GLF_IDENTITY(_GLF_FUZZED(2.0), (_GLF_FUZZED(2.0)) - 0.0), (injectionSwitch)[1]), _GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec2(bvec2(bvec2(bvec2(false, true)))))))))))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(61.63)), vec2(_GLF_FUZZED(2.0), (injectionSwitch)[1]), bvec2(false, true))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(61.63)), vec2(_GLF_FUZZED(2.0), _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)))[1]), bvec2(false, true))))).y, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], 0.0 + (_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0))), (injectionSwitch)[0])), _GLF_FUZZED(61.63)), vec2(_GLF_FUZZED(2.0), (injectionSwitch)[1]), bvec2(false, true))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], 0.0 + (_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0))), (injectionSwitch)[0])), _GLF_FUZZED(61.63)), vec2(_GLF_FUZZED(2.0), (injectionSwitch)[1]), bvec2(false, true))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], 0.0 + (_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0))), (injectionSwitch)[0])), _GLF_FUZZED(61.63)), vec2(_GLF_FUZZED(2.0), (injectionSwitch)[1]), bvec2(false, true))), vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], 0.0 + (_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0))), (injectionSwitch)[0])), _GLF_FUZZED(61.63)), vec2(_GLF_FUZZED(2.0), (injectionSwitch)[1]), bvec2(false, true))), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0)))) * vec2(1.0, 1.0))) / vec2(1.0, 1.0)), clamp(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(61.63)), clamp(vec2((injectionSwitch)[0], _GLF_FUZZED(61.63)), vec2((injectionSwitch)[0], _GLF_FUZZED(61.63)), vec2((injectionSwitch)[0], _GLF_FUZZED(61.63)))), vec2(_GLF_FUZZED(2.0), (injectionSwitch)[1]), _GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec2(bvec2(bvec2(bvec2(false, true)))))))))))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(61.63)), vec2(_GLF_FUZZED(2.0), (injectionSwitch)[1]), bvec2(false, true))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(61.63)), vec2(_GLF_FUZZED(_GLF_IDENTITY(2.0, max(2.0, 2.0))), (injectionSwitch)[1]), bvec2(false, true))))).y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], 0.0 + (_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0))), (injectionSwitch)[0])), _GLF_FUZZED(61.63)), vec2(_GLF_FUZZED(2.0), (injectionSwitch)[1]), bvec2(false, true))), vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], 0.0 + (_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0))), (injectionSwitch)[0])), _GLF_FUZZED(61.63)), vec2(_GLF_FUZZED(2.0), (injectionSwitch)[1]), bvec2(false, true))), 1.0, 1.0, exp(0.0), 1.0), mat3x2(mat3(mat3x2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], 0.0 + (_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0))), (injectionSwitch)[0])), _GLF_FUZZED(61.63)), vec2(_GLF_FUZZED(2.0), (injectionSwitch)[1]), bvec2(false, true))), 1.0, 1.0, exp(0.0), 1.0)))))), clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(61.63)), vec2(_GLF_FUZZED(2.0), (injectionSwitch)[1]), _GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec2(bvec2(bvec2(bvec2(false, true)))))))))))), _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(61.63)), mix(vec2((vec2((injectionSwitch)[0], _GLF_FUZZED(61.63)))[0], _GLF_IDENTITY((vec2((injectionSwitch)[0], _GLF_FUZZED(61.63)))[1], float(vec3((vec2((injectionSwitch)[0], _GLF_FUZZED(61.63)))[1], 0.0, 1.0)))), vec2(_GLF_FUZZED(-4.1), _GLF_FUZZED(1.1)), bvec2(false, false))), vec2(_GLF_IDENTITY(_GLF_FUZZED(2.0), max(_GLF_FUZZED(2.0), _GLF_FUZZED(2.0))), (injectionSwitch)[1]), bvec2(false, true))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED((refract(-699.711, -3.2, -5.6) / 73.60)) : _GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])))), _GLF_FUZZED(61.63)), vec2(_GLF_FUZZED(2.0), (injectionSwitch)[1]), bvec2(false, true))))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], 0.0 + (_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0))), (injectionSwitch)[0])), _GLF_FUZZED(61.63)), vec2(_GLF_FUZZED(2.0), (injectionSwitch)[1]), bvec2(false, true))), clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(61.63)), vec2(_GLF_FUZZED(2.0), (injectionSwitch)[1]), _GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), _GLF_IDENTITY(bvec2(bvec2(bvec2(bvec2(bvec2(false, true))))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(bvec2(bvec2(false, true))))), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(bvec2(bvec2(bvec2(bvec2(false, true))))), false), false)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec2(bvec2(bvec2(bvec2(bvec2(false, true))))), false), false)), true))))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(bvec2(bvec2(false, true))))), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(bvec2(bvec2(bvec2(bvec2(false, true))))), false), false)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec2(bvec2(bvec2(bvec2(bvec2(false, true))))), false), false)), true))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(bvec2(bvec2(bvec2(false, true))))), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(bvec2(bvec2(bvec2(bvec2(false, true))))), false), false)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec2(bvec2(bvec2(bvec2(bvec2(false, true))))), false), false)), true))))), true)))))))))))))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(61.63)), vec2(_GLF_FUZZED(2.0), (injectionSwitch)[1]), bvec2(false, true))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(61.63)), vec2(_GLF_FUZZED(2.0), (injectionSwitch)[1]), bvec2(false, true))))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], _GLF_FUZZED(196.326)), vec2(_GLF_FUZZED(13.70), ((injectionSwitch))[1]), bvec2(false, true)))[0], max(_GLF_IDENTITY((injectionSwitch)[0], 0.0 + (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(9178.5198), _GLF_FUZZED(-283.146)), bvec2(false, false))))[0], ((injectionSwitch)[0]) / 1.0))), (injectionSwitch)[0])), _GLF_FUZZED(61.63)), vec2(_GLF_FUZZED(2.0), (injectionSwitch)[1]), bvec2(false, true))), clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(61.63)), vec2(_GLF_FUZZED(2.0), (injectionSwitch)[1]), _GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec2(bvec2(bvec2(bvec2(false, true)))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec2(bvec2(bvec2(bvec2(false, true)))))), false, false))))))))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(61.63)), vec2(_GLF_FUZZED(2.0), _GLF_IDENTITY((injectionSwitch)[1], 1.0 * (_GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))))), bvec2(false, true))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(61.63)), vec2(_GLF_FUZZED(2.0), (injectionSwitch)[1]), bvec2(false, true))))).y))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), true, true, false)))), bool(bvec2(bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), true, true, false)))), true))))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(722.944)), float(injectionSwitch.x), bool(true))) > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(ivec3(_injected_loop_counter, 0, 0), ivec3(0, 0, 0) ^ (ivec3(_injected_loop_counter, 0, 0))))) != 1); _injected_loop_counter ++)
      {
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false))) || false)))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))))).y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(8409.8367), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-723.784)), bvec2(true, false))).x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
          barrier();
         return;
        }
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_struct_replacement_1._f0.subgroup_local_id + 1 < subgroup_size)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       int i = 0;
       atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, (read) + 0u), 4, 64, 4);
      }
     else
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, (0) ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false)))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, max(read, read)), 4, 64, 4);
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false)))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(_GLF_IDENTITY(729.891, (_GLF_IDENTITY(729.891, min(_GLF_IDENTITY(729.891, float(vec3(729.891, 1.0, 0.0))), 729.891))) - 0.0))), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))))), bool(true))) > injectionSwitch.y))), ! (! ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(_GLF_IDENTITY(729.891, (_GLF_IDENTITY(729.891, min(_GLF_IDENTITY(729.891, float(vec3(729.891, 1.0, 0.0))), 729.891))) - 0.0))), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))))), bool(true))) > injectionSwitch.y)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(4.8)), bool(false))), 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(4.8)), bool(false))), clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(4.8)), bool(false))), _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(4.8)), bool(false))), _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(4.8)), bool(false))))))), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))), injectionSwitch.x)), mix(float(_GLF_FUZZED(_GLF_IDENTITY(729.891, _GLF_IDENTITY((729.891) - 0.0, min((729.891) - 0.0, (729.891) - 0.0))))), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), bool(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), true, false))), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), true, false))), false), true)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), true, false))), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), true, false))), false), true))))))))))))) > injectionSwitch.y)))))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
