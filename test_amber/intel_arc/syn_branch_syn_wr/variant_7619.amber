#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))) || false)))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, false))))))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 else
  {
  }
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID)).x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID)).x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID)).x)))) ^ 0u);
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   switch(_GLF_SWITCH((0 >> _GLF_IDENTITY(int(0), int(0)))))
    {
     case 37:
     uvec2 _GLF_SWITCH_4_0v, _GLF_SWITCH_4_1v;
     if(_GLF_DEAD(false))
      return;
     case 88:
     {
      ((vec4(9.9, 8718.0640, 5.4, -967.457) - -9.2) != vec4(-2244.8478, 59.03, -919.486, -2.0));
      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
       barrier();
      mat3(mat3x4(5.5, 966.821, -28.23, -73.54, -9.3, -547.797, -2608.3406, -9.1, 823.877, -9167.2265, 61.47, 189.117));
      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
       {
        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
         return;
        barrier();
       }
      vec4 _GLF_SWITCH_4_2v, _GLF_SWITCH_4_3v;
      mat2(-5.1, -9784.3469, -3.4, -76.36);
      mat2(_GLF_IDENTITY(6774.4122, _GLF_IDENTITY(float(vec2(6774.4122, 1.0)), float(mat2(float(vec2(6774.4122, 1.0)), 0.0, 1.0, 1.0)))), -3865.4021, 4.7, 4860.8886);
     }
     case 0:
     case 78:
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, (64) | 0), 4);
     break;
     case 33:
     for(ivec3 _GLF_SWITCH_4_4v[87], _GLF_SWITCH_4_5v, _GLF_SWITCH_4_6v; false; mat3(-55.62, -6.2, -2738.1678, 5429.6918, 4709.0692, 9.7, 289.052, 6529.1022, 985.711))
      {
       bvec4 _GLF_SWITCH_4_7v, _GLF_SWITCH_4_8v, _GLF_SWITCH_4_9v[13];
       for(       bitfieldInsert(_GLF_SWITCH_4_5v, _GLF_SWITCH_4_5v, 25753, 16839).brrr;
 false; mat4(4066.1026, 4.5, 78.11, 682.948, -6.3, -2.1, 4.0, 315.343, 602.668, 6.3, -4.6, 4.1, 9779.6807, 9661.9479, -433.810, -1.1))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
          barrier();
         if(_GLF_DEAD(false))
          continue;
         (+ mat2x4(-1.5, -4.0, 8134.2192, -7.9, _GLF_IDENTITY(-7.5, max(_GLF_IDENTITY(-7.5, (true ? -7.5 : _GLF_FUZZED(2.9))), -7.5)), -5.4, -9774.7996, 9.9));
        }
       for(vec4 _GLF_SWITCH_4_10v[32], _GLF_SWITCH_4_11v; false; _GLF_SWITCH_4_0v)
        {
         if(_GLF_DEAD(false))
          return;
         if((8.4 > 0.1))
          {
           if(_GLF_DEAD(false))
            continue;
           bvec4 _GLF_SWITCH_4_12v, _GLF_SWITCH_4_13v[9], _GLF_SWITCH_4_14v;
           greaterThanEqual(bitfieldExtract(_GLF_SWITCH_4_1v, 4613, -56531), (_GLF_SWITCH_4_0v ^ num_workgroup));
           uvec2(68410u, 1845u);
           vec3(-510.269, -0.0, 2544.1010);
           _GLF_SWITCH_4_12v.tpqs;
           mat4x3(80.87, -22.20, 7283.2182, 5.2, 4150.2782, 5454.2615, -7002.8308, -9.8, _GLF_IDENTITY(-1.1, _GLF_IDENTITY(float(mat3(-1.1, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), (float(mat3(-1.1, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_ZERO(0.0, injectionSwitch.x), 0.0))) - sin(0.0))), -402.818, 652.019, -5.3);
           bvec3 _GLF_SWITCH_4_15v[27], _GLF_SWITCH_4_16v;
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            continue;
           mat4x2 _GLF_SWITCH_4_17v;
           bvec2 _GLF_SWITCH_4_18v, _GLF_SWITCH_4_19v[44], _GLF_SWITCH_4_20v[38];
           mat4 _GLF_SWITCH_4_21v;
           notEqual(bvec2(true, true), bvec2(false, true));
           bvec3(true, false, false);
           clamp(_GLF_SWITCH_4_5v, -58991, int(workgroup_size));
          }
         {
          injectionSwitch;
         }
         do
          {
          }
         while(true);
         while((-442.090 > distance(-7546.9429, -46.17)))
          {
           vec3 _GLF_SWITCH_4_22v[97], _GLF_SWITCH_4_23v[8], _GLF_SWITCH_4_24v;
           lessThanEqual(_GLF_SWITCH_4_1v, _GLF_SWITCH_4_0v);
           (0.9 / cos(vec3(-127.369, -758.605, 93.22)));
           ((-899.405 / mat4x2(-0.6, -1691.2315, 879.473, 6.8, -8.3, -376.784, -4.1, -80.83)) / -548.358);
           mix(bvec2(false, false), bvec2(false, (uvec4(42538u, 41966u, 126596u, 84313u) == uvec4(8035u, 61520u, 105372u, 128798u))), bvec2(true, false));
           ivec4(15161, 27410, 27207, -23618);
           true;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           mat2x3(-507.944, -9.4, -2.1, -3.9, -68.32, 1.9);
          }
        }
       vec4 _GLF_SWITCH_4_25v;
       length(vec3(-0.7, 4318.9034, -2.5));
       if(_GLF_DEAD(false))
        continue;
       equal(_GLF_SWITCH_4_1v, uvec2(74021u, 150763u));
       while(true)
        {
        }
      }
     default:
     1;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || false), false, true, false)))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))) || false)))
          barrier();
        }
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], 0u + (buf[virtual_gid])), 4, 64, 0);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   switch(_GLF_SWITCH(0))
    {
     case 69:
     mat3x4 _GLF_SWITCH_0_0v;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     case 47:
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         switch(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))))
          {
           case 68:
           mat4(8003.7232, _GLF_IDENTITY(-7.0, mix(float(_GLF_FUZZED(1.1)), float(-7.0), bool(true))), 28.70, 555.387, 14.21, 84.16, 2.5, 1712.8024, _GLF_IDENTITY(3422.5318, (3422.5318) - _GLF_ZERO(0.0, injectionSwitch.x)), 2062.7497, -7582.0507, -1.7, 430.155, -3755.8613, _GLF_IDENTITY(-5.4, (-5.4) / 1.0), -4595.4496);
           case 88:
           ivec2 _GLF_SWITCH_3_0v, _GLF_SWITCH_3_1v, _GLF_SWITCH_3_2v;
           case 0:
           if(_GLF_DEAD(false))
            return;
           case 47:
           if(_GLF_DEAD(false))
            return;
           case 85:
           case 86:
           if(_GLF_DEAD(false))
            barrier();
           case 40:
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           case 99:
           case 27:
           case 66:
           case 78:
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           return;
           break;
           if(_GLF_DEAD(false))
            return;
           default:
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           1;
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
      }
     ;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     case 0:
     if(_GLF_DEAD(false))
      barrier();
     case 38:
     case 23:
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
      return;
     case 82:
     case 63:
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     int i = 0;
     if(_GLF_DEAD(false))
      return;
     case 46:
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     case 1:
     case 10:
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            return;
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, true)))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
       else
        {
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
     case 52:
     atomicStore(checker[virtual_gid], read, 4, 64, 4);
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     break;
     case 77:
     if(((ivec4(96078, 45262, -6966, 11491).w ^ 43959) < -41703))
      {
       atan(vec2(-3382.6996, -33.25), (true ? injectionSwitch : injectionSwitch));
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, true && (true))))))
        {
         if(_GLF_DEAD(false))
          return;
         if((mat2(6.5, -9866.4926, -55.38, -1.6) == ((mat2(9309.8485, -91.70, -21.20, -7.2) - -74.33))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           ivec4 _GLF_SWITCH_0_1v[85], _GLF_SWITCH_0_2v[19];
           {
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             return;
            uvec4 _GLF_SWITCH_0_3v[20], _GLF_SWITCH_0_4v;
            if(_GLF_WRAPPED_IF_FALSE(false))
             {
             }
            else
             {
              switch(_GLF_SWITCH(0))
               {
                case 21:
                mat3 _GLF_SWITCH_2_0v[2], _GLF_SWITCH_2_1v, _GLF_SWITCH_2_2v;
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 barrier();
                case 87:
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 barrier();
                if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 {
                 }
                else
                 {
                  if(_GLF_DEAD(false))
                   return;
                  mat4(6.2, 6.3, -5354.1978, -7.0, 88.94, 2.6, _GLF_IDENTITY(3844.3105, min(_GLF_IDENTITY(3844.3105, clamp(3844.3105, 3844.3105, 3844.3105)), 3844.3105)), 4.9, -545.280, 3671.1048, 3961.9376, 668.214, 942.967, -3389.3310, -24.81, -8.9);
                 }
                case 0:
                if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(41.37, -7.2)) : _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).x > injectionSwitch.y))))
                 return;
                case 47:
                case 23:
                case 82:
                if(_GLF_DEAD(false))
                 barrier();
                case 1:
                case 63:
                case 70:
                case 39:
                case 27:
                if(_GLF_DEAD(false))
                 barrier();
                case 64:
                if(_GLF_DEAD(false))
                 barrier();
                if(_GLF_WRAPPED_IF_FALSE(false))
                 {
                 }
                else
                 {
                  if(_GLF_WRAPPED_IF_FALSE(false))
                   {
                   }
                  else
                   {
                    if(_GLF_DEAD(false))
                     return;
                    if(_GLF_DEAD(false))
                     return;
                    (ivec4(8341, -69227, 40279, -58611) / -86133);
                   }
                  if(_GLF_DEAD(false))
                   {
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     barrier();
                    return;
                   }
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   barrier();
                  if(_GLF_DEAD(false))
                   {
                    if(_GLF_WRAPPED_IF_TRUE(true))
                     {
                      return;
                     }
                    else
                     {
                     }
                   }
                 }
                if(_GLF_DEAD(false))
                 return;
                break;
                case 88:
                mat3x4 _GLF_SWITCH_2_3v, _GLF_SWITCH_2_4v;
                case 59:
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_WRAPPED_IF_TRUE(true))
                   {
                    if(_GLF_DEAD(false))
                     barrier();
                    barrier();
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     return;
                   }
                  else
                   {
                   }
                 }
                ivec3(-37809, 97304, -6844);
                default:
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                   barrier();
                  if(_GLF_DEAD(false))
                   return;
                  barrier();
                 }
                1;
               }
             }
            if(_GLF_WRAPPED_IF_TRUE(true))
             {
              if(_GLF_DEAD(false))
               return;
             }
            else
             {
             }
            ;
            if(_GLF_DEAD(false))
             barrier();
            if(_GLF_DEAD(false))
             return;
            mat3x4 _GLF_SWITCH_0_5v[41];
            if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
             return;
            mat4x3(mat2(-9.6, 8906.8491, -1755.7451, _GLF_IDENTITY(10.55, (false ? _GLF_FUZZED(7.2) : _GLF_IDENTITY(10.55, float(vec2(10.55, 1.0)))))));
            if(_GLF_DEAD(false))
             {
              if(_GLF_WRAPPED_IF_TRUE(true))
               {
                if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 {
                  for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                   {
                    switch(_GLF_SWITCH(0))
                     {
                      case 75:
                      vec4 _GLF_SWITCH_4_0v, _GLF_SWITCH_4_1v, _GLF_SWITCH_4_2v;
                      case 0:
                      case 2:
                      case 15:
                      case 8:
                      case 81:
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       barrier();
                      if(_GLF_DEAD(false))
                       return;
                      break;
                      default:
                      1;
                     }
                   }
                 }
                else
                 {
                  barrier();
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   return;
                  for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ (_GLF_IDENTITY(0 | 0, int(_GLF_IDENTITY(int(_GLF_IDENTITY(0 | 0, (0 | 0) | (_GLF_IDENTITY(0 | 0, (0 | 0) >> 0)))), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_IDENTITY(0 | 0, (0 | 0) | (_GLF_IDENTITY(0 | 0, (0 | 0) >> 0))))))))))); _injected_loop_counter ++)
                   {
                    if(_GLF_DEAD(false))
                     {
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       return;
                      do
                       {
                        return;
                       }
                      while(_GLF_WRAPPED_LOOP(false));
                     }
                   }
                 }
               }
              else
               {
               }
             }
            uvec2(uvec3(45280u, 172947u, 46620u));
            ((_GLF_IDENTITY(3.3, mix(float(3.3), float(_GLF_FUZZED(2.7)), bool(false))) - -72.45) - mat3x2(21.25, -189.379, -9.9, -6.2, 72.08, 0.7));
            if(_GLF_DEAD(false))
             barrier();
            if(_GLF_DEAD(false))
             return;
            bvec2(false, false);
            if(_GLF_DEAD(false))
             return;
            bvec2 _GLF_SWITCH_0_6v[41], _GLF_SWITCH_0_7v, _GLF_SWITCH_0_8v;
           }
           if(all(bvec4(true, false, true, true)))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
              {
               switch(_GLF_SWITCH(0))
                {
                 case 0:
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   break;
                  }
                 case 4:
                 case 37:
                 case 40:
                 case 91:
                 if(_GLF_DEAD(false))
                  return;
                 case 61:
                 mat4x3(8.0, -5.0, -0.7, -316.460, 6246.2427, -685.961, 6.0, 64.01, -838.977, 82.31, -772.291, 3.5);
                 break;
                 if(_GLF_DEAD(false))
                  break;
                 case 48:
                 (- mat2x3(7094.9699, -2.8, 5012.8326, -769.663, 1.0, 815.669));
                 case 6:
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  continue;
                 uvec4 _GLF_SWITCH_2_0v;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   barrier();
                  }
                 default:
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 1;
                }
              }
             mat2x4 _GLF_SWITCH_0_9v, _GLF_SWITCH_0_10v;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               switch(_GLF_SWITCH((-80510 & 0)))
                {
                 case 0:
                 if(_GLF_DEAD(false))
                  return;
                 case 93:
                 if(_GLF_DEAD(false))
                  barrier();
                 case 50:
                 if(_GLF_DEAD(false))
                  barrier();
                 case 95:
                 case 32:
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, false || _GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)), bool(bool(_GLF_IDENTITY((true), ! (! ((true)))))))), (injectionSwitch.x < injectionSwitch.y))))
                  {
                   switch(_GLF_SWITCH((0 ^ 0)))
                    {
                     case 93:
                     mat2x3(_GLF_SWITCH_0_9v);
                     if(_GLF_DEAD(false))
                      return;
                     case 76:
                     int _GLF_SWITCH_3_0v, _GLF_SWITCH_3_1v[44];
                     case 0:
                     case 53:
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      return;
                     return;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       return;
                      }
                     break;
                     case 51:
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     if(_GLF_DEAD(false))
                      return;
                     ivec2 _GLF_SWITCH_3_2v, _GLF_SWITCH_3_3v;
                     case 1:
                     read;
                     default:
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false))))))
                      {
                       1;
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), bool(bool(! (_GLF_IDENTITY(false, ! (! (false)))))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), bool(bool(! (_GLF_IDENTITY(false, ! (! (false))))))))) && true))))
                    return;
                  }
                 break;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   return;
                  }
                 case 6:
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                  return;
                 mat3x2 _GLF_SWITCH_1_0v, _GLF_SWITCH_1_1v, _GLF_SWITCH_1_2v[1];
                 default:
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 1;
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                return;
               mat4x2(-202.393, 6670.1796, -9248.3766, 36.64, -2.8, 2.8, _GLF_IDENTITY(-0.9, float(vec2(-0.9, 0.0))), 856.428);
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if((ivec3(98114, -9554, -25494) != ivec3(-74415, 89775, 19900)))
            {
             asinh(-22.60);
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             vec4(_GLF_IDENTITY(-885.904, _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(-885.904, (-885.904) / 1.0), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, log(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))), 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(-8404.1933) : float(mat3x4(_GLF_IDENTITY(-885.904, (-885.904) / 1.0), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, log(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))), 1.0, 1.0, 1.0))))), -3.1, -980.148, 0.3);
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
              barrier();
             int _GLF_SWITCH_0_11v, _GLF_SWITCH_0_12v[91], _GLF_SWITCH_0_13v;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), bool(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))), _GLF_IDENTITY(true, (true) || false) && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)) && true, bool(bvec3(_GLF_IDENTITY((! (false)) && true, ((! (false)) && true) || false), false, _GLF_IDENTITY(false, (false) || false)))))))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                return;
               return;
              }
             uvec2 _GLF_SWITCH_0_14v[80], _GLF_SWITCH_0_15v, _GLF_SWITCH_0_16v[16];
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 barrier();
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                break;
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                barrier();
               num_workgroup;
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             do
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), true && (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               min(uvec3(151922u, 139698u, 137833u), (uvec3(5439u, 174777u, 190382u) ^ 47689u));
              }
             bool _GLF_SWITCH_0_17v;
             mat2x3(-5.6, -332.267, 7.4, 3.7, -92.37, 0.2);
             if(_GLF_DEAD(false))
              return;
             ;
            }
           if(_GLF_DEAD(false))
            barrier();
           while(false)
            {
             switch(_GLF_IDENTITY(_GLF_SWITCH(((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), _GLF_IDENTITY(int(5), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (int(5))))), int(5))) >> _GLF_IDENTITY(int(0), int(0)))), int(ivec4(_GLF_SWITCH(((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), _GLF_IDENTITY(int(5), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (int(5))))), int(5))) >> _GLF_IDENTITY(int(0), int(0)))), 0, 1, 0))))
              {
               case 41:
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                break;
               bool _GLF_SWITCH_2_0v;
               if(_GLF_DEAD(false))
                barrier();
               case 91:
               if(_GLF_DEAD(false))
                continue;
               47664;
               case 0:
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                barrier();
               case 36:
               40881;
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     barrier();
                    }
                  }
                 barrier();
                }
               case 29:
               i;
               (7.1 , uvec4(161313u, 2541u, 614u, 88870u));
               case 53:
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3848.1651) : injectionSwitch.x)) > injectionSwitch.y)), false, true, false)))))
                break;
               case 49:
               bvec3(true, true, false);
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
               ivec3 _GLF_SWITCH_0_18v, _GLF_SWITCH_0_19v;
               case 45:
               case 22:
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   barrier();
                  }
                 return;
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 -92987;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 switch(_GLF_SWITCH(0))
                  {
                   case 3:
                   injectionSwitch.s;
                   case 34:
                   int _GLF_SWITCH_3_0v;
                   case 0:
                   case 91:
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   case 45:
                   case 46:
                   case 77:
                   case 39:
                   case 2:
                   case 79:
                   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec3(! (_GLF_DEAD(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bvec2(bool(bvec3(! (_GLF_DEAD(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), false)))), (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec3(! (_GLF_DEAD(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bvec2(bool(bvec3(! (_GLF_DEAD(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), false))))) && true)))) && true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         switch(_GLF_SWITCH(_GLF_IDENTITY(0, int(ivec3(0, 0, int(_GLF_ZERO(0.0, injectionSwitch.x)))))))
                          {
                           case 15:
                           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), false)))))
                            barrier();
                           653.555;
                           case 12:
                           bvec3(false, false, false);
                           case 0:
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            continue;
                           case 7:
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              continue;
                             barrier();
                            }
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(false))
                              continue;
                             return;
                            }
                           break;
                           case 47:
                           vec4 _GLF_SWITCH_4_0v;
                           case 62:
                           (mat4(-30.20, -1.6, -48.99, -3.8, 91.40, -8945.6687, 9.2, 4862.0833, -5.7, 0.4, 1.7, -154.420, 2696.2126, -1.6, -722.894, 719.726) + _GLF_IDENTITY(-24.62, min(-24.62, _GLF_IDENTITY(-24.62, mix(float(-24.62), float(_GLF_FUZZED(9453.2990)), bool(false))))));
                           default:
                           1;
                          }
                        }
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   case 93:
                   case 60:
                   barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     continue;
                    }
                   break;
                   default:
                   1;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
               break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                return;
               default:
               1;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(_GLF_IDENTITY(bvec2(bool(bvec2(false, true)), false), bvec2(bvec2(bvec2(bool(bvec2(false, true)), false)))))))))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            return;
           mat2x3(vec3(-4.8, 1368.6967, 7.5), vec3(6700.4102, 64.61, -6.6));
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           ivec4(24588, -96623, 16812, 11798).wwyw;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           do
            {
             (mat3(_GLF_IDENTITY(-40.97, (true ? -40.97 : _GLF_FUZZED(2.0))), 8.6, 5.7, _GLF_IDENTITY(-9.2, (-9.2) + _GLF_ZERO(0.0, injectionSwitch.x)), 11.75, -873.825, 5.2, -35.91, 2737.7975) * _GLF_IDENTITY(mat3(6329.8746, 6023.0946, 669.865, 711.021, -671.357, -8.2, -850.220, 6446.2244, -0.4), (true ? mat3(6329.8746, 6023.0946, 669.865, 711.021, -671.357, -8.2, -850.220, 6446.2244, -0.4) : _GLF_FUZZED(mat3(-9.0, -709.403, -315.265, -1.1, 4.8, 92.31, 6.6, 1.6, 7.5)))));
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 break;
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   barrier();
                  }
                 barrier();
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   return;
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), false || (false))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               switch(_GLF_SWITCH(0))
                {
                 case 70:
                 mat2((mat4x3(-31.70, -5557.9818, -5053.3080, 6488.6107, 916.474, -8011.8535, -8145.3051, -8522.0704, 7.9, 9769.5407, 4546.3073, 655.405) - 271.057));
                 case 0:
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   barrier();
                   if(_GLF_DEAD(false))
                    return;
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   return;
                  }
                 if(_GLF_DEAD(false))
                  break;
                 break;
                 if(_GLF_DEAD(false))
                  return;
                 default:
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 1;
                }
              }
             int _GLF_SWITCH_0_20v;
             uint _GLF_SWITCH_0_21v[70], _GLF_SWITCH_0_22v[5];
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             (inversesqrt(5.4) , min(uvec2(69947u, 180750u), subgroup_size));
             mat2 _GLF_SWITCH_0_23v[19], _GLF_SWITCH_0_24v;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              continue;
             (302.676 / mat2x3(-998.856, -71.16, -9.3, 52.96, 1.3, 991.524));
            }
           while(_GLF_IDENTITY(true, ! (! (true))));
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             for(uvec2 _GLF_SWITCH_0_25v, _GLF_SWITCH_0_26v, _GLF_SWITCH_0_27v; lessThanEqual(vec2(5.4, -4.4), vec2(-17.52, -99.90))[1]; false)
              {
               if(_GLF_DEAD(false))
                barrier();
               bvec2(false, false);
               if(_GLF_DEAD(false))
                return;
               vec3(7.2, 2.8, 60.87)[0];
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                  barrier();
                }
               mat3x4 _GLF_SWITCH_0_28v, _GLF_SWITCH_0_29v;
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                barrier();
               do
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
                  {
                   (~ ivec4(-30152, -49418, -57604, -45893));
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            return;
           {
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             return;
            bool _GLF_SWITCH_0_30v[91], _GLF_SWITCH_0_31v, _GLF_SWITCH_0_32v;
            if(_GLF_WRAPPED_IF_FALSE(false))
             {
             }
            else
             {
              if(_GLF_DEAD(false))
               return;
             }
            bvec2 _GLF_SWITCH_0_33v, _GLF_SWITCH_0_34v;
            if(_GLF_DEAD(false))
             {
              if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
               {
               }
              else
               {
                if(_GLF_DEAD(false))
                 barrier();
               }
              barrier();
              for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + int(_GLF_ZERO(0.0, injectionSwitch.x))) < 1); _injected_loop_counter ++)
               {
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 barrier();
               }
             }
            if(_GLF_DEAD(false))
             {
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               return;
              if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
               {
                if(_GLF_DEAD(false))
                 barrier();
                if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                 {
                 }
                else
                 {
                  if(_GLF_DEAD(false))
                   return;
                  return;
                 }
               }
              return;
              if(_GLF_DEAD(false))
               return;
             }
            ;
            if(_GLF_DEAD(false))
             return;
            do
             {
              mat4(-702.111, 462.836, 3.9, 5.4, 7.4, -1436.8731, 279.310, 270.439, 972.228, 3090.1945, -343.652, 3.0, _GLF_IDENTITY(2.8, min(2.8, _GLF_IDENTITY(2.8, (2.8) / 1.0))), 988.736, -82.80, -318.721);
             }
            while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))));
            mat2(922.093, 254.167, 2.0, -1.8);
            mat4 _GLF_SWITCH_0_35v[39];
            mat4x3 _GLF_SWITCH_0_36v, _GLF_SWITCH_0_37v;
            if(_GLF_DEAD(false))
             {
              if(_GLF_DEAD(false))
               return;
              if(_GLF_DEAD(false))
               {
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   return;
                  switch(_GLF_SWITCH(_GLF_IDENTITY(0, (0) | (0))))
                   {
                    case 61:
                    greaterThan(uvec3(138654u, 154477u, 4031u), uvec3(152702u, 17251u, 148500u));
                    case 0:
                    case 13:
                    if(_GLF_DEAD(false))
                     {
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       barrier();
                      barrier();
                     }
                    if(_GLF_DEAD(false))
                     barrier();
                    do
                     {
                      if(_GLF_DEAD(false))
                       return;
                      barrier();
                      if(_GLF_DEAD(false))
                       break;
                     }
                    while(_GLF_WRAPPED_LOOP(false));
                    break;
                    case 56:
                    float _GLF_SWITCH_3_0v[53], _GLF_SWITCH_3_1v, _GLF_SWITCH_3_2v;
                    default:
                    1;
                   }
                 }
                do
                 {
                  switch(_GLF_SWITCH((0 << _GLF_IDENTITY(int(7), int(7)))))
                   {
                    case 45:
                    if(_GLF_DEAD(false))
                     break;
                    vec3 _GLF_SWITCH_3_0v[12], _GLF_SWITCH_3_1v[70], _GLF_SWITCH_3_2v[83];
                    case 4:
                    exp2(vec3(-67.52, -2.7, -28.86));
                    case 0:
                    return;
                    break;
                    case 89:
                    roundEven(8.1);
                    default:
                    1;
                   }
                 }
                while(_GLF_WRAPPED_LOOP(false));
               }
              return;
              if(_GLF_DEAD(false))
               return;
             }
            uvec2 _GLF_SWITCH_0_38v;
            greaterThanEqual(_GLF_SWITCH_0_0v[1].ywx, vec3(-6.1, 438.614, 0.0));
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             return;
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             return;
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             {
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               barrier();
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               return;
              return;
             }
            if(_GLF_DEAD(false))
             return;
           }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           if(_GLF_DEAD(false))
            return;
           _GLF_IDENTITY((- (980.075 - (_GLF_IDENTITY(mat4(-7137.9647, 305.404, -437.652, 70.15, 3090.4225, 72.52, 5.9, -121.534, 6352.9452, 6.5, 2.5, _GLF_IDENTITY(-6.2, float(mat3x2(-6.2, cos(0.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))))), -2024.5842, -1639.8956, -38.15, 7.3), (true ? _GLF_IDENTITY(_GLF_IDENTITY(mat4(_GLF_IDENTITY(-7137.9647, (false ? _GLF_FUZZED(31.52) : _GLF_IDENTITY(-7137.9647, min(_GLF_IDENTITY(-7137.9647, (true ? -7137.9647 : _GLF_FUZZED(854.216))), -7137.9647)))), 305.404, -437.652, 70.15, 3090.4225, 72.52, 5.9, -121.534, 6352.9452, 6.5, 2.5, -6.2, _GLF_IDENTITY(-2024.5842, mix(float(_GLF_FUZZED(57.11)), float(-2024.5842), bool(true))), -1639.8956, -38.15, 7.3), (mat4(_GLF_IDENTITY(-7137.9647, (false ? _GLF_FUZZED(31.52) : _GLF_IDENTITY(-7137.9647, min(_GLF_IDENTITY(-7137.9647, (true ? -7137.9647 : _GLF_FUZZED(854.216))), -7137.9647)))), 305.404, -437.652, 70.15, 3090.4225, 72.52, 5.9, -121.534, 6352.9452, 6.5, 2.5, -6.2, _GLF_IDENTITY(-2024.5842, mix(float(_GLF_FUZZED(57.11)), float(-2024.5842), bool(true))), -1639.8956, -38.15, 7.3)) * mat4(1.0)), mat4(1.0) * (mat4(-7137.9647, 305.404, -437.652, 70.15, 3090.4225, 72.52, 5.9, -121.534, 6352.9452, 6.5, 2.5, -6.2, -2024.5842, -1639.8956, -38.15, 7.3))) : _GLF_FUZZED(mat4(1852.2704, 3.9, 561.281, 6.4, 9218.0805, -2324.1698, -9610.8495, 9.5, -41.81, 10.27, 9.2, 9.9, 8.8, 1598.8123, -346.077, -96.90)))) - 2.2))), ((- (980.075 - (_GLF_IDENTITY(mat4(-7137.9647, 305.404, -437.652, 70.15, 3090.4225, 72.52, 5.9, -121.534, 6352.9452, 6.5, 2.5, -6.2, -2024.5842, -1639.8956, -38.15, 7.3), (true ? _GLF_IDENTITY(mat4(-7137.9647, 305.404, -437.652, 70.15, 3090.4225, 72.52, 5.9, -121.534, 6352.9452, 6.5, 2.5, _GLF_IDENTITY(-6.2, min(-6.2, -6.2)), -2024.5842, -1639.8956, -38.15, 7.3), mat4(1.0) * (mat4(-7137.9647, 305.404, -437.652, 70.15, 3090.4225, 72.52, 5.9, -121.534, 6352.9452, 6.5, 2.5, -6.2, -2024.5842, -1639.8956, -38.15, _GLF_IDENTITY(7.3, _GLF_IDENTITY(float(mat2(7.3, 0.0, 1.0, 0.0)), (false ? _GLF_FUZZED(-2.3) : float(mat2(7.3, 0.0, 1.0, 0.0)))))))) : _GLF_FUZZED(mat4(1852.2704, 3.9, 561.281, 6.4, 9218.0805, -2324.1698, -9610.8495, 9.5, -41.81, 10.27, 9.2, 9.9, 8.8, _GLF_IDENTITY(1598.8123, mix(float(_GLF_FUZZED(-9220.6632)), float(1598.8123), bool(true))), -346.077, -96.90)))) - 2.2)))) + mat4(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-3609.2805))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0));
           int _GLF_SWITCH_0_39v;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       ;
       {
        switch(_GLF_SWITCH(0))
         {
          case 44:
          matrixCompMult(_GLF_SWITCH_0_0v, outerProduct(vec4(6.5, 7221.3910, 48.19, -9898.6672), vec3(389.895, 8.8, 5683.7961)));
          case 0:
          case 72:
          if(_GLF_DEAD(false))
           return;
          if(_GLF_DEAD(false))
           {
            switch(_GLF_SWITCH(0))
             {
              case 57:
              uvec2(167825u, 174193u);
              case 89:
              if(_GLF_DEAD(false))
               return;
              vec4(5.8, 3.9, -6.1, -7.4);
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               return;
              case 0:
              for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
               {
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 return;
               }
              case 66:
              if(_GLF_DEAD(false))
               {
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 barrier();
                if(_GLF_DEAD(false))
                 return;
                if(_GLF_DEAD(false))
                 return;
                barrier();
               }
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               return;
              case 32:
              return;
              case 3:
              case 71:
              case 63:
              case 24:
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               return;
              break;
              case 58:
              vec3 _GLF_SWITCH_4_0v, _GLF_SWITCH_4_1v[49], _GLF_SWITCH_4_2v;
              case 42:
              mat4x2 _GLF_SWITCH_4_3v, _GLF_SWITCH_4_4v[73], _GLF_SWITCH_4_5v[49];
              default:
              1;
             }
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             return;
           }
          if(_GLF_DEAD(false))
           barrier();
          case 49:
          case 36:
          ivec2(-74771, -92546);
          for(mat2x4 _GLF_SWITCH_0_40v[29], _GLF_SWITCH_0_41v[66], _GLF_SWITCH_0_42v; false; subgroup_id)
           {
            vec3 _GLF_SWITCH_0_43v, _GLF_SWITCH_0_44v, _GLF_SWITCH_0_45v;
            _GLF_IDENTITY(lessThanEqual(uvec3(79145u, 106527u, 189842u), uvec3(163570u, 180218u, 68116u)), bvec3(_GLF_IDENTITY(bvec3(lessThanEqual(uvec3(79145u, 106527u, 189842u), uvec3(163570u, 180218u, 68116u))), bvec3(bvec4(bvec3(lessThanEqual(uvec3(79145u, 106527u, 189842u), uvec3(163570u, 180218u, 68116u))), false)))));
           }
          {
           do
            {
             switch(_GLF_SWITCH(0))
              {
               case 0:
               case 45:
               case 31:
               switch(_GLF_SWITCH(0))
                {
                 case 0:
                 if(_GLF_DEAD(false))
                  barrier();
                 vec4 _GLF_SWITCH_0_46v, _GLF_SWITCH_0_47v[90];
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 mat4x2 _GLF_SWITCH_0_48v, _GLF_SWITCH_0_49v, _GLF_SWITCH_0_50v;
                 case 54:
                 (((mat2(-8.7, 963.356, -629.301, -0.2) * mat2(-31.64, 2.4, 8.1, -6.8)) * vec2(-8.3, _GLF_IDENTITY(-6788.9693, mix(float(-6788.9693), float(_GLF_FUZZED(1790.2569)), bool(false))))) , read);
                 bool _GLF_SWITCH_0_51v[85], _GLF_SWITCH_0_52v[39], _GLF_SWITCH_0_53v;
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                        barrier();
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
                        return;
                       barrier();
                      }
                     (vec3(-12.53, -1.1, -1.0) - (_GLF_IDENTITY((subgroup_local_id * _GLF_IDENTITY(next_virtual_gid, 0u | (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (next_virtual_gid))))), max((subgroup_local_id * next_virtual_gid), _GLF_IDENTITY((subgroup_local_id * next_virtual_gid), ((subgroup_local_id * next_virtual_gid)) | ((subgroup_local_id * next_virtual_gid))))) , (mat4x3(0.2, 7874.7154, -700.879, 7.5, 58.00, -7.2, -1.9, -5.2, 4.7, -394.935, -1409.8532, 4.5) * _GLF_SWITCH_0_46v)));
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
                      continue;
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 bvec2 _GLF_SWITCH_0_54v[51], _GLF_SWITCH_0_55v;
                 do
                  {
                   ;
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 break;
                 if(_GLF_DEAD(false))
                  return;
                 case 66:
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 mat4(-127.631, 5029.7439, 3.9, 3586.3521, -0.8, 5952.1975, -201.571, 19.00, 5.5, 64.99, -2.2, 7.3, 4.9, -44.32, -4.2, -995.248);
                 if(_GLF_DEAD(false))
                  return;
                 case 27:
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 mat4 _GLF_SWITCH_1_0v, _GLF_SWITCH_1_1v;
                 default:
                 1;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
                    break;
                   barrier();
                  }
                 return;
                }
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   barrier();
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
               break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 barrier();
                }
               default:
               1;
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
          case 65:
          if(_GLF_DEAD(false))
           {
            if(_GLF_DEAD(false))
             return;
            if(_GLF_DEAD(false))
             return;
            return;
           }
          if(_GLF_DEAD(false))
           return;
          case 54:
          if(_GLF_DEAD(false))
           barrier();
          break;
          case 8:
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           return;
          mat4x3 _GLF_SWITCH_3_0v, _GLF_SWITCH_3_1v, _GLF_SWITCH_3_2v;
          default:
          1;
         }
       }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       while((28.16 < 45.45))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         {
          (-47877 / ivec2(-89714, -31135));
          vec4(-8546.4209, 9120.3241, 1.8, 2.2);
          if(_GLF_DEAD(false))
           continue;
          vec3 _GLF_SWITCH_0_56v, _GLF_SWITCH_0_57v[97];
          if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
           barrier();
          if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
           barrier();
          mat4x3 _GLF_SWITCH_0_58v, _GLF_SWITCH_0_59v[44], _GLF_SWITCH_0_60v[62];
          mat4x2 _GLF_SWITCH_0_61v, _GLF_SWITCH_0_62v;
          if(_GLF_DEAD(false))
           break;
          _GLF_SWITCH_0_62v;
         }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          continue;
         {
          (uvec2(_GLF_IDENTITY(189248u, (189248u) | 0u), 175643u) | uvec2(140023u, 182985u));
          if(_GLF_DEAD(false))
           return;
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           {
            if(_GLF_DEAD(false))
             return;
            return;
           }
          if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
           barrier();
          if(_GLF_DEAD(false))
           break;
          if(_GLF_WRAPPED_IF_FALSE(false))
           {
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             {
              if(_GLF_DEAD(false))
               barrier();
              return;
             }
            if(_GLF_WRAPPED_IF_TRUE(true))
             {
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               {
                if(_GLF_DEAD(false))
                 continue;
                barrier();
               }
              if(_GLF_DEAD(false))
               {
                do
                 {
                  barrier();
                 }
                while(_GLF_WRAPPED_LOOP(false));
               }
              if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), true)))))))
               continue;
             }
            else
             {
             }
            if(_GLF_DEAD(false))
             barrier();
           }
          else
           {
            ;
           }
          if(_GLF_DEAD(false))
           break;
          uvec3 _GLF_SWITCH_0_63v, _GLF_SWITCH_0_64v[96], _GLF_SWITCH_0_65v;
         }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(false)
          {
           while(all(bvec3(true, true, false)))
            {
             bvec2(_GLF_IDENTITY(false, bool(bool(false))), true);
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
              break;
             mat3x4 _GLF_SWITCH_0_66v;
             (ivec2(81554, -83078) * ivec2(30063, -16154));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               continue;
              }
             if(_GLF_DEAD(false))
              return;
             ;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           for(ivec3 _GLF_SWITCH_0_67v[15], _GLF_SWITCH_0_68v, _GLF_SWITCH_0_69v; (i == 98103); atan(vec2(7.6, 411.749), mix(injectionSwitch, injectionSwitch, vec2(6.8, -86.29))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             ;
             mat4(mat2x3(33.08, -0.7, 4.0, -539.813, 2.6, -6.3));
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              barrier();
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           {
            if(_GLF_DEAD(false))
             return;
            mat2 _GLF_SWITCH_0_70v, _GLF_SWITCH_0_71v, _GLF_SWITCH_0_72v[92];
            mat4x2 _GLF_SWITCH_0_73v;
            if(_GLF_DEAD(false))
             return;
            bvec4 _GLF_SWITCH_0_74v, _GLF_SWITCH_0_75v[39], _GLF_SWITCH_0_76v[2];
            if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true))), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))), ! (! (_GLF_DEAD(false)))), true)))) && true)) || false))
             {
              if(_GLF_DEAD(false))
               return;
              if(_GLF_DEAD(false))
               return;
              if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))) || false), (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
               barrier();
              if(_GLF_WRAPPED_IF_FALSE(false))
               {
                if(_GLF_DEAD(false))
                 return;
               }
              else
               {
                if(_GLF_DEAD(false))
                 barrier();
               }
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               {
                switch(_GLF_SWITCH(0))
                 {
                  case 74:
                  ivec3(-66978, -35054, -92288);
                  case 89:
                  if(_GLF_DEAD(false))
                   barrier();
                  ;
                  if(_GLF_DEAD(false))
                   return;
                  case 0:
                  if(_GLF_DEAD(false))
                   {
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     return;
                    barrier();
                   }
                  case 46:
                  if(_GLF_DEAD(false))
                   return;
                  case 81:
                  if(_GLF_DEAD(false))
                   return;
                  if(_GLF_DEAD(false))
                   barrier();
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   return;
                  case 63:
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   barrier();
                  case 87:
                  case 40:
                  case 20:
                  case 42:
                  case 78:
                  for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_injected_loop_counter < 1)))); _injected_loop_counter ++)
                   {
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     barrier();
                    do
                     {
                      return;
                      if(_GLF_DEAD(false))
                       return;
                     }
                    while(_GLF_WRAPPED_LOOP(false));
                   }
                  break;
                  case 9:
                  bool _GLF_SWITCH_1_0v, _GLF_SWITCH_1_1v, _GLF_SWITCH_1_2v[37];
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 1.0, 1.0, length(vec2(0.0, 0.0)), abs(1.0), 1.0, 0.0, 0.0, 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, 0.0)))))))
                   barrier();
                  case 79:
                  do
                   {
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     return;
                    ;
                   }
                  while(_GLF_WRAPPED_LOOP(false));
                  default:
                  if(_GLF_DEAD(false))
                   return;
                  1;
                  if(_GLF_DEAD(false))
                   {
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     {
                      if(_GLF_DEAD(false))
                       return;
                      barrier();
                     }
                    return;
                   }
                 }
               }
              if(_GLF_WRAPPED_IF_FALSE(false))
               {
                if(_GLF_DEAD(false))
                 return;
               }
              else
               {
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   return;
                  if(_GLF_DEAD(false))
                   barrier();
                  return;
                 }
                if(_GLF_DEAD(false))
                 barrier();
                return;
                if(_GLF_DEAD(false))
                 barrier();
               }
              if(_GLF_DEAD(false))
               barrier();
             }
            ivec4 _GLF_SWITCH_0_77v;
            ;
            if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
             return;
            if(_GLF_DEAD(false))
             return;
            mat3(mat3x2(1.1, -359.308, -522.339, 18.68, 482.543, 7.6));
            mat2x3 _GLF_SWITCH_0_78v, _GLF_SWITCH_0_79v[26];
            bvec3 _GLF_SWITCH_0_80v;
           }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           _GLF_IDENTITY((mat2x4(-9.0, -8.7, -1787.9598, -203.442, _GLF_IDENTITY(-497.779, (true ? -497.779 : _GLF_FUZZED(vec4(-2.9, -5.9, -969.668, 405.963)[1]))), -4.2, 44.24, 72.26) != mat2x4(-987.936, 0.5, -6.0, -8517.8529, 2.3, 8.1, 7.1, 2537.5998)), (_GLF_IDENTITY((mat2x4(-9.0, -8.7, -1787.9598, -203.442, _GLF_IDENTITY(-497.779, (true ? -497.779 : _GLF_FUZZED(vec4(-2.9, -5.9, -969.668, 405.963)[1]))), -4.2, 44.24, 72.26) != mat2x4(-987.936, 0.5, -6.0, -8517.8529, 2.3, 8.1, 7.1, 2537.5998)), ! (! ((mat2x4(-9.0, -8.7, -1787.9598, -203.442, _GLF_IDENTITY(-497.779, (true ? -497.779 : _GLF_FUZZED(vec4(-2.9, -5.9, -969.668, 405.963)[1]))), -4.2, 44.24, 72.26) != mat2x4(-987.936, 0.5, -6.0, -8517.8529, 2.3, 8.1, 7.1, 2537.5998)))))) || false);
           mat4(-9.1, 5.3, -5.1, 71.68, -696.213, 36.06, -0.3, -65.74, 4126.9284, -4076.4241, 9.5, 1.0, 183.917, 756.948, 5.6, 4355.9168);
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            return;
           while(false)
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 barrier();
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, int(ivec2(0, 0)))); _injected_loop_counter --)
                {
                 uvec3(173113u, 33193u, 144302u);
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           mat3x2(mat3(7.9, 410.325, -8.6, -208.060, 6412.4831, -4.6, 583.018, 85.56, -251.857));
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            return;
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       bvec2(false, false);
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       while((bvec3(true, true, false) == bvec3(true, true, true)))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           break;
          }
         {
          bitfieldExtract(bitfieldReverse(uvec2(194816u, 100161u)), 59533, findLSB(read));
          if(_GLF_DEAD(false))
           barrier();
          mat3 _GLF_SWITCH_0_81v[11], _GLF_SWITCH_0_82v, _GLF_SWITCH_0_83v[1];
          ivec3(-50373, -62706, -27568);
          if(_GLF_DEAD(false))
           break;
          if(_GLF_DEAD(false))
           {
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             return;
            if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
             return;
            if(_GLF_DEAD(false))
             continue;
            barrier();
           }
          _GLF_IDENTITY(mat2(_GLF_IDENTITY(vec2(-8786.3992, -91.75), max(vec2(-8786.3992, -91.75), _GLF_IDENTITY(vec2(-8786.3992, -91.75), (true ? _GLF_IDENTITY(vec2(_GLF_IDENTITY(-8786.3992, max(_GLF_IDENTITY(-8786.3992, max(-8786.3992, -8786.3992)), -8786.3992)), -91.75), min(vec2(_GLF_IDENTITY(-8786.3992, max(_GLF_IDENTITY(-8786.3992, max(-8786.3992, -8786.3992)), -8786.3992)), -91.75), vec2(_GLF_IDENTITY(-8786.3992, max(_GLF_IDENTITY(-8786.3992, max(-8786.3992, -8786.3992)), -8786.3992)), -91.75))) : _GLF_FUZZED(vec2(-3096.0731, 6.3)))))), injectionSwitch), (_GLF_IDENTITY(true ? mat2(_GLF_IDENTITY(_GLF_IDENTITY(vec2(-8786.3992, -91.75), (true ? vec2(-8786.3992, -91.75) : _GLF_FUZZED(vec2(-27.07, 8.2)))), max(vec2(-8786.3992, -91.75), _GLF_IDENTITY(vec2(-8786.3992, -91.75), (true ? vec2(-8786.3992, -91.75) : _GLF_FUZZED(vec2(-3096.0731, _GLF_IDENTITY(6.3, clamp(_GLF_IDENTITY(6.3, max(6.3, 6.3)), 6.3, 6.3)))))))), injectionSwitch) : _GLF_FUZZED(mat2(592.178, -9.1, 967.836, 85.62)), (true ? mat2(_GLF_IDENTITY(_GLF_IDENTITY(vec2(-8786.3992, -91.75), (true ? vec2(-8786.3992, -91.75) : _GLF_FUZZED(vec2(-27.07, 8.2)))), max(vec2(-8786.3992, -91.75), _GLF_IDENTITY(vec2(-8786.3992, -91.75), (true ? vec2(-8786.3992, -91.75) : _GLF_FUZZED(vec2(-3096.0731, 6.3)))))), injectionSwitch) : _GLF_FUZZED(mat2(592.178, -9.1, 967.836, 85.62))) - mat2(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(-4.9)), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true)))))));
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           return;
          if(_GLF_DEAD(false))
           return;
          if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           {
           }
          else
           {
            if(_GLF_DEAD(false))
             return;
            if(_GLF_DEAD(false))
             {
              if(_GLF_DEAD(false))
               return;
              if(_GLF_DEAD(false))
               break;
              if(_GLF_DEAD(false))
               break;
              switch(_GLF_SWITCH((0 | 0)))
               {
                case 0:
                case 66:
                case 48:
                case 59:
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(false))
                   continue;
                  if(_GLF_DEAD(false))
                   continue;
                  continue;
                 }
                if(_GLF_DEAD(false))
                 return;
                barrier();
                break;
                if(_GLF_DEAD(false))
                 break;
                case 1:
                ivec3 _GLF_SWITCH_1_0v;
                default:
                1;
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 return;
               }
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               break;
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               return;
             }
            if(_GLF_DEAD(false))
             {
              switch(_GLF_SWITCH(0))
               {
                case 62:
                vec3(-0.8, 6.1, -0.6);
                case 0:
                case 68:
                case 46:
                case 96:
                case 50:
                if(_GLF_DEAD(false))
                 continue;
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(false))
                   continue;
                  barrier();
                 }
                case 4:
                case 8:
                if(_GLF_DEAD(false))
                 {
                  for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) - int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (false ? _GLF_FUZZED(94661) : _injected_loop_counter ++)))
                   {
                    barrier();
                   }
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   continue;
                 }
                barrier();
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 barrier();
                break;
                case 69:
                uvec2 _GLF_SWITCH_4_0v[14], _GLF_SWITCH_4_1v[25];
                case 37:
                bvec4 _GLF_SWITCH_4_2v, _GLF_SWITCH_4_3v, _GLF_SWITCH_4_4v[15];
                default:
                1;
               }
             }
            if(_GLF_DEAD(false))
             break;
           }
          if(_GLF_DEAD(false))
           {
            if(_GLF_DEAD(false))
             {
              if(_GLF_DEAD(false))
               {
                if(_GLF_DEAD(false))
                 return;
                break;
               }
              barrier();
             }
            barrier();
           }
          if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
           {
            if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             {
             }
            else
             {
              return;
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               return;
             }
           }
          uint _GLF_SWITCH_0_84v, _GLF_SWITCH_0_85v[80];
          true;
          if(_GLF_DEAD(false))
           barrier();
          uvec4 _GLF_SWITCH_0_86v, _GLF_SWITCH_0_87v;
          if(_GLF_DEAD(false))
           {
            if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
             continue;
            break;
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             continue;
           }
         }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> 0)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         switch(_GLF_SWITCH(0))
          {
           case 0:
           case 19:
           case 5:
           case 14:
           case 70:
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           case 85:
           case 58:
           return;
           break;
           case 59:
           _GLF_SWITCH_0_0v;
           default:
           1;
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     default:
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     1;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     atomicStore(checker[virtual_gid], read, 4, 64, 4);
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
