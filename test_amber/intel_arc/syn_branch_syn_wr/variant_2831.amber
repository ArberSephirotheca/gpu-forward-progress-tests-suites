#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true)))) || false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, (false) && true)), bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, (false) && true)), false))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4(bool(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true, true)), (bool(bvec4(bool(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true, true))) || false)))))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(length(vec3(0.0, 0.0, 0.0)), 0.0)), dot(vec2(1.0, 1.0), vec2(length(vec3(0.0, 0.0, 0.0)), 0.0))), 0.0, sqrt(length(0.0)), 1.0, 0.0, 0.0, 0.0)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.5), _GLF_FUZZED(6.7)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base))) | (workgroup_base)), ((0u >> _GLF_IDENTITY(uint(5u), uint(_GLF_IDENTITY(5u, (_GLF_IDENTITY(5u, ~ (~ (_GLF_IDENTITY(5u, max(5u, 5u)))))) | (_GLF_IDENTITY(5u, (5u) << 0u)))))) << _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (uint(4u)) | (uint(4u))))), ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(2u), uint(2u)), (_GLF_IDENTITY(1u, (1u) ^ (1u ^ 1u)) << _GLF_IDENTITY(uint(2u), uint(2u))) << uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 0u)), (_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) | (workgroup_base), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3((workgroup_base) | (workgroup_base), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), (uvec3((workgroup_base) | (workgroup_base), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))) | (uvec3((workgroup_base) | (workgroup_base), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uvec3((workgroup_base) | (workgroup_base), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), (uvec3((workgroup_base) | (workgroup_base), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))) | _GLF_IDENTITY((uvec3((workgroup_base) | (workgroup_base), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (~ ((uvec3((workgroup_base) | (workgroup_base), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))))), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(uvec3((workgroup_base) | (workgroup_base), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), (uvec3((workgroup_base) | (workgroup_base), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))) | (uvec3((workgroup_base) | (workgroup_base), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))))), _GLF_IDENTITY(uvec3((workgroup_base) | (workgroup_base), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), (uvec3((workgroup_base) | (workgroup_base), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))) | (uvec3((workgroup_base) | (workgroup_base), _GLF_IDENTITY(0u, min(0u, 0u)), uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), sqrt(1.0), 0.0))).y))))), _GLF_IDENTITY(uvec3((workgroup_base) | (workgroup_base), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), (uvec3((workgroup_base) | (workgroup_base), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))) | (uvec3((workgroup_base) | (workgroup_base), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))))))), ((0u >> _GLF_IDENTITY(uint(5u), uint(5u))) << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), 0u | (_GLF_IDENTITY(uint(4u), uint(4u))))), ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 0u)), ~ (~ (uint(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(((0u >> _GLF_IDENTITY(uint(5u), uint(5u))) << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), 0u | (_GLF_IDENTITY(uint(4u), uint(4u))))), max(((0u >> _GLF_IDENTITY(uint(5u), uint(5u))) << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), 0u | (_GLF_IDENTITY(uint(4u), uint(4u))))), ((0u >> _GLF_IDENTITY(uint(5u), uint(5u))) << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), 0u | (_GLF_IDENTITY(uint(4u), uint(4u))))))), ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), 0u | (_GLF_IDENTITY(uint(2u), max(uint(2u), uint(2u))))), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 0u)))))) | (uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), (_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(5u), uint(5u))) << _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (uint(4u)) | (uint(4u)))), clamp((0u >> _GLF_IDENTITY(uint(5u), uint(5u))) << _GLF_IDENTITY(uint(4u), uint(4u)), (0u >> _GLF_IDENTITY(uint(5u), uint(5u))) << _GLF_IDENTITY(uint(4u), uint(4u)), (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), min(uint(5u), _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(uvec2(uint(5u), 1u)), (uint(uvec2(uint(5u), 1u))) | (uint(uvec2(uint(5u), 1u))))))), uint(5u))) << _GLF_IDENTITY(uint(4u), uint(4u))))), ((1u << _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, max(_GLF_IDENTITY(2u, 1u * (2u)), 2u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2u, min(2u, 2u))), uint(2u)), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(2u, min(2u, 2u))), uint(2u)), _GLF_IDENTITY(uint(_GLF_IDENTITY(2u, min(2u, 2u))), uint(2u))))), 0u), (uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), (_GLF_IDENTITY((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, (5u) ^ (0u & 64579u))), uint(5u)), _GLF_IDENTITY(0u, (0u) + 0u) + (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(5u), uint(5u)), max(0u >> _GLF_IDENTITY(uint(5u), uint(5u)), 0u >> _GLF_IDENTITY(uint(5u), uint(5u))))))) << _GLF_IDENTITY(uint(4u), uint(4u)), clamp((0u >> _GLF_IDENTITY(uint(5u), uint(5u))) << _GLF_IDENTITY(uint(4u), uint(4u)), (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), uint(_GLF_IDENTITY(uint(uint(5u)), ~ _GLF_IDENTITY(_GLF_IDENTITY((~ (uint(uint(5u)))), ((~ (uint(uint(5u))))) / 1u), clamp(_GLF_IDENTITY((~ (uint(uint(5u)))), ((~ (uint(uint(5u))))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY((~ (uint(uint(5u)))), ((~ (uint(uint(5u))))) / 1u), clamp(_GLF_IDENTITY((~ (uint(uint(5u)))), ((~ (uint(uint(5u))))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY((~ (uint(uint(5u)))), ((~ (uint(uint(5u))))) / 1u), min(_GLF_IDENTITY((~ (uint(uint(5u)))), ((~ (uint(uint(5u))))) / 1u), _GLF_IDENTITY((~ (uint(uint(5u)))), ((~ (uint(uint(5u))))) / 1u))), _GLF_IDENTITY((~ (uint(uint(5u)))), ((~ (uint(uint(5u))))) / 1u))), _GLF_IDENTITY((~ (uint(uint(5u)))), ((~ (uint(uint(5u))))) / 1u)))))), uint(5u))) << _GLF_IDENTITY(uint(4u), uint(4u)), (0u >> _GLF_IDENTITY(uint(5u), uint(5u))) << _GLF_IDENTITY(uint(4u), uint(4u))))), ((1u << _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, max(2u, 2u))))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(2u, min(2u, 2u))), uint(2u))), 0u)) << uvec4(0u, 0u, 0u, 0u)))))) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), clamp(subgroup_id, subgroup_id, subgroup_id)) * subgroup_size, (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base))) | (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)))), ((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), uint(5u)), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), uint(5u)), 0u ^ (_GLF_IDENTITY(uint(5u), uint(5u))))))) << _GLF_IDENTITY(uint(4u), uint(4u))), ((_GLF_IDENTITY(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(2u), uint(2u)), (1u << _GLF_IDENTITY(uint(2u), uint(2u))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(2u, (2u) - 0u)), uint(2u)), (1u << _GLF_IDENTITY(uint(2u), uint(2u))) << uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(3207.1206)), float(injectionSwitch.x), bool(true)))))), 0u ^ (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(2u), uint(2u)), (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_size) : 1u)) << _GLF_IDENTITY(uint(2u), uint(2u)), (_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_size) : 1u)) << _GLF_IDENTITY(uint(2u), uint(2u))) - 0u)) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))))))) >> _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), min(_GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(2u), 1u * (uint(2u))), _GLF_IDENTITY(1u, 0u | (1u))), (true ? uvec2(_GLF_IDENTITY(uint(2u), 1u * (uint(2u))), _GLF_IDENTITY(1u, 0u | (1u))) : _GLF_FUZZED(_GLF_IDENTITY(uvec2(375u, 20922u), (uvec2(375u, 20922u)) + _GLF_IDENTITY(uvec2(0u, 0u), uvec2(0u, 0u) | (uvec2(0u, 0u))))))))), uint(2u))))), 0u)), _GLF_IDENTITY((uint(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), ((0u >> _GLF_IDENTITY(uint(5u), uint(5u))) << _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, uint(_GLF_IDENTITY(uvec2(4u, 1u), (uvec2(4u, 1u)) - uvec2(0u, 0u))))), uint(4u)), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))) ? _GLF_FUZZED(num_workgroup) : uint(_GLF_IDENTITY(4u, uint(uint(_GLF_IDENTITY(4u, max(4u, 4u))))))))), min(_GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), 1u * _GLF_IDENTITY((_GLF_IDENTITY(uint(4u), uint(4u))), (_GLF_IDENTITY((_GLF_IDENTITY(uint(4u), uint(4u))), ~ (~ ((_GLF_IDENTITY(uint(4u), uint(4u))))))) << 0u))))))), ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 0u))), 0u ^ ((uint(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), ((0u >> _GLF_IDENTITY(uint(5u), uint(5u))) << _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, uint(_GLF_IDENTITY(uvec2(4u, 1u), (uvec2(4u, 1u)) - uvec2(0u, 0u))))), uint(4u)), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 4u : _GLF_FUZZED((-- subgroup_size))))), _GLF_IDENTITY(uint(4u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(num_workgroup) : uint(4u)))), min(_GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), ~ (~ (_GLF_IDENTITY(uint(4u), uint(4u))))), _GLF_IDENTITY(1u, (1u) + 0u) * (_GLF_IDENTITY(uint(4u), uint(4u))))))))), ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 0u))))) | (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), (_GLF_IDENTITY((_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) << 0u), 0u, _GLF_IDENTITY(0u, max(0u, 0u)))) >> _GLF_IDENTITY(uint(5u), uint(5u))) << _GLF_IDENTITY(uint(4u), uint(4u)), clamp((0u >> _GLF_IDENTITY(uint(5u), uint(5u))) << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, ~ (~ (4u)))), uint(4u)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(4u), uint(4u)), 0u), (uvec2(_GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(0u, ~ (~ (0u))))) << uvec2(0u, 0u))), clamp(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(4u), uint(4u)), 0u), (uvec2(_GLF_IDENTITY(uint(4u), uint(4u)), 0u)) << uvec2(0u, 0u))), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(4u), uint(4u)), 0u), (uvec2(_GLF_IDENTITY(uint(4u), uint(4u)), 0u)) << uvec2(0u, 0u))), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(4u), uint(4u)), 0u), (uvec2(_GLF_IDENTITY(uint(4u), uint(4u)), 0u)) << uvec2(0u, 0u))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), min(_GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(4u, (4u) | 0u) : _GLF_FUZZED(workgroup_id))))))))), (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, max(_GLF_IDENTITY(5u, (true ? 5u : _GLF_FUZZED(subgroup_size))), _GLF_IDENTITY(5u, ~ (~ (_GLF_IDENTITY(5u, _GLF_IDENTITY(min(5u, 5u), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(min(5u, 5u), (true ? min(5u, 5u) : _GLF_FUZZED(workgroup_size))), 0u)), clamp(uint(uvec2(_GLF_IDENTITY(min(5u, 5u), (true ? min(5u, 5u) : _GLF_FUZZED(workgroup_size))), 0u)), uint(uvec2(_GLF_IDENTITY(min(5u, 5u), (true ? min(5u, 5u) : _GLF_FUZZED(workgroup_size))), 0u)), uint(uvec2(_GLF_IDENTITY(min(5u, 5u), (true ? min(5u, 5u) : _GLF_FUZZED(workgroup_size))), 0u)))))))))))), uint(5u))) << _GLF_IDENTITY(uint(4u), uint(4u)), (0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, 1u * (5u))), uint(5u))) << _GLF_IDENTITY(uint(4u), uint(4u))))), ((1u << _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, max(2u, 2u))))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(2u, min(2u, 2u))), uint(2u))), 0u), ~ (~ (uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (0u) << 0u), 0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), max(0u, 0u)))) >> _GLF_IDENTITY(uint(5u), uint(5u)), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (0u) << 0u), 0u, _GLF_IDENTITY(0u, max(0u, 0u)))) >> _GLF_IDENTITY(uint(5u), uint(5u)), (_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (0u) << 0u), 0u, _GLF_IDENTITY(0u, max(0u, 0u)))) >> _GLF_IDENTITY(uint(5u), uint(5u))) | 0u), clamp(_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) / 1u), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) / 1u), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(0u, (0u) / 1u)))))), (0u) << 0u), _GLF_IDENTITY(0u, (0u) | 0u), _GLF_IDENTITY(0u, max(0u, 0u)))) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), (uint(5u)) | (uint(5u)))) - 0u)), _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (0u) << 0u), 0u, _GLF_IDENTITY(0u, max(0u, 0u)))) >> _GLF_IDENTITY(uint(5u), uint(5u)), _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (0u) << 0u), 0u, _GLF_IDENTITY(0u, max(0u, 0u)))) >> _GLF_IDENTITY(uint(5u), uint(5u)))), _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (0u) << 0u), 0u, _GLF_IDENTITY(0u, max(0u, 0u)))) >> _GLF_IDENTITY(uint(5u), uint(5u))))) << _GLF_IDENTITY(uint(4u), uint(4u)), clamp((0u >> _GLF_IDENTITY(uint(5u), uint(5u))) << _GLF_IDENTITY(uint(4u), uint(4u)), (0u >> _GLF_IDENTITY(uint(5u), uint(5u))) << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), min(_GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(uint(4u), uint(4u)))), (0u >> _GLF_IDENTITY(uint(5u), uint(5u))) << _GLF_IDENTITY(uint(4u), uint(4u))))), ((1u << _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, max(2u, 2u))))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(2u, min(2u, 2u))), uint(2u))), 0u)))), (uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) | _GLF_IDENTITY((workgroup_base), ((workgroup_base)) | 0u)), (_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(5u), uint(5u))) << _GLF_IDENTITY(uint(4u), uint(4u)), clamp(_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(5u), uint(_GLF_IDENTITY(5u, (true ? _GLF_IDENTITY(5u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(5u, (_GLF_IDENTITY(5u, uint(uint(_GLF_IDENTITY(5u, (5u) + 0u))))) / _GLF_IDENTITY(1u, (1u) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))))), (false ? _GLF_FUZZED(workgroup_size) : ~ (_GLF_IDENTITY(5u, (5u) / 1u)))))) : _GLF_FUZZED(bitfieldReverse(uaddCarry(subgroup_id, subgroup_id, workgroup_id)))))))) << _GLF_IDENTITY(uint(4u), uint(4u)), ((0u >> _GLF_IDENTITY(uint(5u), uint(_GLF_IDENTITY(5u, (true ? _GLF_IDENTITY(5u, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(5u, (_GLF_IDENTITY(5u, uint(uint(_GLF_IDENTITY(5u, (5u) + 0u))))) / _GLF_IDENTITY(1u, (1u) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))))), (false ? _GLF_FUZZED(workgroup_size) : ~ (_GLF_IDENTITY(5u, (5u) / 1u)))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(5u, (_GLF_IDENTITY(5u, uint(uint(_GLF_IDENTITY(5u, (5u) + 0u))))) / _GLF_IDENTITY(1u, (1u) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))))), (false ? _GLF_FUZZED(workgroup_size) : ~ (_GLF_IDENTITY(5u, (5u) / 1u)))), _GLF_IDENTITY(~ (_GLF_IDENTITY(5u, (_GLF_IDENTITY(5u, uint(uint(_GLF_IDENTITY(5u, (5u) + 0u))))) / _GLF_IDENTITY(1u, (1u) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))))), (false ? _GLF_FUZZED(workgroup_size) : ~ (_GLF_IDENTITY(5u, (5u) / 1u)))), _GLF_IDENTITY(~ (_GLF_IDENTITY(5u, (_GLF_IDENTITY(5u, uint(uint(_GLF_IDENTITY(5u, (5u) + 0u))))) / _GLF_IDENTITY(1u, (1u) + (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))))), (false ? _GLF_FUZZED(workgroup_size) : ~ (_GLF_IDENTITY(5u, (5u) / 1u)))))))) : _GLF_FUZZED(bitfieldReverse(uaddCarry(subgroup_id, subgroup_id, workgroup_id)))))))) << _GLF_IDENTITY(uint(4u), uint(4u))) - 0u), _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(5u), uint(5u))), (_GLF_IDENTITY((_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(5u), uint(5u)), (0u >> _GLF_IDENTITY(uint(5u), uint(5u))) - 0u)), (false ? _GLF_FUZZED(workgroup_size) : (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(5u), uint(5u)), (0u >> _GLF_IDENTITY(uint(5u), uint(5u))) - 0u))))) >> 0u) << _GLF_IDENTITY(uint(4u), uint(4u)), (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), uint(5u)), 1u * (_GLF_IDENTITY(uint(5u), uint(5u))))) << _GLF_IDENTITY(uint(4u), uint(4u))))), ((1u << _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, max(2u, 2u))))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(2u, min(2u, 2u))), uint(2u))), 0u)) << uvec4(0u, 0u, 0u, 0u)))))) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), clamp(subgroup_id, subgroup_id, subgroup_id)) * subgroup_size) + 0u), _GLF_IDENTITY(clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (workgroup_base + subgroup_id * subgroup_size))), (clamp(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)))) / 1u), _GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))) + _GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)) * subgroup_size, workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u) * subgroup_size)) + 0u)) + subgroup_local_id;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED((9.5))), bool(_GLF_IDENTITY(false, (false) && true))))))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), false, _GLF_IDENTITY(false, ! (! (false)))))), false)), true && (bool(bvec2(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), false, false))), false))))), bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, false))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), min(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size))), 0u | (_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))) + subgroup_id * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), max(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size)))))) / _GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), (~ (1u)) >> 0u))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, int(int(64))), 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) || false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], ~ (~ (buf[virtual_gid]))), 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(3.0, 3.0)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))))))), vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(3.0, (_GLF_IDENTITY(3.0, max(3.0, 3.0))) - 0.0), 3.0)) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))), mat2(1.0) * ((false ? _GLF_FUZZED(vec2(3.0, 3.0)) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))))), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0)), dot(_GLF_IDENTITY(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0), _GLF_IDENTITY(vec3(mat4x3(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0), 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), tan(0.0), 0.0, abs(1.0), 0.0)), min(_GLF_IDENTITY(vec3(mat4x3(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0), 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), tan(0.0), 0.0, abs(1.0), 0.0)), vec3(1.0, 1.0, 1.0) * (vec3(mat4x3(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0), 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), tan(0.0), 0.0, abs(1.0), 0.0)))), vec3(mat4x3(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0), 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), tan(0.0), 0.0, abs(1.0), 0.0))))), vec3(0.0, 0.0, 1.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(1.0, 1.0, 0.0), (vec3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 0.0)) * mat3(1.0)), vec3(_GLF_IDENTITY(0.0, exp(0.0) * (0.0)), 0.0, 1.0)), min(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(1.0, 1.0, 0.0), (vec3(1.0, 1.0, 0.0)) * mat3(1.0)), vec3(0.0, 0.0, 1.0)), min(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(1.0, 1.0, 0.0), (vec3(1.0, 1.0, 0.0)) * mat3(1.0)), vec3(0.0, 0.0, 1.0)), (dot(_GLF_IDENTITY(vec3(1.0, 1.0, 0.0), (vec3(1.0, 1.0, 0.0)) * mat3(1.0)), vec3(0.0, 0.0, 1.0))) - sqrt(0.0)), dot(_GLF_IDENTITY(vec3(1.0, 1.0, 0.0), (vec3(1.0, 1.0, 0.0)) * mat3(1.0)), vec3(0.0, 0.0, 1.0)))), dot(_GLF_IDENTITY(vec3(1.0, 1.0, 0.0), (vec3(1.0, 1.0, 0.0)) * mat3(1.0)), vec3(0.0, 0.0, 1.0)))), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0))).y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), mix(float(_GLF_FUZZED(654.211)), float(max(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec3(injectionSwitch.x, 1.0, 1.0)), max(float(vec3(injectionSwitch.x, 1.0, 1.0)), float(vec3(injectionSwitch.x, 1.0, 1.0))))), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 0.0, 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), 1.0, 1.0, 1.0)), (float(mat4x2(injectionSwitch.x, 0.0, 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), 1.0, 1.0, 1.0))) - 0.0)))), injectionSwitch.x)), bool(true)))))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
  barrier();
 if(subgroup_local_id + _GLF_IDENTITY(1, (false ? _GLF_FUZZED((-140 / -29653)) : 1)) < _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u))
  {
   int i = 0;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)) : _GLF_FUZZED(-38.24)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), false, false, false)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec2(injectionSwitch.y, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)))), float(mat2x4(_GLF_IDENTITY(float(vec2(injectionSwitch.y, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)))), (float(vec2(injectionSwitch.y, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))))) / 1.0), 1.0, 0.0, 1.0, abs(0.0), 0.0, 0.0, 1.0))))))))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) && true))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, false)))) || false, true && ((_GLF_IDENTITY(false, bool(bvec2(false, false)))) || false)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y))) && true))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), false, true)), ! (! (bool(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), false, true)))))))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, bool(bvec2(false, false)))), (_GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false || (false), (false || (false)) || false)), (! (_GLF_IDENTITY(false || (false), (false || (false)) || false))) || false)))), bool(bvec2(false, false)))), ! (! _GLF_IDENTITY((true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), true && (_GLF_IDENTITY(false, bool(bvec2(false, false))))))), true && ((true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), true && (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))))))) && true)), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))), (true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))) && true))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   atomicStore(checker[virtual_gid], read, 4, _GLF_IDENTITY(64, _GLF_IDENTITY(min(64, 64), min(min(64, 64), min(64, 64)))), 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 0.0, 1.0, log(1.0))), (false ? _GLF_FUZZED(vec2(-17.76, -140.564)) : vec2(mat2x3(injectionSwitch, 1.0, 0.0, 1.0, log(1.0)))))).y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), false || (bool(false))))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) - abs(vec2(0.0, 0.0))) * (injectionSwitch)).x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec2((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true, true))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && ((false)))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (false ? _GLF_FUZZED(-5.8) : injectionSwitch[1])))).x > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), (true ? dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)) : _GLF_FUZZED(31.67)))), cos(0.0), 1.0, exp(0.0), 0.0, length(vec2(0.0, 0.0))))), injectionSwitch, injectionSwitch)), injectionSwitch)), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (false ? _GLF_FUZZED(-5.8) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))[1])))).x > injectionSwitch.y))))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (false)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1]))), vec2(_GLF_FUZZED((+ -89.17)), _GLF_FUZZED(-3.3)), bvec2(false, false))).x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
