#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, false), bvec2(bvec3(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, false), false))), true, false)))))))))
  return;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), ((injectionSwitch.x > injectionSwitch.y)) && true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bvec2(bool(false), false)), true && (bool(bvec2(bool(false), false)))))))))
    {
     for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
      {
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), (bool(bvec2(false, false))) || false)), (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupSize)), uvec3(uvec3(uvec3(uvec3(gl_WorkGroupSize)))))).x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, 0 | (_GLF_IDENTITY(7, min(7, _GLF_IDENTITY(7, max(7, 7))))))))) >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (7) | (_GLF_IDENTITY(7, min(_GLF_IDENTITY(7, (false ? _GLF_FUZZED(50431) : 7)), 7)))))))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, 0u ^ (workgroup_size)) * workgroup_id;
 uint subgroup_base = _GLF_IDENTITY(subgroup_id, (true ? _GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)) : _GLF_FUZZED(79424u))) * subgroup_size;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(workgroup_id))) + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(_GLF_IDENTITY(bvec2(true && (false), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true, true))), false, false))), true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true, true))), false, false))), true, false))) || false))), bvec2(bvec2(bvec2(true && (false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, true))), (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, true))), bool(bvec2(_GLF_IDENTITY(true, bool(bvec2(true, true))), true)))) || false), false)))))))))))))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, ~ (~ _GLF_IDENTITY((workgroup_base), uint(uint((workgroup_base)))))) + _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), (true ? _GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)) : _GLF_FUZZED(workgroup_size)))) ^ 0u)) + 0u)) - 0u) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0))))) > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0))))) > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0))))) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0))))) > injectionSwitch.y))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0))))) > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0))))) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0))))) > injectionSwitch.y))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)), bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0))))) > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0))))) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0))))) > injectionSwitch.y))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)))))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(32.31)), float(injectionSwitch.y), bool(true)))) * round(length(normalize(cos(vec3(0.0, 0.0, 0.0)))))))) || false, ! (! (((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(asinh(4.5)))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(32.31)), float(injectionSwitch.y), bool(true)))) * round(length(normalize(cos(vec3(0.0, 0.0, 0.0)))))))) || _GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))))))))))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0))))) > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0))))) > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0))))) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0))))) > injectionSwitch.y))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0))))) > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0))))) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0))))) > injectionSwitch.y))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)), bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0))))) > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0))))) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0))))) > injectionSwitch.y))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)))))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(32.31)), float(injectionSwitch.y), bool(true)))) * round(length(normalize(cos(vec3(0.0, 0.0, 0.0)))))))) || false, ! (! (((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(asinh(4.5)))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(32.31)), float(injectionSwitch.y), bool(true)))) * round(length(normalize(cos(vec3(0.0, 0.0, 0.0)))))))) || _GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))))))))))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0))))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-582.129)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], min(_GLF_IDENTITY((injectionSwitch)[0], (true ? (injectionSwitch)[0] : _GLF_FUZZED(64.77))), (injectionSwitch)[0])), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1827.9060), _GLF_FUZZED(-1.3)), bvec2(false, false))).x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0))))) > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0))))) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0))))) > injectionSwitch.y))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0))))) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0))))) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0))))) > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0))))) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0))))) > injectionSwitch.y))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0))))) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0))))) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))))))))))), _GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)) + 0.0)))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(bool(bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false)), bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(4.8)), float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), bool(true)))))))) > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0))))) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0))))) > injectionSwitch.y))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)))))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(32.31)), float(injectionSwitch.y), bool(true)))) * round(length(normalize(cos(vec3(0.0, 0.0, 0.0)))))))) || _GLF_IDENTITY(false, (false) && true), ! (! (((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(asinh(4.5)))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(32.31)), float(injectionSwitch.y), bool(true)))) * round(length(normalize(cos(vec3(0.0, 0.0, 0.0)))))))) || _GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))))))))))) && true)) && true)) && true)))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint read = 0;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, true && (false)), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, true && (false)), false))))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, true && (false)), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, true && (false)), false))))))))), ! (! (false)))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) - 0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), (0 << _GLF_IDENTITY(int(1), int(1))) + (int(1))), int(1)))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, false, false)), ! (! (bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, false, false))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x)) > injectionSwitch.y))))
          barrier();
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_LOOP(false))));
        }
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 0.0 + (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(vec3(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), 0.0, sqrt(0.0)))))))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) - 0)) | (0 >> _GLF_IDENTITY(int(2), int(2)))), int(3))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) & (92776))), (_GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) & (92776)))) || false); _injected_loop_counter --)
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))
        barrier();
      }
     barrier();
    }
  }
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), int(4)))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), int(4)))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4)))))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, min(4, 4))))), 64, 4);
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) % 2), min((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) % 2), (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) % 2))), _GLF_IDENTITY(1u, (1u) / (1u ^ 0u)) * (_GLF_IDENTITY((subgroup_local_id % _GLF_IDENTITY(2, min(2, 2))), clamp((subgroup_local_id % 2), _GLF_IDENTITY((subgroup_local_id % _GLF_IDENTITY(2, clamp(2, 2, 2))), max((subgroup_local_id % 2), (subgroup_local_id % 2))), (subgroup_local_id % 2))))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) % 2), ((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) % 2)) << (85596u & uint(_GLF_ZERO(0.0, injectionSwitch.x)))), min((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), min(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), _GLF_IDENTITY(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), (clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) | (clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), min(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), _GLF_IDENTITY(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), (clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) | (clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))))), (_GLF_IDENTITY(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), min(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), _GLF_IDENTITY(clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id), (clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) | (clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)))))) << 0u))))) % _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (2) / 1), _GLF_IDENTITY(2, (2) >> 0)))), (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) % 2))), 1u * (_GLF_IDENTITY((subgroup_local_id % 2), clamp((subgroup_local_id % 2), _GLF_IDENTITY((subgroup_local_id % 2), max((subgroup_local_id % 2), (subgroup_local_id % _GLF_IDENTITY(2, 1 * (_GLF_IDENTITY(2, int(ivec3(2, 0, 1)))))))), (subgroup_local_id % 2))))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, uint(uvec4(workgroup_id, 0u, 1u, 0u)))) : uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) % 2), min((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) % 2), (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) % 2))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), _GLF_IDENTITY(clamp((subgroup_local_id % 2), _GLF_IDENTITY((subgroup_local_id % 2), max((subgroup_local_id % 2), (subgroup_local_id % 2))), (subgroup_local_id % 2)), 0u + (clamp((subgroup_local_id % 2), _GLF_IDENTITY((subgroup_local_id % 2), max((subgroup_local_id % 2), (subgroup_local_id % 2))), (subgroup_local_id % 2))))), max(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), _GLF_IDENTITY(clamp((subgroup_local_id % 2), _GLF_IDENTITY((subgroup_local_id % 2), max((subgroup_local_id % 2), (subgroup_local_id % 2))), (subgroup_local_id % 2)), 0u + (clamp((subgroup_local_id % 2), _GLF_IDENTITY((subgroup_local_id % 2), max((subgroup_local_id % 2), (subgroup_local_id % 2))), (subgroup_local_id % 2))))), 1u * (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) % 2), clamp((subgroup_local_id % 2), _GLF_IDENTITY((subgroup_local_id % 2), max((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u) % 2), (subgroup_local_id % 2))), (subgroup_local_id % 2))))), _GLF_IDENTITY((subgroup_local_id % 2), clamp((subgroup_local_id % 2), _GLF_IDENTITY((subgroup_local_id % 2), max((subgroup_local_id % 2), (subgroup_local_id % 2))), (subgroup_local_id % 2)))))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) % 2), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) % 2)), min(~ ((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) % 2)), ~ ((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) % 2)))))), min((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) % 2), (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) % 2))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), clamp((_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u)), _GLF_IDENTITY((subgroup_local_id % 2), max((subgroup_local_id % 2), (subgroup_local_id % 2))), _GLF_IDENTITY((subgroup_local_id % 2), ~ (~ ((subgroup_local_id % 2)))))), max(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), clamp((subgroup_local_id % 2), _GLF_IDENTITY((subgroup_local_id % 2), max((subgroup_local_id % 2), (_GLF_IDENTITY(subgroup_local_id % 2, ~ (~ (subgroup_local_id % 2)))))), (subgroup_local_id % 2))), 1u * (_GLF_IDENTITY((subgroup_local_id % 2), clamp((subgroup_local_id % _GLF_IDENTITY(2, (_GLF_IDENTITY(2, max(2, 2))) ^ 0)), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | 0u)), max((subgroup_local_id % 2), (subgroup_local_id % 2))), (subgroup_local_id % 2))))), _GLF_IDENTITY((subgroup_local_id % 2), clamp((subgroup_local_id % 2), _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), max((subgroup_local_id % 2), (subgroup_local_id % 2))), ~ (~ (_GLF_IDENTITY((subgroup_local_id % 2), max((subgroup_local_id % 2), (subgroup_local_id % 2)))))), (subgroup_local_id % 2)))))))), (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(subgroup_base) : uint(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), 0u + (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)))) % 2), min((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u))) % 2), (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) % 2))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), clamp((subgroup_local_id % 2), _GLF_IDENTITY((subgroup_local_id % 2), max((subgroup_local_id % 2), (subgroup_local_id % 2))), (subgroup_local_id % 2))), max(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), clamp((subgroup_local_id % 2), _GLF_IDENTITY((subgroup_local_id % 2), max((subgroup_local_id % 2), (subgroup_local_id % 2))), (subgroup_local_id % 2))), 1u * (_GLF_IDENTITY((subgroup_local_id % 2), clamp((subgroup_local_id % 2), _GLF_IDENTITY((subgroup_local_id % 2), max((subgroup_local_id % 2), (subgroup_local_id % 2))), (subgroup_local_id % 2))))), _GLF_IDENTITY((subgroup_local_id % 2), clamp((subgroup_local_id % 2), _GLF_IDENTITY((subgroup_local_id % 2), max((subgroup_local_id % 2), (subgroup_local_id % 2))), (subgroup_local_id % 2))))))))))) + 0u))))) == 0, ! (! (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))), subgroup_local_id)) % 2), 1u * ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) % 2))) == 0))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), (_GLF_IDENTITY(62450u, (62450u) / 1u) & 0u) | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, 0u | (subgroup_local_id % 2))), min((subgroup_local_id % 2), (subgroup_local_id % _GLF_IDENTITY(2, (2) - 0)))), (1u | 1u) * (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, 0u | (subgroup_local_id % 2))), min((subgroup_local_id % 2), (subgroup_local_id % _GLF_IDENTITY(2, (2) - 0)))))))), 1u * _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), uint(uvec3(~ ((subgroup_local_id % 2)), 0u, 1u))))), (_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), uint(uvec3(~ ((_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) + 0u))), 0u, 1u)))))) >> 0u)), uint(uint(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), uint(uvec3(~ ((subgroup_local_id % 2)), 0u, 1u))))), (_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), uint(uvec3(~ ((_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) + 0u))), 0u, 1u)))))) >> 0u)), clamp((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), uint(uvec3(~ ((subgroup_local_id % 2)), 0u, 1u))))), (_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), uint(uvec3(~ ((_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) + 0u))), 0u, 1u)))))) >> 0u)), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), uint(uvec3(~ ((subgroup_local_id % 2)), 0u, 1u))))), (_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), uint(uvec3(~ ((_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) + 0u))), 0u, 1u)))))) >> 0u)), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), uint(uvec3(~ ((subgroup_local_id % 2)), 0u, 1u))))), (_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ ((subgroup_local_id % 2)), uint(uvec3(~ ((_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) + 0u))), 0u, 1u)))))) >> 0u)))))))) == 0, ! (! _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) + 0u) >> _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, 0u + (0u)))))), subgroup_local_id)) % 2), 1u * ((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (subgroup_local_id), clamp(~ (subgroup_local_id), ~ (subgroup_local_id), ~ (subgroup_local_id)))), max(_GLF_IDENTITY((_GLF_IDENTITY(~ (subgroup_local_id), clamp(~ (subgroup_local_id), ~ (subgroup_local_id), ~ (subgroup_local_id)))), max((_GLF_IDENTITY(~ (subgroup_local_id), clamp(~ (subgroup_local_id), ~ (subgroup_local_id), ~ (subgroup_local_id)))), (_GLF_IDENTITY(~ (subgroup_local_id), clamp(~ (subgroup_local_id), ~ (subgroup_local_id), ~ (subgroup_local_id)))))), (_GLF_IDENTITY(~ (subgroup_local_id), clamp(~ (subgroup_local_id), ~ _GLF_IDENTITY((subgroup_local_id), (_GLF_IDENTITY((subgroup_local_id), clamp((subgroup_local_id), (subgroup_local_id), (subgroup_local_id)))) << (0u >> _GLF_IDENTITY(uint(5u), uint(5u)))), ~ (subgroup_local_id)))))))), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))), min(((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))), ((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))))) | ((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))))) | (subgroup_local_id)) % _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, 0 ^ (2)), _GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, ~ (~ (2))), 2))))))))) == 0), bool(bvec2((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) + 0u) >> _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, 0u + (0u)))))), subgroup_local_id)) % 2), 1u * ((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (subgroup_local_id), clamp(~ (subgroup_local_id), ~ (subgroup_local_id), ~ (subgroup_local_id)))), max(_GLF_IDENTITY((_GLF_IDENTITY(~ (subgroup_local_id), clamp(~ (subgroup_local_id), ~ (subgroup_local_id), ~ (subgroup_local_id)))), max((_GLF_IDENTITY(~ (subgroup_local_id), clamp(~ (subgroup_local_id), ~ (subgroup_local_id), ~ (subgroup_local_id)))), (_GLF_IDENTITY(~ (subgroup_local_id), clamp(~ (subgroup_local_id), ~ (subgroup_local_id), ~ (subgroup_local_id)))))), (_GLF_IDENTITY(~ (subgroup_local_id), clamp(~ (subgroup_local_id), ~ _GLF_IDENTITY((subgroup_local_id), (_GLF_IDENTITY((subgroup_local_id), clamp((subgroup_local_id), (subgroup_local_id), (subgroup_local_id)))) << (0u >> _GLF_IDENTITY(uint(5u), uint(5u)))), ~ (subgroup_local_id)))))))), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))), min(((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))), ((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))))) | ((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))))) | (subgroup_local_id)) % _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, 0 ^ (2)), _GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, ~ (~ (2))), 2))))))))) == 0), true))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 0.0, 1.0, 0.0))), injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))))) * vec2(1.0, 1.0)), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(0.1), _GLF_FUZZED(-775.937)), vec2(((injectionSwitch) * vec2(1.0, 1.0))[0], _GLF_IDENTITY(((injectionSwitch) * vec2(1.0, 1.0))[1], min(((injectionSwitch) * vec2(1.0, 1.0))[1], ((injectionSwitch) * vec2(1.0, 1.0))[1]))), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) / vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-665.263) : injectionSwitch.y))), ((_GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))))).x > injectionSwitch.y)) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(15.15, 7310.8003)) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))), 1.0, 0.0, 1.0, 1.0))).y), true && ((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[1]))[0], injectionSwitch[1])).x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))));
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   do
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
                continue;
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0))).x > injectionSwitch.y))))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                 continue;
                }
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, sqrt(0.0)))).y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, max(0, 0))], injectionSwitch[1])).x > injectionSwitch.y))))
                  barrier();
                 continue;
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), ((_GLF_IDENTITY(false, true && (false)))) || _GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && _GLF_IDENTITY(true, false || (true))), (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-9696.6439)), float(injectionSwitch.x), bool(true))) : _GLF_FUZZED(determinant(mat2(5.1, 49.55, -165.590, -55.76))))) > injectionSwitch.y))), false || (! (_GLF_IDENTITY(false, true && (false))))))), false || _GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), ((_GLF_IDENTITY(false, true && (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(true && _GLF_IDENTITY((false), ((false)) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true && _GLF_IDENTITY((false), ((false)) && true), (true && _GLF_IDENTITY((false), ((false)) && true)) || false)), (_GLF_IDENTITY(! (_GLF_IDENTITY(true && _GLF_IDENTITY((false), ((false)) && true), (true && _GLF_IDENTITY((false), ((false)) && true)) || false)), bool(bvec2(! (_GLF_IDENTITY(true && _GLF_IDENTITY((false), ((false)) && true), (true && _GLF_IDENTITY((false), ((false)) && true)) || false)), true)))) || false))))), ((_GLF_IDENTITY(false, true && (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), true))) || (! (_GLF_IDENTITY(false, true && (false)))))))), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), ((_GLF_IDENTITY(false, true && (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(true && _GLF_IDENTITY((false), ((false)) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true && _GLF_IDENTITY((false), ((false)) && true), (true && _GLF_IDENTITY((false), ((false)) && true)) || false)), (_GLF_IDENTITY(! (_GLF_IDENTITY(true && _GLF_IDENTITY((false), ((false)) && true), (true && _GLF_IDENTITY((false), ((false)) && true)) || false)), bool(bvec2(! (_GLF_IDENTITY(true && _GLF_IDENTITY((false), ((false)) && true), (true && _GLF_IDENTITY((false), ((false)) && true)) || false)), true)))) || false))))), ((_GLF_IDENTITY(false, true && (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), true))) || (! (_GLF_IDENTITY(false, true && (false)))))))))), true && (bool(bool((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), ((_GLF_IDENTITY(false, true && (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(true && _GLF_IDENTITY((false), ((false)) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true && _GLF_IDENTITY((false), ((false)) && true), (true && _GLF_IDENTITY((false), ((false)) && true)) || false)), (_GLF_IDENTITY(! (_GLF_IDENTITY(true && _GLF_IDENTITY((false), ((false)) && true), (true && _GLF_IDENTITY((false), ((false)) && true)) || false)), bool(bvec2(! (_GLF_IDENTITY(true && _GLF_IDENTITY((false), ((false)) && true), (true && _GLF_IDENTITY((false), ((false)) && true)) || false)), true)))) || false))))), ((_GLF_IDENTITY(false, true && (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), true))) || (! (_GLF_IDENTITY(false, true && (false))))))))))))))))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, true, true)), ! (! (bool(bvec4(_GLF_DEAD(false), false, true, true)))))))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))
                  break;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), false)))), ! (! (bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), false)))))))))))))))))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 break;
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               if(_GLF_DEAD(false))
                continue;
               barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))))
              break;
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
              }
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
            }
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))), (bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && true)))), _GLF_IDENTITY(true && (bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))))), (_GLF_IDENTITY(true && (bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))))), ! (! (true && (bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), (bool(bool(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y))))))))))) && _GLF_IDENTITY(true, false || (true))))))))))) && true))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))), (bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && true)))), _GLF_IDENTITY(true && (bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))))), (_GLF_IDENTITY(true && (bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))))), ! (! (true && (bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), (bool(bool(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y))))))))))) && _GLF_IDENTITY(true, false || (true))))))))))) && true))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))), (bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && true)))), _GLF_IDENTITY(true && (bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))))), (_GLF_IDENTITY(true && (bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))))), ! (! (true && (bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), (bool(bool(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y))))))))))) && _GLF_IDENTITY(true, false || (true))))))))))) && true))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))), (bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && true)))), _GLF_IDENTITY(true && (bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))))), (_GLF_IDENTITY(true && (bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))))), ! (! (true && (bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), (bool(bool(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y))))))))))) && _GLF_IDENTITY(true, false || (true))))))))))) && true))), false, false))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))), (bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && true)))), _GLF_IDENTITY(true && (bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))))), (_GLF_IDENTITY(true && (bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))))), ! (! (true && (bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), (bool(bool(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y))))))))))) && _GLF_IDENTITY(true, false || (true))))))))))) && true))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))), (bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && true)))), _GLF_IDENTITY(true && (bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))))), (_GLF_IDENTITY(true && (bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))))), ! (! (true && (bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), (bool(bool(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y))))))))))) && _GLF_IDENTITY(true, false || (true))))))))))) && true))), false, false))), false))))))) || false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
         break;
        }
       read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(uint(false)) : virtual_gid))], 4, _GLF_IDENTITY(_GLF_IDENTITY(64, clamp(64, 64, _GLF_IDENTITY(64, (64) | (64)))), max(64, 64)), 2);
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false || (false))))));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), (max(0, 0)) >> (0 >> _GLF_IDENTITY(int(1), int(1)))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
        {
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y) || false))))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat3((injectionSwitch) * mat2(1.0), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(_GLF_IDENTITY(vec2(0.0, 1.0), clamp(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, 1.0), clamp(vec2(0.0, 1.0), vec2(0.0, 1.0), vec2(0.0, 1.0))), vec2(0.0, 1.0))), vec2(1.0, 0.0))), 1.0, 1.0, 0.0, 0.0, abs(1.0))))).x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, min(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) + 0.0, (_GLF_IDENTITY((injectionSwitch.y), float(vec4((injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0))) + 0.0) - 0.0)), injectionSwitch.y))))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   read = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, int(int(2))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 0.0, 0.0, cos(0.0), log(1.0))), min(vec2(mat4x3(injectionSwitch, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 0.0, 0.0, cos(0.0), log(1.0))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 0.0, 0.0, cos(0.0), log(1.0))), mix(vec2((vec2(mat4x3(injectionSwitch, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 0.0, 0.0, cos(0.0), log(1.0))))[0], (vec2(mat4x3(injectionSwitch, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 0.0, 0.0, cos(0.0), log(1.0))))[1]), vec2(_GLF_FUZZED(-66.15), _GLF_FUZZED(-4.5)), bvec2(false, false)))))).x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, min(1, 1))))) | (1))))), clamp(int(1), int(1), int(1))))), ((0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1)))))) | 0), max((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 + (int(1))), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))), ((0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1)))))) ^ (0 | int(_GLF_ZERO(0.0, injectionSwitch.x)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0)))))))), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0)))))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0))))))))), (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0)))))))))) || false)))) && true), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0)))))))), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0)))))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0))))))))), (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0)))))))))) || false)))) && true))), bool(bvec2(bool(bool(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0)))))))), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0)))))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0))))))))), (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0)))))))))) || false)))) && true))), false))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0)))))))), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0)))))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0))))))))), (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0)))))))))) || false)))) && true), ! (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0)))))))), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), bool(bool(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))) / 1.0)))))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0))))))))), (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! _GLF_IDENTITY((! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(6451.6149) : _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))))), false || ((! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(6451.6149) : _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))))))))))))) || false)))) && true))))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0)))))))), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0)))))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0))))))))), (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0)))))))))) || false)))) && true), ! (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0)))))))), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), bool(bool(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))) / 1.0)))))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / 1.0))))))))), (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! _GLF_IDENTITY((! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(6451.6149) : _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))))), false || ((! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) / _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(6451.6149) : _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))))))))))))) || false)))) && true))))), false)))) && true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(3.3))) > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))
        break;
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))), _GLF_IDENTITY(clamp(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0)), (mat2(1.0) * (_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), max(vec2(injectionSwitch.y, 1.0), vec2(injectionSwitch.y, 1.0))))) * mat2(1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(vec2(injectionSwitch.y, _GLF_IDENTITY(1.0, (1.0) - 0.0)), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))), max(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), (mat2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))), float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), (_GLF_IDENTITY(mat2(1.0), (false ? _GLF_FUZZED(mat2(6308.8601, 261.697, -9818.8484, 1.9)) : mat2(1.0))) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))))), float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))), max(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), _GLF_IDENTITY((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), clamp((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), _GLF_IDENTITY((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), _GLF_IDENTITY(vec2(mat2x4((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), min(vec2(mat2x4((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), vec2(mat2x4((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0))))), _GLF_IDENTITY((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), clamp((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), _GLF_IDENTITY((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), max((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))))), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))))))) * mat2(1.0)))), float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))))), 1.0, 1.0), min(vec3(_GLF_IDENTITY(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))), _GLF_IDENTITY(max(float(_GLF_IDENTITY(vec2(injectionSwitch.y, _GLF_IDENTITY(1.0, min(1.0, 1.0))), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), _GLF_IDENTITY((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0), ((mat2(1.0) * (vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).y, 1.0))) * mat2(1.0)) / vec2(1.0, 1.0))))), float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0))))), (max(float(_GLF_IDENTITY(vec2(injectionSwitch.y, _GLF_IDENTITY(1.0, min(1.0, 1.0))), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), _GLF_IDENTITY((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0), ((mat2(1.0) * (vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).y, 1.0))) * mat2(1.0)) / vec2(1.0, 1.0))))), float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(21.34)), float(1.0), bool(true))))))), (mat2(1.0) * _GLF_IDENTITY((vec2(injectionSwitch.y, 1.0)), max((vec2(injectionSwitch.y, 1.0)), (vec2(injectionSwitch.y, 1.0))))) * mat2(1.0)))))) / 1.0)), 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((true ? 1.0 : _GLF_FUZZED(0.0)), 0.0 + ((true ? 1.0 : _GLF_FUZZED(0.0)))))), vec3(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * _GLF_IDENTITY((vec2(injectionSwitch.y, 1.0)), (false ? _GLF_FUZZED(vec2(-6.0, 7.6)) : (vec2(injectionSwitch.y, 1.0)))), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))), float(mat2(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * _GLF_IDENTITY((vec2(injectionSwitch.y, 1.0)), (false ? _GLF_FUZZED(vec2(-6.0, 7.6)) : (vec2(injectionSwitch.y, 1.0)))), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))), 1.0, tan(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)), dot(vec4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, 0.0, 0.0, 0.0), _GLF_IDENTITY(mat2(mat3(_GLF_IDENTITY(mat2(1.0, 0.0, 0.0, 0.0), (mat2(1.0, 0.0, 0.0, 0.0)) - mat2(0.0, 0.0, 0.0, 0.0)))), mat2(mat3x4(mat2(mat3(_GLF_IDENTITY(mat2(1.0, 0.0, 0.0, 0.0), (mat2(1.0, 0.0, 0.0, 0.0)) - mat2(0.0, 0.0, 0.0, 0.0)))))))))), 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)))), 0.0))), max(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), mix(vec2(_GLF_FUZZED(3.2), _GLF_IDENTITY((vec2(injectionSwitch.y, 1.0))[1], mix(float(_GLF_FUZZED(-3415.5919)), float((vec2(injectionSwitch.y, 1.0))[1]), bool(true)))), vec2((vec2(injectionSwitch.y, 1.0))[0], _GLF_FUZZED(-737.977)), bvec2(true, false)))), (mat2(1.0) * _GLF_IDENTITY((vec2(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0)), mat2(1.0) * ((vec2(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0))))) * mat2(1.0)))), float(_GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), mix(vec2((vec2(injectionSwitch.y, 1.0))[0], (vec2(injectionSwitch.y, 1.0))[1]), vec2(_GLF_FUZZED(-565.391), _GLF_FUZZED(-6054.7365)), bvec2(false, false))), _GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, min(1.0, 1.0))) * (vec2(injectionSwitch.y, 1.0)), _GLF_IDENTITY((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0), vec2(0.0, 0.0) + (_GLF_IDENTITY((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0), max((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))))))))), 1.0, 1.0))))), float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), min(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), mat2(1.0) * (vec2(injectionSwitch.y, 1.0)))))), (mat2(_GLF_IDENTITY(1.0, (1.0) + sqrt(0.0))) * (vec2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0))) * mat2(1.0))))), clamp(clamp(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0)), (mat2(1.0) * (_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), max(vec2(injectionSwitch.y, 1.0), vec2(injectionSwitch.y, 1.0))))) * mat2(1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(vec2(injectionSwitch.y, _GLF_IDENTITY(1.0, (1.0) - 0.0)), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))), max(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), (mat2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))), float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), (_GLF_IDENTITY(mat2(1.0), (false ? _GLF_FUZZED(mat2(6308.8601, 261.697, -9818.8484, 1.9)) : mat2(1.0))) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))))), float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))), max(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), _GLF_IDENTITY((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), clamp((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), _GLF_IDENTITY((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), _GLF_IDENTITY(vec2(mat2x4((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), min(vec2(mat2x4((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), vec2(mat2x4((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0))))), _GLF_IDENTITY((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), clamp((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), _GLF_IDENTITY((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), max((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))))), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))))))) * mat2(1.0)))), float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))))), 1.0, 1.0), min(vec3(_GLF_IDENTITY(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))), _GLF_IDENTITY(max(float(_GLF_IDENTITY(vec2(injectionSwitch.y, _GLF_IDENTITY(1.0, min(1.0, 1.0))), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), _GLF_IDENTITY((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0), ((mat2(1.0) * (vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).y, 1.0))) * mat2(1.0)) / vec2(1.0, 1.0))))), float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0))))), (max(float(_GLF_IDENTITY(vec2(injectionSwitch.y, _GLF_IDENTITY(1.0, min(1.0, 1.0))), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), _GLF_IDENTITY((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0), ((mat2(1.0) * (vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).y, 1.0))) * mat2(1.0)) / vec2(1.0, 1.0))))), float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(21.34)), float(1.0), bool(true))))))), (mat2(1.0) * _GLF_IDENTITY((vec2(injectionSwitch.y, 1.0)), max((vec2(injectionSwitch.y, 1.0)), (vec2(injectionSwitch.y, 1.0))))) * mat2(1.0)))))) / 1.0)), 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((true ? 1.0 : _GLF_FUZZED(0.0)), 0.0 + ((true ? 1.0 : _GLF_FUZZED(0.0)))))), vec3(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * _GLF_IDENTITY((vec2(injectionSwitch.y, 1.0)), (false ? _GLF_FUZZED(vec2(-6.0, 7.6)) : (vec2(injectionSwitch.y, 1.0)))), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))), float(mat2(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * _GLF_IDENTITY((vec2(injectionSwitch.y, 1.0)), (false ? _GLF_FUZZED(vec2(-6.0, 7.6)) : (vec2(injectionSwitch.y, 1.0)))), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))), 1.0, tan(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)), dot(vec4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, 0.0, 0.0, 0.0), _GLF_IDENTITY(mat2(mat3(_GLF_IDENTITY(mat2(1.0, 0.0, 0.0, 0.0), (mat2(1.0, 0.0, 0.0, 0.0)) - mat2(0.0, 0.0, 0.0, 0.0)))), mat2(mat3x4(mat2(mat3(_GLF_IDENTITY(mat2(1.0, 0.0, 0.0, 0.0), (mat2(1.0, 0.0, 0.0, 0.0)) - mat2(0.0, 0.0, 0.0, 0.0)))))))))), 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)))), 0.0))), max(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), mix(vec2(_GLF_FUZZED(3.2), _GLF_IDENTITY((vec2(injectionSwitch.y, 1.0))[1], mix(float(_GLF_FUZZED(-3415.5919)), float((vec2(injectionSwitch.y, 1.0))[1]), bool(true)))), vec2((vec2(injectionSwitch.y, 1.0))[0], _GLF_FUZZED(-737.977)), bvec2(true, false)))), (mat2(1.0) * _GLF_IDENTITY((vec2(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0)), mat2(1.0) * ((vec2(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0))))) * mat2(1.0)))), float(_GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), mix(vec2((vec2(injectionSwitch.y, 1.0))[0], (vec2(injectionSwitch.y, 1.0))[1]), vec2(_GLF_FUZZED(-565.391), _GLF_FUZZED(-6054.7365)), bvec2(false, false))), _GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, min(1.0, 1.0))) * (vec2(injectionSwitch.y, 1.0)), _GLF_IDENTITY((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0), vec2(0.0, 0.0) + (_GLF_IDENTITY((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0), max((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))))))))), 1.0, 1.0))))), float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), min(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), mat2(1.0) * (vec2(injectionSwitch.y, 1.0)))))), (mat2(_GLF_IDENTITY(1.0, (1.0) + sqrt(0.0))) * (vec2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0))) * mat2(1.0))))), clamp(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0)), (mat2(1.0) * (_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), max(vec2(injectionSwitch.y, 1.0), vec2(injectionSwitch.y, 1.0))))) * mat2(1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(vec2(injectionSwitch.y, _GLF_IDENTITY(1.0, (1.0) - 0.0)), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))), max(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), (mat2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))), float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), (_GLF_IDENTITY(mat2(1.0), (false ? _GLF_FUZZED(mat2(6308.8601, 261.697, -9818.8484, 1.9)) : mat2(1.0))) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))))), float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))), max(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), _GLF_IDENTITY((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), clamp((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), _GLF_IDENTITY((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), _GLF_IDENTITY(vec2(mat2x4((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), min(vec2(mat2x4((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), vec2(mat2x4((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0))))), _GLF_IDENTITY((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), clamp((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), _GLF_IDENTITY((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), max((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))))), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))))))) * mat2(1.0)))), float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))))), 1.0, 1.0), min(vec3(_GLF_IDENTITY(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))), _GLF_IDENTITY(max(float(_GLF_IDENTITY(vec2(injectionSwitch.y, _GLF_IDENTITY(1.0, min(1.0, 1.0))), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), _GLF_IDENTITY((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0), ((mat2(1.0) * (vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).y, 1.0))) * mat2(1.0)) / vec2(1.0, 1.0))))), float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0))))), (max(float(_GLF_IDENTITY(vec2(injectionSwitch.y, _GLF_IDENTITY(1.0, min(1.0, 1.0))), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), _GLF_IDENTITY((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0), ((mat2(1.0) * (vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).y, 1.0))) * mat2(1.0)) / vec2(1.0, 1.0))))), float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(21.34)), float(1.0), bool(true))))))), (mat2(1.0) * _GLF_IDENTITY((vec2(injectionSwitch.y, 1.0)), max((vec2(injectionSwitch.y, 1.0)), (vec2(injectionSwitch.y, 1.0))))) * mat2(1.0)))))) / 1.0)), 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((true ? 1.0 : _GLF_FUZZED(0.0)), 0.0 + ((true ? 1.0 : _GLF_FUZZED(0.0)))))), vec3(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * _GLF_IDENTITY((vec2(injectionSwitch.y, 1.0)), (false ? _GLF_FUZZED(vec2(-6.0, 7.6)) : (vec2(injectionSwitch.y, 1.0)))), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))), float(mat2(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * _GLF_IDENTITY((vec2(injectionSwitch.y, 1.0)), (false ? _GLF_FUZZED(vec2(-6.0, 7.6)) : (vec2(injectionSwitch.y, 1.0)))), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))), 1.0, tan(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)), dot(vec4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, 0.0, 0.0, 0.0), _GLF_IDENTITY(mat2(mat3(_GLF_IDENTITY(mat2(1.0, 0.0, 0.0, 0.0), (mat2(1.0, 0.0, 0.0, 0.0)) - mat2(0.0, 0.0, 0.0, 0.0)))), mat2(mat3x4(mat2(mat3(_GLF_IDENTITY(mat2(1.0, 0.0, 0.0, 0.0), (mat2(1.0, 0.0, 0.0, 0.0)) - mat2(0.0, 0.0, 0.0, 0.0)))))))))), 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)))), 0.0))), max(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), mix(vec2(_GLF_FUZZED(3.2), _GLF_IDENTITY((vec2(injectionSwitch.y, 1.0))[1], mix(float(_GLF_FUZZED(-3415.5919)), float((vec2(injectionSwitch.y, 1.0))[1]), bool(true)))), vec2((vec2(injectionSwitch.y, 1.0))[0], _GLF_FUZZED(-737.977)), bvec2(true, false)))), (mat2(1.0) * _GLF_IDENTITY((vec2(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0)), mat2(1.0) * ((vec2(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0))))) * mat2(1.0)))), float(_GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), mix(vec2((vec2(injectionSwitch.y, 1.0))[0], (vec2(injectionSwitch.y, 1.0))[1]), vec2(_GLF_FUZZED(-565.391), _GLF_FUZZED(-6054.7365)), bvec2(false, false))), _GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, min(1.0, 1.0))) * (vec2(injectionSwitch.y, 1.0)), _GLF_IDENTITY((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0), vec2(0.0, 0.0) + (_GLF_IDENTITY((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0), max((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))))))))), 1.0, 1.0))))), float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), min(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), mat2(1.0) * (vec2(injectionSwitch.y, 1.0)))))), (mat2(_GLF_IDENTITY(1.0, (1.0) + sqrt(0.0))) * (vec2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0))) * mat2(1.0))))), clamp(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0)), (mat2(1.0) * (_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), max(vec2(injectionSwitch.y, 1.0), vec2(injectionSwitch.y, 1.0))))) * mat2(1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(vec2(injectionSwitch.y, _GLF_IDENTITY(1.0, (1.0) - 0.0)), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))), max(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), (mat2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))), float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), (_GLF_IDENTITY(mat2(1.0), (false ? _GLF_FUZZED(mat2(6308.8601, 261.697, -9818.8484, 1.9)) : mat2(1.0))) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))))), float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))), max(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), _GLF_IDENTITY((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), clamp((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), _GLF_IDENTITY((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), _GLF_IDENTITY(vec2(mat2x4((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), min(vec2(mat2x4((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), vec2(mat2x4((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0))))), _GLF_IDENTITY((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), clamp((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), _GLF_IDENTITY((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), max((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))))), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))))))) * mat2(1.0)))), float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))))), 1.0, 1.0), min(vec3(_GLF_IDENTITY(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))), _GLF_IDENTITY(max(float(_GLF_IDENTITY(vec2(injectionSwitch.y, _GLF_IDENTITY(1.0, min(1.0, 1.0))), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), _GLF_IDENTITY((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0), ((mat2(1.0) * (vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).y, 1.0))) * mat2(1.0)) / vec2(1.0, 1.0))))), float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0))))), (max(float(_GLF_IDENTITY(vec2(injectionSwitch.y, _GLF_IDENTITY(1.0, min(1.0, 1.0))), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), _GLF_IDENTITY((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0), ((mat2(1.0) * (vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).y, 1.0))) * mat2(1.0)) / vec2(1.0, 1.0))))), float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(21.34)), float(1.0), bool(true))))))), (mat2(1.0) * _GLF_IDENTITY((vec2(injectionSwitch.y, 1.0)), max((vec2(injectionSwitch.y, 1.0)), (vec2(injectionSwitch.y, 1.0))))) * mat2(1.0)))))) / 1.0)), 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((true ? 1.0 : _GLF_FUZZED(0.0)), 0.0 + ((true ? 1.0 : _GLF_FUZZED(0.0)))))), vec3(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * _GLF_IDENTITY((vec2(injectionSwitch.y, 1.0)), (false ? _GLF_FUZZED(vec2(-6.0, 7.6)) : (vec2(injectionSwitch.y, 1.0)))), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))), float(mat2(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * _GLF_IDENTITY((vec2(injectionSwitch.y, 1.0)), (false ? _GLF_FUZZED(vec2(-6.0, 7.6)) : (vec2(injectionSwitch.y, 1.0)))), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))), 1.0, tan(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)), dot(vec4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(1.0, 0.0, 0.0, 0.0), _GLF_IDENTITY(mat2(mat3(_GLF_IDENTITY(mat2(1.0, 0.0, 0.0, 0.0), (mat2(1.0, 0.0, 0.0, 0.0)) - mat2(0.0, 0.0, 0.0, 0.0)))), mat2(mat3x4(mat2(mat3(_GLF_IDENTITY(mat2(1.0, 0.0, 0.0, 0.0), (mat2(1.0, 0.0, 0.0, 0.0)) - mat2(0.0, 0.0, 0.0, 0.0)))))))))), 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)))), 0.0))), max(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), mix(vec2(_GLF_FUZZED(3.2), _GLF_IDENTITY((vec2(injectionSwitch.y, 1.0))[1], mix(float(_GLF_FUZZED(-3415.5919)), float((vec2(injectionSwitch.y, 1.0))[1]), bool(true)))), vec2((vec2(injectionSwitch.y, 1.0))[0], _GLF_FUZZED(-737.977)), bvec2(true, false)))), (mat2(1.0) * _GLF_IDENTITY((vec2(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0)), mat2(1.0) * ((vec2(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0))))) * mat2(1.0)))), float(_GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), mix(vec2((vec2(injectionSwitch.y, 1.0))[0], (vec2(injectionSwitch.y, 1.0))[1]), vec2(_GLF_FUZZED(-565.391), _GLF_FUZZED(-6054.7365)), bvec2(false, false))), _GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, min(1.0, 1.0))) * (vec2(injectionSwitch.y, 1.0)), _GLF_IDENTITY((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0), vec2(0.0, 0.0) + (_GLF_IDENTITY((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0), max((mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0), (mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) * mat2(1.0)))))))))), 1.0, 1.0))))), float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), min(mat2(1.0) * (vec2(injectionSwitch.y, 1.0)), mat2(1.0) * (vec2(injectionSwitch.y, 1.0)))))), (mat2(_GLF_IDENTITY(1.0, (1.0) + sqrt(0.0))) * (vec2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0))) * mat2(1.0)))))))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 subgroupBarrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec4(bvec2(_GLF_DEAD(false), true), true, true))), false))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(4, max(4, 4)), 64, 4);
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))), ((injectionSwitch.x > injectionSwitch.y)) && true))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, false)), _GLF_IDENTITY((bool(bvec3(true, false, false))), false || (_GLF_IDENTITY((bool(bvec3(true, false, false))), bool(bvec4((bool(bvec3(true, false, false))), true, true, true))))) || false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), true && (bool(bvec2(true, true)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! ((false))))))))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          barrier();
        }
       return;
      }
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true)) || false), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (false) && true), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((false) && true)))) || false), (false) && true))), ! (! ((! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)) || false, false || ((_GLF_IDENTITY(false, (false) && true)) || false))), (false) && true)), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)) || false, false || ((_GLF_IDENTITY(false, (false) && true)) || false))), (false) && true))))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true)))))));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     break;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))) || (injectionSwitch.x > injectionSwitch.y))), true, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true))))))))), _GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (! (false)), (_GLF_IDENTITY(! (! (false)), (! (! (false))) && true)) && true), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(! (! (false)), (_GLF_IDENTITY(! (! (false)), (! (! (false))) && true)) && true), false), false, false))))))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, _GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), false)))))))), true, false, true)), (bool(bvec4(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))))), true, false, true))) && true)), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))))), true, false, true)), (bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false))))))))), ! (! (! (bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false))))))))))))))), true, false, true))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec3(bvec3(bvec3(false, true, false))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec3(bvec3(bvec3(false, true, false))))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec3(bvec3(bvec3(false, true, false)))))) && true)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec3(bvec3(bvec3(false, true, false))))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec3(bvec3(bvec3(false, true, false)))))) && true)), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec3(bvec3(bvec3(false, true, false))))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec3(bvec3(bvec3(false, true, false)))))) && true))))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec3(bvec3(bvec3(false, true, false))))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec3(bvec3(bvec3(false, true, false)))))) && true)), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec3(bvec3(bvec3(false, true, false))))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec3(bvec3(bvec3(false, true, false)))))) && true))))), false, false), true)))))), bool(bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec3(bvec3(bvec3(false, true, false))))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec3(bvec3(bvec3(false, true, false)))))) && true)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec3(bvec3(bvec3(false, true, false))))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec3(bvec3(bvec3(false, true, false)))))) && true)), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec3(bvec3(bvec3(false, true, false))))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec3(bvec3(bvec3(false, true, false)))))) && true))))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec3(bvec3(bvec3(false, true, false))))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec3(bvec3(bvec3(false, true, false)))))) && true)), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec3(bvec3(bvec3(false, true, false))))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bvec3(bvec3(bvec3(false, true, false)))))) && true))))), false, false), true))))))))))), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec4(bvec3(true, true, true), true))))), false, true)), (bool(bvec4(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))), bvec3(bvec3(bvec3(false, true, false)))))), true, false, true))) && true), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))))), true, false, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))))), true, false, true)), ! (! (bool(bvec4(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))))), true, false, true)))))) && true), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false))))), (bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-881.014) : injectionSwitch.x)) < injectionSwitch.y)))), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), (_GLF_IDENTITY(true, false || (true))) && true))), false, true)), (bool(bvec4(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))))), true, _GLF_IDENTITY(false, (false) || false), true))) && true)))), true, true)))) && true)))), (injectionSwitch.x > injectionSwitch.y)))) && true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
