#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_41 {
 uvec4 _f0;
 mat2 _f1;
 bvec2 _f2;
 bvec3 _f3;
 int _f4;
 mat4x2 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_42 {
 _GLF_struct_41 _f0;
 bvec4 _f1;
 uint subgroup_base;
} ;

struct _GLF_struct_39 {
 mat4x2 _f0;
 mat2 _f1;
 int _f2;
 ivec2 _f3;
 mat2 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_38 {
 vec2 _f0;
 mat3 _f1;
 bvec4 _f2;
 int _f3;
 mat3x4 _f4;
 uvec3 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_40 {
 _GLF_struct_38 _f0;
 _GLF_struct_39 _f1;
} ;

struct _GLF_struct_43 {
 mat4x2 _f0;
 _GLF_struct_40 _f1;
 mat3 _f2;
 _GLF_struct_42 _f3;
} ;

struct _GLF_struct_35 {
 mat3x2 _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_36 {
 _GLF_struct_35 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_33 {
 mat4x2 _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_32 {
 mat3x4 _f0;
 bvec3 _f1;
 bool _f2;
} ;

struct _GLF_struct_31 {
 bvec2 _f0;
 uvec4 _f1;
 ivec4 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_30 {
 uvec2 _f0;
 mat3 _f1;
 ivec3 _f2;
 bvec2 _f3;
 bool _f4;
 vec3 _f5;
 float _f6;
} ;

struct _GLF_struct_34 {
 _GLF_struct_30 _f0;
 _GLF_struct_31 _f1;
 uvec2 _f2;
 _GLF_struct_32 _f3;
 mat2x4 _f4;
 _GLF_struct_33 _f5;
} ;

struct _GLF_struct_28 {
 uvec3 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_27 {
 bool _f0;
} ;

struct _GLF_struct_26 {
 uint _f0;
 bool _f1;
 float _f2;
} ;

struct _GLF_struct_29 {
 _GLF_struct_26 _f0;
 _GLF_struct_27 _f1;
 ivec3 _f2;
 _GLF_struct_28 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_24 {
 uvec2 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_23 {
 vec4 _f0;
} ;

struct _GLF_struct_22 {
 mat2 _f0;
 mat3x2 _f1;
 ivec2 _f2;
 bvec3 _f3;
 ivec2 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_25 {
 _GLF_struct_22 _f0;
 mat3x4 _f1;
 mat2 _f2;
 _GLF_struct_23 _f3;
 _GLF_struct_24 _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_20 {
 ivec4 _f0;
 bvec3 _f1;
 uvec2 _f2;
 bool _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_19 {
 bvec4 _f0;
} ;

struct _GLF_struct_21 {
 _GLF_struct_19 _f0;
 ivec4 _f1;
 _GLF_struct_20 _f2;
 uint subgroup_local_id;
 mat3 _f3;
} ;

struct _GLF_struct_37 {
 _GLF_struct_21 _f0;
 _GLF_struct_25 _f1;
 _GLF_struct_29 _f2;
 _GLF_struct_34 _f3;
 _GLF_struct_36 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_16 {
 mat3x2 _f0;
 mat4 _f1;
 bvec2 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_15 {
 bvec4 _f0;
 mat4x3 _f1;
 uint read;
 mat2x3 _f2;
} ;

struct _GLF_struct_17 {
 bvec4 _f0;
 uvec3 _f1;
 _GLF_struct_15 _f2;
 _GLF_struct_16 _f3;
} ;

struct _GLF_struct_14 {
 bvec2 _f0;
 vec4 _f1;
 vec4 _f2;
 uvec3 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_18 {
 _GLF_struct_14 _f0;
 ivec3 _f1;
 mat2x4 _f2;
 uint _f3;
 _GLF_struct_17 _f4;
} ;

struct _GLF_struct_11 {
 mat3 _f0;
 ivec4 _f1;
 int _f2;
 int _f3;
} ;

struct _GLF_struct_10 {
 vec4 _f0;
 bvec2 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_12 {
 mat4 _f0;
 _GLF_struct_10 _f1;
 uvec2 _f2;
 _GLF_struct_11 _f3;
} ;

struct _GLF_struct_8 {
 mat2x4 _f0;
 mat4x2 _f1;
 bvec3 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_9 {
 _GLF_struct_8 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_13 {
 _GLF_struct_9 _f0;
 uint workgroup_base;
 vec4 _f1;
 vec4 _f2;
 _GLF_struct_12 _f3;
} ;

struct _GLF_struct_5 {
 uvec2 _f0;
 mat2x3 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_6 {
 mat3x4 _f0;
 uvec3 _f1;
 mat4 _f2;
 _GLF_struct_5 _f3;
} ;

struct _GLF_struct_3 {
 uvec3 _f0;
} ;

struct _GLF_struct_2 {
 ivec4 _f0;
 bvec2 _f1;
} ;

struct _GLF_struct_1 {
 uvec2 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_0 {
 bvec2 _f0;
 mat2x4 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_4 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
 _GLF_struct_3 _f3;
 mat3 _f4;
} ;

struct _GLF_struct_7 {
 _GLF_struct_4 _f0;
 vec3 _f1;
 _GLF_struct_6 _f2;
 mat2x4 _f3;
 mat4x3 _f4;
 uint subgroup_id;
 mat3x4 _f5;
 ivec3 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(_GLF_struct_4(_GLF_struct_0(bvec2(true), mat2x4(1.0), uvec4(_GLF_IDENTITY(1u, max(1u, 1u)))), _GLF_struct_1(uvec2(_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uvec3(1u, 0u, 1u), uvec3(1u, 1u, 1u) * (uvec3(1u, 0u, 1u)))))), _GLF_IDENTITY(vec2(1.0), (_GLF_IDENTITY(vec2(1.0), _GLF_IDENTITY(clamp(vec2(1.0), vec2(1.0), vec2(1.0)), (clamp(vec2(1.0), vec2(1.0), vec2(1.0))) - vec2(0.0, 0.0)))) + log(vec2(1.0, 1.0)))), _GLF_struct_2(ivec4(1), bvec2(true)), _GLF_struct_3(uvec3(1u)), mat3(1.0)), vec3(1.0), _GLF_struct_6(mat3x4(1.0), uvec3(1u), mat4(1.0), _GLF_struct_5(uvec2(1u), mat2x3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(injectionSwitch.r) : 1.0))), vec2(1.0))), mat2x4(1.0), mat4x3(1.0), gl_SubgroupID, mat3x4(1.0), _GLF_IDENTITY(ivec3(1), (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) * (1))), (_GLF_IDENTITY(ivec3(1), (ivec3(1)) ^ ivec3(0, 0, 0))) << ivec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-293.441)), bool(false))), injectionSwitch.x)))))) | ivec3(0, 0, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-63607) : 0)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch) * mat2(1.0)))))).y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))))))))
      return;
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), false || ((! (false)))))))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), bool(bool(true))) && (false))));
  }
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY((_injected_loop_counter != 0), ! (! ((_injected_loop_counter != 0)))) && true)); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))))
        return;
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), (! (! (_GLF_IDENTITY(false, ! (! (false)))))) && true))))), true, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(false), false, true, true)), (bool(bvec4(_GLF_WRAPPED_LOOP(false), false, true, true))) && true)) && true)));
    }
  }
 _GLF_struct_37 _GLF_struct_replacement_37 = _GLF_struct_37(_GLF_struct_21(_GLF_struct_19(bvec4(true)), ivec4(_GLF_IDENTITY(1, (1) / 1)), _GLF_struct_20(ivec4(1), bvec3(true), uvec2(1u), true, ivec2(1)), gl_SubgroupInvocationID, mat3(1.0)), _GLF_struct_25(_GLF_struct_22(mat2(1.0), mat3x2(1.0), ivec2(1), bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, (true) || false), true, true, false)))) && true), bool(bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, (true) || false), true, true, false)))) && true))))), ivec2(1), vec4(1.0)), mat3x4(1.0), mat2(1.0), _GLF_struct_23(vec4(1.0)), _GLF_struct_24(uvec2(1u), uvec3(1u)), uvec2(1u)), _GLF_struct_29(_GLF_struct_26(1u, true, 1.0), _GLF_struct_27(true), _GLF_IDENTITY(ivec3(1), max(_GLF_IDENTITY(ivec3(1), (ivec3(1)) - ivec3(_GLF_IDENTITY(0, 0 ^ (0)), 0, 0)), ivec3(1))), _GLF_struct_28(uvec3(1u), ivec2(1)), bvec2(true)), _GLF_struct_34(_GLF_struct_30(_GLF_IDENTITY(uvec2(1u), uvec2(0u, 0u) ^ (uvec2(1u))), mat3(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, float(mat4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))) + (_GLF_IDENTITY(1.0, float(mat2x3(1.0, 1.0, 0.0, 0.0, 1.0, 0.0))))), sin(0.0), 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_ONE(1.0, injectionSwitch.y), cos(0.0), 1.0, 1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(3.0) : 1.0)), 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), determinant(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 0.0))), 1.0, 1.0))), ivec3(_GLF_IDENTITY(1, ~ (~ (1)))), bvec2(true), true, vec3(_GLF_IDENTITY(1.0, (1.0) - determinant(mat3(_GLF_IDENTITY(abs(0.0), (_GLF_IDENTITY(abs(0.0), (false ? _GLF_FUZZED(2.4) : abs(0.0)))) + 0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))), 1.0), _GLF_struct_31(bvec2(_GLF_IDENTITY(true, ! (! (true)))), uvec4(1u), ivec4(1), mat3x4(1.0)), uvec2(1u), _GLF_struct_32(mat3x4(1.0), bvec3(true), true), mat2x4(1.0), _GLF_struct_33(mat4x2(1.0), bvec4(true))), _GLF_struct_36(_GLF_struct_35(mat3x2(1.0), bvec4(true)), bvec3(true)), bvec4(true));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, false || ((false) || false))))) ? _GLF_FUZZED(-725.237) : _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), injectionSwitch.y, injectionSwitch.y))))))))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
            break;
           break;
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            break;
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          continue;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, false)))), true && (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))))))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(true && (! (false)), (true && (! (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
          {
          }
         else
          {
           do
            {
             return;
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, gl_WorkGroupSize)).x, (gl_WorkGroupSize.x) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) ^ uvec3(0u, 0u, 0u)).x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) ^ uvec3(0u, 0u, 0u)).x, min(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) ^ uvec3(0u, 0u, 0u)).x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) ^ uvec3(0u, 0u, 0u)).x))), _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) ^ uvec3(0u, 0u, 0u)).x)), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) ^ uvec3(0u, 0u, 0u)).x, (true ? _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) ^ uvec3(0u, 0u, 0u)).x : _GLF_FUZZED(num_workgroup))), _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) ^ uvec3(0u, 0u, 0u)).x))));
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(uvec3(uvec3(gl_WorkGroupID)), uvec3(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 1u)), max(uint(uvec2(0u, 1u)), uint(uvec2(0u, 1u))))), 0u, 0u) + (uvec3(uvec3(gl_WorkGroupID))))).x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
              break;
             for(int _injected_loop_counter = _GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), (true ? _GLF_IDENTITY(1, (1) - 0) : _GLF_FUZZED(-92609))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               return;
              }
            }
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)), bool(bvec3(bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)), true, false))))))))
            {
            }
           else
            {
             return;
            }
          }
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))))) && true)))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), clamp(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5))), int(5)))) | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
  }
 _GLF_struct_13 _GLF_struct_replacement_13 = _GLF_struct_13(_GLF_struct_9(_GLF_struct_8(mat2x4(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-454.499)), bool(false)))), mat4x2(1.0), bvec3(true), _GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))) || false))), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec3(bvec2(bvec3(bvec2(true), false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), mat4x2(1.0)), workgroup_size * workgroup_id, vec4(1.0), _GLF_IDENTITY(vec4(1.0), min(vec4(1.0), vec4(1.0))), _GLF_struct_12(_GLF_IDENTITY(mat4(1.0), (_GLF_IDENTITY(mat4(1.0), (false ? _GLF_FUZZED(mat4(-4.9, 224.579, -6.3, 5.5, 89.05, -2.9, 9.3, -1.6, -26.26, 96.61, 503.768, -1.8, 60.50, _GLF_IDENTITY(-923.816, 1.0 * (-923.816)), 0.6, -524.074)) : _GLF_IDENTITY(mat4(1.0), (true ? mat4(1.0) : _GLF_FUZZED(mat4(9.2, 0.0, -0.7, -2.9, 0.9, 5184.6901, -2636.8908, 4.1, -5.3, 2.2, 7.1, -6308.8016, -9.4, -89.11, 2756.0306, -4.5))))))) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), _GLF_struct_10(vec4(1.0), bvec2(true), mat2(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), max(_GLF_IDENTITY(uvec2(1u), (false ? _GLF_FUZZED((34855u ^ uvec2(36638u, 41254u))) : uvec2(1u))), uvec2(1u))), ~ (~ (_GLF_IDENTITY(uvec2(1u), max(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) - uvec2(0u, 0u)), (false ? _GLF_FUZZED((_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)) / uvec2(11872u, 69290u))) : uvec2(1u))), uvec2(_GLF_IDENTITY(1u, (1u) >> 0u))))))), _GLF_struct_11(mat3(1.0), _GLF_IDENTITY(ivec4(1), ivec4(0, 0, 0, 0) | (ivec4(1))), 1, 1)));
 _GLF_struct_43 _GLF_struct_replacement_43 = _GLF_struct_43(mat4x2(1.0), _GLF_struct_40(_GLF_struct_38(vec2(1.0), mat3(1.0), bvec4(true), 1, mat3x4(1.0), uvec3(1u), mat3x2(1.0)), _GLF_struct_39(mat4x2(1.0), mat2(1.0), 1, ivec2(1), mat2(1.0), vec2(1.0))), mat3(1.0), _GLF_struct_42(_GLF_struct_41(uvec4(1u), mat2(1.0), bvec2(true), bvec3(true), 1, mat4x2(1.0), _GLF_IDENTITY(mat3(1.0), (mat3(1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), bvec4(true), _GLF_struct_replacement_7.subgroup_id * subgroup_size));
 uint virtual_gid = _GLF_IDENTITY(_GLF_struct_replacement_13.workgroup_base + _GLF_struct_replacement_43._f3.subgroup_base + _GLF_struct_replacement_37._f0.subgroup_local_id, clamp(_GLF_struct_replacement_13.workgroup_base + _GLF_struct_replacement_43._f3.subgroup_base + _GLF_struct_replacement_37._f0.subgroup_local_id, _GLF_struct_replacement_13.workgroup_base + _GLF_struct_replacement_43._f3.subgroup_base + _GLF_struct_replacement_37._f0.subgroup_local_id, _GLF_IDENTITY(_GLF_struct_replacement_13.workgroup_base + _GLF_struct_replacement_43._f3.subgroup_base, ~ (~ (_GLF_struct_replacement_13.workgroup_base + _GLF_struct_replacement_43._f3.subgroup_base))) + _GLF_struct_replacement_37._f0.subgroup_local_id));
 uint next_virtual_gid = _GLF_struct_replacement_13.workgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_43._f3.subgroup_base, 1u * (_GLF_struct_replacement_43._f3.subgroup_base)) + ((_GLF_IDENTITY(_GLF_struct_replacement_37._f0.subgroup_local_id + 1, (_GLF_struct_replacement_37._f0.subgroup_local_id + 1) | 0u)) % subgroup_size);
 _GLF_struct_18 _GLF_struct_replacement_18 = _GLF_struct_18(_GLF_struct_14(bvec2(true), vec4(1.0), vec4(1.0), uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) << 0u), 0u)) | (1u))), mat2x4(1.0)), ivec3(1), mat2x4(1.0), 1u, _GLF_struct_17(bvec4(true), uvec3(_GLF_IDENTITY(1u, (1u) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_struct_15(bvec4(true), mat4x3(1.0), 0, mat2x3(1.0)), _GLF_struct_16(mat3x2(1.0), mat4(1.0), bvec2(true), mat2x4(1.0))));
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false)))) && true))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true))))))).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true))))))).y))), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sin(vec2(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(35.10)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[_GLF_IDENTITY(1, min(1, 1))]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true))))))).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sin(vec2(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true))))))).y)))))), true && ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sin(vec2(0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), bvec2(true, false))))).y))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true))), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true)))))))))).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, bool(bvec2(true, true))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true))))))).y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sin(vec2(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(35.10)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[_GLF_IDENTITY(1, min(1, 1))]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true))))))).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sin(vec2(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(35.10)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[_GLF_IDENTITY(1, min(1, 1))]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true))))))).y))), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(sin(vec2(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true)))))), max(sin(vec2(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true)))))), sin(vec2(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true))))))))).y)))))), _GLF_IDENTITY(true && ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sin(vec2(0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), bvec2(true, false))))).y)), ! (! (true && ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sin(vec2(0.0, 0.0)) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), bvec2(true, false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), bvec2(true, false))), vec2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), bvec2(true, false)))), max(vec2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), bvec2(true, false)))), vec2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), bvec2(true, false))))))))) - vec2(0.0, 0.0)))).y))))))) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true))))))).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true))))))).y))), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sin(vec2(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(35.10)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[_GLF_IDENTITY(1, min(1, 1))]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true))))))).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sin(vec2(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true))))))).y)))))), true && ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sin(vec2(0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), bvec2(true, false))))).y))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true))), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true)))))))))).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, bool(bvec2(true, true))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true))))))).y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sin(vec2(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(35.10)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[_GLF_IDENTITY(1, min(1, 1))]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true))))))).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sin(vec2(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(35.10)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[_GLF_IDENTITY(1, min(1, 1))]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true))))))).y))), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(sin(vec2(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true)))))), max(sin(vec2(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true)))))), sin(vec2(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true))))))))).y)))))), _GLF_IDENTITY(true && ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sin(vec2(0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), bvec2(true, false))))).y)), ! (! (true && ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sin(vec2(0.0, 0.0)) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), bvec2(true, false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), bvec2(true, false))), vec2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), bvec2(true, false)))), max(vec2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), bvec2(true, false)))), vec2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), bvec2(true, false))))))))) - vec2(0.0, 0.0)))).y))))))) && true), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)))[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), _GLF_IDENTITY(true, (true) && true)))), true))))))).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sin(vec2(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(95.35))), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-9.7))))), 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(true, false), true), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(true, false), true), true)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec2(true, false), true), true)))))))), true))))))).y))), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sin(vec2(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(35.10)), bool(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false))))), (injectionSwitch.x > injectionSwitch.y))))), 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[_GLF_IDENTITY(1, min(1, 1))]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true))))))).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sin(vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, 1.0 * (0.0))) - 0.0), 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true))))))).y)))))), true && ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sin(vec2(0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), bvec2(true, false))))).y))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true))), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true)))))), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true))), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true)))))), false, false))))))).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), (true ? vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]) : _GLF_FUZZED(vec2(52.32, -53.93)))), vec2(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(vec2(vec3((injectionSwitch), 1.0)), min(vec2(vec3((injectionSwitch), 1.0)), _GLF_IDENTITY(vec2(vec3((injectionSwitch), 1.0)), mat2(1.0) * (vec2(vec3((injectionSwitch), 1.0)))))))[0], _GLF_FUZZED(-166.322)), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, bool(bvec2(true, true))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) || false))))), true))), true))))))).y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sin(vec2(_GLF_IDENTITY(0.0, mix(_GLF_IDENTITY(float(0.0), max(float(0.0), float(0.0))), float(_GLF_FUZZED(35.10)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[_GLF_IDENTITY(1, min(1, 1))]), (true ? vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[_GLF_IDENTITY(1, min(1, 1))]) : _GLF_FUZZED((vec2(2.7, 5.3) * mat2(8.6, 206.763, -278.777, -6.6))))), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(false, true && (false))), bvec2(bvec3(bvec2(true, false), true))), true))))))).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sin(vec2(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(35.10)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0)) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))), mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[_GLF_IDENTITY(1, min(1, 1))]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true))))))).y))), false || ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(sin(vec2(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true)))))), max(sin(vec2(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true)))))), sin(vec2(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true))))))))).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(sin(vec2(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(_GLF_IDENTITY(-5.2, clamp(-5.2, _GLF_IDENTITY(-5.2, mix(float(-5.2), float(_GLF_FUZZED((true ? 4.4 : 66.32))), bool(false))), -5.2))), (injectionSwitch)[1]), mix(vec2(_GLF_FUZZED(818.809), _GLF_IDENTITY((vec2(_GLF_FUZZED(_GLF_IDENTITY(-5.2, clamp(-5.2, _GLF_IDENTITY(-5.2, mix(float(-5.2), float(_GLF_FUZZED((true ? 4.4 : 66.32))), bool(false))), -5.2))), (injectionSwitch)[1]))[1], ((vec2(_GLF_FUZZED(_GLF_IDENTITY(-5.2, clamp(-5.2, _GLF_IDENTITY(-5.2, mix(float(-5.2), float(_GLF_FUZZED((true ? 4.4 : 66.32))), bool(false))), -5.2))), (injectionSwitch)[1]))[1]) + 0.0)), vec2((vec2(_GLF_FUZZED(_GLF_IDENTITY(-5.2, clamp(-5.2, _GLF_IDENTITY(-5.2, mix(float(-5.2), float(_GLF_FUZZED((true ? 4.4 : 66.32))), bool(false))), -5.2))), (injectionSwitch)[1]))[0], _GLF_FUZZED((-3.4 * 7.0))), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true)))))), max(sin(vec2(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))), sin(vec2(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))[0], _GLF_IDENTITY(_GLF_FUZZED(-166.322), min(_GLF_FUZZED(-166.322), _GLF_FUZZED(-166.322)))), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true))), true))))))))).y) && true))))))), _GLF_IDENTITY(true && ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sin(vec2(0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), bvec2(true, false))))).y)), ! (! (true && ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sin(vec2(0.0, 0.0)) + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6059.1784), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(6.5)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(-5.2), mix(float(_GLF_FUZZED(-5.2)), float(_GLF_FUZZED(-2.3)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), bvec2(true, false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), bvec2(true, _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), vec2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), bvec2(true, false)))), max(vec2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), bvec2(true, false)))), vec2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-166.322)), bvec2(true, false))))))))) - vec2(0.0, 0.0)))).y))))))) && true))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | (1))); _injected_loop_counter ++)
                {
                 return;
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y))))))
              {
               do
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, false))))), false, false, false)))))
              continue;
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            continue;
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
          }
         break;
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), false)))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! _GLF_IDENTITY((bool(bool(true))), ((bool(bool(true)))) && true))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), bool(bvec3((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), false, true)))))))));
           break;
          }
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
    }
  }
 do
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, true, true))), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, true, true)))) || _GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, true, true))), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, true, true)))) || _GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), _GLF_IDENTITY(bool(bvec3(bool(bvec3(false, false, true)), true, false)), ! (! (bool(bvec3(bool(bvec3(false, false, true)), true, false))))))), true))), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), _GLF_IDENTITY(bool(bvec3(bool(bvec3(false, false, true)), true, false)), ! (! (bool(bvec3(bool(bvec3(false, false, true)), true, false))))))), _GLF_IDENTITY(true, true && (true)))), false || (bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), _GLF_IDENTITY(bool(bvec3(bool(bvec3(false, false, true)), true, false)), ! (! (bool(bvec3(bool(bvec3(false, false, true)), true, false))))))), _GLF_IDENTITY(true, true && (true)))))))) && true)))) || false)))))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         else
          {
           atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), max(_GLF_IDENTITY(uint(1), clamp(uint(1), _GLF_IDENTITY(uint(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(79758)))), (uint(1)) | (_GLF_IDENTITY(uint(1), (uint(1)) | 0u))), uint(1))), uint(1))), 4, 64, _GLF_IDENTITY(4, 0 ^ (4)));
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 if((_GLF_IDENTITY(_GLF_struct_replacement_37._f0.subgroup_local_id, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_struct_replacement_37._f0.subgroup_local_id, _GLF_IDENTITY(min(_GLF_struct_replacement_37._f0.subgroup_local_id, _GLF_IDENTITY(_GLF_struct_replacement_37._f0.subgroup_local_id, clamp(_GLF_struct_replacement_37._f0.subgroup_local_id, _GLF_struct_replacement_37._f0.subgroup_local_id, _GLF_struct_replacement_37._f0.subgroup_local_id))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(num_workgroup) : min(_GLF_struct_replacement_37._f0.subgroup_local_id, _GLF_IDENTITY(_GLF_struct_replacement_37._f0.subgroup_local_id, clamp(_GLF_IDENTITY(_GLF_struct_replacement_37._f0.subgroup_local_id, (_GLF_struct_replacement_37._f0.subgroup_local_id) >> 0u), _GLF_struct_replacement_37._f0.subgroup_local_id, _GLF_struct_replacement_37._f0.subgroup_local_id)))))), 0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) + (0u ^ 0u))), uint(4u)), max(0u >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (true ? 4u : _GLF_FUZZED(num_workgroup))))), _GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, min(4u, 4u))), uint(4u)), uint(_GLF_IDENTITY(uint(0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), max(uint(4u), _GLF_IDENTITY(uint(4u), clamp(_GLF_IDENTITY(uint(4u), clamp(uint(4u), uint(4u), uint(4u))), uint(4u), uint(4u))))), uint(4u))), (uint(0u >> _GLF_IDENTITY(uint(4u), uint(4u)))) - 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) + (0u ^ 0u))), uint(4u)), max(0u >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (true ? _GLF_IDENTITY(4u, max(_GLF_IDENTITY(4u, clamp(4u, 4u, 4u)), 4u)) : _GLF_FUZZED(num_workgroup))))), _GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(4u), uint(4u)), uint(_GLF_IDENTITY(uint(0u >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), 0u ^ (_GLF_IDENTITY(uint(4u), (uint(4u)) ^ 0u))))), _GLF_IDENTITY((uint(0u >> _GLF_IDENTITY(uint(4u), uint(4u)))), (false ? _GLF_FUZZED(num_workgroup) : (uint(0u >> _GLF_IDENTITY(uint(4u), uint(4u)))))) - 0u))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) * 1u) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) + (0u ^ 0u))), uint(4u)), 1u * (_GLF_IDENTITY(0u, (0u) * 1u) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) + (0u ^ 0u))), uint(4u)))), max(0u >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (true ? 4u : _GLF_FUZZED(num_workgroup))))), _GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(4u), uint(4u)), uint(_GLF_IDENTITY(uint(0u >> _GLF_IDENTITY(uint(4u), uint(4u))), (uint(0u >> _GLF_IDENTITY(uint(4u), uint(4u)))) - 0u)))))), max((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) * 1u) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) + (0u ^ 0u))), uint(4u)), 1u * (_GLF_IDENTITY(0u, (0u) * 1u) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) + (0u ^ 0u))), uint(4u)))), max(0u >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (true ? 4u : _GLF_FUZZED(num_workgroup))))), _GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(4u), uint(4u)), uint(_GLF_IDENTITY(uint(0u >> _GLF_IDENTITY(uint(4u), uint(4u))), (uint(0u >> _GLF_IDENTITY(uint(4u), uint(4u)))) - 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) * 1u) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) + (0u ^ 0u))), uint(4u)), 1u * (_GLF_IDENTITY(0u, (0u) * 1u) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) + (0u ^ 0u))), uint(4u)))), max(0u >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (true ? 4u : _GLF_FUZZED(num_workgroup))))), _GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(4u), uint(4u)), uint(_GLF_IDENTITY(uint(0u >> _GLF_IDENTITY(uint(4u), uint(4u))), (uint(0u >> _GLF_IDENTITY(uint(4u), uint(4u)))) - 0u)))))))) / uint(_GLF_ONE(1.0, injectionSwitch.y)))) << 0u))), min(uvec3(_GLF_IDENTITY(_GLF_struct_replacement_37._f0.subgroup_local_id, _GLF_IDENTITY(min(_GLF_struct_replacement_37._f0.subgroup_local_id, _GLF_IDENTITY(_GLF_struct_replacement_37._f0.subgroup_local_id, clamp(_GLF_struct_replacement_37._f0.subgroup_local_id, _GLF_struct_replacement_37._f0.subgroup_local_id, _GLF_struct_replacement_37._f0.subgroup_local_id))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(num_workgroup) : min(_GLF_struct_replacement_37._f0.subgroup_local_id, _GLF_IDENTITY(_GLF_struct_replacement_37._f0.subgroup_local_id, clamp(_GLF_IDENTITY(_GLF_struct_replacement_37._f0.subgroup_local_id, (_GLF_struct_replacement_37._f0.subgroup_local_id) >> 0u), _GLF_struct_replacement_37._f0.subgroup_local_id, _GLF_struct_replacement_37._f0.subgroup_local_id)))))), 0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) + (0u ^ 0u))), uint(4u)), max(0u >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (true ? 4u : _GLF_FUZZED(num_workgroup))))), _GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, min(4u, 4u))), uint(4u)), uint(_GLF_IDENTITY(uint(0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), max(uint(4u), _GLF_IDENTITY(uint(4u), clamp(_GLF_IDENTITY(uint(4u), clamp(uint(4u), uint(4u), uint(4u))), uint(4u), uint(4u))))), uint(4u))), (uint(0u >> _GLF_IDENTITY(uint(4u), uint(4u)))) - 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) + (0u ^ 0u))), uint(4u)), max(0u >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (true ? _GLF_IDENTITY(4u, max(_GLF_IDENTITY(4u, clamp(4u, 4u, 4u)), 4u)) : _GLF_FUZZED(num_workgroup))))), _GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(4u), uint(4u)), uint(_GLF_IDENTITY(uint(0u >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), 0u ^ (_GLF_IDENTITY(uint(4u), (uint(4u)) ^ 0u))))), _GLF_IDENTITY((uint(0u >> _GLF_IDENTITY(uint(4u), uint(4u)))), (false ? _GLF_FUZZED(num_workgroup) : (uint(0u >> _GLF_IDENTITY(uint(4u), uint(4u)))))) - 0u))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) * 1u) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) + (0u ^ 0u))), uint(4u)), 1u * (_GLF_IDENTITY(0u, (0u) * 1u) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) + (0u ^ 0u))), uint(4u)))), max(0u >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (true ? 4u : _GLF_FUZZED(num_workgroup))))), _GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(4u), uint(4u)), uint(_GLF_IDENTITY(uint(0u >> _GLF_IDENTITY(uint(4u), uint(4u))), (uint(0u >> _GLF_IDENTITY(uint(4u), uint(4u)))) - 0u)))))), max((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) * 1u) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) + (0u ^ 0u))), uint(4u)), 1u * (_GLF_IDENTITY(0u, (0u) * 1u) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) + (0u ^ 0u))), uint(4u)))), max(0u >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (true ? 4u : _GLF_FUZZED(num_workgroup))))), _GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(4u), uint(4u)), uint(_GLF_IDENTITY(uint(0u >> _GLF_IDENTITY(uint(4u), uint(4u))), (uint(0u >> _GLF_IDENTITY(uint(4u), uint(4u)))) - 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) * 1u) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) + (0u ^ 0u))), uint(4u)), 1u * (_GLF_IDENTITY(0u, (0u) * 1u) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) + (0u ^ 0u))), uint(4u)))), max(0u >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (true ? 4u : _GLF_FUZZED(num_workgroup))))), _GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(4u), uint(4u)), uint(_GLF_IDENTITY(uint(0u >> _GLF_IDENTITY(uint(4u), uint(4u))), (uint(0u >> _GLF_IDENTITY(uint(4u), uint(4u)))) - 0u)))))))) / uint(_GLF_ONE(1.0, injectionSwitch.y)))) << 0u))), uvec3(_GLF_IDENTITY(_GLF_struct_replacement_37._f0.subgroup_local_id, _GLF_IDENTITY(min(_GLF_struct_replacement_37._f0.subgroup_local_id, _GLF_IDENTITY(_GLF_struct_replacement_37._f0.subgroup_local_id, clamp(_GLF_struct_replacement_37._f0.subgroup_local_id, _GLF_struct_replacement_37._f0.subgroup_local_id, _GLF_struct_replacement_37._f0.subgroup_local_id))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(num_workgroup) : min(_GLF_struct_replacement_37._f0.subgroup_local_id, _GLF_IDENTITY(_GLF_struct_replacement_37._f0.subgroup_local_id, clamp(_GLF_IDENTITY(_GLF_struct_replacement_37._f0.subgroup_local_id, (_GLF_struct_replacement_37._f0.subgroup_local_id) >> 0u), _GLF_struct_replacement_37._f0.subgroup_local_id, _GLF_struct_replacement_37._f0.subgroup_local_id)))))), 0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) + (0u ^ 0u))), uint(4u)), max(0u >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (true ? 4u : _GLF_FUZZED(num_workgroup))))), _GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, min(4u, 4u))), uint(4u)), uint(_GLF_IDENTITY(uint(0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), max(uint(4u), _GLF_IDENTITY(uint(4u), clamp(_GLF_IDENTITY(uint(4u), clamp(uint(4u), uint(4u), uint(4u))), uint(4u), uint(4u))))), uint(4u))), (uint(0u >> _GLF_IDENTITY(uint(4u), uint(4u)))) - 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) + (0u ^ 0u))), uint(4u)), max(0u >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (true ? _GLF_IDENTITY(4u, max(_GLF_IDENTITY(4u, clamp(4u, 4u, 4u)), 4u)) : _GLF_FUZZED(num_workgroup))))), _GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(4u), uint(4u)), uint(_GLF_IDENTITY(uint(0u >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), 0u ^ (_GLF_IDENTITY(uint(4u), (uint(4u)) ^ 0u))))), _GLF_IDENTITY((uint(0u >> _GLF_IDENTITY(uint(4u), uint(4u)))), (false ? _GLF_FUZZED(num_workgroup) : (uint(0u >> _GLF_IDENTITY(uint(4u), uint(4u)))))) - 0u))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) * 1u) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) + (0u ^ 0u))), uint(4u)), 1u * (_GLF_IDENTITY(0u, (0u) * 1u) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) + (0u ^ 0u))), uint(4u)))), max(0u >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (true ? 4u : _GLF_FUZZED(num_workgroup))))), _GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(4u), uint(4u)), uint(_GLF_IDENTITY(uint(0u >> _GLF_IDENTITY(uint(4u), uint(4u))), (uint(0u >> _GLF_IDENTITY(uint(4u), uint(4u)))) - 0u)))))), max((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) * 1u) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) + (0u ^ 0u))), uint(4u)), 1u * (_GLF_IDENTITY(0u, (0u) * 1u) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) + (0u ^ 0u))), uint(4u)))), max(0u >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (true ? 4u : _GLF_FUZZED(num_workgroup))))), _GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(4u), uint(4u)), uint(_GLF_IDENTITY(uint(0u >> _GLF_IDENTITY(uint(4u), uint(4u))), (uint(0u >> _GLF_IDENTITY(uint(4u), uint(4u)))) - 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) * 1u) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) + (0u ^ 0u))), uint(4u)), 1u * (_GLF_IDENTITY(0u, (0u) * 1u) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) + (0u ^ 0u))), uint(4u)))), max(0u >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (true ? 4u : _GLF_FUZZED(num_workgroup))))), _GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(4u), uint(4u)), uint(_GLF_IDENTITY(uint(0u >> _GLF_IDENTITY(uint(4u), uint(4u))), (uint(0u >> _GLF_IDENTITY(uint(4u), uint(4u)))) - 0u)))))))) / uint(_GLF_ONE(1.0, injectionSwitch.y)))) << 0u))))))) % 2) == 0)
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   do
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (_GLF_IDENTITY(true ? 1 : _GLF_FUZZED(_injected_loop_counter), clamp(_GLF_IDENTITY(true ? 1 : _GLF_FUZZED(_injected_loop_counter), (true ? 1 : _GLF_FUZZED(_injected_loop_counter)) / 1), true ? 1 : _GLF_FUZZED(_injected_loop_counter), true ? 1 : _GLF_FUZZED(_injected_loop_counter)))))), (int(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter))))) - 0))), _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)) ? 1 : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(_injected_loop_counter)))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) - 0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(_injected_loop_counter)))))))); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_injected_loop_counter ++) - (0 & -76401), ~ (_GLF_IDENTITY(~ ((_injected_loop_counter ++) - (0 & -76401)), (~ ((_injected_loop_counter ++) - (0 & -76401))) >> 0)))))
      {
       _GLF_struct_replacement_18._f4._f2.read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) ^ 0)) / 1)) | (4)), 64, 2);
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          continue;
         return;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 ^ (int(4))))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 | (0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          break;
                         do
                          {
                           return;
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       if(_GLF_DEAD(false))
                        continue;
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       for(int _injected_loop_counter = (0 & -89493); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         return;
                        }
                      }
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))) && true))))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, _GLF_IDENTITY(true, ! (! (true))), true)))))))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = (0 | _GLF_IDENTITY(0, _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) / 1))), (_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) / _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, max(1, 1))))))), clamp((_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, _GLF_IDENTITY(0, max(0, 0)))), (int(ivec2(1, 0))) / 1))), (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) / 1))), (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 0)), (int(ivec2(1, 0))) / 1)))))) - int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))) / _GLF_IDENTITY(1, (false ? _GLF_FUZZED(ivec2(7556, -87978)[0]) : 1))) * (_GLF_IDENTITY(0, _GLF_IDENTITY((0) / 1, 0 ^ ((0) / 1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(407.912)), bool(false))) > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
    }
   else
    {
    }
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0))
    {
     _GLF_struct_replacement_18._f4._f2.read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (atomicLoad(_GLF_IDENTITY(buf[virtual_gid], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), 4, 64, 2)) | (atomicLoad(buf[virtual_gid], 4, 64, 2)));
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
            {
             return;
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), min(_GLF_IDENTITY(int(4), int(int(int(4)))), int(4))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), min(_GLF_IDENTITY(int(4), int(int(int(4)))), int(4))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(_injected_loop_counter) : int(4))), min(_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 ^ (_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))), int(int(int(4)))), int(4)))))))))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 subgroupBarrier();
 atomicStore(checker[virtual_gid], _GLF_IDENTITY(_GLF_struct_replacement_18._f4._f2.read, 0u | (_GLF_struct_replacement_18._f4._f2.read)), 4, 64, 4);
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)), false, false)), true && (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)), false, false))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, false, true)))))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), true, true, false)))) && true))), (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), true, true, false)))) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), true, true, false)))) && true)), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), true, true, false)))) && true)), bool(bool(! (_GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), true, true, false)))) && true))))))))))), (injectionSwitch.x > injectionSwitch.y)))))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         else
          {
          }
         return;
        }
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), int(5))) ^ 0)) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5))))))); _injected_loop_counter ++)
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), false || (! (_GLF_WRAPPED_IF_TRUE(true))))))) && true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
