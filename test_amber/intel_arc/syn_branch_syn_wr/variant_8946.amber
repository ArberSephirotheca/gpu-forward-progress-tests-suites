#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))), false || (_GLF_WRAPPED_IF_TRUE(true)))))), false, false))))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-5.2), _GLF_FUZZED(-6.7)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), mix(vec2(_GLF_FUZZED(4.5), (injectionSwitch)[1]), vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(mat3x4((injectionSwitch), 1.0, 1.0, 0.0, 0.0, 0.0, tan(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), exp(0.0), 1.0, 1.0), _GLF_IDENTITY(mat4(1.0) * (mat3x4((injectionSwitch), 1.0, 1.0, 0.0, 0.0, 0.0, tan(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), exp(0.0), 1.0, 1.0)), mat4(1.0) * (mat4(1.0) * (mat3x4((injectionSwitch), 1.0, 1.0, 0.0, 0.0, 0.0, tan(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), exp(0.0), 1.0, 1.0)))))))[0], ((injectionSwitch)[0]) - 0.0), _GLF_FUZZED(5.3)), bvec2(true, false))).y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true, false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(vec2(24.80, 1.5)[0]) : injectionSwitch.y))), true, false, true)), ! (! (bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, round(length(normalize(vec2(1.0, 1.0)))))), dot(vec2(0.0, 1.0), vec2(0.0, round(length(normalize(vec2(1.0, 1.0))))))) * (injectionSwitch.y))), true, false, true)))))))) && true)))))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2((mat2(1.0) * (injectionSwitch))[0], _GLF_FUZZED(83.10)), vec2(_GLF_FUZZED(-307.835), _GLF_IDENTITY((mat2(1.0) * (injectionSwitch))[1], mix(float((mat2(1.0) * (injectionSwitch))[1]), float(_GLF_FUZZED(2.5)), bool(false)))), bvec2(false, true)))), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(acosh(-364.702)) : injectionSwitch.y)), injectionSwitch.y)))))), true && (_GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2((mat2(1.0) * (injectionSwitch))[0], _GLF_FUZZED(83.10)), vec2(_GLF_FUZZED(-307.835), _GLF_IDENTITY((mat2(1.0) * (injectionSwitch))[1], mix(float((mat2(1.0) * (injectionSwitch))[1]), float(_GLF_FUZZED(2.5)), bool(false)))), bvec2(false, true)))), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(acosh(-364.702)) : injectionSwitch.y)), injectionSwitch.y)))))), bool(bvec3((_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2((mat2(1.0) * (injectionSwitch))[0], _GLF_FUZZED(83.10)), vec2(_GLF_FUZZED(-307.835), _GLF_IDENTITY((mat2(1.0) * (injectionSwitch))[1], mix(float((mat2(1.0) * (injectionSwitch))[1]), float(_GLF_FUZZED(2.5)), bool(false)))), bvec2(false, true)))), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(acosh(-364.702)) : injectionSwitch.y)), injectionSwitch.y)))))), true, true)))))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) && true))), true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) && true))), true && (false))) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), true && (bool(bvec2(_GLF_DEAD(false), false))))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))));
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec4(bvec3(bvec3(false, true, false)), true))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec4(bvec3(bvec3(false, true, false)), true))))))))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), true && ((_GLF_DEAD(false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
              barrier();
            }
           barrier();
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_DEAD(false), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true), false, false)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
            break;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, max(_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED((uvec3(3855u, 13766u, 154503u) >> uvec3(171964u, 154427u, 162911u))) : gl_WorkGroupSize)), _GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)))).x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))), false, false, true))));
    }
   if(_GLF_DEAD(false))
    return;
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), uint(uvec3(subgroup_id * subgroup_size, 0u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)))))), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(uint(uvec3(subgroup_id * subgroup_size, 0u, (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(4u), uint(4u))), _GLF_IDENTITY(uint(uvec4((1u << _GLF_IDENTITY(uint(4u), uint(4u))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)), _GLF_IDENTITY((uint(uvec4((1u << _GLF_IDENTITY(uint(4u), uint(4u))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))) / 1u, ((uint(uvec4((1u << _GLF_IDENTITY(uint(4u), uint(4u))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))) / 1u) | 0u))) >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, _GLF_IDENTITY(0u ^ (4u), clamp(0u ^ (4u), 0u ^ (4u), 0u ^ (4u))))))))), uint(_GLF_IDENTITY(uint(uint(uvec3(subgroup_id * subgroup_size, 0u, (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(4u), uint(4u))), _GLF_IDENTITY(uint(uvec4((1u << _GLF_IDENTITY(uint(4u), uint(4u))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)), (uint(uvec4((1u << _GLF_IDENTITY(uint(4u), uint(4u))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))) / _GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (1u) | (1u)), 1u, 1u)), 1u)))) >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, 0u ^ (4u)))))))), clamp(uint(uint(uvec3(subgroup_id * subgroup_size, 0u, (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(4u), uint(4u))), _GLF_IDENTITY(uint(uvec4((1u << _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (4u) | (4u))))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)), (uint(_GLF_IDENTITY(uvec4((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (true ? _GLF_IDENTITY(4u, (4u) * 1u) : _GLF_FUZZED(num_workgroup)))), uint(4u))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), (_GLF_IDENTITY(uvec4((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (true ? _GLF_IDENTITY(4u, (4u) * 1u) : _GLF_FUZZED(num_workgroup)))), uint(4u))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u), (uvec4((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (true ? _GLF_IDENTITY(4u, (4u) * 1u) : _GLF_FUZZED(num_workgroup)))), uint(4u))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u)) ^ uvec4(0u, 0u, 0u, 0u))) >> uvec4(0u, 0u, 0u, 0u)))) / 1u)) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, min(4u, 4u))) | (_GLF_IDENTITY(4u, 1u * (_GLF_IDENTITY(4u, clamp(4u, 4u, 4u))))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, 0u ^ (4u))), min(uint(_GLF_IDENTITY(4u, 0u ^ (4u))), _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, 0u ^ (4u))), clamp(uint(_GLF_IDENTITY(4u, 0u ^ (4u))), uint(_GLF_IDENTITY(4u, 0u ^ (4u))), uint(_GLF_IDENTITY(4u, 0u ^ (4u)))))))))))), uint(uint(uvec3(subgroup_id * subgroup_size, 0u, (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(4u), uint(4u))), _GLF_IDENTITY(uint(uvec4((1u << _GLF_IDENTITY(uint(4u), uint(4u))), 1u, uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y)), 1u)), (uint(uvec4((1u << _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, clamp(_GLF_IDENTITY(4u, 0u ^ (4u)), 4u, 4u))))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))) / 1u)) >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, 0u ^ (4u)))))))), uint(uint(uvec3(subgroup_id * subgroup_size, 0u, (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(4u), uint(4u))), _GLF_IDENTITY(uint(uvec4((_GLF_IDENTITY(1u, (1u) | (1u)) << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), ~ (~ (uint(4u)))), uint(4u))), 1u, uint(_GLF_ONE(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (1.0) / 1.0) : _GLF_FUZZED(-4.5))), injectionSwitch.y)), 1u)), (uint(uvec4((1u << _GLF_IDENTITY(uint(4u), uint(4u))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u))) / 1u)) >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, 0u ^ (4u))))))))))))), 0u, 0u, 1u)), (uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, uint(uvec3(subgroup_id * subgroup_size, 0u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)))))), max(_GLF_IDENTITY(subgroup_id * subgroup_size, uint(uvec3(subgroup_id * subgroup_size, 0u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)))))), _GLF_IDENTITY(subgroup_id * subgroup_size, uint(uvec3(subgroup_id * subgroup_size, 0u, _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), max(((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)))))))))), 0u, 0u, 1u))) + 0u))) << 0u) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_IDENTITY(_GLF_FUZZED(6927.2315), clamp(_GLF_FUZZED(6927.2315), _GLF_FUZZED(6927.2315), _GLF_IDENTITY(_GLF_FUZZED(6927.2315), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(6927.2315), float(mat3x4(_GLF_IDENTITY(_GLF_FUZZED(6927.2315), tan(0.0) + (_GLF_FUZZED(6927.2315))), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, sqrt(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 0.0, 0.0))), float(mat2(_GLF_FUZZED(6927.2315), 0.0, 0.0, 0.0))), _GLF_FUZZED(6927.2315))))))), 0.0, sqrt(0.0), 0.0, 1.0, log(cos(0.0)), 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(0.0, 1.0), (vec2(0.0, 1.0)) * vec2(1.0, 1.0)), vec2(0.0, 1.0)), (dot(_GLF_IDENTITY(vec2(0.0, 1.0), (vec2(0.0, 1.0)) * vec2(1.0, 1.0)), vec2(0.0, 1.0))) / 1.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), _GLF_IDENTITY(float(vec3(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), sqrt(1.0), 1.0)), (float(vec3(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), sqrt(1.0), 1.0))) - 0.0))), _GLF_IDENTITY(dot(vec2(abs(1.0), 1.0), vec2(0.0, 0.0)), dot(vec2(_GLF_IDENTITY(abs(1.0), (true ? abs(1.0) : _GLF_FUZZED(1.7))), 1.0), vec2(0.0, 0.0))), 0.0, 0.0, 0.0)))))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) - 0u)), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))) ? _GLF_FUZZED(workgroup_base) : ~ (_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((next_virtual_gid) - 0u, ~ (_GLF_IDENTITY(~ ((next_virtual_gid) - 0u), _GLF_IDENTITY(clamp(~ ((next_virtual_gid) - _GLF_IDENTITY(0u, uint(uint(0u)))), ~ ((next_virtual_gid) - 0u), ~ ((next_virtual_gid) - 0u)), (_GLF_IDENTITY(clamp(~ ((next_virtual_gid) - _GLF_IDENTITY(0u, uint(uint(0u)))), ~ ((next_virtual_gid) - 0u), ~ ((next_virtual_gid) - 0u)), ~ (~ (clamp(~ ((next_virtual_gid) - _GLF_IDENTITY(0u, uint(uint(0u)))), ~ ((next_virtual_gid) - 0u), ~ ((next_virtual_gid) - 0u)))))) | (clamp(~ ((next_virtual_gid) - _GLF_IDENTITY(0u, uint(uint(0u)))), ~ ((next_virtual_gid) - 0u), ~ ((next_virtual_gid) - 0u)))))))))))), (true ? (_GLF_IDENTITY(~ (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) - 0u)), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))) ? _GLF_FUZZED(workgroup_base) : ~ (_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((next_virtual_gid) - 0u, ~ (_GLF_IDENTITY(~ ((next_virtual_gid) - 0u), _GLF_IDENTITY(clamp(~ ((next_virtual_gid) - _GLF_IDENTITY(0u, uint(uint(0u)))), ~ ((next_virtual_gid) - 0u), ~ ((next_virtual_gid) - 0u)), (_GLF_IDENTITY(clamp(~ ((next_virtual_gid) - _GLF_IDENTITY(0u, uint(uint(0u)))), ~ ((next_virtual_gid) - 0u), ~ ((next_virtual_gid) - 0u)), ~ (~ (clamp(~ ((next_virtual_gid) - _GLF_IDENTITY(0u, uint(uint(0u)))), ~ ((next_virtual_gid) - 0u), ~ ((next_virtual_gid) - 0u)))))) | (clamp(~ ((next_virtual_gid) - _GLF_IDENTITY(0u, uint(uint(0u)))), ~ ((next_virtual_gid) - 0u), ~ ((next_virtual_gid) - 0u)))))))))))) : _GLF_FUZZED(subgroup_local_id))))], uint(1), 4, 64, 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch, injectionSwitch)).x) + 0.0) > injectionSwitch.y))))
      barrier();
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, false || (false)), false, true)), false || (bool(bvec3(_GLF_IDENTITY(false, false || (false)), false, true)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + abs(vec2(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2(0.0, 0.0, 1.0, 1.0), (mat2(0.0, 0.0, 1.0, 1.0)) - mat2(0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(0.0, 1.0 * (0.0))))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, 0.0, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 0.0, 1.0), mat3(mat4x3(mat3(injectionSwitch, 0.0, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 0.0, 1.0)))))), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, _GLF_IDENTITY(0.0, (0.0) * sqrt(1.0))), _GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), vec2(0.0, 0.0))))), min(vec2(vec2(_GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), vec2(0.0, 0.0))))), vec2(vec2(_GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), vec2(0.0, 0.0)))))))) + (injectionSwitch))) - vec2(0.0, 0.0)))).y, mix(float(_GLF_FUZZED(7647.4010)), _GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED(-656.038)), float(_GLF_IDENTITY(float(injectionSwitch.y), mix(float(float(injectionSwitch.y)), float(_GLF_FUZZED(0.6)), bool(false)))), bool(true))), bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || _GLF_IDENTITY((_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false)), bool(_GLF_IDENTITY(bvec3((true), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)), ! (! (bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))))))), false), bvec3(bvec4(bvec3((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-769.740)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, bool(bool(true)))))) < injectionSwitch.y))))))))) && true))))))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + abs(vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0), vec2(vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), vec2(0.0, 0.0))), vec2(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), vec2(0.0, 0.0))), 1.0, 1.0, 0.0, 1.0), (false ? _GLF_FUZZED(mat2x3(-9.8, -516.734, 735.281, -31.17, 9.4, -4591.8434)) : mat2x3(_GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), vec2(0.0, 0.0))), 1.0, 1.0, 0.0, 1.0)))))))) + (injectionSwitch))) - vec2(0.0, 0.0)))), vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + abs(vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0)))[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0), vec2(vec2(_GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), vec2(0.0, 0.0)))))) + (injectionSwitch))) - vec2(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(1.8)), float(0.0), bool(true))))))), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))).y, mix(float(_GLF_FUZZED(7647.4010)), _GLF_IDENTITY(float(injectionSwitch.y), mix(float(_GLF_FUZZED(-656.038)), float(_GLF_IDENTITY(float(injectionSwitch.y), mix(float(float(injectionSwitch.y)), float(_GLF_FUZZED(0.6)), bool(false)))), bool(true))), bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))), ! (! ((_GLF_IDENTITY(true, ! (! (true))))))), bool(_GLF_IDENTITY(bvec3((true), _GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(bvec2(false, _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(! (bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, false)))))), (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) && true))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   int i = 0;
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) && true)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     atomicStore(checker[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(read, ~ (~ (_GLF_IDENTITY(read, (_GLF_IDENTITY(read, (read) | (read))) << 0u)))), ~ (~ (_GLF_IDENTITY(read, ~ (~ (_GLF_IDENTITY(read, (_GLF_IDENTITY(read, (read) | _GLF_IDENTITY((read), ((read)) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))) << 0u))))))), _GLF_IDENTITY(_GLF_IDENTITY(4, (4) << 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (0 << _GLF_IDENTITY(int(6), int(6)))), ((0 | 0) ^ 0) ^ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (0 << _GLF_IDENTITY(int(6), int(6)))), (_GLF_IDENTITY(4, (4) | (0 << _GLF_IDENTITY(int(6), int(6))))) ^ 0))), (_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(0, (0) | (0)) << _GLF_IDENTITY(int(6), int(6))))) / _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) / (1 ^ 0)), 1))), _GLF_IDENTITY(4, clamp(4, 4, 4)), _GLF_IDENTITY(_GLF_IDENTITY(4, max(4, 4)), (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (_GLF_IDENTITY(_GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, 0 | (4)), 4)), min(4, 4))) / 1)) >> 0)) / 1))), 64, _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (_GLF_IDENTITY(_GLF_IDENTITY(4, int(ivec4(4, 1, 1, 1))), max(_GLF_IDENTITY(4, int(ivec4(4, 1, 1, 1))), _GLF_IDENTITY(_GLF_IDENTITY(4, int(ivec4(4, 1, 1, 1))), int(ivec4(_GLF_IDENTITY(4, int(ivec4(4, 1, 1, 1))), 0, 0, 0)))))) * 1), 4)));
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false)))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) - sin(_GLF_IDENTITY(vec2(0.0, 0.0), clamp(_GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), vec2(0.0, 0.0))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-39.85))))), 0.0), _GLF_IDENTITY(mix(vec2((vec2(0.0, 0.0))[0], _GLF_FUZZED(31.48)), vec2(_GLF_FUZZED(-4435.9190), (vec2(0.0, 0.0))[1]), bvec2(false, true)), (mix(vec2((vec2(0.0, 0.0))[0], _GLF_FUZZED(31.48)), vec2(_GLF_FUZZED(-4435.9190), (vec2(0.0, 0.0))[1]), bvec2(false, true))) / vec2(1.0, 1.0))), _GLF_IDENTITY(vec2(0.0, 0.0), max(vec2(0.0, 0.0), vec2(0.0, 0.0))))))) + (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0)))), max(_GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) - _GLF_IDENTITY(sin(vec2(0.0, 0.0)), clamp(sin(vec2(0.0, 0.0)), sin(vec2(0.0, 0.0)), sin(vec2(0.0, 0.0))))) + (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0)))), _GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) - sin(_GLF_IDENTITY(vec2(0.0, 0.0), (_GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) - vec2(0.0, 0.0))) - sin(vec2(0.0, 0.0))))) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))), (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0)))) + vec2(0.0, 0.0)))))).x, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) - sin(_GLF_IDENTITY(vec2(0.0, 0.0), clamp(_GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), vec2(0.0, 0.0))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-39.85))))), 0.0), _GLF_IDENTITY(mix(vec2((vec2(0.0, 0.0))[0], _GLF_FUZZED(31.48)), vec2(_GLF_FUZZED(-4435.9190), (vec2(0.0, 0.0))[1]), bvec2(false, true)), (mix(vec2((vec2(0.0, 0.0))[0], _GLF_FUZZED(31.48)), vec2(_GLF_FUZZED(-4435.9190), (vec2(0.0, 0.0))[1]), bvec2(false, true))) / vec2(1.0, 1.0))), _GLF_IDENTITY(vec2(0.0, 0.0), max(vec2(0.0, 0.0), vec2(0.0, 0.0))))))) + (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0)))), max(_GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) - _GLF_IDENTITY(sin(vec2(0.0, 0.0)), clamp(sin(vec2(0.0, 0.0)), sin(vec2(0.0, 0.0)), sin(vec2(0.0, 0.0))))) + (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0)))), _GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) - sin(_GLF_IDENTITY(vec2(0.0, 0.0), (_GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) - vec2(0.0, 0.0))) - sin(vec2(0.0, 0.0))))) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))), (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0)))) + vec2(0.0, 0.0)))))).x, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) - sin(_GLF_IDENTITY(vec2(0.0, 0.0), clamp(_GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), vec2(0.0, 0.0))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-39.85))))), 0.0), _GLF_IDENTITY(mix(vec2((vec2(0.0, 0.0))[0], _GLF_FUZZED(31.48)), vec2(_GLF_FUZZED(-4435.9190), (vec2(0.0, 0.0))[1]), bvec2(false, true)), (mix(vec2((vec2(0.0, 0.0))[0], _GLF_FUZZED(31.48)), vec2(_GLF_FUZZED(-4435.9190), (vec2(0.0, 0.0))[1]), bvec2(false, true))) / vec2(1.0, 1.0))), _GLF_IDENTITY(vec2(0.0, 0.0), max(vec2(0.0, 0.0), vec2(0.0, 0.0))))))) + (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0)))), max(_GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) - _GLF_IDENTITY(sin(vec2(0.0, 0.0)), clamp(sin(vec2(0.0, 0.0)), sin(vec2(0.0, 0.0)), sin(vec2(0.0, 0.0))))) + (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0)))), _GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) - sin(_GLF_IDENTITY(vec2(0.0, 0.0), (_GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) - vec2(0.0, 0.0))) - sin(vec2(0.0, 0.0))))) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))), (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0)))) + vec2(0.0, 0.0)))))).x, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) - sin(_GLF_IDENTITY(vec2(0.0, 0.0), clamp(_GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), vec2(0.0, 0.0))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-39.85))))), 0.0), _GLF_IDENTITY(mix(vec2((vec2(0.0, 0.0))[0], _GLF_FUZZED(31.48)), vec2(_GLF_FUZZED(-4435.9190), (vec2(0.0, 0.0))[1]), bvec2(false, true)), (mix(vec2((vec2(0.0, 0.0))[0], _GLF_FUZZED(31.48)), vec2(_GLF_FUZZED(-4435.9190), (vec2(0.0, 0.0))[1]), bvec2(false, true))) / vec2(1.0, 1.0))), _GLF_IDENTITY(vec2(0.0, 0.0), max(vec2(0.0, 0.0), vec2(0.0, 0.0))))))) + (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0)))), max(_GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) - _GLF_IDENTITY(sin(vec2(0.0, 0.0)), clamp(sin(vec2(0.0, 0.0)), sin(vec2(0.0, 0.0)), sin(vec2(0.0, 0.0))))) + (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0)))), _GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) - sin(_GLF_IDENTITY(vec2(0.0, 0.0), (_GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) - vec2(0.0, 0.0))) - sin(vec2(0.0, 0.0))))) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))), (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0)))) + vec2(0.0, 0.0)))))).x)) < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))), false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       atomicStore(checker[virtual_gid], read, 4, 64, 4);
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(1, (1) - 0)))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter ++)
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    return;
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
      }
     else
      {
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) && true, ((_GLF_DEAD(false)) && true) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-0.9, 408.736)))), injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
