#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_13_1_1_4_2_1_13_3_1_11num_workgroupreadsubgroup_basevirtual_gid;
 uvec4 GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupvirtual_gidworkgroup_idworkgroup_size;
 uvec4 GLF_merged2_0_3_73_3_1_4GLF_merged3_0_1_16_1_1_11_2_1_14next_virtual_gidsubgroup_idworkgroup_baseread;
 uvec3 GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size;
 uvec4 GLF_merged4_0_1_4_1_1_13_2_1_17_3_1_13readsubgroup_basesubgroup_local_idsubgroup_size;
 uvec3 GLF_merged3_0_1_16_1_1_11_2_1_14next_virtual_gidsubgroup_idworkgroup_base;
 GLF_merged2_0_3_73_3_1_4GLF_merged3_0_1_16_1_1_11_2_1_14next_virtual_gidsubgroup_idworkgroup_baseread.xyz = GLF_merged3_0_1_16_1_1_11_2_1_14next_virtual_gidsubgroup_idworkgroup_base;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged2_0_3_73_3_1_4GLF_merged3_0_1_16_1_1_11_2_1_14next_virtual_gidsubgroup_idworkgroup_baseread.xyz.y = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     GLF_merged4_0_1_4_1_1_13_2_1_17_3_1_13readsubgroup_basesubgroup_local_idsubgroup_size.w = subgroup_size;
    }
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size.x = subgroup_local_id;
 do
  {
   GLF_merged4_0_1_4_1_1_13_2_1_17_3_1_13readsubgroup_basesubgroup_local_idsubgroup_size.z = GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size.x;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))));
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged4_0_1_13_1_1_4_2_1_13_3_1_11num_workgroupreadsubgroup_basevirtual_gid.x = num_workgroup;
 GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupvirtual_gidworkgroup_idworkgroup_size.x = GLF_merged4_0_1_13_1_1_4_2_1_13_3_1_11num_workgroupreadsubgroup_basevirtual_gid.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupvirtual_gidworkgroup_idworkgroup_size.w = workgroup_size;
 GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size.z = GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupvirtual_gidworkgroup_idworkgroup_size.w;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupvirtual_gidworkgroup_idworkgroup_size.z = workgroup_id;
 uint workgroup_base = GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size.z * GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupvirtual_gidworkgroup_idworkgroup_size.z;
 GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size.y = workgroup_base;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   GLF_merged2_0_3_73_3_1_4GLF_merged3_0_1_16_1_1_11_2_1_14next_virtual_gidsubgroup_idworkgroup_baseread.xyz.z = GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size.y;
  }
 uint subgroup_base = GLF_merged2_0_3_73_3_1_4GLF_merged3_0_1_16_1_1_11_2_1_14next_virtual_gidsubgroup_idworkgroup_baseread.xyz.y * GLF_merged4_0_1_4_1_1_13_2_1_17_3_1_13readsubgroup_basesubgroup_local_idsubgroup_size.w;
 GLF_merged4_0_1_13_1_1_4_2_1_13_3_1_11num_workgroupreadsubgroup_basevirtual_gid.z = subgroup_base;
 GLF_merged4_0_1_4_1_1_13_2_1_17_3_1_13readsubgroup_basesubgroup_local_idsubgroup_size.y = GLF_merged4_0_1_13_1_1_4_2_1_13_3_1_11num_workgroupreadsubgroup_basevirtual_gid.z;
 uint virtual_gid = GLF_merged2_0_3_73_3_1_4GLF_merged3_0_1_16_1_1_11_2_1_14next_virtual_gidsubgroup_idworkgroup_baseread.xyz.z + GLF_merged4_0_1_4_1_1_13_2_1_17_3_1_13readsubgroup_basesubgroup_local_idsubgroup_size.y + GLF_merged4_0_1_4_1_1_13_2_1_17_3_1_13readsubgroup_basesubgroup_local_idsubgroup_size.z;
 GLF_merged4_0_1_13_1_1_4_2_1_13_3_1_11num_workgroupreadsubgroup_basevirtual_gid.w = virtual_gid;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupvirtual_gidworkgroup_idworkgroup_size.y = GLF_merged4_0_1_13_1_1_4_2_1_13_3_1_11num_workgroupreadsubgroup_basevirtual_gid.w;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
  }
 else
  {
  }
 uint next_virtual_gid = GLF_merged2_0_3_73_3_1_4GLF_merged3_0_1_16_1_1_11_2_1_14next_virtual_gidsubgroup_idworkgroup_baseread.xyz.z + GLF_merged4_0_1_4_1_1_13_2_1_17_3_1_13readsubgroup_basesubgroup_local_idsubgroup_size.y + ((GLF_merged4_0_1_4_1_1_13_2_1_17_3_1_13readsubgroup_basesubgroup_local_idsubgroup_size.z + 1) % GLF_merged4_0_1_4_1_1_13_2_1_17_3_1_13readsubgroup_basesubgroup_local_idsubgroup_size.w);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged2_0_3_73_3_1_4GLF_merged3_0_1_16_1_1_11_2_1_14next_virtual_gidsubgroup_idworkgroup_baseread.xyz.x = next_virtual_gid;
  }
 uint read = 0;
 GLF_merged4_0_1_13_1_1_4_2_1_13_3_1_11num_workgroupreadsubgroup_basevirtual_gid.y = read;
 GLF_merged2_0_3_73_3_1_4GLF_merged3_0_1_16_1_1_11_2_1_14next_virtual_gidsubgroup_idworkgroup_baseread.w = GLF_merged4_0_1_13_1_1_4_2_1_13_3_1_11num_workgroupreadsubgroup_basevirtual_gid.y;
 GLF_merged4_0_1_4_1_1_13_2_1_17_3_1_13readsubgroup_basesubgroup_local_idsubgroup_size.x = GLF_merged2_0_3_73_3_1_4GLF_merged3_0_1_16_1_1_11_2_1_14next_virtual_gidsubgroup_idworkgroup_baseread.w;
 atomicStore(buf[GLF_merged2_0_3_73_3_1_4GLF_merged3_0_1_16_1_1_11_2_1_14next_virtual_gidsubgroup_idworkgroup_baseread.xyz.x], uint(1), 4, 64, 4);
 if((GLF_merged4_0_1_4_1_1_13_2_1_17_3_1_13readsubgroup_basesubgroup_local_idsubgroup_size.z % 2) == 0)
  {
   do
    {
     do
      {
       GLF_merged4_0_1_4_1_1_13_2_1_17_3_1_13readsubgroup_basesubgroup_local_idsubgroup_size.x = atomicLoad(buf[GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupvirtual_gidworkgroup_idworkgroup_size.y], 4, 64, 2);
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
   GLF_merged4_0_1_4_1_1_13_2_1_17_3_1_13readsubgroup_basesubgroup_local_idsubgroup_size.x = atomicLoad(buf[GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupvirtual_gidworkgroup_idworkgroup_size.y], 4, 64, 2);
  }
 subgroupBarrier();
 atomicStore(checker[GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14num_workgroupvirtual_gidworkgroup_idworkgroup_size.y], GLF_merged4_0_1_4_1_1_13_2_1_17_3_1_13readsubgroup_basesubgroup_local_idsubgroup_size.x, 4, 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
