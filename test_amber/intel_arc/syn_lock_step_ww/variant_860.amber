#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false))))), (injectionSwitch.x > injectionSwitch.y))) || false)), (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))) || false))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false))))), (injectionSwitch.x > injectionSwitch.y))) || false)), (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))) || false))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))) && true))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false))))), (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false))))), (injectionSwitch.x > injectionSwitch.y))))) || false)), (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))) || false))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false))))), (injectionSwitch.x > injectionSwitch.y))) || false)), (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))) || false))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))) && true))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((_GLF_IDENTITY(1 | 1, 1 * (1 | 1))), ((_GLF_IDENTITY(1 | 1, 1 * (1 | 1)))) | ((_GLF_IDENTITY(1 | 1, 1 * (1 | 1)))))); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     barrier();
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     continue;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     continue;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, false, true)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec3(false, false, true)), true && (bool(bvec3(false, false, true)))))), ! (! (bool(bool(_GLF_IDENTITY(bool(bvec3(false, false, true)), true && (bool(bvec3(false, false, true)))))))))), bool(bvec3(bool(bvec3(false, false, true)), true, false))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, false, _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec3(false, false, true)), true && (bool(bvec3(false, false, true)))))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, false, true)), true && (bool(bvec3(false, false, true)))), true && (bool(bvec3(false, false, true)))))))))), bool(bvec3(bool(bvec3(false, false, true)), true, false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(8))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) >> (0 >> _GLF_IDENTITY(int(3), int(3))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), (_injected_loop_counter != (1 ^ _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (0) ^ 0) : _GLF_FUZZED(-44162))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! (_injected_loop_counter != (1 ^ 0)))))), true && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0) ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))))))))))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! (_injected_loop_counter != (1 ^ 0)))))), true && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) | (_GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) << 0))), ! (! (_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, 0 ^ (1 ^ 0)), int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))) ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))), _GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * _GLF_IDENTITY((1 ^ 0), ~ (_GLF_IDENTITY(~ ((1 ^ 0)), int(int(~ ((1 ^ 0)))))))))))))), _GLF_IDENTITY(1 ^ _GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, (0) ^ 0))), min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))))), _GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))), _GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))))))))))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! (_injected_loop_counter != (1 ^ 0)))))), true && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0))))))))))))))), (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! _GLF_IDENTITY((_injected_loop_counter != (1 ^ 0)), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (1 ^ 0))), true && (_GLF_IDENTITY(! ((_injected_loop_counter != (1 ^ 0))), (! ((_injected_loop_counter != (1 ^ 0)))) && true))))))))), true && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, ~ (~ (1 ^ 0)))), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))))))))))))) || false)), (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1)))) ^ 0), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1, int(ivec2(1, (0 | 0)))) ^ 0)))))), _GLF_IDENTITY(true, ! (! (true))) && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! (_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * _GLF_IDENTITY((1 ^ 0), 1 * ((1 ^ 0))))))))), bool(bool(_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))))))))))))))), _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! _GLF_IDENTITY((_injected_loop_counter != (1 ^ 0)), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (_GLF_IDENTITY(1, (1) << 0) ^ 0))), true && (_GLF_IDENTITY(! ((_injected_loop_counter != (1 ^ 0))), (! ((_injected_loop_counter != (1 ^ 0)))) && true))))))))), true && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0))))))))))))))), true && (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! _GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) - 0)), ! (_GLF_IDENTITY(! ((_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY(1, (1) << 0) ^ 0), 0 | ((_GLF_IDENTITY(1, (1) << 0) ^ 0))))), true && (_GLF_IDENTITY(! ((_injected_loop_counter != (1 ^ 0))), _GLF_IDENTITY((! ((_injected_loop_counter != (1 ^ 0)))) && true, ! (! ((! ((_injected_loop_counter != (1 ^ 0)))) && true)))))))))))), true && (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(int(_injected_loop_counter), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(_injected_loop_counter), (int(_injected_loop_counter)) | (int(_injected_loop_counter)))), (~ (_GLF_IDENTITY(int(_injected_loop_counter), (int(_injected_loop_counter)) | (int(_injected_loop_counter))))) + 0))))) != (1 ^ 0), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, _GLF_IDENTITY(int(int(1 ^ 0)), (_GLF_IDENTITY(int(int(1 ^ 0)), int(ivec3(int(int(1 ^ 0)), 1, 1)))) | (int(int(1 ^ 0))))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))))))))))))))), bool(bool((! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! _GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY((1 ^ 0), min((1 ^ 0), _GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) >> 0)))), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), (1) << 0) ^ 0))), true && (_GLF_IDENTITY(! ((_injected_loop_counter != (1 ^ 0))), (! ((_injected_loop_counter != (1 ^ 0)))) && true))))))))), true && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, (_GLF_IDENTITY(1 ^ 0, 0 + (1 ^ 0))) - 0)), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, _GLF_IDENTITY(int(int(1 ^ 0)), 0 + (int(int(1 ^ 0))))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0))))))))))))))))))) || false)), ! (! ((_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1)))) ^ 0), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1, int(ivec2(1, (0 | 0)))) ^ 0)))))), _GLF_IDENTITY(true, ! (! (true))) && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! (_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * _GLF_IDENTITY((1 ^ 0), 1 * ((1 ^ 0))))))))), bool(bool(_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))))))))))))))), _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! _GLF_IDENTITY((_injected_loop_counter != (1 ^ 0)), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (_GLF_IDENTITY(1, (1) << 0) ^ 0))), true && (_GLF_IDENTITY(! ((_injected_loop_counter != (1 ^ 0))), (! ((_injected_loop_counter != (1 ^ 0)))) && true))))))))), true && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0))))))))))))))), true && (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! _GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) - 0)), ! (_GLF_IDENTITY(! ((_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY(1, (1) << 0) ^ 0), 0 | ((_GLF_IDENTITY(1, (1) << 0) ^ 0))))), true && (_GLF_IDENTITY(! ((_injected_loop_counter != (1 ^ 0))), _GLF_IDENTITY((! ((_injected_loop_counter != (1 ^ 0)))) && true, ! (! ((! ((_injected_loop_counter != (1 ^ 0)))) && true)))))))))))), true && (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(int(_injected_loop_counter), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(_injected_loop_counter), (int(_injected_loop_counter)) | (int(_injected_loop_counter)))), (~ (_GLF_IDENTITY(int(_injected_loop_counter), (int(_injected_loop_counter)) | (int(_injected_loop_counter))))) + 0))))) != (1 ^ 0), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, _GLF_IDENTITY(int(int(1 ^ 0)), (_GLF_IDENTITY(int(int(1 ^ 0)), int(ivec3(int(int(1 ^ 0)), 1, 1)))) | (int(int(1 ^ 0))))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))))))))))))))), bool(bool((! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! _GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY((1 ^ 0), min((1 ^ 0), _GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) >> 0)))), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), (1) << 0) ^ 0))), true && (_GLF_IDENTITY(! ((_injected_loop_counter != (1 ^ 0))), (! ((_injected_loop_counter != (1 ^ 0)))) && true))))))))), true && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, (_GLF_IDENTITY(1 ^ 0, 0 + (1 ^ 0))) - 0)), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, _GLF_IDENTITY(int(int(1 ^ 0)), 0 + (int(int(1 ^ 0))))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0))))))))))))))))))) || false)))))) && true))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! (_injected_loop_counter != (1 ^ 0)))))), true && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) | (_GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) << 0))), ! (! (_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, 0 ^ (1 ^ 0)), int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))) ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))), _GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * _GLF_IDENTITY((1 ^ 0), ~ (_GLF_IDENTITY(~ ((1 ^ 0)), int(int(~ ((1 ^ 0)))))))))))))), _GLF_IDENTITY(1 ^ _GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, (0) ^ 0))), min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))))), _GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))), _GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))))))))))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! (_injected_loop_counter != (1 ^ 0)))))), true && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0))))))))))))))), (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! _GLF_IDENTITY((_injected_loop_counter != (1 ^ 0)), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (1 ^ 0))), true && (_GLF_IDENTITY(! ((_injected_loop_counter != (1 ^ 0))), (! ((_injected_loop_counter != (1 ^ 0)))) && true))))))))), true && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, ~ (~ (1 ^ 0)))), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))))))))))))) || false)), (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1)))) ^ 0), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1, int(ivec2(1, (0 | 0)))) ^ 0)))))), _GLF_IDENTITY(true, ! (! (true))) && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! (_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * _GLF_IDENTITY((1 ^ 0), 1 * ((1 ^ 0))))))))), bool(bool(_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))))))))))))))), _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! _GLF_IDENTITY((_injected_loop_counter != (1 ^ 0)), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (_GLF_IDENTITY(1, (1) << 0) ^ 0))), true && (_GLF_IDENTITY(! ((_injected_loop_counter != (1 ^ 0))), (! ((_injected_loop_counter != (1 ^ 0)))) && true))))))))), true && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0))))))))))))))), true && (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! _GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) - 0)), ! (_GLF_IDENTITY(! ((_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY(1, (1) << 0) ^ 0), 0 | ((_GLF_IDENTITY(1, (1) << 0) ^ 0))))), true && (_GLF_IDENTITY(! ((_injected_loop_counter != (1 ^ 0))), _GLF_IDENTITY((! ((_injected_loop_counter != (1 ^ 0)))) && true, ! (! ((! ((_injected_loop_counter != (1 ^ 0)))) && true)))))))))))), true && (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(int(_injected_loop_counter), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(_injected_loop_counter), (int(_injected_loop_counter)) | (int(_injected_loop_counter)))), (~ (_GLF_IDENTITY(int(_injected_loop_counter), (int(_injected_loop_counter)) | (int(_injected_loop_counter))))) + 0))))) != (1 ^ 0), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, _GLF_IDENTITY(int(int(1 ^ 0)), (_GLF_IDENTITY(int(int(1 ^ 0)), int(ivec3(int(int(1 ^ 0)), 1, 1)))) | (int(int(1 ^ 0))))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))))))))))))))), bool(bool((! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! _GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY((1 ^ 0), min((1 ^ 0), _GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) >> 0)))), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), (1) << 0) ^ 0))), true && (_GLF_IDENTITY(! ((_injected_loop_counter != (1 ^ 0))), (! ((_injected_loop_counter != (1 ^ 0)))) && true))))))))), true && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, (_GLF_IDENTITY(1 ^ 0, 0 + (1 ^ 0))) - 0)), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, _GLF_IDENTITY(int(int(1 ^ 0)), 0 + (int(int(1 ^ 0))))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0))))))))))))))))))) || false)), ! (! ((_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1)))) ^ 0), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1, int(ivec2(1, (0 | 0)))) ^ 0)))))), _GLF_IDENTITY(true, ! (! (true))) && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! (_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * _GLF_IDENTITY((1 ^ 0), 1 * ((1 ^ 0))))))))), bool(bool(_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))))))))))))))), _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! _GLF_IDENTITY((_injected_loop_counter != (1 ^ 0)), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (_GLF_IDENTITY(1, (1) << 0) ^ 0))), true && (_GLF_IDENTITY(! ((_injected_loop_counter != (1 ^ 0))), (! ((_injected_loop_counter != (1 ^ 0)))) && true))))))))), true && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0))))))))))))))), true && (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! _GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) - 0)), ! (_GLF_IDENTITY(! ((_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY(1, (1) << 0) ^ 0), 0 | ((_GLF_IDENTITY(1, (1) << 0) ^ 0))))), true && (_GLF_IDENTITY(! ((_injected_loop_counter != (1 ^ 0))), _GLF_IDENTITY((! ((_injected_loop_counter != (1 ^ 0)))) && true, ! (! ((! ((_injected_loop_counter != (1 ^ 0)))) && true)))))))))))), true && (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(int(_injected_loop_counter), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(_injected_loop_counter), (int(_injected_loop_counter)) | (int(_injected_loop_counter)))), (~ (_GLF_IDENTITY(int(_injected_loop_counter), (int(_injected_loop_counter)) | (int(_injected_loop_counter))))) + 0))))) != (1 ^ 0), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, _GLF_IDENTITY(int(int(1 ^ 0)), (_GLF_IDENTITY(int(int(1 ^ 0)), int(ivec3(int(int(1 ^ 0)), 1, 1)))) | (int(int(1 ^ 0))))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))))))))))))))), bool(bool((! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! _GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY((1 ^ 0), min((1 ^ 0), _GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) >> 0)))), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), (1) << 0) ^ 0))), true && (_GLF_IDENTITY(! ((_injected_loop_counter != (1 ^ 0))), (! ((_injected_loop_counter != (1 ^ 0)))) && true))))))))), true && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, (_GLF_IDENTITY(1 ^ 0, 0 + (1 ^ 0))) - 0)), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, _GLF_IDENTITY(int(int(1 ^ 0)), 0 + (int(int(1 ^ 0))))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0))))))))))))))))))) || false)))))) && true))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! (_injected_loop_counter != (1 ^ 0)))))), true && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) | (_GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) << 0))), ! (! (_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, 0 ^ (1 ^ 0)), int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))) ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))), _GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * _GLF_IDENTITY((1 ^ 0), ~ (_GLF_IDENTITY(~ ((1 ^ 0)), int(int(~ ((1 ^ 0)))))))))))))), _GLF_IDENTITY(1 ^ _GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, (0) ^ 0))), min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))))), _GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))), _GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))))))))))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! (_injected_loop_counter != (1 ^ 0)))))), true && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0))))))))))))))), (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! _GLF_IDENTITY((_injected_loop_counter != (1 ^ 0)), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (1 ^ 0))), true && (_GLF_IDENTITY(! ((_injected_loop_counter != (1 ^ 0))), (! ((_injected_loop_counter != (1 ^ 0)))) && true))))))))), true && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, ~ (~ (1 ^ 0)))), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))))))))))))) || false)), (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1)))) ^ 0), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1, int(ivec2(1, (0 | 0)))) ^ 0)))))), _GLF_IDENTITY(true, ! (! (true))) && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! (_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * _GLF_IDENTITY((1 ^ 0), 1 * ((1 ^ 0))))))))), bool(bool(_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))))))))))))))), _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! _GLF_IDENTITY((_injected_loop_counter != (1 ^ 0)), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (_GLF_IDENTITY(1, (1) << 0) ^ 0))), true && (_GLF_IDENTITY(! ((_injected_loop_counter != (1 ^ 0))), (! ((_injected_loop_counter != (1 ^ 0)))) && true))))))))), true && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0))))))))))))))), true && (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! _GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) - 0)), ! (_GLF_IDENTITY(! ((_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY(1, (1) << 0) ^ 0), 0 | ((_GLF_IDENTITY(1, (1) << 0) ^ 0))))), true && (_GLF_IDENTITY(! ((_injected_loop_counter != (1 ^ 0))), _GLF_IDENTITY((! ((_injected_loop_counter != (1 ^ 0)))) && true, ! (! ((! ((_injected_loop_counter != (1 ^ 0)))) && true)))))))))))), true && (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(int(_injected_loop_counter), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(_injected_loop_counter), (int(_injected_loop_counter)) | (int(_injected_loop_counter)))), (~ (_GLF_IDENTITY(int(_injected_loop_counter), (int(_injected_loop_counter)) | (int(_injected_loop_counter))))) + 0))))) != (1 ^ 0), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, _GLF_IDENTITY(int(int(1 ^ 0)), (_GLF_IDENTITY(int(int(1 ^ 0)), int(ivec3(int(int(1 ^ 0)), 1, 1)))) | (int(int(1 ^ 0))))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))))))))))))))), bool(bool((! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! _GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY((1 ^ 0), min((1 ^ 0), _GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) >> 0)))), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), (1) << 0) ^ 0))), true && (_GLF_IDENTITY(! ((_injected_loop_counter != (1 ^ 0))), (! ((_injected_loop_counter != (1 ^ 0)))) && true))))))))), true && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, (_GLF_IDENTITY(1 ^ 0, 0 + (1 ^ 0))) - 0)), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, _GLF_IDENTITY(int(int(1 ^ 0)), 0 + (int(int(1 ^ 0))))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0))))))))))))))))))) || false)), ! (! ((_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1)))) ^ 0), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1, int(ivec2(1, (0 | 0)))) ^ 0)))))), _GLF_IDENTITY(true, ! (! (true))) && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! (_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * _GLF_IDENTITY((1 ^ 0), 1 * ((1 ^ 0))))))))), bool(bool(_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))))))))))))))), _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! _GLF_IDENTITY((_injected_loop_counter != (1 ^ 0)), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (_GLF_IDENTITY(1, (1) << 0) ^ 0))), true && (_GLF_IDENTITY(! ((_injected_loop_counter != (1 ^ 0))), (! ((_injected_loop_counter != (1 ^ 0)))) && true))))))))), true && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0))))))))))))))), true && (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! _GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) - 0)), ! (_GLF_IDENTITY(! ((_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY(1, (1) << 0) ^ 0), 0 | ((_GLF_IDENTITY(1, (1) << 0) ^ 0))))), true && (_GLF_IDENTITY(! ((_injected_loop_counter != (1 ^ 0))), _GLF_IDENTITY((! ((_injected_loop_counter != (1 ^ 0)))) && true, ! (! ((! ((_injected_loop_counter != (1 ^ 0)))) && true)))))))))))), true && (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(int(_injected_loop_counter), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(_injected_loop_counter), (int(_injected_loop_counter)) | (int(_injected_loop_counter)))), (~ (_GLF_IDENTITY(int(_injected_loop_counter), (int(_injected_loop_counter)) | (int(_injected_loop_counter))))) + 0))))) != (1 ^ 0), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, _GLF_IDENTITY(int(int(1 ^ 0)), (_GLF_IDENTITY(int(int(1 ^ 0)), int(ivec3(int(int(1 ^ 0)), 1, 1)))) | (int(int(1 ^ 0))))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))))))))))))))), bool(bool((! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! _GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY((1 ^ 0), min((1 ^ 0), _GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) >> 0)))), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), (1) << 0) ^ 0))), true && (_GLF_IDENTITY(! ((_injected_loop_counter != (1 ^ 0))), (! ((_injected_loop_counter != (1 ^ 0)))) && true))))))))), true && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, (_GLF_IDENTITY(1 ^ 0, 0 + (1 ^ 0))) - 0)), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, _GLF_IDENTITY(int(int(1 ^ 0)), 0 + (int(int(1 ^ 0))))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0))))))))))))))))))) || false)))))) && true))), false, false, true)), false || (bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! (_injected_loop_counter != (1 ^ 0)))))), true && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) | (_GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) << 0))), ! (! (_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, 0 ^ (1 ^ 0)), int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))) ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))), _GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * _GLF_IDENTITY((1 ^ 0), ~ (_GLF_IDENTITY(~ ((1 ^ 0)), int(int(~ ((1 ^ 0)))))))))))))), _GLF_IDENTITY(1 ^ _GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0, (0) ^ 0))), min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))))), _GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))), _GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))))))))))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! (_injected_loop_counter != (1 ^ 0)))))), true && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0))))))))))))))), (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! _GLF_IDENTITY((_injected_loop_counter != (1 ^ 0)), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (1 ^ 0))), true && (_GLF_IDENTITY(! ((_injected_loop_counter != (1 ^ 0))), (! ((_injected_loop_counter != (1 ^ 0)))) && true))))))))), true && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, ~ (~ (1 ^ 0)))), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))))))))))))) || false)), (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1)))) ^ 0), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1, int(ivec2(1, (0 | 0)))) ^ 0)))))), _GLF_IDENTITY(true, ! (! (true))) && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! (_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * _GLF_IDENTITY((1 ^ 0), 1 * ((1 ^ 0))))))))), bool(bool(_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))))))))))))))), _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! _GLF_IDENTITY((_injected_loop_counter != (1 ^ 0)), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (_GLF_IDENTITY(1, (1) << 0) ^ 0))), true && (_GLF_IDENTITY(! ((_injected_loop_counter != (1 ^ 0))), (! ((_injected_loop_counter != (1 ^ 0)))) && true))))))))), true && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0))))))))))))))), true && (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! _GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) - 0)), ! (_GLF_IDENTITY(! ((_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY(1, (1) << 0) ^ 0), 0 | ((_GLF_IDENTITY(1, (1) << 0) ^ 0))))), true && (_GLF_IDENTITY(! ((_injected_loop_counter != (1 ^ 0))), _GLF_IDENTITY((! ((_injected_loop_counter != (1 ^ 0)))) && true, ! (! ((! ((_injected_loop_counter != (1 ^ 0)))) && true)))))))))))), true && (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(int(_injected_loop_counter), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(_injected_loop_counter), (int(_injected_loop_counter)) | (int(_injected_loop_counter)))), (~ (_GLF_IDENTITY(int(_injected_loop_counter), (int(_injected_loop_counter)) | (int(_injected_loop_counter))))) + 0))))) != (1 ^ 0), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, _GLF_IDENTITY(int(int(1 ^ 0)), (_GLF_IDENTITY(int(int(1 ^ 0)), int(ivec3(int(int(1 ^ 0)), 1, 1)))) | (int(int(1 ^ 0))))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))))))))))))))), bool(bool((! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! _GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY((1 ^ 0), min((1 ^ 0), _GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) >> 0)))), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), (1) << 0) ^ 0))), true && (_GLF_IDENTITY(! ((_injected_loop_counter != (1 ^ 0))), (! ((_injected_loop_counter != (1 ^ 0)))) && true))))))))), true && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, (_GLF_IDENTITY(1 ^ 0, 0 + (1 ^ 0))) - 0)), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, _GLF_IDENTITY(int(int(1 ^ 0)), 0 + (int(int(1 ^ 0))))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0))))))))))))))))))) || false)), ! (! ((_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, min(1, 1)))) ^ 0), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1, int(ivec2(1, (0 | 0)))) ^ 0)))))), _GLF_IDENTITY(true, ! (! (true))) && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! (_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * _GLF_IDENTITY((1 ^ 0), 1 * ((1 ^ 0))))))))), bool(bool(_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))))))))))))))), _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! _GLF_IDENTITY((_injected_loop_counter != (1 ^ 0)), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (_GLF_IDENTITY(1, (1) << 0) ^ 0))), true && (_GLF_IDENTITY(! ((_injected_loop_counter != (1 ^ 0))), (! ((_injected_loop_counter != (1 ^ 0)))) && true))))))))), true && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, int(int(1 ^ 0))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0))))))))))))))), true && (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! _GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) - 0)), ! (_GLF_IDENTITY(! ((_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY(1, (1) << 0) ^ 0), 0 | ((_GLF_IDENTITY(1, (1) << 0) ^ 0))))), true && (_GLF_IDENTITY(! ((_injected_loop_counter != (1 ^ 0))), _GLF_IDENTITY((! ((_injected_loop_counter != (1 ^ 0)))) && true, ! (! ((! ((_injected_loop_counter != (1 ^ 0)))) && true)))))))))))), true && (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(int(_injected_loop_counter), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(_injected_loop_counter), (int(_injected_loop_counter)) | (int(_injected_loop_counter)))), (~ (_GLF_IDENTITY(int(_injected_loop_counter), (int(_injected_loop_counter)) | (int(_injected_loop_counter))))) + 0))))) != (1 ^ 0), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, _GLF_IDENTITY(int(int(1 ^ 0)), (_GLF_IDENTITY(int(int(1 ^ 0)), int(ivec3(int(int(1 ^ 0)), 1, 1)))) | (int(int(1 ^ 0))))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0)))))))))))))))))), bool(bool((! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), ! (! _GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY((1 ^ 0), min((1 ^ 0), _GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) >> 0)))), ! (_GLF_IDENTITY(! ((_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), (1) << 0) ^ 0))), true && (_GLF_IDENTITY(! ((_injected_loop_counter != (1 ^ 0))), (! ((_injected_loop_counter != (1 ^ 0)))) && true))))))))), true && (bool(bool(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, (_GLF_IDENTITY(1 ^ 0, 0 + (1 ^ 0))) - 0)), ! (! (_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, min(1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(_GLF_IDENTITY(1 ^ 0, _GLF_IDENTITY(int(int(1 ^ 0)), 0 + (int(int(1 ^ 0))))), _GLF_IDENTITY(1 ^ 0, 1 * (1 ^ 0))))))))))))))))))) || false)))))) && true))), false, false, true)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) && true)))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), true)))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))))))))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - length(0.0)) > injectionSwitch.y))))
                continue;
               break;
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x2(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(float(mat2x4(float(mat3x2(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), clamp(float(mat2x4(float(mat3x2(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), float(mat2x4(float(mat3x2(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), float(mat2x4(float(mat3x2(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)))))) > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), (bool(bvec2(false, false))) || _GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         break;
        }
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 | 0) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) + 0)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      break;
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true)) && (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false))) && (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) + (gl_NumWorkGroups))))).x, (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x))) / 1u);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec4(injectionSwitch, 1.0, sqrt(0.0)), max(vec4(injectionSwitch, 1.0, sqrt(0.0)), vec4(injectionSwitch, 1.0, sqrt(0.0))))), mix(vec2((vec2(_GLF_IDENTITY(vec4(injectionSwitch, 1.0, sqrt(0.0)), max(vec4(injectionSwitch, 1.0, sqrt(0.0)), vec4(injectionSwitch, 1.0, sqrt(0.0))))))[0], (vec2(_GLF_IDENTITY(vec4(injectionSwitch, 1.0, sqrt(0.0)), max(vec4(injectionSwitch, 1.0, sqrt(0.0)), vec4(injectionSwitch, 1.0, sqrt(0.0))))))[1]), vec2(_GLF_FUZZED(8.1), _GLF_FUZZED((-3.7 * -7.2))), bvec2(false, false)))).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, int(int(_GLF_IDENTITY(0, (0) / 1))))); _injected_loop_counter --)
      {
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (_GLF_IDENTITY(! (false), false || (! (false))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false)))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))) && true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false))))) || false)), ! (! (_GLF_IDENTITY(false, ! (! (false))))))));
      }
    }
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false), false, true)), (bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false), false, true))) && true))), true && (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false), false, true)), (bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false), false, true))) && true))), true && ((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false), false, true)), (bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false), false, true))) && true))))))))) && (_GLF_DEAD(false))), ! (! (_GLF_DEAD(false)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-864.369), _GLF_FUZZED(-31.11)), bvec2(false, false))).x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), min(injectionSwitch, injectionSwitch)).y), float(_GLF_FUZZED(-3.2)), bool(false))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))) && (_GLF_DEAD(false))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false)))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))), ! (! (_GLF_DEAD(false)))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), ! (! (! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true)) && (_GLF_DEAD(false))), ! (! (_GLF_DEAD(false)))), false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))), true))))))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(433.739), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(-1.4)), bvec2(true, false)))) - vec2(0.0, 0.0), min((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(433.739), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(-1.4)), bvec2(true, false)))) - vec2(0.0, 0.0), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(433.739), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(-1.4)), bvec2(true, false)))) - vec2(0.0, 0.0)))).y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (gl_WorkGroupSize.x))), _GLF_IDENTITY(clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | (gl_WorkGroupSize.x))), clamp(clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | (gl_WorkGroupSize.x))), clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | (gl_WorkGroupSize.x))), clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | (gl_WorkGroupSize.x)))))), clamp(gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, clamp(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])), gl_WorkGroupSize, gl_WorkGroupSize)).x, _GLF_IDENTITY((gl_WorkGroupSize.x) - 0u, ((gl_WorkGroupSize.x) - 0u) | ((gl_WorkGroupSize.x) - 0u))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))))).x)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) - _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | 0u)) | (0u))), _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]), (uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])) | (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(1u), uvec3(1u))))).x)), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) - _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | 0u)) | (0u))), _GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], _GLF_IDENTITY(gl_WorkGroupSize, min(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u)), gl_WorkGroupSize))[1], gl_WorkGroupSize[_GLF_IDENTITY(2, (2) ^ 0)])).x)), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)).x, clamp(gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) - _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | 0u)) | (0u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) - _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | 0u)) | (0u)))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) - _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | 0u)) | (0u)))), 0u ^ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) - _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | 0u)) | (0u)))))), ~ (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) - _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | 0u)) | (0u)))), ~ (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) - _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | 0u)) | (0u)))))))), _GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])).x))) << (0u << _GLF_IDENTITY(uint(6u), uint(6u))))) >> 0u), _GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) - 0u), gl_WorkGroupSize.x)), _GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) - 0u), gl_WorkGroupSize.x))));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), (bool(bvec2(_GLF_IDENTITY(false, (false) || false), false))) || false))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0)), max(vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0)), vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0))))))[0], _GLF_FUZZED(-4.3)), max(vec2((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0)), max(vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0)), vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0))))))[0], _GLF_FUZZED(-4.3)), vec2((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0)), max(vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0)), vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0))))))[0], _GLF_FUZZED(-4.3)))), vec2(_GLF_FUZZED(9.8), _GLF_IDENTITY((injectionSwitch)[1], clamp(_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - 0.0), (injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(6184.7245, _GLF_IDENTITY(-9.3, max(-9.3, _GLF_IDENTITY(-9.3, float(vec3(-9.3, 1.0, 0.0)))))))))), _GLF_IDENTITY((min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-4.3)), vec2(_GLF_FUZZED(9.8), _GLF_IDENTITY((injectionSwitch)[1], clamp(_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - _GLF_IDENTITY(0.0, 0.0 + (0.0))), (injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(6184.7245, _GLF_IDENTITY(_GLF_IDENTITY(-9.3, max(-9.3, _GLF_IDENTITY(-9.3, float(vec3(-9.3, 1.0, 0.0))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(-9.3, max(-9.3, _GLF_IDENTITY(-9.3, float(vec3(-9.3, 1.0, 0.0))))), (_GLF_IDENTITY(_GLF_IDENTITY(-9.3, max(-9.3, _GLF_IDENTITY(-9.3, float(vec3(-9.3, 1.0, 0.0))))), mix(float(_GLF_FUZZED(-844.237)), float(_GLF_IDENTITY(-9.3, max(-9.3, _GLF_IDENTITY(-9.3, float(vec3(-9.3, 1.0, 0.0)))))), bool(true)))) - 0.0), _GLF_IDENTITY(-9.3, max(-9.3, _GLF_IDENTITY(-9.3, float(vec3(-9.3, 1.0, 0.0))))), _GLF_IDENTITY(-9.3, max(-9.3, _GLF_IDENTITY(-9.3, float(vec3(-9.3, 1.0, 0.0))))))))))))) * mat2(1.0), max((min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-4.3)), vec2(_GLF_FUZZED(9.8), _GLF_IDENTITY((injectionSwitch)[1], clamp(_GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(((injectionSwitch)[1]) - 0.0, (_GLF_IDENTITY(((injectionSwitch)[1]) - 0.0, clamp(((injectionSwitch)[1]) - 0.0, ((injectionSwitch)[1]) - 0.0, ((injectionSwitch)[1]) - 0.0))) + tan(0.0))), _GLF_IDENTITY((injectionSwitch), clamp(_GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch))), (injectionSwitch), _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(159.204), ((injectionSwitch))[1]), vec2(_GLF_IDENTITY(((injectionSwitch))[0], (false ? _GLF_FUZZED(7.8) : ((injectionSwitch))[0])), _GLF_FUZZED(-48.00)), bvec2(true, false)))))[1], (injectionSwitch)[1]))), bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), true))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(vec2(6184.7245, _GLF_IDENTITY(-9.3, max(-9.3, _GLF_IDENTITY(-9.3, float(vec3(-9.3, 1.0, 0.0)))))))), min((true ? injectionSwitch : _GLF_FUZZED(vec2(6184.7245, _GLF_IDENTITY(-9.3, max(-9.3, _GLF_IDENTITY(-9.3, float(vec3(-9.3, 1.0, 0.0)))))))), (true ? injectionSwitch : _GLF_FUZZED(vec2(6184.7245, _GLF_IDENTITY(-9.3, max(-9.3, _GLF_IDENTITY(-9.3, float(vec3(-9.3, 1.0, 0.0))))))))))))) * mat2(1.0), (min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-4.3)), vec2(_GLF_FUZZED(9.8), _GLF_IDENTITY((injectionSwitch)[1], clamp(_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - 0.0), (injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), true))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(6184.7245, _GLF_IDENTITY(-9.3, max(-9.3, _GLF_IDENTITY(-9.3, float(vec3(-9.3, 1.0, 0.0))))))))))) * mat2(1.0))))).x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(1.0, 1.0) * (vec2(vec2(injectionSwitch))))).y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, sqrt(1.0), 1.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0))))) > injectionSwitch.y))))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_base + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) << 0u));
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   do
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((false ? -99794 : -92451) & 0)); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y))))
        break;
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, 1.0, 0.0))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), float(mat2(injectionSwitch.x, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-83.93)), bool(false))), 1.0, 0.0)))), float(_GLF_FUZZED(-326.534)), bool(false))) > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y))));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 atomicStore(buf[_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid))], _GLF_IDENTITY(uint(1), (uint(1)) + 0u), 4, 64, 4);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false))))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
      return;
     atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (0u << _GLF_IDENTITY(uint(7u), uint(7u))) ^ (_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid), ~ (_GLF_IDENTITY(~ (clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid)), ~ (~ (_GLF_IDENTITY(~ (clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid)), clamp(~ (clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid)), ~ (clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid)), ~ (clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid)))))))))), next_virtual_gid)))), ~ (~ (_GLF_IDENTITY(next_virtual_gid, (0u << _GLF_IDENTITY(uint(7u), uint(7u))) ^ (_GLF_IDENTITY(next_virtual_gid, clamp(_GLF_IDENTITY(next_virtual_gid, 0u ^ (next_virtual_gid)), _GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid)), next_virtual_gid))))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (0u << _GLF_IDENTITY(uint(7u), uint(7u))) ^ (_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u))), next_virtual_gid)))), min(_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (0u << _GLF_IDENTITY(uint(7u), uint(7u))) ^ (_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid)), next_virtual_gid)))), (_GLF_IDENTITY(next_virtual_gid, (0u << _GLF_IDENTITY(uint(7u), uint(7u))) ^ (_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid)), next_virtual_gid))))) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (0u << _GLF_IDENTITY(uint(7u), uint(7u))) ^ (_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid)), next_virtual_gid)))), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (0u << _GLF_IDENTITY(uint(7u), uint(7u))) ^ (_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid)), next_virtual_gid)))), (_GLF_IDENTITY(next_virtual_gid, (0u << _GLF_IDENTITY(uint(7u), uint(7u))) ^ (_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid)), next_virtual_gid))))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u)), uint(uint(uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (0u << _GLF_IDENTITY(uint(7u), uint(7u))) ^ (_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid)), next_virtual_gid)))), (_GLF_IDENTITY(next_virtual_gid, (0u << _GLF_IDENTITY(uint(7u), uint(7u))) ^ (_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid)), next_virtual_gid))))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u)))))))) : _GLF_FUZZED(workgroup_id)))], uint(2), 4, 64, 4);
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + determinant(mat3(tan(0.0), 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))) > injectionSwitch.y)) || (false))))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, int(int(5)))), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) ^ 0), clamp(int(5), int(5), int(5))), int(5)))))); _GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY(0, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(0, 0, 1)), int(ivec3(int(ivec3(_GLF_IDENTITY(0, min(0, 0)), 0, 1)), 0, 1))), clamp(int(ivec3(0, _GLF_IDENTITY(0, (0) << 0), 1)), int(ivec3(0, 0, 1)), _GLF_IDENTITY(int(ivec3(0, 0, 1)), 0 ^ (int(ivec3(0, 0, 1))))))) ^ (_injected_loop_counter --)))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true && (injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (true && (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(! (true && (injectionSwitch.x > injectionSwitch.y)), true)), bool(bvec2(bool(bvec2(! (true && (injectionSwitch.x > injectionSwitch.y)), true)), true)))))))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
