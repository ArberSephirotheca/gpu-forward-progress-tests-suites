#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec2(_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false)))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, false || (false)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))))), min((injectionSwitch.x), (injectionSwitch.x))) / determinant(mat4(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(float(102918u))), min(float(_GLF_FUZZED(float(102918u))), float(_GLF_IDENTITY(_GLF_FUZZED(float(102918u)), max(_GLF_FUZZED(float(102918u)), _GLF_FUZZED(float(102918u))))))), float(_GLF_IDENTITY(1.0, max(1.0, 1.0))), _GLF_IDENTITY(bool(true), (bool(true)) && true)))), float(_GLF_FUZZED(52.55)), bool(false))), 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 1.0))) > injectionSwitch.y))), _GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, abs(vec2(0.0, 0.0)) + (injectionSwitch)).x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch, abs(vec2(0.0, 0.0)) + (injectionSwitch)).x > injectionSwitch.y))))))), true && (_GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, abs(vec2(0.0, 0.0)) + (injectionSwitch)).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, abs(vec2(0.0, 0.0)) + (injectionSwitch)).x > injectionSwitch.y) || false)))))), (! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(abs(vec2(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0))), (true ? _GLF_IDENTITY(abs(vec2(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0))), (true ? abs(vec2(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0))) : _GLF_FUZZED((injectionSwitch * outerProduct(vec2(770.185, 9270.3204), injectionSwitch))))) : _GLF_FUZZED(vec2(-799.218, 9.0)))) + (injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(abs(vec2(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0))), (true ? _GLF_IDENTITY(abs(vec2(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0))), (true ? abs(vec2(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0))) : _GLF_FUZZED((injectionSwitch * outerProduct(vec2(770.185, 9270.3204), injectionSwitch))))) : _GLF_FUZZED(vec2(-799.218, 9.0)))) + (injectionSwitch)).x) / 1.0) > injectionSwitch.y)))))) && true)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          barrier();
         barrier();
        }
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) - 0.0)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, true && (false)))), false), true), bvec3(bvec4(bvec3(bvec2(false, false), true), false))))), true, false))), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(bvec3(bvec3(bvec2(false, false), false))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(false, false), false)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false))))))))))), true))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, _GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))), false), bvec3(bvec3(bvec3(bvec2(false, false), false))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(false, false), false)), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec2(bvec2(false, false)), bvec2(bvec3(bvec2(bvec2(false, false)), true))))), false))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec2(false, false), false))), true)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec2(bvec2(false, false)), bvec2(bvec3(bvec2(bvec2(false, false)), true))))), false))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec2(false, false), false))), true))))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false))))))))))), true))), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(bvec3(bvec3(bvec2(false, false), false))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(bvec3(bvec3(bvec2(false, false), false)))))))), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(false, false), false)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false))))))))))), true)), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(false, false), false)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false))))))))))), true)), true, false)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(false, false), false)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false))))))))))), true)), _GLF_IDENTITY(bvec2(bvec2(bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(false, false), false)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false))))))))))), true)))), bvec2(bvec2(bvec2(bvec2(bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(false, false), false)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false))))))))))), true)))))))), true, false)), true, true))))), _GLF_IDENTITY(false, true && (false)), true))))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false))), false, true))), _GLF_IDENTITY(false, (false) || false)), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, _GLF_IDENTITY(false, false || (false))), false))), false), true)))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), true), bvec3(bvec4(bvec3(bvec2(false, false), true), false))))), true, false))), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(bvec3(bvec3(bvec2(false, false), false))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(false, false), false)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false))))))))))), true))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, _GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(false, false), false)), bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false)))))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, true && (false)), false), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(false, false), false)), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), false), false))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec2(false, false), false))), true)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false))))))))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(false, false), false)), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), false), false))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec2(false, false), false))), true)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false))))))))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(false, false), false)), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), false), false))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec2(false, false), false))), true)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false))))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(false, false), false)), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), false), false))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec2(false, false), false))), true)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false))))))))))), false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), true))), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(bvec3(bvec3(bvec2(false, false), false))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(bvec3(bvec3(bvec2(false, false), false)))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(false, false), false)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false))))))))))), true))), _GLF_IDENTITY(false, true && (false)), true))))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false))), false, true))), _GLF_IDENTITY(false, (false) || false)), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, _GLF_IDENTITY(false, false || (false))), false))), false), true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), true), bvec3(bvec4(bvec3(bvec2(false, false), true), false))))), true, false))), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(bvec3(bvec3(bvec2(false, false), false))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(false, false), false)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false))))))))))), true))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, _GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), true), bvec3(bvec3(bvec3(bvec2(false, false), true)))))), false)), bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false)))))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(false, false), false)), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), false), false))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec2(false, false), false))), true)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false))))))))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(false, false), false)), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), false), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), bool(bvec2(! (_GLF_IDENTITY(false, ! (! (false)))), false)))))))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec2(false, false), false))), true)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), _GLF_IDENTITY(true, ! (! (true)))))), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(bvec3(bvec3(bvec2(false, false), false))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(bvec3(bvec3(bvec2(false, false), false)))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(false, false), false)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false))))))))))), true))), _GLF_IDENTITY(false, true && (false)), true))))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false))), false, true))), _GLF_IDENTITY(false, (false) || false)), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, _GLF_IDENTITY(false, false || (false))), false))), false), true)))), true, false))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), true), bvec3(bvec4(bvec3(bvec2(false, false), true), false))))), true, false))), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(bvec3(bvec3(bvec2(false, false), false))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(false, false), false)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false))))))))))), true))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, _GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))), false), bvec3(bvec3(bvec3(bvec2(false, false), false))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(false, false), false)), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec2(false, false), false))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec2(false, false), false))), true)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false))))))))))), true))), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(bvec3(bvec3(bvec2(false, false), false))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(bvec3(bvec3(bvec2(false, false), false)))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(false, false), false)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false))))))))))), true))), _GLF_IDENTITY(false, true && (false)), true))))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false))), false, true))), _GLF_IDENTITY(false, (false) || false)), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, _GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(false, ! (! (false)))))), false), true))))))), _GLF_IDENTITY(bool(bvec4((bool(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), true), bvec3(bvec4(bvec3(bvec2(false, false), true), false))))), true, false))), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec2(false, false), false))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false))))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false))))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false))))), false))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false))))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false))))), false)))))))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(false, false), false)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false))))))))))), true))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, _GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))), false), bvec3(bvec3(bvec3(bvec2(false, false), false))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, _GLF_IDENTITY(false, (false) || false)), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(false, false), false)), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec2(false, false), false))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec2(false, false), false))), true)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false))))))))))), true))), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(bvec3(bvec3(bvec2(false, false), false))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(bvec3(bvec3(bvec2(false, false), false)))))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(false, false), false)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false))))))))))), true))), _GLF_IDENTITY(false, true && (false)), true))))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false))), false, true))), _GLF_IDENTITY(false, (false) || false)), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, _GLF_IDENTITY(false, false || (false))), false))), false), true))))))), true, true, false)), (bool(bvec4((bool(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), true), bvec3(bvec4(bvec3(bvec2(false, false), true), false))))), true, false))), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(bvec3(bvec3(bvec2(false, false), false))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(false, false), false)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false))))))))))), true))), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, _GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))), false), bvec3(bvec3(bvec3(bvec2(false, false), false))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(false, false), false)), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec2(false, false), false))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))))), false))), true)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false))))))))))), true))), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(bvec3(bvec3(bvec2(false, false), false))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(bvec3(bvec3(bvec2(false, false), false)))))))), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(false, false), false)), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false))))))), false))))))), true), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(false, false), false)), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false))))))), false))))))), true), false))))), _GLF_IDENTITY(false, true && (false)), true))))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false))), false, true))), _GLF_IDENTITY(false, (false) || false)), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, _GLF_IDENTITY(false, false || (false))), false))), false), true))))))), true, true, false))) && true)) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(bvec3(bvec3(bvec2(false, false), false))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(false, false), false)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(false, (false) || false), false), false)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(false, false), false))))))))))), true)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false))), false, true))), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) || false)))), false), true))))))))) || false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))) || false)))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), bool(bool(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((4.0)), _GLF_FUZZED(0.5)), bvec2(false, false))).x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool(! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - tan(0.0)))))))))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_base = _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(floatBitsToUint(-8148.9012)) : _GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)))) * subgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY((0u), 0u ^ ((0u))) | 0u)) | (0u))), _GLF_IDENTITY(uint(0u), min(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u)), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u)), (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u))) + 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u)), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u), min(_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u), (clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u)) / 1u), clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u)))), (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u))) + 0u)))) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u)), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u)), (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u))) + 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), ~ (~ (uint(uvec2(0u, 0u)))))), _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(max(0u, 0u), clamp(_GLF_IDENTITY(max(0u, 0u), _GLF_IDENTITY((_GLF_IDENTITY(max(0u, 0u), min(max(0u, 0u), max(0u, 0u)))) + 0u, (_GLF_IDENTITY((_GLF_IDENTITY(max(0u, 0u), min(max(0u, 0u), max(0u, 0u)))) + 0u, ((_GLF_IDENTITY(max(0u, 0u), min(max(0u, 0u), max(0u, 0u)))) + 0u) - 0u)) >> 0u)), max(0u, 0u), _GLF_IDENTITY(max(0u, 0u), (max(0u, 0u)) | (_GLF_IDENTITY(max(0u, 0u), (max(0u, 0u)) * 1u))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(181578u, 35769u, 71465u)[1]) : max(_GLF_IDENTITY(0u, (0u) / 1u), 0u))), (0u << _GLF_IDENTITY(uint(7u), uint(7u))) + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(max(0u, 0u), clamp(_GLF_IDENTITY(max(0u, 0u), _GLF_IDENTITY((_GLF_IDENTITY(max(0u, 0u), min(max(0u, 0u), max(0u, 0u)))) + 0u, (_GLF_IDENTITY((_GLF_IDENTITY(max(0u, 0u), min(max(0u, 0u), max(0u, 0u)))) + 0u, ((_GLF_IDENTITY(max(0u, 0u), min(max(0u, 0u), max(0u, 0u)))) + 0u) - 0u)) >> 0u)), max(0u, 0u), _GLF_IDENTITY(max(0u, 0u), (max(0u, 0u)) | (_GLF_IDENTITY(max(0u, 0u), (max(0u, 0u)) * 1u))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(181578u, 35769u, 71465u)[1]) : max(_GLF_IDENTITY(0u, (0u) / 1u), 0u))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(max(0u, 0u), clamp(_GLF_IDENTITY(max(0u, 0u), _GLF_IDENTITY((_GLF_IDENTITY(max(0u, 0u), min(max(0u, 0u), max(0u, 0u)))) + 0u, (_GLF_IDENTITY((_GLF_IDENTITY(max(0u, 0u), min(max(0u, 0u), max(0u, 0u)))) + 0u, ((_GLF_IDENTITY(max(0u, 0u), min(max(0u, 0u), max(0u, 0u)))) + 0u) - 0u)) >> 0u)), max(0u, 0u), _GLF_IDENTITY(max(0u, 0u), (max(0u, 0u)) | (_GLF_IDENTITY(max(0u, 0u), (max(0u, 0u)) * 1u))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(181578u, 35769u, 71465u)[1]) : max(_GLF_IDENTITY(0u, (0u) / 1u), 0u)))))))), 0u)))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u)), (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 0u))), 0u)), uint(uint(0u))), uint(uvec2(0u, 0u))), 0u))) + 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) | (0u)))), _GLF_IDENTITY(uint(uvec2(0u, 0u)), clamp(uint(uvec2(0u, 0u)), uint(_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) ^ uvec2(0u, _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(num_workgroup)))))), uint(uvec2(0u, 0u))))), 0u)), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(min(subgroup_local_id, bitfieldExtract(63933u, -84779, 27014))) : 0u))))), 0u)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u))), clamp((_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(_GLF_IDENTITY(0u, max(0u, 0u)), 0u))), 0u))), (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) * 1u), _GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u), ~ (~ (clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u)))))))), ~ (~ ((_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u)))))) + 0u)))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u)), 0u ^ (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u)))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u)), (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u))) + 0u)))))) ^ 0u)), uint(0u)))), uint(uvec2(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY((0u), 0u ^ ((0u))) | 0u)) | (0u))), _GLF_IDENTITY(uint(0u), min(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u)), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u)), (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u))) + 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u)), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u), min(_GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u), (clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u)) / 1u), clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u)))), (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u))) + 0u)))) | (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u)), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u)), (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u))) + 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 0u)), ~ (~ (uint(uvec2(0u, 0u)))))), _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(max(0u, 0u), clamp(_GLF_IDENTITY(max(0u, 0u), _GLF_IDENTITY((_GLF_IDENTITY(max(0u, 0u), min(max(0u, 0u), max(0u, 0u)))) + 0u, (_GLF_IDENTITY((_GLF_IDENTITY(max(0u, 0u), min(max(0u, 0u), max(0u, 0u)))) + 0u, ((_GLF_IDENTITY(max(0u, 0u), min(max(0u, 0u), max(0u, 0u)))) + 0u) - 0u)) >> 0u)), max(0u, 0u), _GLF_IDENTITY(max(0u, 0u), (max(0u, 0u)) | (_GLF_IDENTITY(max(0u, 0u), (max(0u, 0u)) * 1u))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(181578u, 35769u, 71465u)[1]) : max(_GLF_IDENTITY(0u, (0u) / 1u), 0u))), (0u << _GLF_IDENTITY(uint(7u), uint(7u))) + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(max(0u, 0u), clamp(_GLF_IDENTITY(max(0u, 0u), _GLF_IDENTITY((_GLF_IDENTITY(max(0u, 0u), min(max(0u, 0u), max(0u, 0u)))) + 0u, (_GLF_IDENTITY((_GLF_IDENTITY(max(0u, 0u), min(max(0u, 0u), max(0u, 0u)))) + 0u, ((_GLF_IDENTITY(max(0u, 0u), min(max(0u, 0u), max(0u, 0u)))) + 0u) - 0u)) >> 0u)), max(0u, 0u), _GLF_IDENTITY(max(0u, 0u), (max(0u, 0u)) | (_GLF_IDENTITY(max(0u, 0u), (max(0u, 0u)) * 1u))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(181578u, 35769u, 71465u)[1]) : max(_GLF_IDENTITY(0u, (0u) / 1u), 0u))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(max(0u, 0u), clamp(_GLF_IDENTITY(max(0u, 0u), _GLF_IDENTITY((_GLF_IDENTITY(max(0u, 0u), min(max(0u, 0u), max(0u, 0u)))) + 0u, (_GLF_IDENTITY((_GLF_IDENTITY(max(0u, 0u), min(max(0u, 0u), max(0u, 0u)))) + 0u, ((_GLF_IDENTITY(max(0u, 0u), min(max(0u, 0u), max(0u, 0u)))) + 0u) - 0u)) >> 0u)), max(0u, 0u), _GLF_IDENTITY(max(0u, 0u), (max(0u, 0u)) | (_GLF_IDENTITY(max(0u, 0u), (max(0u, 0u)) * 1u))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(181578u, 35769u, 71465u)[1]) : max(_GLF_IDENTITY(0u, (0u) / 1u), 0u)))))))), 0u)))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u)), (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 0u))), 0u)), uint(uint(0u))), uint(uvec2(0u, 0u))), 0u))) + 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) | (0u)))), _GLF_IDENTITY(uint(uvec2(0u, 0u)), clamp(uint(uvec2(0u, 0u)), uint(_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) ^ uvec2(0u, _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(num_workgroup)))))), uint(uvec2(0u, 0u))))), 0u)), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(min(subgroup_local_id, bitfieldExtract(63933u, -84779, 27014))) : 0u))))), 0u)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u))), clamp((_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(_GLF_IDENTITY(0u, max(0u, 0u)), 0u))), 0u))), (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) * 1u), _GLF_IDENTITY(clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u), ~ (~ (clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u)))))))), ~ (~ ((_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u)))))) + 0u)))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u)), 0u ^ (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u)))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u)), (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u))) + 0u)))))) ^ 0u)), uint(0u)))), uint(_GLF_ONE(1.0, injectionSwitch.y)))))) | (workgroup_base + _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, ~ (~ (subgroup_base)))) | (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)))), subgroup_base)))) + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(2914.9762))) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), true, false, false)), false || (bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), true, false, false)))))) || (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, true && (false))))), true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))))))), bool(bvec4(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))), true, true, true)))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), bool(bvec3(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false, true))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! _GLF_IDENTITY((_GLF_DEAD(false)), ! (_GLF_IDENTITY(! ((_GLF_DEAD(false))), bool(bvec4(! ((_GLF_DEAD(false))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))), (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))))))))) && true)))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), (bool(bvec2(false, false))) && true))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec2(_GLF_IDENTITY(false, false || (false)), true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | _GLF_IDENTITY((1), min((1), (1))), (_GLF_IDENTITY((1) | (1), _GLF_IDENTITY(clamp((1) | (1), _GLF_IDENTITY(_GLF_IDENTITY((1) | (1), ((1) | (1)) * 1), min((1) | (1), (1) | (1))), (1) | (1)), 0 + (_GLF_IDENTITY(clamp((1) | (1), _GLF_IDENTITY(_GLF_IDENTITY((1) | (1), (_GLF_IDENTITY((1), min(_GLF_IDENTITY((1), ((1)) * 1), (1))) | (1)) * 1), min((1) | (1), (1) | (1))), (1) | (1)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? clamp((1) | (1), _GLF_IDENTITY(_GLF_IDENTITY((1) | (1), ((1) | (1)) * 1), min((1) | (1), (1) | (1))), (1) | (1)) : _GLF_FUZZED(13307))))))) + 0)), _GLF_IDENTITY(1, (1) * 1)))) | (0 | 0))) % subgroup_size);
 atomicStore(buf[_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))], uint(1), _GLF_IDENTITY(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-291))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-291))), (_GLF_IDENTITY(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-291))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-291))), ~ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-291))))))))) << 0), _GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-291))), _GLF_IDENTITY(_GLF_IDENTITY(4, int(int(4))), (true ? 4 : _GLF_FUZZED(-291))))), 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), bool(bvec2(! (! ((injectionSwitch.x > injectionSwitch.y))), false)))))) || false)))), false)))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u)))], uint(2), 4, 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
