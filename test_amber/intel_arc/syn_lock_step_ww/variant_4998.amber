#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_13_1_1_13_2_1_12num_workgroupsubgroup_sizeworkgroup_id;
 uvec4 GLF_merged2_0_2_53_2_2_53GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idGLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size;
 uvec2 GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size;
 GLF_merged2_0_2_53_2_2_53GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idGLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.zw = GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size;
 uvec2 GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id;
 GLF_merged2_0_2_53_2_2_53GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idGLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.xy = GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id;
 uvec3 GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gid;
 uvec2 GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged2_0_2_53_2_2_53GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idGLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.xy.x = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged3_0_1_13_1_1_13_2_1_12num_workgroupsubgroup_sizeworkgroup_id.y = subgroup_size;
  }
 GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gid.y = GLF_merged3_0_1_13_1_1_13_2_1_12num_workgroupsubgroup_sizeworkgroup_id.y;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged2_0_2_53_2_2_53GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idGLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.xy.y = subgroup_local_id;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged3_0_1_13_1_1_13_2_1_12num_workgroupsubgroup_sizeworkgroup_id.x = num_workgroup;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.y = GLF_merged3_0_1_13_1_1_13_2_1_12num_workgroupsubgroup_sizeworkgroup_id.x;
      }
     else
      {
      }
    }
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged2_0_2_53_2_2_53GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idGLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.zw.y = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged3_0_1_13_1_1_13_2_1_12num_workgroupsubgroup_sizeworkgroup_id.z = workgroup_id;
 uint workgroup_base = GLF_merged2_0_2_53_2_2_53GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idGLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.zw.y * GLF_merged3_0_1_13_1_1_13_2_1_12num_workgroupsubgroup_sizeworkgroup_id.z;
 do
  {
   do
    {
     do
      {
       GLF_merged2_0_2_53_2_2_53GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idGLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.zw.x = workgroup_base;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))));
 uint subgroup_base = GLF_merged2_0_2_53_2_2_53GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idGLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.xy.x * GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gid.y;
 GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gid.x = subgroup_base;
 uint virtual_gid = GLF_merged2_0_2_53_2_2_53GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idGLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.zw.x + GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gid.x + GLF_merged2_0_2_53_2_2_53GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idGLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.xy.y;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gid.z = virtual_gid;
  }
 uint next_virtual_gid = GLF_merged2_0_2_53_2_2_53GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idGLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.zw.x + GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gid.x + ((GLF_merged2_0_2_53_2_2_53GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_idGLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.xy.y + 1) % GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gid.y);
 GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.x = next_virtual_gid;
 for(int _injected_loop_counter = (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(94740))) << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
  {
   atomicStore(buf[GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gid.z], uint(1), 4, 64, 4);
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   atomicStore(buf[GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.x], uint(2), 4, 64, 4);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
