#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(subgroup_local_id + 1 < subgroup_size)
  {
   switch(_GLF_SWITCH(_GLF_IDENTITY(((- 72007) & 0), int(ivec4(_GLF_IDENTITY(((- 72007) & 0), min(((- 72007) & 0), ((- 72007) & 0))), 0, 1, 1)))))
    {
     case 54:
     do
      {
       while((false && false))
        {
         switch(_GLF_SWITCH((-24271 & (1 ^ 1))))
          {
           case 72:
           uvec2 _GLF_SWITCH_1_0v;
           case 0:
           if((vec4(-8.7, 6.3, 346.177, -60.63) != vec4(189.721, 2.7, 8.8, -1.5)))
            {
             bvec3(true, true, false);
            }
           else
            {
             (+ -86837);
             mat3x2(-94.82, 45.72, 686.535, 3116.0879, -6048.6592, 184.991);
             (-75393 & ivec3(-48718, -74985, 12046));
             ;
             mat2x3(-906.016, 1.1, 42.56, -8.0, -93.45, 312.311);
             ;
             vec2 _GLF_SWITCH_0_0v, _GLF_SWITCH_0_1v;
             mat4(mat3(-87.36, 804.117, 34.29, -98.58, 310.517, 8.1, 9793.2062, -7.8, 701.830));
            }
           case 5:
           case 40:
           case 29:
           for(float _GLF_SWITCH_0_2v; (87049 < 67357); vec4(injectionSwitch, injectionSwitch))
            {
             bvec4 _GLF_SWITCH_0_3v, _GLF_SWITCH_0_4v, _GLF_SWITCH_0_5v[79];
             (vec4(-13.56, -34.36, 3.3, 2.0) + vec4(-6654.7245, -75.77, -49.84, 8452.7850));
             mat2(742.070, 788.709, -25.30, 176.798);
            }
           case 93:
           mat2x4(-2962.7779, -4.3, -4.6, -53.96, -9.2, 2597.9355, -8.7, -739.725);
           case 2:
           for(           ivec2(48155, 52630);
 false; (any(bvec3(true, false, false)) ? mat3(70.82, -0.0, 6.1, -2.3, -206.910, 8.3, -2413.6440, 7.1, 0.8) : mat3(-1.6, -448.304, -9747.7669, -78.21, -1.8, -374.999, 38.49, -89.22, -995.324)))
            {
             uvec3 _GLF_SWITCH_0_6v, _GLF_SWITCH_0_7v[68], _GLF_SWITCH_0_8v;
             mat2 _GLF_SWITCH_0_9v, _GLF_SWITCH_0_10v, _GLF_SWITCH_0_11v;
             ;
             true;
             vec3 _GLF_SWITCH_0_12v, _GLF_SWITCH_0_13v, _GLF_SWITCH_0_14v;
             mat4x2(2.0, -1.2, -5296.6240, -811.868, 214.716, -32.73, -19.43, 9.5);
             ivec3(71963, 21298, -33518);
             uvec4 _GLF_SWITCH_0_15v;
             bvec4(true, false, true, false);
            }
           case 58:
           case 86:
           ;
           break;
           default:
           1;
          }
        }
       bvec4(false, true, true, false);
       ((83.16 - mat2x3(-71.46, 1.8, 6169.6239, 1849.4396, 7778.7407, 84.98)) - fract(-666.362));
       mod(vec3(148.572, -5427.7582, 5.0), mix(vec3(-5.2, 7.0, 4.6), vec3(-22.03, -313.061, 23.33), 314.781));
       for(       vec4(-7.8, -323.817, -618.888, -91.56);
 (76750 < -11038); (mat4(30.70, -8907.6639, 4.6, 8947.9104, -11.27, -3.6, 0.5, -855.687, 6456.1672, -9.1, 8.0, 0.0, 9978.7198, -6518.5893, 3874.9250, 209.201) * mat2x4(36.88, 3318.6351, -5.6, 29.61, 176.567, 46.92, -36.95, -35.97)))
        {
         for(         (ivec2(-50479, 66519) << ivec2(-6981, -21687));
 true; (mat4x2(80.76, 356.927, -74.95, 7841.8786, 78.91, 3.3, 62.12, -64.19) - mat4x2(-47.66, -766.644, -2.8, -8225.8406, 307.726, -3.8, -3.3, -1.1)))
          {
           -89182;
           log(radians(229.878));
           bvec3(true, true, true);
           mat4 _GLF_SWITCH_0_16v, _GLF_SWITCH_0_17v;
           injectionSwitch;
           mat4 _GLF_SWITCH_0_18v;
           bvec3 _GLF_SWITCH_0_19v, _GLF_SWITCH_0_20v;
          }
         (bvec3(false, true, false));
         float _GLF_SWITCH_0_21v;
         ;
         mat3(7796.6620, 48.69, -3.9, -287.851, -3690.4745, 1745.5898, -869.326, 4.8, 5.1);
         do
          {
           bvec4(true, true, false, true);
           ;
           ivec3 _GLF_SWITCH_0_22v[12], _GLF_SWITCH_0_23v, _GLF_SWITCH_0_24v[65];
          }
         while(true);
         mat3 _GLF_SWITCH_0_25v, _GLF_SWITCH_0_26v, _GLF_SWITCH_0_27v;
        }
       uint _GLF_SWITCH_0_28v;
       mat3x4 _GLF_SWITCH_0_29v;
       while(false)
        {
         mat3x2(mat3x4(6436.8241, 8.4, 5372.4246, 761.881, -83.86, 5.2, -36.88, -41.21, -23.56, -6.9, -476.567, 9.2));
         true;
        }
       if((ivec2(-53022, 6267) != ivec2(13526, 45663)))
        {
        }
       else
        {
        }
      }
     while((mat2(-117.589, -27.41, -4.4, -0.7) == mat2(mat4x3(-798.425, 6.2, -2.8, 8494.6305, 7.3, 3157.0751, 9607.8098, 5984.1201, 492.829, -4.6, -797.670, 392.233))));
     case 0:
     case 11:
     case 25:
     case 22:
     case 19:
     case 57:
     case 6:
     atomicStore(checker[virtual_gid], read, 4, 64, 4);
     case 95:
     case 45:
     case 66:
     subgroupAll(false);
     break;
     case 65:
     uvec3 _GLF_SWITCH_0_30v;
     case 42:
     bvec3(true, false, false);
     default:
     1;
    }
  }
 else
  {
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
   subgroupAll(true);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
