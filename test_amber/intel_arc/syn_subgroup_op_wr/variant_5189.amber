#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_WorkGroupSize, min(_GLF_IDENTITY(gl_WorkGroupSize, (true ? gl_WorkGroupSize : _GLF_FUZZED(uvec3(130882u, 72693u, 126577u)))), gl_WorkGroupSize)))), clamp(uvec3(uvec3(_GLF_IDENTITY(gl_WorkGroupSize, min(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)))))), uvec3(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (true ? _GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)) : _GLF_FUZZED(min(uvec3(152752u, 94581u, 181694u), (uvec3(77315u, 120873u, 114890u) << uvec3(86795u, 179497u, 152464u)))))), (uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) >> (_GLF_IDENTITY(0u, (0u) + 0u) << _GLF_IDENTITY(uint(2u), uint(2u))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1u) >> (_GLF_IDENTITY(0u, (0u) + 0u) << _GLF_IDENTITY(uint(_GLF_IDENTITY(2u, 1u * (_GLF_IDENTITY(2u, max(2u, 2u))))), uint(2u))) : _GLF_FUZZED(subgroup_id)))), 1u, 1u) & uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, ~ (~ (1u))))))), _GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uint(1u)), clamp(uint(_GLF_IDENTITY(uint(1u), (uint(1u)) + 0u)), uint(uint(1u)), uint(uint(1u))))) * _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) >> _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u)))), min(_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) >> 0u)), _GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) >> 0u)))))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), (_GLF_IDENTITY(~ (~ (1u)), (true ? ~ (~ (1u)) : _GLF_FUZZED(57725u)))) >> 0u))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1u, (1u ^ 1u) ^ (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(num_workgroup))))))), (~ (~ (1u))) >> 0u))), (~ (_GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) >> 0u), clamp(_GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) >> 0u), _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) >> 0u), _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) >> 0u)))))) + 0u))), max(uint(uint(_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, _GLF_IDENTITY(~ _GLF_IDENTITY((~ (1u)), (_GLF_IDENTITY((~ (1u)), min((~ (1u)), _GLF_IDENTITY((~ (1u)), max((~ (1u)), (~ (1u))))))) / 1u), (~ (~ (1u))) >> 0u))), (~ (_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) >> 0u)))) + 0u))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) >> 0u))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) >> 0u)), uint(uint(_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) >> 0u))))))) + 0u))), (false ? _GLF_FUZZED(172385u) : uint(uint(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, 1u * (_GLF_IDENTITY(1u, 0u + (1u)))), _GLF_IDENTITY(~ (~ (1u)), _GLF_IDENTITY((~ (~ (1u))) >> 0u, ((~ (~ (1u))) >> 0u) << 0u)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) >> 0u)), min(_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) >> 0u)), _GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) >> 0u)))))) + 0u)))))))))) + (_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(1u), uint(1u))), 0u + ((0u >> _GLF_IDENTITY(uint(1u), uint(1u))))) | 0u)))), ((_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, ~ (~ _GLF_IDENTITY((1u), min(_GLF_IDENTITY((1u), (_GLF_IDENTITY((1u), ((1u)) | ((1u)))) | ((1u))), (1u))))))))), _GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uint(1u)), clamp(uint(uint(1u)), uint(uint(1u)), _GLF_IDENTITY(uint(uint(1u)), (_GLF_IDENTITY(uint(uint(1u)), _GLF_IDENTITY(uint(uvec2(uint(uint(1u)), 1u)), (uint(uvec2(uint(uint(1u)), 1u))) | (uint(uvec2(uint(uint(1u)), 1u)))))) | (uint(uint(1u))))))) * (~ (_GLF_IDENTITY(1u, ~ _GLF_IDENTITY((~ (1u)), (_GLF_IDENTITY((~ (_GLF_IDENTITY(1u, 0u ^ (1u)))), uint(_GLF_IDENTITY(uvec3((~ _GLF_IDENTITY((1u), _GLF_IDENTITY(uint(uvec2((1u), 0u)), (uint(uvec2((1u), 0u))) / 1u))), 0u, 0u), (_GLF_IDENTITY(false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(40097u, (true ? _GLF_IDENTITY(40097u, (_GLF_IDENTITY(40097u, min(40097u, 40097u))) ^ 0u) : _GLF_FUZZED(subgroup_size))), _GLF_IDENTITY(39292u, (_GLF_IDENTITY(39292u, 1u * (39292u))) * 1u), 62471u)) : uvec3((~ (1u)), 0u, 0u), (false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(40097u, (true ? _GLF_IDENTITY(40097u, (_GLF_IDENTITY(40097u, min(40097u, 40097u))) ^ 0u) : _GLF_FUZZED(subgroup_size))), _GLF_IDENTITY(39292u, (_GLF_IDENTITY(39292u, 1u * (39292u))) * 1u), 62471u)) : uvec3((~ (1u)), 0u, 0u)) >> uvec3(0u, 0u, 0u))))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, ~ (~ _GLF_IDENTITY((1u), min(_GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) / ((uint(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))))), (_GLF_IDENTITY((1u), ((1u)) | ((_GLF_IDENTITY(1u, (1u) >> 0u))))) | ((1u))), _GLF_IDENTITY((1u), uint(uint((1u)))))))))))), _GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1u), (uint(1u)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), clamp(uint(uint(1u)), uint(_GLF_IDENTITY(uint(1u), (uint(1u)) / 1u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(uint(1u)), (false ? _GLF_FUZZED(subgroup_local_id) : uint(uint(1u)))), (_GLF_IDENTITY(uint(uint(1u)), uint(uvec2(uint(uint(1u)), 1u)))) | (uint(uint(1u))))))) * (_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, ~ _GLF_IDENTITY((~ (1u)), (_GLF_IDENTITY(_GLF_IDENTITY((~ (1u)), ((~ (1u))) ^ 0u), uint(_GLF_IDENTITY(uvec3((~ (1u)), 0u, 0u), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bvec2(bool(bvec3(false, false, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) ? _GLF_FUZZED(uvec3(40097u, 39292u, 62471u)) : uvec3((~ (1u)), 0u, 0u)))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), (~ (_GLF_IDENTITY(1u, ~ _GLF_IDENTITY((~ (1u)), (_GLF_IDENTITY(_GLF_IDENTITY((~ (1u)), ((~ (1u))) ^ 0u), uint(_GLF_IDENTITY(uvec3((~ (1u)), 0u, 0u), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bvec2(bool(bvec3(false, false, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bvec2(bool(bvec3(false, false, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bvec2(bool(bvec3(false, false, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) ? _GLF_FUZZED(uvec3(40097u, 39292u, 62471u)) : uvec3((~ (1u)), 0u, 0u)))))) / uint(_GLF_ONE(1.0, injectionSwitch.y)))))) / 1u)))) + 0u))) | ((_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, ~ (~ (1u))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uint(1u)), clamp(_GLF_IDENTITY(uint(uint(1u)), (uint(uint(1u))) | (uint(uint(1u)))), uint(uint(1u)), uint(uint(1u))))), ~ (~ (_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uint(1u)), clamp(uint(uint(1u)), uint(uint(1u)), uint(uint(1u)))))))) * _GLF_IDENTITY((~ (_GLF_IDENTITY(1u, ~ (~ (1u))))), ((~ (_GLF_IDENTITY(1u, ~ (~ (1u)))))) >> 0u), min(_GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY(uint(uint(1u)), clamp(uint(uint(1u)), uint(_GLF_IDENTITY(uint(1u), (_GLF_IDENTITY(uint(1u), 0u ^ (uint(1u)))) | (uint(1u)))), uint(uint(1u)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(uint(1u)), clamp(uint(uint(1u)), uint(_GLF_IDENTITY(uint(1u), (_GLF_IDENTITY(uint(1u), 0u ^ (uint(1u)))) | (uint(1u)))), uint(uint(1u))))), (uint(_GLF_IDENTITY(uint(uint(1u)), clamp(uint(uint(1u)), uint(_GLF_IDENTITY(uint(1u), (_GLF_IDENTITY(uint(1u), 0u ^ (uint(1u)))) | (uint(1u)))), uint(uint(1u)))))) << 0u)), clamp(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(uint(1u)), clamp(uint(uint(1u)), uint(_GLF_IDENTITY(uint(1u), (_GLF_IDENTITY(uint(1u), 0u ^ (uint(1u)))) | (uint(1u)))), uint(uint(1u))))), (uint(_GLF_IDENTITY(uint(uint(1u)), clamp(uint(uint(1u)), uint(_GLF_IDENTITY(uint(1u), (_GLF_IDENTITY(uint(1u), 0u ^ (uint(1u)))) | (uint(1u)))), uint(uint(1u)))))) << 0u)), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(uint(1u)), clamp(uint(uint(1u)), uint(_GLF_IDENTITY(uint(1u), (_GLF_IDENTITY(uint(1u), 0u ^ (uint(1u)))) | (uint(1u)))), uint(uint(1u))))), (uint(_GLF_IDENTITY(uint(uint(1u)), clamp(uint(uint(1u)), uint(_GLF_IDENTITY(uint(1u), (_GLF_IDENTITY(uint(1u), 0u ^ (uint(1u)))) | (uint(1u)))), uint(uint(1u)))))) << 0u)), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(uint(1u)), clamp(uint(uint(1u)), uint(_GLF_IDENTITY(uint(1u), (_GLF_IDENTITY(uint(1u), 0u ^ (uint(1u)))) | (uint(1u)))), uint(uint(1u))))), (uint(_GLF_IDENTITY(uint(uint(1u)), clamp(uint(uint(1u)), uint(_GLF_IDENTITY(uint(1u), (_GLF_IDENTITY(uint(1u), 0u ^ (uint(1u)))) | (uint(1u)))), uint(uint(1u)))))) << 0u)))))) * (~ (_GLF_IDENTITY(1u, ~ (~ (1u))))), _GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(1u), (false ? _GLF_FUZZED((~ subgroup_size)) : _GLF_IDENTITY(uint(1u), (uint(1u)) << 0u)))), clamp(uint(uint(_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, max(1u, 1u)), _GLF_IDENTITY(1u, (1u) / 1u))))), uint(uint(1u)), uint(uint(1u))))) * (~ (_GLF_IDENTITY(1u, ~ (~ (1u)))))))))))), 1u, 1u)) * (gl_WorkGroupSize)), min(_GLF_IDENTITY(gl_WorkGroupSize, clamp(_GLF_IDENTITY(gl_WorkGroupSize, min(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) / uvec3(1u, 1u, 1u)))), gl_WorkGroupSize, gl_WorkGroupSize)), _GLF_IDENTITY(gl_WorkGroupSize, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (gl_WorkGroupSize), clamp(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize), _GLF_IDENTITY(~ (gl_WorkGroupSize), max(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize))))), (_GLF_IDENTITY(~ (gl_WorkGroupSize), clamp(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize), _GLF_IDENTITY(~ (gl_WorkGroupSize), max(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize)))))) - uvec3(0u, 0u, 0u)))))))), uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(159995u, 4484u, 100978u)) : gl_WorkGroupSize)), min(gl_WorkGroupSize, gl_WorkGroupSize))), uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(159995u, 4484u, 100978u)) : gl_WorkGroupSize)), min(gl_WorkGroupSize, gl_WorkGroupSize))), (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(159995u, 4484u, 100978u)) : gl_WorkGroupSize)), min(gl_WorkGroupSize, gl_WorkGroupSize)))) | (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(159995u, 4484u, 100978u)) : gl_WorkGroupSize)), min(gl_WorkGroupSize, gl_WorkGroupSize))), (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(159995u, 4484u, 100978u)) : gl_WorkGroupSize)), min(gl_WorkGroupSize, gl_WorkGroupSize)))) << uvec3(0u, 0u, 0u)))))))))).x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x));
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(min(workgroup_id, workgroup_id), _GLF_IDENTITY((true ? min(workgroup_id, workgroup_id) : _GLF_FUZZED(bitfieldReverse(subgroup_size))), ((true ? min(workgroup_id, workgroup_id) : _GLF_FUZZED(bitfieldReverse(subgroup_size)))) | ((true ? min(workgroup_id, workgroup_id) : _GLF_FUZZED(bitfieldReverse(subgroup_size)))))));
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_id)) * subgroup_size, max(workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_id)) * subgroup_size, _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_id)) * subgroup_size, (workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_id)) * subgroup_size) + 0u))) + ((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec2(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), 0u))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec2(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec2(subgroup_size, 1u), min(uvec2(subgroup_size, 1u), uvec2(subgroup_size, 1u))))))), 0u))), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, uint(uvec2(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), 0u))), 1u, 0u, 1u), _GLF_IDENTITY(min(uvec4(_GLF_IDENTITY(subgroup_size, uint(uvec2(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), 0u))), 1u, 0u, 1u), uvec4(_GLF_IDENTITY(subgroup_size, uint(uvec2(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), 0u))), 1u, 0u, 1u)), (_GLF_IDENTITY(min(uvec4(_GLF_IDENTITY(subgroup_size, uint(uvec2(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), 0u))), 1u, 0u, 1u), uvec4(_GLF_IDENTITY(subgroup_size, uint(uvec2(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), 0u))), 1u, 0u, 1u)), uvec4(0u, 0u, 0u, 0u) ^ (min(uvec4(_GLF_IDENTITY(subgroup_size, uint(uvec2(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), 0u))), 1u, 0u, 1u), uvec4(_GLF_IDENTITY(subgroup_size, uint(uvec2(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), 0u))), 1u, 0u, 1u))))) ^ (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(8u), uvec4(8u)))))))))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) + 0u)], _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) | (0 >> _GLF_IDENTITY(int(4), int(4))))), _GLF_IDENTITY(max(uint(_GLF_IDENTITY(1, (1) | (0 >> _GLF_IDENTITY(int(4), int(4))))), uint(_GLF_IDENTITY(1, (1) | (0 >> _GLF_IDENTITY(int(4), int(4)))))), (_GLF_IDENTITY(max(uint(_GLF_IDENTITY(1, (1) | (0 >> _GLF_IDENTITY(int(4), int(4))))), uint(_GLF_IDENTITY(1, (1) | (0 >> _GLF_IDENTITY(int(4), int(4)))))), ~ (_GLF_IDENTITY(~ (max(uint(_GLF_IDENTITY(1, (1) | (0 >> _GLF_IDENTITY(int(4), int(4))))), uint(_GLF_IDENTITY(1, (1) | (0 >> _GLF_IDENTITY(int(4), int(4))))))), (~ (max(uint(_GLF_IDENTITY(1, (1) | (0 >> _GLF_IDENTITY(int(4), int(4))))), uint(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, min(0, 0)))) >> _GLF_IDENTITY(int(4), int(4)))))))) * 1u)))) / 1u)), (uint(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, 0 | (0)), 0)) >> _GLF_IDENTITY(int(4), int(4)))))) ^ _GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((0u), min(_GLF_IDENTITY((0u), uint(uvec4((0u), 1u, 0u, 1u))), (0u)))), uint(uvec4((~ _GLF_IDENTITY((0u), min(_GLF_IDENTITY((0u), uint(uvec4((0u), 1u, 0u, 1u))), (0u)))), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u, 1u))))), 4, _GLF_IDENTITY(64, ~ (~ (_GLF_IDENTITY(64, ~ (_GLF_IDENTITY(~ (64), (~ (64)) | (~ (64)))))))), 4);
  }
 uint read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), (0 & -42900) + (_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), min(_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : _GLF_IDENTITY(4, (4) | 0))), (_GLF_IDENTITY(4, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, true))))) ? _GLF_IDENTITY(_GLF_FUZZED(-91747), (_GLF_FUZZED(-91747)) >> 0) : 4))) << 0), _GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)))))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, _GLF_IDENTITY((4), max(_GLF_IDENTITY((4), ((4)) / 1), (4))) | (_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), (0 & -42900) + (_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), min(_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), (_GLF_IDENTITY(4, _GLF_IDENTITY((false ? _GLF_FUZZED(-91747) : 4), (_GLF_IDENTITY((false ? _GLF_FUZZED(-91747) : 4), 0 ^ ((false ? _GLF_FUZZED(-91747) : 4)))) >> 0))) << 0), _GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4))))))))), (~ (_GLF_IDENTITY(4, _GLF_IDENTITY((4), max(_GLF_IDENTITY((4), ((4)) / 1), (4))) | (_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), (0 & -42900) + (_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), min(_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), (_GLF_IDENTITY(4, _GLF_IDENTITY((false ? _GLF_FUZZED(-91747) : 4), (_GLF_IDENTITY((false ? _GLF_FUZZED(-91747) : 4), 0 ^ ((false ? _GLF_FUZZED(-91747) : 4)))) >> 0))) << 0), _GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)))))))))) | (~ (_GLF_IDENTITY(4, _GLF_IDENTITY((4), max(_GLF_IDENTITY((4), ((4)) / 1), (4))) | (_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), (0 & -42900) + (_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), min(_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), (_GLF_IDENTITY(4, _GLF_IDENTITY((false ? _GLF_FUZZED(-91747) : 4), (_GLF_IDENTITY((false ? _GLF_FUZZED(-91747) : 4), 0 ^ ((false ? _GLF_FUZZED(-91747) : 4)))) >> 0))) << 0), _GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, _GLF_IDENTITY((4), max(_GLF_IDENTITY((4), ((4)) / 1), (4))) | (_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), (0 & -42900) + (_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), min(_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), (_GLF_IDENTITY(4, _GLF_IDENTITY((false ? _GLF_FUZZED(-91747) : 4), (_GLF_IDENTITY((false ? _GLF_FUZZED(-91747) : 4), 0 ^ ((false ? _GLF_FUZZED(-91747) : 4)))) >> 0))) << 0), _GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4))))))))), (~ (_GLF_IDENTITY(4, _GLF_IDENTITY((4), max(_GLF_IDENTITY((4), ((4)) / 1), (4))) | (_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), (0 & -42900) + (_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), min(_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), (_GLF_IDENTITY(4, _GLF_IDENTITY((false ? _GLF_FUZZED(-91747) : 4), (_GLF_IDENTITY((false ? _GLF_FUZZED(-91747) : 4), 0 ^ ((false ? _GLF_FUZZED(-91747) : 4)))) >> 0))) << 0), _GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)))))))))) | (~ (_GLF_IDENTITY(4, _GLF_IDENTITY((4), max(_GLF_IDENTITY((4), ((4)) / 1), (4))) | (_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), (0 & -42900) + (_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), min(_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), (_GLF_IDENTITY(4, _GLF_IDENTITY((false ? _GLF_FUZZED(-91747) : 4), (_GLF_IDENTITY((false ? _GLF_FUZZED(-91747) : 4), 0 ^ ((false ? _GLF_FUZZED(-91747) : 4)))) >> 0))) << 0), _GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, _GLF_IDENTITY((4), max(_GLF_IDENTITY((4), ((4)) / 1), (4))) | (_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), (0 & -42900) + (_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), min(_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), (_GLF_IDENTITY(4, _GLF_IDENTITY((false ? _GLF_FUZZED(-91747) : 4), (_GLF_IDENTITY((false ? _GLF_FUZZED(-91747) : 4), 0 ^ ((false ? _GLF_FUZZED(-91747) : 4)))) >> 0))) << 0), _GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4))))))))), (~ (_GLF_IDENTITY(4, _GLF_IDENTITY((4), max(_GLF_IDENTITY((4), ((4)) / 1), (4))) | (_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), (0 & -42900) + (_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), min(_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), (_GLF_IDENTITY(4, _GLF_IDENTITY((false ? _GLF_FUZZED(-91747) : 4), (_GLF_IDENTITY((false ? _GLF_FUZZED(-91747) : 4), 0 ^ ((false ? _GLF_FUZZED(-91747) : 4)))) >> 0))) << 0), _GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)))))))))) | (~ (_GLF_IDENTITY(4, _GLF_IDENTITY((4), max(_GLF_IDENTITY((4), ((4)) / 1), (4))) | (_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), (0 & -42900) + (_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), min(_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), (_GLF_IDENTITY(4, _GLF_IDENTITY((false ? _GLF_FUZZED(-91747) : 4), (_GLF_IDENTITY((false ? _GLF_FUZZED(-91747) : 4), 0 ^ ((false ? _GLF_FUZZED(-91747) : 4)))) >> 0))) << 0), _GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4))))))))))), (false ? _GLF_FUZZED(30199) : _GLF_IDENTITY(~ (_GLF_IDENTITY(4, _GLF_IDENTITY((4), max(_GLF_IDENTITY((4), ((4)) / 1), (4))) | (_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), (0 & -42900) + (_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), min(_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), (_GLF_IDENTITY(4, _GLF_IDENTITY((false ? _GLF_FUZZED(-91747) : 4), (_GLF_IDENTITY((false ? _GLF_FUZZED(-91747) : 4), 0 ^ ((false ? _GLF_FUZZED(-91747) : 4)))) >> 0))) << 0), _GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4))))))))), (~ (_GLF_IDENTITY(4, _GLF_IDENTITY((4), max(_GLF_IDENTITY((4), ((4)) / 1), (4))) | (_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), (0 & -42900) + (_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), min(_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), (_GLF_IDENTITY(4, _GLF_IDENTITY((false ? _GLF_FUZZED(-91747) : 4), (_GLF_IDENTITY((false ? _GLF_FUZZED(-91747) : 4), 0 ^ ((false ? _GLF_FUZZED(-91747) : 4)))) >> 0))) << 0), _GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)))))))))) | (~ (_GLF_IDENTITY(4, _GLF_IDENTITY((4), max(_GLF_IDENTITY((4), ((4)) / 1), (4))) | (_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), (0 & -42900) + (_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), min(_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)), (_GLF_IDENTITY(4, _GLF_IDENTITY((false ? _GLF_FUZZED(-91747) : 4), (_GLF_IDENTITY((false ? _GLF_FUZZED(-91747) : 4), 0 ^ ((false ? _GLF_FUZZED(-91747) : 4)))) >> 0))) << 0), _GLF_IDENTITY(4, (false ? _GLF_FUZZED(-91747) : 4)))))))))))))) ^ 0)) | 0))), 4, 4)), 64, 0);
 do
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(max(1, 1), (max(1, 1)) - 0)), (_GLF_IDENTITY(1, _GLF_IDENTITY(max(1, 1), (max(1, 1)) - 0))) ^ 0) < subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1 < subgroup_size), true && ((subgroup_local_id + 1 < subgroup_size))), true && (_GLF_IDENTITY((subgroup_local_id + 1 < subgroup_size), true && ((subgroup_local_id + 1 < subgroup_size))))), bool(bvec4(_GLF_IDENTITY((subgroup_local_id + 1 < subgroup_size), _GLF_IDENTITY(true, bool(bvec2(true, true))) && (_GLF_IDENTITY((subgroup_local_id + 1 < subgroup_size), true && ((subgroup_local_id + 1 < subgroup_size))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))) || _GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, true, false)), bool(bvec2(_GLF_IDENTITY(bool(bvec4(false, false, true, false)), (_GLF_IDENTITY(bool(bvec4(false, false, true, false)), false || (bool(bvec4(false, false, true, false))))) && _GLF_IDENTITY(true, bool(bvec3(true, false, true)))), false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, true, false)), bool(bvec2(_GLF_IDENTITY(bool(bvec4(false, false, true, false)), (bool(bvec4(false, false, true, false))) && true), false))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(bvec4(false, false, true, false)), bool(bvec2(_GLF_IDENTITY(bool(bvec4(false, false, true, false)), (bool(bvec4(false, false, true, false))) && true), false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(bool(bvec3(_GLF_IDENTITY(bool(bvec4(false, false, true, false)), bool(bvec2(_GLF_IDENTITY(bool(bvec4(false, false, true, false)), (bool(bvec4(false, false, true, false))) && true), false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(false, bool(bvec2(false, true))), true, false)), bool(bvec2(_GLF_IDENTITY(bool(bvec4(false, false, true, false)), (bool(bvec4(false, false, true, false))) && true), false))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(bvec4(false, false, true, false)), bool(bvec2(_GLF_IDENTITY(bool(bvec4(false, false, true, false)), (bool(bvec4(false, false, true, false))) && true), false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(bvec4(false, false, true, false)), bool(bvec2(_GLF_IDENTITY(bool(bvec4(false, false, true, false)), (bool(bvec4(false, false, true, false))) && true), false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(bool(bvec3(_GLF_IDENTITY(bool(bvec4(false, false, true, false)), bool(bvec2(_GLF_IDENTITY(bool(bvec4(false, false, true, false)), (bool(bvec4(false, false, true, false))) && true), false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false), bvec2(bvec2(bvec2(bool(bvec3(_GLF_IDENTITY(bool(bvec4(false, false, true, false)), bool(bvec2(_GLF_IDENTITY(bool(bvec4(false, false, true, false)), (bool(bvec4(false, false, true, false))) && true), false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))))), true))))))))), (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, true, false)), bool(bvec2(_GLF_IDENTITY(bool(bvec4(false, false, true, false)), (bool(bvec4(false, false, true, false))) && true), false))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, true, false)), bool(bvec4(_GLF_IDENTITY(bool(bvec4(false, false, true, false)), bool(bvec3(bool(bvec4(false, false, true, false)), true, true))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(true, true)))) && true)) && true), false, false))), bool(bvec2(_GLF_IDENTITY(bool(bvec4(false, false, true, _GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), (bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(unpackUnorm2x16(workgroup_size)))).x > injectionSwitch.y))))), false, true, false))) && true), false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, true, false)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, true, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))), (! _GLF_IDENTITY((bool(bvec4(false, false, true, false))), ! (! (_GLF_IDENTITY((bool(bvec4(false, false, true, false))), true && ((bool(bvec4(false, false, true, false))))))))) || false))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, true, false)), ! (! (_GLF_IDENTITY(bool(bvec4(false, false, true, false)), (_GLF_IDENTITY(bool(bvec4(false, false, true, false)), ! (! (bool(bvec4(false, false, true, false)))))) && true)))), (bool(bvec4(false, false, true, false))) && true), false))), true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), true && (bool(bool((injectionSwitch.x > injectionSwitch.y)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))))))) || false)))))
          {
           atomicStore(checker[virtual_gid], read, 4, 64, 4);
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).x < injectionSwitch.y)))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true))))))), (bool(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))))) || false)))) || false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).x < injectionSwitch.y))))) && true))
              {
               if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), false || (true && (true)))), false, true, _GLF_IDENTITY(true, bool(bvec3(true, true, false))))), (bool(bvec4(_GLF_IDENTITY(true, true && (true)), false, true, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, ! (! (true))), true, false)))))) || false)), true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))), false, true, true))), true, _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0)))), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x) / 1.0)) + 0.0)) - 0.0), injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), ((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0)))), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x) / 1.0)) + 0.0)) - 0.0), injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) && true))))))) && true), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(true, true)))) || false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, bool(bvec3(true, true, false))))), (bool(bvec4(_GLF_IDENTITY(true, true && (true)), false, _GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY(true, bool(bvec3(true, true, false)))))) || false)), true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, true && (true)), false, true, true))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x) / 1.0)) + 0.0)) - 0.0), injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))) && true), false, false, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)), bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), false)))))))))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     subgroupAll(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), false)))))));
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             else
              {
              }
            }
           else
            {
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               atomicStore(checker[virtual_gid], read, 4, 64, 4);
              }
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))) || (true))), (! _GLF_IDENTITY((_GLF_IDENTITY(true, false || (true))), ! _GLF_IDENTITY((! ((_GLF_IDENTITY(true, false || (true))))), false || ((! ((_GLF_IDENTITY(true, false || (true))))))))) || false)))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, exp(0.0))), 1.0))) < _GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, abs(1.0), 1.0, 1.0))))))))
                  {
                   subgroupAll(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))))), ! (! (! (! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))))))))))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))))), ! (! (! (! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))))))))))))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))))), ! (! (! (! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true)))))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))))), ! (! (! (! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))))))))))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))))), ! (! (! (! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))))))))))))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))))), ! (! (! (! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true)))))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))))), ! (! (! (! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))))))))))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))))), ! (! (! (! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))))))))))))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))))), ! (! (! (! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true)))))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, false), false))))), bool(bvec4(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec3(true, false, true)))))) && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(bvec4(bvec3(true, false, true), false)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(bvec4(bvec3(true, false, true), false))))))) || false))) || false, bool(bvec3((_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec3(true, false, true)))))) || false, false, false)))), false, false, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec4(true, false, _GLF_IDENTITY(false, (false) || false), true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true)))))))))))), false, _GLF_IDENTITY(true, false || (true)), true))));
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
