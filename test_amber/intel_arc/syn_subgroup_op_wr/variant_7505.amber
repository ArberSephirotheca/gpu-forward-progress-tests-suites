#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_11 {
 vec3 _f0;
 int _injected_loop_counter;
} ;

struct _GLF_struct_8 {
 uvec3 _f0;
 vec4 _f1;
 vec2 _f2;
 vec3 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_7 {
 mat2x4 _f0;
} ;

struct _GLF_struct_9 {
 _GLF_struct_7 _f0;
 _GLF_struct_8 _f1;
} ;

struct _GLF_struct_5 {
 mat4x2 _f0;
 ivec2 _f1;
 int _f2;
 bvec3 _f3;
 float _f4;
 uvec2 _f5;
 mat2x4 _f6;
} ;

struct _GLF_struct_4 {
 vec4 _f0;
 int _f1;
 int _f2;
 ivec4 _f3;
} ;

struct _GLF_struct_3 {
 mat3 _f0;
 bool _f1;
 mat4 _f2;
 mat3x4 _f3;
 uvec2 _f4;
 mat2 _f5;
} ;

struct _GLF_struct_6 {
 _GLF_struct_3 _f0;
 uvec4 _f1;
 mat4x3 _f2;
 _GLF_struct_4 _f3;
 _GLF_struct_5 _f4;
} ;

struct _GLF_struct_1 {
 int _f0;
 mat2x3 _f1;
 mat2x4 _f2;
 ivec2 _f3;
 bool _f4;
 mat2 _f5;
} ;

struct _GLF_struct_0 {
 mat3x4 _f0;
 mat2x4 _f1;
 bvec3 _f2;
 vec3 _f3;
 float _f4;
 vec3 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 uvec2 _f1;
 _GLF_struct_1 _f2;
 mat3x2 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_10 {
 _GLF_struct_2 _f0;
 uvec3 _f1;
 uvec4 _f2;
 _GLF_struct_6 _f3;
 _GLF_struct_9 _f4;
 uint workgroup_base;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), int(2)))), (false ? _GLF_FUZZED(abs(-13155)) : ((1 << _GLF_IDENTITY(int(2), int(2)))))) + int(_GLF_ZERO(0.0, injectionSwitch.x))) >> _GLF_IDENTITY(int(2), int(2))) & 1)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), 1 * ((1 << _GLF_IDENTITY(int(2), int(2))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) & 1)), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), 1 * ((1 << _GLF_IDENTITY(int(2), int(2))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) & 1), ! (! (_injected_loop_counter < ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), 1 * ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), (1 << _GLF_IDENTITY(int(2), int(2))) | 0)))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) & 1)))))) && _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true))))))); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY((int(true) & 0), clamp((int(true) & 0), (int(true) & 0), (int(true) & 0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), clamp(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(84475))), int(0))), (false ? _GLF_FUZZED(-85862) : int(0)))))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (-26811 & 0)); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(_GLF_struct_2(_GLF_struct_0(mat3x4(1.0), mat2x4(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(mat2x4(1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, exp(0.0), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, (0.0) / 1.0)))))) : _GLF_FUZZED(-124.778)))), bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true))))), vec3(1.0), 1.0, _GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))), vec3(0.0, 0.0, 0.0) + (_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))), vec3(1.0, 1.0, 1.0) * (vec3(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))))))), mat4x3(1.0)), uvec2(1u), _GLF_struct_1(_GLF_IDENTITY(1, _GLF_IDENTITY((1) + 0, ((1) + 0) | ((1) + 0))), mat2x3(1.0), mat2x4(1.0), ivec2(1), true, mat2(1.0)), mat3x2(1.0), mat4x3(1.0)), uvec3(1u), uvec4(1u), _GLF_struct_6(_GLF_struct_3(_GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(74.06)), float(1.0), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (true ? _GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0))) : _GLF_FUZZED(injectionSwitch))))).x < injectionSwitch.y)))))), mat3(mat3(_GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(74.06)), _GLF_IDENTITY(float(1.0), mix(float(float(1.0)), float(_GLF_FUZZED((false ? 2.0 : -99.18))), bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (true ? _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))) : _GLF_FUZZED(injectionSwitch))))).x < injectionSwitch.y)))))), transpose(transpose(mat3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(74.06)), float(1.0), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (true ? _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))) : _GLF_FUZZED(injectionSwitch))))).x < injectionSwitch.y)))))))))))), true, _GLF_IDENTITY(mat4(1.0), (mat4(1.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), mat3x4(1.0), uvec2(1u), mat2(1.0)), uvec4(1u), mat4x3(1.0), _GLF_struct_4(_GLF_IDENTITY(vec4(1.0), clamp(vec4(1.0), vec4(1.0), vec4(1.0))), 1, 1, _GLF_IDENTITY(_GLF_IDENTITY(ivec4(1), (ivec4(1)) | ivec4(0, 0, 0, 0)), ivec4(0, 0, 0, 0) ^ (ivec4(1)))), _GLF_struct_5(mat4x2(1.0), ivec2(1), 1, _GLF_IDENTITY(bvec3(true), _GLF_IDENTITY(bvec3(bvec4(bvec3(true), _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), vec2(1.0, 1.0) * (injectionSwitch)), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), vec2(1.0, 1.0) * _GLF_IDENTITY((injectionSwitch), vec2(mat2x4((injectionSwitch), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0)))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), vec2(1.0, 1.0) * (injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), vec2(1.0, 1.0) * (injectionSwitch)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), vec2(1.0, 1.0) * (injectionSwitch)))), min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))).x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), min((injectionSwitch) * mat2(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))), (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y, min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))), (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))), (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y, _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))), (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y, 1.0, 1.0, 0.0)), clamp(float(mat2(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))), (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y, 1.0, 1.0, 0.0)), float(mat2(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))), (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y, 1.0, 1.0, 0.0)), float(mat2(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))), (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y, 1.0, 1.0, 0.0))))))))), (injectionSwitch) * mat2(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) * 1.0))))).y)))), bvec3(bvec4(bvec3(bvec4(bvec3(true), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4017.4290), _GLF_FUZZED(2.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y)))), false)))), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(7.6, float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(7.6, clamp(_GLF_IDENTITY(_GLF_IDENTITY(7.6, 1.0 * (7.6)), min(7.6, 7.6)), 7.6, _GLF_IDENTITY(7.6, float(vec2(7.6, 0.0))))), 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), float(_GLF_FUZZED(-1724.8653)), bool(false))), 0.0), transpose(transpose(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(7.6, clamp(_GLF_IDENTITY(7.6, min(7.6, 7.6)), 7.6, 7.6)), (_GLF_IDENTITY(7.6, clamp(_GLF_IDENTITY(7.6, min(7.6, 7.6)), 7.6, 7.6))) / 1.0), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0)))))))), float(_GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) + sin(0.0)) + (1.0), _GLF_IDENTITY(float(float(_GLF_IDENTITY(0.0, (0.0) + sin(0.0)) + (1.0))), 0.0 + (float(float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) + sin(0.0)), max(_GLF_IDENTITY(0.0, (0.0) + sin(0.0)), _GLF_IDENTITY(0.0, (0.0) + sin(0.0)))) + (1.0)))))))), _GLF_IDENTITY(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y)))))))), 1.0)), uvec2(1u), mat2x4(1.0))), _GLF_struct_9(_GLF_struct_7(mat2x4(1.0)), _GLF_struct_8(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, 0u + (1u)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))) - vec2(0.0, 0.0)).y)) ? _GLF_FUZZED(workgroup_size) : 1u)), uint(uvec4(1u, (144006u & (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), 0u, 0u)))), vec4(1.0), vec2(1.0), vec3(1.0), mat2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) + 0.0)))))), workgroup_size * workgroup_id);
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size));
 uint virtual_gid = _GLF_struct_replacement_10.workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id));
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base + subgroup_base, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base + subgroup_base, uint(uvec2(_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base + subgroup_base, (false ? _GLF_FUZZED(workgroup_size) : _GLF_struct_replacement_10.workgroup_base + subgroup_base)), 0u))), _GLF_IDENTITY(clamp(_GLF_struct_replacement_10.workgroup_base + subgroup_base, _GLF_struct_replacement_10.workgroup_base + subgroup_base, _GLF_struct_replacement_10.workgroup_base + subgroup_base), (false ? _GLF_FUZZED(workgroup_size) : clamp(_GLF_struct_replacement_10.workgroup_base + subgroup_base, _GLF_struct_replacement_10.workgroup_base + subgroup_base, _GLF_struct_replacement_10.workgroup_base + subgroup_base)))))) + (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (true ? (_GLF_IDENTITY(subgroup_local_id + 1, 0u + (subgroup_local_id + 1))) % subgroup_size : _GLF_FUZZED(80445u)))) / 1u), min(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (true ? (subgroup_local_id + 1) % subgroup_size : _GLF_FUZZED(80445u)))) / 1u), _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (true ? (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u) : _GLF_FUZZED(80445u)))) / 1u))));
 uint read = 0;
 do
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1) > _GLF_IDENTITY((0 | _GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-1.4, -595.057)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-954.725, -471.784)) : injectionSwitch)))).x)), (int(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(vec3(4.8, -1201.1051, -4708.2700).x) : 0.0)))), 0.0, 0.0)), injectionSwitch.x))) << 0)), clamp((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) / 1) | int(_GLF_ZERO(0.0, injectionSwitch.x))), (0 | int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(float(135761u))), float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(-4.5)), bool(false)))), bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, sqrt(1.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, cos(0.0), 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0, 1.0))))))))))), _GLF_IDENTITY((0 | int(_GLF_ZERO(0.0, injectionSwitch.x))), ((0 | _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)))), int(_GLF_IDENTITY(int(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x))))), (int(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)))))) * int(_GLF_ONE(1.0, injectionSwitch.y))))))) + 0)))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))))));
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(6.6, -6.9)))).x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / (1 & 1))) - 0) != 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           do
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       do
                        {
                         do
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 do
                                  {
                                   if((subgroup_local_id % 2) == 0)
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                      }
                                     else
                                      {
                                       do
                                        {
                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                          {
                                          }
                                         else
                                          {
                                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(5.4)), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))), bool(true)))))))
                                            {
                                            }
                                           else
                                            {
                                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                              {
                                               if(_GLF_WRAPPED_IF_TRUE(true))
                                                {
                                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                                  {
                                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                                    {
                                                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                                                      {
                                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                                        {
                                                        }
                                                       else
                                                        {
                                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                                          {
                                                          }
                                                         else
                                                          {
                                                           subgroupAll(false);
                                                          }
                                                        }
                                                      }
                                                     else
                                                      {
                                                      }
                                                    }
                                                   else
                                                    {
                                                    }
                                                  }
                                                 else
                                                  {
                                                  }
                                                }
                                               else
                                                {
                                                }
                                              }
                                             else
                                              {
                                              }
                                            }
                                          }
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                      }
                                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
                                      {
                                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, true && (_injected_loop_counter < 1))); _injected_loop_counter ++)
                                        {
                                         read = atomicLoad(buf[virtual_gid], 4, 64, 2);
                                        }
                                      }
                                     else
                                      {
                                      }
                                     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false, false))); _injected_loop_counter ++)
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                        {
                                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                          {
                                           if(_GLF_WRAPPED_IF_FALSE(false))
                                            {
                                            }
                                           else
                                            {
                                             if(_GLF_WRAPPED_IF_FALSE(false))
                                              {
                                              }
                                             else
                                              {
                                               if(_GLF_WRAPPED_IF_TRUE(true))
                                                {
                                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                                  {
                                                  }
                                                 else
                                                  {
                                                   do
                                                    {
                                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                                      {
                                                       do
                                                        {
                                                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))) && true), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))
                                                          {
                                                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 0, 0))) > _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, ~ (~ (0)))))); _injected_loop_counter --)
                                                            {
                                                             if(_GLF_WRAPPED_IF_TRUE(true))
                                                              {
                                                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-567.286)), bvec2(true, false))).y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-567.286)), bvec2(true, false))).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-567.286)), bvec2(true, false))).y)) || false)), (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-567.286)), bvec2(true, false))).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-567.286)), bvec2(true, false))).y)) || false))) && true))), false || ((injectionSwitch.x > injectionSwitch.y))), false))))))
                                                                {
                                                                }
                                                               else
                                                                {
                                                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                                                  {
                                                                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                                                    {
                                                                     do
                                                                      {
                                                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                                                        {
                                                                        }
                                                                       else
                                                                        {
                                                                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                                                          {
                                                                           barrier();
                                                                          }
                                                                        }
                                                                      }
                                                                     while(_GLF_WRAPPED_LOOP(false));
                                                                    }
                                                                  }
                                                                 else
                                                                  {
                                                                  }
                                                                }
                                                              }
                                                             else
                                                              {
                                                              }
                                                            }
                                                          }
                                                        }
                                                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)));
                                                      }
                                                     else
                                                      {
                                                      }
                                                    }
                                                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + _GLF_IDENTITY(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(128.465) : _GLF_IDENTITY(0.0, float(mat3x2(0.0, 0.0, 0.0, 1.0, 0.0, 1.0))))))), min(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(128.465) : _GLF_IDENTITY(0.0, float(mat3x2(0.0, 0.0, 0.0, 1.0, 0.0, 1.0))))))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(128.465) : _GLF_IDENTITY(0.0, float(mat3x2(0.0, 0.0, 0.0, 1.0, 0.0, 1.0)))))))))))).y, bool(bool(injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(false, bool(bvec2(false, true))))) || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + 0.0))).y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))));
                                                  }
                                                }
                                               else
                                                {
                                                }
                                              }
                                            }
                                          }
                                        }
                                       else
                                        {
                                        }
                                      }
                                    }
                                   else
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                      }
                                     else
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                        {
                                         if(_GLF_WRAPPED_IF_TRUE(true))
                                          {
                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                            {
                                             if(_GLF_WRAPPED_IF_FALSE(false))
                                              {
                                              }
                                             else
                                              {
                                               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                                                {
                                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                                  {
                                                   do
                                                    {
                                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                                      {
                                                      }
                                                     else
                                                      {
                                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                                        {
                                                         for(_GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(vec3(1.0), ((0 >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(7), int(7)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_struct_replacement_11._injected_loop_counter != (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(41221)))), _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY((int(4)) + 0, clamp(_GLF_IDENTITY((int(4)) + 0, 0 | ((int(4)) + 0)), _GLF_IDENTITY((int(4)) + 0, 0 ^ ((int(4)) + 0)), (int(4)) + 0)), max((int(4)) + 0, (int(4)) + 0)))), _GLF_IDENTITY((_GLF_IDENTITY(1, (1) - 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) + 0), (_GLF_IDENTITY(int(4), (int(4)) + 0)) / 1))) / int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(1, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) * (1)), (1) - 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) + 0), (_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), ~ (~ (int(4))))) + 0)) / 1))) / int(_GLF_ONE(1.0, injectionSwitch.y))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(ivec2(int(4), 1))), _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) ^ 0)), 0 ^ (_GLF_IDENTITY(int(4), (int(4)) - 0)))), _GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))) ? 4 : _GLF_FUZZED(41221)))), _GLF_IDENTITY(int(4), _GLF_IDENTITY((int(4)) + 0, int(ivec2((int(4)) + 0, 1))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - _GLF_IDENTITY(0, min(0, 0))), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), min(_GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, (1) - 0)))) / int(_GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, max(1.0, 1.0))))) + abs(0.0)), injectionSwitch.y), (false ? _GLF_FUZZED(-434.611) : _GLF_ONE(1.0, injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - _GLF_IDENTITY(0, min(0, 0))), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), min(_GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, (1) - 0)))) / int(_GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, max(1.0, 1.0))))) + abs(0.0)), injectionSwitch.y), (false ? _GLF_FUZZED(-434.611) : _GLF_ONE(1.0, injectionSwitch.y))))), max(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - _GLF_IDENTITY(0, min(0, 0))), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), min(_GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, (1) - 0)))) / int(_GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, max(1.0, 1.0))))) + abs(0.0)), injectionSwitch.y), (false ? _GLF_FUZZED(-434.611) : _GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(tanh(-5019.2828)) : 1.0)), injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) - _GLF_IDENTITY(0, min(0, 0))), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), min(_GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, (1) - 0)))) / int(_GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, max(1.0, 1.0))))) + abs(0.0)), injectionSwitch.y), (false ? _GLF_FUZZED(-434.611) : _GLF_ONE(1.0, injectionSwitch.y)))))))) * 1) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(_injected_loop_counter)))), (int(4)) + 0))) / int(_GLF_ONE(1.0, injectionSwitch.y)))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, int(ivec2(4, 0)))) | (4))), (int(4)) - 0)), (0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), 0 ^ (int(4)))) / 1), (int(4)) - 0), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) - 0), 0 | (_GLF_IDENTITY(int(4), (int(4)) - 0)))) ^ 0))) * (1 | 1))))), (((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(41221), (true ? 4 : _GLF_FUZZED(41221)) | 0)))), _GLF_IDENTITY(int(4), _GLF_IDENTITY((int(4)) + 0, int(ivec2((int(4)) + 0, 1))))), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - _GLF_IDENTITY(0, min(0, 0))), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), min(_GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, (1) - 0)))) / int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_IDENTITY(false ? _GLF_FUZZED(-434.611) : _GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), (false ? _GLF_FUZZED(exp(injectionSwitch)) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), mat2(1.0) * _GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(-0.5, 1.7)))), (injectionSwitch)))), (true ? _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)) : _GLF_FUZZED(injectionSwitch))))).y), mix(float(_GLF_FUZZED(-47.99)), float(_GLF_IDENTITY(false ? _GLF_FUZZED(-434.611) : _GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), (false ? _GLF_FUZZED(exp(injectionSwitch)) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), mat2(1.0) * _GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(-0.5, 1.7)))), (injectionSwitch)))), (true ? _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)) : _GLF_FUZZED(injectionSwitch))))).y), (true ? false ? _GLF_FUZZED(-434.611) : _GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), (false ? _GLF_FUZZED(exp(injectionSwitch)) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), mat2(1.0) * _GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(-0.5, 1.7)))), (injectionSwitch)))), (true ? _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)) : _GLF_FUZZED(injectionSwitch))))).y) : _GLF_FUZZED(-795.265)))), bool(true))))))) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) + 0))) / int(_GLF_ONE(1.0, injectionSwitch.y)))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (int(4)) - int(_GLF_ZERO(0.0, injectionSwitch.x)))) - 0)), (0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) - 0), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) - 0), 0 | (_GLF_IDENTITY(int(4), (int(4)) - 0)))), 0 + ((_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) - 0), 0 | (_GLF_IDENTITY(int(4), (int(4)) - _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0)))))))))) ^ 0))) * _GLF_IDENTITY((1 | 1), ((1 | 1)) ^ 0)))))) ^ 0) / 1))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_struct_replacement_11._injected_loop_counter, 0 ^ (_GLF_struct_replacement_11._injected_loop_counter)) != _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, int(int(_GLF_IDENTITY(4, int(ivec2(4, 0))))))) >> 0), (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, int(int(_GLF_IDENTITY(4, int(ivec2(4, 0))))))) >> 0)) | (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, int(int(_GLF_IDENTITY(4, int(ivec2(4, 0))))))) >> 0))), (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), true && (_GLF_IDENTITY(true, (true) || false))) ? 4 : _GLF_FUZZED(41221)))), (true ? int(_GLF_IDENTITY(4, (_GLF_IDENTITY(true, (true) || false) ? 4 : _GLF_FUZZED(41221)))) : _GLF_FUZZED(-70283))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4)))), int(4))), (int(4)) + _GLF_IDENTITY(0, _GLF_IDENTITY((false ? _GLF_FUZZED(1783) : 0), max((_GLF_IDENTITY(false ? _GLF_FUZZED(1783) : 0, ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) * (_GLF_IDENTITY(false ? _GLF_FUZZED(1783) : 0, (true ? false ? _GLF_FUZZED(1783) : 0 : _GLF_FUZZED(-89094)))))), (false ? _GLF_FUZZED(1783) : 0))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(4), (int(4)) + 0)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(4), (int(4)) + 0)), _GLF_IDENTITY(clamp(~ (_GLF_IDENTITY(int(4), (int(4)) + 0)), ~ (_GLF_IDENTITY(int(4), (int(4)) + 0)), ~ _GLF_IDENTITY((_GLF_IDENTITY(int(4), (int(4)) + 0)), 1 * ((_GLF_IDENTITY(int(4), (int(4)) + 0))))), int(_GLF_IDENTITY(ivec3(clamp(~ (_GLF_IDENTITY(int(4), (int(4)) + 0)), ~ (_GLF_IDENTITY(int(4), (int(4)) + 0)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 ^ (int(4))), (int(4)) + 0))), int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))), (0 ^ 0)), (ivec3(clamp(~ (_GLF_IDENTITY(int(4), (int(4)) + 0)), ~ (_GLF_IDENTITY(int(4), (int(4)) + 0)), ~ (_GLF_IDENTITY(int(4), (int(4)) + 0))), int(_GLF_ONE(1.0, injectionSwitch.y)), (0 ^ 0))) - ivec3(0, 0, 0)))))) >> 0)))), (_GLF_IDENTITY(1, (1) - 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), min(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (int(4)) << 0)) | (int(4))), int(4))), _GLF_IDENTITY((int(4)) + 0, ((int(4)) + 0) ^ 0)))) / int(_GLF_ONE(1.0, injectionSwitch.y)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 ^ (4))), 0 ^ (_GLF_IDENTITY(int(4), (int(4)) - 0))), (_GLF_IDENTITY(int(4), 0 ^ (_GLF_IDENTITY(int(4), (int(4)) - 0)))) / 1), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 ^ (_GLF_IDENTITY(int(4), (int(4)) - 0))), (_GLF_IDENTITY(int(4), 0 ^ (_GLF_IDENTITY(int(4), (int(4)) - 0)))) / 1)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 ^ (_GLF_IDENTITY(int(4), (int(4)) - 0)))), clamp(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) - 0), _GLF_IDENTITY((_GLF_IDENTITY(int(4), (int(4)) - 0)) / 1, min((_GLF_IDENTITY(int(4), (int(4)) - 0)) / 1, (_GLF_IDENTITY(int(4), (int(4)) - 0)) / 1)))))), _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (4) | (0 << _GLF_IDENTITY(int(2), int(2)))), 4, 4))), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) ^ 0), 1, 0, (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1))), (int(ivec4(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) ^ 0), 1, 0, (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1)))) / 1))) * int(_GLF_ONE(1.0, injectionSwitch.y))) ^ (_GLF_IDENTITY(int(4), (int(4)) - 0)))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 ^ (_GLF_IDENTITY(int(4), (int(4)) - 0)))), int(ivec3(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 ^ (_GLF_IDENTITY(int(4), (int(4)) - 0)))), 1, 0)))))) | 0), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(41221), ~ (~ (true ? 4 : _GLF_FUZZED(41221))))), int(int((_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(41221), max(true ? 4 : _GLF_FUZZED(41221), _GLF_IDENTITY(true ? 4 : _GLF_FUZZED(41221), (true ? 4 : _GLF_FUZZED(41221)) >> 0))))))))), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-49635))), (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-49635)))) ^ 0)), (int(4)) + 0)), (_GLF_IDENTITY(1, (1) - 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) + 0))) / int(_GLF_ONE(1.0, injectionSwitch.y)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), min(int(4), _GLF_IDENTITY(int(4), (int(4)) | 0))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 ^ (4))), clamp(_GLF_IDENTITY(int(4), 0 ^ (int(4))), int(4), int(4))) : _GLF_FUZZED(38041))), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) - 0), (_GLF_IDENTITY(int(4), (int(4)) - 0)) | (_GLF_IDENTITY(int(4), (int(4)) - 0)))), (0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) - 0), (_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(4, (4) / 1) : _GLF_FUZZED(_injected_loop_counter))))) - 0)) | (_GLF_IDENTITY(int(4), (int(4)) - 0))))) - (0 << _GLF_IDENTITY(int(0), int(0)))))), ~ (~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(41221), ~ (~ (true ? 4 : _GLF_FUZZED(41221))))), int(int((_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(41221), max(true ? 4 : _GLF_FUZZED(41221), _GLF_IDENTITY(_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(41221), (true ? 4 : _GLF_FUZZED(41221)) | (true ? 4 : _GLF_FUZZED(41221))), (true ? 4 : _GLF_FUZZED(41221)) >> 0))))))))), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-49635))), (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-49635)))) ^ 0)), (int(4)) + 0)), (_GLF_IDENTITY(1, (1) - 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, 4)))) + 0))) / int(_GLF_ONE(1.0, injectionSwitch.y)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), min(int(4), _GLF_IDENTITY(int(4), (int(4)) | 0))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 ^ (4))), clamp(_GLF_IDENTITY(int(4), 0 ^ (int(4))), int(4), int(4))) : _GLF_FUZZED(38041))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(76447) : 4)))) - 0), (_GLF_IDENTITY(int(4), (int(4)) - 0)) | (_GLF_IDENTITY(int(4), (int(4)) - 0)))))))))), ((-49643 & 0) & -15142) | ((_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(41221), ~ (~ (true ? 4 : _GLF_FUZZED(41221))))), int(int((_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(41221), max(true ? 4 : _GLF_FUZZED(41221), _GLF_IDENTITY(true ? 4 : _GLF_FUZZED(41221), (true ? 4 : _GLF_FUZZED(41221)) >> 0))))))))), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-49635))), (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-49635)))) ^ 0)), (int(4)) + 0)), (_GLF_IDENTITY(1, (1) - 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) + 0))) / int(_GLF_ONE(1.0, injectionSwitch.y)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), min(int(4), _GLF_IDENTITY(int(4), (int(4)) | 0))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 ^ (4))), clamp(_GLF_IDENTITY(int(4), 0 ^ (int(4))), int(4), int(4))) : _GLF_FUZZED(38041))), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) - 0), (_GLF_IDENTITY(int(4), (int(4)) - 0)) | (_GLF_IDENTITY(int(4), (int(4)) - 0)))), (0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) - 0), (_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(4, (4) / 1) : _GLF_FUZZED(_injected_loop_counter))))) - 0)) | (_GLF_IDENTITY(int(4), (int(4)) - 0))))) - (0 << _GLF_IDENTITY(int(0), int(0)))))), ~ (~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(41221), ~ (~ (true ? 4 : _GLF_FUZZED(41221))))), int(int((_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(41221), max(true ? 4 : _GLF_FUZZED(41221), _GLF_IDENTITY(_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(41221), (true ? 4 : _GLF_FUZZED(41221)) | (true ? 4 : _GLF_FUZZED(41221))), (true ? 4 : _GLF_FUZZED(41221)) >> 0))))))))), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-49635))), (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-49635)))) ^ 0)), (int(4)) + 0)), (_GLF_IDENTITY(1, (1) - 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, 4)))) + 0))) / int(_GLF_ONE(1.0, injectionSwitch.y)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), min(int(4), _GLF_IDENTITY(int(4), (int(4)) | 0))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 ^ (4))), clamp(_GLF_IDENTITY(int(4), 0 ^ (int(4))), int(4), int(4))) : _GLF_FUZZED(38041))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(76447) : 4)))) - 0), (_GLF_IDENTITY(int(4), (int(4)) - 0)) | (_GLF_IDENTITY(int(4), (int(4)) - 0)))))))))))) / 1)), (false ? _GLF_FUZZED((-70938 / 34432)) : (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, int(int(_GLF_IDENTITY(4, int(ivec2(4, 0))))))) >> 0), (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, int(int(_GLF_IDENTITY(4, int(ivec2(4, 0))))))) >> 0)) | (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, int(int(_GLF_IDENTITY(4, int(ivec2(4, 0))))))) >> 0))), (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), true && (_GLF_IDENTITY(true, (true) || false))) ? 4 : _GLF_FUZZED(41221)))), (true ? int(_GLF_IDENTITY(4, (_GLF_IDENTITY(true, (true) || false) ? 4 : _GLF_FUZZED(41221)))) : _GLF_FUZZED(-70283))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4)))), int(4))), (int(4)) + _GLF_IDENTITY(0, _GLF_IDENTITY((false ? _GLF_FUZZED(1783) : 0), max((_GLF_IDENTITY(false ? _GLF_FUZZED(1783) : 0, ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) * (_GLF_IDENTITY(false ? _GLF_FUZZED(1783) : 0, (true ? false ? _GLF_FUZZED(1783) : 0 : _GLF_FUZZED(-89094)))))), (false ? _GLF_FUZZED(1783) : 0))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(4), (int(4)) + 0)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(4), (int(4)) + 0)), _GLF_IDENTITY(clamp(~ (_GLF_IDENTITY(int(4), (int(4)) + 0)), ~ (_GLF_IDENTITY(int(4), (int(4)) + 0)), ~ _GLF_IDENTITY((_GLF_IDENTITY(int(4), (int(4)) + 0)), 1 * ((_GLF_IDENTITY(int(4), (int(4)) + 0))))), int(_GLF_IDENTITY(ivec3(clamp(~ (_GLF_IDENTITY(int(4), (int(4)) + 0)), ~ (_GLF_IDENTITY(int(4), (int(4)) + 0)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 ^ (int(4))), (int(4)) + 0))), int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))), (0 ^ 0)), (ivec3(clamp(~ (_GLF_IDENTITY(int(4), (int(4)) + 0)), ~ (_GLF_IDENTITY(int(4), (int(4)) + 0)), ~ (_GLF_IDENTITY(int(4), (int(4)) + 0))), int(_GLF_ONE(1.0, injectionSwitch.y)), (0 ^ 0))) - ivec3(0, 0, 0)))))) >> 0)))), (_GLF_IDENTITY(1, (1) - 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), min(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (int(4)) << 0)) | (int(4))), int(4))), _GLF_IDENTITY((int(4)) + 0, ((int(4)) + 0) ^ 0)))) / int(_GLF_ONE(1.0, injectionSwitch.y)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 ^ (4))), 0 ^ (_GLF_IDENTITY(int(4), (int(4)) - 0))), (_GLF_IDENTITY(int(4), 0 ^ (_GLF_IDENTITY(int(4), (int(4)) - 0)))) / 1), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 ^ (_GLF_IDENTITY(int(4), (int(4)) - 0))), (_GLF_IDENTITY(int(4), 0 ^ (_GLF_IDENTITY(int(4), (int(4)) - 0)))) / 1)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 ^ (_GLF_IDENTITY(int(4), (int(4)) - 0)))), clamp(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) - 0), _GLF_IDENTITY((_GLF_IDENTITY(int(4), (int(4)) - 0)) / 1, min((_GLF_IDENTITY(int(4), (int(4)) - 0)) / 1, (_GLF_IDENTITY(int(4), (int(4)) - 0)) / 1)))))), _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (4) | (0 << _GLF_IDENTITY(int(2), int(2)))), 4, 4))), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) ^ 0), 1, 0, (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1))), (int(ivec4(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) ^ 0), 1, 0, (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1)))) / 1))) * int(_GLF_ONE(1.0, injectionSwitch.y))) ^ (_GLF_IDENTITY(int(4), (int(4)) - 0)))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 ^ (_GLF_IDENTITY(int(4), (int(4)) - 0)))), int(ivec3(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 ^ (_GLF_IDENTITY(int(4), (int(4)) - 0)))), 1, 0)))))) | 0), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(41221), ~ (~ (true ? 4 : _GLF_FUZZED(41221))))), int(int((_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(41221), max(true ? 4 : _GLF_FUZZED(41221), _GLF_IDENTITY(true ? 4 : _GLF_FUZZED(41221), (true ? 4 : _GLF_FUZZED(41221)) >> 0))))))))), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-49635))), (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-49635)))) ^ 0)), (int(4)) + 0)), (_GLF_IDENTITY(1, (1) - 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) + 0))) / int(_GLF_ONE(1.0, injectionSwitch.y)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), min(int(4), _GLF_IDENTITY(int(4), (int(4)) | 0))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 ^ (4))), clamp(_GLF_IDENTITY(int(4), 0 ^ (int(4))), int(4), int(4))) : _GLF_FUZZED(38041))), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) - 0), (_GLF_IDENTITY(int(4), (int(4)) - 0)) | (_GLF_IDENTITY(int(4), (int(4)) - 0)))), (0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) - 0), (_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(4, (4) / 1) : _GLF_FUZZED(_injected_loop_counter))))) - 0)) | (_GLF_IDENTITY(int(4), (int(4)) - 0))))) - (0 << _GLF_IDENTITY(int(0), int(0)))))), ~ (~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(41221), ~ (~ (true ? 4 : _GLF_FUZZED(41221))))), int(int((_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(41221), max(true ? 4 : _GLF_FUZZED(41221), _GLF_IDENTITY(_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(41221), (true ? 4 : _GLF_FUZZED(41221)) | (true ? 4 : _GLF_FUZZED(41221))), (true ? 4 : _GLF_FUZZED(41221)) >> 0))))))))), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-49635))), (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-49635)))) ^ 0)), (int(4)) + 0)), (_GLF_IDENTITY(1, (1) - 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, 4)))) + 0))) / int(_GLF_ONE(1.0, injectionSwitch.y)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), min(int(4), _GLF_IDENTITY(int(4), (int(4)) | 0))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 ^ (4))), clamp(_GLF_IDENTITY(int(4), 0 ^ (int(4))), int(4), int(4))) : _GLF_FUZZED(38041))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(76447) : 4)))) - 0), (_GLF_IDENTITY(int(4), (int(4)) - 0)) | (_GLF_IDENTITY(int(4), (int(4)) - 0)))))))))), ((-49643 & 0) & -15142) | ((_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(41221), ~ (~ (true ? 4 : _GLF_FUZZED(41221))))), int(int((_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(41221), max(true ? 4 : _GLF_FUZZED(41221), _GLF_IDENTITY(true ? 4 : _GLF_FUZZED(41221), (true ? 4 : _GLF_FUZZED(41221)) >> 0))))))))), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-49635))), (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-49635)))) ^ 0)), (int(4)) + 0)), (_GLF_IDENTITY(1, (1) - 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) + 0))) / int(_GLF_ONE(1.0, injectionSwitch.y)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), min(int(4), _GLF_IDENTITY(int(4), (int(4)) | 0))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 ^ (4))), clamp(_GLF_IDENTITY(int(4), 0 ^ (int(4))), int(4), int(4))) : _GLF_FUZZED(38041))), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) - 0), (_GLF_IDENTITY(int(4), (int(4)) - 0)) | (_GLF_IDENTITY(int(4), (int(4)) - 0)))), (0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) - 0), (_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(4, (4) / 1) : _GLF_FUZZED(_injected_loop_counter))))) - 0)) | (_GLF_IDENTITY(int(4), (int(4)) - 0))))) - (0 << _GLF_IDENTITY(int(0), int(0)))))), ~ (~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(41221), ~ (~ (true ? 4 : _GLF_FUZZED(41221))))), int(int((_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(41221), max(true ? 4 : _GLF_FUZZED(41221), _GLF_IDENTITY(_GLF_IDENTITY(true ? 4 : _GLF_FUZZED(41221), (true ? 4 : _GLF_FUZZED(41221)) | (true ? 4 : _GLF_FUZZED(41221))), (true ? 4 : _GLF_FUZZED(41221)) >> 0))))))))), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-49635))), (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-49635)))) ^ 0)), (int(4)) + 0)), (_GLF_IDENTITY(1, (1) - 0) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, clamp(4, 4, 4)))) + 0))) / int(_GLF_ONE(1.0, injectionSwitch.y)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), min(int(4), _GLF_IDENTITY(int(4), (int(4)) | 0))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 ^ (4))), clamp(_GLF_IDENTITY(int(4), 0 ^ (int(4))), int(4), int(4))) : _GLF_FUZZED(38041))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(_GLF_IDENTITY(4, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(76447) : 4)))) - 0), (_GLF_IDENTITY(int(4), (int(4)) - 0)) | (_GLF_IDENTITY(int(4), (int(4)) - 0)))))))))))) / 1)))))))); _GLF_struct_replacement_11._injected_loop_counter ++)
                                                          {
                                                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                            {
                                                            }
                                                           else
                                                            {
                                                             if(_GLF_WRAPPED_IF_FALSE(false))
                                                              {
                                                              }
                                                             else
                                                              {
                                                               for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                                {
                                                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                                  {
                                                                  }
                                                                 else
                                                                  {
                                                                   do
                                                                    {
                                                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                                                      {
                                                                      }
                                                                     else
                                                                      {
                                                                       do
                                                                        {
                                                                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                                                          {
                                                                           if(_GLF_WRAPPED_IF_FALSE(false))
                                                                            {
                                                                            }
                                                                           else
                                                                            {
                                                                             do
                                                                              {
                                                                               if(_GLF_WRAPPED_IF_TRUE(true))
                                                                                {
                                                                                 subgroupAll(false);
                                                                                }
                                                                               else
                                                                                {
                                                                                }
                                                                              }
                                                                             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) && true), true)))));
                                                                            }
                                                                          }
                                                                         else
                                                                          {
                                                                          }
                                                                        }
                                                                       while(_GLF_WRAPPED_LOOP(false));
                                                                      }
                                                                    }
                                                                   while(_GLF_WRAPPED_LOOP(false));
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                       else
                                                        {
                                                        }
                                                      }
                                                    }
                                                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
                                                  }
                                                 else
                                                  {
                                                  }
                                                }
                                               else
                                                {
                                                }
                                              }
                                            }
                                           else
                                            {
                                            }
                                          }
                                         else
                                          {
                                          }
                                        }
                                       else
                                        {
                                        }
                                      }
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                      }
                                     else
                                      {
                                       do
                                        {
                                         if(_GLF_WRAPPED_IF_TRUE(true))
                                          {
                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                            {
                                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                              {
                                              }
                                             else
                                              {
                                               do
                                                {
                                                 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) >> 0)); _injected_loop_counter ++)
                                                  {
                                                   for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY((0), ~ (~ (_GLF_IDENTITY((0), clamp((0), (0), (0)))))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                    {
                                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                                      {
                                                      }
                                                     else
                                                      {
                                                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false)))))))
                                                        {
                                                        }
                                                       else
                                                        {
                                                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                          {
                                                          }
                                                         else
                                                          {
                                                           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || _GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)), ! _GLF_IDENTITY((! ((_GLF_IDENTITY(true, (true) && true)))), (_GLF_IDENTITY((! ((_GLF_IDENTITY(true, (true) && true)))), ! (! (_GLF_IDENTITY((! ((_GLF_IDENTITY(true, (true) && true)))), ! (! ((! ((_GLF_IDENTITY(true, (true) && true))))))))))) || false)))), bool(bvec2(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)), ! (! ((_GLF_IDENTITY(true, (true) && true))))))), true)))))))
                                                            {
                                                             if(_GLF_WRAPPED_IF_TRUE(true))
                                                              {
                                                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                                {
                                                                }
                                                               else
                                                                {
                                                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                                                  {
                                                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                                                    {
                                                                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0) != 0); _injected_loop_counter --)
                                                                      {
                                                                       do
                                                                        {
                                                                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                                          {
                                                                           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) + 0)), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) + 0))))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                                                            {
                                                                             do
                                                                              {
                                                                               do
                                                                                {
                                                                                 read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, _GLF_IDENTITY(int(ivec4(4, 1, 0, 0)), min(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(4, 1, 0, 0)), (int(ivec4(4, 1, 0, 0))) >> 0), int(ivec4(int(ivec4(4, 1, 0, 0)), 0, 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * 1)) | 0)))), int(ivec4(4, _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), 0, 0))))), 4, _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) - 0), 4))))) << 0), 64, _GLF_IDENTITY(2, clamp(2, 2, 2)));
                                                                                }
                                                                               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bool(_GLF_IDENTITY(false, true && (false)))))) && true)));
                                                                              }
                                                                             while(_GLF_WRAPPED_LOOP(false));
                                                                            }
                                                                          }
                                                                        }
                                                                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                                      }
                                                                    }
                                                                   else
                                                                    {
                                                                    }
                                                                  }
                                                                 else
                                                                  {
                                                                  }
                                                                }
                                                              }
                                                             else
                                                              {
                                                              }
                                                            }
                                                           else
                                                            {
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                               while(_GLF_WRAPPED_LOOP(false));
                                              }
                                            }
                                           else
                                            {
                                            }
                                          }
                                         else
                                          {
                                          }
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                      }
                                    }
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                              }
                             else
                              {
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))));
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-5.7, 2.4)) : injectionSwitch)).x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-5.7, 2.4)) : injectionSwitch)).x, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-5.7, _GLF_IDENTITY(2.4, (false ? _GLF_FUZZED(-7548.6591) : 2.4)))) : injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-5.7, 2.4)) : injectionSwitch)).x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-5.7, 2.4)) : injectionSwitch)).x, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-5.7, 2.4)) : injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-5.7, 2.4)) : injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-5.7, 2.4)) : injectionSwitch)).x)))) > injectionSwitch.y))));
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       subgroupBarrier();
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
