#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_5 {
 bvec4 _f0;
 vec2 _f1;
 mat2x4 _f2;
 uvec3 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_4 {
 vec4 _f0;
 int _f1;
 mat4 _f2;
 mat2x4 _f3;
 mat4 _f4;
 mat4x2 _f5;
 ivec3 _f6;
} ;

struct _GLF_struct_3 {
 mat3 _f0;
 mat3 _f1;
 float _f2;
 bvec3 _f3;
 bvec4 _f4;
 mat2x4 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_6 {
 _GLF_struct_3 _f0;
 float _f1;
 _GLF_struct_4 _f2;
 _GLF_struct_5 _f3;
 uint _f4;
} ;

struct _GLF_struct_1 {
 uint num_workgroup;
 mat2 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_0 {
 mat3 _f0;
 uvec4 _f1;
 int _f2;
 mat2 _f3;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 int _f1;
 mat3 _f2;
 uint _f3;
 _GLF_struct_1 _f4;
} ;

struct _GLF_struct_7 {
 _GLF_struct_2 _f0;
 vec2 _f1;
 mat4x2 _f2;
 mat2x4 _f3;
 _GLF_struct_6 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(2296.5025)), float(injectionSwitch.x), bool(true))), float(vec4(injectionSwitch.x, 0.0, 0.0, 0.0))) > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 1.0))), injectionSwitch))) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))) && true)))), true)))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false), bool(bvec3((false), false, false))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY((false), bool(bvec3((false), false, false))), true, true)))))), false, false, false)), true && (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false), bool(bvec3((false), false, false))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY((false), bool(bvec3((false), false, false))), true, true)))))), false, false, false)), false || (bool(bvec4(_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false), bool(bvec3((false), false, false))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY((false), bool(bvec3((false), false, false))), true, true)))))), false, false, false))))))) || false)) || false)))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4489.0613)), float(injectionSwitch.y), bool(true))))), 0.0 + (_GLF_IDENTITY(injectionSwitch.y, length(vec3(0.0, 0.0, 0.0)) + _GLF_IDENTITY((injectionSwitch.y), (true ? (injectionSwitch.y) : _GLF_FUZZED(-7501.0955))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.5), _GLF_FUZZED(57.14)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)) && (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(mat3((injectionSwitch), sin(0.0), 0.0, exp(0.0), cos(0.0), 1.0, 1.0, 0.0), transpose(transpose(mat3((injectionSwitch), sin(0.0), 0.0, exp(0.0), cos(0.0), 1.0, 1.0, 0.0)))))))) * mat2(1.0)).x, mix(float(_GLF_FUZZED(-9742.4270)), float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(mat3((injectionSwitch), sin(0.0), 0.0, exp(0.0), cos(0.0), 1.0, 1.0, 0.0), transpose(transpose(mat3((injectionSwitch), sin(0.0), 0.0, exp(0.0), cos(0.0), 1.0, 1.0, 0.0)))))))) * mat2(1.0)).x), bool(true))) > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), bool(bvec3(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))), _GLF_IDENTITY(bool(bvec2(bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))), true)), bool(bvec4(bool(bvec2(bool(_GLF_IDENTITY(bool(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), bool(bvec3(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))), true)), false, false, true)))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   barrier();
  }
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(_GLF_struct_2(_GLF_struct_0(mat3(1.0), uvec4(1u), 1, _GLF_IDENTITY(mat2(1.0), transpose(_GLF_IDENTITY(_GLF_IDENTITY(transpose(mat2(1.0)), mat2(mat3x2(transpose(mat2(1.0))))), mat2(mat4x2(_GLF_IDENTITY(transpose(mat2(1.0)), mat2(mat3x2(transpose(mat2(1.0))))))))))), 1, mat3(1.0), 1u, _GLF_struct_1(gl_NumWorkGroups.x, mat2(1.0), ivec2(1))), vec2(1.0), mat4x2(1.0), mat2x4(1.0), _GLF_struct_6(_GLF_struct_3(mat3(1.0), mat3(1.0), 1.0, bvec3(true), bvec4(true), mat2x4(1.0), mat4x3(1.0)), 1.0, _GLF_struct_4(_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), _GLF_IDENTITY(vec4(mat2x3(_GLF_IDENTITY(vec4(1.0), vec4(vec4(vec4(1.0)))), 0.0, 1.0)), max(vec4(mat2x3(_GLF_IDENTITY(vec4(1.0), vec4(vec4(vec4(1.0)))), 0.0, 1.0)), _GLF_IDENTITY(vec4(mat2x3(_GLF_IDENTITY(vec4(1.0), vec4(vec4(_GLF_IDENTITY(vec4(1.0), vec4(0.0, 0.0, 0.0, 0.0) + (vec4(1.0)))))), 0.0, 1.0)), vec4(mat2x3(vec4(mat2x3(_GLF_IDENTITY(vec4(1.0), vec4(vec4(vec4(1.0)))), 0.0, 1.0)), 1.0, 0.0)))))), max(_GLF_IDENTITY(vec4(1.0), _GLF_IDENTITY(vec4(mat2x3(_GLF_IDENTITY(vec4(1.0), vec4(vec4(vec4(1.0)))), 0.0, 1.0)), max(vec4(mat2x3(_GLF_IDENTITY(vec4(1.0), vec4(vec4(vec4(1.0)))), 0.0, 1.0)), _GLF_IDENTITY(vec4(mat2x3(_GLF_IDENTITY(vec4(1.0), vec4(vec4(vec4(1.0)))), 0.0, 1.0)), vec4(mat2x3(vec4(mat2x3(_GLF_IDENTITY(vec4(1.0), vec4(vec4(vec4(1.0)))), 0.0, 1.0)), 1.0, 0.0)))))), _GLF_IDENTITY(vec4(1.0), _GLF_IDENTITY(vec4(mat2x3(_GLF_IDENTITY(vec4(1.0), vec4(vec4(vec4(1.0)))), 0.0, 1.0)), max(vec4(mat2x3(_GLF_IDENTITY(vec4(1.0), vec4(vec4(vec4(1.0)))), _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, min(0.0, 0.0))), float(_GLF_FUZZED(1.9)), bool(false))), 1.0)), _GLF_IDENTITY(vec4(mat2x3(_GLF_IDENTITY(vec4(1.0), vec4(vec4(vec4(1.0)))), 0.0, 1.0)), vec4(mat2x3(vec4(mat2x3(_GLF_IDENTITY(vec4(1.0), vec4(vec4(vec4(1.0)))), 0.0, 1.0)), 1.0, 0.0)))))))), 1, mat4(1.0), mat2x4(1.0), mat4(1.0), mat4x2(1.0), ivec3(1)), _GLF_struct_5(bvec4(true), vec2(_GLF_IDENTITY(1.0, min(1.0, 1.0))), mat2x4(1.0), uvec3(1u), _GLF_IDENTITY(_GLF_IDENTITY(uvec4(1u), max(uvec4(1u), uvec4(1u))), uvec4(0u, 0u, 0u, 0u) + _GLF_IDENTITY(_GLF_IDENTITY((uvec4(1u)), ((uvec4(1u))) | ((uvec4(1u)))), (uvec4(0u, _GLF_IDENTITY(0u, (0u) - 0u), 0u, 0u) << _GLF_IDENTITY(uvec4(2u), uvec4(2u))) ^ ((uvec4(1u)))))), 1u));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u)), _GLF_IDENTITY(uvec3(0u, 0u, 0u), ~ (~ (_GLF_IDENTITY(uvec3(0u, 0u, 0u), clamp(_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) >> uvec3(0u, 0u, 0u)), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)))))) | (gl_WorkGroupSize)).x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY((bool(false)), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((bool(false)), true && ((bool(false)))), ! (! (_GLF_IDENTITY((bool(false)), true && ((bool(false)))))))))) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(true, false || (true)), false)), bool(bvec3(bool(bvec3(false, _GLF_IDENTITY(true, false || (true)), false)), true, true))))) && true)))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) || false)))), true, true, false)), (bool(bvec4(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) || false)))), true, true, false))) && true))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(3.9)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))))) || false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))))), clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), injectionSwitch)), mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(0.1), _GLF_FUZZED((_GLF_IDENTITY(-468.413, float(vec3(_GLF_IDENTITY(-468.413, mix(float(_GLF_FUZZED(743.937)), float(-468.413), bool(true))), 0.0, 0.0))) - 68.08))), bvec2(false, _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true && (false), ! (! (_GLF_IDENTITY(true && (false), ! (! (true && (false))))))), false, false)), true && (bool(bvec3(_GLF_IDENTITY(true && (false), ! (! (_GLF_IDENTITY(true && (false), ! (! (true && (false))))))), false, false)))))), (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))) && true)))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, false)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_id), clamp((workgroup_id), _GLF_IDENTITY((workgroup_id), (_GLF_IDENTITY(true, true && (true)) ? (workgroup_id) : _GLF_FUZZED(subgroup_local_id))), _GLF_IDENTITY((workgroup_id), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false))) ? (workgroup_id) : _GLF_FUZZED(subgroup_size))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_id), _GLF_IDENTITY((~ (workgroup_id)), clamp(_GLF_IDENTITY((~ (workgroup_id)), clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id)))), (~ (_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)))), (~ (workgroup_id)))) >> 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_id), _GLF_IDENTITY((~ (workgroup_id)), clamp(_GLF_IDENTITY((~ (workgroup_id)), clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id)))), (~ (workgroup_id)), (~ (workgroup_id)))) >> 0u), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (workgroup_id), _GLF_IDENTITY(_GLF_IDENTITY((~ (workgroup_id)), clamp(_GLF_IDENTITY((~ (workgroup_id)), clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id)))), (~ (workgroup_id)), (~ (workgroup_id)))), (_GLF_IDENTITY(_GLF_IDENTITY((~ (workgroup_id)), clamp(_GLF_IDENTITY((~ (workgroup_id)), _GLF_IDENTITY(clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (_GLF_IDENTITY(workgroup_id, clamp(_GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u), _GLF_IDENTITY(workgroup_id, (workgroup_id) / 1u), workgroup_id))))), (clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id)))) >> 0u)), (~ (workgroup_id)), (~ (workgroup_id)))), (_GLF_IDENTITY(_GLF_IDENTITY((~ (workgroup_id)), clamp(_GLF_IDENTITY(_GLF_IDENTITY((~ (workgroup_id)), clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ _GLF_IDENTITY((workgroup_id), ~ (~ ((workgroup_id))))))), (_GLF_IDENTITY((~ (workgroup_id)), clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ _GLF_IDENTITY((workgroup_id), ~ (~ ((workgroup_id)))))))) * 1u), _GLF_IDENTITY((~ (workgroup_id)), clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id)))), (~ (workgroup_id)))), max(_GLF_IDENTITY((~ (workgroup_id)), clamp(_GLF_IDENTITY((~ (workgroup_id)), clamp((~ (workgroup_id)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(_GLF_IDENTITY(workgroup_id, 0u + (workgroup_id)), workgroup_id)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(_GLF_IDENTITY(workgroup_id, 0u + (workgroup_id)), workgroup_id)), (_GLF_IDENTITY(workgroup_id, min(_GLF_IDENTITY(workgroup_id, 0u + (workgroup_id)), workgroup_id))) << 0u) : _GLF_FUZZED(workgroup_size))))), (~ (workgroup_id)))), (~ (workgroup_id)), (~ (workgroup_id)))), _GLF_IDENTITY((~ _GLF_IDENTITY((workgroup_id), max((workgroup_id), (workgroup_id)))), clamp(_GLF_IDENTITY((~ (workgroup_id)), clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id)))), (~ (workgroup_id)), (~ (workgroup_id))))))) << 0u)) / 1u) >> 0u)), (~ (_GLF_IDENTITY(~ (workgroup_id), _GLF_IDENTITY((~ (workgroup_id)), clamp(_GLF_IDENTITY((~ (workgroup_id)), _GLF_IDENTITY(clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id))), min(_GLF_IDENTITY(clamp(_GLF_IDENTITY((~ (workgroup_id)), ~ (~ ((~ (workgroup_id))))), _GLF_IDENTITY((~ (workgroup_id)), (_GLF_IDENTITY((~ (workgroup_id)), (true ? (~ (workgroup_id)) : _GLF_FUZZED(subgroup_local_id)))) - (0u >> _GLF_IDENTITY(uint(4u), uint(4u)))), (~ (workgroup_id))), min(clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id))), clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id))))), clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id)))))), (~ (workgroup_id)), (~ (workgroup_id)))) >> 0u))) ^ 0u)), ((_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (workgroup_id), _GLF_IDENTITY(_GLF_IDENTITY((~ (workgroup_id)), clamp(_GLF_IDENTITY((~ (workgroup_id)), clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id)))), (~ (workgroup_id)), (~ (workgroup_id)))), (_GLF_IDENTITY(_GLF_IDENTITY((~ (workgroup_id)), clamp(_GLF_IDENTITY((~ (workgroup_id)), _GLF_IDENTITY(clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id))), (clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id)))) >> 0u)), (~ (workgroup_id)), (~ (workgroup_id)))), (_GLF_IDENTITY(_GLF_IDENTITY((~ (workgroup_id)), clamp(_GLF_IDENTITY((~ (workgroup_id)), clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ _GLF_IDENTITY((workgroup_id), ~ (~ ((workgroup_id))))))), (~ (workgroup_id)), (~ (workgroup_id)))), max(_GLF_IDENTITY((~ (workgroup_id)), clamp(_GLF_IDENTITY((~ (workgroup_id)), clamp((~ (workgroup_id)), (~ (_GLF_IDENTITY(workgroup_id, min(_GLF_IDENTITY(workgroup_id, 0u + (workgroup_id)), workgroup_id)))), (~ (workgroup_id)))), (~ (workgroup_id)), (~ (workgroup_id)))), _GLF_IDENTITY((~ _GLF_IDENTITY((workgroup_id), max((workgroup_id), (workgroup_id)))), clamp(_GLF_IDENTITY((~ (workgroup_id)), clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id)))), (~ (workgroup_id)), (~ (workgroup_id))))))) << 0u)) / 1u) >> 0u)), (~ (_GLF_IDENTITY(~ (workgroup_id), _GLF_IDENTITY((~ (workgroup_id)), clamp(_GLF_IDENTITY((~ (workgroup_id)), _GLF_IDENTITY(clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id))), min(_GLF_IDENTITY(clamp(_GLF_IDENTITY((~ (workgroup_id)), ~ (~ ((~ (workgroup_id))))), (~ (workgroup_id)), (~ (workgroup_id))), min(clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id))), clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id))))), clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id)))))), (~ (workgroup_id)), (~ (workgroup_id)))) >> 0u))) ^ 0u), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (workgroup_id), _GLF_IDENTITY(_GLF_IDENTITY((~ (workgroup_id)), clamp(_GLF_IDENTITY((~ (workgroup_id)), clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id)))), (~ (workgroup_id)), (~ (workgroup_id)))), (_GLF_IDENTITY(_GLF_IDENTITY((~ (workgroup_id)), clamp(_GLF_IDENTITY((~ (workgroup_id)), _GLF_IDENTITY(clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id))), (clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id)))) >> 0u)), (~ (workgroup_id)), (~ (workgroup_id)))), (_GLF_IDENTITY(_GLF_IDENTITY((~ (workgroup_id)), clamp(_GLF_IDENTITY((~ (workgroup_id)), clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ _GLF_IDENTITY((workgroup_id), ~ (~ ((workgroup_id))))))), (~ (workgroup_id)), (~ (workgroup_id)))), max(_GLF_IDENTITY((~ (workgroup_id)), clamp(_GLF_IDENTITY((~ (workgroup_id)), clamp((~ (workgroup_id)), (~ (_GLF_IDENTITY(workgroup_id, min(_GLF_IDENTITY(workgroup_id, 0u + (workgroup_id)), workgroup_id)))), (~ (workgroup_id)))), (~ (workgroup_id)), (~ (workgroup_id)))), _GLF_IDENTITY((~ _GLF_IDENTITY((workgroup_id), max((workgroup_id), (workgroup_id)))), clamp(_GLF_IDENTITY((~ (workgroup_id)), clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id)))), (~ (workgroup_id)), (~ (workgroup_id))))))) << 0u)) / 1u) >> 0u)), (~ (_GLF_IDENTITY(~ (workgroup_id), _GLF_IDENTITY((~ (workgroup_id)), clamp(_GLF_IDENTITY((~ (workgroup_id)), _GLF_IDENTITY(clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id))), min(_GLF_IDENTITY(clamp(_GLF_IDENTITY((~ (workgroup_id)), ~ (~ ((~ (workgroup_id))))), (~ (workgroup_id)), (~ (workgroup_id))), min(clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id))), clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id))))), clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id)))))), (~ (workgroup_id)), (~ (workgroup_id)))) >> 0u))) ^ 0u), uint(uvec2(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (workgroup_id), _GLF_IDENTITY(_GLF_IDENTITY((~ (workgroup_id)), clamp(_GLF_IDENTITY((~ (workgroup_id)), clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id)))), (~ (workgroup_id)), (~ (workgroup_id)))), (_GLF_IDENTITY(_GLF_IDENTITY((~ (workgroup_id)), clamp(_GLF_IDENTITY((~ (workgroup_id)), _GLF_IDENTITY(clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id))), (clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id)))) >> 0u)), (~ (workgroup_id)), (~ (workgroup_id)))), (_GLF_IDENTITY(_GLF_IDENTITY((~ (workgroup_id)), clamp(_GLF_IDENTITY((~ (workgroup_id)), clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ _GLF_IDENTITY((workgroup_id), ~ (~ ((workgroup_id))))))), (~ (workgroup_id)), (~ (workgroup_id)))), max(_GLF_IDENTITY((~ (workgroup_id)), clamp(_GLF_IDENTITY((~ (workgroup_id)), clamp((~ (workgroup_id)), (~ (_GLF_IDENTITY(workgroup_id, min(_GLF_IDENTITY(workgroup_id, 0u + (workgroup_id)), workgroup_id)))), (~ (workgroup_id)))), (~ (workgroup_id)), (~ (workgroup_id)))), _GLF_IDENTITY((~ _GLF_IDENTITY((workgroup_id), max((workgroup_id), (workgroup_id)))), clamp(_GLF_IDENTITY((~ (workgroup_id)), clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id)))), (~ (workgroup_id)), (~ (workgroup_id))))))) << 0u)) / 1u) >> 0u)), (~ (_GLF_IDENTITY(~ (workgroup_id), _GLF_IDENTITY((~ (workgroup_id)), clamp(_GLF_IDENTITY((~ (workgroup_id)), _GLF_IDENTITY(clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id))), min(_GLF_IDENTITY(clamp(_GLF_IDENTITY((~ (workgroup_id)), ~ (~ ((~ (workgroup_id))))), (~ (workgroup_id)), (~ (workgroup_id))), min(clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id))), clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id))))), clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id)))))), (~ (workgroup_id)), (~ (workgroup_id)))) >> 0u))) ^ 0u), 1u)))))))) >> 0u)), _GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_id), _GLF_IDENTITY((~ (workgroup_id)), clamp(_GLF_IDENTITY((~ (workgroup_id)), clamp((~ (_GLF_IDENTITY(workgroup_id, max(workgroup_id, _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)))))), (~ (workgroup_id)), (~ (workgroup_id)))), (~ (workgroup_id)), (~ (workgroup_id)))) >> 0u), (_GLF_IDENTITY(~ (workgroup_id), _GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_id), ~ (~ (_GLF_IDENTITY(~ (workgroup_id), (~ (workgroup_id)) | (~ (workgroup_id))))))), _GLF_IDENTITY(clamp(_GLF_IDENTITY((~ (workgroup_id)), clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id)))), (~ (workgroup_id)), (~ (workgroup_id))), 0u ^ (_GLF_IDENTITY(clamp(_GLF_IDENTITY((~ (workgroup_id)), clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id)))), (~ (workgroup_id)), (~ (workgroup_id))), (true ? _GLF_IDENTITY(clamp(_GLF_IDENTITY((~ (workgroup_id)), clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id)))), (~ (workgroup_id)), (~ (workgroup_id))), (clamp(_GLF_IDENTITY((~ (workgroup_id)), clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id)))), (~ (workgroup_id)), (~ (workgroup_id)))) | (clamp(_GLF_IDENTITY((~ (workgroup_id)), clamp((~ (workgroup_id)), (~ (workgroup_id)), (~ (workgroup_id)))), (~ (workgroup_id)), (~ (workgroup_id))))) : _GLF_FUZZED(subgroup_id)))))) >> 0u)) * 1u)))) ^ 0u, max((_GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_id), max(~ (workgroup_id), ~ (workgroup_id))), (~ (_GLF_IDENTITY(workgroup_id, ~ (~ (_GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))))) >> 0u)) ^ 0u, (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(uint(uint(workgroup_id)), 0u | (uint(uint(workgroup_id)))))) | 0u)), ((_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(uint(uint(workgroup_id)), 0u | (uint(uint(workgroup_id)))))) | 0u))) - 0u), (~ (workgroup_id)) >> 0u)) ^ 0u)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u) + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)) / 1u) + 1) % subgroup_size), (false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base))) >> 0u), (workgroup_base) * 1u)) : workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), ! (! (bool(bvec4(false, false, false, false))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), false)))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), _GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(3.5) : injectionSwitch.y)), injectionSwitch.y))))))), false || (! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(3.5) : injectionSwitch.y)), injectionSwitch.y), (true ? min(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(3.5) : injectionSwitch.y)), injectionSwitch.y) : _GLF_FUZZED(-49.88))))))))), true && ((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(3.5) : injectionSwitch.y)), injectionSwitch.y), (true ? min(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(3.5) : injectionSwitch.y)), injectionSwitch.y) : _GLF_FUZZED(-49.88)))))))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - sqrt(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) / cos(0.0)))) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(-34.03))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(_GLF_IDENTITY(false, true && (false))))))))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (true ? _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), clamp(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), mat2(_GLF_IDENTITY(mat3x2(mat2(1.0)), mat3x2(_GLF_IDENTITY(mat3(mat3x2(mat2(1.0))), (mat3(mat3x2(mat2(1.0)))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))) * (injectionSwitch), clamp(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch))), mat2(1.0) * (injectionSwitch)))).y)) : _GLF_IDENTITY(_GLF_FUZZED(9.0), (_GLF_IDENTITY(_GLF_FUZZED(9.0), (_GLF_FUZZED(9.0)) + determinant(mat2(0.0, 0.0, 0.0, 0.0)))) / _GLF_ONE(1.0, injectionSwitch.y))))))))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(284.317, _GLF_IDENTITY(195.539, (_GLF_IDENTITY(195.539, clamp(195.539, 195.539, _GLF_IDENTITY(195.539, mix(float(_GLF_FUZZED(1550.0922)), float(195.539), bool(true)))))) * 1.0))))))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), _GLF_IDENTITY(vec2(_GLF_FUZZED(-7.1), _GLF_FUZZED(-2.3)), (false ? _GLF_FUZZED(vec2(-5969.1094, -638.121)) : vec2(_GLF_FUZZED(-7.1), _GLF_FUZZED(-2.3)))), bvec2(false, false))))))).x, mix(float(_GLF_IDENTITY(_GLF_FUZZED(-7.1), float(mat4x3(_GLF_FUZZED(-7.1), 1.0, abs(0.0), 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), sin(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)))), 0.0, 0.0, 0.0, 1.0, 0.0)))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-7.1), _GLF_FUZZED(-2.3)), bvec2(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), false))))), max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-7.1), _GLF_FUZZED(-2.3)), bvec2(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), false))))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-7.1), _GLF_FUZZED(-2.3)), bvec2(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), false))))))))).x, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(injectionSwitch))) / vec2(1.0, 1.0)), (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), (_GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), _GLF_IDENTITY(vec2(0.0, 0.0), mix(vec2(_GLF_FUZZED(2.1), (vec2(0.0, 0.0))[1]), vec2((vec2(0.0, 0.0))[0], _GLF_FUZZED(-548.455)), bvec2(true, false)))))) + vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-7.1), _GLF_FUZZED(_GLF_IDENTITY(-2.3, max(-2.3, _GLF_IDENTITY(-2.3, 1.0 * (-2.3)))))), bvec2(false, false))))))).x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))))) - vec2(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))[0], _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * vec2(1.0, 1.0))[1]), vec2(_GLF_FUZZED(-7.1), _GLF_FUZZED(-2.3)), bvec2(false, false))))))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-7.1), _GLF_FUZZED(-2.3)), bvec2(false, false))))))).x, float(vec3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(8.5) : (injectionSwitch)[0])), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-7.1), _GLF_FUZZED(-2.3)), bvec2(false, false))))))).x, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(vec2(-3.3, 2.0).t)), float(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0))), bool(true))), 0.0)))))), bool(true))) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 0, (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), int(6))), 0)), clamp(int(ivec4(1, 0, (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (0 << _GLF_IDENTITY(int(6), int(6))) ^ (int(6))))), 0)), int(ivec4(1, 0, (0 >> _GLF_IDENTITY(int(6), int(6))), 0)), int(ivec4(1, 0, (0 >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (6) | 0)) - 0)))), 0))))) < subgroup_size)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
   subgroupAll(false);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true, true, true))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true)))), _GLF_IDENTITY(bool(bvec3(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true)))), false, false)), bool(bvec4(bool(bvec3(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true)))), false, false)), false, true, false)))))), ! (! (_GLF_IDENTITY((false), false || ((_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))))))))))))))))) && true)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     barrier();
    }
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   subgroupAll(true);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) && true))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, _GLF_IDENTITY(false, false || (false)) || (true)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), (bool(bvec2(false, false))) && true))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), false || ((! _GLF_IDENTITY((false), ((false)) || false)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
