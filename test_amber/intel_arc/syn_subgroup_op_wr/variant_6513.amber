#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(ivec4(int(0), 0, 1, 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, 0.0 + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))))))
  return;
 for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) >> 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))).y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))).y : _GLF_FUZZED(897.199)))))))
      break;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         break;
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      break;
     return;
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 0.0))))), (injectionSwitch.x) - 0.0))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + abs(0.0))) - 0.0)), _GLF_IDENTITY(! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), mix(vec2(_GLF_FUZZED(7.4), _GLF_FUZZED(-8.4)), vec2((mat2(_GLF_ONE(1.0, injectionSwitch.y)) * _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0], (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[1]), bvec2(true, true)))).x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), mix(vec2(_GLF_FUZZED(7.4), _GLF_FUZZED(-8.4)), vec2((mat2(_GLF_ONE(1.0, injectionSwitch.y)) * _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0], (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[1]), bvec2(true, true)))).x > injectionSwitch.y))), (! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), mix(vec2(_GLF_FUZZED(7.4), _GLF_FUZZED(-8.4)), vec2((mat2(_GLF_ONE(1.0, injectionSwitch.y)) * _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0], (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[1]), bvec2(true, true)))).x > injectionSwitch.y)))) || false)), ! (! (! (_GLF_IDENTITY(! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), mix(vec2(_GLF_FUZZED(7.4), _GLF_FUZZED(-8.4)), vec2((mat2(_GLF_ONE(1.0, injectionSwitch.y)) * _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0], (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[1]), bvec2(true, true)))).x > injectionSwitch.y))), (! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), mix(vec2(_GLF_FUZZED(7.4), _GLF_FUZZED(_GLF_IDENTITY(-8.4, (_GLF_IDENTITY(-8.4, (-8.4) - 0.0)) / 1.0))), vec2((mat2(_GLF_ONE(1.0, injectionSwitch.y)) * _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))[0], (mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)) * (injectionSwitch))[1]), bvec2(true, true)))).x > injectionSwitch.y)))) || false)))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
    }
   do
    {
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch[0], float(mat3x4(injectionSwitch[0], 1.0, 0.0, 1.0, cos(0.0), 0.0, abs(0.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0))) : _GLF_FUZZED(-106.883))), injectionSwitch[1])))).y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true))))))))
      return;
    }
   else
    {
     return;
    }
  }
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))))))), false || _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true))))), ! (! ((bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true)))))))))), true, false)), bool(bool(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true)))), false || (bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true))))))), true, false)), (bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true)))), false || (bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true))))))), true, false))) || false))))), ! _GLF_IDENTITY((! (false)), bool(_GLF_IDENTITY(bvec2((! (false)), true), bvec2(bvec4(bvec2((! (false)), true), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) && true), true)))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 0.0, 1.0, 0.0, sin(0.0), 0.0))), injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(-2.9) : injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])), injectionSwitch[1])))).y)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, false || (false)))))))
      return;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, sqrt(0.0), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), (dot(vec2(0.0, 1.0), vec2(0.0, 1.0))) / 1.0), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
            }
          }
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[0], _GLF_FUZZED(_GLF_IDENTITY(vec2(5571.7967, 1.7).t, float(mat4x2(vec2(5571.7967, 1.7).t, 1.0, abs(1.0), 0.0, round(length(normalize(abs(vec2(1.0, 1.0))))), 0.0, 0.0, 0.0))))), max(vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[0], _GLF_FUZZED(_GLF_IDENTITY(vec2(5571.7967, 1.7).t, float(mat4x2(vec2(5571.7967, 1.7).t, 1.0, abs(1.0), 0.0, round(length(normalize(abs(vec2(1.0, 1.0))))), 0.0, 0.0, 0.0))))), vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[0], _GLF_FUZZED(_GLF_IDENTITY(vec2(5571.7967, 1.7).t, float(mat4x2(vec2(5571.7967, 1.7).t, 1.0, abs(1.0), 0.0, round(length(normalize(abs(vec2(1.0, 1.0))))), 0.0, 0.0, 0.0))))))), vec2(_GLF_IDENTITY(_GLF_FUZZED(2029.0837), float(mat4x2(_GLF_FUZZED(2029.0837), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0))), (injectionSwitch)[1]), bvec2(false, true))).y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, false))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), false))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, false))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), false))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, false)))), ! (! ((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, false)))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), false))))), (! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), false)))))) && true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_IDENTITY(false, ! (! (false))))) || false))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-331.906)), float(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, 1.0), mat3(1.0) * (mat2x3(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, 1.0)))), clamp(_GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, 1.0), mat3(1.0) * (mat2x3(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, 1.0)))), max(float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, 1.0), mat3(1.0) * (mat2x3(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, 1.0)))), float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, 1.0), mat3(1.0) * (mat2x3(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, 1.0)))))), float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, 1.0), mat3(1.0) * (mat2x3(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, 1.0)))), float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, 1.0), mat3(1.0) * (mat2x3(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, 1.0)))))))), _GLF_IDENTITY(bool(true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(true), true && (bool(true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (_GLF_IDENTITY(bool(true), true && (bool(true)))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false))), (false) && true)))
            break;
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) || false) && (false))));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 else
  {
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(_GLF_IDENTITY(int(3), (int(3)) << 0), _GLF_IDENTITY(int(3), 0 | (int(3))))), 0 | (int(3)))))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)) && true)))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))) && true)))) || false))))))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(0.0, min(0.0, 0.0))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 0.0, 0.0, 1.0))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 0.0, 0.0, 1.0))), float(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((6302.6655 - -9005.8882))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, 1.0))), 1.0 * (_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 0.0, 0.0, 1.0))))))))), float(_GLF_FUZZED(542.840)), bool(false))), _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-42.64)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 0.0, 0.0, 1.0))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 0.0, 0.0, 1.0))), float(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 0.0, 0.0, 1.0))), 1.0 * (_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 0.0, 0.0, 1.0))))))))), float(_GLF_FUZZED(542.840)), bool(false))), 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 0.0, 0.0, 1.0))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 0.0, 0.0, 1.0))), float(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 0.0, 0.0, 1.0))), 1.0 * (_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 0.0, 0.0, 1.0))))))))), float(_GLF_FUZZED(542.840)), bool(false))))), _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-42.64)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w = subgroup_id;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))))))
    {
     return;
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), false || (_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(1.0, 1.0) * ((injectionSwitch) * mat2(1.0)))).y))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(normalize(-88.09))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))))), ! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) || false))), ! (! (! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))) || false)))))))))))
        break;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     break;
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_IDENTITY(_GLF_FUZZED(vec4(-2.3, 6.8, -2.6, 7.9).q), round(length(normalize(sqrt(vec2(1.0, 1.0))))) * (_GLF_IDENTITY(_GLF_FUZZED(vec4(-2.3, 6.8, -2.6, 7.9).q), (_GLF_FUZZED(vec4(-2.3, 6.8, -2.6, 7.9).q)) - 0.0)))), bool(false))), ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(vec4(-2.3, 6.8, -2.6, 7.9).q)), bool(false)))), ! (! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(vec4(-2.3, 6.8, -2.6, 7.9).q)), bool(false)))))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3(injectionSwitch.x, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, tan(0.0)), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, tan(0.0)), vec2(1.0, 1.0)), max(dot(vec2(0.0, tan(0.0)), vec2(1.0, 1.0)), dot(vec2(0.0, tan(0.0)), vec2(1.0, 1.0))))), 0.0, 1.0), (true ? mat3(injectionSwitch.x, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, tan(0.0)), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, tan(0.0)), vec2(1.0, 1.0)), max(dot(vec2(0.0, tan(0.0)), vec2(1.0, 1.0)), dot(vec2(0.0, tan(0.0)), vec2(1.0, 1.0))))), 0.0, 1.0) : _GLF_FUZZED(mat3(394.666, -7.7, 25.86, -9.9, -50.78, -4.9, -8220.5097, 6.6, -775.474)))))) > _GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, _GLF_IDENTITY(0.0, (0.0) + length(0.0))))).y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)), _GLF_IDENTITY(bool(bvec2(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)), true)), bool(_GLF_IDENTITY(bvec3(bool(bvec2(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)), true)), true, false), bvec3(bvec3(bvec3(bool(bvec2(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)), true)), true, false))))))))), (bool(false)) && true)))))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), true && (bool(_GLF_DEAD(false)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_DEAD(false), true))), bvec2(bvec3(bvec2(bvec2(bvec2(_GLF_DEAD(false), true))), false))))), false || (bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_DEAD(false), true))), bvec2(bvec3(bvec2(bvec2(bvec2(_GLF_DEAD(false), true))), false)))))))))
        return;
       barrier();
      }
     return;
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), int(int(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)), min(_injected_loop_counter, _injected_loop_counter))) | 0)))) < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (! (false || (false)))))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), true, true, true))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))))), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), true, true, true))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))))), false), bvec2(bvec3(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), true, true, true))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = (0 & 10792); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (true ? _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED(-62907)))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, _GLF_IDENTITY(true, bool(bvec4(true, false, true, false))), true))), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, true, true))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, true), true), bvec3(bvec3(bvec3(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-7959.4181), _GLF_FUZZED(241.891)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).y, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))), true))))), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, true), true), bvec3(bvec3(bvec3(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-7959.4181), _GLF_FUZZED(241.891)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).y, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))), true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, true), true), bvec3(bvec3(bvec3(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-7959.4181), _GLF_FUZZED(241.891)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).y, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))), true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, true), true), bvec3(bvec3(bvec3(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-7959.4181), _GLF_FUZZED(241.891)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).y, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))), true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), false, false)))))))))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        continue;
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(cos(vec2(8.0, 128.509))) : injectionSwitch)).y) || false)))))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 1 * (int(_GLF_IDENTITY(1, 0 ^ (1))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, exp(0.0), 1.0, 1.0, 0.0, 1.0, determinant(mat3(0.0, sin(0.0), 0.0, tan(0.0), 0.0, 0.0, 1.0, 1.0, 0.0)), abs(1.0), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))).y), float(_GLF_FUZZED(6.6)), bool(false)))))))
  {
   GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.y = num_workgroup;
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(~ (~ (gl_WorkGroupSize.x)), max(~ (~ (gl_WorkGroupSize.x)), ~ (~ (gl_WorkGroupSize.x))))), (gl_WorkGroupSize.x) ^ 0u), (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) ^ 0u)) ^ 0u);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, clamp(gl_WorkGroupID.x, gl_WorkGroupID.x, gl_WorkGroupID.x));
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u), (0u ^ 0u) ^ (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), (true ? (workgroup_base) : _GLF_FUZZED(workgroup_size))) - 0u))), _GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u)))) ^ 0u, min((_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u)) ^ 0u, (_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u)) ^ 0u))) + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w, clamp(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w, GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w, GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w)) * subgroup_size, (workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w * subgroup_size) | 0u) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2(_GLF_FUZZED(4.9), (mat2(1.0) * (injectionSwitch))[1]), vec2((mat2(1.0) * (injectionSwitch))[0], _GLF_FUZZED(-7716.0473)), bvec2(true, false)))).x > _GLF_IDENTITY(injectionSwitch.y, sin(sqrt(0.0)) + (injectionSwitch.y))))))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))))))))
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true))), (_GLF_DEAD(false)) || false))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))))), true && (false))))
      barrier();
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 1, ! (! (_GLF_IDENTITY(_injected_loop_counter != 1, false || (_injected_loop_counter != 1))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(1, (1) + 0), bool(_GLF_IDENTITY(bvec2(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (1) + 0), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), (1) + 0), false), false, true)), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec4(bvec2(_injected_loop_counter != _GLF_IDENTITY(1, (1) + 0), false), false, true)), bvec2(bvec3(bvec2(bvec4(bvec2(_injected_loop_counter != _GLF_IDENTITY(1, (1) + 0), false), false, true)), true))))))))), _GLF_IDENTITY(bool(bvec3(_injected_loop_counter != 1, false, false)), _GLF_IDENTITY(bool(bvec3(bool(bvec3(_injected_loop_counter != 1, false, false)), true, false)), (bool(bvec3(bool(bvec3(_injected_loop_counter != 1, false, false)), true, false))) && true)))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ 11.76)), _GLF_FUZZED((- 1.8))), vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(-863.974)), bool(false))), (injectionSwitch)[1]), bvec2(true, true))).y))))
      continue;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, true && (false))) || false))) || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - _GLF_ZERO(0.0, injectionSwitch.x))))))
          continue;
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         break;
        }
       break;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 for(int _injected_loop_counter = ((- -20075) & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.x = next_virtual_gid;
 for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) | 0), 1))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))), false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(true, ! (! (true))))))))))))))))
    {
     do
      {
       do
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), true))))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))))))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.x], uint(1), 4, 64, _GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), ~ (~ (_GLF_IDENTITY(~ (4), (~ (4)) | (~ (4)))))))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true, true, true))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y)))))), (bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 1.0, 0.0, 0.0, tan(0.0), 1.0, 0.0, 0.0, 1.0, 1.0))).x > injectionSwitch.y)) || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 0.0, 0.0, round(length(normalize(1.0))), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)))))))))) && true))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, float(float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(833.998)), bool(false)))))), _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(69.61))))), true && (injectionSwitch.x > injectionSwitch.y))))))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(false || (_GLF_DEAD(false)), ! (! (false || (_GLF_DEAD(false))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false || (_GLF_DEAD(false)), ! (! (false || (_GLF_DEAD(false))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false || (_GLF_DEAD(false)), ! (! (_GLF_IDENTITY(false, (false) || false) || (_GLF_DEAD(false))))), ! (! (_GLF_IDENTITY(false || (_GLF_DEAD(false)), ! (! (false || (_GLF_DEAD(false))))))))))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(_GLF_IDENTITY(float((injectionSwitch)[1]), max(float((injectionSwitch)[1]), float((injectionSwitch)[1])))))), vec2(_GLF_FUZZED(55.49), _GLF_FUZZED((115.824 * 716.146))), bvec2(false, false))).y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true, ! (! (((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))) && true, true && ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), ! (! (bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), (_GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), (false ? _GLF_FUZZED(-1.3) : max(injectionSwitch.x, injectionSwitch.x)))) * cos(log(1.0))))), float(_GLF_FUZZED(vec2(6820.0917, -7883.9869).s)), bool(_GLF_IDENTITY(false, (false) || false)))) > injectionSwitch.y)), true)))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))) && true)))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec3(! (false), true, true)), bool(bvec3(bool(bvec3(! (false), true, true)), false, true))))))))
          return;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), ! (! (_GLF_IDENTITY(! (! (_GLF_DEAD(false))), ! (! (! (! (_GLF_DEAD(false)))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint read = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), int(ivec2(~ (0), 0))))), (0) >> 0))));
 for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)), max((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) - 0)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_injected_loop_counter > 0))); _injected_loop_counter --)
  {
   _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.z = read, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.z = read, (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.z = read) / 1u)) / 1u), 0u ^ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.z = read, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.z = read, (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.z = read) / 1u)) / 1u)));
  }
 if(_GLF_DEAD(false))
  return;
 if(subgroup_local_id + 1 < subgroup_size)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   atomicStore(checker[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), max(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), _GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid))))], _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id, max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id, (false ? _GLF_FUZZED((subgroup_size / GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id)) : GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id)), _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id, (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id) / uvec4(1u, 1u, 1u, 1u)))).z, 4, 64, 4);
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(7.8)), float(1.0), bool(true))) : _GLF_FUZZED(53.08))), 1.0)), injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), (true ? _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(7.8)), float(1.0), bool(true))) : _GLF_FUZZED(53.08))), 1.0)), injectionSwitch.y)), (int(_GLF_ONE(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(7.8)), float(1.0), bool(true))) : _GLF_FUZZED(53.08))), 1.0)), _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, abs(1.0), 1.0, 1.0, 0.0, 0.0))).y))) | (int(_GLF_ONE(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(7.8)), float(1.0), bool(true))), (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(7.8)), float(1.0), bool(true)))) / 1.0) : _GLF_FUZZED(53.08))), 1.0)), injectionSwitch.y))))) | (int(_GLF_ONE(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(7.8)), float(1.0), bool(true))) : _GLF_FUZZED(_GLF_IDENTITY(53.08, (53.08) + 0.0)))), 1.0)), injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (_GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), true && (false || (false)))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))))))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)), bvec3(bvec4(bvec3(bvec3(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)), true)))))), false || (bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)), bvec3(bvec4(bvec3(bvec3(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)), true)))))))))) && true));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(vec4(-32.49, -153.022, -9.7, -9.6).z) : injectionSwitch.x)) > injectionSwitch.y, false || _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y : _GLF_FUZZED(-758.487)))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-758.487))))) && true))))))
        {
         if(_GLF_DEAD(false))
          return;
         do
          {
           for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), int(_GLF_ONE(1.0, injectionSwitch.y)) * (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (0 | 1) * (_GLF_IDENTITY(int(0), int(0))))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), int(_GLF_ONE(1.0, injectionSwitch.y)) * (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (0 | 1) * (_GLF_IDENTITY(int(0), int(0)))))))) ^ (0 & -72671)) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           return;
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(false)), (bool(_GLF_WRAPPED_LOOP(false))) && true)) || false))));
        }
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               for(int _injected_loop_counter = (_GLF_IDENTITY(0 | 0, (true ? _GLF_IDENTITY(0 | 0, (_GLF_IDENTITY(0 | 0, clamp(0 | 0, 0 | 0, _GLF_IDENTITY(0 | 0, clamp(0 | 0, 0 | 0, 0 | 0))))) * 1) : _GLF_FUZZED(-91893)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) ^ _GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec3(0, 1, 1))), (_GLF_IDENTITY(0, int(ivec3(0, 1, 1)))) >> 0)) >> _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) * (int(_GLF_ZERO(0.0, injectionSwitch.x))))))); _injected_loop_counter ++)
                {
                 return;
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          continue;
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false)))))), bool(_GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false))))))), ! (! (_GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false))))))), (bool(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))));
         if(_GLF_DEAD(false))
          break;
        }
       subgroupAll(false);
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), false)))))))
          continue;
         continue;
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (true ? _GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_injected_loop_counter --)) : _GLF_FUZZED((85106 * _injected_loop_counter)))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(injectionSwitch.x < injectionSwitch.y, true, true)), bool(_GLF_IDENTITY(bvec2(bool(bvec3(injectionSwitch.x < injectionSwitch.y, true, true)), true), bvec2(bvec3(bvec2(bool(bvec3(injectionSwitch.x < injectionSwitch.y, true, true)), true), true))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3(injectionSwitch.x < injectionSwitch.y, true, true)), bool(_GLF_IDENTITY(bvec2(bool(bvec3(injectionSwitch.x < injectionSwitch.y, true, true)), true), bvec2(bvec3(bvec2(bool(bvec3(injectionSwitch.x < injectionSwitch.y, true, true)), true), true)))))), bool(bvec3(! (_GLF_IDENTITY(bool(bvec3(injectionSwitch.x < injectionSwitch.y, true, true)), bool(_GLF_IDENTITY(bvec2(bool(bvec3(injectionSwitch.x < injectionSwitch.y, true, true)), true), bvec2(bvec3(bvec2(bool(bvec3(injectionSwitch.x < injectionSwitch.y, true, true)), true), true)))))), false, true))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))))))), bool(bool((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))) || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))))))))))))))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), bool(bvec4(! (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), true, false, true)))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
                {
                 return;
                }
              }
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true))), false || (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true)))))))
                {
                 do
                  {
                   return;
                   if(_GLF_DEAD(false))
                    break;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, false, true)))))
                  barrier();
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])), injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, sin(0.0) + (injectionSwitch.x)) > injectionSwitch.y))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 0.0, 1.0, 0.0, 0.0, 1.0)))))) || false)), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))))), true && ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, sin(0.0) + (injectionSwitch.x)) > injectionSwitch.y))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 0.0, 1.0, 0.0, 0.0, 1.0)))))) || false)), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))))))) && true), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)) && true)) || false)))
            barrier();
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(! (! (false)), false || (! (! (false)))))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! _GLF_IDENTITY((! (false)), bool(bvec3(_GLF_IDENTITY((! (false)), ! (! ((! (false))))), true, true))))), bool(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))) && true))), true)))))) && true))), ! (_GLF_IDENTITY(! ((! (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! _GLF_IDENTITY((! (false)), bool(bvec3(_GLF_IDENTITY((! (false)), ! (! ((! (false))))), true, true))))), bool(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))) && true))), true)))))) && true)))), (! ((! (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! _GLF_IDENTITY((! (false)), bool(bvec3(_GLF_IDENTITY((! (false)), ! (! ((! (false))))), true, true))))), bool(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))) && true))), true)))))) && true))))) || false))))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))))
        return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     atomicStore(checker[_GLF_IDENTITY(virtual_gid, (virtual_gid) / 1u)], _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.z, (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.z) | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.z, 0u + (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.z)))), 4, 64, 4);
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(true, bool(bvec2(true, false))), true)))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bool(_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), true), bvec2(bvec3(bvec2((false), true), false)))))))) || false)))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   subgroupAll(true);
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true)))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), bool(bvec2(! (_GLF_IDENTITY(false, (false) || false)), false)))))))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (true ? int(6) : _GLF_FUZZED(37666))))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(1), int(1))) + (_GLF_IDENTITY(int(6), int(6))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(66122) : int(6))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (40163 & 0)), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > (40163 & 0))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
              }
            }
          }
         else
          {
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           return;
          }
        }
       do
        {
         return;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false)) && true))));
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)))))))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))), bool(bvec4(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)) || false))))) && true))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (false)), true, false)))))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) + 0)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (false)), false, false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))), bool(bvec3(_GLF_IDENTITY(false, false || (false)), false, false))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(_GLF_IDENTITY(false, false || (false)), false, false))))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-77.78) : injectionSwitch.x)))) > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
