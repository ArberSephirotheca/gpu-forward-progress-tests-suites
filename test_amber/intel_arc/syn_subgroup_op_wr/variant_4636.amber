#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_0 {
 mat2x3 _f0;
 mat4x3 _f1;
 uint workgroup_base;
 mat3x2 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_2 {
 float _f0;
 mat2x4 _f1;
 ivec2 _f2;
 bvec4 _f3;
 _GLF_struct_1 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uvec2 GLF_merged2_0_1_4_1_1_12readworkgroup_id;
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (-22943 & 0) ^ (_injected_loop_counter --)))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) * 1.0))); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        {
         do
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), min(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), (_GLF_IDENTITY(1, clamp(1, 1, 1))) | (_GLF_IDENTITY(1, clamp(1, 1, 1)))))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (~ (_GLF_IDENTITY(int(0), max(int(0), int(0)))))))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
                  break;
                 return;
                }
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
               continue;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-2.4, 5.6)) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(log2(injectionSwitch)) : injectionSwitch)))).x > injectionSwitch.y))));
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          break;
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-324.976) : injectionSwitch.y))))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))))))));
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec3(false, false, false)), ! (! (bool(bvec3(false, false, false)))))) && true, ! (! ((bool(bvec3(false, false, false))) && _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   do
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))))))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))
        {
         return;
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(true, (true) || false) && (_GLF_WRAPPED_IF_TRUE(true))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, true))))))))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       return;
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = ((0 ^ 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, min(3, _GLF_IDENTITY(3, (3) << 0)))))) ^ 0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(min(_injected_loop_counter, _injected_loop_counter), min(min(_injected_loop_counter, _injected_loop_counter), min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0), _injected_loop_counter)))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, int(ivec4(_injected_loop_counter, 1, (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), int(0)), (0 << _GLF_IDENTITY(int(0), int(0))) >> 0)), 1))), (false ? _GLF_FUZZED(bitfieldInsert(_injected_loop_counter, 30249, _injected_loop_counter, _injected_loop_counter)) : _GLF_IDENTITY(_injected_loop_counter, int(ivec4(_injected_loop_counter, 1, _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-78490))), 0))))), (_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-78490))), 0)))))) * 1)), int(0)), (0 << _GLF_IDENTITY(int(0), int(0))) >> 0)), min(_GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-78490))), 0)))))), int(0)), (0 << _GLF_IDENTITY(int(0), int(0))) >> 0)), ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-78490))), 0)))))), int(0)), (0 << _GLF_IDENTITY(int(0), int(0))) >> 0))) - 0), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-78490))), 0)))))), int(0)), (0 << _GLF_IDENTITY(int(0), int(0))) >> 0)))), 1))))), _injected_loop_counter)) < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y)))))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
        break;
       break;
      }
     continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(int(_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)), 0 ^ (int(_GLF_ONE(1.0, injectionSwitch.y))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
          {
           return;
          }
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    break;
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) - 0)); _injected_loop_counter --)
    {
     GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x = subgroup_local_id;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
       GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.w = _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, min(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, _GLF_IDENTITY((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, max(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, ~ (_GLF_IDENTITY(~ (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size), (~ (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size)) >> uvec2(0u, 0u)))).x) / 1u, _GLF_IDENTITY(clamp((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(clamp((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u), (clamp((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, uint(uvec3(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u, 1u)))) / 1u)) | 0u), 1u, 1u, 1u), (uvec4(_GLF_IDENTITY(clamp((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, clamp(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x))) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u), (clamp((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u)) | 0u), 1u, 1u, _GLF_IDENTITY(1u, min(1u, 1u)))) | uvec4(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_local_id))), 0u, _GLF_IDENTITY(0u, (0u) << (0u << _GLF_IDENTITY(uint(6u), uint(6u)))), 0u))), max(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(clamp((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, ~ (~ (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size))).x) / 1u), (clamp((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u)) | 0u), 1u, 1u, 1u), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(clamp((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, _GLF_IDENTITY((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, max((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u)), (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u), (clamp((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u)) | 0u), 1u, 1u, 1u), (uvec4(_GLF_IDENTITY(clamp((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, _GLF_IDENTITY((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, max((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u)), (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u), (clamp((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u)) | 0u), 1u, 1u, 1u)) + uvec4(0u, 0u, 0u, 0u))) | uvec4(0u, 0u, 0u, 0u))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(clamp((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u), (clamp((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u)) | 0u), 1u, 1u, 1u), (uvec4(_GLF_IDENTITY(_GLF_IDENTITY(clamp((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u), (true ? _GLF_IDENTITY(clamp((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u), (clamp((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, ~ (~ (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size))).x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u)) / 1u) : _GLF_FUZZED(58720u))), (clamp((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, _GLF_IDENTITY((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x), ((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) | ((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x))) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u)) | 0u), 1u, 1u, 1u)) | uvec4(0u, 0u, 0u, 0u))), (158356u & 0u) | (uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(clamp((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u), (clamp((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u)) | 0u), 1u, 1u, 1u), (uvec4(_GLF_IDENTITY(_GLF_IDENTITY(clamp((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u), (true ? _GLF_IDENTITY(clamp((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u), (clamp((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, ~ (~ (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size))).x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u)) / 1u) : _GLF_FUZZED(58720u))), (clamp((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, _GLF_IDENTITY((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x), ((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) | ((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x))) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u)) | 0u), 1u, 1u, 1u)) | uvec4(0u, 0u, 0u, 0u))))))))), _GLF_IDENTITY((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, max((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, _GLF_IDENTITY((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, clamp((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x) / 1u))))))), GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))));
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))));
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       return;
      }
    }
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
      {
       do
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))), injectionSwitch.x)) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2(injectionSwitch.x, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), round(length(normalize(vec3(1.0, 1.0, 1.0))))), (mat2(injectionSwitch.x, 1.0, 0.0, round(length(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, float(mat2x4(1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, 1.0))))))))) / mat2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 1.0))))) > injectionSwitch.y)))))))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(1), int(1)), (0 << _GLF_IDENTITY(int(1), int(1))) + 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
        }
       do
        {
         return;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, _GLF_IDENTITY(false, ! (! (false))))), (_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), true, true, _GLF_IDENTITY(false, ! (! (false))))), ! (! (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, _GLF_IDENTITY(false, ! (! (false))))))))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true))))), true, true, _GLF_IDENTITY(false, ! (! (false))))), (_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-8.8) : injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-8.8) : injectionSwitch.y))), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-8.8) : injectionSwitch.y))), false))), true, true))), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-8.8) : injectionSwitch.y))), false, true, true)))), true, true, _GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), (_GLF_IDENTITY((! (false)), true && ((! (false))))) || false)))), ! (! (bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(dot(vec3(19.70, 568.595, 1.7), vec3(373.355, -5276.4124, 1.9)))))))))) > injectionSwitch.y)), true, true, _GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec4(_GLF_IDENTITY((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! (false)), false || ((! (false)))))), true, true, false)))))))))) && true), (_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! ((false)))))))), (_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, _GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY(! (! (bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(84.43), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-9615.5972)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).x > injectionSwitch.y)), true, true, _GLF_IDENTITY(false, ! (! (false))))))), bool(bvec3(_GLF_IDENTITY(! (! (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, _GLF_IDENTITY(false, ! (! (false))))))), bool(bvec4(! (! (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, _GLF_IDENTITY(false, ! (! (false))))))), true, true, false))), false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) < injectionSwitch.y))))))) && true)) && true)) && true), _GLF_IDENTITY(! (! (bool(bvec4(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_FUZZED(599.305)), bool(false)))) * (injectionSwitch)).y), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y, ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y, bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y))))))), true)))), true, true, _GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((! (false)), ((! (false))) && true)))))))), ! (! (! _GLF_IDENTITY((! (bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), bool(bvec2(bool(bvec2(true, false)), false)))), true, _GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false))))))), true && ((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false))))))), true)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false))))))), true))))))))))))))))), ((! (bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))), true))), true, true, _GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (bool(true)) || false))), false))))))), true && ((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false))))))), true)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false))))))), true)))))))))))))))))) && true))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), true), bvec2(bvec3(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), false, false))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(int(subgroup_local_id)))), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | 0)), (true ? _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | 0)) : _GLF_FUZZED(7120)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec3(injectionSwitch.y, tan(0.0), abs(0.0))), (true ? float(vec3(injectionSwitch.y, tan(0.0), abs(0.0))) : _GLF_FUZZED(-3.6))))), ((injectionSwitch.x > injectionSwitch.y)) && true))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true)))))))
        return;
      }
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             continue;
            }
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, tan(abs(vec2(0.0, 0.0))) + (injectionSwitch)).x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(false))
                      return;
                     return;
                    }
                  }
                 else
                  {
                  }
                }
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = ((0 ^ 0) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 & 1) ^ 1)); _injected_loop_counter --)
              {
               return;
              }
            }
          }
        }
       else
        {
        }
       do
        {
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))))))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))))))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))))))))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))))))))))))))) && true))
              return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-234.003), _GLF_FUZZED((7.0 - 6588.1614))), bvec2(false, false))).y))))
          break;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec2(gl_NumWorkGroups.x, 1u)))) >> 0u)))) / (_GLF_IDENTITY(1u ^ 0u, (_GLF_IDENTITY(1u, 0u ^ (1u)) ^ 0u) | 0u)));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), (bool(bvec2(true, true))) && true)), true)))), false || (_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), (bool(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), true && (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), false)))))))), true), bvec2(bvec3(bvec2(true, true), true))), true)), bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), false), bvec3(bvec4(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), false), true))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true))))), false), true))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), false), bvec3(bvec4(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), false), true))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), false), bvec3(bvec4(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), false), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), false), bvec3(bvec4(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), false), true)))), true)))))))))))))))) && true)), _GLF_IDENTITY(true, ! (! (true)))), bvec3(bvec3(bvec3(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), true && (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), false)))))))), true), bvec2(bvec3(bvec2(true, true), true))), true)), bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), false), true)))))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), false), bvec3(bvec4(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), _GLF_IDENTITY(true, bool(bool(true)))))), true)), false), true))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), false), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)))))), false))))), false), true))))))))))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), true && (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), false)))))))), true), bvec2(bvec3(bvec2(true, true), true))), true)), bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), false), true)))))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), false), bvec3(bvec4(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), _GLF_IDENTITY(true, bool(bool(true)))))), true)), false), true))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), false), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)))))), false))))), false), true))))))))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), true && (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), false)))))))), true), bvec2(bvec3(bvec2(true, true), true))), true)), bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), false), true)))))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), false), bvec3(bvec4(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), _GLF_IDENTITY(true, bool(bool(true)))))), true)), false), true))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), false), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)))))), false))))), false), true))))))))))))), (bool(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), true && (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), false)))))))), true), bvec2(bvec3(bvec2(true, true), true))), true)), bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), false), true)))))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), false), bvec3(bvec4(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), _GLF_IDENTITY(true, bool(bool(true)))))), true)), false), true))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), false), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true)))))), false))))), false), true)))))))))))))) && true)) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)), true))))))))))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        {
         do
          {
           return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))));
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   return;
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         if(_GLF_DEAD(false))
          return;
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            break;
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   if(_GLF_DEAD(false))
    break;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      break;
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.y = num_workgroup;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))) || false)));
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), (bool(bool(injectionSwitch.x > injectionSwitch.y))) || false))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), (false) && true)))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) && true)); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y = workgroup_size;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        return;
       return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))))
            return;
          }
         return;
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(2624.5276) : injectionSwitch.y))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(2624.5276) : injectionSwitch.y)))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-240.900) : injectionSwitch.x)) < injectionSwitch.y)))))), true)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), bool(bool(bool(_GLF_IDENTITY(false, ! (! (false)))))))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), bool(bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), ! (! (bool(bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))))), bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), bool(bool(bool(_GLF_IDENTITY(false, ! (! (false)))))))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), bool(bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))) && true), false, true))), false))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), true, false)))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY(1, ~ (~ (1))) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged2_0_1_4_1_1_12readworkgroup_id.y = workgroup_id;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
   for(int _injected_loop_counter = (0 | _GLF_IDENTITY(1, (1) | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         break;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
    }
   return;
  }
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(1.0, mat2x4(_GLF_IDENTITY(1.0, float(vec2(1.0, 0.0)))), ivec2(1), bvec4(true), _GLF_struct_1(_GLF_struct_0(mat2x3(1.0), mat4x3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(-399.501) : _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-0.4)), bool(false)))))), GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y * GLF_merged2_0_1_4_1_1_12readworkgroup_id.y, mat3x2(1.0), vec2(1.0)), _GLF_IDENTITY(vec2(1.0), _GLF_IDENTITY(_GLF_IDENTITY(vec2(1.0, 1.0), _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED((vec4(2.3, -1152.3490, -88.33, -54.73).tt - -6.9)) : vec2(1.0, 1.0), min(false ? _GLF_FUZZED((vec4(2.3, -1152.3490, -88.33, -54.73).tt - -6.9)) : vec2(1.0, 1.0), _GLF_IDENTITY(false ? _GLF_FUZZED((vec4(2.3, -1152.3490, -88.33, -54.73).tt - -6.9)) : vec2(1.0, 1.0), (false ? _GLF_FUZZED((vec4(2.3, -1152.3490, -88.33, -54.73).tt - -6.9)) : vec2(1.0, 1.0)) * vec2(1.0, 1.0))))), min((false ? _GLF_FUZZED((vec4(2.3, _GLF_IDENTITY(-1152.3490, mix(float(_GLF_FUZZED(-5.2)), float(-1152.3490), bool(true))), -88.33, -54.73).tt - -6.9)) : vec2(1.0, 1.0)), (false ? _GLF_FUZZED(_GLF_IDENTITY((vec4(2.3, -1152.3490, -88.33, -54.73).tt - -6.9), mix(vec2(_GLF_FUZZED((-8.9)), ((vec4(2.3, -1152.3490, -88.33, -54.73).tt - -6.9))[_GLF_IDENTITY(1, ~ (~ (1)))]), vec2((_GLF_IDENTITY((vec4(2.3, -1152.3490, -88.33, -54.73).tt - -6.9), _GLF_IDENTITY(min(_GLF_IDENTITY((vec4(2.3, -1152.3490, -88.33, -54.73).tt - -6.9), clamp(_GLF_IDENTITY((vec4(2.3, -1152.3490, -88.33, -54.73).tt - -6.9), ((vec4(2.3, -1152.3490, -88.33, -54.73).tt - -6.9)) / vec2(1.0, 1.0)), (vec4(2.3, -1152.3490, -88.33, -54.73).tt - -6.9), (vec4(2.3, -1152.3490, -88.33, -54.73).tt - -6.9))), (vec4(2.3, -1152.3490, -88.33, -54.73).tt - -6.9)), (false ? _GLF_FUZZED(sqrt(injectionSwitch)) : min(_GLF_IDENTITY((vec4(2.3, -1152.3490, -88.33, -54.73).tt - -6.9), clamp(_GLF_IDENTITY((vec4(2.3, -1152.3490, -88.33, -54.73).tt - -6.9), ((vec4(_GLF_IDENTITY(2.3, float(vec2(2.3, 0.0))), -1152.3490, -88.33, -54.73).tt - -6.9)) / vec2(1.0, 1.0)), (vec4(2.3, -1152.3490, -88.33, -54.73).tt - -6.9), (vec4(2.3, -1152.3490, -88.33, -54.73).tt - -6.9))), (vec4(2.3, -1152.3490, -88.33, -54.73).tt - -6.9))))))[0], _GLF_FUZZED(1736.9142)), bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(sqrt(0.0), (_GLF_IDENTITY(sqrt(0.0), (false ? _GLF_FUZZED(7.2) : _GLF_IDENTITY(sqrt(0.0), max(sqrt(0.0), sqrt(0.0)))))) / determinant(mat4(1.0, determinant(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, sin(0.0), 0.0, 0.0, 0.0, 1.0))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0))).x < injectionSwitch.y)), false)))) : _GLF_IDENTITY(vec2(1.0, 1.0), (_GLF_IDENTITY(vec2(1.0, 1.0), (false ? _GLF_FUZZED(injectionSwitch) : vec2(1.0, 1.0)))) + sin(vec2(0.0, 0.0))))))), _GLF_IDENTITY((vec2(1.0, 1.0)), max((vec2(1.0, 1.0)), _GLF_IDENTITY((vec2(1.0, 1.0)), ((vec2(1.0, 1.0))) - vec2(0.0, 0.0)))) - vec2(0.0, _GLF_IDENTITY(0.0, (0.0) - determinant(mat2(0.0, 0.0, _GLF_IDENTITY(1.0, float(vec4(1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, log(1.0)), vec4(1.0, 1.0, 1.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, log(1.0)), vec4(1.0, 1.0, 1.0, 1.0))), 1.0))), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(0.0, 0.0))) * 1.0)))))) * (vec2(1.0)))));
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(85.08) : injectionSwitch.y)))), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(85.08) : injectionSwitch.y)))), false, true, false))), _GLF_IDENTITY((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true) && true)))
  return;
 uint virtual_gid = _GLF_IDENTITY(_GLF_struct_replacement_2._f4._f0.workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, uint(uvec3(subgroup_id * subgroup_size, (0u >> _GLF_IDENTITY(uint(8u), uint(8u))), 1u)))) >> _GLF_IDENTITY(0u, 0u | (0u))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), max(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u), _GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u))) * subgroup_size), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u), _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), ~ (~ (_GLF_IDENTITY((subgroup_id), ((subgroup_id)) << 0u)))) >> 0u))) * subgroup_size), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, max(subgroup_id, _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), ~ (~ (_GLF_IDENTITY((subgroup_id), ((subgroup_id)) << 0u)))) >> 0u))) * subgroup_size), ((_GLF_IDENTITY(subgroup_id, max(subgroup_id, _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), ~ (~ (_GLF_IDENTITY((subgroup_id), ((subgroup_id)) << 0u)))) >> 0u))) * subgroup_size)) / uint(_GLF_ONE(1.0, injectionSwitch.y)))) / (1u | 0u))) / 1u) - 0u) + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.w, (true ? _GLF_struct_replacement_2._f4._f0.workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, uint(uvec3(subgroup_id * subgroup_size, (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(8u, (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, true && (true)))) ? _GLF_IDENTITY(8u, 0u ^ (_GLF_IDENTITY(8u, _GLF_IDENTITY(clamp(8u, 8u, _GLF_IDENTITY(8u, 1u * (8u))), ~ (_GLF_IDENTITY(~ (clamp(8u, 8u, 8u)), (~ (clamp(8u, 8u, 8u))) << 0u)))))) : _GLF_FUZZED(161843u)))), uint(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(8u, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec4(true, true, true, true)))))) || false) ? _GLF_IDENTITY(8u, 0u ^ (_GLF_IDENTITY(8u, clamp(8u, 8u, 8u)))) : _GLF_FUZZED(161843u)))), 1u * (uint(_GLF_IDENTITY(_GLF_IDENTITY(8u, uint(uvec3(8u, 0u, (0u | 0u)))), (true ? _GLF_IDENTITY(8u, 0u ^ (_GLF_IDENTITY(8u, clamp(8u, 8u, 8u)))) : _GLF_FUZZED(_GLF_IDENTITY(161843u, (161843u) | (161843u))))))))))), uint(_GLF_IDENTITY(8u, (8u) * 1u)))), 1u)))) >> 0u), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) >> _GLF_IDENTITY(0u, max(0u, 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) >> _GLF_IDENTITY(0u, max(0u, 0u))))), (true ? _GLF_IDENTITY(subgroup_id, max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) >> _GLF_IDENTITY(0u, max(0u, 0u))))) : _GLF_FUZZED(116130u)))) / 1u) * subgroup_size), ((_GLF_IDENTITY(subgroup_id, max(subgroup_id, _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), (true ? (subgroup_id) : _GLF_FUZZED(workgroup_id))) >> 0u))) * subgroup_size)) / _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, uint(uvec2(1u, 0u)))) | (1u))) + 0u)) - 0u) + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.w, max(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.w, GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.w)) : _GLF_FUZZED(num_workgroup)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, false || (false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
            continue;
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = _GLF_struct_replacement_2._f4._f0.workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, 0u | (subgroup_id * subgroup_size)) + (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.w + 1, max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.w, min(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.w, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id, min(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id, GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id)).w)) + 1, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id, _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id) << _GLF_IDENTITY(uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(reflect(2.7, 5225.8866)) : _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(max(uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), max(max(uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), max(uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))), ((GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id) << uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))) >> uvec4(0u, 0u, 0u, 0u))).w + 1))), ((GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.w + 1)) ^ 0u) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.x = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (next_virtual_gid)), (next_virtual_gid) + uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) + uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | 0u), _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.x = _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) + uint(_GLF_ZERO(0.0, injectionSwitch.x)))), ((GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.x = _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) + uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | 0u) | 0u);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), ~ (~ (~ (1)))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), ~ (~ (~ (1)))))), 1 * (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), ~ (~ (~ (1)))))))) : _GLF_FUZZED(-2940))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), false || (true && (true))))))
          {
           return;
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(bool(injectionSwitch.x > injectionSwitch.y), false, true, false)), ! (! (bool(bvec4(bool(injectionSwitch.x > injectionSwitch.y), false, true, false)))))))))) || (_injected_loop_counter > 0))), ! (! (bool(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_injected_loop_counter > 0))))))))); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_FALSE(false))), bool(bool(bool(bool(_GLF_WRAPPED_IF_FALSE(false))))))))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      continue;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       break;
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))))))))
        break;
      }
     else
      {
      }
     atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.x], uint(1), _GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(4, min(4, 4))), _GLF_IDENTITY(0 ^ (int(_GLF_IDENTITY(4, min(4, 4)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (0 ^ (int(_GLF_IDENTITY(4, min(4, 4)))))))), int(ivec3(int(int(_GLF_IDENTITY(4, min(4, 4)))), 0, 0))))) >> (_GLF_IDENTITY(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, max(0, 0)), 0)), ~ (~ (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, max(0, 0)), 0))))) ^ 0)), 64, 4);
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
            }
          }
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))
      return;
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = ((-31674 << -16462) & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((false), ! (! ((false)))))), (! (false)) || false)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), false || ((false)))) || false))))), false || (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), false || ((false)))) || false))))), (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (false), ! (! (! (false)))))), (! _GLF_IDENTITY((false), false || ((false)))) || false)))))) && true))))))
            {
             if(_GLF_DEAD(false))
              continue;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               return;
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))
          {
           if(_GLF_DEAD(false))
            continue;
           continue;
          }
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 uint read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (true ? _GLF_IDENTITY(64, 0 | _GLF_IDENTITY((64), _GLF_IDENTITY(_GLF_IDENTITY(((64)), (((64))) * 1) * 1, max(_GLF_IDENTITY(_GLF_IDENTITY(((64)), (((64))) * 1) * 1, (_GLF_IDENTITY(_GLF_IDENTITY(((64)), (((64))) * 1) * 1, int(ivec2(_GLF_IDENTITY(((64)), (((64))) * 1) * 1, 0)))) ^ 0), _GLF_IDENTITY(((64)), (((64))) * 1) * 1)))) : _GLF_FUZZED(_GLF_IDENTITY(-76013, (-76013) | (-76013))))), 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch) * mat2(1.0), (false ? _GLF_FUZZED(vec2(-487.391, 5.4)) : (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch) * mat2(1.0)))))).x, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch) * mat2(1.0), (false ? _GLF_FUZZED(vec2(-487.391, 5.4)) : (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch) * mat2(1.0)))))).x, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch) * mat2(1.0), (false ? _GLF_FUZZED(vec2(-487.391, 5.4)) : (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch) * mat2(1.0)))))).x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, min(8, 8))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | _GLF_IDENTITY(1, (1) + 0))); _injected_loop_counter ++)
      {
       return;
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(false)), true && (bool(_GLF_WRAPPED_IF_FALSE(false))))), bool(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(false)), bool(_GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_FALSE(false))), true && (_GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_FALSE(false))), ! (! (bool(bool(_GLF_WRAPPED_IF_FALSE(false)))))))))), true && (bool(_GLF_WRAPPED_IF_FALSE(false))))), false, false)))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        continue;
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
      break;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false), (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), false)), bool(bool(bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), false)))))))
        {
        }
       else
        {
         return;
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
    {
     do
      {
       do
        {
         return;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   GLF_merged2_0_1_4_1_1_12readworkgroup_id.x = read;
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(((0 | 0) ^ 0), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(((0 | 0) ^ _GLF_IDENTITY(0, _GLF_IDENTITY(min(0, 0), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(min(0, 0), 1, 0, ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))), (_GLF_IDENTITY(_GLF_IDENTITY(ivec4(min(0, 0), 1, 0, ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))), (ivec4(min(0, 0), 1, 0, ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))))) / ivec4(1, 1, 1, 1)), (ivec4(min(0, 0), 1, 0, ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))))) + ivec4(0, 0, 0, 0))) | (ivec4(min(0, _GLF_IDENTITY(0, int(int(0)))), 1, 0, ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))))))), (true ? int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(min(0, 0), 1, 0, ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))), min(ivec4(min(0, 0), 1, 0, ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))), _GLF_IDENTITY(ivec4(min(0, 0), 1, 0, ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))), ivec4(0, 0, 0, 0) ^ (_GLF_IDENTITY(ivec4(min(0, 0), 1, 0, ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))), (true ? ivec4(min(0, 0), 1, 0, ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))) : _GLF_FUZZED(ivec4(25305, -12938, 81618, 58337)))))))), (_GLF_IDENTITY(ivec4(min(0, 0), 1, 0, ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))), (ivec4(min(0, 0), 1, 0, ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(6, 6, _GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, (6) << 0), 6, 6))))), int(6))))) + ivec4(0, 0, 0, 0))) | (ivec4(min(0, 0), 1, 0, ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))))))) : _GLF_FUZZED(61028)))))), _GLF_IDENTITY(min(((0 | 0) ^ 0), (_GLF_IDENTITY((0 | 0), ((0 | 0)) | (_GLF_IDENTITY((_GLF_IDENTITY(0, min(0, 0)) | _GLF_IDENTITY(0, (0) | (0))), (_GLF_IDENTITY((0 | 0), _GLF_IDENTITY(((0 | _GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (0) | (0))))), min(_GLF_IDENTITY(((0 | _GLF_IDENTITY(0, (0) << 0))), max(((0 | _GLF_IDENTITY(0, _GLF_IDENTITY((0) << 0, ~ (~ (_GLF_IDENTITY((0) << 0, clamp(_GLF_IDENTITY((0) << 0, ((0) << 0) | 0), (0) << 0, _GLF_IDENTITY((0) << 0, ((0) << 0) | ((0) << 0)))))))))), ((0 | _GLF_IDENTITY(0, (0) << 0))))), ((0 | _GLF_IDENTITY(0, (0) << 0))))) | 0)) + 0))) ^ 0)), int(ivec3(min(((0 | 0) ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), (_GLF_IDENTITY((0 | 0), ((0 | 0)) / 1)) | (_GLF_IDENTITY((_GLF_IDENTITY(0, min(0, 0)) | 0), (_GLF_IDENTITY((0 | 0), ((0 | 0)) | 0)) + 0))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((0 | 0), ((0 | 0)) | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0, min(0, 0)) | 0), (_GLF_IDENTITY((0 | 0), ((_GLF_IDENTITY(0 | 0, max(0 | 0, 0 | 0)))) | 0)) + 0), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(0, min(0, 0)) | 0), (_GLF_IDENTITY((_GLF_IDENTITY(0 | 0, (0 | 0) + 0)), ((_GLF_IDENTITY(0 | 0, max(0 | 0, 0 | 0)))) | 0)) + 0)))))) : _GLF_FUZZED(_GLF_IDENTITY(-67642, (-67642) / 1)))) ^ 0)), 0, 1)))), 0, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-22288) : 1)))), 0 + (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((0 | 0) ^ _GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(clamp(_GLF_IDENTITY((0 | 0) ^ _GLF_IDENTITY(0, min(0, 0)), ((0 | 0) ^ _GLF_IDENTITY(0, min(0, 0))) << 0), (0 | 0) ^ _GLF_IDENTITY(0, min(0, 0)), (0 | 0) ^ _GLF_IDENTITY(0, min(0, 0))), clamp(_GLF_IDENTITY(clamp(_GLF_IDENTITY((0 | 0) ^ _GLF_IDENTITY(0, min(0, 0)), ((0 | 0) ^ _GLF_IDENTITY(0, min(0, 0))) << 0), (0 | 0) ^ _GLF_IDENTITY(0, min(0, 0)), (0 | 0) ^ _GLF_IDENTITY(0, min(0, 0))), min(clamp(_GLF_IDENTITY((0 | 0) ^ _GLF_IDENTITY(0, min(0, 0)), ((0 | 0) ^ _GLF_IDENTITY(0, min(0, 0))) << 0), (0 | 0) ^ _GLF_IDENTITY(0, min(0, 0)), (0 | 0) ^ _GLF_IDENTITY(0, min(0, 0))), _GLF_IDENTITY(clamp(_GLF_IDENTITY((0 | 0) ^ _GLF_IDENTITY(0, min(0, 0)), ((0 | 0) ^ _GLF_IDENTITY(0, min(0, 0))) << 0), (0 | 0) ^ _GLF_IDENTITY(0, min(0, 0)), (0 | 0) ^ _GLF_IDENTITY(0, min(0, 0))), int(ivec2(clamp(_GLF_IDENTITY((0 | 0) ^ _GLF_IDENTITY(0, min(0, 0)), ((0 | 0) ^ _GLF_IDENTITY(0, min(0, 0))) << 0), (0 | 0) ^ _GLF_IDENTITY(0, min(0, 0)), (0 | 0) ^ _GLF_IDENTITY(0, min(0, 0))), 1))))), clamp(_GLF_IDENTITY((0 | 0) ^ _GLF_IDENTITY(0, min(0, 0)), ((0 | 0) ^ _GLF_IDENTITY(0, min(0, 0))) << 0), (0 | 0) ^ _GLF_IDENTITY(0, min(0, 0)), (0 | 0) ^ _GLF_IDENTITY(0, min(0, 0))), clamp(_GLF_IDENTITY((0 | 0) ^ _GLF_IDENTITY(0, min(0, 0)), ((0 | 0) ^ _GLF_IDENTITY(0, min(0, 0))) << 0), (0 | 0) ^ _GLF_IDENTITY(0, min(0, 0)), (0 | 0) ^ _GLF_IDENTITY(0, min(0, 0))))))), ((_GLF_IDENTITY((0 | 0) ^ _GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(clamp(_GLF_IDENTITY((0 | 0) ^ _GLF_IDENTITY(0, min(0, 0)), ((0 | 0) ^ _GLF_IDENTITY(0, min(0, 0))) << 0), (0 | 0) ^ _GLF_IDENTITY(0, min(0, 0)), (0 | 0) ^ _GLF_IDENTITY(0, min(0, 0))), clamp(_GLF_IDENTITY(clamp(_GLF_IDENTITY((0 | 0) ^ _GLF_IDENTITY(0, min(0, 0)), ((0 | 0) ^ _GLF_IDENTITY(0, min(0, 0))) << 0), (0 | 0) ^ _GLF_IDENTITY(0, min(0, 0)), (0 | 0) ^ _GLF_IDENTITY(0, min(0, 0))), min(clamp(_GLF_IDENTITY((0 | 0) ^ _GLF_IDENTITY(0, min(0, 0)), ((0 | 0) ^ _GLF_IDENTITY(0, min(0, 0))) << 0), (0 | 0) ^ _GLF_IDENTITY(0, min(0, 0)), (0 | 0) ^ _GLF_IDENTITY(0, min(0, 0))), _GLF_IDENTITY(clamp(_GLF_IDENTITY((0 | 0) ^ _GLF_IDENTITY(0, min(0, 0)), ((0 | 0) ^ _GLF_IDENTITY(0, min(0, 0))) << 0), (0 | 0) ^ _GLF_IDENTITY(0, min(0, 0)), (0 | 0) ^ _GLF_IDENTITY(0, min(0, 0))), int(ivec2(clamp(_GLF_IDENTITY((0 | 0) ^ _GLF_IDENTITY(0, min(0, 0)), ((0 | 0) ^ _GLF_IDENTITY(0, min(0, 0))) << 0), (0 | 0) ^ _GLF_IDENTITY(0, min(0, 0)), (0 | 0) ^ _GLF_IDENTITY(0, min(0, 0))), 1))))), clamp(_GLF_IDENTITY((0 | 0) ^ _GLF_IDENTITY(0, min(0, 0)), ((0 | 0) ^ _GLF_IDENTITY(0, min(0, 0))) << 0), (0 | 0) ^ _GLF_IDENTITY(0, min(0, 0)), (0 | 0) ^ _GLF_IDENTITY(0, min(0, 0))), clamp(_GLF_IDENTITY((0 | 0) ^ _GLF_IDENTITY(0, min(0, 0)), ((0 | 0) ^ _GLF_IDENTITY(0, min(0, 0))) << 0), (0 | 0) ^ _GLF_IDENTITY(0, min(0, 0)), (0 | 0) ^ _GLF_IDENTITY(0, min(0, 0)))))))) >> (0 >> _GLF_IDENTITY(int(0), int(0)))), _GLF_IDENTITY(min(((0 | 0) ^ 0), (_GLF_IDENTITY((0 | 0), ((0 | 0)) | (_GLF_IDENTITY((_GLF_IDENTITY(0, min(0, 0)) | _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(21513)))), (_GLF_IDENTITY((0 | 0), ((0 | 0)) | 0)) + 0))) ^ 0)), int(ivec3(min(((0 | 0) ^ 0), (_GLF_IDENTITY((0 | 0), ((0 | 0)) | (_GLF_IDENTITY((_GLF_IDENTITY(0, min(0, 0)) | 0), (_GLF_IDENTITY((0 | 0), ((0 | 0)) | 0)) + 0))) ^ 0)), 0, 1)))), 0, 1)), max(int(ivec3(_GLF_IDENTITY((_GLF_IDENTITY((0 | 0), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)) < injectionSwitch.y)) ? (0 | 0) : _GLF_FUZZED(-96298))) ^ _GLF_IDENTITY(0, min(0, 0))), _GLF_IDENTITY(min(((0 | 0) ^ 0), (_GLF_IDENTITY((0 | 0), ((0 | 0)) | (_GLF_IDENTITY((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, 0 + (0))))), 0)) | 0), (_GLF_IDENTITY((0 | 0), ((0 | 0)) | 0)) + 0))) ^ 0)), int(ivec3(min(((0 | 0) ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), ((0 | 0)) | (_GLF_IDENTITY((_GLF_IDENTITY(0, min(0, 0)) | 0), (_GLF_IDENTITY((0 | 0), ((0 | 0)) | 0)) + 0))), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY((0 | 0), ((0 | 0)) | (_GLF_IDENTITY((_GLF_IDENTITY(0, min(0, 0)) | 0), (_GLF_IDENTITY((0 | 0), ((0 | 0)) | 0)) + 0))), 1)), int(ivec4(_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY((0 | 0), ((0 | 0)) | (_GLF_IDENTITY((_GLF_IDENTITY(0, min(0, 0)) | 0), (_GLF_IDENTITY((0 | 0), ((0 | 0)) | 0)) + 0))), 1)), (int(ivec2(_GLF_IDENTITY((0 | 0), ((0 | 0)) | (_GLF_IDENTITY((_GLF_IDENTITY(0, min(0, 0)) | 0), (_GLF_IDENTITY((0 | 0), ((0 | 0)) | 0)) + 0))), 1))) + 0), 0, 0, 0)))) ^ 0)), _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec3(0, 0, 0)), (int(ivec3(0, 0, 0))) | (int(ivec3(0, 0, 0))))), 1)))), 0, 1)), int(ivec3(_GLF_IDENTITY(((0 | 0) ^ _GLF_IDENTITY(0, min(0, 0))), _GLF_IDENTITY(min(((0 | 0) ^ 0), (_GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0)) | 0), _GLF_IDENTITY(((0 | 0)), clamp(((0 | 0)), ((0 | 0)), ((0 | 0)))) | (_GLF_IDENTITY((_GLF_IDENTITY(0, min(0, 0)) | 0), (_GLF_IDENTITY((0 | 0), ((0 | 0)) | 0)) + 0))) ^ 0)), int(ivec3(min(((0 | 0) ^ 0), _GLF_IDENTITY((_GLF_IDENTITY((0 | 0), ((0 | 0)) | (_GLF_IDENTITY((_GLF_IDENTITY(0, min(0, 0)) | 0), (_GLF_IDENTITY((0 | 0), ((0 | 0)) | 0)) + 0))) ^ 0), min(_GLF_IDENTITY((_GLF_IDENTITY((0 | 0), ((0 | 0)) | (_GLF_IDENTITY((_GLF_IDENTITY(0, min(0, 0)) | 0), _GLF_IDENTITY((_GLF_IDENTITY((0 | 0), ((0 | 0)) | 0)) + 0, ((_GLF_IDENTITY((0 | 0), ((0 | 0)) | 0)) + 0) >> 0)))) ^ 0), ((_GLF_IDENTITY((0 | 0), ((0 | 0)) | (_GLF_IDENTITY((_GLF_IDENTITY(0, min(0, 0)) | 0), _GLF_IDENTITY((_GLF_IDENTITY((0 | 0), ((0 | 0)) | 0)) + 0, (_GLF_IDENTITY((_GLF_IDENTITY((0 | 0), ((0 | 0)) | 0)) + 0, ((_GLF_IDENTITY((0 | 0), ((0 | 0)) | 0)) + 0) << 0)) | 0)))) ^ 0)) >> 0), _GLF_IDENTITY((_GLF_IDENTITY((0 | 0), ((0 | 0)) | (_GLF_IDENTITY((_GLF_IDENTITY(0, min(0, 0)) | 0), (_GLF_IDENTITY((0 | 0), ((0 | 0)) | 0)) + 0))) ^ 0), clamp((_GLF_IDENTITY((0 | 0), ((0 | 0)) | (_GLF_IDENTITY((_GLF_IDENTITY(0, min(0, 0)) | 0), (_GLF_IDENTITY((0 | 0), _GLF_IDENTITY(((0 | 0)), (((0 | 0))) | (((0 | 0)))) | 0)) + 0))) ^ 0), (_GLF_IDENTITY((0 | 0), ((0 | 0)) | (_GLF_IDENTITY((_GLF_IDENTITY(0, min(0, 0)) | 0), (_GLF_IDENTITY((0 | 0), ((0 | 0)) | 0)) + 0))) ^ 0), (_GLF_IDENTITY((0 | 0), ((0 | 0)) | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), (_GLF_IDENTITY(0, min(0, 0))) >> 0))) | 0), (_GLF_IDENTITY((0 | 0), ((0 | 0)) | 0)) + 0))) ^ 0)))))), 0, 1)))), 0, 1))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       break;
      }
     if(_GLF_DEAD(false))
      break;
     for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        break;
       do
        {
         GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.z = _GLF_IDENTITY(GLF_merged2_0_1_4_1_1_12readworkgroup_id.x, clamp(GLF_merged2_0_1_4_1_1_12readworkgroup_id.x, GLF_merged2_0_1_4_1_1_12readworkgroup_id.x, GLF_merged2_0_1_4_1_1_12readworkgroup_id.x));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 do
  {
   if(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.w + 1 < subgroup_size)
    {
     for(int _injected_loop_counter = (93693 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                continue;
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
                break;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))))
        continue;
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       break;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(true, (true) || false)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(false, true && (false)) || (bool(bvec3(! (_GLF_IDENTITY(true, (true) || false)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           continue;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (false)))))))
      {
       if(_GLF_DEAD(false))
        break;
       break;
      }
     atomicStore(checker[_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(virtual_gid, uint(uint(virtual_gid)))))], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id, ~ (~ (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id))), max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id, (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id) << uvec4(_GLF_IDENTITY(0u, (0u) | 0u), 0u, 0u, 0u)), GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id)).z, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.z, (false ? _GLF_FUZZED(subgroup_local_id) : GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.z))) / 1u), 4, 64, 4);
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(18.60, min(18.60, _GLF_IDENTITY(18.60, float(mat4x3(18.60, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, abs(1.0), abs(0.0), 1.0, 1.0, 0.0)))))), _GLF_FUZZED(_GLF_IDENTITY(1.1, float(float(_GLF_IDENTITY(1.1, mix(float(_GLF_FUZZED(9.6)), float(1.1), bool(true)))))))), _GLF_IDENTITY(vec2((_GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(_GLF_FUZZED(32.76), _GLF_FUZZED(float(_GLF_IDENTITY((vec3(-733.750, 75.55, 34.85) == vec3(-631.123, 0.7, -797.063)), ! (! ((vec3(-733.750, 75.55, 34.85) == vec3(-631.123, 0.7, -797.063)))))))), vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))[0], ((injectionSwitch) * mat2(1.0))[1]), (false ? _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), (_GLF_FUZZED(injectionSwitch)) / vec2(1.0, 1.0)) : vec2((_GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(_GLF_FUZZED(32.76), _GLF_FUZZED(float((vec3(-733.750, 75.55, 34.85) == vec3(-631.123, 0.7, -797.063))))), vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))[0], ((injectionSwitch) * mat2(1.0))[1]))), bvec2(true, true))), (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), (false ? _GLF_FUZZED(mat2(-288.465, -871.886, -8.5, -596.294)) : mat2(1.0))), (injectionSwitch) * mat2(1.0)))).y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y))))))
        return;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(-3158, (-3158) << 0)) : int(3), (false ? _GLF_FUZZED(_GLF_IDENTITY(-3158, (-3158) << 0)) : int(3)) ^ (0 >> _GLF_IDENTITY(int(6), int(6)))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), min(_GLF_IDENTITY(int(3), (int(3)) | (_GLF_IDENTITY(int(3), (int(3)) / 1))), int(3))))) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             break;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) && true), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) && true, false || (_GLF_IDENTITY((_GLF_DEAD(false)) && true, ! (! ((_GLF_DEAD(false)) && true)))))), true))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) && true, false || (_GLF_IDENTITY((_GLF_DEAD(false)) && true, ! (! ((_GLF_DEAD(false)) && true)))))), true))), true, true)))))))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), tan(0.0), 0.0, 1.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat2x4(-869.723, 71.59, -227.792, 8.8, -5.9, -2.2, 8.9, -0.1)) : mat2x4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), tan(0.0), 0.0, 1.0, 1.0, 0.0, 0.0))))).y)), false, false)))))))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        break;
       break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     subgroupAll(false);
    }
   else
    {
     do
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         atomicStore(checker[virtual_gid], GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_17next_virtual_gidnum_workgroupreadsubgroup_local_id.z, 4, 64, 4);
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))));
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(intBitsToFloat(ivec2(96609, -94729))))).y))))
      return;
     if(_GLF_DEAD(false))
      return;
     subgroupAll(true);
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), bool(bool((false)))), false, true))) && true)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat2x4(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, sqrt(0.0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           return;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   break;
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec4(false, false, true, false)), ! (_GLF_IDENTITY(! (bool(bvec4(false, false, _GLF_IDENTITY(true, ! (! (true))), false))), bool(_GLF_IDENTITY(bvec2(! (bool(bvec4(false, false, true, false))), true), bvec2(bvec2(bvec2(! (bool(bvec4(false, false, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, (true) && true), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(true, (true) && true), false)))))), false))), true))))))))), ! (! ((_GLF_IDENTITY(bool(bvec4(false, false, true, false)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(bool(bvec4(false, false, true, false)), ! (! (bool(bvec4(false, false, true, false))))))), true && (! (! (bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, _GLF_IDENTITY(false, (false) || false)), bvec3(bvec4(bvec3(false, true, _GLF_IDENTITY(false, (false) || false)), false)))), (bool(bvec3(false, true, false))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)))), false, true, false)))))))))))), bool(bool(! (! _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec4(false, false, true, false)), ! (_GLF_IDENTITY(! (bool(bvec4(false, false, _GLF_IDENTITY(true, ! (! (true))), false))), bool(_GLF_IDENTITY(bvec2(! (bool(bvec4(false, false, true, false))), true), bvec2(bvec2(bvec2(! (bool(bvec4(false, false, true, false))), true))))))))), ! (! ((_GLF_IDENTITY(bool(bvec4(false, false, true, false)), _GLF_IDENTITY(! (! (bool(bvec4(false, false, true, false)))), true && (! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, _GLF_IDENTITY(false, (false) || false))), (bool(bvec3(false, true, false))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)))), false, true, false))), (! (bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, _GLF_IDENTITY(false, (false) || false))), (bool(bvec3(false, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false))), false))) || _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)))), false, true, false)))) || false)))))))))))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((99296 & 0) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x2(injectionSwitch.x, 0.0, 0.0, abs(abs(1.0)), sin(0.0), 1.0)), mix(float(_GLF_FUZZED(-9.4)), float(float(mat3x2(injectionSwitch.x, 0.0, 0.0, abs(abs(1.0)), sin(0.0), 1.0))), bool(true)))) > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x2(injectionSwitch.x, 0.0, 0.0, abs(abs(1.0)), sin(0.0), 1.0)), mix(float(_GLF_FUZZED(-9.4)), float(float(mat3x2(injectionSwitch.x, 0.0, 0.0, abs(abs(1.0)), sin(0.0), 1.0))), bool(true)))) > injectionSwitch.y))))))
        break;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)) && true)))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))))))))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
  }
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)))), (false ? _GLF_FUZZED((_injected_loop_counter ++)) : _injected_loop_counter)) > int(_GLF_ZERO(0.0, injectionSwitch.x)))) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), (_GLF_IDENTITY(bool(bvec2(false, true)), bool(bool(bool(bvec2(false, true)))))) || false))), bool(bvec2(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), true)))))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, ~ (~ (1)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             continue;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        continue;
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
