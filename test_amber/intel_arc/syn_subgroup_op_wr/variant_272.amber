#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, _GLF_IDENTITY(true, (true) && true), false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))), injectionSwitch)).y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))), injectionSwitch)).y))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     do
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << (0 >> _GLF_IDENTITY(int(5), int(5)))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))))))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))))))), true)))))))) || false)))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 0.0))).x, max(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 0.0))).x, _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 0.0))).x)) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, false, true)))))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), true && (bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), (false ? _GLF_FUZZED(clamp(4769.7554, -212.258, -713.467)) : injectionSwitch.x)) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4373.7584), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(4.5)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x > injectionSwitch.y))))), _GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, (true) || false)) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(5254.5185), _GLF_FUZZED(64.54)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), (injectionSwitch) - vec2(0.0, 0.0)).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.8), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED((13.43)), (_GLF_FUZZED((13.43))) + 0.0)), bvec2(_GLF_IDENTITY(true, false || (true)), false))).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5256.9316))))) > injectionSwitch.y))))), true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.8), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((13.43))), bvec2(true, false))).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5256.9316))))) > injectionSwitch.y))))), true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.8), (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, cos(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, abs(1.0)))))[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY((_GLF_IDENTITY(13.43, mix(float(_GLF_IDENTITY(13.43, max(13.43, 13.43))), float(_GLF_FUZZED(2.2)), bool(false)))), ((_GLF_IDENTITY(13.43, mix(float(_GLF_IDENTITY(13.43, max(13.43, 13.43))), float(_GLF_FUZZED(2.2)), bool(false))))) * 1.0))), bvec2(true, false))).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5256.9316))))) > injectionSwitch.y))))), true, false)))))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))) || false)))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), true && (bool(_GLF_DEAD(false)))))))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false)))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, true && (false)), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, true && (false)), true, true))))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_WRAPPED_IF_TRUE(true)))))))))))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y)))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (_GLF_IDENTITY(1, (1) | (1))) << 0)) + (0 & -68765)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (0 << _GLF_IDENTITY(int(3), int(3))) ^ (_GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter --)))))
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                    barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, false)))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))) || false)))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                barrier();
               do
                {
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, true, false)), bool(bvec4(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, true, false)), true && (bool(bvec4(_GLF_DEAD(false), false, true, false)))), false, true, true)))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true), false)))))))
                  barrier();
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) || false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) || false, false || (((injectionSwitch.x > injectionSwitch.y)) || false))), bool(bvec3(! (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) || false, false || (((injectionSwitch.x > injectionSwitch.y)) || false))), true, false)))))))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(false, false || (false)) || ((_GLF_DEAD(false))))))))), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(false, false || (false)) || ((_GLF_DEAD(false)))))))))) && true))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), (_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), (bool(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) || false)) || false)))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                }
              }
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && _GLF_IDENTITY(true, ! (! (true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false) && _GLF_IDENTITY(true, ! (! (true))), false || ((false) && _GLF_IDENTITY(true, ! (! (true)))))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))))))))))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((+ 9.6))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y))));
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false, false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), false || (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec3((false), false, true)), ! (! (bool(bvec3((false), false, true)))))))))))))))), ((! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), false || _GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), false || ((! (_GLF_IDENTITY(false, ! (! (false))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! _GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), false || (! (_GLF_IDENTITY(false, ! (! (false)))))))), bool(_GLF_IDENTITY(bool((! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), false || (! (_GLF_IDENTITY(false, ! (! (false))))))))), (_GLF_IDENTITY(bool((! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), false || (! (_GLF_IDENTITY(false, ! (! (false))))))))), false || (bool((! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), false || (! (_GLF_IDENTITY(false, ! (! (false)))))))))))) && true))), ((! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bvec4(false, true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (false)))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))))))) || _GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), (injectionSwitch.x > injectionSwitch.y))))))), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), false || (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_IDENTITY(false, bool(bvec2(false, true))))))))))), ((! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), false || (! (_GLF_IDENTITY(false, ! (! (false))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), true)), _GLF_IDENTITY(! (! (bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), false || (! (_GLF_IDENTITY(false, ! (! (false)))))))), ((! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), false || (! (_GLF_IDENTITY(false, ! (! (false))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), false || (! (_GLF_IDENTITY(false, ! (! (false)))))))), ((! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), false || (! (_GLF_IDENTITY(false, ! (! (false))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), true)))), bool(bvec3(_GLF_IDENTITY(! (! (bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), false || (! (_GLF_IDENTITY(false, ! (! (false)))))))), ((! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), false || (! (_GLF_IDENTITY(false, ! (! (false))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), false || (! (_GLF_IDENTITY(false, ! (! (false)))))))), ((! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), false || (! (_GLF_IDENTITY(false, ! (! (false))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), true)))), ! (! (! (! (bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), false || (! (_GLF_IDENTITY(false, ! (! (false)))))))), ((! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), false || (! (_GLF_IDENTITY(false, ! (! (false))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), false || (! (_GLF_IDENTITY(false, ! (! (false)))))))), ((! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), false || (! (_GLF_IDENTITY(false, ! (! (false))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), true))))))), true, false))))));
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY(0, (0) + 0) ^ (int(6))))) >> _GLF_IDENTITY(int(6), int(6)))), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))))) >> _GLF_IDENTITY(int(6), int(6)))), true, true))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       do
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))));
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(8972.3772)), float(injectionSwitch.y), bool(true))), injectionSwitch.y)))))))))) || false)), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(8972.3772)), float(injectionSwitch.y), bool(true))), injectionSwitch.y)))))))))) || false)), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(8972.3772)), float(injectionSwitch.y), bool(true))), injectionSwitch.y)))))))))) || false)))))))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), _GLF_IDENTITY(false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ((_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))), false || (false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ((_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), true && (! ((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / abs(1.0)) > injectionSwitch.y)))))), ((_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true && (! ((injectionSwitch.x > injectionSwitch.y))), ! (! (true && (! ((injectionSwitch.x > injectionSwitch.y)))))))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))) && true)))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             else
              {
               do
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                barrier();
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-8.3, min(-8.3, -8.3)))), float(injectionSwitch.x), bool(true))), injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && (false)), true, false, true))) ? _GLF_FUZZED(uintBitsToFloat(uvec2(118956u, 116973u))) : injectionSwitch)).y, (true ? _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(uintBitsToFloat(_GLF_IDENTITY(uvec2(118956u, 116973u), uvec2(0u, _GLF_IDENTITY(0u, 0u ^ (0u))) ^ (uvec2(118956u, 116973u))))) : injectionSwitch)).y : _GLF_FUZZED(3.9)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(ldexp(vec2(695.195, 4058.0552), ivec2(_GLF_IDENTITY(-38655, clamp(-38655, _GLF_IDENTITY(-38655, (-38655) + int(_GLF_ZERO(0.0, injectionSwitch.x))), -38655)), 23386))) : _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, _GLF_IDENTITY(abs(0.0), 0.0 + (_GLF_IDENTITY(abs(0.0), min(abs(0.0), abs(0.0))))), 1.0))))).x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))), true), false))), false, false))))));
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) - uvec3(0u, 0u, 0u)), _GLF_IDENTITY(clamp(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[_GLF_IDENTITY(1, (1) | (0 << _GLF_IDENTITY(int(7), int(7))))], gl_NumWorkGroups[2])), gl_NumWorkGroups)), _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups)), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups)), clamp(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups)), _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups)), _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))))) ^ uvec3(0u, 0u, 0u))) << uvec3(0u, 0u, _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, min(0u, 0u))))), (_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ~ (_GLF_IDENTITY(~ ((gl_NumWorkGroups)), ~ (~ (~ ((gl_NumWorkGroups))))))))), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ~ (_GLF_IDENTITY(~ ((gl_NumWorkGroups)), ~ (~ (~ ((gl_NumWorkGroups))))))))), (false ? _GLF_FUZZED(uvec3(184198u, 151707u, 63206u)) : (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | _GLF_IDENTITY((gl_NumWorkGroups), ~ (_GLF_IDENTITY(~ ((gl_NumWorkGroups)), ~ (~ (~ ((gl_NumWorkGroups))))))))))))) << uvec3(0u, 0u, 0u)) << uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u))), _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((true ? gl_NumWorkGroups : _GLF_FUZZED((subgroup_id & uvec3(91882u, 126937u, 42442u)))), (_GLF_IDENTITY((true ? gl_NumWorkGroups : _GLF_FUZZED((subgroup_id & uvec3(91882u, 126937u, 42442u)))), (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(3u), uvec3(3u))) | ((true ? gl_NumWorkGroups : _GLF_FUZZED((subgroup_id & uvec3(91882u, 126937u, 42442u))))))) + uvec3(0u, 0u, 0u)))), uvec3(uvec4(clamp(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], _GLF_IDENTITY(gl_NumWorkGroups[1], (gl_NumWorkGroups[1]) << 0u), gl_NumWorkGroups[_GLF_IDENTITY(2, ~ (~ (2)))])), gl_NumWorkGroups)), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])), _GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(gl_NumWorkGroups, min(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) - uvec3(0u, 0u, 0u)))), gl_NumWorkGroups))[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])), gl_NumWorkGroups))) - uvec3(0u, 0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, min(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) * uvec3(1u, 1u, 1u)))), gl_NumWorkGroups)), (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) | (gl_NumWorkGroups))) << uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u)))), _GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED((_GLF_IDENTITY(subgroup_id & uvec3(91882u, 126937u, 42442u), uvec3(0u, 0u, 0u) | (subgroup_id & uvec3(91882u, 126937u, 42442u)))))))), 1u)))), uvec3(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(clamp(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec4(gl_NumWorkGroups, uint(_GLF_ZERO(0.0, injectionSwitch.x)))))[2])), gl_NumWorkGroups)), _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((gl_NumWorkGroups) | (gl_NumWorkGroups), ((gl_NumWorkGroups) | (gl_NumWorkGroups)) * uvec3(1u, 1u, 1u)))))) << uvec3(0u, 0u, 0u)), _GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED((subgroup_id & uvec3(91882u, _GLF_IDENTITY(126937u, min(126937u, 126937u)), 42442u)))))), uvec3(uvec4(clamp(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])), gl_NumWorkGroups)), _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))) << uvec3(0u, 0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups)), (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) || false) ? gl_NumWorkGroups : _GLF_FUZZED((subgroup_id & uvec3(91882u, 126937u, 42442u)))))), 1u)))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups)), _GLF_IDENTITY(clamp(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(46295u, 68309u, 144779u)) : gl_NumWorkGroups))[1], gl_NumWorkGroups[2])), gl_NumWorkGroups)), _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))) << uvec3(0u, 0u, 0u)), _GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED((subgroup_id & uvec3(91882u, 126937u, 42442u)))))), uvec3(uvec4(clamp(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[2], (gl_NumWorkGroups[2]) - 0u))), gl_NumWorkGroups)), _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))) << uvec3(0u, 0u, 0u)), _GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED((subgroup_id & uvec3(91882u, 126937u, 42442u)))))), 1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups)), _GLF_IDENTITY(clamp(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[_GLF_IDENTITY(0, (false ? _GLF_FUZZED(95404) : _GLF_IDENTITY(0, (0) / ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))))))], _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(46295u, 68309u, 144779u)) : gl_NumWorkGroups)), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(46295u, 68309u, 144779u)) : gl_NumWorkGroups)), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(46295u, 68309u, 144779u)) : gl_NumWorkGroups))))) | (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(46295u, 68309u, 144779u)) : gl_NumWorkGroups))))[1], gl_NumWorkGroups[2])), gl_NumWorkGroups)), _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))) << uvec3(0u, 0u, 0u)), _GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED((subgroup_id & uvec3(91882u, 126937u, 42442u)))))), uvec3(uvec4(clamp(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[2], (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, 0u, 0u))[2]) - 0u))), gl_NumWorkGroups)), _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))) << uvec3(0u, 0u, 0u)), _GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED((subgroup_id & uvec3(91882u, 126937u, 42442u)))))), 1u))))) / uvec3(1u, 1u, 1u)), max(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(clamp(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(gl_NumWorkGroups[0], _GLF_IDENTITY((gl_NumWorkGroups[0]), _GLF_IDENTITY(uint(uvec4((gl_NumWorkGroups[0]), ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 0u, 0u)), uint(uint(uint(uvec4((gl_NumWorkGroups[0]), ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 0u, 0u)))))) | (gl_NumWorkGroups[0])), gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[2], (_GLF_IDENTITY(gl_NumWorkGroups[2], 0u ^ (gl_NumWorkGroups[2]))) - 0u))), gl_NumWorkGroups)), _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))) << uvec3(0u, 0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED((subgroup_id & uvec3(91882u, 126937u, 42442u))))), clamp(_GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED((subgroup_id & uvec3(91882u, _GLF_IDENTITY(126937u, (126937u) / ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))), 42442u))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED((subgroup_id & uvec3(91882u, 126937u, 42442u))))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED((subgroup_id & _GLF_IDENTITY(uvec3(91882u, 126937u, 42442u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uvec3(91882u, 126937u, 42442u), (uvec3(91882u, 126937u, 42442u)) >> uvec3(0u, 0u, 0u))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(uvec3(91882u, 126937u, 42442u), (uvec3(91882u, 126937u, 42442u)) >> uvec3(0u, 0u, 0u))), ~ (~ (~ (_GLF_IDENTITY(uvec3(91882u, 126937u, 42442u), (uvec3(91882u, 126937u, 42442u)) >> uvec3(0u, 0u, 0u)))))), ~ (_GLF_IDENTITY(uvec3(91882u, 126937u, 42442u), (uvec3(91882u, 126937u, 42442u)) >> uvec3(0u, 0u, 0u))), ~ (_GLF_IDENTITY(uvec3(91882u, 126937u, 42442u), (uvec3(91882u, 126937u, 42442u)) >> uvec3(0u, 0u, 0u))))))))))))), _GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_IDENTITY(_GLF_FUZZED((subgroup_id & uvec3(91882u, 126937u, 42442u))), (_GLF_FUZZED((subgroup_id & uvec3(91882u, 126937u, 42442u)))) ^ uvec3(0u, 0u, 0u))))))), uvec3(uvec4(clamp(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], _GLF_IDENTITY(gl_NumWorkGroups[1], _GLF_IDENTITY((gl_NumWorkGroups[1]), (true ? (gl_NumWorkGroups[1]) : _GLF_FUZZED(subgroup_id))) >> 0u), gl_NumWorkGroups[2])), gl_NumWorkGroups)), _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))) << _GLF_IDENTITY(uvec3(0u, 0u, 0u), clamp(_GLF_IDENTITY(uvec3(0u, _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, 1u * (0u)))), 0u), (uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u)), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)))), _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(true, true && (true)) ? gl_NumWorkGroups : _GLF_FUZZED((subgroup_id & uvec3(91882u, 126937u, _GLF_IDENTITY(42442u, 0u | (_GLF_IDENTITY(42442u, clamp(42442u, 42442u, _GLF_IDENTITY(42442u, (42442u) ^ 0u))))))))))), 1u)))), _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(clamp(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(1, 1, 0), max(ivec3(1, 1, 0), ivec3(1, 1, 0)))))], _GLF_IDENTITY(gl_NumWorkGroups[2], min(_GLF_IDENTITY(gl_NumWorkGroups[2], (_GLF_IDENTITY(gl_NumWorkGroups[2], max(gl_NumWorkGroups[2], gl_NumWorkGroups[2]))) ^ 0u), gl_NumWorkGroups[2])))), gl_NumWorkGroups)), _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))) << uvec3(0u, 0u, 0u)), _GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED((subgroup_id & uvec3(91882u, 126937u, 42442u)))))), uvec3(uvec4(clamp(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(gl_NumWorkGroups[0], (gl_NumWorkGroups[0]) | (gl_NumWorkGroups[0])), gl_NumWorkGroups[1], gl_NumWorkGroups[2])), uvec3(gl_NumWorkGroups[0], _GLF_IDENTITY(gl_NumWorkGroups[1], max(gl_NumWorkGroups[1], gl_NumWorkGroups[1])), gl_NumWorkGroups[2])), gl_NumWorkGroups)), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | uvec3(0u, 0u, 0u))) | (gl_NumWorkGroups)), (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) + (gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))) | (gl_NumWorkGroups))) << uvec3(0u, 0u, 0u)), _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY((true ? gl_NumWorkGroups : _GLF_FUZZED((_GLF_IDENTITY(subgroup_id & uvec3(91882u, 126937u, 42442u), max(subgroup_id & _GLF_IDENTITY(uvec3(91882u, 126937u, 42442u), clamp(uvec3(91882u, 126937u, 42442u), _GLF_IDENTITY(uvec3(91882u, 126937u, 42442u), min(_GLF_IDENTITY(uvec3(91882u, 126937u, 42442u), max(uvec3(91882u, 126937u, 42442u), uvec3(91882u, 126937u, 42442u))), uvec3(91882u, 126937u, 42442u))), uvec3(91882u, 126937u, 42442u))), subgroup_id & uvec3(91882u, 126937u, 42442u)))))), ((true ? gl_NumWorkGroups : _GLF_FUZZED((_GLF_IDENTITY(subgroup_id & uvec3(91882u, 126937u, 42442u), max(subgroup_id & _GLF_IDENTITY(uvec3(91882u, 126937u, 42442u), clamp(uvec3(91882u, 126937u, 42442u), _GLF_IDENTITY(uvec3(91882u, 126937u, 42442u), min(_GLF_IDENTITY(uvec3(91882u, 126937u, 42442u), max(uvec3(91882u, 126937u, 42442u), uvec3(91882u, 126937u, 42442u))), uvec3(91882u, 126937u, 42442u))), uvec3(91882u, 126937u, 42442u))), subgroup_id & uvec3(91882u, 126937u, 42442u))))))) | ((true ? gl_NumWorkGroups : _GLF_FUZZED((_GLF_IDENTITY(subgroup_id & uvec3(91882u, 126937u, 42442u), max(subgroup_id & _GLF_IDENTITY(uvec3(91882u, 126937u, 42442u), clamp(uvec3(91882u, 126937u, 42442u), _GLF_IDENTITY(uvec3(91882u, 126937u, 42442u), min(_GLF_IDENTITY(uvec3(91882u, 126937u, 42442u), max(uvec3(91882u, 126937u, 42442u), uvec3(91882u, 126937u, 42442u))), uvec3(91882u, 126937u, 42442u))), uvec3(91882u, 126937u, 42442u))), subgroup_id & uvec3(91882u, 126937u, 42442u)))))))), ((true ? _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups)) : _GLF_FUZZED(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id & uvec3(91882u, 126937u, 42442u), max(subgroup_id & uvec3(91882u, 126937u, 42442u), subgroup_id & uvec3(91882u, _GLF_IDENTITY(126937u, (_GLF_IDENTITY(126937u, uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(126937u, clamp(126937u, 126937u, 126937u)), 1u, 0u, 1u), (uvec4(_GLF_IDENTITY(126937u, clamp(126937u, 126937u, 126937u)), 1u, 0u, 1u)) | (uvec4(_GLF_IDENTITY(126937u, clamp(126937u, 126937u, 126937u)), 1u, 0u, 1u)))))) - 0u), 42442u)))), uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ ((_GLF_IDENTITY(subgroup_id & uvec3(91882u, 126937u, 42442u), max(subgroup_id & uvec3(91882u, 126937u, 42442u), subgroup_id & uvec3(91882u, _GLF_IDENTITY(126937u, (_GLF_IDENTITY(126937u, uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(126937u, clamp(126937u, 126937u, 126937u)), 1u, 0u, 1u), (uvec4(_GLF_IDENTITY(126937u, clamp(126937u, 126937u, 126937u)), 1u, 0u, 1u)) | (uvec4(_GLF_IDENTITY(126937u, clamp(126937u, 126937u, 126937u)), 1u, 0u, 1u)))))) - 0u), 42442u))))))))) | ((_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) ? gl_NumWorkGroups : _GLF_FUZZED((_GLF_IDENTITY(subgroup_id & uvec3(91882u, 126937u, 42442u), max(subgroup_id & uvec3(91882u, 126937u, 42442u), subgroup_id & uvec3(91882u, 126937u, 42442u)))))))))), 1u)))))), _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(clamp(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(gl_NumWorkGroups, 1u), uvec4(1u, 1u, 1u, 1u) * (uvec4(gl_NumWorkGroups, 1u))), clamp(uvec4(gl_NumWorkGroups, 1u), uvec4(gl_NumWorkGroups, 1u), uvec4(gl_NumWorkGroups, 1u)))))[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])), _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(0u, 0u, 0u) | (gl_NumWorkGroups), clamp(_GLF_IDENTITY(uvec3(0u, 0u, 0u) | (gl_NumWorkGroups), (uvec3(0u, 0u, 0u) | (gl_NumWorkGroups)) >> uvec3(0u, 0u, 0u)), uvec3(0u, 0u, 0u) | (gl_NumWorkGroups), uvec3(0u, 0u, 0u) | (gl_NumWorkGroups)))))), _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) - uvec3(0u, 0u, 0u))) | (gl_NumWorkGroups))) << uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) / (1u | 1u)))), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED((subgroup_id & uvec3(91882u, 126937u, 42442u))))), (_GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED((subgroup_id & uvec3(91882u, 126937u, 42442u)))))) ^ uvec3(0u, 0u, 0u))), uvec3(uvec4(clamp(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-98850) : _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) + 0)))))], gl_NumWorkGroups[1], gl_NumWorkGroups[2])), _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) + (gl_NumWorkGroups))) / uvec3(1u, 1u, 1u)))), min(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-98850) : _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) + 0)))))], gl_NumWorkGroups[1], gl_NumWorkGroups[2])), _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) + (gl_NumWorkGroups))) / uvec3(1u, 1u, 1u)))), _GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-98850) : _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) + 0)))))], gl_NumWorkGroups[1], gl_NumWorkGroups[2])), _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) + (gl_NumWorkGroups))) / uvec3(1u, 1u, 1u)))))), _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))) << uvec3(_GLF_IDENTITY(0u, (0u) | 0u), 0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED((subgroup_id & uvec3(91882u, 126937u, 42442u))))), _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED((subgroup_id & uvec3(91882u, 126937u, 42442u))))))), clamp(uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED((subgroup_id & uvec3(91882u, 126937u, 42442u))))))), uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED((subgroup_id & uvec3(91882u, 126937u, 42442u))))))), _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED((subgroup_id & uvec3(91882u, 126937u, 42442u))))))), (uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED((subgroup_id & uvec3(91882u, 126937u, 42442u)))))))) | uvec3(0u, 0u, 0u)))))), 1u)))))), uint(_GLF_ONE(1.0, injectionSwitch.y))))).x, _GLF_IDENTITY(0u + (gl_NumWorkGroups.x), (true ? _GLF_IDENTITY(0u + (gl_NumWorkGroups.x), uint(uvec2(0u + (gl_NumWorkGroups.x), 1u))) : _GLF_FUZZED(subgroup_id))));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, 1.0)) * (injectionSwitch)).x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, exp(0.0), 1.0, 1.0, 1.0))), injectionSwitch.x)) > injectionSwitch.y)), false, true)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) || false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_GLF_DEAD(false)) || false, bool(bvec2((_GLF_DEAD(false)) || false, false))), false, false, false)), ! (! (bool(bvec4(_GLF_IDENTITY((_GLF_DEAD(false)) || false, bool(bvec2((_GLF_DEAD(false)) || false, false))), false, false, false))))))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false)))))), ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))))))))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))) || false)));
           do
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * sqrt(abs(vec2(1.0, 1.0)))).y))))
              barrier();
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     else
      {
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(2.6))), injectionSwitch.x))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   else
    {
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         barrier();
        }
      }
     barrier();
    }
  }
 else
  {
  }
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(workgroup_id), max(_GLF_IDENTITY(uint(workgroup_id), (uint(workgroup_id)) + 0u), uint(workgroup_id))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(workgroup_id), max(_GLF_IDENTITY(uint(workgroup_id), (uint(workgroup_id)) + 0u), uint(workgroup_id))), max(_GLF_IDENTITY(uint(workgroup_id), max(_GLF_IDENTITY(uint(workgroup_id), (uint(workgroup_id)) + 0u), uint(workgroup_id))), _GLF_IDENTITY(_GLF_IDENTITY(uint(workgroup_id), max(_GLF_IDENTITY(uint(workgroup_id), (uint(workgroup_id)) + 0u), uint(workgroup_id))), uint(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id))), max(_GLF_IDENTITY(uint(workgroup_id), (uint(workgroup_id)) + 0u), uint(workgroup_id))))))))) | (_GLF_IDENTITY(uint(workgroup_id), max(_GLF_IDENTITY(uint(workgroup_id), (uint(workgroup_id)) + 0u), uint(workgroup_id)))))), _GLF_IDENTITY(_GLF_IDENTITY(min(uint(_GLF_IDENTITY(uint(workgroup_id), max(_GLF_IDENTITY(uint(workgroup_id), (uint(_GLF_IDENTITY(workgroup_id, (workgroup_id) + 0u))) + 0u), uint(workgroup_id)))), uint(_GLF_IDENTITY(uint(workgroup_id), max(_GLF_IDENTITY(uint(workgroup_id), (uint(workgroup_id)) + 0u), uint(workgroup_id))))), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(min(uint(_GLF_IDENTITY(uint(workgroup_id), max(_GLF_IDENTITY(uint(workgroup_id), (uint(workgroup_id)) + 0u), uint(workgroup_id)))), uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(workgroup_id), (uint(workgroup_id)) | (uint(workgroup_id))), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(workgroup_id), (uint(workgroup_id)) + 0u), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id))), (uint(workgroup_id)) + 0u), _GLF_IDENTITY(uint(workgroup_id), (uint(workgroup_id)) + 0u), _GLF_IDENTITY(uint(workgroup_id), (uint(workgroup_id)) + 0u))), uint(workgroup_id))))), max(min(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(workgroup_id), max(_GLF_IDENTITY(uint(workgroup_id), (uint(workgroup_id)) + 0u), uint(workgroup_id))), min(_GLF_IDENTITY(uint(workgroup_id), max(_GLF_IDENTITY(uint(workgroup_id), (uint(workgroup_id)) + 0u), uint(workgroup_id))), _GLF_IDENTITY(uint(workgroup_id), max(_GLF_IDENTITY(uint(workgroup_id), (uint(workgroup_id)) + 0u), uint(workgroup_id)))))), uint(_GLF_IDENTITY(uint(workgroup_id), max(_GLF_IDENTITY(uint(workgroup_id), (uint(workgroup_id)) + 0u), uint(workgroup_id))))), min(uint(_GLF_IDENTITY(uint(workgroup_id), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(workgroup_id), (uint(workgroup_id)) + 0u), ~ (~ (_GLF_IDENTITY(uint(workgroup_id), (uint(workgroup_id)) + _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))))), uint(workgroup_id)))), uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(workgroup_id), clamp(uint(workgroup_id), uint(workgroup_id), _GLF_IDENTITY(uint(workgroup_id), uint(_GLF_IDENTITY(uvec3(uint(workgroup_id), 1u, 1u), (uvec3(uint(workgroup_id), 1u, 1u)) >> uvec3(0u, 0u, 0u)))))), max(_GLF_IDENTITY(uint(workgroup_id), (uint(workgroup_id)) + 0u), uint(workgroup_id))))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (uint(uvec2(_GLF_IDENTITY(min(uint(_GLF_IDENTITY(uint(workgroup_id), _GLF_IDENTITY(max(_GLF_IDENTITY(uint(workgroup_id), (uint(workgroup_id)) + 0u), uint(workgroup_id)), (max(_GLF_IDENTITY(uint(workgroup_id), (uint(workgroup_id)) + 0u), uint(workgroup_id))) | (max(_GLF_IDENTITY(uint(workgroup_id), (uint(workgroup_id)) + 0u), uint(workgroup_id)))))), uint(_GLF_IDENTITY(uint(workgroup_id), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_id, (workgroup_id) ^ (uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED((- float(64326u)))), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true)))) >> _GLF_IDENTITY(uint(1u), uint(1u))))), _GLF_IDENTITY((uint(workgroup_id)) + 0u, max((uint(workgroup_id)) + 0u, (uint(workgroup_id)) + 0u))), uint(workgroup_id))))), max(min(uint(_GLF_IDENTITY(uint(workgroup_id), max(_GLF_IDENTITY(uint(workgroup_id), (uint(workgroup_id)) + 0u), uint(workgroup_id)))), uint(_GLF_IDENTITY(uint(workgroup_id), _GLF_IDENTITY(max(_GLF_IDENTITY(uint(workgroup_id), (uint(workgroup_id)) + 0u), uint(workgroup_id)), (0u >> _GLF_IDENTITY(uint(5u), uint(5u))) | (max(_GLF_IDENTITY(uint(workgroup_id), (uint(workgroup_id)) + 0u), uint(workgroup_id))))))), min(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_id, (workgroup_id) - 0u)), max(_GLF_IDENTITY(uint(workgroup_id), _GLF_IDENTITY((uint(workgroup_id)) + 0u, (false ? _GLF_FUZZED(atomicExchange(num_workgroup, workgroup_size)) : (uint(workgroup_id)) + 0u))), uint(workgroup_id)))), uint(_GLF_IDENTITY(uint(workgroup_id), max(_GLF_IDENTITY(uint(workgroup_id), (uint(workgroup_id)) + 0u), uint(workgroup_id))))))), uint(_GLF_ZERO(0.0, injectionSwitch.x))))) / 1u)), uint(uint(min(uint(_GLF_IDENTITY(uint(workgroup_id), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(workgroup_id), ~ (_GLF_IDENTITY(~ (uint(workgroup_id)), min(~ (uint(workgroup_id)), ~ (uint(workgroup_id)))))), (uint(workgroup_id)) + 0u), uint(workgroup_id)))), uint(_GLF_IDENTITY(uint(workgroup_id), max(_GLF_IDENTITY(uint(workgroup_id), _GLF_IDENTITY((uint(workgroup_id)) + 0u, max(_GLF_IDENTITY((uint(workgroup_id)) + 0u, (_GLF_IDENTITY((uint(workgroup_id)), ~ (_GLF_IDENTITY(~ ((uint(workgroup_id))), uint(uvec4(~ ((uint(workgroup_id))), 0u, 1u, 1u))))) + 0u) << (0u << _GLF_IDENTITY(uint(4u), uint(4u)))), (uint(workgroup_id)) + 0u))), uint(workgroup_id))))))))), ~ (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(workgroup_id), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(workgroup_id), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_id, min(_GLF_IDENTITY(workgroup_id, (workgroup_id) - 0u), workgroup_id))), (uint(workgroup_id)) | (uint(workgroup_id)))), clamp((_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_id, min(_GLF_IDENTITY(workgroup_id, (workgroup_id) - 0u), workgroup_id))), (uint(workgroup_id)) | (uint(workgroup_id)))), _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_id, min(_GLF_IDENTITY(workgroup_id, (workgroup_id) - 0u), workgroup_id))), (uint(workgroup_id)) | (uint(workgroup_id)))), ((_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_id, min(_GLF_IDENTITY(workgroup_id, (workgroup_id) - 0u), workgroup_id))), (uint(workgroup_id)) | (uint(workgroup_id))))) - 0u), (_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_id, min(_GLF_IDENTITY(workgroup_id, (workgroup_id) - 0u), workgroup_id))), (uint(workgroup_id)) | (uint(workgroup_id)))))), (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(workgroup_id), (uint(workgroup_id)) | (uint(workgroup_id))), uint(uvec4(uint(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, 0u | (_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id))))) + 0u), (_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, 0u | (_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id))))) + 0u)) + 0u)) >> 0u)), 1u, 1u, 0u))), (uint(workgroup_id)) | _GLF_IDENTITY((uint(workgroup_id)), (false ? _GLF_FUZZED(workgroup_id) : (uint(workgroup_id)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(workgroup_id), uint(uvec4(uint(workgroup_id), 1u, 1u, 0u))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(workgroup_id), uint(uvec4(uint(workgroup_id), 1u, 1u, 0u))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(workgroup_id), uint(uvec4(uint(workgroup_id), 1u, 1u, 0u))), min(_GLF_IDENTITY(uint(workgroup_id), uint(uvec4(uint(workgroup_id), 1u, 1u, 0u))), _GLF_IDENTITY(uint(workgroup_id), uint(uvec4(uint(workgroup_id), 1u, 1u, 0u)))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(workgroup_id), uint(uvec4(uint(workgroup_id), 1u, 1u, 0u))), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(uint(workgroup_id), uint(uvec4(uint(workgroup_id), 1u, 1u, 0u))), clamp(_GLF_IDENTITY(uint(workgroup_id), uint(uvec4(uint(workgroup_id), 1u, 1u, 0u))), _GLF_IDENTITY(uint(workgroup_id), uint(uvec4(uint(workgroup_id), 1u, 1u, 0u))), _GLF_IDENTITY(uint(workgroup_id), uint(uvec4(uint(workgroup_id), 1u, 1u, 0u))))))), _GLF_IDENTITY(uint(workgroup_id), uint(uvec4(uint(workgroup_id), 1u, 1u, 0u))))), (uint(workgroup_id)) | _GLF_IDENTITY((uint(workgroup_id)), (false ? _GLF_FUZZED(workgroup_id) : (uint(workgroup_id))))))) << 0u)) ^ 0u))), (_GLF_IDENTITY(uint(workgroup_id), min(uint(workgroup_id), uint(workgroup_id)))) + 0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)), min(_GLF_IDENTITY(uint(workgroup_id), clamp(uint(workgroup_id), uint(workgroup_id), uint(workgroup_id))), _GLF_IDENTITY(uint(workgroup_id), min(uint(workgroup_id), uint(workgroup_id)))))))), 0u ^ (uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(workgroup_id), _GLF_IDENTITY(min(_GLF_IDENTITY(uint(workgroup_id), _GLF_IDENTITY((_GLF_IDENTITY(uint(workgroup_id), max(uint(workgroup_id), uint(workgroup_id)))) - 0u, max(_GLF_IDENTITY((_GLF_IDENTITY(uint(workgroup_id), (true ? uint(workgroup_id) : _GLF_FUZZED(workgroup_id)))) - 0u, 0u + ((uint(workgroup_id)) - 0u)), (uint(workgroup_id)) - 0u))), uint(workgroup_id)), 0u ^ (min(_GLF_IDENTITY(uint(workgroup_id), _GLF_IDENTITY((uint(workgroup_id)) - 0u, max(_GLF_IDENTITY((uint(workgroup_id)) - 0u, 0u + ((uint(workgroup_id)) - _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) | (0u)), 0u)))), (uint(workgroup_id)) - 0u))), uint(workgroup_id))))), max(_GLF_IDENTITY(uint(workgroup_id), (_GLF_IDENTITY(uint(workgroup_id), clamp(uint(workgroup_id), uint(workgroup_id), _GLF_IDENTITY(uint(workgroup_id), (uint(workgroup_id)) << 0u)))) + 0u), uint(workgroup_id))))))))));
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))))), (true ? _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(min(subgroup_id * subgroup_size, subgroup_id * subgroup_size), ~ (~ (min(subgroup_id * subgroup_size, subgroup_id * subgroup_size)))), max(_GLF_IDENTITY(min(subgroup_id * subgroup_size, subgroup_id * subgroup_size), ~ (~ (min(subgroup_id * subgroup_size, subgroup_id * subgroup_size)))), _GLF_IDENTITY(min(subgroup_id * subgroup_size, subgroup_id * subgroup_size), ~ (~ (min(subgroup_id * subgroup_size, subgroup_id * subgroup_size))))))) : _GLF_FUZZED(161605u)));
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u), workgroup_base))) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u))) + subgroup_base + subgroup_local_id, 0u + (workgroup_base + subgroup_base + subgroup_local_id)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, uint(uvec2(workgroup_base + subgroup_base + subgroup_local_id, 0u))), min(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, uint(uvec2(workgroup_base + subgroup_base + subgroup_local_id, 0u))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, uint(uvec2(workgroup_base + subgroup_base + subgroup_local_id, 0u))), (_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, uint(uvec2(workgroup_base + subgroup_base + subgroup_local_id, 0u)))) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), subgroup_base)) + subgroup_local_id), 0u + ((_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_base + subgroup_local_id))) | _GLF_IDENTITY((workgroup_base + subgroup_base + subgroup_local_id), clamp((workgroup_base + subgroup_base + subgroup_local_id), _GLF_IDENTITY((workgroup_base + subgroup_base + subgroup_local_id), max((workgroup_base + subgroup_base + subgroup_local_id), _GLF_IDENTITY((workgroup_base + subgroup_base + subgroup_local_id), ((workgroup_base + subgroup_base + subgroup_local_id)) | ((workgroup_base + subgroup_base + subgroup_local_id))))), (workgroup_base + subgroup_base + subgroup_local_id))))) + (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(7u), uint(7u)), max(0u << _GLF_IDENTITY(uint(7u), uint(7u)), 0u << _GLF_IDENTITY(uint(7u), uint(_GLF_IDENTITY(7u, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(7u, min(7u, 7u)), 1u, 0u)), clamp(uint(uvec3(_GLF_IDENTITY(7u, min(7u, 7u)), 1u, 0u)), uint(uvec3(_GLF_IDENTITY(7u, min(7u, 7u)), 1u, 0u)), uint(uvec3(_GLF_IDENTITY(7u, min(7u, 7u)), 1u, 0u))))))))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, 0u + (workgroup_base + subgroup_base + subgroup_local_id)), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, _GLF_IDENTITY(uint(uvec2(workgroup_base + subgroup_base + subgroup_local_id, 0u)), (_GLF_IDENTITY(uint(uvec2(workgroup_base + subgroup_base + subgroup_local_id, 0u)), 0u ^ (uint(uvec2(workgroup_base + subgroup_base + subgroup_local_id, 0u))))) >> 0u)), _GLF_IDENTITY((workgroup_base + subgroup_base + subgroup_local_id), 0u + (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_base + subgroup_local_id), (1u ^ 0u) * ((_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_base + subgroup_local_id))))) | (workgroup_base + subgroup_base + subgroup_local_id))) + (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(7u), uint(7u)), max(0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), (_GLF_IDENTITY(uint(7u), uint(7u))) << 0u), _GLF_IDENTITY(uint(7u), uint(7u)))), 0u << _GLF_IDENTITY(uint(7u), uint(7u)))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, 0u + (workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, uint(uvec2(workgroup_base + subgroup_base + subgroup_local_id, 0u))), _GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) << (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))) + subgroup_local_id), 0u + ((_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_base + subgroup_local_id))) | (workgroup_base + subgroup_base + subgroup_local_id))) + (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(7u), uint(_GLF_IDENTITY(7u, (7u) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))), max(0u << _GLF_IDENTITY(uint(7u), uint(7u)), 0u << _GLF_IDENTITY(uint(7u), uint(7u)))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u), workgroup_base))) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) - _GLF_IDENTITY(0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0u : _GLF_FUZZED(atomicCompSwap(num_workgroup, workgroup_base, subgroup_id))))))) + subgroup_base + subgroup_local_id, 0u + (workgroup_base + subgroup_base + subgroup_local_id)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u), subgroup_local_id))) | (subgroup_local_id)), uint(uvec2(workgroup_base + subgroup_base + subgroup_local_id, 0u))), min(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, uint(uvec2(workgroup_base + subgroup_base + subgroup_local_id, 0u))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 0u + (workgroup_base)) + subgroup_base + subgroup_local_id, uint(uvec2(workgroup_base + subgroup_base + subgroup_local_id, 0u))), (_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, uint(uvec2(workgroup_base + subgroup_base + subgroup_local_id, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) * 1u)) | 0u))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), subgroup_base)) + _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id))), 0u + ((_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_base + subgroup_local_id))) | _GLF_IDENTITY((workgroup_base + subgroup_base + subgroup_local_id), clamp((workgroup_base + subgroup_base + subgroup_local_id), _GLF_IDENTITY((workgroup_base + subgroup_base + subgroup_local_id), max((workgroup_base + subgroup_base + subgroup_local_id), _GLF_IDENTITY((workgroup_base + subgroup_base + subgroup_local_id), _GLF_IDENTITY(((workgroup_base + subgroup_base + subgroup_local_id)) | ((workgroup_base + subgroup_base + subgroup_local_id)), (((workgroup_base + subgroup_base + subgroup_local_id)) | ((workgroup_base + subgroup_base + subgroup_local_id))) | 0u)))), (workgroup_base + subgroup_base + subgroup_local_id))))) + (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(7u), uint(7u)), max(0u << _GLF_IDENTITY(uint(7u), uint(7u)), 0u << _GLF_IDENTITY(uint(7u), uint(_GLF_IDENTITY(7u, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(7u, min(7u, 7u)), 1u, 0u)), clamp(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(7u, (_GLF_IDENTITY(7u, 0u | (7u))) >> 0u), min(7u, 7u)), 1u, 0u)), uint(uvec3(_GLF_IDENTITY(7u, min(7u, 7u)), 1u, 0u)), uint(uvec3(_GLF_IDENTITY(7u, min(7u, 7u)), 1u, 0u))))))))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, 0u + (workgroup_base + subgroup_base + subgroup_local_id)), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, _GLF_IDENTITY(uint(uvec2(workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), 0u)), (_GLF_IDENTITY(uint(uvec2(workgroup_base + subgroup_base + subgroup_local_id, 0u)), 0u ^ (uint(uvec2(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) | 0u) + subgroup_local_id, 0u))))) >> 0u)), _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + subgroup_base + subgroup_local_id), 0u + (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_base + subgroup_local_id), (1u ^ 0u) * ((_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_base + subgroup_local_id))))) | (workgroup_base + subgroup_base + subgroup_local_id), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY((workgroup_base + subgroup_base + subgroup_local_id), 0u + (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_base + subgroup_local_id), (1u ^ 0u) * ((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), (_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base))) ^ 0u) + subgroup_base + subgroup_local_id))))) | (workgroup_base + subgroup_base + subgroup_local_id))))) + (_GLF_IDENTITY(_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(7u), uint(7u)), max(0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), (_GLF_IDENTITY(uint(7u), uint(7u))) << 0u), _GLF_IDENTITY(uint(7u), uint(7u)))), 0u << _GLF_IDENTITY(uint(7u), uint(7u)))), min(_GLF_IDENTITY(_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(7u), uint(7u)), max(0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), (_GLF_IDENTITY(uint(7u), uint(7u))) << 0u), _GLF_IDENTITY(uint(7u), uint(7u)))), 0u << _GLF_IDENTITY(uint(7u), uint(7u)))), uint(uint(_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(7u), uint(7u)), max(0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), (_GLF_IDENTITY(uint(7u), uint(7u))) << 0u), _GLF_IDENTITY(uint(7u), uint(7u)))), 0u << _GLF_IDENTITY(uint(7u), uint(7u))))))), _GLF_IDENTITY(0u << _GLF_IDENTITY(uint(7u), uint(7u)), max(0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), (_GLF_IDENTITY(uint(7u), uint(7u))) << 0u), _GLF_IDENTITY(uint(7u), uint(7u)))), 0u << _GLF_IDENTITY(uint(7u), uint(7u)))))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, 0u + (workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, _GLF_IDENTITY(uint(uvec2(workgroup_base + subgroup_base + subgroup_local_id, 0u)), (uint(uvec2(workgroup_base + subgroup_base + subgroup_local_id, 0u))) | (_GLF_IDENTITY(uint(uvec2(workgroup_base + subgroup_base + subgroup_local_id, 0u)), ~ (~ (uint(uvec2(workgroup_base + subgroup_base + subgroup_local_id, 0u)))))))), _GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) << (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))), (_GLF_IDENTITY(subgroup_base, (subgroup_base) << (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))) >> 0u) + subgroup_local_id), 0u + ((_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_base + subgroup_local_id))) | (workgroup_base + subgroup_base + subgroup_local_id))) + (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(7u), uint(_GLF_IDENTITY(7u, (7u) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))), max(0u << _GLF_IDENTITY(uint(7u), uint(7u)), 0u << _GLF_IDENTITY(uint(7u), uint(7u))))))))))))) - 0u);
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, ~ (~ (_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(false ? _GLF_FUZZED(42425u) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)), (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base))) << 0u))) : _GLF_FUZZED(subgroup_id))), clamp(subgroup_base, subgroup_base, subgroup_base)), uint(uvec2(false ? _GLF_FUZZED(42425u) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)), (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base))) << 0u))) : _GLF_FUZZED(subgroup_id))), clamp(subgroup_base, subgroup_base, subgroup_base)), uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))))) + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(max((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) ^ 0u)) % subgroup_size, (subgroup_local_id + 1) % subgroup_size), ~ (~ (max((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(max((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) * 1u)), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(max((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), ((_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(subgroup_size))))) * 1u)), (max((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(49397))))) * 1u))) << 0u), 0u, 1u)), 0u + (uint(uvec3(_GLF_IDENTITY(max((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) * 1u)), (max((subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, 0 ^ (1)))))), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) * 1u))) << 0u), 0u, 1u)))))) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)) * 1u, clamp(((subgroup_local_id + 1)) * 1u, _GLF_IDENTITY(((subgroup_local_id + 1)) * 1u, uint(uvec3(((subgroup_local_id + 1)) * 1u, 0u, 0u))), ((subgroup_local_id + 1)) * 1u))))) % subgroup_size) ^ 0u)))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint read = _GLF_IDENTITY(0, max(0, 0));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (_GLF_IDENTITY(false, (false) || false)))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(50189)))); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))))), true && (false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))), (_GLF_WRAPPED_IF_FALSE(false)) || false)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true, false))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(4, (4) | (4)), 64, 4);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))) || _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec4((false), false, true, true))), bool(bvec3((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, bool(bvec3(true, false, false)))))), false)))), true, false, true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(2858.8436)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), bool(true))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (injectionSwitch.x) - 0.0))))) > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(74550u)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-7113.0287)), bvec2(true, _GLF_IDENTITY(false, false || (false)))))) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))) || false), _GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, true, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), true && (bool(bvec4(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, true, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, true, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), true && (bool(bvec4(_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, true, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))))), (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(bvec4(! (true), true, true, true)), ! (_GLF_IDENTITY(! (bool(bvec4(! (true), true, true, true))), ! (! (! (bool(bvec4(! (true), true, true, true))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), true && (bool(bvec4(_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(bvec4(! (true), true, true, true)), bool(bvec4(bool(bvec4(! (true), true, true, true)), true, true, false)))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)), true, false))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && (false)))), _GLF_IDENTITY(! (! (bool(bool(_GLF_IDENTITY(false, true && (false)))))), true && (! (! _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(false, true && (false))))), ((bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2((false), false)), false || (bool(bvec2((false), false)))))) || false))), bool(bvec2(bool(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2((false), false)), false || (bool(bvec2((false), false)))))) || false))), true)))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y)))))))))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, true && (false)))), ! (! (bool(bool(_GLF_IDENTITY(false, true && (false)))))))))), (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, true && (false)))), ! (! (bool(bool(_GLF_IDENTITY(false, true && (false)))))))), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, true && (false)))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), _GLF_IDENTITY(true, (true) && true) && (false))))))))))), bool(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, true && (false)))), ! (! (bool(bool(_GLF_IDENTITY(false, true && (false)))))))), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, true && (false)))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), _GLF_IDENTITY(true, (true) && true) && (false))))))))))), true, false))))) || false))))) && _GLF_IDENTITY(true, bool(bool(true)))))))
  barrier();
 if((subgroup_local_id % _GLF_IDENTITY(2, _GLF_IDENTITY((2) | _GLF_IDENTITY((2), max((2), _GLF_IDENTITY((2), min((2), (2))))), int(_GLF_IDENTITY(ivec3((2) | _GLF_IDENTITY((2), max((2), _GLF_IDENTITY((2), min((2), (2))))), (0 >> _GLF_IDENTITY(int(0), int(0))), 1), ~ (~ (ivec3((2) | _GLF_IDENTITY((2), max((2), _GLF_IDENTITY((2), min((2), (2))))), (0 >> _GLF_IDENTITY(int(0), int(0))), 1)))))))) == 0)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((false)), bool(bvec4(bool((false)), false, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))), true))))), true)))), true && _GLF_IDENTITY(_GLF_IDENTITY((bool(_GLF_IDENTITY(bool((false)), bool(bvec4(bool((false)), false, true, true))))), bool(bool((bool(_GLF_IDENTITY(bool((false)), bool(bvec4(bool((false)), false, true, true)))))))), true && ((bool(_GLF_IDENTITY(bool((false)), bool(bvec4(bool((false)), false, true, true)))))))))), ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((false)), bool(bvec4(bool((false)), false, _GLF_IDENTITY(true, ! (! (true))), true)))), true && (bool(_GLF_IDENTITY(bool((false)), bool(bvec4(bool((_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true, _GLF_IDENTITY(true, ! (! (true))))))))))), ! (! (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), ((_GLF_IDENTITY(false, (false) && true))) || false)), bool(bvec4(bool((false)), false, true, true)))), true && (bool(_GLF_IDENTITY(bool((false)), bool(bvec4(bool((false)), false, true, true)))))))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((false)), bool(bvec4(bool((false)), false, _GLF_IDENTITY(true, ! (! (true))), true)))), true && (bool(_GLF_IDENTITY(bool((false)), bool(bvec4(bool((_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true, _GLF_IDENTITY(true, ! (! (true))))))))))), ! (! (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), ((_GLF_IDENTITY(false, (false) && true))) || false)), bool(bvec4(bool((false)), false, true, true)))), true && (bool(_GLF_IDENTITY(bool((false)), bool(bvec4(bool((false)), false, true, true)))))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((false)), bool(bvec4(bool((false)), false, _GLF_IDENTITY(true, ! (! (true))), true)))), true && (bool(_GLF_IDENTITY(bool((false)), bool(bvec4(bool((_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true, _GLF_IDENTITY(true, ! (! (true))))))))))), ! (! (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), ((_GLF_IDENTITY(false, (false) && true))) || false)), bool(bvec4(bool((false)), false, true, true)))), true && (bool(_GLF_IDENTITY(bool((false)), bool(bvec4(bool((false)), false, true, true))))))))))))) && true))))), ! (! ((! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((false)), bool(bvec4(bool((false)), false, _GLF_IDENTITY(true, ! (! (true))), true)))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool((false)), bool(bvec4(bool((false)), false, true, _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false) && (true)), ! _GLF_IDENTITY((! (true)), ((! (true))) && true)))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool((false)), bool(bvec4(bool((false)), false, true, _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false) && (true)), ! _GLF_IDENTITY((! (true)), ((! (true))) && true)))))), (bool(_GLF_IDENTITY(bool((false)), bool(bvec4(bool((false)), false, true, _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false) && (true)), ! _GLF_IDENTITY((! (true)), ((! (true))) && true))))))) && true))), false || (bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool((false)), bool(bvec4(bool((false)), false, true, _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false) && (true)), ! _GLF_IDENTITY((! (true)), ((! (true))) && true)))))), (bool(_GLF_IDENTITY(bool((false)), bool(bvec4(bool((false)), false, true, _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false) && (true)), ! _GLF_IDENTITY((! (true)), ((! (true))) && true))))))) && true)))))))))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), ((_GLF_IDENTITY(false, (false) && true))) || false)), bool(bvec4(bool((false)), false, true, true)))), _GLF_IDENTITY(true, (true) || false) && (bool(_GLF_IDENTITY(bool((false)), bool(bvec4(bool((false)), false, true, true))))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), ((_GLF_IDENTITY(false, (false) && true))) || false)), bool(bvec4(bool((false)), false, true, true)))), _GLF_IDENTITY(true, (true) || false) && (bool(_GLF_IDENTITY(bool((false)), bool(bvec4(bool((false)), false, true, true)))))))))), (bool((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), ((_GLF_IDENTITY(false, (false) && true))) || false)), bool(bvec4(bool((false)), false, true, true)))), _GLF_IDENTITY(true, (true) || false) && (bool(_GLF_IDENTITY(bool((false)), bool(bvec4(bool((false)), false, true, true))))))))))) || false)))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, abs(sqrt(vec2(0.0, 0.0))) + (injectionSwitch)).x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false))))
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) || false))))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bvec4(! (! (false)), false, true, true)))), false))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false)))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))))))))), bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (false)), false || (_GLF_IDENTITY((! (false)), ((! (false))) && true))), bool(bvec4(! (! (false)), false, true, true)))), false))), (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), bool(bool((false)))), true, false))))))));
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(_GLF_IDENTITY(-33.07, (_GLF_IDENTITY(-33.07, (true ? -33.07 : _GLF_FUZZED(-4.7)))) - 0.0))), bool(false))) > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(9.4)))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         for(int _injected_loop_counter = (1 & 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(7), int(7)))), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(7), int(7)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
              barrier();
             barrier();
            }
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), ! (! ((! (_GLF_DEAD(false))))))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec4(-7.7, 2988.7997, -472.022, 765.638).xw) : injectionSwitch)).y))), _GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) || false)) || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), false))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))), false, false))))))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
          barrier();
        }
       else
        {
         subgroupAll(false);
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-0.0, -2954.8121)))).y))))
          barrier();
        }
      }
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) - vec2(0.0, 0.0))).y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (1 | 0), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter < (1 | 0), bool(bvec4(_injected_loop_counter < (1 | 0), true, false, false)))), ! (! (! (_GLF_IDENTITY(_injected_loop_counter < (1 | 0), bool(bvec4(_injected_loop_counter < (1 | 0), true, false, false)))))))))); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter)))), max((_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter)))), (_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))))))) > _GLF_IDENTITY(0, (0) - 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, false || (true)) && (false))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || (! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false)))))))))))))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(492.692, -5.8)) : vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(45.27, 6.1)))).x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) - vec2(0.0, 0.0)).x, (injectionSwitch.x) * 1.0), injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true)))))))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))));
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-6.6))) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-6.6))) > injectionSwitch.y))))), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         barrier();
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) | 0), 64, _GLF_IDENTITY(2, max(2, 2))), ~ (_GLF_IDENTITY(~ (atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) | 0), 64, _GLF_IDENTITY(2, max(2, 2)))), (~ (atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) | 0), 64, _GLF_IDENTITY(2, max(2, 2))))) >> 0u)));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
            barrier();
           barrier();
          }
        }
      }
     else
      {
      }
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | (0 >> _GLF_IDENTITY(int(2), int(2))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, true))))))), _GLF_IDENTITY(true, true && (true)) && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1.2) : injectionSwitch.y))))), true && _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
           for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 ^ 0), max((0 ^ 0), (0 ^ 0)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)) | (int(7)), ((int(7)) | (int(7))) | ((int(7)) | (int(7))))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 | (_GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (int(7)), max(~ (int(7)), ~ (int(7))))))))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) / 1.0, (_GLF_IDENTITY((injectionSwitch.x), _GLF_IDENTITY(float(mat3((injectionSwitch.x), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))))), max(float(mat3((injectionSwitch.x), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))))), _GLF_IDENTITY(float(mat3((injectionSwitch.x), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))))), mix(float(_GLF_FUZZED(82.03)), float(float(mat3((injectionSwitch.x), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))), bool(true)))))) / 1.0) / 1.0)) > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (_GLF_IDENTITY(false, true && (false)))) || false)))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), false || ((false))))))));
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, 0.0, _GLF_IDENTITY(log(1.0), min(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), tan(0.0)), vec4(mat4x2(_GLF_IDENTITY(vec4(injectionSwitch.y, 0.0, log(1.0), _GLF_IDENTITY(tan(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-8.8)), bool(false)))), (false ? _GLF_FUZZED(72.60) : tan(0.0)))), vec4(_GLF_IDENTITY(mat3x4(vec4(injectionSwitch.y, 0.0, log(1.0), _GLF_IDENTITY(tan(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-8.8)), bool(false)))), (false ? _GLF_FUZZED(72.60) : tan(0.0)))), 0.0, sqrt(1.0), tan(log(1.0)), 0.0, 1.0, 0.0, 0.0, 1.0), transpose(transpose(mat3x4(vec4(injectionSwitch.y, 0.0, log(1.0), _GLF_IDENTITY(tan(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-8.8)), bool(false)))), (false ? _GLF_FUZZED(72.60) : tan(0.0)))), 0.0, sqrt(1.0), tan(log(1.0)), 0.0, 1.0, 0.0, 0.0, 1.0)))))), 0.0, 1.0, 0.0, 1.0))))))))) || false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, true, false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-8.0, 66.83)) : injectionSwitch)), injectionSwitch, injectionSwitch)).y)), false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))), true))))), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-8.0, 66.83)) : injectionSwitch)), injectionSwitch, injectionSwitch)).y)), false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))), true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, ~ (_GLF_IDENTITY(~ (_injected_loop_counter --), (true ? ~ (_injected_loop_counter --) : _GLF_FUZZED(-66304))))))
    {
     subgroupAll(false);
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-83.58) : injectionSwitch.x))), float(_GLF_FUZZED(-953.417)), bool(_GLF_IDENTITY(false, ! (! (false)))))), float(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-83.58) : injectionSwitch.x))), float(_GLF_FUZZED(-953.417)), bool(false))), clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-83.58) : injectionSwitch.x))), float(_GLF_FUZZED(-953.417)), bool(false))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-83.58) : injectionSwitch.x))), float(_GLF_FUZZED(_GLF_IDENTITY(-953.417, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? -953.417 : _GLF_FUZZED(-8182.1806))))), bool(false))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-83.58) : injectionSwitch.x))), float(_GLF_FUZZED(-953.417)), bool(false))))), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), clamp(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), (false ? _GLF_FUZZED(68.98) : _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), (_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))) / 1.0))), 0.0, 0.0, 0.0, tan(_GLF_IDENTITY(0.0, min(0.0, 0.0)))))) > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-3.4, 3.5)) : injectionSwitch)).y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   do
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), false || (! (! (_GLF_DEAD(false)))))))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(_GLF_IDENTITY(bvec3(bvec2(false, true), false), bvec3(bvec4(bvec3(bvec2(false, true), false), true)))))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true)))))))))))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), (_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))) || false)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                barrier();
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, _GLF_IDENTITY((64), max((64), (64))) << 0), 2);
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3(injectionSwitch.x, 1.0, 0.0, _GLF_IDENTITY(abs(1.0), clamp(_GLF_IDENTITY(abs(1.0), float(vec3(abs(1.0), 1.0, 1.0))), abs(1.0), abs(1.0))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), (dot(vec2(1.0, 0.0), vec2(1.0, 0.0))) + 0.0), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), (true ? dot(vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) - 0.0), 0.0), vec2(1.0, 0.0)) : _GLF_FUZZED(674.310)))), 1.0, 1.0, 1.0, 1.0)), clamp(float(mat3(injectionSwitch.x, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, abs(_GLF_IDENTITY(1.0, (1.0) / 1.0)), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 0.0), clamp(vec2(1.0, 0.0), vec2(1.0, 0.0), _GLF_IDENTITY(vec2(1.0, 0.0), (false ? _GLF_FUZZED(smoothstep(-0.7, -7.0, injectionSwitch)) : vec2(1.0, 0.0))))), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), (true ? _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), max(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), min(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))) : _GLF_FUZZED(674.310)))), 1.0, 1.0, 1.0, 1.0)), float(mat3(injectionSwitch.x, 1.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 0.0), clamp(vec2(1.0, 0.0), vec2(1.0, 0.0), vec2(1.0, 0.0))), vec2(1.0, 0.0)), (true ? dot(vec2(1.0, 0.0), vec2(1.0, 0.0)) : _GLF_FUZZED(674.310)))), 1.0, 1.0, 1.0, 1.0)), float(mat3(injectionSwitch.x, 1.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY((true ? dot(vec2(1.0, 0.0), vec2(1.0, 0.0)) : _GLF_FUZZED(674.310)), max((true ? dot(vec2(1.0, 0.0), vec2(1.0, 0.0)) : _GLF_FUZZED(674.310)), _GLF_IDENTITY((true ? dot(vec2(1.0, 0.0), vec2(1.0, 0.0)) : _GLF_FUZZED(674.310)), ((true ? dot(vec2(1.0, 0.0), vec2(1.0, 0.0)) : _GLF_FUZZED(674.310))) - 0.0))))), 1.0, 1.0, 1.0, 1.0))))) > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (1 & 1), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < (1 & 1), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_injected_loop_counter < (1 & 1))), false || (_injected_loop_counter < (_GLF_IDENTITY(1, clamp(1, 1, 1)) & 1))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(_injected_loop_counter < (1 & _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) - 0), 1, _GLF_IDENTITY(1, max(1, 1))))))), false || (_injected_loop_counter < (1 & 1))), false), true)))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY((1 & 1), 1 * ((1 & 1))), false || _GLF_IDENTITY((_injected_loop_counter < (1 & 1)), true && ((_injected_loop_counter < (1 & 1))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(_injected_loop_counter < (1 & 1), false || (_injected_loop_counter < (1 & 1))), false), true))))), false || ((bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY((1 & 1), 1 * ((1 & 1))), false || _GLF_IDENTITY((_injected_loop_counter < (1 & 1)), true && ((_injected_loop_counter < (1 & 1))))), (_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY((1 & 1), 1 * ((1 & 1))), false || _GLF_IDENTITY((_injected_loop_counter < (1 & 1)), true && ((_injected_loop_counter < (1 & 1)))))) && true), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter))) << 0) < (1 & 1), false || (_injected_loop_counter < (1 & 1))), false), true))))))) && true))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(sinh(vec2(72.04, -7785.5000))) : injectionSwitch)).x > injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))
            barrier();
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     subgroupBarrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), (! (false)) || false)) && true))), (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4)))))) >> _GLF_IDENTITY(int(4), int(4))) & 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), max(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), max(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x))))), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), max(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x))))))))) || false); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))) || false), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   atomicStore(checker[virtual_gid], read, 4, 64, _GLF_IDENTITY(4, ~ (~ (4))));
  }
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
