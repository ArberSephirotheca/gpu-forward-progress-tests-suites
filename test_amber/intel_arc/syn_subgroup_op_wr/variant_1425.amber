#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uvec3 GLF_merged3_0_1_4_1_1_11_2_1_12readsubgroup_idworkgroup_id;
 uvec4 GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(237.936)), bool(false)))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), ! (! (bool(bvec3(false, false, true))))))))
              barrier();
            }
          }
         else
          {
           barrier();
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   do
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uvec4 GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), bool(bvec3(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), false, false)))));
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uvec3 GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gid;
 GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid.xyz = GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gid;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false)))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))
  barrier();
 do
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY((-44693 & 0), ((-44693 & 0)) / 1), clamp(_GLF_IDENTITY((-44693 & 0), ((_GLF_IDENTITY(-44693 & 0, (-44693 & 0) >> 0))) / 1), _GLF_IDENTITY((-44693 & 0), ((-44693 & 0)) / 1), _GLF_IDENTITY(_GLF_IDENTITY((-44693 & 0), ((-44693 & 0)) / 1), ~ (~ (_GLF_IDENTITY((-44693 & 0), ((-44693 & 0)) / 1)))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)), (_injected_loop_counter) + 0) < ((int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y)) << _GLF_IDENTITY(int(_GLF_IDENTITY(2, clamp(2, 2, 2))), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(int(2), _GLF_IDENTITY(0, int(ivec2(0, 0)))), min(ivec2(int(2), _GLF_IDENTITY(0, int(ivec2(0, 0)))), ivec2(int(2), _GLF_IDENTITY(0, int(ivec2(0, 0)))))), (false ? _GLF_FUZZED(ivec2(-85793, -28890)) : ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(2), ~ (~ (int(2)))), 1 * (int(2))), 0)))))), (true ? _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(int(2), _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, 0)), min(int(ivec2(0, 0)), int(ivec2(0, _GLF_IDENTITY(0, (0) / 1))))))), min(ivec2(_GLF_IDENTITY(int(2), 0 ^ (int(2))), _GLF_IDENTITY(0, int(ivec2(0, 0)))), ivec2(int(2), _GLF_IDENTITY(0, int(ivec2(0, 0)))))), (_GLF_IDENTITY(false ? _GLF_FUZZED(ivec2(-85793, _GLF_IDENTITY(-28890, (false ? _GLF_FUZZED(99607) : _GLF_IDENTITY(-28890, 1 * (-28890)))))) : ivec2(_GLF_IDENTITY(int(2), 1 * (int(2))), 0), clamp(false ? _GLF_FUZZED(ivec2(-85793, _GLF_IDENTITY(-28890, (_GLF_IDENTITY(false, bool(bvec3(false, true, true))) ? _GLF_FUZZED(99607) : _GLF_IDENTITY(-28890, 1 * (-28890)))))) : ivec2(_GLF_IDENTITY(int(2), 1 * _GLF_IDENTITY((int(2)), ((int(2))) | ((int(2))))), 0), _GLF_IDENTITY(false ? _GLF_FUZZED(ivec2(-85793, _GLF_IDENTITY(-28890, (false ? _GLF_FUZZED(99607) : _GLF_IDENTITY(-28890, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) + 0) * (-28890)))))) : ivec2(_GLF_IDENTITY(int(2), 1 * (int(2))), 0), (true ? _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))))) ? _GLF_FUZZED(ivec2(-85793, _GLF_IDENTITY(-28890, (false ? _GLF_FUZZED(99607) : _GLF_IDENTITY(-28890, 1 * (-28890)))))) : ivec2(_GLF_IDENTITY(int(2), 1 * (int(2))), 0) : _GLF_FUZZED(ivec2(35065, -67007)))), false ? _GLF_FUZZED(_GLF_IDENTITY(ivec2(-85793, _GLF_IDENTITY(-28890, (false ? _GLF_FUZZED(99607) : _GLF_IDENTITY(-28890, 1 * (-28890))))), min(ivec2(-85793, _GLF_IDENTITY(-28890, (false ? _GLF_FUZZED(99607) : _GLF_IDENTITY(-28890, 1 * (-28890))))), _GLF_IDENTITY(ivec2(-85793, _GLF_IDENTITY(-28890, (false ? _GLF_FUZZED(99607) : _GLF_IDENTITY(-28890, 1 * (-28890))))), max(ivec2(-85793, _GLF_IDENTITY(-28890, (false ? _GLF_FUZZED(99607) : _GLF_IDENTITY(-28890, 1 * (-28890))))), ivec2(-85793, _GLF_IDENTITY(-28890, (false ? _GLF_FUZZED(99607) : _GLF_IDENTITY(-28890, 1 * (-28890)))))))))) : ivec2(_GLF_IDENTITY(int(2), 1 * (int(2))), 0)))))))) : _GLF_FUZZED(_injected_loop_counter))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 GLF_merged3_0_1_4_1_1_11_2_1_12readsubgroup_idworkgroup_id.y = subgroup_id;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid.xyz.y = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_11_2_1_12readsubgroup_idworkgroup_id, (false ? _GLF_FUZZED(GLF_merged3_0_1_4_1_1_11_2_1_12readsubgroup_idworkgroup_id) : GLF_merged3_0_1_4_1_1_11_2_1_12readsubgroup_idworkgroup_id)), ~ (~ (_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_11_2_1_12readsubgroup_idworkgroup_id, (false ? _GLF_FUZZED(GLF_merged3_0_1_4_1_1_11_2_1_12readsubgroup_idworkgroup_id) : GLF_merged3_0_1_4_1_1_11_2_1_12readsubgroup_idworkgroup_id))))).y;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-61.77, -187.005)) : injectionSwitch))) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(97.93) : injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(97.93) : injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > injectionSwitch.y)), true)), true && (bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(97.93) : injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > injectionSwitch.y)), true)))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec3(injectionSwitch.y, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0)))), (vec3(injectionSwitch.y, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))))) - tan(vec3(0.0, 0.0, 0.0))))), bool(bvec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(-42.96, -5.3, -7260.4141, 90.14).r)), vec2(_GLF_FUZZED((6501.6223 * 478.015)), (injectionSwitch)[1]), bvec2(false, true))), 1.0, 0.0)), mix(vec2((vec2(mat2(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(-42.96, -5.3, -7260.4141, 90.14).r)), vec2(_GLF_FUZZED((6501.6223 * 478.015)), (injectionSwitch)[1]), bvec2(false, true))), 1.0, 0.0)))[0], _GLF_FUZZED(0.9)), vec2(_GLF_FUZZED(-4.2), (vec2(mat2(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(-42.96, -5.3, -7260.4141, 90.14).r)), vec2(_GLF_FUZZED((6501.6223 * 478.015)), (injectionSwitch)[1]), bvec2(false, true))), 1.0, 0.0)))[1]), bvec2(false, true)))).x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.y = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 ^ 0) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - sqrt(0.0)), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-3.9))))) > injectionSwitch.y)))) && true))
              barrier();
            }
          }
        }
       GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.x = subgroup_local_id;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), true && (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   do
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(1), int(1))))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)).x, uint(uvec2(_GLF_IDENTITY(gl_WorkGroupSize.x, ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize.x), (~ (gl_WorkGroupSize.x)) | _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u, uint(uvec4(0u, 1u, 1u, 0u)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(0u))), uint(_GLF_IDENTITY(uvec4(0u, 1u, 1u, 0u), clamp(uvec4(0u, 1u, 1u, 0u), _GLF_IDENTITY(uvec4(0u, 1u, 1u, 0u), (uvec4(0u, 1u, 1u, 0u)) ^ uvec4(0u, 0u, 0u, 0u)), uvec4(0u, 1u, 1u, 0u)))))), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(0u))), uint(_GLF_IDENTITY(uvec4(0u, 1u, 1u, 0u), clamp(uvec4(0u, 1u, 1u, 0u), _GLF_IDENTITY(uvec4(0u, 1u, 1u, 0u), (uvec4(0u, _GLF_IDENTITY(1u, 0u | (1u)), 1u, 0u)) ^ uvec4(0u, 0u, 0u, 0u)), uvec4(0u, 1u, 1u, 0u)))))))))) << 0u)))))), 1u)));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.w = workgroup_size;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (false)))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) || false)))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID))), clamp(~ (gl_WorkGroupID), ~ (gl_WorkGroupID), ~ (gl_WorkGroupID))))).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 GLF_merged3_0_1_4_1_1_11_2_1_12readsubgroup_idworkgroup_id.z = workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_FALSE(false))), ! (! (bool(bool(_GLF_WRAPPED_IF_FALSE(false))))))))
        {
        }
       else
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_base = GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.w * GLF_merged3_0_1_4_1_1_11_2_1_12readsubgroup_idworkgroup_id.z;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid.xyz.y * GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.y, (_GLF_IDENTITY(GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid.xyz.y, (GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid.xyz.y) | 0u) * _GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size)).y) | (GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid.xyz.y * GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.y)), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid.xyz, min(GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid.xyz, GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid.xyz)).y * GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.y, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid, min(GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid, _GLF_IDENTITY(GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid, clamp(_GLF_IDENTITY(GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid)), GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid, GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid)))).xyz.y, (GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid.xyz.y) | 0u) * _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size)), (_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size))) | uvec4(0u, 0u, 0u, 0u)).y), ((_GLF_IDENTITY(GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid.xyz.y, (GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid.xyz.y) | 0u) * _GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size)).y)) >> 0u) | (_GLF_IDENTITY(GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid.xyz.y * GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.y, uint(uvec4(_GLF_IDENTITY(GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid.xyz.y * _GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size, max(_GLF_IDENTITY(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size, (GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size) + uvec4(0u, 0u, 0u, 0u)), GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size)).y, ~ (~ (GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid.xyz.y * GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.y))), 1u, 0u, 0u)))))) - _GLF_IDENTITY(0u, (0u) / 1u)) + GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.x;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.z = virtual_gid;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   do
    {
     GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid.xyz.z = GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.z;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint next_virtual_gid = workgroup_base + GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid.xyz.y * GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.y + ((GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.x + _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) ^ 0)))) % GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.y);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       do
        {
         GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid.w = _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) << 0u);
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = ((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | 0)) | 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (false ? _GLF_FUZZED(11920) : _GLF_IDENTITY(int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   atomicStore(buf[GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid.w], uint(1), 4, 64, 4);
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint read = atomicLoad(buf[GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid.xyz.z], 4, 64, 0);
 _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_11_2_1_12readsubgroup_idworkgroup_id.x = read, 0u | (GLF_merged3_0_1_4_1_1_11_2_1_12readsubgroup_idworkgroup_id.x = read));
 GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid.xyz.x = GLF_merged3_0_1_4_1_1_11_2_1_12readsubgroup_idworkgroup_id.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), bool(bvec2(bool(bvec4(false, false, false, true)), false))))));
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), ! (_GLF_IDENTITY(! (true), true && (! (true)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.x + _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 0, 0, 1), min(_GLF_IDENTITY(ivec4(1, 0, 0, 1), ivec4(1, 1, 1, 1) * (_GLF_IDENTITY(ivec4(1, 0, 0, 1), min(ivec4(1, 0, 0, 1), ivec4(1, 0, 0, 1))))), ivec4(1, 0, 0, 1))))) < GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size.y)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, int(ivec3(0, 0, 0)))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(vec2(-97.14, 9.7)))), injectionSwitch)).x < injectionSwitch.y))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))))); _injected_loop_counter --)
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), bool(bvec4(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false)))) || false, ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(false, ! (! (false))) || (_GLF_WRAPPED_IF_FALSE(false)))) || _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), true && ((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false)))) || false))))))), _GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y)), false, false))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))))), bool(bvec4(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false)))) || false, ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(false, ! (! (false))) || (_GLF_WRAPPED_IF_FALSE(false)))) || _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), true && ((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(false || (_GLF_WRAPPED_IF_FALSE(false)), ! (_GLF_IDENTITY(! (false || (_GLF_WRAPPED_IF_FALSE(false))), ! (_GLF_IDENTITY(! (! (false || (_GLF_WRAPPED_IF_FALSE(false)))), (! (! (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || (_GLF_WRAPPED_IF_FALSE(false))))) && true))))))) || false))))))), _GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y)), false, false)))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           atomicStore(checker[GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid.xyz.z], _GLF_IDENTITY(GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid.xyz, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid.xyz), uvec3(uvec3(~ (_GLF_IDENTITY(GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid, uvec4(GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid[0], GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid[1], GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid[2], GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid[3])).xyz)))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid.xyz), uvec3(uvec3(~ (GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid.xyz)))), (_GLF_IDENTITY(~ (GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid.xyz), uvec3(uvec3(~ (GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid.xyz))))) >> (uvec3(0u, 0u, 0u) | uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u)), (uint(uvec3(0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u))) * 1u)), 0u)), 0u)))) / uvec3(1u, 1u, 1u)))).x, 4, 64, _GLF_IDENTITY(4, (false ? _GLF_FUZZED(int(-443.360)) : _GLF_IDENTITY(4, ~ (~ (4))))));
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))) || false)))));
           for(int _injected_loop_counter = (1 ^ int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, false))), false, true)))))))))
    {
    }
   else
    {
     subgroupAll(false);
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   atomicStore(checker[_GLF_IDENTITY(GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid, uvec4(0u, 0u, 0u, 0u) + (_GLF_IDENTITY(GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid, (_GLF_IDENTITY(GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid, (true ? GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid : _GLF_FUZZED((subgroup_id - GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_size))))) >> uvec4(0u, 0u, _GLF_IDENTITY(0u, ~ (~ (0u))), 0u)))).xyz.z], _GLF_IDENTITY(GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid, (GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid) | (_GLF_IDENTITY(GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid, uvec4(0u, 0u, 0u, 0u) | (GLF_merged2_0_3_57_3_1_16GLF_merged3_0_1_4_1_1_11_2_1_11readsubgroup_idvirtual_gidnext_virtual_gid)))).xyz.x, _GLF_IDENTITY(4, int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | 0)) | _GLF_IDENTITY(_GLF_IDENTITY((4), (false ? _GLF_IDENTITY(_GLF_FUZZED(11765), int(ivec3(_GLF_FUZZED(11765), 1, 0))) : (4))), min(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(11765) : (4))), _GLF_IDENTITY(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(11765) : _GLF_IDENTITY((4), (true ? (4) : _GLF_FUZZED(35761))))), min(_GLF_IDENTITY(_GLF_IDENTITY((4), ((4)) << 0), (false ? _GLF_FUZZED(11765) : (4))), _GLF_IDENTITY((4), (false ? _GLF_FUZZED(11765) : (4)))))))) : _GLF_FUZZED(91078))), (_GLF_IDENTITY(_GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | 0)) | _GLF_IDENTITY(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(11765) : (4))), min(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(11765) : (4))), _GLF_IDENTITY(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(11765) : (_GLF_IDENTITY(4, int(_GLF_ONE(1.0, injectionSwitch.y)) * (4))))), min(_GLF_IDENTITY(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(-43834) : (4))), (false ? _GLF_FUZZED(11765) : (4))), _GLF_IDENTITY((4), (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))) ? _GLF_FUZZED(11765) : (4)))))))) : _GLF_FUZZED(91078))), max(_GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | 0)) | _GLF_IDENTITY(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(11765) : (4))), _GLF_IDENTITY(min(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(11765) : (4))), _GLF_IDENTITY(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(11765) : (4))), min(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(11765) : (4))), _GLF_IDENTITY((4), (false ? _GLF_FUZZED(11765) : (4)))))), (min(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(11765) : (4))), _GLF_IDENTITY(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(11765) : (4))), min(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(11765) : (4))), _GLF_IDENTITY((4), (false ? _GLF_FUZZED(11765) : (4))))))) >> 0))) : _GLF_FUZZED(91078))), _GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | 0)) | _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(11765) : (4))), min(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(11765) : (4))), _GLF_IDENTITY(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(11765) : (4))), min(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(11765) : (4))), _GLF_IDENTITY((4), (false ? _GLF_FUZZED(11765) : (4))))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(11765) : (4))), min(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(11765) : (4))), _GLF_IDENTITY(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(11765) : (4))), min(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(11765) : (4))), _GLF_IDENTITY((4), (false ? _GLF_FUZZED(11765) : (4)))))))))) : _GLF_FUZZED(91078)))))) / int(_GLF_ONE(1.0, injectionSwitch.y))), 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))), 64, 4);
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     subgroupAll(_GLF_IDENTITY(true, true && (true)));
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, true)), false || (bool(bvec4(true, true, true, true)))))))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) || false)));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)));
      }
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(176150u)), _GLF_FUZZED(-330.119)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y)))))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(true, bool(bvec4(true, true, true, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), true && (_GLF_IDENTITY(true, (true) || false))))))), ! (! (bool(bool(_GLF_IDENTITY(true, (true) || false)))))))))), _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2x4(injectionSwitch.x, 1.0, 1.0, sin(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)), dot(vec4(1.0, 0.0, 1.0, 0.0), _GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 1.0), (false ? _GLF_FUZZED(vec4(-1620.4943, -25.29, -89.88, -9.9)) : vec4(0.0, 1.0, 0.0, 1.0)))))), exp(0.0), exp(0.0), 1.0, 1.0)), 1.0 * _GLF_IDENTITY((float(mat2x4(injectionSwitch.x, 1.0, 1.0, sin(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)), dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)))), exp(0.0), exp(0.0), 1.0, 1.0))), (false ? _GLF_FUZZED(-7.6) : (float(mat2x4(injectionSwitch.x, 1.0, 1.0, sin(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)), dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)))), exp(0.0), exp(0.0), 1.0, 1.0))))))), 1.0, 1.0, 0.0)), mix(float(float(vec4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(-2737.8272)), mix(float(float(_GLF_FUZZED(-2737.8272))), float(_GLF_FUZZED(7.4)), bool(false))), (float(_GLF_FUZZED(-2737.8272))) / 1.0), bool(false)))), _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))) - 0.0))) < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2x4(injectionSwitch.x, 1.0, 1.0, sin(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)), dot(vec4(1.0, 0.0, 1.0, 0.0), _GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 1.0), (false ? _GLF_FUZZED(vec4(-1620.4943, -25.29, -89.88, -9.9)) : vec4(0.0, 1.0, 0.0, 1.0)))))), exp(0.0), exp(0.0), 1.0, 1.0)), 1.0 * _GLF_IDENTITY((float(mat2x4(injectionSwitch.x, 1.0, 1.0, sin(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)), dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)))), exp(0.0), exp(0.0), 1.0, 1.0))), (false ? _GLF_FUZZED(-7.6) : (float(mat2x4(injectionSwitch.x, 1.0, 1.0, sin(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)), dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)))), exp(0.0), exp(0.0), 1.0, 1.0))))))), 1.0, 1.0, 0.0)), mix(float(float(vec4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(-2737.8272)), mix(float(float(_GLF_FUZZED(-2737.8272))), float(_GLF_FUZZED(7.4)), bool(false))), (float(_GLF_FUZZED(-2737.8272))) / 1.0), bool(false)))), _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))) - 0.0))) < injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2x4(injectionSwitch.x, 1.0, 1.0, sin(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)), dot(vec4(1.0, 0.0, 1.0, 0.0), _GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 1.0), (false ? _GLF_FUZZED(vec4(-1620.4943, -25.29, -89.88, -9.9)) : vec4(0.0, 1.0, 0.0, 1.0)))))), exp(0.0), exp(0.0), 1.0, 1.0)), 1.0 * _GLF_IDENTITY((float(mat2x4(injectionSwitch.x, 1.0, 1.0, sin(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)), dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)))), exp(0.0), exp(0.0), 1.0, 1.0))), (false ? _GLF_FUZZED(-7.6) : (float(mat2x4(injectionSwitch.x, 1.0, 1.0, sin(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)), dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)))), exp(0.0), exp(0.0), 1.0, 1.0))))))), 1.0, 1.0, 0.0)), mix(float(float(vec4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(-2737.8272)), mix(float(float(_GLF_FUZZED(-2737.8272))), float(_GLF_FUZZED(7.4)), bool(false))), (float(_GLF_FUZZED(-2737.8272))) / 1.0), bool(false)))), _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))) - 0.0))) < injectionSwitch.y)))))), true))) || (false)), true, _GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, true))))))))))), ! (! (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (false) && true), _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_IDENTITY(true, false || (true)), true))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))) - vec2(0.0, 0.0))).x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4.2)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(injectionSwitch.x, 1.0, 1.0, 0.0), mix(vec4((vec4(injectionSwitch.x, 1.0, 1.0, 0.0))[0], _GLF_FUZZED(vec3(-2275.5265, -1177.6137, -1.2).s), _GLF_FUZZED(5536.4172), (vec4(injectionSwitch.x, 1.0, 1.0, 0.0))[3]), vec4(_GLF_FUZZED(22.96), (vec4(injectionSwitch.x, 1.0, 1.0, 0.0))[1], _GLF_IDENTITY((vec4(injectionSwitch.x, 1.0, 1.0, 0.0))[2], min((vec4(injectionSwitch.x, 1.0, 1.0, 0.0))[2], (vec4(injectionSwitch.x, 1.0, 1.0, 0.0))[2])), _GLF_FUZZED(-2255.9926)), bvec4(false, true, true, false)))), mix(float(float(vec4(injectionSwitch.x, 1.0, 1.0, 0.0))), float(_GLF_FUZZED(-2737.8272)), bool(false)))), _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x, 1.0 * (injectionSwitch.x))) - 0.0))) < injectionSwitch.y)), true))) || (false)), true, _GLF_IDENTITY(false, (false) || false)))))), (_GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(true, true, false, false)), (bool(bvec4(true, true, _GLF_IDENTITY(false, (false) || false), false))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (bool(bvec4(_GLF_IDENTITY(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x < injectionSwitch.y)))) && (true)), true, false, false))) && true)), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))))), bool(bvec3(bool(bvec3(false, _GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(true, true, false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), bool(bvec2(bool(bvec3(false, true, true)), true)))))), (bool(bvec4(true, true, false, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (bool(bvec4(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), true, false, false))) && true)), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))))), true, true)))) || false))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))) || (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false)), (bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))) || false))), (_GLF_DEAD(false)) && true))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) - (1 ^ 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) > _GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec4(0, 1, 0, 0))), (0) << 0)); _injected_loop_counter --)
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter))))) < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_injected_loop_counter --), ((_injected_loop_counter --)) * 1) << 0))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
