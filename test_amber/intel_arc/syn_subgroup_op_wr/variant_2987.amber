#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id;
 uvec2 GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.x = subgroup_id, (GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.x = subgroup_id) << 0u);
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y = _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.y = subgroup_local_id;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     return;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x = GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.y;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) + 0), (_GLF_IDENTITY(0, (0) + 0)) | (_GLF_IDENTITY(0, (0) + 0)))))))], _GLF_IDENTITY(min((injectionSwitch)[0], (injectionSwitch)[0]), mix(float(_GLF_FUZZED(263.678)), float(_GLF_IDENTITY(min((injectionSwitch)[0], (injectionSwitch)[0]), min(min((injectionSwitch)[0], (injectionSwitch)[0]), min((injectionSwitch)[0], (injectionSwitch)[0])))), bool(true)))), _GLF_FUZZED(_GLF_IDENTITY(-0.1, clamp(-0.1, _GLF_IDENTITY(-0.1, float(vec3(-0.1, 1.0, 0.0))), -0.1)))), vec2(_GLF_FUZZED(472.942), (injectionSwitch)[1]), bvec2(false, true))).y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))), ! (! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))), bool(bool((injectionSwitch.x > injectionSwitch.y))))))))))))))))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(0 << _GLF_IDENTITY(int(2), int(2)), 0, 1), (ivec3(0 << _GLF_IDENTITY(int(2), int(2)), 0, 1)) | (ivec3(0 << _GLF_IDENTITY(int(2), int(2)), 0, 1)))), (int(_GLF_IDENTITY(ivec3(0 << _GLF_IDENTITY(int(2), int(2)), 0, 1), (ivec3(0 << _GLF_IDENTITY(int(2), int(2)), 0, 1)) | (ivec3(0 << _GLF_IDENTITY(int(2), int(2)), 0, 1))))) ^ 0)))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) | (0)) << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(7035))) | 0)); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              continue;
             return;
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
          }
        }
       else
        {
         GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.w = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, uint(uvec3(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), 1u, 1u))), (true ? _GLF_IDENTITY(workgroup_id, uint(uvec3(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), 1u, 1u))) : _GLF_FUZZED(subgroup_size)));
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      continue;
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id, ~ (~ (GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id))).w, _GLF_IDENTITY((_GLF_IDENTITY(true ? GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.w : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.t), uint(uvec3(true ? GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.w : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.t), 1u, (0u >> _GLF_IDENTITY(uint(6u), uint(6u))))))), ~ (~ ((_GLF_IDENTITY(true ? GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.w : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.t), uint(uvec3(true ? GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.w : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.t), 1u, (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))))))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint subgroup_base = GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.x * GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x2(injectionSwitch.x, 1.0, 0.0, 0.0, log(1.0), 0.0, 1.0, 1.0))) > injectionSwitch.y))) && true)))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 uint virtual_gid = workgroup_base + subgroup_base + GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(false, ! (! (false))), true), true)))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true)))))))), ! (! (false)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.z = virtual_gid;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < injectionSwitch.y)), true, false))))), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < injectionSwitch.y))) || false)))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
          }
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) ^ 0)) * (int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              break;
             break;
            }
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, true)), (bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, true))) || false))))))), _GLF_IDENTITY(bool(bvec4((! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, true)), (bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, true))) || false))))))), false, true, false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(bvec4((! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, true)), (bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, true))) || false))))))), false, true, false))), true && (bool(bool(bvec4((! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, true)), (bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, true))) || false))))))), false, true, false)))))), (bool(_GLF_IDENTITY(bool(bool(bvec4((! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, true)), (bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, true))) || false))))))), false, true, false))), true && (bool(bool(bvec4((! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, true)), (bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, true))) || false))))))), false, true, false))))))) && true))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (_GLF_IDENTITY(1 | 1, 0 ^ (1 | 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         do
          {
           return;
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)) + subgroup_base + ((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, _GLF_IDENTITY(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), (_GLF_IDENTITY(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), _GLF_IDENTITY(uint(uvec4(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), 1u, 0u, 0u)), 0u ^ (uint(uvec4(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 0u + (1u))) | (1u)), 0u, 0u)))))) / 1u)), ~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (_GLF_IDENTITY(0u | 0u, min(_GLF_IDENTITY(_GLF_IDENTITY(0u | 0u, max(0u | 0u, 0u | 0u)), min(0u | 0u, 0u | 0u)), _GLF_IDENTITY(0u | 0u, ~ (~ (_GLF_IDENTITY(0u | 0u, (0u | 0u) - 0u))))))))), (_GLF_IDENTITY(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), uint(uvec4(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), 1u, 0u, 0u)))) / 1u))), max(~ (~ (_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, max(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x)), (0u | 0u))), (_GLF_IDENTITY(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), uint(uvec4(uint(_GLF_IDENTITY(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u)), min(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u)), uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))))), 1u, 0u, 0u)))) / 1u))), ~ (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u)), uvec2(uvec2(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u)))))), (_GLF_IDENTITY(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), uint(uvec4(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), 1u, 0u, 0u)))) / _GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id)))), uint(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id)))), ((_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_id))))) / 1u), 1u))) | (_GLF_IDENTITY(1u, (1u) | (1u)))))))))))))) + 1, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, _GLF_IDENTITY(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (_GLF_IDENTITY(0u | 0u, (0u | 0u) ^ 0u)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size, (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size, uvec2(uvec4(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size, 0u, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), injectionSwitch.x)))))) / (_GLF_IDENTITY((_GLF_IDENTITY(uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(6u), _GLF_IDENTITY(uvec2(6u), (uvec2(6u)) | (uvec2(6u)))), (uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(6u), _GLF_IDENTITY(uvec2(6u), (uvec2(6u)) | (uvec2(6u))))) | uvec2(0u, 0u))), (true ? (_GLF_IDENTITY(uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(6u), _GLF_IDENTITY(uvec2(6u), (uvec2(6u)) | (uvec2(6u)))), (uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(6u), _GLF_IDENTITY(uvec2(6u), (uvec2(6u)) | (uvec2(6u))))) | uvec2(0u, 0u))) : _GLF_FUZZED(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size))) >> _GLF_IDENTITY(uvec2(6u), uvec2(6u)))).x, (0u | 0u)), (uvec2(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size, (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size, uvec2(uvec4(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size, 0u, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), injectionSwitch.x)))))) / (_GLF_IDENTITY((_GLF_IDENTITY(uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(6u), _GLF_IDENTITY(uvec2(6u), (uvec2(6u)) | (uvec2(6u)))), (uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(6u), _GLF_IDENTITY(uvec2(6u), (uvec2(6u)) | (uvec2(6u))))) | uvec2(0u, 0u))), (true ? (_GLF_IDENTITY(uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(6u), _GLF_IDENTITY(uvec2(6u), (uvec2(6u)) | (uvec2(6u)))), (uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(6u), _GLF_IDENTITY(uvec2(6u), (uvec2(6u)) | (uvec2(6u))))) | uvec2(0u, 0u))) : _GLF_FUZZED(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size))) >> _GLF_IDENTITY(uvec2(6u), uvec2(6u)))).x, (0u | 0u))) + uvec2(0u, 0u))), (_GLF_IDENTITY(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), uint(uvec4(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), 1u, 0u, 0u)))) / 1u)), ~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), (_GLF_IDENTITY(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))), max(_GLF_IDENTITY(0u, (0u) << (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))), _GLF_IDENTITY(0u, (0u) << (0u >> _GLF_IDENTITY(uint(3u), uint(3u))))))), ~ (~ (uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) >> 0u), (0u) << (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))))))))) | 0u))), uint(uvec4(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), 1u, 0u, 0u)))) / 1u))), max(~ (~ (_GLF_IDENTITY(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), (_GLF_IDENTITY(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), uint(uvec4(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), 1u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) ^ 0u), 0u)))) / 1u))), ~ (~ (_GLF_IDENTITY(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (_GLF_IDENTITY(0u | 0u, uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) / 1u) | 0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u | 0u, (_GLF_IDENTITY(0u | 0u, (false ? _GLF_FUZZED(virtual_gid) : 0u | 0u))) ^ 0u), (0u | 0u) | (0u | 0u))) >> 0u))))))), (_GLF_IDENTITY(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) ^ 0u), 0u)) | 0u))), uint(uvec4(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (_GLF_IDENTITY(0u | 0u, (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u | 0u, 0u | (_GLF_IDENTITY(0u | 0u, ~ (~ (0u | 0u)))))))))), 1u, 0u, 0u)))) / 1u)))))))))) + 1, 0u | (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, _GLF_IDENTITY(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, _GLF_IDENTITY((0u | 0u), 0u ^ ((0u | 0u))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), (_GLF_IDENTITY(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), 1u, 0u, 0u), (false ? _GLF_FUZZED((workgroup_size * uvec4(170407u, 159346u, 168630u, 34050u))) : uvec4(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), 1u, 0u, 0u))), uvec4(0u, _GLF_IDENTITY(0u, uint(uint(0u))), 0u, 0u) + (uvec4(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), 1u, 0u, 0u)))))) / _GLF_IDENTITY(1u, min(1u, 1u)))), ~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (_GLF_IDENTITY(0u, (0u) | _GLF_IDENTITY((0u), ((0u)) | 0u)) | 0u))), (_GLF_IDENTITY(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), uint(uvec4(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (_GLF_IDENTITY(0u | 0u, max(0u | 0u, 0u | 0u))))), 1u, 0u, 0u)))) / 1u))), max(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), uint(uvec4(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), 1u, 0u, 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), uint(uvec4(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), 1u, 0u, 0u))), uint(uvec2(_GLF_IDENTITY(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), uint(uvec4(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), 1u, 0u, 0u))), 1u)))) | 0u)) / 1u), (_GLF_IDENTITY(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), (_GLF_IDENTITY(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), uint(uvec4(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), 1u, 0u, 0u)))) / 1u)) * 1u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), uint(_GLF_IDENTITY(uvec4(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), 0u, 0u, (0u | 0u)), (uvec4(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), 0u, 0u, (0u | 0u))) << uvec4(0u, 0u, 0u, 0u)))), (_GLF_IDENTITY(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), uint(uvec4(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), 1u, 0u, 0u)))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), (_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size, (GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size) >> uvec2(0u, 0u)).x, (0u | 0u))), uint(uvec4(uint(uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (0u | 0u))), 1u, 0u, 0u)))) / 1u))) ^ 0u))))))))) + 1)))))) % _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size, clamp(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size), ~ (~ ((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size)))), (_GLF_IDENTITY((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size), ~ (~ ((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size))))) / uvec2(1u, 1u)) / uvec2(1u, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size, _GLF_IDENTITY((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size), ~ (~ ((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size)))) / uvec2(1u, 1u))), uvec2(0u, 0u) | (~ (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size, _GLF_IDENTITY((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size), ~ (~ ((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size)))) / _GLF_IDENTITY(uvec2(1u, 1u), (true ? uvec2(1u, 1u) : _GLF_FUZZED(uvec2(uvec3(168091u, 136633u, 11105u))))))))))), GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size, _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size, min(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size, max(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size, GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size)), GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size, clamp(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size, _GLF_IDENTITY((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size), ~ (_GLF_IDENTITY(~ ((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size)), uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (~ ((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size)))))) / uvec2(1u, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size, _GLF_IDENTITY((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size), ~ (~ ((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size)))) / uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) ^ 0u)) << 0u), 1u))), uvec2(0u, 0u) | (~ (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size, _GLF_IDENTITY((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size), ~ (~ ((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size)))) / uvec2(1u, 1u))))))), GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size, _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size, min(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size, max(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size, GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size)), GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size)))), uvec2(0u, 0u) + (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size, clamp(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size, _GLF_IDENTITY((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size), ~ (_GLF_IDENTITY(~ ((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size)), min(~ ((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size)), ~ ((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size)))))) / uvec2(_GLF_IDENTITY(1u, (1u) / _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 0u ^ (((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u)))))), 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size), ((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size)) | (_GLF_IDENTITY((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size), uvec2(1u, 1u) * ((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size))))), ~ (~ ((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size)))) / uvec2(_GLF_IDENTITY(1u, max(1u, 1u)), 1u))), uvec2(0u, 0u) | (~ (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size, _GLF_IDENTITY((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size), ~ _GLF_IDENTITY((~ ((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size))), (false ? _GLF_FUZZED(uvec2(63290u, 18134u)) : (~ ((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size)))))) / uvec2(1u, 1u))))))), GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size, uvec2(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size[0], _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size[_GLF_IDENTITY(1, 1 * (1))], ~ (~ (GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size[1]))))), min(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size, uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size)), max(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size, GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size)), GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size))))))))).y);
 if(_GLF_DEAD(false))
  return;
 uint read = 0;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4(injectionSwitch.y, 0.0, exp(0.0), 0.0, 0.0, cos(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0), transpose(transpose(mat4(injectionSwitch.y, 0.0, exp(0.0), 0.0, 0.0, cos(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0)))))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-161.699)), float(injectionSwitch.x), bool(true))) > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))))))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
              barrier();
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)) > 0); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))), true))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               continue;
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) && true)));
         barrier();
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        break;
      }
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0), _injected_loop_counter)) < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
        return;
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         barrier();
        }
      }
     barrier();
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, 1.0, 0.0, 1.0, 0.0, sqrt(0.0), 0.0, 1.0, 0.0, 0.0), transpose(transpose(mat3x4(injectionSwitch.y, determinant(mat2(1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(dot(vec3(-4.9, 55.29, 4342.7062), vec3(-466.405, 2.1, -51.54))))), 1.0, 1.0)), 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-5068.7940) : _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))))), 0.0, 1.0, _GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(96.48)), float(0.0), bool(true)))) / 1.0))), sqrt(0.0), 0.0, 1.0, 0.0, 0.0))))))))))))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               continue;
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
          }
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2.4)), bool(false))), max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, cos(0.0), determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0, 0.0))))) > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(injectionSwitch), mat2(1.0) * (vec2(injectionSwitch))))).y, false || (injectionSwitch.x > injectionSwitch.y))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, 0 ^ (_GLF_IDENTITY(4, _GLF_IDENTITY(0, clamp(0, 0, 0)) ^ (4)))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 do
  {
   if((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x % 2, uint(uvec4(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x % 2, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))) == 0)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) && _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))), (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(8.8) : injectionSwitch.y)), min(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(585.003)), float(1.0), bool(true))) * _GLF_IDENTITY((injectionSwitch.y), (true ? (injectionSwitch.y) : _GLF_FUZZED(sqrt(172.132))))), injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           continue;
          }
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ 0)) << 0))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))), false || (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           subgroupAll(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))));
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
          {
           if(_GLF_DEAD(false))
            break;
           continue;
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0)) << 0))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        continue;
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY((_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec4(_GLF_IDENTITY(! (true), bool(bool(! (true)))), false, true, true))))), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))) || false, bool(bool((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))) || false))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY((_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec4(_GLF_IDENTITY(! (true), bool(bool(! (true)))), false, true, true))))), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))) || false, bool(bool((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))) || false))))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY((_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec4(_GLF_IDENTITY(! (true), bool(bool(! (true)))), false, true, true))))), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))) || false, bool(bool((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))) || false)))))) || false)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, int(ivec3(0, 1, 0))))), _GLF_IDENTITY(0, (0) | (0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(((_GLF_IDENTITY(1, max(1, 1)) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))) >> _GLF_IDENTITY(int(1), int(1))), (_GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))) >> _GLF_IDENTITY(int(1), int(1))), _GLF_IDENTITY((((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))) >> _GLF_IDENTITY(int(1), int(1)))), ((((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))) >> _GLF_IDENTITY(int(1), int(1))))) / 1) | (((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) / 1)), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))) >> _GLF_IDENTITY(int(1), int(1))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), _GLF_IDENTITY(int(1), (int(1)) - 0))))) >> _GLF_IDENTITY(int(1), int(1))), ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))), ~ (~ ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1)))))))) >> _GLF_IDENTITY(int(1), int(1)))) | (((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) >> 0)) * 1))))))), (~ (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), clamp(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))))), (((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))) >> _GLF_IDENTITY(int(1), int(1)))) | (((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), ~ (_GLF_IDENTITY(~ (int(1)), (~ (int(1))) / 1))), clamp(int(1), int(1), int(1))))) >> _GLF_IDENTITY(int(1), int(1))))))) | 0)))) << 0)); _injected_loop_counter ++)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / 1)], injectionSwitch[1]))[0], injectionSwitch[1])).x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                barrier();
               break;
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
              {
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            continue;
           read = _GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.z], 4, 64, 2), (_GLF_IDENTITY(atomicLoad(buf[GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.z], 4, 64, 2), uint(uvec3(atomicLoad(buf[GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.z], 4, 64, 2), 1u, 1u)))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(atomicLoad(buf[GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.z], 4, 64, 2), (_GLF_IDENTITY(atomicLoad(buf[GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.z], 4, 64, 2), uint(uvec3(atomicLoad(buf[GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.z], 4, 64, 2), 1u, 1u)))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(atomicLoad(buf[GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.z], 4, 64, 2), (_GLF_IDENTITY(atomicLoad(buf[GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.z], 4, 64, 2), uint(uvec3(atomicLoad(buf[GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.z], 4, 64, 2), 1u, 1u)))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         break;
        }
       return;
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     subgroupAll(false);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     _GLF_IDENTITY(read = atomicLoad(buf[GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.z], 4, 64, _GLF_IDENTITY(2, (2) >> 0)), (_GLF_IDENTITY(_GLF_IDENTITY(read = atomicLoad(buf[GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.z], 4, 64, 2), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) + (read = atomicLoad(buf[GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.z], 4, 64, 2))), (read = atomicLoad(buf[_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.z, (GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.z) | 0u)], 4, 64, 2)) - 0u)) - 0u);
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))))), bool(bvec4(_GLF_DEAD(false), false, true, false))))))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), clamp(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), 0 | (0 << _GLF_IDENTITY(int(6), int(6)))), 0 << _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(0 << _GLF_IDENTITY(int(6), int(6)), 0 << _GLF_IDENTITY(int(6), int(6))))))), 0 | ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), clamp(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), 0 | (0 << _GLF_IDENTITY(int(6), int(6)))), 0 << _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), max(0 << _GLF_IDENTITY(int(6), int(6)), 0 << _GLF_IDENTITY(int(6), int(6))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 subgroupBarrier();
 atomicStore(checker[GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.z], read, 4, 64, 4);
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) && true)) || false) || false)))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(! (true)))))), bool(bool(_GLF_IDENTITY(true, ! (! (true)))))))))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(_GLF_IDENTITY(true, true && _GLF_IDENTITY((true), bool(bool(_GLF_IDENTITY((true), bool(bvec4((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))))), ! (! (true)))), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(_GLF_IDENTITY(true, true && _GLF_IDENTITY((true), bool(bool(_GLF_IDENTITY((true), bool(bvec4((true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))))), ! (! (true)))), true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, ! (! (true))) && (_GLF_DEAD(false))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
