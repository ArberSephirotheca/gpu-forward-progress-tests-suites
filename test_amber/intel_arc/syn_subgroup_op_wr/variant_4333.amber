#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 uvec2 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2(! (injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec4(bvec2(! (injectionSwitch.x > injectionSwitch.y), false), false, true))))))), true)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), _GLF_IDENTITY(int(2), 0 | (_GLF_IDENTITY(int(2), (int(2)) | (int(2))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
    barrier();
   return;
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || (false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, true))), bvec3(bvec4(bvec3(bvec3(bvec3(false, false, true))), true))))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), true)), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), true)), (bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), true))) && true)) || false)))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(27.93)))), float(_GLF_FUZZED(-1787.6242)), bool(false))) > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y, determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) + _GLF_IDENTITY((injectionSwitch.y), (false ? _GLF_FUZZED(1727.4778) : (injectionSwitch.y))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, false || ((injectionSwitch.x > injectionSwitch.y) || false)))))))
            continue;
           if(_GLF_DEAD(false))
            barrier();
           return;
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) && true))))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | _GLF_IDENTITY((1 ^ 1), ((1 ^ 1)) << 0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), ! (! (_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))))); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))));
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           continue;
          }
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         return;
        }
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = (0 ^ int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(345.837, min(345.837, 345.837))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-0.8)), bvec2(true, false)))) + vec2(0.0, 0.0)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x = subgroup_local_id, _GLF_IDENTITY((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x = subgroup_local_id) >> 0u, ((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x = subgroup_local_id) >> 0u) / 1u));
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, false)))))))
          barrier();
         do
          {
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 | 0) >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) << (0 >> _GLF_IDENTITY(int(2), int(2))))), _GLF_IDENTITY(int(7), max(int(7), int(7)))))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(int(subgroup_id)) : _injected_loop_counter --))) | 0))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) << 0), 1))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) << 0), 1)))))) >> _GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) - 0)), int(3)), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) << 0), 1)))) >> _GLF_IDENTITY(int(3), int(3)), clamp((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) << 0), 1))), clamp(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) << 0), 1))), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) << 0), 1))), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) << 0), 1)))))) >> _GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (3) * 1)) * int(_GLF_ONE(1.0, injectionSwitch.y)))))) << 0), _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) - 0), 1)))))) >> _GLF_IDENTITY(int(3), int(3)), max((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), min(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) << 0))), (_GLF_IDENTITY(int(3), int(3))) << 0), 1)), (int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), min(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) << 0))), (_GLF_IDENTITY(int(3), int(3))) << 0), 1))) - 0))) >> _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) | (_GLF_IDENTITY(int(3), max(int(3), int(3))))), int(3)), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) << 0), 1)))) >> _GLF_IDENTITY(int(3), int(3)))), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) | (int(3))), int(3))) << 0), 1)))) >> _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(0, ~ (~ (0)))))); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) || false, ((_GLF_DEAD(false)) || false) && true)))
      break;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, (true) && true), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, (true) && true), _GLF_IDENTITY(true, (true) || false)), false, true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, (true) && true), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, (true) && true), true), false, true)))), true && (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, (true) && true), true), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, true, false, false))), (true) && true), true), false, true)), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, true, false, false))), (true) && true), true), false, true)), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, true, false, false))), (true) && true), true), false, true))), bvec2(bvec3(bvec2(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, true, false, false))), (true) && true), true), false, true))), true)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, true, false, false))), (true) && true), true), false, true))), bvec2(bvec3(bvec2(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, true, false, false))), (true) && true), true), false, true))), true)))))))))))))))) && true))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec3((false), false, false))) || false)))
        return;
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
      return;
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))), _GLF_IDENTITY(bool(bvec2(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (6) | 0), 6))))), true)), _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec2(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))))), true)), bool(bvec2(bool(bvec2(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))))), true)), true)))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(bool(bvec2(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY(0, max(0, 0)) ^ (int(6))))), true)), bool(bvec2(bool(bvec2(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))))), true)), true))))), ! (! (bool((_GLF_IDENTITY(bool(bvec2(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))))), true)), bool(bvec2(bool(bvec2(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))))), true)), true)))))))))) && true))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | 0))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))))); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
       else
        {
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (true ? injectionSwitch.x : _GLF_FUZZED(dot(injectionSwitch, vec2(4669.2642, -0.8))))) > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false)))) || false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, bool(_GLF_IDENTITY(bool(_injected_loop_counter > 0), (_GLF_IDENTITY(bool(_injected_loop_counter > 0), (bool(_injected_loop_counter > 0)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))), false))))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), max(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             continue;
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     do
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))), mix(vec2(_GLF_FUZZED(-4.4), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch))), _GLF_IDENTITY(min((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch))), (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(min((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch))), (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)))), max(min((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch))), (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)))), min((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch))), (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)))))) : _GLF_FUZZED(injectionSwitch))))[1]), vec2((injectionSwitch)[_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), min(_GLF_IDENTITY(~ (0), _GLF_IDENTITY((true ? ~ (0) : _GLF_FUZZED((-25931 & 85094))), ((true ? ~ (0) : _GLF_FUZZED((-25931 & 85094)))) * 1)), _GLF_IDENTITY(~ (0), (_GLF_IDENTITY(~ (0), max(~ (0), ~ _GLF_IDENTITY((0), max((0), (0)))))) >> 0)))))], _GLF_FUZZED(0.8)), bvec2(true, false))).y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(669.055)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
      barrier();
     barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(reflect(629.974, -1018.1966)))) > injectionSwitch.y))));
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              return;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
          barrier();
        }
       else
        {
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), float(mat4x3(_GLF_IDENTITY(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), mix(float(_GLF_FUZZED(-8.1)), float(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))), bool(true))), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))))))))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))));
   do
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   return;
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), false || (bool(bvec2(false, false)))))));
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) | (gl_NumWorkGroups)).x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(false, bool(bvec4(false, false, false, true))))))), true && (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(false, bool(bvec4(false, false, false, true))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(7), int(7)))), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) | (_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) << 0)) | 0)))), int(_GLF_IDENTITY(7, (false ? _GLF_FUZZED(-89019) : 7)))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(7), int(7)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) ^ 0), clamp(int(_GLF_IDENTITY(7, int(ivec2(_GLF_IDENTITY(7, (7) << 0), ((95437 & 0) | 1))))), _GLF_IDENTITY(int(7), (int(7)) | (int(7))), int(7))), int(7)))))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), ! (! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), (true && (true)) || false)))))))))) && (false)))))), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_DEAD(false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
        }
       return;
      }
    }
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), min(int(7), int(7))), clamp(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) | (int(7)))) >> 0), int(7))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY(clamp(int(7), int(7), int(7)), (clamp(int(_GLF_IDENTITY(7, (7) + 0)), int(7), int(7))) | _GLF_IDENTITY((clamp(int(7), int(7), int(7))), clamp((clamp(int(7), int(7), int(7))), _GLF_IDENTITY((clamp(int(7), int(7), int(7))), (_GLF_IDENTITY((clamp(int(7), int(7), int(7))), (false ? _GLF_FUZZED(817) : (clamp(int(7), int(7), int(7)))))) | ((clamp(int(7), int(7), int(7))))), _GLF_IDENTITY((clamp(int(7), int(7), int(7))), ((clamp(int(7), int(7), int(7)))) | 0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(28214) : 0)), 0)) | 0)); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 barrier();
                }
              }
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               else
                {
                }
              }
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec3(false, false, false)))))
          barrier();
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))), true))))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     else
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(float(injectionSwitch.y), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), ! (! (! (_GLF_IDENTITY(false, (false) || false))))))) ? _GLF_IDENTITY(_GLF_FUZZED(-881.684), mix(float(_GLF_FUZZED(-3.6)), float(_GLF_FUZZED(-881.684)), bool(true))) : _GLF_IDENTITY(float(injectionSwitch.y), (float(injectionSwitch.y)) - 0.0)))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), bool(bvec4(false, true, false, false)))) && true)))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false)))))), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))) && true), bool(bvec3(false, false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(injectionSwitch), max(vec2(injectionSwitch), vec2(injectionSwitch))))).x > injectionSwitch.y))))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-820.546) : injectionSwitch.x)), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 1.0, 0.0, 1.0, 0.0, sqrt(0.0), _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(2987.4145) : 1.0)), 0.0, 0.0, 1.0, 1.0), mat4x3(mat4x3(mat4x3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 1.0, 0.0, 1.0, 0.0, sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0)))))))), clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0, log(1.0))), mix(vec2(_GLF_FUZZED(11.01), (vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0, log(1.0))))[1]), vec2((vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 1.0, log(1.0), 0.0, 1.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0, log(1.0))))[0], _GLF_FUZZED(79.05)), bvec2(true, false)))), injectionSwitch)).x > injectionSwitch.y))))), false, true)))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 1.0))).y))))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - sqrt(0.0)), injectionSwitch.y))))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), bool(bvec2(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), true))))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec3(gl_WorkGroupSize))).x, (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec3(gl_WorkGroupSize))).x) | 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))) - 0.0)))))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), false, false)))) && true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 1.0 * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), ((injectionSwitch.x)) - 0.0) + 0.0)), min((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0)), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))))) > injectionSwitch.y), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), 1.0 * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0)), mix(float(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0)), clamp((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0)), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0)), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))))), float(_GLF_FUZZED(-800.823)), bool(false)))) > injectionSwitch.y)) && true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / vec2(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(0.7) : 1.0)), _GLF_IDENTITY(1.0, min(1.0, 1.0))))))) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(bvec2(_GLF_DEAD(false), false), true))))))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 0.0, 1.0, 0.0)))))))) || false)))))
    barrier();
   for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(bvec3(true, true, false), false))))), true && (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(bvec3(true, true, false), false))))))), (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, min(0, 0))))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         continue;
        }
       if(_GLF_DEAD(false))
        return;
       GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y = workgroup_size;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       barrier();
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0))))
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-48.63) : injectionSwitch.x)) > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)))) || (false))), (! (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)))) || false)))));
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch))) / vec2(1.0, 1.0)).x, injectionSwitch.x))) - 0.0) > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), false, true, false)))) || false)))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(-23083) : _injected_loop_counter --)))))
            {
             return;
            }
          }
        }
      }
     else
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) ^ uvec3(0u, 0u, 0u)))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(gl_WorkGroupID, clamp(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), gl_WorkGroupID, gl_WorkGroupID)))).x;
 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0, ~ (~ (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter))) | (_injected_loop_counter)) != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)), exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat3(5178.2689, 6.3, 135.949, 64.84, 8.8, 2.1, 92.48, 75.96, -882.739)) : mat3(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, true && (false)))) || false) ? _GLF_FUZZED(vec2(-0.6, _GLF_IDENTITY(2.7, min(_GLF_IDENTITY(2.7, float(mat2x4(2.7, 0.0, tan(0.0), 0.0, sin(0.0), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(5.4) : 0.0)), abs(0.0), 0.0))), 2.7)))) : injectionSwitch)), exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0)))), mat2(1.0) * (vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)), vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)), 1.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 0.0, 0.0, 1.0), (mat3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)), 1.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 0.0, 0.0, 1.0)) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(vec4(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0, sin(determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))))), 0.0, 0.0)))), exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0), (false ? _GLF_IDENTITY(_GLF_FUZZED(mat3(5178.2689, 6.3, 135.949, _GLF_IDENTITY(64.84, (64.84) / 1.0), 8.8, 2.1, 92.48, 75.96, -882.739)), (false ? _GLF_FUZZED(mat3(-360.977, 38.71, 2684.1337, -75.90, -4.2, -1984.1396, -2.3, 0.0, 8.2)) : _GLF_FUZZED(mat3(5178.2689, 6.3, 135.949, _GLF_IDENTITY(64.84, (64.84) / 1.0), 8.8, 2.1, 92.48, 75.96, -882.739)))) : mat3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)), _GLF_IDENTITY(exp(0.0), (exp(0.0)) * 1.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0))))))).x > injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch) / abs(vec2(1.0, 1.0))), max(_GLF_IDENTITY(false, bool(bvec2(false, true))) ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch, false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(vec2(-0.6, _GLF_IDENTITY(2.7, min(2.7, 2.7)))) : injectionSwitch), (false ? _GLF_FUZZED(fract(vec2(9.8, 0.1))) : (false ? _GLF_FUZZED(vec2(-0.6, _GLF_IDENTITY(2.7, min(2.7, 2.7)))) : injectionSwitch))), (_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(-0.6, 2.7), min(vec2(-0.6, 2.7), vec2(-0.6, 2.7)))) : injectionSwitch), max((false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch), _GLF_IDENTITY((false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-0.6, max(-0.6, _GLF_IDENTITY(-0.6, min(-0.6, _GLF_IDENTITY(-0.6, _GLF_IDENTITY((false ? _GLF_FUZZED(390.142) : -0.6), max((false ? _GLF_FUZZED(390.142) : -0.6), (false ? _GLF_FUZZED(390.142) : -0.6)))))))), 2.7)) : injectionSwitch), max((false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch), (false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)))))) / vec2(1.0, 1.0))), exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat3(5178.2689, 6.3, 135.949, 64.84, 8.8, 2.1, 92.48, 75.96, -882.739)) : mat3(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || _GLF_IDENTITY(false, (false) && true)) ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)), exp(0.0), 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))))), mat2(1.0) * (vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, _GLF_IDENTITY(2.7, float(_GLF_IDENTITY(mat2x4(2.7, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)), mat2x4(mat4(mat2x4(2.7, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))))))))) : injectionSwitch)), exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat3(5178.2689, 6.3, 135.949, _GLF_IDENTITY(64.84, float(_GLF_IDENTITY(mat2x3(64.84, 1.0, 0.0, 0.0, abs(1.0), 0.0), mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat2x3(64.84, 1.0, 0.0, 0.0, abs(1.0), 0.0))))), 8.8, 2.1, 92.48, 75.96, -882.739)) : mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch))) * mat2(1.0)), exp(0.0), 0.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3x4(1.0, 1.0, 0.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, abs(0.0), 1.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, exp(0.0), 1.0, 0.0, 0.0, 1.0)), 1.0, 0.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0))), (mat3x4(1.0, 1.0, 0.0, determinant(mat3(1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(48.59)), bool(false))), _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x4(0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0), mat3x4(mat4(mat3x4(0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)))))))), _GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, abs(0.0), 1.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, exp(0.0), 1.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) / 1.0), 1.0)), 1.0, 0.0, 1.0, determinant(mat2(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 0.0))), _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 1.0, 0.0, 1.0)))) - mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 0.0, 1.0, 0.0, 0.0))))))).x > injectionSwitch.y)), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch) / abs(vec2(1.0, 1.0))), max(_GLF_IDENTITY(false, bool(bvec2(false, true))) ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch, false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(vec2(-0.6, _GLF_IDENTITY(2.7, min(2.7, 2.7)))) : injectionSwitch), (false ? _GLF_FUZZED(fract(vec2(9.8, 0.1))) : (false ? _GLF_FUZZED(vec2(-0.6, _GLF_IDENTITY(2.7, min(2.7, 2.7)))) : injectionSwitch))), (_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(-0.6, 2.7), min(vec2(-0.6, 2.7), vec2(-0.6, 2.7)))) : injectionSwitch), max((false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch), _GLF_IDENTITY((false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-0.6, max(-0.6, _GLF_IDENTITY(-0.6, min(-0.6, _GLF_IDENTITY(-0.6, _GLF_IDENTITY((false ? _GLF_FUZZED(390.142) : -0.6), max((false ? _GLF_FUZZED(390.142) : -0.6), (false ? _GLF_FUZZED(390.142) : -0.6)))))))), 2.7)) : injectionSwitch), max((false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch), (false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)))))) / vec2(1.0, 1.0))), exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat3(5178.2689, 6.3, 135.949, 64.84, 8.8, 2.1, 92.48, 75.96, -882.739)) : mat3(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || _GLF_IDENTITY(false, (false) && true)) ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)), exp(0.0), 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))))), mat2(1.0) * (vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, _GLF_IDENTITY(2.7, float(_GLF_IDENTITY(mat2x4(2.7, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)), mat2x4(mat4(mat2x4(2.7, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))))))))) : injectionSwitch)), exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat3(5178.2689, 6.3, 135.949, _GLF_IDENTITY(64.84, float(_GLF_IDENTITY(mat2x3(64.84, 1.0, 0.0, 0.0, abs(1.0), 0.0), mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat2x3(64.84, 1.0, 0.0, 0.0, abs(1.0), 0.0))))), 8.8, 2.1, 92.48, 75.96, -882.739)) : mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch))) * mat2(1.0)), exp(0.0), 0.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3x4(1.0, 1.0, 0.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, abs(0.0), 1.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, exp(0.0), 1.0, 0.0, 0.0, 1.0)), 1.0, 0.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0))), (mat3x4(1.0, 1.0, 0.0, determinant(mat3(1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(48.59)), bool(false))), _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x4(0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0), mat3x4(mat4(mat3x4(0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)))))))), _GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, abs(0.0), 1.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, exp(0.0), 1.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) / 1.0), 1.0)), 1.0, 0.0, 1.0, determinant(mat2(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 0.0))), _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 1.0, 0.0, 1.0)))) - mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 0.0, 1.0, 0.0, 0.0))))))).x > injectionSwitch.y)), false))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch) / abs(vec2(1.0, 1.0))), max(_GLF_IDENTITY(false, bool(bvec2(false, true))) ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch, false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(vec2(-0.6, _GLF_IDENTITY(2.7, min(2.7, 2.7)))) : injectionSwitch), (false ? _GLF_FUZZED(fract(vec2(9.8, 0.1))) : (false ? _GLF_FUZZED(vec2(-0.6, _GLF_IDENTITY(2.7, min(2.7, 2.7)))) : injectionSwitch))), (_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(-0.6, 2.7), min(vec2(-0.6, 2.7), vec2(-0.6, 2.7)))) : injectionSwitch), max((false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch), _GLF_IDENTITY((false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-0.6, max(-0.6, _GLF_IDENTITY(-0.6, min(-0.6, _GLF_IDENTITY(-0.6, _GLF_IDENTITY((false ? _GLF_FUZZED(390.142) : -0.6), max((false ? _GLF_FUZZED(390.142) : -0.6), (false ? _GLF_FUZZED(390.142) : -0.6)))))))), 2.7)) : injectionSwitch), max((false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch), (false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)))))) / vec2(1.0, 1.0))), exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat3(5178.2689, 6.3, 135.949, 64.84, 8.8, 2.1, 92.48, 75.96, -882.739)) : mat3(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || _GLF_IDENTITY(false, (false) && true)) ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)), exp(0.0), 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))))), mat2(1.0) * (vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, _GLF_IDENTITY(2.7, float(_GLF_IDENTITY(mat2x4(2.7, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)), mat2x4(mat4(mat2x4(2.7, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x))))))))) : injectionSwitch)), exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat3(5178.2689, 6.3, 135.949, _GLF_IDENTITY(64.84, float(_GLF_IDENTITY(mat2x3(64.84, 1.0, 0.0, 0.0, abs(1.0), 0.0), mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat2x3(64.84, 1.0, 0.0, 0.0, abs(1.0), 0.0))))), 8.8, 2.1, 92.48, 75.96, -882.739)) : mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch))) * mat2(1.0)), exp(0.0), 0.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3x4(1.0, 1.0, 0.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, abs(0.0), 1.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, exp(0.0), 1.0, 0.0, 0.0, 1.0)), 1.0, 0.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0))), (mat3x4(1.0, 1.0, 0.0, determinant(mat3(1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(48.59)), bool(false))), _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x4(0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0), mat3x4(mat4(mat3x4(0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)))))))), _GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, abs(0.0), 1.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, exp(0.0), 1.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) / 1.0), 1.0)), 1.0, 0.0, 1.0, determinant(mat2(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 0.0))), _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 1.0, 0.0, 1.0)))) - mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 0.0, 1.0, 0.0, 0.0))))))).x > injectionSwitch.y)), false))), false, false)))), bvec2(bvec2(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)), exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat3(5178.2689, 6.3, 135.949, 64.84, 8.8, 2.1, 92.48, 75.96, _GLF_IDENTITY(-882.739, (_GLF_IDENTITY(-882.739, 0.0 + (-882.739))) + 0.0))) : mat3(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false) ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)), exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0)))), mat2(1.0) * (vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)), exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0), transpose(transpose(mat3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-0.6, 2.7)), min(_GLF_IDENTITY(_GLF_FUZZED(vec2(-0.6, 2.7)), max(_GLF_FUZZED(vec2(-0.6, 2.7)), _GLF_FUZZED(vec2(-0.6, 2.7)))), _GLF_FUZZED(vec2(-0.6, 2.7)))) : injectionSwitch)), exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0)))), (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(mat3(5178.2689, 6.3, 135.949, 64.84, 8.8, 2.1, 92.48, 75.96, -882.739)) : mat3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-0.6, _GLF_IDENTITY(mix(float(_GLF_FUZZED((7.6 + 599.786))), float(-0.6), bool(true)), 0.0 + (_GLF_IDENTITY(mix(float(_GLF_FUZZED((7.6 + 599.786))), float(-0.6), bool(true)), clamp(_GLF_IDENTITY(mix(float(_GLF_FUZZED((7.6 + 599.786))), float(-0.6), bool(true)), (mix(float(_GLF_FUZZED((7.6 + 599.786))), float(-0.6), bool(true))) - 0.0), mix(float(_GLF_FUZZED((7.6 + 599.786))), float(-0.6), bool(true)), mix(float(_GLF_FUZZED((_GLF_IDENTITY(7.6 + 599.786, (false ? _GLF_FUZZED(16.10) : 7.6 + 599.786))))), float(-0.6), bool(true))))))), 2.7)) : injectionSwitch)), exp(0.0), _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), mix(float(_GLF_FUZZED(2.5)), float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), (true ? _GLF_IDENTITY(0.0, max(0.0, 0.0)) : _GLF_FUZZED(57.14)))), bool(true))), 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, 0.0, 0.0))))))).x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 1.0, 0.0, tan(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)), exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat3(5178.2689, 6.3, 135.949, 64.84, 8.8, 2.1, 92.48, 75.96, -882.739)) : mat3(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false) ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)), exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0)))), mat2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, float(mat2x4(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), exp(0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0)))))) * (vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)), exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0), transpose(transpose(mat3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch), vec2(mat4x3(_GLF_IDENTITY((false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch), ((false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)) * vec2(1.0, 1.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0)))), exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0)))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), false || (! (_GLF_IDENTITY(false, false || (false))))))), (false) || false) ? _GLF_FUZZED(mat3(5178.2689, 6.3, 135.949, 64.84, 8.8, 2.1, 92.48, 75.96, -882.739)) : mat3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-0.6, _GLF_IDENTITY(mix(float(_GLF_FUZZED((7.6 + 599.786))), float(-0.6), bool(true)), 0.0 + (_GLF_IDENTITY(mix(float(_GLF_FUZZED((7.6 + 599.786))), float(-0.6), bool(true)), clamp(_GLF_IDENTITY(mix(float(_GLF_FUZZED((7.6 + 599.786))), float(-0.6), bool(true)), (mix(float(_GLF_FUZZED((7.6 + 599.786))), float(-0.6), bool(true))) - 0.0), mix(float(_GLF_FUZZED((7.6 + _GLF_IDENTITY(599.786, (true ? 599.786 : _GLF_FUZZED(44.68)))))), float(-0.6), bool(true)), mix(float(_GLF_FUZZED((7.6 + 599.786))), float(-0.6), bool(true))))))), 2.7)) : injectionSwitch)), exp(0.0), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, 0.0, 0.0))))))).x > injectionSwitch.y), false || ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)), exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat3(5178.2689, 6.3, 135.949, 64.84, 8.8, 2.1, 92.48, 75.96, -882.739)) : mat3(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false) ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)), exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0)))), mat2(1.0) * (vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)), exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0), transpose(transpose(mat3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)), exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0)))), (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(mat3(5178.2689, 6.3, 135.949, 64.84, 8.8, 2.1, 92.48, 75.96, -882.739)) : mat3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-0.6, _GLF_IDENTITY(mix(float(_GLF_FUZZED((7.6 + 599.786))), float(-0.6), bool(true)), 0.0 + (_GLF_IDENTITY(mix(float(_GLF_FUZZED((7.6 + 599.786))), float(-0.6), bool(true)), clamp(_GLF_IDENTITY(mix(float(_GLF_FUZZED((7.6 + 599.786))), float(-0.6), bool(true)), (mix(float(_GLF_FUZZED((7.6 + 599.786))), float(-0.6), bool(true))) - 0.0), mix(float(_GLF_FUZZED((7.6 + 599.786))), float(-0.6), bool(true)), mix(float(_GLF_FUZZED((7.6 + 599.786))), float(-0.6), bool(true))))))), 2.7)) : injectionSwitch)), exp(0.0), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, 0.0, 0.0))))))).x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)), exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat3(5178.2689, 6.3, 135.949, 64.84, 8.8, 2.1, 92.48, 75.96, -882.739)) : mat3(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false) ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)), exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0)))), mat2(1.0) * (vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)), exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0), transpose(transpose(mat3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)), exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0)))), (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(mat3(5178.2689, 6.3, 135.949, 64.84, 8.8, 2.1, 92.48, 75.96, -882.739)) : mat3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-0.6, _GLF_IDENTITY(mix(float(_GLF_FUZZED((7.6 + 599.786))), float(-0.6), bool(true)), 0.0 + (_GLF_IDENTITY(mix(float(_GLF_FUZZED((7.6 + 599.786))), float(-0.6), bool(true)), clamp(_GLF_IDENTITY(mix(float(_GLF_FUZZED((7.6 + 599.786))), float(-0.6), bool(true)), (mix(float(_GLF_FUZZED((7.6 + 599.786))), float(-0.6), bool(true))) - 0.0), mix(float(_GLF_FUZZED((7.6 + 599.786))), float(-0.6), bool(true)), mix(float(_GLF_FUZZED((7.6 + 599.786))), float(-0.6), bool(true))))))), 2.7)) : injectionSwitch)), exp(0.0), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, 0.0, 0.0))))))).x > injectionSwitch.y), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)), exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat3(5178.2689, 6.3, 135.949, 64.84, 8.8, 2.1, 92.48, 75.96, -882.739)) : mat3(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false) ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)), exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0)))), mat2(1.0) * (vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)), exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0), transpose(transpose(mat3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, 2.7)) : injectionSwitch)), exp(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0)))), (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(mat3(5178.2689, 6.3, 135.949, 64.84, 8.8, 2.1, 92.48, 75.96, -882.739)) : mat3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-0.6, _GLF_IDENTITY(mix(float(_GLF_FUZZED((7.6 + 599.786))), float(-0.6), bool(true)), 0.0 + (_GLF_IDENTITY(mix(float(_GLF_FUZZED((7.6 + 599.786))), float(-0.6), bool(true)), clamp(_GLF_IDENTITY(mix(float(_GLF_FUZZED((7.6 + 599.786))), float(-0.6), bool(true)), (mix(float(_GLF_FUZZED((7.6 + 599.786))), float(-0.6), bool(true))) - 0.0), mix(float(_GLF_FUZZED((7.6 + 599.786))), float(-0.6), bool(true)), mix(float(_GLF_FUZZED((7.6 + 599.786))), float(-0.6), bool(true))))))), 2.7)) : injectionSwitch)), exp(0.0), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, 0.0, 0.0))))))).x > injectionSwitch.y))))))))))))), false))))))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        continue;
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))))
            {
             return;
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y * workgroup_id, ~ _GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, uvec2(uvec3(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, _GLF_IDENTITY((true ? GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size : _GLF_IDENTITY(_GLF_FUZZED(uvec2(22446u, 55521u)), max(_GLF_FUZZED(uvec2(22446u, 55521u)), _GLF_FUZZED(uvec2(22446u, 55521u))))), _GLF_IDENTITY(uvec2(uvec3(_GLF_IDENTITY((true ? GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size : _GLF_IDENTITY(_GLF_FUZZED(uvec2(22446u, 55521u)), max(_GLF_FUZZED(uvec2(22446u, 55521u)), _GLF_FUZZED(uvec2(22446u, 55521u))))), (true ? (true ? GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size : _GLF_IDENTITY(_GLF_FUZZED(uvec2(22446u, 55521u)), max(_GLF_FUZZED(uvec2(22446u, 55521u)), _GLF_FUZZED(uvec2(22446u, 55521u))))) : _GLF_FUZZED(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size))), 0u)), (uvec2(uvec3(_GLF_IDENTITY((true ? GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size : _GLF_IDENTITY(_GLF_FUZZED(uvec2(22446u, 55521u)), max(_GLF_FUZZED(uvec2(22446u, 55521u)), _GLF_FUZZED(uvec2(22446u, 55521u))))), (true ? (true ? GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size : _GLF_IDENTITY(_GLF_FUZZED(uvec2(22446u, 55521u)), max(_GLF_FUZZED(uvec2(22446u, 55521u)), _GLF_FUZZED(uvec2(22446u, 55521u))))) : _GLF_FUZZED(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size))), 0u))) + (uvec2(0u, 0u) & uvec2(122622u, 53611u))))), 1u))).y, (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, uvec2(uvec3(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, (true ? GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size : _GLF_FUZZED(uvec2(22446u, 55521u)))), 1u))).y) * 1u) * workgroup_id)), min((~ _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, uvec2(uvec3(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, (true ? GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size : _GLF_FUZZED(uvec2(22446u, 55521u)))), 1u))).y * workgroup_id), (uvec3(61636u, 171978u, 126490u).p & 0u) ^ ((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, uvec2(uvec3(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, true, false)))) || false) ? GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size : _GLF_FUZZED(uvec2(22446u, 55521u)))), 1u))).y * workgroup_id)))), (~ (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, uvec2(uvec3(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, (true ? GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size : _GLF_FUZZED(uvec2(22446u, 55521u)))), 1u))).y * workgroup_id)))), ((~ _GLF_IDENTITY((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y * workgroup_id), 0u ^ ((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y * workgroup_id))))) | _GLF_IDENTITY((_GLF_IDENTITY((~ (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y, 1u * (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, min(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, uvec2(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[0], GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1]))) | (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size)))).y)) * workgroup_id)), (0u | 1u) * ((~ (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y, 1u * (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, min(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, uvec2(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[0], GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1]))) | (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size)))).y)) * workgroup_id))))), ((_GLF_IDENTITY((~ (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y, 1u * (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, min(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, uvec2(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[0], GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1]))) | (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size)))).y)) * workgroup_id)), (0u | 1u) * ((~ (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y, 1u * (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, min(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, uvec2(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[0], GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1]))) | (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size)))).y)) * workgroup_id)))))) / ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))))));
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (true ? subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u), ~ (~ (uvec3(subgroup_size, _GLF_IDENTITY(uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-10.03)), bool(false)))) / 1.0), injectionSwitch.x)), uint(uvec2(uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-10.03)), bool(false)))) / 1.0), injectionSwitch.x)), uint(_GLF_ONE(1.0, injectionSwitch.y))))), 1u))))), (uint(_GLF_IDENTITY(uvec3(subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u), ~ (~ (uvec3(subgroup_size, _GLF_IDENTITY(uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-10.03)), bool(false)))) / 1.0), injectionSwitch.x)), uint(uvec2(uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-10.03)), bool(false)))) / 1.0), injectionSwitch.x)), uint(_GLF_ONE(1.0, injectionSwitch.y))))), 1u)))))) ^ 0u)), min(subgroup_size, subgroup_size)), (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) * 1u)) >> 0u) : _GLF_FUZZED(num_workgroup))) + GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), (~ (workgroup_base)) >> 0u))), (workgroup_base) ^ 0u), workgroup_base)) + subgroup_id * subgroup_size + (_GLF_IDENTITY(_GLF_IDENTITY((GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1), ((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, min(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size)).x + 1)) + 0u) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ (~ (subgroup_size)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(atomicCompSwap(workgroup_size, workgroup_id, subgroup_id))))) * 1u)) : ~ (_GLF_IDENTITY(~ (subgroup_size), _GLF_IDENTITY(min(~ (subgroup_size), _GLF_IDENTITY(~ (subgroup_size), clamp(~ (subgroup_size), ~ (subgroup_size), ~ (subgroup_size)))), (min(~ (subgroup_size), _GLF_IDENTITY(~ (subgroup_size), clamp(~ (subgroup_size), ~ (subgroup_size), ~ (subgroup_size))))) | (min(~ (subgroup_size), _GLF_IDENTITY(~ (subgroup_size), clamp(~ (subgroup_size), ~ (subgroup_size), ~ (subgroup_size))))))))))), max(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, uvec2(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size) << uvec2(0u, 0u))[0], GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size[1])).x + 1), ((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1, min(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1, _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1)), 0u), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1, min(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1, _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1)), 0u)), (uvec2(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1, min(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1, _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1)), 0u))) | (uvec2(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1, min(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1, _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1)), 0u))))), clamp(uvec2(_GLF_IDENTITY(uvec2(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1, min(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1, _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1)), 0u)), (uvec2(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1, min(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1, _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1)), 0u))) | (uvec2(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1, min(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1, _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1)), 0u))))), uvec2(_GLF_IDENTITY(uvec2(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1, min(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1, _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1)), 0u)), (uvec2(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1, min(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1, _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1)), 0u))) | (uvec2(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1, min(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1, _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1)), 0u))))), uvec2(_GLF_IDENTITY(uvec2(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1, min(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1, _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1)), 0u)), (uvec2(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1, min(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1, _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1)), 0u))) | (uvec2(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1, min(_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1, _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u + (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1)), 0u)))))))))))) + 0u) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) ^ 0u)), (uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) ^ 0u))) >> 0u))), _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x, 0u | (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x)) + 1), ((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1, (GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1) - 0u))) + 0u) % _GLF_IDENTITY(subgroup_size, ~ _GLF_IDENTITY((~ (subgroup_size)), (_GLF_IDENTITY((~ (subgroup_size)), ~ (~ ((~ (subgroup_size)))))) | ((~ (subgroup_size))))))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bool(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)) > 0)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true && (false), false || (true && (false))), ! (! (_GLF_IDENTITY(true && (false), ! (! (_GLF_IDENTITY(true && (false), bool(bvec4(true && _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) || false)) || false), true, false, _GLF_IDENTITY(true, ! (! (true)))))), true, false, true))))))))), (_GLF_IDENTITY(true && (false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true && (false), ! (! (_GLF_IDENTITY(true && (false), bool(bvec4(true && _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) || false)) || false), true, false, _GLF_IDENTITY(true, ! (! (true)))))), _GLF_IDENTITY(true, false || (true)), false, true))))))), (! (_GLF_IDENTITY(true && (false), ! (! (_GLF_IDENTITY(true && (false), bool(bvec4(true && _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) || false)) || false), true, false, _GLF_IDENTITY(true, ! (! (true)))))), true, false, true)))))))) && true)))) && true))))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
        {
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y)) || (_GLF_DEAD(false))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
          barrier();
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(injectionSwitch), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false))); _injected_loop_counter ++)
            {
             return;
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), 0 | (int(7))), int(7)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY(1 & ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), max(1 & ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), 1 & (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), int(ivec2(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))), int(int((1 << _GLF_IDENTITY(int(2), int(2)))))), 0))) >> _GLF_IDENTITY(int(2), int(2)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))))))
      return;
    }
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || _GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) && true) && true)))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false))))))) && true), _GLF_IDENTITY(false || (false), (false || (false)) || false))) || false)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false))), (! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (_GLF_IDENTITY(false, false || (false))))) || false)))) || false), (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false) || (false))), ! (! ((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (! (false || (false))))))))) || false)))) || false))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), vec2(vec4((injectionSwitch), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(_GLF_IDENTITY(float(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)), (float(_GLF_ZERO(0.0, injectionSwitch.x))) / 1.0)), min(float(_GLF_IDENTITY(float(_GLF_ZERO(0.0, injectionSwitch.x)), (float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(-4418.7705) : _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / sqrt(1.0))))))) / 1.0)), float(_GLF_IDENTITY(float(_GLF_ZERO(0.0, injectionSwitch.x)), (float(_GLF_ZERO(0.0, injectionSwitch.x))) / _GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))))))), sqrt(0.0)))) * mat2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) * 1.0))), injectionSwitch)).x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) || _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), true && ((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(determinant(mat4(sin(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, tan(0.0), log(1.0), 0.0, 0.0, 0.0)), (false ? _GLF_FUZZED(-3038.4178) : determinant(mat4(sin(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, tan(0.0), log(1.0), 0.0, 0.0, 0.0))))), vec3(0.0, 0.0, 0.0) + (vec3(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), determinant(mat4(_GLF_IDENTITY(sin(0.0), clamp(_GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(1.0) : sin(0.0))), sin(0.0), _GLF_IDENTITY(sin(0.0), mix(float(_GLF_FUZZED(-51.30)), float(_GLF_IDENTITY(sin(0.0), clamp(sin(0.0), sin(0.0), sin(0.0)))), bool(true))))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, tan(0.0), log(1.0), 0.0, 0.0, 0.0)))))))) * mat2(1.0)).x, _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, 0.0), (true ? _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, 0.0), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0)) * mat2(1.0)).x, 0.0))) : _GLF_FUZZED(vec2(-8.5, -0.6)))), mix(vec2(_GLF_FUZZED(_GLF_IDENTITY((- 85.90), min((- _GLF_IDENTITY(85.90, 1.0 * (85.90))), (- 85.90)))), _GLF_IDENTITY(_GLF_FUZZED(-86.04), clamp(_GLF_FUZZED(-86.04), _GLF_FUZZED(-86.04), _GLF_FUZZED(-86.04)))), vec2((vec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), injectionSwitch)), (injectionSwitch) * mat2(1.0)).x, 0.0))[0], (vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(1.0))), transpose(transpose(mat2(1.0))))).x, 0.0))[1]), bvec2(true, true)))), mix(float(_GLF_FUZZED(999.387)), _GLF_IDENTITY(float(_GLF_IDENTITY(float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x, 0.0), mix(vec2(_GLF_FUZZED(_GLF_IDENTITY((- 85.90), max((- 85.90), (- 85.90)))), _GLF_FUZZED(-86.04)), vec2((vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, 0.0))[0], (vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, 0.0))[1]), bvec2(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), true)))), max(float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-8.6, 9.2))))) * mat2(1.0)).x, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x)))), 0.0), mix(vec2(_GLF_FUZZED((- 85.90)), _GLF_FUZZED(-86.04)), vec2((vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-70.55)), vec2(_GLF_FUZZED(-924.568), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))) * mat2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(vec4(-2116.6405, -351.469, -5059.1601, -9.7).s)), bool(false))))).x, 0.0))[0], (_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, 0.0), vec2(0.0, 0.0) + (vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), mix(vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))[0], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))[1]), vec2(_GLF_FUZZED(82.07), _GLF_FUZZED(-1082.6377)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x, 0.0))))[1]), bvec2(true, true)))), float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, 0.0), mix(vec2(_GLF_FUZZED((- 85.90)), _GLF_FUZZED(-86.04)), vec2((vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(vec2(mat3x2((injectionSwitch), _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), max(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)))), dot(_GLF_IDENTITY(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), _GLF_IDENTITY((vec2(log(1.0), length(vec3(0.0, 0.0, 0.0)))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), vec2(1.0, 1.0) * ((vec2(log(1.0), length(vec3(0.0, 0.0, 0.0)))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))), vec2(1.0, 1.0))))), 0.0, 0.0, 1.0)), min(vec2(mat3x2((injectionSwitch), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), max(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0))))), (false ? _GLF_FUZZED(intBitsToFloat(32056)) : _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), max(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0))))))), 0.0, 0.0, 1.0)), vec2(mat3x2((injectionSwitch), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), max(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0))))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), max(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0))))), (_GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), max(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)))))) * 1.0)), float(_GLF_FUZZED(3.2)), bool(false))), 0.0, 0.0, 1.0))))) * mat2(1.0)).x, 0.0))[0], (vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x, 0.0))[1]), _GLF_IDENTITY(bvec2(true, true), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), true)), bvec2(bvec3(bvec2(bvec3(bvec2(true, true), true)), true))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), true)), bvec2(bvec3(bvec2(bvec3(bvec2(true, true), true)), true))))), false))))))))))), clamp(float(_GLF_IDENTITY(float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x, 0.0), mix(vec2(_GLF_FUZZED(_GLF_IDENTITY((- 85.90), max((- 85.90), (- 85.90)))), _GLF_FUZZED(-86.04)), vec2((vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, 0.0))[0], (vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, 0.0))[1]), bvec2(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), true)))), max(float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-8.6, 9.2))))) * mat2(1.0)).x, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x)))), 0.0), mix(vec2(_GLF_FUZZED((- 85.90)), _GLF_FUZZED(-86.04)), vec2((vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-70.55)), vec2(_GLF_FUZZED(-924.568), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))) * mat2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(vec4(-2116.6405, -351.469, -5059.1601, -9.7).s)), bool(false))))).x, 0.0))[0], (_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, 0.0), vec2(0.0, 0.0) + (vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), mix(vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))[0], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))[1]), vec2(_GLF_FUZZED(82.07), _GLF_FUZZED(-1082.6377)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x, 0.0))))[1]), bvec2(true, true)))), float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, 0.0), mix(vec2(_GLF_FUZZED((- 85.90)), _GLF_FUZZED(-86.04)), vec2((vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(vec2(mat3x2((injectionSwitch), _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), max(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)))), dot(_GLF_IDENTITY(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), _GLF_IDENTITY((vec2(log(1.0), length(vec3(0.0, 0.0, 0.0)))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), vec2(1.0, 1.0) * ((vec2(log(1.0), length(vec3(0.0, 0.0, 0.0)))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))), vec2(1.0, 1.0))))), 0.0, 0.0, 1.0)), min(vec2(mat3x2((injectionSwitch), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), max(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0))))), (false ? _GLF_FUZZED(intBitsToFloat(32056)) : _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), max(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0))))))), 0.0, 0.0, 1.0)), vec2(mat3x2((injectionSwitch), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), max(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0))))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), max(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0))))), (_GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), max(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)))))) * 1.0)), float(_GLF_FUZZED(3.2)), bool(false))), 0.0, 0.0, 1.0))))) * mat2(1.0)).x, 0.0))[0], (vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x, 0.0))[1]), _GLF_IDENTITY(bvec2(true, true), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), true)), bvec2(bvec3(bvec2(bvec3(bvec2(true, true), true)), true))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), true)), bvec2(bvec3(bvec2(bvec3(bvec2(true, true), true)), true))))), false))))))))))), _GLF_IDENTITY(float(_GLF_IDENTITY(float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x, 0.0), mix(vec2(_GLF_FUZZED(_GLF_IDENTITY((- 85.90), max((- 85.90), (- 85.90)))), _GLF_FUZZED(-86.04)), vec2((vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, 0.0))[0], (vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, 0.0))[1]), bvec2(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), true)))), max(float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-8.6, 9.2))))) * mat2(1.0)).x, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x)))), 0.0), mix(vec2(_GLF_FUZZED((- 85.90)), _GLF_FUZZED(-86.04)), vec2((vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-70.55)), vec2(_GLF_FUZZED(-924.568), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))) * mat2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(vec4(-2116.6405, -351.469, -5059.1601, -9.7).s)), bool(false))))).x, 0.0))[0], (_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, 0.0), vec2(0.0, 0.0) + (vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), mix(vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))[0], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))[1]), vec2(_GLF_FUZZED(82.07), _GLF_FUZZED(-1082.6377)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x, 0.0))))[1]), bvec2(true, true)))), float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, 0.0), mix(vec2(_GLF_FUZZED((- 85.90)), _GLF_FUZZED(-86.04)), vec2((vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(vec2(mat3x2((injectionSwitch), _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), max(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)))), dot(_GLF_IDENTITY(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), _GLF_IDENTITY((vec2(log(1.0), length(vec3(0.0, 0.0, 0.0)))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), vec2(1.0, 1.0) * ((vec2(log(1.0), length(vec3(0.0, 0.0, 0.0)))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))), vec2(1.0, 1.0))))), 0.0, 0.0, 1.0)), min(vec2(mat3x2((injectionSwitch), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), max(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0))))), (false ? _GLF_FUZZED(intBitsToFloat(32056)) : _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), max(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0))))))), 0.0, 0.0, 1.0)), vec2(mat3x2((injectionSwitch), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), max(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0))))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), max(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0))))), (_GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), max(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)))))) * 1.0)), float(_GLF_FUZZED(3.2)), bool(false))), 0.0, 0.0, 1.0))))) * mat2(1.0)).x, 0.0))[0], (vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x, 0.0))[1]), _GLF_IDENTITY(bvec2(true, true), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), true)), bvec2(bvec3(bvec2(bvec3(bvec2(true, true), true)), true))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), true)), bvec2(bvec3(bvec2(bvec3(bvec2(true, true), true)), true))))), false))))))))))), 0.0 + (float(_GLF_IDENTITY(float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x, 0.0), mix(vec2(_GLF_FUZZED(_GLF_IDENTITY((- 85.90), max((- 85.90), (- 85.90)))), _GLF_FUZZED(-86.04)), vec2((vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, 0.0))[0], (vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, 0.0))[1]), bvec2(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), true)))), max(float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-8.6, 9.2))))) * mat2(1.0)).x, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x)))), 0.0), mix(vec2(_GLF_FUZZED((- 85.90)), _GLF_FUZZED(-86.04)), vec2((vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-70.55)), vec2(_GLF_FUZZED(-924.568), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))) * mat2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(vec4(-2116.6405, -351.469, -5059.1601, -9.7).s)), bool(false))))).x, 0.0))[0], (_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, 0.0), vec2(0.0, 0.0) + (vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), mix(vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))[0], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))[1]), vec2(_GLF_FUZZED(82.07), _GLF_FUZZED(-1082.6377)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x, 0.0))))[1]), bvec2(true, true)))), float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, 0.0), mix(vec2(_GLF_FUZZED((- 85.90)), _GLF_FUZZED(-86.04)), vec2((vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(vec2(mat3x2((injectionSwitch), _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), max(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)))), dot(_GLF_IDENTITY(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), _GLF_IDENTITY((vec2(log(1.0), length(vec3(0.0, 0.0, 0.0)))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), vec2(1.0, 1.0) * ((vec2(log(1.0), length(vec3(0.0, 0.0, 0.0)))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))), vec2(1.0, 1.0))))), 0.0, 0.0, 1.0)), min(vec2(mat3x2((injectionSwitch), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), max(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0))))), (false ? _GLF_FUZZED(intBitsToFloat(32056)) : _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), max(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0))))))), 0.0, 0.0, 1.0)), vec2(mat3x2((injectionSwitch), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), max(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0))))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), max(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0))))), (_GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), max(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)))))) * 1.0)), float(_GLF_FUZZED(3.2)), bool(false))), 0.0, 0.0, 1.0))))) * mat2(1.0)).x, 0.0))[0], (vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x, 0.0))[1]), _GLF_IDENTITY(bvec2(true, true), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), true)), bvec2(bvec3(bvec2(bvec3(bvec2(true, true), true)), true))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), true)), bvec2(bvec3(bvec2(bvec3(bvec2(true, true), true)), true))))), false))))))))))))), float(_GLF_IDENTITY(float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x, 0.0), mix(vec2(_GLF_FUZZED(_GLF_IDENTITY((- 85.90), max((- 85.90), (- 85.90)))), _GLF_FUZZED(-86.04)), vec2((vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, 0.0))[0], (vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, 0.0))[1]), bvec2(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), true)))), max(float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-8.6, 9.2))))) * mat2(1.0)).x, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x)))), 0.0), mix(vec2(_GLF_FUZZED((- 85.90)), _GLF_FUZZED(-86.04)), vec2((vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-70.55)), vec2(_GLF_FUZZED(-924.568), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))) * mat2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(vec4(-2116.6405, -351.469, -5059.1601, -9.7).s)), bool(false))))).x, 0.0))[0], (_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, 0.0), vec2(0.0, 0.0) + (vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), mix(vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))[0], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))[1]), vec2(_GLF_FUZZED(82.07), _GLF_FUZZED(-1082.6377)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x, 0.0))))[1]), bvec2(true, true)))), float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, 0.0), mix(vec2(_GLF_FUZZED((- 85.90)), _GLF_FUZZED(-86.04)), vec2((vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(vec2(mat3x2((injectionSwitch), _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), max(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)))), dot(_GLF_IDENTITY(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), _GLF_IDENTITY((vec2(log(1.0), length(vec3(0.0, 0.0, 0.0)))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), vec2(1.0, 1.0) * ((vec2(log(1.0), length(vec3(0.0, 0.0, 0.0)))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))), vec2(1.0, 1.0))))), 0.0, 0.0, 1.0)), min(vec2(mat3x2((injectionSwitch), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), max(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0))))), (false ? _GLF_FUZZED(intBitsToFloat(32056)) : _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), max(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0))))))), 0.0, 0.0, 1.0)), vec2(mat3x2((injectionSwitch), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), max(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0))))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), max(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0))))), (_GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), max(dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)), dot(vec2(log(1.0), length(vec3(0.0, 0.0, 0.0))), vec2(1.0, 1.0)))))) * 1.0)), float(_GLF_FUZZED(3.2)), bool(false))), 0.0, 0.0, 1.0))))) * mat2(1.0)).x, 0.0))[0], (vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x, 0.0))[1]), _GLF_IDENTITY(bvec2(true, true), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), true)), bvec2(bvec3(bvec2(bvec3(bvec2(true, true), true)), true))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, true), true)), bvec2(bvec3(bvec2(bvec3(bvec2(true, true), true)), true))))), false))))))))))))), bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && true))))), max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(max(-1.0, 0.6)))))))), 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)))))))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)))).x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))), false), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(25.25, 7.6)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) - vec2(0.0, 0.0))))))))), injectionSwitch)).x > injectionSwitch.y)), _GLF_IDENTITY(false, true && (false)) || _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bool(_GLF_IDENTITY(false, true && (false)))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, true && (false)), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, true && (false)), false)))))), false, true, true))), bool(bool(_GLF_IDENTITY(false, true && (false)))))))))))))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch)), mix(vec2(((true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch)))[0], _GLF_FUZZED(-184.651)), vec2(_GLF_FUZZED(6.4), ((true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch)))[1]), bvec2(false, true)))).x > injectionSwitch.y)))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(25.25, 7.6)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))))), injectionSwitch)).x > injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (false)))))), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bool(_GLF_IDENTITY(false, true && (false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bool(_GLF_IDENTITY(false, true && (false)))))))))))))))), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec3(true, true, true))))) ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y)))))))), false), _GLF_IDENTITY(true, false || (true)), true))), true)), bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).x > injectionSwitch.y)), _GLF_IDENTITY(false, true && (false)) || (_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))))))), (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(vec4(-442.536, 3.5, -193.420, -6068.4084).z))))), _GLF_IDENTITY(false, true && (false)) || (_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(true, true && (true))), bvec2(bvec2(bvec2(false, true))))))))), (injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (true ? mat2(1.0) * (injectionSwitch) : _GLF_FUZZED(injectionSwitch)))))))).x > injectionSwitch.y)), _GLF_IDENTITY(false, true && (false)) || (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))))))), bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec2(bvec2(bvec2(bvec2(false, true)))))))))))), false))), (injectionSwitch.x > injectionSwitch.y))))))), false), true)), false, false)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)))).x > injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))), ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)))) || false))), false), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(25.25, 7.6)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-35.91)), float(1.0), bool(true))))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))))), injectionSwitch)).x > injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(vec2(mat2x4((injectionSwitch), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, tan(0.0))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? vec2(mat2x4((injectionSwitch), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, tan(0.0))) : _GLF_FUZZED(vec2(1167.4733, -19.21))))) * mat2(1.0)), injectionSwitch)).x, mix(float(_GLF_FUZZED((9.9 + -4.7))), float(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(vec2(mat2x4((injectionSwitch), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, tan(0.0))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? vec2(mat2x4((injectionSwitch), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, tan(0.0))) : _GLF_FUZZED(vec2(1167.4733, -19.21))))) * mat2(1.0)), injectionSwitch)).x), bool(true))) > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bool(_GLF_IDENTITY(false, true && (false)))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bool(_GLF_IDENTITY(false, true && (false)))))))))))))), (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y)))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))) ? _GLF_FUZZED(vec2(25.25, 7.6)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))))), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))) || _GLF_IDENTITY((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), (bool((injectionSwitch.x > injectionSwitch.y))) || false)))) && true))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && (false))))))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bool(_GLF_IDENTITY(false, true && (false)))))))))))))), (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(-66.12)), float(injectionSwitch[1]), bool(true))))), vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y)))))))), false), _GLF_IDENTITY(true, false || (true)), true))), true)), bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).x > injectionSwitch.y)), _GLF_IDENTITY(false, true && (false)) || (_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))))))), (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).x) - 0.0) > injectionSwitch.y)), _GLF_IDENTITY(false, true && (false)) || (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(bvec2(false, true)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(bvec2(bvec2(false, true)))), bvec2(bvec4(bvec2(bvec2(bvec2(bvec2(false, true)))), false, true))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))), bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))))))), false))), (injectionSwitch.x > injectionSwitch.y))))))), false), true)), false, false)))), true, false))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), _GLF_IDENTITY(float(_GLF_FUZZED(-968.975)), (float(_GLF_FUZZED(-968.975))) - 0.0), bool(false)))))))
        barrier();
       atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, max(1, 1))), 4, 64, _GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, 0 | (4)))));
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), vec2(mat3x2((injectionSwitch), 1.0, 0.0, 0.0, abs(1.0))))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-831.706), _GLF_FUZZED((8.1 * _GLF_IDENTITY(-8.9, max(_GLF_IDENTITY(-8.9, (false ? _GLF_FUZZED(-474.639) : -8.9)), -8.9))))), bvec2(false, _GLF_IDENTITY(false, (false) && true)))).y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = (1 & (1 | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               return;
              }
            }
           return;
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 1.0, 0.0, log(round(length(normalize(_GLF_IDENTITY(1.0, float(mat4x2(1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, log(1.0), determinant(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0))))))), 1.0, 1.0, 1.0), _GLF_IDENTITY(mat2x4(mat2x4(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(log(round(length(normalize(1.0)))), (log(round(length(normalize(1.0))))) - abs(0.0)), 1.0, 1.0, 1.0))), (false ? _GLF_FUZZED(mat2x4(-62.03, 80.30, -30.98, -592.406, 72.74, -66.81, -2.7, 1.4)) : mat2x4(mat2x4(mat2x4(injectionSwitch, 1.0, 0.0, log(round(length(normalize(1.0)))), 1.0, 1.0, 1.0)))))))).x > injectionSwitch.y))))
            barrier();
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) > 0); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) - 0.0), (injectionSwitch.x) * 1.0), _GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, exp(0.0), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(6.2)), float(1.0), bool(true))), 1.0, 1.0))), injectionSwitch.x)) > injectionSwitch.y, true)))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), _GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, exp(0.0), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 1.0, 1.0, 1.0))), injectionSwitch.x)) > injectionSwitch.y, true))))) && true))))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(1462.4420) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8.8)), float(injectionSwitch.y), bool(true)))))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), true && (bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true))))), bool(bool(_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  return;
 do
  {
   do
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       continue;
      }
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, abs(1.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0)))) + 0.0)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-8283.3145) : injectionSwitch.x)) > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(float(true))), min(vec2((injectionSwitch)[0], _GLF_FUZZED(float(true))), vec2((injectionSwitch)[0], _GLF_FUZZED(float(true))))), vec2(_GLF_FUZZED(-718.809), _GLF_IDENTITY((injectionSwitch)[1], log(1.0) + ((injectionSwitch)[1]))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(exp(vec2(0.0, 0.0)), _GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY(exp(vec2(0.0, 0.0)), max(exp(vec2(0.0, 0.0)), exp(vec2(0.0, 0.0)))))), (true ? vec2(vec2(_GLF_IDENTITY(exp(vec2(0.0, 0.0)), max(exp(vec2(0.0, 0.0)), exp(vec2(0.0, 0.0)))))) : _GLF_FUZZED(injectionSwitch)))) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))), min(mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))))))).y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY(0, (0) >> 0) >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0)); _injected_loop_counter ++)
        {
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-62.30), _GLF_FUZZED(4347.3059)), vec2(_GLF_IDENTITY((injectionSwitch)[0], (true ? _GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])) : _GLF_FUZZED(686.972))), (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y)), false)))), true && (bool(_GLF_IDENTITY(true, bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-62.30), _GLF_FUZZED(4347.3059)), vec2(_GLF_IDENTITY((injectionSwitch)[0], (true ? _GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])) : _GLF_FUZZED(686.972))), (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y)), false))))))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-62.30), _GLF_FUZZED(4347.3059)), vec2(_GLF_IDENTITY((injectionSwitch)[0], (true ? _GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])) : _GLF_FUZZED(686.972))), (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y)), false)))), true && (bool(_GLF_IDENTITY(true, bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-62.30), _GLF_FUZZED(4347.3059)), vec2(_GLF_IDENTITY((injectionSwitch)[0], (true ? _GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])) : _GLF_FUZZED(686.972))), (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y)), false)))))))) && true))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x + 1 < subgroup_size)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         atomicStore(checker[virtual_gid], read, 4, 64, _GLF_IDENTITY(4, (4) * 1));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (injectionSwitch.x > injectionSwitch.y)))) || false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         break;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))) || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), injectionSwitch.x)) > injectionSwitch.y))))
          {
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) && true))
        break;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = (_GLF_IDENTITY(0 ^ 1, _GLF_IDENTITY(max(_GLF_IDENTITY(0 ^ 1, (0 ^ 1) ^ 0), _GLF_IDENTITY(0 ^ 1, (0 ^ 1) * 1)), min(max(_GLF_IDENTITY(0 ^ 1, (0 ^ 1) ^ 0), _GLF_IDENTITY(0 ^ 1, (0 ^ 1) * 1)), max(_GLF_IDENTITY(0 ^ 1, (0 ^ 1) ^ 0), _GLF_IDENTITY(0 ^ 1, (0 ^ 1) * 1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, false)), (bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, false))) || false))))))
            {
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false || _GLF_IDENTITY((false), false || ((false))), _GLF_IDENTITY(bool(bvec4(false || _GLF_IDENTITY((false), false || ((false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(bvec4(_GLF_IDENTITY(bool(bvec4(false || _GLF_IDENTITY((false), false || ((false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), false || (bool(bvec4(false || _GLF_IDENTITY((false), false || ((false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), true, false, true))))), ! (! (_GLF_IDENTITY(false, false || (false))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(bool(bvec4(true, true, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y)))), true, true))))))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) || false)) || false)))), ((! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) || false)) || false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
        barrier();
       for(int _injected_loop_counter = (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), min(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), int(int(_GLF_IDENTITY(int(4), int(4))))))), int(ivec2(_GLF_IDENTITY(int(4), int(4)), 0)))) >> _GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), min(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), int(int(_GLF_IDENTITY(int(4), int(4))))))), int(ivec2(_GLF_IDENTITY(int(4), int(4)), 0)))) >> _GLF_IDENTITY(int(4), int(4)), min((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), min(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), int(int(_GLF_IDENTITY(int(4), int(4))))))), int(ivec2(_GLF_IDENTITY(int(4), int(4)), 0)))) >> _GLF_IDENTITY(int(4), int(4)), (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), min(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), int(int(_GLF_IDENTITY(int(4), int(4))))))), int(ivec2(_GLF_IDENTITY(int(4), int(4)), 0)))) >> _GLF_IDENTITY(int(4), int(4))))) | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : 0))); _injected_loop_counter --)
        {
         subgroupAll(false);
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && (false))))), _GLF_IDENTITY(false, (false) || false), true)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-761.531, 3.3)))).x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 0.0, 1.0, 0.0, determinant(mat3(1.0, tan(0.0), 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0)), (vec2(mat2x4(injectionSwitch, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-7.8) : 1.0)), 0.0, determinant(mat3(1.0, tan(0.0), 0.0, 0.0, _GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(157.932)), float(1.0), bool(true))), injectionSwitch.y), 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0))) / vec2(1.0, 1.0))).y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))))))))))), false || (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8.9)), float(injectionSwitch.y), bool(true))))))))))))))))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-7.7)), float(injectionSwitch.x), bool(true))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false), _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)) && (false), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)) || false, (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)) || false, true && ((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x < injectionSwitch.y)) && (false)) || false))) && true)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         break;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
          barrier();
         break;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
          barrier();
         return;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        barrier();
       atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(4, 0 + (4)), 64, 4);
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true)))), _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))) && true, ! (! ((! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))) && true)))))))
            return;
           continue;
          }
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))))) && true)) || false))))))
            break;
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, false))))), (bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))) && true)))))))));
       subgroupAll(true);
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(- vec2(-883.533, -5856.2936), (- vec2(-883.533, -5856.2936)) * mat2(1.0)))))), min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(- vec2(-883.533, -5856.2936), (- vec2(-883.533, -5856.2936)) * mat2(1.0)))))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(- vec2(_GLF_IDENTITY(-883.533, clamp(-883.533, -883.533, -883.533)), -5856.2936), (- vec2(_GLF_IDENTITY(-883.533, (-883.533) / 1.0), -5856.2936)) * mat2(1.0)))))))).x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY((_GLF_IDENTITY(- vec2(-883.533, -5856.2936), (- vec2(_GLF_IDENTITY(-883.533, clamp(-883.533, -883.533, -883.533)), -5856.2936)) * mat2(1.0))), max((_GLF_IDENTITY(- vec2(-883.533, -5856.2936), (- vec2(_GLF_IDENTITY(-883.533, clamp(-883.533, -883.533, -883.533)), -5856.2936)) * mat2(1.0))), (_GLF_IDENTITY(- vec2(-883.533, -5856.2936), (- vec2(_GLF_IDENTITY(-883.533, clamp(-883.533, -883.533, -883.533)), -5856.2936)) * mat2(1.0))))))), mat2(1.0) * ((true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY((_GLF_IDENTITY(- vec2(-883.533, -5856.2936), (- vec2(_GLF_IDENTITY(-883.533, clamp(-883.533, -883.533, -883.533)), -5856.2936)) * mat2(1.0))), max((_GLF_IDENTITY(- vec2(-883.533, -5856.2936), (- vec2(_GLF_IDENTITY(-883.533, clamp(-883.533, -883.533, -883.533)), -5856.2936)) * mat2(1.0))), (_GLF_IDENTITY(- vec2(-883.533, -5856.2936), (- vec2(_GLF_IDENTITY(-883.533, clamp(-883.533, -883.533, -883.533)), -5856.2936)) * mat2(1.0)))))))))).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((_GLF_IDENTITY(- vec2(-883.533, -5856.2936), (- vec2(-883.533, -5856.2936)) * mat2(1.0)))))).x > injectionSwitch.y) || false))))), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(106.231)), float(injectionSwitch.x), bool(true)))) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)) > injectionSwitch.y))), false, false, true))))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             continue;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false)), ! (! (! (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false))))))) ? injectionSwitch.x : _GLF_FUZZED(4.6))) > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), bool(bvec3(bool(bool(true)), true, false))))), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y))), true), false))))))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), true && ((injectionSwitch.x > injectionSwitch.y))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       continue;
      }
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
