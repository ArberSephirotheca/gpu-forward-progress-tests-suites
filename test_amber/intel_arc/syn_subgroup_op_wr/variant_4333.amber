#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_19 {
 uvec4 _f0;
 uint _f1;
} ;

struct _GLF_struct_17 {
 mat4x3 _f0;
} ;

struct _GLF_struct_18 {
 bool _f0;
 _GLF_struct_17 _f1;
} ;

struct _GLF_struct_15 {
 vec4 _f0;
 bool _f1;
 float _f2;
 mat3 _f3;
 bvec2 _f4;
 mat2 _f5;
} ;

struct _GLF_struct_14 {
 mat2x4 _f0;
} ;

struct _GLF_struct_13 {
 ivec3 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_16 {
 uvec3 _f0;
 _GLF_struct_13 _f1;
 mat4x3 _f2;
 _GLF_struct_14 _f3;
 _GLF_struct_15 _f4;
} ;

struct _GLF_struct_11 {
 mat3x2 _f0;
 bool _f1;
 mat4x3 _f2;
 mat4x2 _f3;
 mat2x3 _f4;
 mat3x4 _f5;
 vec2 _f6;
} ;

struct _GLF_struct_10 {
 bool _f0;
 mat4x2 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_12 {
 mat3 _f0;
 _GLF_struct_10 _f1;
 _GLF_struct_11 _f2;
} ;

struct _GLF_struct_8 {
 mat4 _f0;
 mat2 _f1;
} ;

struct _GLF_struct_9 {
 _GLF_struct_8 _f0;
 uint _f1;
 vec3 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_20 {
 mat4x2 _f0;
 _GLF_struct_9 _f1;
 uint virtual_gid;
 _GLF_struct_12 _f2;
 mat4x2 _f3;
 _GLF_struct_16 _f4;
 _GLF_struct_18 _f5;
 _GLF_struct_19 _f6;
} ;

struct _GLF_struct_5 {
 mat2 _f0;
 uvec3 _f1;
 mat3x4 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_4 {
 mat3 _f0;
 mat3x4 _f1;
 mat4 _f2;
 mat3x4 _f3;
 uint _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_6 {
 bvec2 _f0;
 _GLF_struct_4 _f1;
 _GLF_struct_5 _f2;
} ;

struct _GLF_struct_2 {
 mat3 _f0;
 vec3 _f1;
} ;

struct _GLF_struct_1 {
 float _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_0 {
 bvec3 _f0;
 mat3x4 _f1;
 mat3 _f2;
 bool _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
 bvec3 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_7 {
 bvec4 _f0;
 vec3 _f1;
 mat3x4 _f2;
 uint subgroup_size;
 uvec2 _f3;
 _GLF_struct_3 _f4;
 _GLF_struct_6 _f5;
 mat3x2 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) - (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), int(ivec3(int(7), 0, 1))))))))) ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) | 0)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, (true) && true))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, ! (! (false)))))))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 uvec4 GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_ZERO(0.0, injectionSwitch.x) + (injectionSwitch.y))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_ZERO(0.0, injectionSwitch.x) + (injectionSwitch.y)))))) || false))
    return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))))))), true, true, true))), (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).x < injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
  }
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(bvec4(true), vec3(1.0), mat3x4(1.0), gl_SubgroupSize, _GLF_IDENTITY(uvec2(1u), (false ? _GLF_FUZZED(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid, (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid) | (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(4u), uvec4(4u)))).qt) : uvec2(1u))), _GLF_struct_3(_GLF_struct_0(bvec3(true), mat3x4(1.0), _GLF_IDENTITY(mat3(1.0), mat3(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(mat3(1.0), _GLF_IDENTITY(mat3(mat4x3(mat3(1.0))), (mat3(mat4x3(mat3(1.0)))) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), mat4x3(mat4x3(mat4x3(_GLF_IDENTITY(mat3(1.0), _GLF_IDENTITY(mat3(mat4x3(mat3(1.0))), _GLF_IDENTITY((mat3(mat4x3(mat3(1.0)))) + mat3(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(38.94)), bool(false))))), 0.0, 0.0, 0.0, 0.0, 0.0), transpose(_GLF_IDENTITY(transpose((mat3(mat4x3(mat3(1.0)))) + mat3(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(38.94)), bool(false))))), 0.0, 0.0, 0.0, 0.0, 0.0)), (transpose((mat3(mat4x3(mat3(1.0)))) + mat3(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))))) / 1.0), _GLF_IDENTITY(0.0, float(mat2x3(0.0, 0.0, 1.0, 1.0, 1.0, tan(sqrt(0.0))))), _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(38.94)), bool(false))))), 0.0, 0.0, 0.0, 0.0, 0.0))) * mat3(1.0)))))))))))), _GLF_IDENTITY(true, (true) || false), mat3x2(1.0)), _GLF_struct_1(1.0, bvec4(true)), _GLF_struct_2(mat3(1.0), vec3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(dot(injectionSwitch, mod(injectionSwitch, injectionSwitch))) : 1.0)), clamp(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))))), _GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true)))), bvec4(true)), _GLF_struct_6(bvec2(true), _GLF_struct_4(mat3(1.0), mat3x4(_GLF_IDENTITY(1.0, 1.0 * (1.0))), _GLF_IDENTITY(mat4(1.0), mat4(1.0) * (_GLF_IDENTITY(mat4(1.0), (false ? _GLF_FUZZED(mat4(-52.97, -7.0, 730.669, -645.732, -4341.2519, 1992.7300, -83.36, -323.048, 3.9, -867.977, -8.6, -9.9, -2652.5755, -242.682, -9118.4321, -8.8)) : _GLF_IDENTITY(mat4(1.0), (false ? _GLF_FUZZED(mat4(9493.8727, -4.3, -5.2, -0.6, -3.3, -3862.1229, 6643.8661, 31.17, 990.248, -6.3, 624.560, -51.89, 344.268, -80.29, 35.71, 4.4)) : mat4(1.0))))))), mat3x4(1.0), 1u, mat3x2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-4.5)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_struct_5(_GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0))))))), transpose(transpose(_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) + _GLF_IDENTITY(mat2(0.0, 0.0, 0.0, 0.0), mat2(mat3x2(_GLF_IDENTITY(mat2(0.0, 0.0, 0.0, 0.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(0.0, 0.0, 0.0, 0.0)))))))))), uvec3(1u), mat3x4(1.0), mat2x3(1.0))), mat3x2(1.0));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, 0.0, 1.0))) > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, 0.0, 1.0))) > injectionSwitch.y, false, false, false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(distance(injectionSwitch, injectionSwitch))))))) > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(distance(injectionSwitch, injectionSwitch))))))) > injectionSwitch.y, true, false, false)))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, 0.0, 1.0))) > injectionSwitch.y))), false, true), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, 0.0, 1.0))) > injectionSwitch.y))), false, true))))), (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, 0.0, 1.0))) > injectionSwitch.y))), false, true), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, 0.0, 1.0))) > injectionSwitch.y))), false, true)))))) || false)))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         return;
        }
      }
    }
  }
 else
  {
  }
 GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.z = _GLF_struct_replacement_7.subgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) * 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.y = subgroup_local_id;
          }
        }
      }
     else
      {
      }
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0), (true ? _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0) : _GLF_FUZZED(-86115))))
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      return;
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(workgroup_id), min(uint(workgroup_id), uint(workgroup_id)))), (uint(_GLF_IDENTITY(uint(workgroup_id), min(uint(workgroup_id), uint(workgroup_id))))) | (uint(_GLF_IDENTITY(uint(workgroup_id), min(_GLF_IDENTITY(uint(workgroup_id), ~ (~ (_GLF_IDENTITY(uint(workgroup_id), (false ? _GLF_FUZZED((false ? 157275u : subgroup_id)) : uint(workgroup_id)))))), uint(workgroup_id)))))));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
          {
           return;
           for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * (1 & 1)) != (0 >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = (0 ^ 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       return;
                      }
                     return;
                    }
                  }
                }
               else
                {
                }
              }
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             do
              {
               do
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? _GLF_IDENTITY(int(0), max(int(0), int(0))) : _GLF_FUZZED(_injected_loop_counter))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) >> 0)))); _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                }
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) + vec2(0.0, 0.0))).y))));
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
              break;
             return;
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                break;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(false))
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
                            {
                             return;
                            }
                          }
                         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && ((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((_GLF_IDENTITY(2.2 - _GLF_IDENTITY(-19.30, mix(float(_GLF_FUZZED(-4.4)), float(_GLF_IDENTITY(-19.30, 1.0 * (_GLF_IDENTITY(-19.30, float(mat2x3(-19.30, 1.0, 0.0, 1.0, 0.0, 1.0)))))), bool(true))), (2.2 - -19.30) - 0.0)))), float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(528.616)), float(injectionSwitch.x), bool(true)))), bool(true))) > injectionSwitch.y)))))) && true))
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                            break;
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               return;
                               if(_GLF_DEAD(false))
                                break;
                              }
                             else
                              {
                              }
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            return;
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, true && (_injected_loop_counter != 1))); _injected_loop_counter ++)
                        {
                         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(false))
                            {
                             for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, 0 ^ (0)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), true && (! (_injected_loop_counter != 1)))))); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                }
                               else
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   return;
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), true && (bool(bvec3(false, false, true)))))));
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY(true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (! (true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false))
            {
             do
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = (((83961 & _GLF_IDENTITY(0, (0) << 0)) << _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(1), int(1))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY((1 ^ _GLF_IDENTITY(0, 0 ^ (0))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2((_GLF_IDENTITY(1 ^ _GLF_IDENTITY(0, 0 ^ (0)), (1 ^ _GLF_IDENTITY(0, 0 ^ (0))) << 0)), 1), (ivec2((1 ^ _GLF_IDENTITY(0, 0 ^ (0))), 1)) >> ivec2(0, 0))), (int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec2((1 ^ _GLF_IDENTITY(0, 0 ^ (0))), 1), (ivec2((1 ^ _GLF_IDENTITY(0, 0 ^ (0))), 1)) >> ivec2(0, 0)), min(_GLF_IDENTITY(ivec2((1 ^ _GLF_IDENTITY(0, 0 ^ (0))), 1), (ivec2((1 ^ _GLF_IDENTITY(0, 0 ^ (0))), 1)) >> ivec2(0, 0)), _GLF_IDENTITY(ivec2((1 ^ _GLF_IDENTITY(0, 0 ^ (0))), 1), (ivec2((1 ^ _GLF_IDENTITY(0, 0 ^ (0))), 1)) >> ivec2(0, 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(ivec2((1 ^ _GLF_IDENTITY(0, 0 ^ (0))), 1), (ivec2((1 ^ _GLF_IDENTITY(0, 0 ^ (0))), 1)) >> ivec2(0, 0)), _GLF_IDENTITY(min(_GLF_IDENTITY(ivec2((1 ^ _GLF_IDENTITY(0, 0 ^ (0))), 1), (ivec2((1 ^ _GLF_IDENTITY(0, 0 ^ (0))), 1)) >> ivec2(0, 0)), _GLF_IDENTITY(ivec2((1 ^ _GLF_IDENTITY(0, 0 ^ (0))), 1), (ivec2((1 ^ _GLF_IDENTITY(0, 0 ^ (0))), 1)) >> ivec2(0, 0))), (true ? _GLF_IDENTITY(min(_GLF_IDENTITY(ivec2((1 ^ _GLF_IDENTITY(0, 0 ^ (0))), 1), (ivec2((1 ^ _GLF_IDENTITY(0, 0 ^ (0))), 1)) >> ivec2(0, 0)), _GLF_IDENTITY(ivec2((1 ^ _GLF_IDENTITY(0, 0 ^ (0))), 1), (ivec2((1 ^ _GLF_IDENTITY(0, 0 ^ (0))), 1)) >> ivec2(0, 0))), (min(_GLF_IDENTITY(ivec2((1 ^ _GLF_IDENTITY(0, 0 ^ (0))), 1), (ivec2((1 ^ _GLF_IDENTITY(0, 0 ^ (0))), 1)) >> ivec2(0, 0)), _GLF_IDENTITY(ivec2((1 ^ _GLF_IDENTITY(0, 0 ^ (0))), 1), (ivec2((1 ^ _GLF_IDENTITY(0, 0 ^ (0))), 1)) >> ivec2(0, 0)))) << ivec2(0, 0)) : _GLF_FUZZED(ivec2(69925, 45395)))))) << ivec2(0, 0)))) ^ 0)), true && (_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), true && (_GLF_IDENTITY(_injected_loop_counter != (1 ^ 0), bool(bvec4(_injected_loop_counter != (1 ^ 0), true, false, true)))))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0))))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       do
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         return;
                        }
                       else
                        {
                        }
                      }
                    }
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               break;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
               return;
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     return;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                }
               else
                {
                }
              }
             else
              {
              }
             do
              {
               do
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(3726.7275) : injectionSwitch.x)) > injectionSwitch.y), true && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(3726.7275) : injectionSwitch.x)) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(3726.7275) : injectionSwitch.x)) > injectionSwitch.y)) || false))))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      break;
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
                          {
                           if(_GLF_DEAD(false))
                            continue;
                          }
                         else
                          {
                           return;
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                               if(_GLF_DEAD(false))
                                continue;
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                return;
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) < injectionSwitch.y))))
                                {
                                 return;
                                }
                               else
                                {
                                }
                              }
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false))))))));
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))
        return;
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))), bool(bvec3(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))), false, true)))))))))
            {
             do
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_base = subgroup_id * GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.z;
 do
  {
   GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.x = subgroup_base;
  }
 while(_GLF_WRAPPED_LOOP(false));
 _GLF_struct_20 _GLF_struct_replacement_20 = _GLF_struct_20(mat4x2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5.1)), float(1.0), bool(_GLF_IDENTITY(true, true && (true)))))), _GLF_struct_9(_GLF_struct_8(mat4(1.0), _GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) * mat2(1.0)) * (mat2(1.0)))), 1u, vec3(1.0), mat3(1.0)), workgroup_base + GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.x + GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.y, _GLF_struct_12(mat3(1.0), _GLF_struct_10(true, mat4x2(1.0), mat3x4(1.0)), _GLF_struct_11(mat3x2(_GLF_IDENTITY(1.0, max(1.0, 1.0))), _GLF_IDENTITY(true, false || (true)), mat4x3(_GLF_IDENTITY(1.0, (1.0) / exp(length(vec4(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0))))), mat4x2(1.0), mat2x3(1.0), mat3x4(1.0), vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))), _GLF_IDENTITY(mix(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), float(_GLF_FUZZED(3558.1935)), _GLF_IDENTITY(bool(false), bool(bvec2(_GLF_IDENTITY(bool(false), (bool(false)) || false), false)))), mix(float(_GLF_IDENTITY(_GLF_FUZZED(81.96), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || false))))) ? _GLF_FUZZED(-6694.5648) : _GLF_FUZZED(81.96)))), float(mix(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), _GLF_IDENTITY(float(_GLF_FUZZED(3558.1935)), (false ? _GLF_FUZZED(1985.4345) : float(_GLF_FUZZED(3558.1935)))), bool(false))), bool(true)))) : _GLF_FUZZED(-5.8))), clamp(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))), _GLF_IDENTITY(mix(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), float(_GLF_FUZZED(3558.1935)), bool(false)), mix(float(_GLF_FUZZED(81.96)), float(_GLF_IDENTITY(mix(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), float(_GLF_FUZZED(3558.1935)), bool(false)), 1.0 * (mix(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), float(_GLF_FUZZED(3558.1935)), bool(false))))), bool(true)))) : _GLF_FUZZED(-5.8))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))), _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))), 0.0, cos(0.0), exp(0.0), sqrt(1.0), 1.0, 0.0, 0.0)), mix(float(float(mat4x2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))), 0.0, cos(0.0), exp(0.0), sqrt(1.0), 1.0, 0.0, 0.0))), float(_GLF_FUZZED(2.8)), bool(false)))), _GLF_IDENTITY(mix(float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 0.0, 0.0, 1.0)))) - 0.0))), log(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, sin(0.0)), _GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY(mat2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), (mat3x2(_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) / mat2(1.0, 1.0, 1.0, 1.0)))) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), mat2(mat3(mat2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), (mat3x2(_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) / mat2(1.0, 1.0, 1.0, 1.0)))) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))) * (mat4x2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), log(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, sin(0.0))))))), float(_GLF_FUZZED(_GLF_IDENTITY(3558.1935, (false ? _GLF_FUZZED(5.9) : _GLF_IDENTITY(3558.1935, min(3558.1935, _GLF_IDENTITY(3558.1935, clamp(3558.1935, 3558.1935, 3558.1935)))))))), bool(false)), mix(float(_GLF_FUZZED(81.96)), float(mix(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), float(_GLF_FUZZED(3558.1935)), bool(false))), bool(true)))) : _GLF_FUZZED(-5.8))), float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))), _GLF_IDENTITY(mix(float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), log(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, sin(0.0)), mat2(1.0) * (mat4x2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, sin(0.0))))))), float(_GLF_FUZZED(3558.1935)), bool(false)), mix(float(_GLF_FUZZED(81.96)), float(mix(float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), min(1.0, 1.0))), float(_GLF_FUZZED(3558.1935)), bool(false))), bool(true)))) : _GLF_FUZZED(-5.8))), clamp(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))), _GLF_IDENTITY(mix(float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), log(1.0), _GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) - 0.0)) / 1.0)) - 0.0), injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, sin(0.0)), mat2(1.0) * (mat4x2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), log(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, sin(0.0))))))), float(_GLF_FUZZED(3558.1935)), bool(false)), mix(float(_GLF_FUZZED(81.96)), float(mix(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), float(_GLF_FUZZED(3558.1935)), bool(false))), bool(true)))) : _GLF_FUZZED(-5.8))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))), _GLF_IDENTITY(mix(float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), log(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, sin(0.0)), mat2(1.0) * (mat4x2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), log(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, sin(0.0))))))), float(_GLF_FUZZED(3558.1935)), bool(false)), mix(float(_GLF_FUZZED(81.96)), float(mix(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), float(_GLF_FUZZED(3558.1935)), bool(false))), bool(true)))) : _GLF_FUZZED(-5.8))), (_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))), _GLF_IDENTITY(mix(float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), log(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, sin(0.0)), mat2(1.0) * (mat4x2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), log(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, sin(0.0))))))), float(_GLF_FUZZED(3558.1935)), bool(false)), mix(float(_GLF_FUZZED(81.96)), float(mix(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), float(_GLF_FUZZED(3558.1935)), bool(false))), bool(true)))) : _GLF_FUZZED(-5.8)))) - _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-7389.9922)))), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))))), true, true, false))) ? _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))), _GLF_IDENTITY(mix(float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), log(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(sin(0.0), (false ? _GLF_FUZZED(-72.64) : sin(0.0)))), mat2(1.0) * (mat4x2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), log(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, sin(0.0))))))), float(_GLF_FUZZED(3558.1935)), bool(false)), mix(float(_GLF_FUZZED(_GLF_IDENTITY(81.96, (_GLF_IDENTITY(81.96, float(vec2(81.96, 0.0)))) * 1.0))), float(mix(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), float(_GLF_FUZZED(3558.1935)), bool(false))), bool(true)))) : _GLF_FUZZED(-5.8))))), 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0), mix(vec4(_GLF_FUZZED(9.5), (vec4(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))), max(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))), _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))))), _GLF_IDENTITY(mix(float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), log(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, sin(0.0)), mat2(1.0) * (mat4x2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), log(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, sin(0.0))))))), float(_GLF_FUZZED(3558.1935)), bool(false)), mix(float(_GLF_FUZZED(81.96)), float(mix(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), float(_GLF_FUZZED(3558.1935)), bool(false))), bool(true)))) : _GLF_FUZZED(-5.8))), 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0))[1], (vec4(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))), _GLF_IDENTITY(mix(float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), log(1.0), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(1.0, (1.0) + 0.0), 0.0, 1.0, 1.0, sin(0.0)), mat2(1.0) * (mat4x2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), log(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, sin(0.0))))))), float(_GLF_FUZZED(3558.1935)), bool(false)), mix(float(_GLF_FUZZED(81.96)), float(mix(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), float(_GLF_FUZZED(3558.1935)), bool(false))), bool(true)))) : _GLF_FUZZED(-5.8))), 0.0, determinant(mat3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0))[2], _GLF_FUZZED((61.21 + -742.749))), vec4((vec4(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))), _GLF_IDENTITY(mix(float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), log(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, float(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, exp(0.0), 1.0, 1.0, 0.0))), 1.0, 1.0))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(1.0, (1.0) - 0.0))), sin(0.0)), mat2(1.0) * (mat4x2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), log(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, sin(0.0))))))), float(_GLF_FUZZED(3558.1935)), bool(false)), mix(float(_GLF_FUZZED(81.96)), float(mix(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), float(_GLF_FUZZED(3558.1935)), bool(false))), bool(true)))) : _GLF_FUZZED(-5.8))), 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0))[0], _GLF_FUZZED(-7.7), _GLF_FUZZED(-5.3), (vec4(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))), _GLF_IDENTITY(mix(float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), log(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, sin(0.0)), mat2(1.0) * (mat4x2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), log(1.0), _GLF_ZERO(_GLF_IDENTITY(0.0, 1.0 * (0.0)), injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, sin(0.0))))))), float(_GLF_FUZZED(3558.1935)), bool(false)), mix(float(_GLF_FUZZED(81.96)), float(mix(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), float(_GLF_FUZZED(3558.1935)), bool(false))), bool(true)))) : _GLF_FUZZED(-5.8))), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) + 0.0)) - 0.0), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0))[3]), bvec4(true, false, false, true))))), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))), _GLF_IDENTITY(mix(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), float(_GLF_FUZZED(3558.1935)), bool(false)), mix(float(_GLF_FUZZED(81.96)), float(mix(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), _GLF_IDENTITY(float(_GLF_FUZZED(3558.1935)), clamp(_GLF_IDENTITY(float(_GLF_FUZZED(3558.1935)), (float(_GLF_FUZZED(3558.1935))) / 1.0), float(_GLF_FUZZED(3558.1935)), _GLF_IDENTITY(float(_GLF_FUZZED(3558.1935)), mix(float(float(_GLF_FUZZED(3558.1935))), float(_GLF_FUZZED(-930.051)), bool(false))))), bool(false))), bool(true)))) : _GLF_FUZZED(-5.8)))))))), mat4x2(_GLF_IDENTITY(1.0, (false ? _GLF_IDENTITY(_GLF_FUZZED(3563.1079), max(_GLF_FUZZED(3563.1079), _GLF_FUZZED(3563.1079))) : 1.0))), _GLF_struct_16(uvec3(1u), _GLF_struct_13(ivec3(1), mat3x2(1.0)), mat4x3(1.0), _GLF_struct_14(mat2x4(1.0)), _GLF_struct_15(vec4(1.0), true, 1.0, mat3(1.0), bvec2(true), mat2(1.0))), _GLF_struct_18(true, _GLF_struct_17(mat4x3(1.0))), _GLF_struct_19(uvec4(1u), 1u));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       do
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)), (! ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))) && true))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))), (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 else
                  {
                   for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (false ? _GLF_FUZZED(42829) : int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))) && true, ! (! ((_GLF_IDENTITY(false, ! (! (false)))) && true)))), true && (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))))
                            {
                             do
                              {
                               if(_GLF_DEAD(false))
                                continue;
                               do
                                {
                                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                  {
                                   return;
                                  }
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                   do
                                    {
                                     return;
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                            }
                          }
                        }
                      }
                    }
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    return;
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))))), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 + (int(6)))))); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    break;
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), min(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))))), cos(0.0), 0.0, 1.0, 1.0, 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), 0.0))), float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), (vec2(injectionSwitch.y, 1.0)) - vec2(0.0, 0.0))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) | (1))))))); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > injectionSwitch.y))) || false)))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 continue;
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y)))))))
                {
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
                  return;
                 if(_GLF_DEAD(false))
                  break;
                }
               if(_GLF_DEAD(false))
                break;
               return;
              }
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.w = _GLF_struct_replacement_20.virtual_gid;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.x, uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.x, max(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.x, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.x)), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.x, max(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.x, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.x)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.x, max(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.x, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.x)), uint(uvec3(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.x, max(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.x, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.x)), 0u, 0u))), _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.x, max(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.x, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.x)), _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.x, max(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.x, GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.x))))) * (0u | 1u)), 0u))) + ((GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.y + 1) % GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.z);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0))), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ (0 | 1))); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
  }
 uint read = 0;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), 4, 64, _GLF_IDENTITY(4, int(_GLF_IDENTITY(ivec3(4, 1, (0 << _GLF_IDENTITY(int(7), int(7)))), ivec3(ivec4(_GLF_IDENTITY(ivec3(4, 1, (0 << _GLF_IDENTITY(int(7), int(7)))), ivec3(ivec3(ivec3(4, 1, (0 << _GLF_IDENTITY(int(7), int(7))))))), 0))))));
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(3))))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (67617 & (0 >> _GLF_IDENTITY(int(6), int(6))))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(0.0, (0.0) / 1.0) : _GLF_FUZZED(378.355))), injectionSwitch.x))); _injected_loop_counter --)
    {
     if((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.y, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.y, 1u * (GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.y))) * 1u) % 2) == 0)
      {
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, max(0, 0))))), int(0)))); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             do
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       return;
                      }
                    }
                   else
                    {
                    }
                   continue;
                  }
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = ((0 | 0) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       return;
                       if(_GLF_DEAD(false))
                        break;
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    continue;
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         do
          {
           if(_GLF_DEAD(false))
            return;
           subgroupAll(false);
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2(injectionSwitch.x, _GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0, 1.0), (mat2(injectionSwitch.x, _GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0, 1.0)) - mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))))) > injectionSwitch.y))))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
               for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              break;
            }
          }
         if(_GLF_DEAD(false))
          break;
        }
       read = atomicLoad(buf[GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.w], 4, 64, 2);
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), min(int(1), int(1)))))), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), min(int(1), int(1)))))), true, false, true))); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (false ? _GLF_FUZZED(-31709) : _injected_loop_counter ++))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (_injected_loop_counter ++))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       do
        {
         do
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0)), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           do
                            {
                             return;
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                          }
                        }
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        break;
                      }
                    }
                   else
                    {
                    }
                  }
                 for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                }
               else
                {
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false || _GLF_IDENTITY(((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ! (! (((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) && true)))
                return;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   subgroupAll(false);
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), (! (_GLF_WRAPPED_IF_FALSE(false))) || false))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   return;
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 1 * (int(6)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 1 * (int(6)))), ~ (~ (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 1 * (int(6)))))))) ^ 0)) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     continue;
                    }
                  }
                }
              }
            }
          }
         else
          {
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         read = _GLF_IDENTITY(atomicLoad(buf[GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.w], 4, 64, 2), _GLF_IDENTITY((atomicLoad(_GLF_IDENTITY(buf[GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.w], 1u * (_GLF_IDENTITY(buf[GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.w], (true ? buf[GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.w] : _GLF_FUZZED(workgroup_id))))), 4, 64, 2)) << 0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ ((atomicLoad(_GLF_IDENTITY(buf[GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.w], _GLF_IDENTITY(1u * (_GLF_IDENTITY(_GLF_IDENTITY(buf[GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.w], max(buf[GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.w], _GLF_IDENTITY(buf[GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.w], min(buf[GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.w], _GLF_IDENTITY(buf[GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.w], (buf[GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.w]) | (buf[GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.w])))))), (true ? buf[GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.w] : _GLF_FUZZED(workgroup_id)))), (1u * (_GLF_IDENTITY(_GLF_IDENTITY(buf[GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.w], max(buf[GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.w], _GLF_IDENTITY(buf[GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.w], min(buf[GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.w], _GLF_IDENTITY(buf[GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.w], (buf[GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.w]) | (buf[GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.w])))))), (true ? buf[GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid.w] : _GLF_FUZZED(workgroup_id))))) / 1u)), 4, 64, 2)) << 0u)));
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, min(0, 0)) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
        {
         subgroupBarrier();
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat2x3(0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-3.3) : 0.0)), 0.0))), float(_GLF_FUZZED((-9914.9902))), bool(false)))))), log(1.0), 0.0, 0.0))), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (~ (0)))), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0))).y)), min(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))).y)), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))).y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((0 << _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(8), int(8))), (((0 << _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, (8) / 1))))) ^ 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           atomicStore(checker[_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid, uvec4(GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid[0], GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid[1], GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid[2], GLF_merged4_0_1_13_1_1_17_2_1_13_3_1_11subgroup_basesubgroup_local_idsubgroup_sizevirtual_gid[3])).w], read, 4, _GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, min(64, 64)))), 4);
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
