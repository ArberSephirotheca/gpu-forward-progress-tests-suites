#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_43 {
 uvec2 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_44 {
 bool _f0;
 ivec3 _f1;
 uint _f2;
 _GLF_struct_43 _f3;
} ;

struct _GLF_struct_41 {
 mat4x3 _f0;
 mat4 _f1;
 vec4 _f2;
} ;

struct _GLF_struct_40 {
 vec4 _f0;
} ;

struct _GLF_struct_39 {
 bvec3 _f0;
 int _f1;
 mat4x2 _f2;
} ;

struct _GLF_struct_38 {
 int _f0;
 ivec4 _f1;
 uvec2 _f2;
 ivec4 _f3;
 uvec2 _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_37 {
 ivec3 _f0;
 bvec2 _f1;
 mat2x3 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_42 {
 _GLF_struct_37 _f0;
 _GLF_struct_38 _f1;
 _GLF_struct_39 _f2;
 _GLF_struct_40 _f3;
 _GLF_struct_41 _f4;
 mat2x4 _f5;
 float _f6;
} ;

struct _GLF_struct_45 {
 uint next_virtual_gid;
 _GLF_struct_42 _f0;
 float _f1;
 _GLF_struct_44 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_36 {
 bool _f0;
 bvec4 _f1;
 int _injected_loop_counter;
 vec2 _f2;
 int _f3;
} ;

struct _GLF_struct_33 {
 mat4 _f0;
} ;

struct _GLF_struct_32 {
 bvec3 _f0;
 mat2x4 _f1;
 uvec2 _f2;
 float _f3;
 mat2x3 _f4;
 bvec2 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_31 {
 bvec4 _f0;
 ivec3 _f1;
 mat3x2 _f2;
} ;

struct _GLF_struct_34 {
 uint _f0;
 int _injected_loop_counter;
 _GLF_struct_31 _f1;
 mat2x4 _f2;
 _GLF_struct_32 _f3;
 _GLF_struct_33 _f4;
} ;

struct _GLF_struct_35 {
 mat4x3 _f0;
 _GLF_struct_34 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_28 {
 mat2x4 _f0;
 float _f1;
 float _f2;
 mat2x4 _f3;
 uvec3 _f4;
 int _injected_loop_counter;
 mat3x4 _f5;
} ;

struct _GLF_struct_29 {
 bvec2 _f0;
 vec4 _f1;
 int _f2;
 _GLF_struct_28 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_30 {
 _GLF_struct_29 _f0;
 vec4 _f1;
} ;

struct _GLF_struct_25 {
 vec3 _f0;
 vec2 _f1;
 bvec3 _f2;
 vec4 _f3;
 vec4 _f4;
 uint _f5;
} ;

struct _GLF_struct_24 {
 mat4 _f0;
} ;

struct _GLF_struct_23 {
 mat4x2 _f0;
 mat2x4 _f1;
 ivec4 _f2;
 bvec4 _f3;
 vec2 _f4;
 bvec4 _f5;
 mat2x4 _f6;
} ;

struct _GLF_struct_22 {
 bvec4 _f0;
 bool _f1;
} ;

struct _GLF_struct_26 {
 _GLF_struct_22 _f0;
 _GLF_struct_23 _f1;
 mat2x4 _f2;
 _GLF_struct_24 _f3;
 _GLF_struct_25 _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_20 {
 mat4x3 _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_19 {
 uint _f0;
 mat2 _f1;
 ivec3 _f2;
 uvec2 _f3;
 vec3 _f4;
} ;

struct _GLF_struct_18 {
 mat2x4 _f0;
 mat3x2 _f1;
 uint _f2;
} ;

struct _GLF_struct_21 {
 _GLF_struct_18 _f0;
 bvec3 _f1;
 _GLF_struct_19 _f2;
 _GLF_struct_20 _f3;
 vec2 _f4;
 uvec3 _f5;
 float _f6;
} ;

struct _GLF_struct_27 {
 _GLF_struct_21 _f0;
 uint workgroup_base;
 _GLF_struct_26 _f1;
} ;

struct _GLF_struct_15 {
 bool _f0;
 mat4 _f1;
} ;

struct _GLF_struct_14 {
 uint _GLF_SWITCH_0_19v;
 bool _f0;
 int _f1;
} ;

struct _GLF_struct_16 {
 _GLF_struct_14 _f0;
 _GLF_struct_15 _f1;
} ;

struct _GLF_struct_12 {
 ivec4 _f0;
} ;

struct _GLF_struct_13 {
 _GLF_struct_12 _f0;
} ;

struct _GLF_struct_10 {
 ivec4 _f0;
 vec3 _f1;
} ;

struct _GLF_struct_9 {
 ivec2 _f0;
 mat4x2 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_8 {
 ivec4 _f0;
 bvec3 _f1;
 vec3 _f2;
 vec4 _f3;
 bvec3 _f4;
 mat4x3 _f5;
} ;

struct _GLF_struct_11 {
 vec3 _f0;
 _GLF_struct_8 _f1;
 bvec3 _f2;
 _GLF_struct_9 _f3;
 _GLF_struct_10 _f4;
} ;

struct _GLF_struct_6 {
 vec4 _f0;
 bvec2 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_7 {
 ivec2 _f0;
 _GLF_struct_6 _f1;
 ivec3 _f2;
 bvec2 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_17 {
 _GLF_struct_7 _f0;
 vec4 _f1;
 _GLF_struct_11 _f2;
 _GLF_struct_13 _f3;
 bvec3 _f4;
 _GLF_struct_16 _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_3 {
 ivec2 _f0;
} ;

struct _GLF_struct_2 {
 bvec2 _f0;
 mat2 _f1;
 vec2 _f2;
 mat3 _f3;
 vec4 _f4;
 ivec4 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_1 {
 mat3 _f0;
 mat4 _f1;
 mat4 _f2;
 mat4x3 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_0 {
 mat3x2 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_4 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 bool _f2;
 uvec4 _f3;
 _GLF_struct_2 _f4;
 _GLF_struct_3 _f5;
 vec2 _f6;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
 bool _GLF_SWITCH_0_42v;
 ivec3 _f1;
 uvec4 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   switch(_GLF_SWITCH((_GLF_IDENTITY(0 | 0, clamp(_GLF_IDENTITY(0 | 0, 0 + (_GLF_IDENTITY(0 | 0, (0 | 0) >> 0))), _GLF_IDENTITY(0 | 0, min(0 | 0, 0 | 0)), 0 | 0)))))
    {
     case 53:
     do
      {
       while((_GLF_IDENTITY(injectionSwitch != injectionSwitch, false || (injectionSwitch != injectionSwitch))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              break;
             break;
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           uint _GLF_SWITCH_0_0v, _GLF_SWITCH_0_1v[71], _GLF_SWITCH_0_2v;
           if(_GLF_DEAD(false))
            break;
           {
            bool _GLF_SWITCH_0_3v, _GLF_SWITCH_0_4v;
            if(_GLF_WRAPPED_IF_FALSE(false))
             {
             }
            else
             {
              if(_GLF_DEAD(false))
               barrier();
             }
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             break;
            uvec2(79590u, 182778u);
            bvec4(false, true, false, true);
            do
             {
              ivec4(79389, -14712, 52653, 30454);
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               {
                if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
                 break;
                if(_GLF_DEAD(false))
                 barrier();
                break;
               }
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               barrier();
             }
            while(_GLF_WRAPPED_LOOP(false));
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             barrier();
            vec2 _GLF_SWITCH_0_5v, _GLF_SWITCH_0_6v, _GLF_SWITCH_0_7v;
            ivec4(79080, -81318, 15402, 18922);
            do
             {
              32209;
             }
            while(_GLF_WRAPPED_LOOP(false));
            if(_GLF_DEAD(false))
             {
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               return;
              do
               {
                barrier();
               }
              while(_GLF_WRAPPED_LOOP(false));
             }
            ;
            for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
             {
              if(_GLF_DEAD(false))
               {
                switch(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))))
                 {
                  case 82:
                  if(_GLF_DEAD(false))
                   return;
                  acosh(vec4(-0.8, 6647.5796, -0.6, -7929.3388));
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   break;
                  case 0:
                  case 97:
                  case 36:
                  case 78:
                  case 47:
                  if(_GLF_DEAD(false))
                   break;
                  case 24:
                  case 70:
                  case 26:
                  if(_GLF_DEAD(false))
                   barrier();
                  return;
                  break;
                  case 56:
                  mat2x3 _GLF_SWITCH_3_0v, _GLF_SWITCH_3_1v, _GLF_SWITCH_3_2v;
                  if(_GLF_DEAD(false))
                   barrier();
                  case 40:
                  (ivec3(67658, 49090, -30422) | 64582);
                  if(_GLF_DEAD(false))
                   return;
                  default:
                  1;
                 }
               }
             }
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             continue;
            ;
           }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               62023u;
              }
             else
              {
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                continue;
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_IDENTITY((bvec2(false, true) == bvec2(false)), ! (! ((bvec2(false, true) == bvec2(false))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              return;
             ivec3 _GLF_SWITCH_0_8v[50], _GLF_SWITCH_0_9v;
             uvec3 _GLF_SWITCH_0_10v[23];
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              break;
             mat2x3 _GLF_SWITCH_0_11v;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              continue;
             ivec2 _GLF_SWITCH_0_12v[69], _GLF_SWITCH_0_13v;
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false)))))))
              continue;
             mat4x3(-7814.8878, 0.9, -7.9, -44.05, 958.979, -5.4, 43.83, -8568.8429, 585.466, -37.13, 7.0, 1240.4468);
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               ((mat3x2(mat2(390.884, -662.114, 7.8, -1.8)) - (-6.7 - mat3x2(5010.0247, 6.6, -64.30, -2.3, 8.5, -3.2))) - mat3x2(-81.26, -5.0, -850.615, -3367.4830, -2.8, 911.067));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                continue;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                break;
              }
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           (mat4(-89.88, 111.948, -19.52, -0.6, _GLF_IDENTITY(-122.748, clamp(-122.748, -122.748, _GLF_IDENTITY(-122.748, (-122.748) + 0.0))), 8.2, -9.9, -772.336, 9128.6398, -22.58, _GLF_IDENTITY(1.8, (1.8) - 0.0), 6.9, -1.9, 15.47, 5800.0563, _GLF_IDENTITY(-19.31, max(-19.31, _GLF_IDENTITY(-19.31, float(mat2x4(-19.31, cos(0.0), 0.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))) / mat4(_GLF_IDENTITY(-9.6, clamp(-9.6, _GLF_IDENTITY(-9.6, max(-9.6, -9.6)), -9.6)), -41.13, 49.49, -1.6, -182.550, 38.37, -3250.8570, 6.7, -282.789, 3.0, -721.134, -216.924, -8924.8761, -90.40, 92.73, 181.321));
           if(_GLF_DEAD(false))
            continue;
          }
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     case 38:
     while(true)
      {
       if(false)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           switch(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))))
            {
             case 0:
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             case 17:
             case 94:
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               break;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               barrier();
              }
             if(_GLF_DEAD(false))
              return;
             do
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             case 35:
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                break;
               break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             case 9:
             if(_GLF_DEAD(false))
              barrier();
             case 72:
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              return;
             case 40:
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               barrier();
              }
             case 33:
             case 28:
             case 74:
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   return;
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               return;
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              barrier();
             break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
              break;
             case 73:
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               break;
              }
             mat2x4 _GLF_SWITCH_2_0v, _GLF_SWITCH_2_1v[48], _GLF_SWITCH_2_2v;
             case 41:
             uvec2(56939u, 116804u);
             default:
             if(_GLF_DEAD(false))
              break;
             1;
             if(_GLF_DEAD(false))
              return;
            }
          }
         bvec2(bvec3(_GLF_IDENTITY(true, bool(bvec3(true, true, true))), true, true));
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(           59284;
 false; injectionSwitch)
            {
             do
              {
               bvec2(false, true);
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               mat3(-447.477, 49.81, -3.3, -67.81, 4004.7036, 4550.5719, 7.8, -76.83, 3.8);
               if(_GLF_DEAD(false))
                break;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             uvec2(112716u, 66119u);
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 continue;
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
                barrier();
               if(_GLF_DEAD(false))
                return;
               continue;
              }
             bvec4 _GLF_SWITCH_0_14v[88], _GLF_SWITCH_0_15v;
             bool _GLF_SWITCH_0_16v[80];
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             mat4x2(mat2(-0.6, 9.0, -8.4, -16.52));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             (true , _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uvec4(74304u, 148639u, _GLF_IDENTITY(38607u, (38607u) ^ 0u), 130677u), (_GLF_IDENTITY(uvec4(74304u, 148639u, _GLF_IDENTITY(38607u, (38607u) ^ 0u), 130677u), max(uvec4(74304u, 148639u, _GLF_IDENTITY(38607u, (38607u) ^ 0u), 130677u), uvec4(74304u, 148639u, _GLF_IDENTITY(38607u, (38607u) ^ 0u), 130677u)))) | uvec4(0u, 0u, 0u, 0u)), min(_GLF_IDENTITY(uvec4(74304u, 148639u, 38607u, 130677u), ~ (~ _GLF_IDENTITY((uvec4(74304u, 148639u, 38607u, 130677u)), max((uvec4(74304u, 148639u, 38607u, 130677u)), _GLF_IDENTITY((uvec4(74304u, 148639u, 38607u, 130677u)), ((uvec4(74304u, 148639u, 38607u, 130677u))) - uvec4(0u, 0u, 0u, 0u)))))), uvec4(74304u, 148639u, 38607u, 130677u))) % min(uvec4(126962u, 77222u, 90299u, 46920u), uvec4(79917u, 149261u, 56234u, 39389u))), (_GLF_IDENTITY((_GLF_IDENTITY(uvec4(74304u, 148639u, 38607u, 130677u), min(_GLF_IDENTITY(uvec4(74304u, 148639u, 38607u, 130677u), ~ (~ (uvec4(74304u, 148639u, 38607u, 130677u)))), uvec4(74304u, 148639u, 38607u, 130677u))) % min(uvec4(126962u, 77222u, 90299u, 46920u), uvec4(79917u, 149261u, 56234u, 39389u))), ~ (~ ((_GLF_IDENTITY(uvec4(74304u, 148639u, 38607u, 130677u), min(_GLF_IDENTITY(uvec4(74304u, 148639u, 38607u, 130677u), ~ (~ (uvec4(_GLF_IDENTITY(74304u, (_GLF_IDENTITY(74304u, (74304u) | 0u)) | (74304u)), 148639u, 38607u, 130677u)))), uvec4(74304u, 148639u, 38607u, 130677u))) % min(uvec4(126962u, 77222u, 90299u, 46920u), uvec4(79917u, 149261u, 56234u, 39389u))))))) ^ uvec4(0u, 0u, 0u, 0u)));
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         else
          {
           mat4x3(mat3(-73.33, 8.6, 975.367, 4.9, -7053.0876, 7.7, 1.5, 5090.3712, _GLF_IDENTITY(5399.1365, (_GLF_IDENTITY(5399.1365, (true ? 5399.1365 : _GLF_FUZZED(81.39)))) / 1.0)));
           if(_GLF_DEAD(false))
            return;
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
          {
           while(false)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             vec2 _GLF_SWITCH_0_17v, _GLF_SWITCH_0_18v;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               break;
              }
             (false ? mat3(155.335, -4.1, -7421.2581, 631.737, 91.95, 2.4, 2.3, 0.5, 9448.9870) : (false ? mat3(4.9, 233.445, 1.8, 6.8, 0.7, -9.7, -4.7, 5136.8360, 249.397) : mat3(-712.870, 3674.0523, -1962.1334, -44.14, 76.41, -8210.0987, -2.2, -5.8, -7377.0910)));
             do
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   switch(_GLF_SWITCH(0))
                    {
                     case 0:
                     case 55:
                     case 19:
                     if(_GLF_DEAD(false))
                      break;
                     case 34:
                     case 44:
                     case 88:
                     bvec4(false, false, true, true);
                     if(_GLF_DEAD(false))
                      return;
                     break;
                     default:
                     1;
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
              }
             while(_GLF_WRAPPED_LOOP(false));
             uvec4(33023u, 154535u, 1906u, 91792u);
            }
          }
         _GLF_struct_17 _GLF_struct_replacement_17;
         bool _GLF_SWITCH_0_20v[80], _GLF_SWITCH_0_21v[42];
         if(_GLF_DEAD(false))
          barrier();
         mat4x3 _GLF_SWITCH_0_22v, _GLF_SWITCH_0_23v, _GLF_SWITCH_0_24v[6];
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         (-1791.8326 - 3.3);
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         mat4(562.789, 3.8, -5.5, -9.5, -5.4, 5.7, 2404.3173, _GLF_IDENTITY(4.4, max(_GLF_IDENTITY(4.4, float(mat3x4(4.4, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, cos(0.0), 0.0, 0.0, 1.0, 1.0))), 4.4)), -3.5, -656.031, -88.56, _GLF_IDENTITY(-0.7, min(-0.7, -0.7)), -3195.9712, 3.6, 898.951, -8.1);
         for(         bvec3(true, false, false);
 (mat3(179.841, 36.46, -8.6, -824.250, 5.1, -8310.3816, -272.122, -3.4, -8.3) == mat3(8.8, 76.39, -95.90, -9.5, 2405.8417, -2.7, -3.1, -5446.7161, 0.5)); mat2(tanh(injectionSwitch), vec2(_GLF_IDENTITY(vec4(-15.43, -1.3, 5.6, 5651.6787), clamp(vec4(-15.43, -1.3, 5.6, 5651.6787), vec4(-15.43, -1.3, 5.6, 5651.6787), vec4(-15.43, -1.3, 5.6, 5651.6787))))))
          {
           if(_GLF_DEAD(false))
            break;
           ivec3 _GLF_SWITCH_0_25v[78], _GLF_SWITCH_0_26v, _GLF_SWITCH_0_27v;
          }
         for(         uvec2(38138u, 38694u);
 (mat2x4(-8.8, 3.7, _GLF_IDENTITY(-51.41, (true ? _GLF_IDENTITY(-51.41, mix(float(_GLF_FUZZED(232.072)), float(-51.41), bool(true))) : _GLF_FUZZED(-5.0))), -5.1, 8144.6697, 57.23, 92.11, 4.5) != mat2x4(-9.6, 0.4, -810.242, -2.6, 0.2, 244.574, 6.5, -3.5)); (mat4(-459.538, -40.18, -3.1, -426.309, 1.7, -3.2, -93.76, 63.19, 8964.9564, -660.377, 8.0, -448.101, 1552.9097, -25.80, -1550.9580, _GLF_IDENTITY(-6705.5009, mix(float(_GLF_FUZZED(-9.1)), float(-6705.5009), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) - vec3(24.73, -9773.3010, -9.1)[1]))
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            continue;
           return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
        }
       if(_GLF_DEAD(false))
        break;
       float _GLF_SWITCH_0_28v, _GLF_SWITCH_0_29v;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        {
         ;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
           continue;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            continue;
           mat4x2(-881.253, -7790.3708, -0.7, 79.27, 431.164, 366.173, 74.52, -4.3);
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          break;
         uvec4(184410u, 162670u, _GLF_IDENTITY(126952u, (126952u) << 0u), 75999u);
         ivec3 _GLF_SWITCH_0_30v, _GLF_SWITCH_0_31v, _GLF_SWITCH_0_32v[53];
         (_GLF_IDENTITY(118916u + uvec2(35276u, 102892u), (118916u + uvec2(35276u, 102892u)) | (_GLF_IDENTITY(118916u + uvec2(35276u, 102892u), min(118916u + uvec2(35276u, 102892u), 118916u + uvec2(35276u, 102892u))))));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) >> 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
              {
               barrier();
               if(_GLF_DEAD(false))
                return;
              }
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           barrier();
          }
         mat2x4 _GLF_SWITCH_0_33v, _GLF_SWITCH_0_34v, _GLF_SWITCH_0_35v[7];
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)))))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(903.732)), bool(false)))))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          return;
         int _GLF_SWITCH_0_36v[9], _GLF_SWITCH_0_37v, _GLF_SWITCH_0_38v[46];
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             switch(_GLF_SWITCH(0))
              {
               case 34:
               mat2(2663.4054, 6.1, 6983.7131, 2.5);
               case 45:
               mat4x2(-3.8, -51.48, 7887.1566, -3.2, -91.99, 152.846, 0.5, -6394.9543);
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               case 0:
               case 97:
               case 49:
               do
                {
                 switch(_GLF_SWITCH(0))
                  {
                   case 55:
                   ivec2(88428, -81621);
                   if(_GLF_DEAD(false))
                    barrier();
                   case 0:
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     (fract(77.30) / mat4x2(5.3, 9.8, -250.142, -2375.8312, -5.8, -1753.2728, -5.0, 880.720));
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                   if(_GLF_DEAD(false))
                    break;
                   break;
                   case 28:
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    continue;
                   mat3x4 _GLF_SWITCH_2_0v, _GLF_SWITCH_2_1v;
                   case 12:
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    continue;
                   vec4 _GLF_SWITCH_2_2v, _GLF_SWITCH_2_3v;
                   if(_GLF_DEAD(false))
                    return;
                   default:
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   1;
                   if(_GLF_DEAD(false))
                    return;
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               break;
               case 33:
               if(_GLF_DEAD(false))
                return;
               vec2(-75.40, 3.0);
               default:
               1;
              }
            }
          }
         while(all(equal(ivec2(39305, -59628), ivec2(-92092, -28657))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         float _GLF_SWITCH_0_39v, _GLF_SWITCH_0_40v, _GLF_SWITCH_0_41v[37];
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
       ;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(_GLF_struct_5 _GLF_struct_replacement_5; _GLF_struct_replacement_5._GLF_SWITCH_0_42v; mat2x3(3137.7399, -2.1, -71.57, 2947.1766, -84.32, 32.96))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         mat3 _GLF_SWITCH_0_43v, _GLF_SWITCH_0_44v, _GLF_SWITCH_0_45v;
         {
          mat3x2 _GLF_SWITCH_0_46v, _GLF_SWITCH_0_47v;
          if(_GLF_DEAD(false))
           {
            if(_GLF_DEAD(false))
             barrier();
            barrier();
           }
          do
           {
            do
             {
              if(_GLF_DEAD(false))
               barrier();
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               break;
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               barrier();
             }
            while(_GLF_WRAPPED_LOOP(false));
            for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
             {
              if(_GLF_DEAD(false))
               return;
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               continue;
              62063;
              if(_GLF_DEAD(false))
               return;
             }
           }
          while(_GLF_WRAPPED_LOOP(false));
          if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true))))))
           {
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             barrier();
           }
          else
           {
           }
          vec4 _GLF_SWITCH_0_48v[14], _GLF_SWITCH_0_49v, _GLF_SWITCH_0_50v[90];
          13520;
          if(_GLF_DEAD(false))
           barrier();
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           continue;
          if(_GLF_DEAD(false))
           break;
          if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_IDENTITY(true, false || (true))))
           break;
          for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 ^ 0) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(int(5), 0 | (int(5)))))))); _injected_loop_counter --)
           {
            if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             {
             }
            else
             {
              do
               {
                if(_GLF_DEAD(false))
                 break;
                if(_GLF_DEAD(false))
                 return;
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(false))
                   continue;
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   barrier();
                  return;
                 }
                if(_GLF_WRAPPED_IF_TRUE(true))
                 {
                  if(_GLF_DEAD(false))
                   barrier();
                  (mat4x3(-2337.3805, 99.18, 23.27, 2.0, -95.81, 2.2, -581.525, 80.07, 64.30, 253.851, 39.29, -49.87) * mat4(-8.8, 31.22, _GLF_IDENTITY(344.458, min(344.458, _GLF_IDENTITY(344.458, (344.458) + 0.0))), 7961.9831, 7618.6527, -805.633, -632.148, -525.409, 7561.8508, -2.3, -8.1, -70.89, -9.6, 7165.7361, 40.52, 2.8));
                  if(_GLF_DEAD(false))
                   continue;
                 }
                else
                 {
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   continue;
                 }
               }
              while(_GLF_WRAPPED_LOOP(false));
             }
            if(_GLF_DEAD(false))
             break;
           }
          if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
           {
            if(_GLF_DEAD(false))
             return;
            if(_GLF_DEAD(false))
             {
              if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, false, false)))))
               return;
              barrier();
             }
            for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
             {
              return;
              if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), (_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), ! (! (bool(bvec2(_GLF_DEAD(false), true)))))) && true)))
               continue;
              if(_GLF_DEAD(false))
               barrier();
             }
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             {
              if(_GLF_DEAD(false))
               continue;
              continue;
             }
           }
          bvec2 _GLF_SWITCH_0_51v, _GLF_SWITCH_0_52v[10], _GLF_SWITCH_0_53v;
          uvec4 _GLF_SWITCH_0_54v, _GLF_SWITCH_0_55v;
          if(_GLF_DEAD(false))
           barrier();
          uvec4 _GLF_SWITCH_0_56v, _GLF_SWITCH_0_57v[25];
          (mat4x2(-5097.6028, -4.2, -1633.6531, 6.9, 3.6, -3.2, -1134.1523, -5.3) * mat4(-6.9, -1083.7129, 1697.7261, -0.8, -3.0, 92.03, -1.3, -79.27, 9.0, -6779.5212, 4.8, -3.4, -361.571, -503.912, 12.64, -41.28));
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           return;
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           break;
         }
         do
          {
           for(           mat4x3(72.51, -0.7, -2.2, -3884.3459, 872.503, 8982.3103, 30.52, -61.77, _GLF_IDENTITY(-28.22, float(mat3x2(-28.22, 0.0, 0.0, 0.0, 0.0, 1.0))), 1044.0847, -1.8, -4.3);
 false; greaterThanEqual(ivec2(_GLF_IDENTITY(-46939, (false ? _GLF_FUZZED(-82262) : _GLF_IDENTITY(-46939, int(int(-46939))))), -59996), (ivec2(1969, 25615) - ivec2(57014, -9368))))
            {
             do
              {
               bvec2(false, true);
              }
             while(_GLF_WRAPPED_LOOP(false));
             ivec2(23283, -28694).gr;
             acos(vec3(_GLF_IDENTITY(-8.7, (false ? _GLF_FUZZED(_GLF_SWITCH_0_29v) : -8.7)), -4.4, 540.507));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              continue;
             mat4 _GLF_SWITCH_0_58v[44], _GLF_SWITCH_0_59v;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               for(_GLF_struct_35 _GLF_struct_replacement_35 = _GLF_struct_35(mat4x3(1.0), _GLF_struct_34(1u, _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(-49346)))) + (0 << _GLF_IDENTITY(int(1), int(1)))), _GLF_struct_31(bvec4(true), ivec3(1), mat3x2(1.0)), mat2x4(1.0), _GLF_struct_32(bvec3(true), mat2x4(1.0), uvec2(1u), 1.0, mat2x3(1.0), bvec2(true), mat3x4(1.0)), _GLF_struct_33(mat4(1.0))), ivec3(1)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_35._f1._injected_loop_counter < 1); _GLF_struct_replacement_35._f1._injected_loop_counter ++)
                {
                 vec3(sign(log2(vec2(-3.0, -5.8))), _GLF_SWITCH_0_28v);
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
             vec3(2881.9684, 6.3, 107.623);
             mat4x2 _GLF_SWITCH_0_60v, _GLF_SWITCH_0_61v, _GLF_SWITCH_0_62v[4];
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              break;
             uint _GLF_SWITCH_0_63v, _GLF_SWITCH_0_64v, _GLF_SWITCH_0_65v;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            break;
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
          return;
        }
       bvec4(false, true, false, false)[3];
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), true && (bool(bvec4(false, true, true, false)))))))
              barrier();
             ;
             while((subgroup_size > subgroup_size))
              {
               ivec2 _GLF_SWITCH_0_66v[42];
               fma(vec2(vec4(-1.2, 99.47, -6.4, -2.6)), injectionSwitch, (injectionSwitch + injectionSwitch));
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(false, false || (false)), true)))))
                break;
               atomicAnd(num_workgroup, subgroup_id);
               if(_GLF_DEAD(false))
                barrier();
               mat2 _GLF_SWITCH_0_67v[75], _GLF_SWITCH_0_68v;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             15489;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               while(true)
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  break;
                 _GLF_IDENTITY(vec4(7.9, 7.1, -1.1, 2.9), vec4(mat4(vec4(7.9, 7.1, -1.1, 2.9), 0.0, 0.0, sqrt(0.0), cos(0.0), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, tan(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)))), 1.0, 0.0, 1.0)));
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 uvec2 _GLF_SWITCH_0_69v, _GLF_SWITCH_0_70v[4];
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                  barrier();
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   for(_GLF_struct_36 _GLF_struct_replacement_36 = _GLF_struct_36(true, bvec4(true), 0, vec2(1.0), 1); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_36._injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_struct_replacement_36._injected_loop_counter ++)
                    {
                     mix(ivec4(60603, -52114, 30262, 26419), ivec4(-10713, _GLF_IDENTITY(-62942, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? -62942 : _GLF_FUZZED(_GLF_struct_replacement_36._injected_loop_counter))), -57940, 16060), bvec4(true, true, true, false));
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                    break;
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  return;
                 bvec4(true, bvec3(_GLF_IDENTITY(false, (false) || false), true, true));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    return;
                   continue;
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 vec4 _GLF_SWITCH_0_71v;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true && (false), (true && (false)) || false), true, false)), (bool(bvec3(_GLF_IDENTITY(true && (false), (true && (false)) || false), true, false))) && true)))))
                  break;
                 uvec4 _GLF_SWITCH_0_72v[92];
                 false;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))
                  return;
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      break;
                     step(vec3(67.72, -50.12, 2.1), vec3(_GLF_IDENTITY(7077.5453, max(7077.5453, _GLF_IDENTITY(7077.5453, max(7077.5453, 7077.5453)))), 1.6, 63.65));
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    break;
                  }
                }
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                return;
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).y))))
                continue;
               break;
               if(_GLF_DEAD(false))
                barrier();
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, max(2, 2))))) ^ 0), false || (_GLF_IDENTITY(_injected_loop_counter < (((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) ^ 0), bool(bvec2(_injected_loop_counter < (((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) ^ 0), true)))))); _injected_loop_counter ++)
              {
               while((bvec2(false, false) != bvec2(false, false)))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   break;
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), max(1 << _GLF_IDENTITY(int(7), int(7)), 1 << _GLF_IDENTITY(int(7), int(7))))))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) / sqrt(1.0)) > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     barrier();
                    }
                  }
                }
               if(_GLF_DEAD(false))
                break;
              }
             uvec2(63281u, 185603u);
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             ivec4 _GLF_SWITCH_0_73v, _GLF_SWITCH_0_74v[82], _GLF_SWITCH_0_75v;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(_GLF_SWITCH_0_29v) : injectionSwitch.y))))))
              return;
             if(_GLF_DEAD(false))
              barrier();
             mat2(-567.465, 9901.5260, -99.97, 6713.4072);
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               continue;
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              break;
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                return;
               mat4(5.4, -649.880, -5.2, -4090.5198, -348.923, 7.9, -6.5, 9.1, 9.9, -8.4, 9.8, -4.8, 8239.7643, -5734.8660, -57.61, -7164.2073);
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))), (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   barrier();
                  }
                 return;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                break;
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 return;
                }
              }
            }
           while(((+ mat3x2(4.5, -6574.4167, -3.7, -0.8, -6.5, 7.6)) == mat3x2(453.713, 78.74, 5126.2008, 26.63, -8.6, -54.61)));
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
            break;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     case 0:
     if(_GLF_DEAD(false))
      return;
     case 70:
     case 27:
     case 22:
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     case 80:
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)), bool(bvec4(bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)), false, true, _GLF_IDENTITY(false, ! (! (false)))))))))
      barrier();
     case 91:
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((-3829.2802)), (injectionSwitch)[1]), vec2((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.9), _GLF_FUZZED(-9.4)), vec2(_GLF_IDENTITY((injectionSwitch)[0], float(mat2x4((injectionSwitch)[0], 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0))), (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))[0], _GLF_FUZZED(485.187)), bvec2(true, false))).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
          return;
         if(_GLF_DEAD(false))
          return;
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     case 95:
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     case 77:
     case 94:
     case 49:
     if(_GLF_DEAD(false))
      return;
     return;
     break;
     if(_GLF_DEAD(false))
      barrier();
     default:
     1;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))), ! (! (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))))))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, true))), true)))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((vec2(49.43, -69.23) / vec2(-6651.2957, 6.7))) : injectionSwitch)).y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec2((! (false)), true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec2((! (false)), true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))), bool(_GLF_IDENTITY(bool(! (bool(bvec4(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec2((! (false)), true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))), (bool(! (bool(bvec4(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec2((! (false)), true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))))) && true)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((vec2(49.43, -69.23) / vec2(-6651.2957, 6.7))) : injectionSwitch)).y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           continue;
          }
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       switch(_GLF_SWITCH(0))
        {
         case 0:
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
         case 27:
         case 86:
         if(_GLF_DEAD(false))
          break;
         case 8:
         case 17:
         case 32:
         case 19:
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
          break;
         default:
         if(_GLF_DEAD(false))
          break;
         1;
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 _GLF_struct_27 _GLF_struct_replacement_27 = _GLF_struct_27(_GLF_struct_21(_GLF_struct_18(mat2x4(1.0), mat3x2(1.0), _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u))))), bvec3(true), _GLF_struct_19(1u, mat2(1.0), ivec3(1), uvec2(1u), vec3(1.0)), _GLF_struct_20(mat4x3(1.0), ivec4(1)), vec2(1.0), uvec3(1u), 1.0), workgroup_size * workgroup_id, _GLF_struct_26(_GLF_struct_22(bvec4(true), true), _GLF_struct_23(mat4x2(1.0), mat2x4(1.0), ivec4(1), bvec4(true), vec2(1.0), bvec4(true), mat2x4(1.0)), mat2x4(1.0), _GLF_struct_24(mat4(1.0)), _GLF_struct_25(vec3(1.0), vec2(1.0), bvec3(true), vec4(1.0), vec4(1.0), 1u), mat2x4(1.0)));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   switch(_GLF_SWITCH(0))
    {
     case 75:
     uvec3 _GLF_SWITCH_2_0v[47], _GLF_SWITCH_2_1v, _GLF_SWITCH_2_2v;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
      }
     case 0:
     case 90:
     case 56:
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     case 95:
     if(_GLF_DEAD(false))
      return;
     case 87:
     if(_GLF_DEAD(false))
      return;
     case 67:
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        return;
       barrier();
      }
     case 55:
     case 27:
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     break;
     case 36:
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     false;
     case 48:
     (-31.05 * (vec4(9.1, _GLF_IDENTITY(-49.18, (-49.18) / 1.0), -9.0, _GLF_IDENTITY(-915.731, float(_GLF_IDENTITY(float(-915.731), min(float(-915.731), float(-915.731)))))) / -544.775));
     default:
     1;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = _GLF_struct_replacement_27.workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 _GLF_struct_45 _GLF_struct_replacement_45 = _GLF_struct_45(_GLF_struct_replacement_27.workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), _GLF_struct_42(_GLF_struct_37(ivec3(1), bvec2(true), mat2x3(1.0), uvec4(1u)), _GLF_struct_38(1, ivec4(1), uvec2(1u), ivec4(1), uvec2(1u), mat2x4(1.0)), _GLF_struct_39(bvec3(true), 1, mat4x2(1.0)), _GLF_struct_40(vec4(1.0)), _GLF_struct_41(mat4x3(1.0), mat4(1.0), vec4(1.0)), mat2x4(1.0), 1.0), 1.0, _GLF_struct_44(true, ivec3(1), 1u, _GLF_struct_43(uvec2(1u), bvec3(true))), mat2x4(1.0));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   atomicStore(buf[_GLF_struct_replacement_45.next_virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), (~ (4)) << 0))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      break;
     continue;
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    continue;
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     switch(_GLF_SWITCH(0))
      {
       case 25:
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       for(       (true ? mat4(-576.954, -5.8, 3997.1159, -518.641, -6360.4084, 3628.6530, 85.03, -6.2, -4380.8898, 3.2, -7.4, 4192.8071, 1.2, -948.159, 294.224, 15.83) : mat4(-1703.9753, 2.7, 41.47, 76.25, 89.36, 4122.3469, 709.058, 4.6, 2.7, 888.188, 2.8, 490.512, 5.1, 5626.0637, -53.13, -138.974));
 any(bvec3(false, true, true)); (true ? mat4x3(mat4(1.8, 73.65, -10.97, -4.4, -1.2, 2.8, 4.9, 1.9, -853.015, _GLF_IDENTITY(_GLF_IDENTITY(622.633, max(622.633, _GLF_IDENTITY(622.633, mix(float(_GLF_FUZZED(-58.05)), float(_GLF_IDENTITY(622.633, (622.633) + 0.0)), bool(true))))), (622.633) - 0.0), -4.3, -0.9, -7.7, 9147.1924, -42.20, -2.7)) : mat4x3(-9.9, _GLF_IDENTITY(-5104.9465, float(mat2(-5104.9465, 1.0, 0.0, 0.0))), 8635.3379, -0.8, -74.76, -808.362, 178.780, 8.2, 386.032, -7.7, 763.028, -8322.1967)))
        {
         if(_GLF_DEAD(false))
          break;
         mat4 _GLF_SWITCH_0_0v[85];
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          break;
         vec4 _GLF_SWITCH_0_1v;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             return;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            break;
          }
        }
       if(_GLF_DEAD(false))
        return;
       case 0:
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       case 79:
       atomicStore(checker[virtual_gid], read, 4, 64, 4);
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 | (0 | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) ^ 0)), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
          {
           return;
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       case 64:
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         subgroupAll(false);
        }
       while(_GLF_WRAPPED_LOOP(false));
       break;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       case 52:
       if(false)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         _GLF_IDENTITY(vec4(4.9, 1088.2529, -899.285, 22.27), (false ? _GLF_FUZZED(vec4(-4955.8689, 519.525, 781.807, 3.6)) : _GLF_IDENTITY(vec4(4.9, 1088.2529, -899.285, 22.27), mat4(1.0) * (vec4(4.9, 1088.2529, -899.285, 22.27)))));
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           mat3x2(-2.5, -0.9, -5.5, 3.0, 521.143, 912.758);
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            barrier();
           if((9.9 < -3315.2312))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                break;
               continue;
              }
             if(_GLF_DEAD(false))
              break;
             uvec2(125271u, 14441u);
             uvec4 _GLF_SWITCH_0_2v;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              break;
             vec4 _GLF_SWITCH_0_3v, _GLF_SWITCH_0_4v;
             atan(vec3(0.1, -9.9, -2.5), vec3(77.39, -6426.0267, 4.1));
             mat3x2 _GLF_SWITCH_0_5v, _GLF_SWITCH_0_6v;
             if(_GLF_DEAD(false))
              continue;
             bool _GLF_SWITCH_0_7v[4], _GLF_SWITCH_0_8v;
            }
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              {
               if(_GLF_DEAD(false))
                return;
               break;
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           ;
          }
         mat2x4 _GLF_SWITCH_0_9v, _GLF_SWITCH_0_10v, _GLF_SWITCH_0_11v[17];
         {
          if(_GLF_WRAPPED_IF_FALSE(false))
           {
           }
          else
           {
            switch(_GLF_SWITCH((0 & -31210)))
             {
              case 0:
              case 2:
              case 82:
              if(_GLF_DEAD(false))
               return;
              case 56:
              case 96:
              case 4:
              if(_GLF_DEAD(false))
               return;
              case 83:
              if(_GLF_DEAD(false))
               barrier();
              break;
              case 1:
              bvec3 _GLF_SWITCH_3_0v, _GLF_SWITCH_3_1v;
              if(_GLF_DEAD(false))
               return;
              case 80:
              vec3 _GLF_SWITCH_3_2v, _GLF_SWITCH_3_3v, _GLF_SWITCH_3_4v;
              default:
              1;
             }
           }
          for(mat3x4 _GLF_SWITCH_0_12v; (_GLF_struct_replacement_27.workgroup_base < read); bvec4(false, false, true, true))
           {
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             continue;
           }
          if(_GLF_DEAD(false))
           return;
          if(_GLF_DEAD(false))
           {
            if(_GLF_DEAD(false))
             return;
            for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), int(ivec3(int(_GLF_IDENTITY(1, (1) - 0)), 1, 0)))))); _injected_loop_counter --)
             {
              barrier();
             }
           }
          if(_GLF_DEAD(false))
           barrier();
         }
         mat2x3 _GLF_SWITCH_0_13v[42];
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       default:
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       1;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(6.4)), float(injectionSwitch.y), bool(true)))) + 0.0)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))
            return;
          }
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 | 0), min((0 | 0), (0 | 0)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   switch(_GLF_SWITCH(0))
    {
     case 0:
     case 54:
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       atomicStore(checker[virtual_gid], read, 4, 64, _GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, (4) * 1))));
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     case 79:
     case 1:
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       for(_GLF_struct_30 _GLF_struct_replacement_30 = _GLF_struct_30(_GLF_struct_29(bvec2(true), vec4(1.0), 1, _GLF_struct_28(mat2x4(1.0), 1.0, 1.0, mat2x4(1.0), uvec3(1u), 0, mat3x4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(7642.6806)), float(1.0), bool(true))))), ivec3(1)), vec4(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_30._f0._f3._injected_loop_counter != 1); _GLF_struct_replacement_30._f0._f3._injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           continue;
          }
         if(_GLF_DEAD(false))
          break;
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
               barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 break;
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         subgroupAll(true);
         if(_GLF_DEAD(false))
          continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
     break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     case 70:
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if((mat2x4(-25.18, -2046.4149, -4949.7781, 2606.0929, -4665.3286, 4.2, -6.4, 4.4) == mat2x4(-6.3, 778.002, 36.73, -3.0, 323.558, -7.4, 3668.7468, 8998.8998)))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              return;
             barrier();
            }
           barrier();
          }
        }
       uvec4(45186u, 158594u, 198157u, 145004u);
       for(       mat4x2(0.0, 97.19, 204.686, 2.8, -0.3, -474.815, -6.5, -9.4);
 (ivec4(63650, 57429, -81665, 30242) != ivec4(-13581, 73933, -14870, -54193)); uvec4((_GLF_struct_replacement_45.next_virtual_gid + uvec3(6092u, 112963u, 2569u)), subgroup_id))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         {
          uvec3 _GLF_SWITCH_1_0v, _GLF_SWITCH_1_1v, _GLF_SWITCH_1_2v;
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           {
            if(_GLF_DEAD(false))
             return;
            barrier();
            if(_GLF_DEAD(false))
             barrier();
           }
          if(_GLF_WRAPPED_IF_TRUE(true))
           {
            do
             {
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               barrier();
             }
            while(_GLF_WRAPPED_LOOP(false));
            if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
             barrier();
            if(_GLF_WRAPPED_IF_TRUE(true))
             {
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               break;
              mat2x4(2050.9895, -1752.3630, 6.0, 8.6, 4172.0884, -8411.8181, -17.84, 9960.6063);
             }
            else
             {
             }
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             continue;
           }
          else
           {
            if(_GLF_DEAD(false))
             continue;
           }
          if(_GLF_DEAD(false))
           continue;
          if(_GLF_DEAD(false))
           barrier();
          if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, (false) || false))))))
           return;
         }
         mat2x4 _GLF_SWITCH_1_3v;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         mat3x2 _GLF_SWITCH_1_4v, _GLF_SWITCH_1_5v;
         mat4x2(-80.53, 4.8, 9.7, -5.6, -6.6, -4.8, -859.652, 99.46);
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            continue;
           if(_GLF_DEAD(false))
            barrier();
           continue;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            barrier();
           if(_GLF_DEAD(false))
            continue;
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(             floatBitsToInt(vec2(-326.053, -684.747));
 true; bitfieldExtract(44629, -38811, -96913))
              {
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               barrier();
              }
             continue;
            }
           if(_GLF_DEAD(false))
            continue;
           continue;
           if(_GLF_DEAD(false))
            break;
          }
         while(true)
          {
           mat2(-9.7, 3575.8379, -91.19, 931.848);
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
               workgroup_size;
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                barrier();
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         bvec4 _GLF_SWITCH_1_6v[2], _GLF_SWITCH_1_7v;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         ivec2 _GLF_SWITCH_1_8v[53], _GLF_SWITCH_1_9v[3], _GLF_SWITCH_1_10v;
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               barrier();
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
       mat2x3 _GLF_SWITCH_1_11v, _GLF_SWITCH_1_12v;
       if(_GLF_DEAD(false))
        return;
       transpose(mat2x4(5.7, -2028.3311, 3.7, -927.412, -7.1, 1832.2535, -2.4, _GLF_IDENTITY(-293.618, max(-293.618, -293.618))));
       step(_GLF_IDENTITY(6.0, max(6.0, _GLF_IDENTITY(6.0, mix(float(6.0), float(_GLF_FUZZED(370.627)), bool(false))))), 757.700);
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(         inversesqrt(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)));
 true; mat4(-27.67, 584.395, 7.0, -9418.8260, 0.2, -63.60, 9171.1556, -8.5, -266.609, -0.5, 888.046, 7968.8272, _GLF_IDENTITY(-42.43, (_GLF_IDENTITY(-42.43, float(vec2(-42.43, 1.0)))) - _GLF_IDENTITY(dot(vec3(tan(0.0), 1.0, 0.0), vec3(1.0, log(1.0), 1.0)), dot(vec3(tan(0.0), 1.0, 0.0), vec3(1.0, log(1.0), 1.0)))), -65.54, 0.3, 46.59))
          {
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            return;
           barrier();
          }
         ;
        }
       while((bvec3(true, true, false) == bvec3(true, false, true)))
        {
         if((ivec2(-87246, -38155) != ivec2(-13179, _GLF_IDENTITY(98816, max(98816, 98816)))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               barrier();
              }
             barrier();
            }
           ;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             break;
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while((intBitsToFloat(9800) == 8523.5385))
          {
           do
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              continue;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, 0)), (int(ivec2(0, 0))) << 0))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   continue;
                  }
                 barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 mat2(1.4, _GLF_IDENTITY(-5.0, clamp(_GLF_IDENTITY(-5.0, mix(float(-5.0), float(_GLF_FUZZED(8.9)), bool(false))), -5.0, -5.0)), 2.3, -6379.4728);
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
           if(_GLF_DEAD(false))
            continue;
           ivec4 _GLF_SWITCH_1_13v[32], _GLF_SWITCH_1_14v[57];
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 barrier();
                }
               return;
              }
             break;
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(false))
            return;
           bvec3 _GLF_SWITCH_1_15v[16], _GLF_SWITCH_1_16v, _GLF_SWITCH_1_17v[94];
           vec2 _GLF_SWITCH_1_18v, _GLF_SWITCH_1_19v;
           mat3x4 _GLF_SWITCH_1_20v[7], _GLF_SWITCH_1_21v[63], _GLF_SWITCH_1_22v;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, true))))), ! (! (false)))))
            {
             if(_GLF_DEAD(false))
              continue;
             continue;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             ;
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true))))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   barrier();
                  }
                 break;
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               return;
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            break;
           9.1;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         while((uvec3(26529u, 159005u, 61397u) == uvec3(198324u, 166471u, 30617u)))
          {
           ivec4 _GLF_SWITCH_1_23v, _GLF_SWITCH_1_24v, _GLF_SWITCH_1_25v;
           bvec2 _GLF_SWITCH_1_26v;
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
          }
         mat2(520.048, -68.80, 1213.9836, 8794.6721);
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           ivec4(71746, -71898, -28677, -66224);
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           do
            {
             ivec2(78754, -50582);
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
         (mat3x4(8.6, 188.432, -7.9, 9.3, 35.22, -3.7, -909.369, -2.3, -6.3, -505.763, -1324.4157, 1.8) * mat3(6.2, -23.82, 59.99, -1.4, 3894.9507, -0.8, 4.3, -1264.7656, -900.473));
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           continue;
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = (ivec2(13426, 10909).x & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             degrees(vec3(163.617, 4.9, 2.3));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     default:
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
     1;
     if(_GLF_DEAD(false))
      return;
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      return;
     continue;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
