#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(float((185295u >> 137070u)))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x < injectionSwitch.y)), false)))), false || ((injectionSwitch.x > injectionSwitch.y))), true))), true, _GLF_IDENTITY(false, false || (false))))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true, true))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)), bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, true && (false)), true))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))), true, true)))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), false, true)))) || false))))), true && (_GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))))))), ! (! (true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))), bool(bvec3(_GLF_DEAD(false), false, true))))))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, false))))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, true))))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, max(workgroup_size, _GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(0u ^ (workgroup_size), (0u ^ (workgroup_size)) + (0u << _GLF_IDENTITY(uint(8u), uint(8u))))))) * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))), bool(bvec3(! _GLF_IDENTITY((_GLF_DEAD(false)), false || ((_GLF_DEAD(false)))), false, true)))))) && true), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), false))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bvec4(! (! (false)), true, false, true))))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false), false, true)), bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false), false, true)), true))))), true && (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false), false, true)), bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false), false, true)), true)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true)))))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u) + subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), subgroup_size)) + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, 0u + (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(0u ^ (subgroup_id * subgroup_size), _GLF_IDENTITY((_GLF_IDENTITY(0u ^ (subgroup_id * subgroup_size), clamp(0u ^ (subgroup_id * subgroup_size), 0u ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(uint(uint(subgroup_id * subgroup_size)), (uint(uint(subgroup_id * subgroup_size))) >> 0u))), 0u ^ (subgroup_id * subgroup_size)))) / 1u, max((_GLF_IDENTITY(0u ^ (subgroup_id * subgroup_size), clamp(0u ^ (subgroup_id * subgroup_size), 0u ^ (subgroup_id * subgroup_size), 0u ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) >> 0u))))) / 1u, (_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, uint(_GLF_IDENTITY(uvec3(subgroup_id, 1u, 0u), uvec3(0u, 0u, 0u) ^ (uvec3(_GLF_IDENTITY(subgroup_id, (true ? _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id))) >> 0u) : _GLF_FUZZED(subgroup_id))), 1u, 0u))))))) * subgroup_size), clamp(0u ^ (subgroup_id * subgroup_size), 0u ^ (subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), 0u)))), 0u ^ (subgroup_id * subgroup_size)))) / 1u)))))), uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) | (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, 0u + (_GLF_IDENTITY(subgroup_id * subgroup_size, 0u ^ (subgroup_id * subgroup_size)))))) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true)))))))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), ! (! ((false)))), bool(bvec4(! (false), false, _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y) || false, ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y) || false) || false)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))) || false), false, false, true)), true && (bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-5.7) : _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(744.759)), bool(false))))))))), true && _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), (min(injectionSwitch.y, injectionSwitch.y)) / 1.0))))), ! (! (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), (min(injectionSwitch.y, injectionSwitch.y)) / 1.0))))), ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), (min(injectionSwitch.y, injectionSwitch.y)) / 1.0)))))) || false)))), _GLF_IDENTITY(bool(bvec4((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), true, true, true)), true && (bool(bvec4((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), true, true, true))))), true && (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, sqrt(1.0), 0.0, 1.0, 1.0, 0.0, 1.0))).y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), (min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, injectionSwitch.y)) / 1.0))))), ! (! (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), _GLF_IDENTITY((min(injectionSwitch.y, injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(746.604) : (min(injectionSwitch.y, injectionSwitch.y)))) / 1.0))))), ((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), (min(injectionSwitch.y, injectionSwitch.y)) / 1.0))), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), (min(injectionSwitch.y, injectionSwitch.y)) / 1.0))), true, false, true)), ! (! (bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), (min(injectionSwitch.y, injectionSwitch.y)) / 1.0))), true, false, true))))))))) || false)))), _GLF_IDENTITY(bool(bvec4((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), true, true, true)), true && (bool(bvec4((_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), true, true, true)))))))), false, false, true))))), true))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (! ((false))))), true && (! (_GLF_IDENTITY((false), ! (! ((false))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))), bool(bvec3((false), true, false)))))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3((false), true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3((false), true, false)), bvec3(bvec4(bvec3(bvec3((false), true, false)), false)))))))))), bool(bvec4(_GLF_IDENTITY(! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(bvec3((false), true, false)))))), ! (_GLF_IDENTITY(! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(bvec3((false), true, false))))))), ! (! (! (! _GLF_IDENTITY((false), ! (! _GLF_IDENTITY((_GLF_IDENTITY((false), bool(bvec3((false), true, false)))), bool(bvec3((_GLF_IDENTITY((false), bool(bvec3((false), true, false)))), true, false))))))))))), true, false, true)))), true && (! _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec3((false), true, false)), ! (! (bool(bvec3((false), true, false))))))))), bool(bvec4(! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec3((false), true, false)), ! (! (bool(bvec3((false), true, false))))))))), true, false, false)))), ((! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec3((false), true, false)), ! (! (bool(bvec3((false), true, false))))))))))) && true))))) || false), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bool((false)))), bool(bvec3((false), true, _GLF_IDENTITY(false, false || (false)))))))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY((false), ! (! _GLF_IDENTITY((_GLF_IDENTITY((false), bool(bvec3((false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), false)))), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY((false), bool(bvec3((false), _GLF_IDENTITY(true, ! (! (true))), false)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY((false), bool(bvec3((false), _GLF_IDENTITY(true, ! (! (true))), false))))), bool(bvec3(! ((_GLF_IDENTITY((false), bool(bvec3((false), _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(false, bool(bvec3(false, true, true)))))))), true, true))))), false)))))), _GLF_IDENTITY(true && (! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(bvec3((false), true, false)))))))), (true && (! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(bvec3((false), true, false))))))))) && true)))) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bool((false)))), bool(bvec3((false), true, _GLF_IDENTITY(false, false || (false)))))))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY((false), ! (! _GLF_IDENTITY((_GLF_IDENTITY((false), bool(bvec3((false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), false)))), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY((false), bool(bvec3((false), _GLF_IDENTITY(true, ! (! (true))), false)))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY((false), bool(bvec3((false), _GLF_IDENTITY(true, ! (! (true))), false))))), bool(bvec3(! ((_GLF_IDENTITY((false), bool(bvec3((false), _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(false, bool(bvec3(false, true, true)))))))), true, true))), (_GLF_IDENTITY(_GLF_IDENTITY(! ((_GLF_IDENTITY((false), bool(bvec3((false), _GLF_IDENTITY(true, ! (! (true))), false))))), bool(bvec3(! ((_GLF_IDENTITY((false), bool(bvec3((false), _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(false, bool(bvec3(false, true, true)))))))), true, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((_GLF_IDENTITY((false), bool(bvec3((false), _GLF_IDENTITY(true, ! (! (true))), false))))), bool(bvec3(! ((_GLF_IDENTITY((false), bool(bvec3((false), _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(false, bool(bvec3(false, true, true)))))))), true, true)))), bool(bvec4(! (_GLF_IDENTITY(! ((_GLF_IDENTITY((false), bool(bvec3((false), _GLF_IDENTITY(true, ! (! (true))), false))))), bool(bvec3(! ((_GLF_IDENTITY((false), bool(bvec3((false), _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(false, bool(bvec3(false, true, true)))))))), true, true)))), true, true, false)))))) || false))), false)))))), _GLF_IDENTITY(true && (! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(bvec3((false), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), ! (! (bool(bvec2(true, false)))))), _GLF_IDENTITY(false, ! (! (false))))))))))), (true && (! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(bvec3((false), true, false))))))))) && true)))) || false)))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bool((false)))), bool(bvec3((false), true, _GLF_IDENTITY(false, false || (false))))))), ! (! (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool((false)), _GLF_IDENTITY(bool(bvec3(bool((false)), true, false)), (bool(bvec3(bool((false)), true, false))) && true)))), bool(bvec3((false), true, _GLF_IDENTITY(false, false || (false))))))), bool(_GLF_IDENTITY(bool((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bool((false)))), (_GLF_IDENTITY((false), bool(bool((false))))) && true), bool(bvec3((false), true, _GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((false), ! (! ((false)))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY((false), ! (! ((false)))), true), true)))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((false), ! (! ((false)))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY((false), ! (! ((false)))), true), true))))))))))))))), _GLF_IDENTITY(! (! (bool((! (_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bool((false)))), bool(bvec3((false), true, _GLF_IDENTITY(false, false || (false)))))))))), false || (! (! (bool((! (_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bool((false)))), bool(bvec3((false), true, _GLF_IDENTITY(false, false || (false))))))))))))))))))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY((false), ! (! _GLF_IDENTITY((_GLF_IDENTITY((false), bool(bvec3((false), _GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), false || (_GLF_IDENTITY(true, ! _GLF_IDENTITY((_GLF_IDENTITY(! (true), _GLF_IDENTITY(! (! (! (true))), bool(bvec2(! (! (! (true))), true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(! (true), _GLF_IDENTITY(! (! (! (true))), bool(bvec2(! (! (! (true))), true)))))))))), false)))), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY((false), bool(bvec3((false), _GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), bool(bool(! (! (true)))))), false)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY((false), bool(bvec3((false), _GLF_IDENTITY(true, ! (! (true))), false))))), bool(bvec3(! ((_GLF_IDENTITY((false), bool(bvec3((false), _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(false, bool(bvec3(false, true, true)))))))), true, true))))), false)))))), _GLF_IDENTITY(true && (! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(bvec3((false), true, false)))))))), (true && (! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(bvec3((false), true, false))))))))) && true)))) || false)))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))), bool(bool((false)))), _GLF_IDENTITY(bool(bvec3((false), true, _GLF_IDENTITY(false, false || (false)))), (_GLF_IDENTITY(bool(bvec3((false), true, _GLF_IDENTITY(false, false || (false)))), bool(bvec3(bool(bvec3((false), true, _GLF_IDENTITY(false, false || (false)))), true, false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY((false), ! (! _GLF_IDENTITY((_GLF_IDENTITY((false), bool(bvec3((false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), false)))), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))) && true)), _GLF_IDENTITY(true, ! (! (true))), false)), ! (! (bool(bvec3((false), _GLF_IDENTITY(true, ! (! (true))), false))))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((_GLF_IDENTITY((false), bool(bvec3((false), _GLF_IDENTITY(true, ! (! (true))), false))))), bool(bvec3(! ((_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(false, bool(bvec3(false, true, true))))), bool(bvec3(_GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(false, bool(bvec3(false, true, true))))), bool(bvec4(bool(bvec3((_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(false, bool(bvec3(false, true, true))))), true, false, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), true, true)))), (! (_GLF_IDENTITY(! ((_GLF_IDENTITY((false), bool(bvec3((false), _GLF_IDENTITY(true, ! (! (true))), false))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(! ((_GLF_IDENTITY((false), bool(bvec3((false), _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, true)))))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, false)), (_GLF_IDENTITY(bool(bvec3(true, true, false)), true && (bool(bvec3(true, true, false))))) || false)), true)), false || (bool(bvec3(! ((_GLF_IDENTITY((false), bool(bvec3((false), _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, true)))))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, false)), (_GLF_IDENTITY(bool(bvec3(true, true, false)), true && (bool(bvec3(true, true, false))))) || false)), true)))), (_GLF_IDENTITY(bool(bvec3(! ((_GLF_IDENTITY((false), bool(bvec3((false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false))), _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, true)))))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, false)), (_GLF_IDENTITY(bool(bvec3(true, true, false)), true && (bool(bvec3(true, true, false))))) || false)), true)), false || (bool(bvec3(! ((_GLF_IDENTITY((false), bool(bvec3((false), _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, true)))))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, false)), (_GLF_IDENTITY(bool(bvec3(true, true, false)), true && (bool(bvec3(true, true, false))))) || false)), true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)), false)))))), _GLF_IDENTITY(true && (! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(bvec3((false), true, false)))))))), (true && (! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(bvec3((false), true, false))))))))) && true)))), false || ((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY((false), ! (! _GLF_IDENTITY((_GLF_IDENTITY((false), bool(bvec3((false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), false)))), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))) && true)), _GLF_IDENTITY(true, ! (! (true))), false)), ! (! (bool(bvec3((false), _GLF_IDENTITY(true, ! (! (true))), false))))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((_GLF_IDENTITY((false), bool(bvec3((false), _GLF_IDENTITY(true, ! (! (true))), false))))), bool(bvec3(! ((_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(false, bool(bvec3(false, true, true))))), bool(bvec3(_GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(false, bool(bvec3(false, true, true))))), bool(bvec4(bool(bvec3((_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(false, bool(bvec3(false, true, true))))), true, false, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), true, true)))), (! (_GLF_IDENTITY(! ((_GLF_IDENTITY((false), bool(bvec3((false), _GLF_IDENTITY(true, ! (! (true))), false))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(! ((_GLF_IDENTITY((false), bool(bvec3((false), _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, true)))))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, false)), (_GLF_IDENTITY(bool(bvec3(true, true, false)), true && (bool(bvec3(true, true, false))))) || false)), true)), false || (bool(bvec3(! ((_GLF_IDENTITY((false), bool(bvec3((false), _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, true)))))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, false)), (_GLF_IDENTITY(bool(bvec3(true, true, false)), true && (bool(bvec3(true, true, false))))) || false)), true)))), (_GLF_IDENTITY(bool(bvec3(! ((_GLF_IDENTITY((false), bool(bvec3((false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false))), _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, true)))))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, false)), (_GLF_IDENTITY(bool(bvec3(true, true, false)), true && (bool(bvec3(true, true, false))))) || false)), true)), false || (bool(bvec3(! ((_GLF_IDENTITY((false), bool(bvec3((false), _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, true)))))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, false)), (_GLF_IDENTITY(bool(bvec3(true, true, false)), true && (bool(bvec3(true, true, false))))) || false)), true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)), false)))))), _GLF_IDENTITY(true && (! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(bvec3((false), true, false)))))))), (true && (! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(bvec3((false), true, false))))))))) && true)))))) || false))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) | uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), _GLF_IDENTITY((1) + _GLF_IDENTITY(0, int(int(0))), max((1) + _GLF_IDENTITY(0, int(int(0))), _GLF_IDENTITY((1) + _GLF_IDENTITY(0, int(int(0))), 0 ^ ((1) + _GLF_IDENTITY(0, int(int(0)))))))))) << 0u), 4, 64, 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))), (1u ^ 0u), 0u, 0u)), (uint(uvec4(_GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)))), (1u ^ 0u), 0u, 0u))) - 0u)), (subgroup_local_id + 1 < _GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))))) && true))
  {
   atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((76428 & 0), 0 | ((76428 & 0))), ~ (~ ((76428 & 0)))) | (_GLF_IDENTITY(4, min(4, 4))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((76428 & 0), ~ (~ ((76428 & 0)))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((76428 & 0), ~ (~ ((76428 & _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, int(int(_GLF_IDENTITY(0, max(0, 0)))))))))))), ((_GLF_IDENTITY((76428 & 0), ~ (~ ((76428 & _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, int(int(_GLF_IDENTITY(0, max(0, 0))))))))))))) - 0) | 0, (true ? _GLF_IDENTITY((_GLF_IDENTITY((76428 & 0), ~ (~ ((76428 & _GLF_IDENTITY(0, _GLF_IDENTITY(max(0, _GLF_IDENTITY(0, int(int(_GLF_IDENTITY(0, max(0, 0)))))), clamp(max(0, _GLF_IDENTITY(0, int(int(_GLF_IDENTITY(0, max(0, 0)))))), _GLF_IDENTITY(max(0, _GLF_IDENTITY(0, int(int(_GLF_IDENTITY(0, max(0, 0)))))), (true ? max(0, _GLF_IDENTITY(0, int(int(_GLF_IDENTITY(0, max(0, 0)))))) : _GLF_FUZZED(-36274))), _GLF_IDENTITY(max(0, _GLF_IDENTITY(0, int(int(_GLF_IDENTITY(0, max(0, 0)))))), (max(0, _GLF_IDENTITY(0, int(int(_GLF_IDENTITY(0, max(0, 0))))))) << 0))))))))), ((_GLF_IDENTITY((76428 & 0), ~ (~ ((76428 & _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, int(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) | 0), max(0, 0))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (int(_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) | 0), max(0, 0))))))))))))))) - 0) | 0 : _GLF_FUZZED(78619)))) | (_GLF_IDENTITY(4, _GLF_IDENTITY(min(4, 4), _GLF_IDENTITY(int(ivec4(min(4, 4), 0, 1, _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, max(1, 1))))))), (_GLF_IDENTITY(int(ivec4(min(4, 4), 0, 1, _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, max(1, 1))))))), (int(ivec4(min(4, 4), 0, 1, _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, max(1, 1)))))))) ^ 0)) | (_GLF_IDENTITY(int(ivec4(min(4, 4), 0, 1, _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, max(1, 1))))))), 0 ^ (int(ivec4(min(4, 4), 0, 1, _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, max(1, 1)))))))))))))), ((76428 & 0) | (_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(67564) : 4)), min(4, 4)))) ^ 0)) | 0)), 64, 4);
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), bool(bvec2(_GLF_DEAD(false), true))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))))) - sin(0.0)) > injectionSwitch.y))), true, true)))))))))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-6.3, 3.8)) : injectionSwitch)).y)))) && true)), false || (_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-6.3, 3.8)) : injectionSwitch)).y)))) && true))))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false)))))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, true && (false))), (_GLF_IDENTITY(true && (false), ! (! (_GLF_IDENTITY(true && (false), false || (true && (_GLF_IDENTITY(false, (false) && true)))))))) || false))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   subgroupAll(_GLF_IDENTITY(false, (false) && true));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0 + (injectionSwitch.y)))), true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0 + (injectionSwitch.y))))))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 1.0, 0.0), mat2(mat3x2(mat2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 1.0, 0.0))))), min(float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 1.0, 0.0), mat2(mat3x2(mat2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 1.0, 0.0))))), float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 1.0, 0.0), mat2(mat3x2(mat2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 1.0, 0.0)))))))), injectionSwitch.y, injectionSwitch.y)), 0.0 + (injectionSwitch.y)))))))))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   atomicStore(checker[virtual_gid], read, 4, _GLF_IDENTITY(64, min(64, 64)), 4);
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   subgroupAll(_GLF_IDENTITY(true, ! (! (true))));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
