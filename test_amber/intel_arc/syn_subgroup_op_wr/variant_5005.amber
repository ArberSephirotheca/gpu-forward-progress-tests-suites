#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (true) && true)) && true)))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           continue;
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           break;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = (-87379 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, true))))))))
            {
             if(_GLF_DEAD(false))
              continue;
             break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                     if(_GLF_DEAD(false))
                      return;
                    }
                   else
                    {
                    }
                  }
                }
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(false))
          break;
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(false, (false) && true), true))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true)))))))), bool(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, false || (true))), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, false || (true))), bvec2(bvec3(bvec2(true, _GLF_IDENTITY(true, false || (true))), false))), _GLF_IDENTITY(false, bool(bvec2(false, false))))))))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))) && true)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(4780.5985) : _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0)))))); _GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, abs(0.0), _GLF_IDENTITY(dot(vec4(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x4(1.0, 0.0, round(length(normalize(1.0))), sin(0.0), determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec2(0.0, 1.0), min(vec2(0.0, 1.0), vec2(0.0, 1.0))))), 0.0)), 1.0, determinant(mat2(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(mat4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, tan(0.0), 1.0, 1.0, length(vec2(0.0, 0.0)), _GLF_IDENTITY(sqrt(0.0), (sqrt(0.0)) / _GLF_ONE(1.0, injectionSwitch.y)), 1.0, 0.0, 0.0), (true ? mat4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, tan(0.0), 1.0, 1.0, length(vec2(0.0, 0.0)), _GLF_IDENTITY(sqrt(0.0), (sqrt(0.0)) / _GLF_ONE(1.0, injectionSwitch.y)), 1.0, 0.0, 0.0) : _GLF_FUZZED(mat4(3906.2026, -670.182, 26.19, 3686.3735, 110.637, 856.162, 7132.1946, 5.4, -4591.5431, -2.4, 6.9, -498.486, -3554.1687, -956.866, -14.50, -11.63)))), (mat4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, tan(0.0), 1.0, 1.0, _GLF_IDENTITY(length(vec2(0.0, 0.0)), mix(float(_GLF_FUZZED(-3230.0207)), float(length(vec2(0.0, 0.0))), bool(true))), sqrt(0.0), 1.0, 0.0, 0.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0))), clamp(float(_GLF_IDENTITY(mat4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(mat3x2(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, tan(0.0), 1.0)), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, tan(0.0), 1.0))), 0.0, 0.0, 1.0))), tan(0.0), 1.0, 1.0, length(vec2(0.0, 0.0)), sqrt(0.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 0.0), (mat4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, tan(0.0), 1.0, 1.0, length(vec2(0.0, 0.0)), sqrt(0.0), 1.0, 0.0, 0.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))))), float(_GLF_IDENTITY(mat4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, tan(0.0), 1.0, 1.0, length(vec2(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-64.26)), float(0.0), bool(true))), _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0)), 0.0)), sqrt(0.0), 1.0, 0.0, 0.0), (mat4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, tan(0.0), 1.0, 1.0, length(vec2(0.0, 0.0)), sqrt(0.0), 1.0, 0.0, 0.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), float(_GLF_IDENTITY(mat4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, tan(0.0), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, length(vec2(0.0, 0.0)), sqrt(0.0), 1.0, 0.0, 0.0), (mat4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), tan(0.0), 1.0, 1.0, length(vec2(0.0, 0.0)), sqrt(0.0), 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)))) / 1.0), 0.0)), 0.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), 0.0, 0.0, 0.0)), 0.0)), min(float(mat2x4(1.0, 0.0, round(length(normalize(1.0))), sin(0.0), determinant(mat4(0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((4.6 / -71.24))), float(0.0), bool(true))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0)), float(mat2x4(1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(3711.7482) : _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(1674.5899)), float(0.0), bool(true))))), round(_GLF_IDENTITY(length(normalize(1.0)), max(length(normalize(1.0)), length(normalize(1.0))))), sin(0.0), determinant(mat4(0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0))))))), abs(1.0), 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(determinant(mat3(1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)) ? _GLF_FUZZED(-408.266) : _GLF_IDENTITY(1.0, float(mat2x3(1.0, 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0))))), 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), abs(1.0), 1.0, 0.0), vec4(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0))), _GLF_IDENTITY(0.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0)) * (_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-6741.9663)), float(0.0), bool(true))))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), mat3x4(mat3x4(mat3x4(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(abs(0.0), (true ? abs(0.0) : _GLF_FUZZED(-6.7))), _GLF_IDENTITY(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec4(determinant(mat3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(1790.3787) : 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, cos(0.0), 0.0, 0.0, 1.0))))), abs(1.0), 1.0, 0.0), (vec4(determinant(mat3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(1790.3787) : 1.0)), _GLF_IDENTITY(dot(vec3(0.0, sin(0.0), 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, sin(0.0), 1.0), vec3(0.0, 0.0, 1.0))) * (_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(1790.3787) : 1.0)))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), abs(1.0), 1.0, 0.0)) / vec4(1.0, 1.0, 1.0, 1.0)), vec4(0.0, 0.0, 0.0, 1.0)), dot(_GLF_IDENTITY(vec4(determinant(mat3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) / 1.0), 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2x4(0.0, 0.0, 1.0, tan(0.0), 0.0, 1.0, 0.0, 0.0)), 1.0 * (float(mat2x4(0.0, 0.0, 1.0, tan(0.0), 0.0, 1.0, 0.0, 0.0))))), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-281.987) : 0.0)))), 1.0, 1.0)), abs(1.0), 1.0, 0.0), (vec4(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), abs(1.0), 1.0, 0.0)) - vec4(0.0, 0.0, 0.0, 0.0)), vec4(0.0, 0.0, 0.0, 1.0))), 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(dot(_GLF_IDENTITY(vec4(determinant(mat3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(1790.3787) : 1.0)), _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), abs(1.0), 1.0, 0.0), (vec4(determinant(mat3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(1790.3787) : 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), abs(1.0), 1.0, 0.0)) / vec4(1.0, 1.0, 1.0, 1.0)), vec4(0.0, 0.0, 0.0, 1.0)), dot(_GLF_IDENTITY(vec4(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), abs(1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0), (vec4(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), abs(1.0), 1.0, 0.0)) - vec4(0.0, 0.0, 0.0, 0.0)), vec4(0.0, 0.0, 0.0, 1.0))), _GLF_ONE(1.0, injectionSwitch.y) * (_GLF_IDENTITY(dot(_GLF_IDENTITY(vec4(determinant(mat3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(1790.3787) : 1.0)), _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), abs(1.0), 1.0, 0.0), _GLF_IDENTITY((vec4(determinant(mat3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(1790.3787) : 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), abs(1.0), 1.0, 0.0)), _GLF_IDENTITY(vec4(_GLF_IDENTITY(mat2((vec4(determinant(mat3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(1790.3787) : 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), abs(1.0), 1.0, 0.0))), (false ? _GLF_FUZZED(mat2(8.3, -5.0, -7.2, -88.54)) : mat2((vec4(determinant(mat3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(1790.3787) : 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), abs(1.0), 1.0, 0.0)))))), mix(vec4((vec4(_GLF_IDENTITY(mat2((vec4(determinant(mat3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(1790.3787) : 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), abs(1.0), 1.0, 0.0))), (false ? _GLF_FUZZED(mat2(8.3, -5.0, -7.2, -88.54)) : mat2((vec4(determinant(mat3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(1790.3787) : 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), abs(1.0), 1.0, 0.0)))))))[0], _GLF_FUZZED((+ -8900.5330)), _GLF_FUZZED(391.937), _GLF_FUZZED(9108.8727)), vec4(_GLF_FUZZED(-3891.7402), (vec4(_GLF_IDENTITY(mat2((vec4(determinant(mat3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(1790.3787) : 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), abs(1.0), 1.0, 0.0))), (false ? _GLF_FUZZED(mat2(8.3, -5.0, -7.2, -88.54)) : mat2((vec4(determinant(mat3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(1790.3787) : 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), abs(1.0), 1.0, 0.0)))))))[1], (vec4(_GLF_IDENTITY(mat2((vec4(determinant(mat3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(1790.3787) : 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), abs(1.0), 1.0, 0.0))), (false ? _GLF_FUZZED(mat2(8.3, -5.0, -7.2, -88.54)) : mat2((vec4(determinant(mat3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(1790.3787) : 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), abs(1.0), 1.0, 0.0)))))))[2], (vec4(_GLF_IDENTITY(mat2((vec4(determinant(mat3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(1790.3787) : 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), abs(1.0), 1.0, 0.0))), (false ? _GLF_FUZZED(mat2(8.3, -5.0, -7.2, -88.54)) : mat2((vec4(determinant(mat3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(1790.3787) : 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), abs(1.0), 1.0, 0.0)))))))[3]), bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, true)))) / vec4(1.0, 1.0, 1.0, 1.0)), vec4(0.0, 0.0, 0.0, 1.0)), dot(_GLF_IDENTITY(vec4(_GLF_IDENTITY(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), 0.0 + (_GLF_IDENTITY(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), 1.0 * (_GLF_IDENTITY(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), max(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)))))))), abs(_GLF_IDENTITY(1.0, min(1.0, 1.0))), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0), (vec4(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), abs(1.0), 1.0, 0.0)) - vec4(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))), 0.0, 0.0, 0.0)), vec4(0.0, 0.0, 0.0, 1.0))))))), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))), max(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, abs(0.0), _GLF_IDENTITY(dot(vec4(determinant(mat3(_GLF_IDENTITY(1.0, (1.0) * 1.0), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x4(1.0, 0.0, round(length(_GLF_IDENTITY(normalize(1.0), mix(float(normalize(1.0)), float(_GLF_FUZZED(9.9)), bool(false))))), sin(0.0), determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), max(determinant(mat2(0.0, 0.0, 0.0, 0.0)), determinant(mat2(0.0, 0.0, 0.0, 0.0)))), 0.0)), min(float(mat2x4(1.0, 0.0, round(length(normalize(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, log(1.0), 0.0, 1.0)))) - 0.0)))), _GLF_IDENTITY(sin(0.0), max(sin(0.0), sin(0.0))), determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0)), float(mat2x4(1.0, 0.0, round(length(normalize(1.0))), sin(0.0), determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0))))))), abs(1.0), 1.0, 0.0), vec4(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(cos(-978.725)) : 0.0)), 0.0, 1.0)), dot(vec4(determinant(mat3(1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), abs(1.0), 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0))), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), mat3x4(mat3x4(mat3x4(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(abs(0.0), (true ? abs(0.0) : _GLF_FUZZED(_GLF_IDENTITY(-6.7, (-6.7) - 0.0)))), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec4(determinant(mat3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)))) && true) ? _GLF_FUZZED(1790.3787) : 1.0)), 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), 0.0, 0.0, 1.0, 1.0)), abs(1.0), 1.0, 0.0), (vec4(determinant(mat3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(1790.3787) : 1.0)), 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, 1.0)), abs(1.0), 1.0, 0.0)) / vec4(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-8.6)), bool(false))))), 1.0)), 1.0, 1.0, 1.0)), vec4(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) / _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-0.9)), float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), bool(true)))), vec4(0.0, 1.0, 0.0, 0.0)))), 0.0, 1.0)), dot(_GLF_IDENTITY(vec4(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), abs(1.0), 1.0, 0.0), (vec4(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), abs(1.0), 1.0, 0.0)) - vec4(0.0, 0.0, 0.0, 0.0)), vec4(0.0, 0.0, 0.0, 1.0))), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))), vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, abs(0.0), _GLF_IDENTITY(dot(vec4(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x4(1.0, 0.0, round(length(normalize(1.0))), sin(0.0), _GLF_IDENTITY(determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), max(determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, 0.0, 0.0)), determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) + tan(abs(0.0))), 0.0, 0.0, 0.0, 0.0)))), 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0)), min(_GLF_IDENTITY(float(mat2x4(1.0, 0.0, round(length(normalize(1.0))), sin(0.0), determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, float(mat2(0.0, 1.0, 1.0, 1.0))), 0.0, 0.0)))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, determinant(mat2(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0))) + (0.0)))), 0.0)), 0.0)), (_GLF_IDENTITY(false ? _GLF_FUZZED(-143.431) : float(mat2x4(1.0, 0.0, round(length(normalize(1.0))), sin(0.0), determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, determinant(mat2(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), 0.0)), min(_GLF_IDENTITY(false ? _GLF_FUZZED(-143.431) : float(mat2x4(1.0, 0.0, round(length(normalize(1.0))), sin(0.0), determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, determinant(mat2(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), 0.0)), (false ? _GLF_FUZZED(-143.431) : float(mat2x4(1.0, 0.0, round(length(normalize(1.0))), sin(0.0), determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, determinant(mat2(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), 0.0))) - 0.0), false ? _GLF_FUZZED(-143.431) : float(mat2x4(1.0, 0.0, round(length(normalize(1.0))), sin(0.0), determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, determinant(mat2(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), 0.0)))))), float(mat2x4(1.0, 0.0, round(length(normalize(1.0))), sin(0.0), determinant(mat4(0.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), min(1.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0))))))), abs(1.0), 1.0, 0.0), vec4(0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, _GLF_IDENTITY(mix(float(0.0), float(_GLF_FUZZED(94.40)), bool(false)), mix(float(mix(float(0.0), float(_GLF_FUZZED(94.40)), bool(false))), float(_GLF_FUZZED(519.505)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) / 1.0), 1.0)), dot(vec4(determinant(mat3(1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(float(1.0))), 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), abs(1.0), 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0))), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), mat3x4(mat3x4(mat3x4(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(abs(0.0), (true ? abs(0.0) : _GLF_FUZZED(-6.7))), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec4(determinant(mat3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(1790.3787) : 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), abs(1.0), 1.0, 0.0), (_GLF_IDENTITY(vec4(determinant(mat3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(1790.3787) : 1.0, 1.0 * (false ? _GLF_FUZZED(1790.3787) : 1.0)))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), abs(1.0), 1.0, 0.0), mix(vec4(_GLF_FUZZED(4929.8090), _GLF_FUZZED(float(93721)), _GLF_FUZZED(914.926), _GLF_FUZZED(-2.1)), vec4((vec4(determinant(mat3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(1790.3787) : 1.0, 1.0 * (false ? _GLF_FUZZED(1790.3787) : 1.0)))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), abs(1.0), 1.0, 0.0))[0], (vec4(determinant(mat3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(1790.3787) : 1.0, 1.0 * (false ? _GLF_FUZZED(1790.3787) : 1.0)))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), abs(1.0), 1.0, 0.0))[1], (vec4(determinant(mat3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(1790.3787) : 1.0, 1.0 * (false ? _GLF_FUZZED(1790.3787) : 1.0)))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), abs(1.0), 1.0, 0.0))[2], (vec4(determinant(mat3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(1790.3787) : 1.0, 1.0 * (false ? _GLF_FUZZED(1790.3787) : 1.0)))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), abs(1.0), 1.0, 0.0))[3]), bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))) / vec4(1.0, 1.0, 1.0, 1.0)), vec4(0.0, 0.0, 0.0, 1.0)), dot(_GLF_IDENTITY(vec4(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), abs(1.0), 1.0, 0.0), (vec4(determinant(mat3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(90.71)), float(_GLF_IDENTITY(1.0, (1.0) - 0.0)), bool(true))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), abs(1.0), 1.0, 0.0)) - vec4(0.0, 0.0, 0.0, 0.0)), vec4(0.0, 0.0, 0.0, 1.0))), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))))), vec2(mat4x2(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec4(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), abs(1.0), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), abs(1.0), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0))), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(determinant(_GLF_IDENTITY(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0), mat3(mat4(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0))))), abs(1.0), 1.0, 0.0), vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0))))), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), mat3x4(mat3x4(mat3x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), _GLF_IDENTITY(dot(vec4(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), abs(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0 + (_GLF_IDENTITY(1.0, (1.0) - 0.0)))), 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(-2613.8619), clamp(_GLF_IDENTITY(_GLF_FUZZED(-2613.8619), float(mat2(_GLF_FUZZED(-2613.8619), 0.0, 1.0, 0.0))), _GLF_FUZZED(-2613.8619), _GLF_FUZZED(-2613.8619)))), float(0.0), bool(true))), 0.0, 1.0, 1.0)), abs(1.0), 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(5.7)))), float(_GLF_FUZZED(21.92)), bool(false))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 1.0)))).x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) >> 0))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) >> 0)))) / 1))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
              break;
             if(_GLF_DEAD(false))
              break;
             return;
            }
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             continue;
            }
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          continue;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch))) + sqrt(vec2(0.0, 0.0))).y))))
    {
    }
   else
    {
     return;
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 0.0, abs(0.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))) > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
        return;
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, bool(bool(false))), true)))))), true && (false))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (1)), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (1)), (_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, max(1, 1))))) >> 0), (1 & 1)), (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (1)), (_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, max(1, 1))))) >> 0), (1 & 1))) / ((ivec2(1, 1) << _GLF_IDENTITY(ivec2(3), ivec2(3))) >> _GLF_IDENTITY(ivec2(3), ivec2(3)))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) || false); _injected_loop_counter --)
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            break;
           do
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
               break;
              }
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), max(int(0), int(0)))) - (0 << _GLF_IDENTITY(int(4), int(4)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 return;
                }
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, ! (! (true))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).x > injectionSwitch.y))))
          return;
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
    return;
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).x)))) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             continue;
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
              {
              }
             else
              {
               return;
               if(_GLF_DEAD(false))
                break;
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(false))
            break;
          }
        }
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) - 0u))), _GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec2(1u, 0u)), (_GLF_IDENTITY(uint(uvec2(1u, 0u)), 0u ^ (uint(uvec2(1u, 0u))))) | 0u)), 1u) * (_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups))))).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, false || (false))), ! (! (true && (_GLF_IDENTITY(false, false || (false)))))))))
        {
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        continue;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, (_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-2.7) : injectionSwitch.x)) < injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false)), bool(bool((_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false))))), true && (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).x < injectionSwitch.y)) || false)))))) && true))) ? workgroup_id : _GLF_FUZZED(114717u))), uint(uvec4(workgroup_size * _GLF_IDENTITY(workgroup_id, (_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(709.632)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))).x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-79.38) : injectionSwitch.y))) && true, ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-79.38) : _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((85.01 * (mat2x3(7.5, -0.0, -12.98, -2.9, -3.2, 602.873) , 39.79))) : injectionSwitch.y))))) && true)))))) ? _GLF_IDENTITY(workgroup_id, uint(_GLF_IDENTITY(uvec4(workgroup_id, 1u, 1u, 0u), ~ (~ (uvec4(workgroup_id, 1u, 1u, 0u)))))) : _GLF_FUZZED(114717u))), _GLF_IDENTITY(1u, (1u) | 0u), 0u, 0u)));
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), bool(bvec4((_GLF_DEAD(false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      continue;
     do
      {
       do
        {
         return;
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && _GLF_IDENTITY(true, ! (! (true)))));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_DEAD(false))
    return;
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, min(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), workgroup_base + subgroup_id * subgroup_size)) + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) + 0u), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + _GLF_IDENTITY(1, (1) >> 0) : _GLF_FUZZED(uaddCarry(num_workgroup, workgroup_id, workgroup_base)))))), (_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id + 1, (true ? _GLF_IDENTITY(subgroup_local_id, 0u ^ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u))))) + 1 : _GLF_FUZZED(uaddCarry(num_workgroup, workgroup_id, workgroup_base)))))), (~ ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(_GLF_IDENTITY(1, 1 * (1)))), max(int(int(_GLF_IDENTITY(1, 1 * (1)))), _GLF_IDENTITY(int(int(_GLF_IDENTITY(1, 1 * (1)))), ~ (~ (int(int(_GLF_IDENTITY(1, 1 * (1)))))))))), (true ? subgroup_local_id + 1 : _GLF_FUZZED(uaddCarry(num_workgroup, workgroup_id, workgroup_base))))))) + 0u)) / ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)))), (_GLF_IDENTITY(~ ((subgroup_local_id + 1)), min(~ ((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false)))) ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), subgroup_local_id + 1)), (_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), subgroup_local_id + 1))) ^ 0u) : _GLF_FUZZED(virtual_gid), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), subgroup_local_id + 1)), (_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0))), (subgroup_local_id + 1) | (subgroup_local_id + 1)), subgroup_local_id + 1))) ^ 0u) : _GLF_FUZZED(virtual_gid), (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), subgroup_local_id + 1)), (_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0))), (subgroup_local_id + 1) | (subgroup_local_id + 1)), subgroup_local_id + 1))) ^ 0u) : _GLF_FUZZED(virtual_gid)) >> 0u)) / 1u))))), ~ ((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, ~ (~ (1))))))))))))) ^ 0u))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), (true ? _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) + 0u), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + _GLF_IDENTITY(1, (1) >> 0) : _GLF_FUZZED(uaddCarry(num_workgroup, workgroup_id, workgroup_base)))))), _GLF_IDENTITY((_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id + 1, (true ? _GLF_IDENTITY(subgroup_local_id, 0u ^ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u))))) + 1 : _GLF_FUZZED(uaddCarry(num_workgroup, workgroup_id, workgroup_base)))))), (~ ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(_GLF_IDENTITY(1, 1 * (1)))), max(int(int(_GLF_IDENTITY(1, 1 * (1)))), _GLF_IDENTITY(int(int(_GLF_IDENTITY(1, 1 * (1)))), _GLF_IDENTITY(~ (~ (int(int(_GLF_IDENTITY(1, 1 * (1)))))), 0 | (~ (~ (int(int(_GLF_IDENTITY(1, 1 * (1)))))))))))), (true ? _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 0u, 0u, 0u))) + 1 : _GLF_FUZZED(uaddCarry(num_workgroup, workgroup_id, workgroup_base))))))) + 0u)), 0u + ((_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id + 1, (true ? _GLF_IDENTITY(subgroup_local_id, 0u ^ (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(subgroup_local_id, 1u))))) + 1 : _GLF_FUZZED(uaddCarry(num_workgroup, workgroup_id, workgroup_base)))))), (~ ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(_GLF_IDENTITY(1, 1 * (1)))), max(int(int(_GLF_IDENTITY(1, 1 * (1)))), _GLF_IDENTITY(int(int(_GLF_IDENTITY(1, 1 * (1)))), _GLF_IDENTITY(~ (~ (int(int(_GLF_IDENTITY(1, 1 * (1)))))), 0 | (~ (~ (int(int(_GLF_IDENTITY(1, 1 * (1)))))))))))), (true ? _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 0u, 0u, 0u))) + 1 : _GLF_FUZZED(uaddCarry(num_workgroup, workgroup_id, workgroup_base))))))) + 0u)))) / ((1u << _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), min(_GLF_IDENTITY(uint(4u), 0u | (uint(4u))), uint(4u))))) >> _GLF_IDENTITY(uint(4u), uint(4u)))), (_GLF_IDENTITY(~ ((subgroup_local_id + 1)), min(~ ((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false)))), (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false))))) || false) ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), subgroup_local_id + 1)), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), subgroup_local_id + 1))), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), subgroup_local_id + 1))))) ^ 0u) : _GLF_FUZZED(virtual_gid), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), subgroup_local_id + 1)), (_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0))), (subgroup_local_id + 1) | (subgroup_local_id + 1)), subgroup_local_id + 1))) ^ 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), subgroup_local_id + 1)), (_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0))), (subgroup_local_id + 1) | (subgroup_local_id + 1)), subgroup_local_id + 1))) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), subgroup_local_id + 1)), (_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0))), (subgroup_local_id + 1) | (subgroup_local_id + 1)), subgroup_local_id + 1))) ^ 0u))) : _GLF_FUZZED(virtual_gid), (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + 1)), subgroup_local_id + 1)), (_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, int(ivec2(1, 0))), _GLF_IDENTITY((subgroup_local_id + 1), uint(uvec3(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u), 1u, 1u))) | (subgroup_local_id + 1)), subgroup_local_id + 1))) ^ 0u) : _GLF_FUZZED(virtual_gid)) >> 0u)) / 1u))))), ~ ((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, ~ (~ (1))))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(1, ~ (~ (1))))), ((~ (_GLF_IDENTITY(1, ~ (~ (1)))))) | ((~ (_GLF_IDENTITY(1, ~ (~ (1)))))))) - 0))))))))) ^ 0u))) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), 0u | ((subgroup_size))) | (subgroup_size)) : _GLF_FUZZED((subgroup_size / subgroup_local_id))))), (workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, 0 + (1))), ((subgroup_local_id + 1)) + 0u), ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(uaddCarry(num_workgroup, workgroup_id, workgroup_base)))))), (_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((true ? subgroup_local_id + 1 : _GLF_FUZZED(uaddCarry(num_workgroup, workgroup_id, workgroup_base))), 0u ^ ((true ? subgroup_local_id + 1 : _GLF_FUZZED(uaddCarry(num_workgroup, workgroup_id, workgroup_base)))))))), (~ ((_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(_GLF_IDENTITY(uaddCarry(num_workgroup, workgroup_id, workgroup_base), (uaddCarry(num_workgroup, workgroup_id, workgroup_base)) | 0u))))))) + 0u)) / ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)))), (_GLF_IDENTITY(~ ((subgroup_local_id + 1)), min(~ ((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), _GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + _GLF_IDENTITY(1, max(1, 1)) : _GLF_FUZZED(workgroup_id))))), (_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), subgroup_local_id + 1))) ^ 0u) : _GLF_FUZZED(virtual_gid), (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), subgroup_local_id + 1)), (_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + 1) | (subgroup_local_id + 1), ((subgroup_local_id + 1) | (subgroup_local_id + 1)) / 1u)), subgroup_local_id + 1))) ^ 0u) : _GLF_FUZZED(virtual_gid)) / 1u))))), ~ ((subgroup_local_id + 1))))) ^ 0u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(uaddCarry(num_workgroup, workgroup_id, workgroup_base)))))), (_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(uaddCarry(num_workgroup, workgroup_id, workgroup_base)))))), (~ ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u), (true ? subgroup_local_id + 1 : _GLF_IDENTITY(_GLF_FUZZED(uaddCarry(num_workgroup, workgroup_id, workgroup_base)), 0u ^ (_GLF_FUZZED(uaddCarry(num_workgroup, workgroup_id, workgroup_base))))))))) + 0u)) / ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)))), (_GLF_IDENTITY(~ ((subgroup_local_id + 1)), min(~ ((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + 1)), subgroup_local_id + 1)), (_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), subgroup_local_id + 1))) ^ 0u) : _GLF_FUZZED(virtual_gid), (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), subgroup_local_id + 1)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), subgroup_local_id + 1)), max(_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), subgroup_local_id + 1)), _GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), subgroup_local_id + 1))))) ^ 0u) : _GLF_IDENTITY(_GLF_FUZZED(virtual_gid), max(_GLF_FUZZED(virtual_gid), _GLF_FUZZED(virtual_gid)))) / 1u))))), ~ _GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) | (((subgroup_local_id + 1))))))) ^ 0u), (_GLF_IDENTITY(true, bool(bvec2(true, true))) ? _GLF_IDENTITY(_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id + 1, (true ? _GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1)) : _GLF_FUZZED(uaddCarry(num_workgroup, workgroup_id, workgroup_base)))))), (_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(_GLF_IDENTITY(uaddCarry(num_workgroup, workgroup_id, workgroup_base), _GLF_IDENTITY((uaddCarry(num_workgroup, workgroup_id, workgroup_base)), 0u + ((uaddCarry(num_workgroup, workgroup_id, workgroup_base)))) * (0u ^ 1u))))))), (~ ((_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(uaddCarry(num_workgroup, workgroup_id, workgroup_base))))))) + 0u)) / ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)))), (_GLF_IDENTITY(~ ((subgroup_local_id + 1)), min(~ ((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id)) + 1)), subgroup_local_id + 1)), (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, max(1, 1)))), max(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), _GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / (1u ^ 0u))))))) ^ 0u) : _GLF_IDENTITY(_GLF_FUZZED(virtual_gid), min(_GLF_FUZZED(virtual_gid), _GLF_IDENTITY(_GLF_FUZZED(virtual_gid), clamp(_GLF_FUZZED(virtual_gid), _GLF_FUZZED(virtual_gid), _GLF_FUZZED(virtual_gid))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), subgroup_local_id + 1), min(max(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), subgroup_local_id + 1), max(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), subgroup_local_id + 1)))), (_GLF_IDENTITY(subgroup_local_id + 1, max(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))))) ^ 0u) : _GLF_FUZZED(virtual_gid)) / _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) | (1u))) - (0u << _GLF_IDENTITY(uint(5u), uint(5u))))))))), ~ ((subgroup_local_id + 1))))) ^ 0u) : _GLF_FUZZED(virtual_gid)))) * 1u))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))) | 0u);
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false, ! (! ((_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true, false))) && true)))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y, true), true)), false, false))))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y, _GLF_IDENTITY(true, (true) || false)), bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y, true), true)))))))), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))) || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y), (false ? _GLF_FUZZED(-5.2) : max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y, true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y, true), true)), false, false))))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y, _GLF_IDENTITY(true, (true) || false)), bvec2(bvec3(bvec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y, true), true)))))))), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))) || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y), (false ? _GLF_FUZZED(-5.2) : max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y))))))))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) && true)))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(596.615) : injectionSwitch.x)) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           continue;
          }
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))));
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ((false)) && true)))), ! (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ((false)) && _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true)))))))), bool(bool(! (! (! (_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false))), true, true)))) && true)))))))))))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) - 0), _GLF_IDENTITY((1), _GLF_IDENTITY(((1)) | (_GLF_IDENTITY((1), ~ (~ ((1))))), clamp(((1)) | ((1)), ((1)) | ((1)), ((1)) | ((1))))) / 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter), _GLF_IDENTITY(int(ivec2(~ (_injected_loop_counter), 0)), min(int(ivec2(~ (_injected_loop_counter), 0)), int(ivec2(~ (_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0)))), 0)))))), max((_GLF_IDENTITY(~ (_injected_loop_counter), _GLF_IDENTITY(int(ivec2(~ (_injected_loop_counter), 0)), min(int(ivec2(~ (_injected_loop_counter), 0)), int(ivec2(~ (_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0)))), 0)))))), (_GLF_IDENTITY(~ (_injected_loop_counter), _GLF_IDENTITY(int(ivec2(~ (_injected_loop_counter), 0)), min(int(ivec2(~ (_injected_loop_counter), 0)), int(ivec2(~ (_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0)))), 0))))))))) != 0); _GLF_IDENTITY(_injected_loop_counter --, 1 * (_injected_loop_counter --)))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
    break;
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, (4) * 1));
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(int(7), int(7))) | (_GLF_IDENTITY(int(7), int(7)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), 0 | (_GLF_IDENTITY(int(7), int(7))))) * 1)) >> _GLF_IDENTITY(int(7), int(7))), int(ivec2(((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(int(7), int(7))) | (_GLF_IDENTITY(int(7), int(7)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), 0 | (_GLF_IDENTITY(int(7), int(7))))) * 1)) >> _GLF_IDENTITY(int(7), int(7))), 1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) && true); _injected_loop_counter --)
          {
           return;
           if(_GLF_DEAD(false))
            continue;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(packUnorm2x16(vec2(7572.0207, -165.131)))))], 4, 64, 0);
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(int(int(0)), ~ (~ (int(int(0)))))), clamp(int(_GLF_IDENTITY(int(int(0)), ~ (~ (int(int(0)))))), int(_GLF_IDENTITY(int(int(0)), ~ (~ (int(int(0)))))), int(_GLF_IDENTITY(int(int(0)), ~ (~ (int(int(0))))))))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(_GLF_IDENTITY(int(0), (int(0)) | (_GLF_IDENTITY(int(0), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (int(0)), clamp(~ (int(0)), ~ (int(0)), ~ (int(0))))), (~ (_GLF_IDENTITY(~ (int(0)), clamp(~ (int(0)), ~ (int(0)), ~ (int(0)))))) | 0)))), int(0), int(0))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) * (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, int(int(1)))))))) | 0)) / 1), clamp(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) * (_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, int(int(1))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec2(~ (~ (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, int(int(1))))))), 1)), (int(ivec2(~ (~ (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, int(int(1))))))), 1))) << 0), (true ? _GLF_IDENTITY(int(ivec2(~ (~ (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, int(int(1))))))), 1)), _GLF_IDENTITY((int(ivec2(~ (~ (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, int(int(1))))))), 1))), int(_GLF_IDENTITY(ivec3((int(ivec2(~ (~ (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, int(int(1))))))), 1))), 1, 0), ~ (~ (ivec3((int(ivec2(~ (~ (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, int(int(1))))))), 1))), 1, 0)))))) << 0) : _GLF_FUZZED(ivec2(26230, -38081)[1]))))) | 0)) / 1), _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) * (_GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec3(1, 1, 0)))) / 1), int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec3(1, 1, 0)))) / 1)), clamp(int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec3(1, 1, 0)))) / 1)), int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec3(1, 1, 0)))) / 1)), int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec3(1, 1, 0)))) / 1)))))))))))), max(_GLF_IDENTITY((_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, int(int(1)))))), clamp((_GLF_IDENTITY(1, _GLF_IDENTITY(1 * (_GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (int(int(1)))))), clamp(1 * (_GLF_IDENTITY(1, int(int(1)))), 1 * (_GLF_IDENTITY(1, int(int(1)))), 1 * (_GLF_IDENTITY(1, int(int(1)))))))), (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), (int(1)) | (0 ^ 0))))))), (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(_GLF_IDENTITY(1, int(int(1))), (_GLF_IDENTITY(1, int(int(1)))) * 1)))))), _GLF_IDENTITY((_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, int(int(1)))))), ((_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, clamp(1, 1, 1))))), (_GLF_IDENTITY(1, (1) | (1))) << 0), int(int(1))))))) * ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))))))) | _GLF_IDENTITY(0, max(0, 0)))) / 1), _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), (_GLF_IDENTITY((_injected_loop_counter), 0 + ((_injected_loop_counter)))) * _GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), int(ivec2(int(_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1)))), 0))))))))) | _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) ^ 0)), _GLF_IDENTITY(0, 0 | (0)) + _GLF_IDENTITY(((_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, int(int(1))))))), 0 | (~ (~ (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, int(int(1)))))))))) | 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : ((_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, int(int(1))))))), 0 | (~ (~ (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, int(int(1)))))))))) | 0)))))) / 1))) != 0); _GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_IDENTITY(_GLF_FUZZED(-61791), (false ? _GLF_FUZZED(59345) : _GLF_FUZZED(-61791))))), (_GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_IDENTITY(_GLF_FUZZED(-61791), (false ? _GLF_FUZZED(59345) : _GLF_FUZZED(-61791)))))) >> 0)), (true ? (_GLF_IDENTITY(_injected_loop_counter --, (true ? _GLF_IDENTITY(_injected_loop_counter --, (true ? _GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_injected_loop_counter --)) : _GLF_FUZZED(int(-60.77)))) : _GLF_FUZZED(-61791)))) : _GLF_FUZZED(58323))) - 0))
  {
   if(subgroup_local_id + _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, int(ivec2(1, 0))))) < subgroup_size)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       break;
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, true && (false))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), true && (false))))))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (true), bool(bvec4(! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))), true, false, false)), (bool(bvec4(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))), true, false, false))) && true))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), (_GLF_IDENTITY((_GLF_IDENTITY(! (true), bool(bvec4(! (true), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), ! (! ((_GLF_IDENTITY(! (true), bool(bvec4(! (true), false, _GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, (true) || false))))))))) || false)))))
        {
        }
       else
        {
         do
          {
           atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, 0u | (read)), 4, _GLF_IDENTITY(64, (64) << (0 | 0)), _GLF_IDENTITY(4, (4) >> 0));
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), true && (_GLF_IDENTITY(false, (false) && true)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           continue;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), (! (false)) && true)), false || (! (_GLF_IDENTITY(! _GLF_IDENTITY((false), bool(bvec2((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (! (false)) && true)))))))
          {
           if(_GLF_DEAD(false))
            break;
           continue;
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), clamp(max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch)))).y)), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) && true))))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-24.39, 25.04)))), _GLF_IDENTITY(vec2(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-24.39, 25.04)))), clamp(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-24.39, 25.04)))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-24.39, 25.04)))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-24.39, 25.04)))))), 0.0)), mix(vec2((vec2(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-24.39, 25.04)))), clamp(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-24.39, 25.04)))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-24.39, 25.04)))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-24.39, 25.04)))))), 0.0)))[0], _GLF_IDENTITY((vec2(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-24.39, 25.04)))), clamp(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-24.39, 25.04)))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-24.39, 25.04)))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-24.39, 25.04)))))), 0.0)))[1], 1.0 * ((vec2(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-24.39, 25.04)))), clamp(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-24.39, 25.04)))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-24.39, 25.04)))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-24.39, 25.04)))))), 0.0)))[1]))), vec2(_GLF_FUZZED(-3.7), _GLF_FUZZED(93.47)), bvec2(false, false)))).y))));
        }
       continue;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
          {
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, true, true)), false || (bool(bvec4(_GLF_DEAD(false), false, true, true))))))
          {
           for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, bool(bool(_injected_loop_counter != 0))))))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), _GLF_IDENTITY(true, (true) || false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, bool(bool(_injected_loop_counter != 0))))))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), _GLF_IDENTITY(true, (true) || false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, bool(bool(_injected_loop_counter != 0))))))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), _GLF_IDENTITY(true, (true) || false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, true)))))), true), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) && true), true, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(0.2)), bool(false))), injectionSwitch.y)))))), false || (bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y)))))), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true, false, _GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))), (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false || (bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true, false, _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, (true) || false), false)), ! (! (bool(bvec2(_GLF_IDENTITY(true, (true) || false), false)))))), (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY(true, true && (true))), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true)))))))), ! (! (bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true)))))))))))))))), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true)))))))), ! (! (bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))))))))))))))))), bool(bool(! (bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true)))))))), ! (! (bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true)))))))))))))))))))))), false || (bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true)))))))), ! (! (bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true)))))))))))))))), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true)))))))), ! (! (bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))))))))))))))))), bool(bool(! (bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true)))))))), ! (! (bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true)))))))))))))))))))))), false || (bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true, false, _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)))) < injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))))))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true)))))))))), true)))), ! (! (bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true)))))))))))))))), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true)))))))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))))))))))))))))), bool(bool(! (bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true)))))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, false, true))))))))))))))))))))))))), false || (bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), true), false, true)))))), _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), false))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), false)))), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), false)))), false), bvec2(bvec4(bvec2(bool(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), false)))), false), true, true))))))))), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true), _GLF_IDENTITY(true, (true) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || _GLF_IDENTITY((bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! ((bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, ~ (~ (0)))), true, false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))), false || (bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true, false, _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x < injectionSwitch.y)))))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(false || (bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true, false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))), (false || (bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true, false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))) || false)), true), false, _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, ! (! (true))))))))))), false)), false), bvec3(bvec4(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false), false || (bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)), (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)), _injected_loop_counter, _injected_loop_counter)) != 0), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), _GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))) && true)) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true), false, true)))))), false)), false), true))))))))); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ 0))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            return;
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            break;
                           return;
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            break;
                          }
                        }
                      }
                    }
                   if(_GLF_DEAD(false))
                    continue;
                   return;
                   if(_GLF_DEAD(false))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         break;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       break;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         return;
         if(_GLF_DEAD(false))
          continue;
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY(1, int(ivec3(1, 0, 1))) | (0 | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         subgroupAll(false);
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      continue;
    }
   else
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), (_GLF_IDENTITY(false, bool(bvec2(false, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        return;
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true), false)))))
              {
               return;
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))), true, true, false))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
              return;
             return;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
              break;
             continue;
            }
           break;
           if(_GLF_DEAD(false))
            break;
          }
        }
      }
     do
      {
       do
        {
         do
          {
           atomicStore(checker[virtual_gid], read, 4, 64, _GLF_IDENTITY(4, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(51592) : 4)));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) && true))))
        {
         if(_GLF_DEAD(false))
          return;
         break;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - tan(vec2(0.0, 0.0))), (_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(float(injectionSwitch.y), min(float(injectionSwitch.y), float(injectionSwitch.y))))))), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), _GLF_IDENTITY(bool(bool((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(2314.8939))), sqrt(1.0) * (injectionSwitch.y)), injectionSwitch.y)), min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), bool(bvec4(bool(bool((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y), (max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)) - 0.0))))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), vec2(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, min(0, 0))))))], max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], min(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, _GLF_IDENTITY((0) | (0), 0 | ((0) | (0))))], _GLF_IDENTITY(float(vec2(injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), int(ivec4(_GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY((1 & 1), (false ? _GLF_FUZZED(-43846) : _GLF_IDENTITY((1 & 1), (false ? _GLF_FUZZED(79651) : (1 & 1))))), 0, 0)))], 1.0)), max(_GLF_IDENTITY(float(vec2(injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), int(ivec4(_GLF_IDENTITY(0, (0) | (0)), (1 & 1), 0, 0)))], 1.0)), (float(vec2(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch))[_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) | (0)))), int(ivec4(_GLF_IDENTITY(0, (0) | (0)), (1 & 1), 0, 0)))], 1.0))) / 1.0), _GLF_IDENTITY(float(vec2(injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), int(ivec4(_GLF_IDENTITY(0, (0) | _GLF_IDENTITY((0), (_GLF_IDENTITY((0), int(ivec3(_GLF_IDENTITY((0), 0 + ((0))), 0, 1)))) | ((0)))), (_GLF_IDENTITY(1, (1) | (1)) & 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-67805) : _GLF_IDENTITY(0, min(0, 0))))) - 0), 0)))], 1.0)), clamp(_GLF_IDENTITY(float(vec2(injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), int(ivec4(_GLF_IDENTITY(0, (0) | (0)), (1 & 1), 0, 0)))], 1.0)), mix(float(_GLF_FUZZED(6.4)), float(float(vec2(injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), int(ivec4(_GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY((1 & 1), clamp((1 & 1), (1 & 1), (1 & 1))), 0, 0)))], 1.0))), bool(true))), float(vec2(injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), int(ivec4(_GLF_IDENTITY(0, (0) | (0)), (_GLF_IDENTITY(1 & 1, _GLF_IDENTITY(int(ivec3(1 & 1, 1, 1)), (_GLF_IDENTITY(int(ivec3(1 & 1, 1, 1)), max(int(ivec3(1 & 1, 1, 1)), int(ivec3(1 & 1, 1, 1))))) + 0))), 0, 0)))], 1.0)), float(vec2(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), int(ivec4(_GLF_IDENTITY(0, (0) | (0)), (1 & 1), 0, 0)))], min(injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), int(ivec4(_GLF_IDENTITY(0, (0) | (0)), (1 & 1), 0, 0)))], injectionSwitch[_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), int(ivec4(_GLF_IDENTITY(0, (0) | (0)), (1 & 1), 0, 0)))])), 1.0))))))), _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) | (0))], max(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], max(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], (true ? _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], clamp(injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], injectionSwitch[_GLF_IDENTITY(0, (0) | (0))], injectionSwitch[_GLF_IDENTITY(0, (0) | (0))])) : _GLF_FUZZED(7468.8148))), injectionSwitch[_GLF_IDENTITY(0, (0) | (0))])))))), _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0))), 1.0), mat4(1.0) * (mat2x4(injectionSwitch, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0))), 1.0)))))[0], 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0)), clamp(float(mat3x4(injectionSwitch[0], 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0)), float(mat3x4(injectionSwitch[0], 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-1.5)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 0.0)), float(mat3x4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))[0], 0.0, 0.0, _GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0))))), injectionSwitch[0])), injectionSwitch[1])), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-3.7, -84.21)) : injectionSwitch)), injectionSwitch)))), vec2(_GLF_IDENTITY(injectionSwitch[0], max(_GLF_IDENTITY(injectionSwitch[0], float(mat3x4(injectionSwitch[0], 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) - 0.0)) - 0.0), 1.0, 1.0, 1.0, 0.0, 0.0))), injectionSwitch[0])), injectionSwitch[1])), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch[0], float(mat3x4(injectionSwitch[0], 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, round(length(normalize(vec2(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0)), 1.0)))) * (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-51.50)), bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true))))))))))), 1.0)), 0.0, 0.0))), _GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-8.6, -8.3)) : injectionSwitch))[0]), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(8275.9223) : (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-8.6, -8.3)) : injectionSwitch))[0]))) * exp(0.0))), clamp(max(_GLF_IDENTITY(injectionSwitch[0], float(mat3x4(injectionSwitch[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) - 0)], 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, round(length(normalize(vec2(1.0, 1.0)))) * (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-51.50)), bool(false))))), 1.0)), 0.0, 0.0))), _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) * exp(0.0))), max(_GLF_IDENTITY(injectionSwitch[0], float(mat3x4(injectionSwitch[0], 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, round(length(_GLF_IDENTITY(normalize(vec2(1.0, 1.0)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(normalize(vec2(1.0, 1.0)), vec2(mat2(normalize(vec2(1.0, 1.0)), 0.0, _GLF_IDENTITY(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0)), float(vec4(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 1.0)))))))))) * (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_IDENTITY(_GLF_FUZZED(-51.50), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec4(0.0, -38.60, 2214.3941, -4.1).s) : _GLF_FUZZED(-51.50)))), bool(false))))), 1.0)), 0.0, 0.0))), _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) * exp(0.0))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], float(mat3x4(injectionSwitch[0], 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, round(length(normalize(vec2(1.0, 1.0)))) * (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-51.50)), bool(false))))), float(mat4x2(_GLF_IDENTITY(1.0, round(length(normalize(vec2(1.0, 1.0)))) * (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-51.50)), bool(false))))), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0))), 1.0)), 0.0, 0.0))), max(_GLF_IDENTITY(injectionSwitch[0], float(mat3x4(injectionSwitch[0], 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, round(length(normalize(vec2(1.0, 1.0)))) * (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-51.50)), bool(false))))), float(mat4x2(_GLF_IDENTITY(1.0, round(length(normalize(vec2(1.0, 1.0)))) * (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-51.50)), bool(false))))), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0))), 1.0)), 0.0, 0.0))), _GLF_IDENTITY(injectionSwitch[0], float(mat3x4(injectionSwitch[0], 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, round(length(normalize(vec2(1.0, 1.0)))) * (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-51.50)), bool(false))))), float(mat4x2(_GLF_IDENTITY(1.0, round(length(normalize(vec2(1.0, 1.0)))) * (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-51.50)), bool(false))))), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0))), 1.0)), 0.0, 0.0))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[_GLF_IDENTITY(0, (0) / 1)]) * exp(0.0)), max(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) * exp(0.0)), _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) * exp(0.0)))))))), injectionSwitch[1]))) * mat2(1.0)) : _GLF_FUZZED(_GLF_IDENTITY(vec2(-9915.0161, 5.4), (vec2(-9915.0161, 5.4)) - log(cos(vec2(0.0, 0.0))))))).y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            continue;
          }
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        continue;
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, 0.0, 1.0, 1.0, 0.0, 0.0), mat2x3(mat2x4(mat2x3(injectionSwitch.y, 0.0, 1.0, 1.0, 0.0, 0.0)))))))))))))))))))
        {
         if(_GLF_DEAD(false))
          continue;
         break;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
       break;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec4(bvec2(_GLF_DEAD(false), false), false, false))))))
      continue;
     subgroupAll(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, exp(0.0), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, exp(0.0), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))))), ! (! (_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, exp(0.0), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))))))))), true && (! (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, exp(0.0), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))))), ! (! (_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, exp(0.0), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)))))))))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY((_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, exp(0.0), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)))))), ((_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, exp(0.0), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))))))) || false), (_GLF_IDENTITY(_GLF_IDENTITY((_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, exp(0.0), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)))))), ((_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, exp(0.0), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))))))) || false), (_GLF_IDENTITY((_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, exp(0.0), _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 1.0)))))), ((_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, _GLF_IDENTITY(exp(0.0), (true ? exp(0.0) : _GLF_FUZZED(31.99))), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))))))) || false)) && true)) || false))) && true)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            continue;
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) || false)))), true, true, false)), bool(_GLF_IDENTITY(bool(bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, true, false))), ! (! (bool(bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, true, false))))))))))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
              return;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       return;
                       if(_GLF_DEAD(false))
                        return;
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 break;
                }
               continue;
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))))), (injectionSwitch.x > injectionSwitch.y))))
              break;
             break;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             break;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
              return;
             break;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
