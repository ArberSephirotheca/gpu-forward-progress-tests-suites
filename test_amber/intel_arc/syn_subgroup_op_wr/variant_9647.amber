#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_20 {
 ivec2 _f0;
 mat4 _f1;
 mat2x3 _f2;
 mat3x4 _f3;
 bool _f4;
 uint subgroup_base;
} ;

struct _GLF_struct_19 {
 uvec4 _f0;
 mat4x3 _f1;
 ivec2 _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_18 {
 ivec3 _f0;
 mat2x4 _f1;
 float _f2;
 vec4 _f3;
} ;

struct _GLF_struct_21 {
 _GLF_struct_18 _f0;
 _GLF_struct_19 _f1;
 _GLF_struct_20 _f2;
 vec3 _f3;
 uint _f4;
} ;

struct _GLF_struct_22 {
 _GLF_struct_21 _f0;
} ;

struct _GLF_struct_15 {
 uvec3 _f0;
 uint next_virtual_gid;
} ;

struct _GLF_struct_16 {
 _GLF_struct_15 _f0;
 mat2x4 _f1;
 mat4 _f2;
 vec2 _f3;
 float _f4;
} ;

struct _GLF_struct_17 {
 _GLF_struct_16 _f0;
 uint _f1;
 bvec2 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_12 {
 vec3 _f0;
 mat3x2 _f1;
 mat4 _f2;
} ;

struct _GLF_struct_11 {
 uvec4 _f0;
 mat3x2 _f1;
 uvec4 _f2;
 int _f3;
 int _f4;
 vec4 _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_10 {
 ivec2 _f0;
 uvec2 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_9 {
 int _f0;
 vec2 _f1;
 mat2x4 _f2;
 bool _f3;
 mat4x3 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_8 {
 mat4 _f0;
 mat2 _f1;
 int _f2;
} ;

struct _GLF_struct_13 {
 _GLF_struct_8 _f0;
 _GLF_struct_9 _f1;
 _GLF_struct_10 _f2;
 bvec4 _f3;
 _GLF_struct_11 _f4;
 mat3x2 _f5;
 _GLF_struct_12 _f6;
} ;

struct _GLF_struct_6 {
 mat4x2 _f0;
 bvec3 _f1;
 uint _f2;
 ivec4 _f3;
 bvec4 _f4;
 ivec2 _f5;
 vec2 _f6;
} ;

struct _GLF_struct_5 {
 vec3 _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_4 {
 ivec4 _f0;
} ;

struct _GLF_struct_3 {
 mat3x2 _f0;
 bvec2 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_7 {
 _GLF_struct_3 _f0;
 mat4 _f1;
 mat4 _f2;
 _GLF_struct_4 _f3;
 _GLF_struct_5 _f4;
 bool _f5;
 _GLF_struct_6 _f6;
} ;

struct _GLF_struct_1 {
 vec3 _f0;
 bool _f1;
 mat4x3 _f2;
 int _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_0 {
 uvec3 _f0;
} ;

struct _GLF_struct_2 {
 int _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
} ;

struct _GLF_struct_14 {
 _GLF_struct_2 _f0;
 _GLF_struct_7 _f1;
 ivec3 _f2;
 uint virtual_gid;
 mat2x4 _f3;
 _GLF_struct_13 _f4;
 vec4 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), bool(bvec4(_GLF_IDENTITY(bool(false), bool(bool(bool(false)))), false, false, true))), ! (! (_GLF_IDENTITY(bool(false), (bool(false)) || false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))), ! (! (_GLF_IDENTITY(bool(false), (bool(false)) || false)))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), (bool(false)) || false)))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(false), (bool(false)) || false), bool(bvec4(_GLF_IDENTITY(bool(false), (bool(false)) || false), false, false, true)))))))), (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), true && (_GLF_IDENTITY(bool(false), bool(bvec2(bool(false), true))))), ! (! (_GLF_IDENTITY(bool(false), (bool(false)) || false))))))) || false), true, false))))), (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), (bool(false)) || false)))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), (bool(false)) || false)))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), _GLF_IDENTITY((bool(false)), ((bool(false))) && true) || false))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), _GLF_IDENTITY((bool(false)), ((bool(false))) && true) || false)))))), _GLF_IDENTITY(! (! (! (bool(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), _GLF_IDENTITY((bool(false)), ((bool(false))) && true) || false)))))))), (! (! (! (bool(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), _GLF_IDENTITY((bool(false)), ((bool(false))) && true) || false))))))))) && true)))))) || false), true, false))))), true && ((! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), (bool(false)) || false)))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), (bool(false)) || false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), (bool(false)) || false))))))) || false), true, false)))))))) || false))) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, false, false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), bool(bvec3(bool(bool(false)), true, false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), bool(bvec3(bool(bool(false)), true, false))), true && (_GLF_IDENTITY(bool(bool(false)), bool(bvec3(bool(bool(false)), true, false))))), true, true, false))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false)))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y), false || ((injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))) && true, ! (! ((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)).x < injectionSwitch.y))), bvec3(bvec3(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) && true)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-427.335)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))), ((_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)))) * abs(1.0)) / 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))) * ((_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))) / 1.0))) > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) && true, ! (! ((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat4(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-7710.3916) : 1.0)), 0.0)), 0.0, 1.0, abs(0.0), 1.0, 1.0, 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0))))), injectionSwitch[1])), clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)).x < injectionSwitch.y))), bvec3(bvec3(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) && true)))), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))) / 1.0) > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(! _GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) && true, ! (! ((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)).x < injectionSwitch.y))), bvec3(bvec3(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) && true)))), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))) / 1.0) > injectionSwitch.y))), ! (! ((_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) && true, ! (! ((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)).x < injectionSwitch.y))), bvec3(bvec3(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) && true)))), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))) / 1.0) > injectionSwitch.y)))))), false)), ! (! (bool(bvec2(! (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (false)), true)), (bool(bvec2(_GLF_IDENTITY(false, true && (false)), true))) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(false, _GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) && true, ! (! ((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)).x < injectionSwitch.y))), bvec3(bvec3(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) && true)))), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), injectionSwitch.x, injectionSwitch.x)), min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))) / 1.0) > injectionSwitch.y))), false))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(634.872), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(-82.79)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, false || (false)), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, false || (false)), true), false)))))))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y))) || false), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y) || false), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y) || false, false, true)), false || (bool(bvec3((injectionSwitch.x > injectionSwitch.y) || false, false, true)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(5.8), _GLF_FUZZED(-1.7)), bvec2(false, false))), injectionSwitch)))))))).y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))))) >> (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(5u), uvec3(5u))))[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(186966u, 39586u, 90400u)) : _GLF_IDENTITY(uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[_GLF_IDENTITY(_GLF_IDENTITY(2, max(2, 2)), _GLF_IDENTITY((2), (false ? _GLF_FUZZED(-13238) : (2))) | (2))]), min(uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[_GLF_IDENTITY(_GLF_IDENTITY(2, max(2, 2)), _GLF_IDENTITY((2), (false ? _GLF_FUZZED(-13238) : (2))) | (2))]), uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[_GLF_IDENTITY(_GLF_IDENTITY(2, max(2, 2)), _GLF_IDENTITY((2), (false ? _GLF_FUZZED(-13238) : (2))) | (2))], (gl_NumWorkGroups[_GLF_IDENTITY(_GLF_IDENTITY(2, max(2, 2)), _GLF_IDENTITY((2), (false ? _GLF_FUZZED(-13238) : (2))) | (2))]) | (_GLF_IDENTITY(gl_NumWorkGroups[_GLF_IDENTITY(_GLF_IDENTITY(2, max(2, 2)), _GLF_IDENTITY((2), (false ? _GLF_FUZZED(-13238) : (2))) | (2))], (_GLF_IDENTITY(gl_NumWorkGroups[_GLF_IDENTITY(_GLF_IDENTITY(2, max(2, 2)), _GLF_IDENTITY((2), (false ? _GLF_FUZZED(-13238) : (2))) | (2))], max(gl_NumWorkGroups[_GLF_IDENTITY(_GLF_IDENTITY(2, max(2, 2)), _GLF_IDENTITY((2), (false ? _GLF_FUZZED(-13238) : (2))) | (2))], gl_NumWorkGroups[_GLF_IDENTITY(_GLF_IDENTITY(2, max(2, 2)), _GLF_IDENTITY((2), (false ? _GLF_FUZZED(-13238) : (2))) | (2))]))) | 0u))))))), uvec3(0u, 0u, 0u) ^ ((false ? _GLF_FUZZED(uvec3(186966u, 39586u, 90400u)) : uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, max(2, 2)), (_GLF_IDENTITY(2, max(2, 2))) << _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) / 1), 0))), (2) | (2))])))))).x, (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[_GLF_IDENTITY(1, (1) ^ 0)], gl_NumWorkGroups[2]), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(186966u, 39586u, _GLF_IDENTITY(90400u, (_GLF_IDENTITY(90400u, clamp(90400u, 90400u, 90400u))) / (uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1u)))) : uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[_GLF_IDENTITY(_GLF_IDENTITY(2, max(2, 2)), _GLF_IDENTITY((2), (false ? _GLF_FUZZED(-13238) : (2))) | (2))])), uvec3(0u, 0u, 0u) ^ ((false ? _GLF_FUZZED(_GLF_IDENTITY(uvec3(186966u, 39586u, 90400u), uvec3(0u, 0u, 0u) + (uvec3(186966u, 39586u, 90400u)))) : uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, max(2, 2)), _GLF_IDENTITY((_GLF_IDENTITY(2, max(2, 2))), clamp((_GLF_IDENTITY(2, max(2, 2))), (_GLF_IDENTITY(2, max(2, 2))), _GLF_IDENTITY((_GLF_IDENTITY(2, max(2, 2))), min((_GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (2) * 1), 2))), (_GLF_IDENTITY(2, max(2, 2))))))) << 0), (2) | (2))])))))).x) + uint(_GLF_ZERO(0.0, injectionSwitch.x)));
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, gl_WorkGroupSize.x));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (_GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY((_GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false)), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false)), ! (! ((_GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false)))))))) && true)) && true))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_22 _GLF_struct_replacement_22 = _GLF_struct_22(_GLF_struct_21(_GLF_struct_18(ivec3(1), mat2x4(1.0), 1.0, vec4(1.0)), _GLF_struct_19(_GLF_IDENTITY(uvec4(1u), clamp(uvec4(1u), uvec4(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_base) : 1u))), _GLF_IDENTITY(uvec4(1u), (uvec4(1u)) | (uvec4(1u))))), mat4x3(1.0), _GLF_IDENTITY(ivec2(1), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(ivec3(ivec2(1), 0), ivec3(0, 0, 0) | (ivec3(ivec2(1), 0)))), _GLF_IDENTITY(min(ivec2(_GLF_IDENTITY(ivec3(ivec2(1), 0), ivec3(0, 0, 0) | (ivec3(ivec2(1), 0)))), ivec2(_GLF_IDENTITY(ivec3(ivec2(1), 0), _GLF_IDENTITY(_GLF_IDENTITY(ivec3(0, 0, 0), _GLF_IDENTITY(ivec3(ivec4(_GLF_IDENTITY(ivec3(0, 0, 0), min(ivec3(0, 0, 0), _GLF_IDENTITY(ivec3(0, 0, 0), (ivec3(0, 0, 0)) ^ ivec3(0, 0, 0)))), (0 | 0))), (ivec3(ivec4(_GLF_IDENTITY(ivec3(0, 0, 0), min(ivec3(0, 0, 0), _GLF_IDENTITY(ivec3(0, 0, 0), (ivec3(0, 0, 0)) ^ ivec3(0, 0, 0)))), (0 | 0)))) << ivec3(0, 0, 0))), (true ? _GLF_IDENTITY(ivec3(0, 0, 0), _GLF_IDENTITY(ivec3(ivec4(_GLF_IDENTITY(ivec3(0, 0, 0), min(ivec3(0, 0, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(81033) : 0))), _GLF_IDENTITY(ivec3(0, 0, 0), (ivec3(0, 0, 0)) ^ ivec3(0, 0, 0)))), (0 | 0))), (ivec3(ivec4(_GLF_IDENTITY(ivec3(0, 0, 0), min(ivec3(0, 0, 0), _GLF_IDENTITY(ivec3(0, 0, 0), (ivec3(0, 0, 0)) ^ ivec3(0, 0, 0)))), (0 | 0)))) << ivec3(0, 0, 0))) : _GLF_FUZZED(ivec3(-47031, 81979, 44326)))) | (ivec3(ivec2(1), 0))))), min(min(ivec2(_GLF_IDENTITY(ivec3(ivec2(1), 0), ivec3(0, 0, 0) | (ivec3(ivec2(1), 0)))), ivec2(_GLF_IDENTITY(ivec3(ivec2(1), 0), _GLF_IDENTITY(ivec3(0, 0, 0) | (ivec3(ivec2(1), 0)), min(_GLF_IDENTITY(ivec3(0, 0, _GLF_IDENTITY(0, int(ivec2(0, 0)))) | (ivec3(ivec2(1), 0)), (_GLF_IDENTITY(ivec3(0, 0, 0) | (ivec3(ivec2(1), 0)), (true ? ivec3(0, _GLF_IDENTITY(0, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(0, 1, 1), (ivec3(0, 1, 1)) / ivec3(1, 1, 1))), max(int(_GLF_IDENTITY(ivec3(0, 1, 1), (ivec3(0, 1, 1)) / ivec3(1, 1, 1))), int(_GLF_IDENTITY(ivec3(0, 1, 1), (ivec3(0, 1, 1)) / ivec3(1, 1, 1)))))), 0) | (ivec3(ivec2(1), 0)) : _GLF_FUZZED(ivec3(-84051, -60352, -57176))))) | (ivec3(0, 0, 0) >> _GLF_IDENTITY(ivec3(8), ivec3(8)))), ivec3(0, 0, 0) | (ivec3(ivec2(1), 0))))))), _GLF_IDENTITY(min(ivec2(_GLF_IDENTITY(ivec3(ivec2(1), 0), ivec3(0, 0, 0) | (ivec3(ivec2(1), 0)))), ivec2(_GLF_IDENTITY(ivec3(ivec2(1), 0), ivec3(0, 0, 0) | (ivec3(ivec2(1), _GLF_IDENTITY(0, (0) ^ 0)))))), (min(ivec2(_GLF_IDENTITY(ivec3(ivec2(1), 0), ivec3(0, 0, 0) | (ivec3(ivec2(1), 0)))), ivec2(_GLF_IDENTITY(ivec3(ivec2(1), 0), ivec3(0, 0, 0) | (ivec3(ivec2(1), 0)))))) | ivec2(0, 0)))))), bvec3(true)), _GLF_struct_20(ivec2(1), mat4(1.0), mat2x3(1.0), mat3x4(1.0), true, subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) - 0u)), vec3(1.0), 1u));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
         barrier();
        }
       barrier();
      }
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 _GLF_struct_14 _GLF_struct_replacement_14 = _GLF_struct_14(_GLF_struct_2(1, _GLF_struct_0(uvec3(_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), _GLF_IDENTITY(1u, (1u) ^ 0u), 1u)))), _GLF_struct_1(vec3(1.0), true, mat4x3(1.0), 1, ivec3(1))), _GLF_struct_7(_GLF_struct_3(mat3x2(1.0), _GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(true)), bvec2(bvec4(bvec2(bvec2(true)), false, true)))), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec2(true)), bvec2(bvec4(bvec2(bvec2(true)), false, true)))), false)), bvec2(bvec2(bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec2(true)), bvec2(bvec4(bvec2(bvec2(true)), false, true)))), false))))))), mat2(1.0)), _GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(5978.2976))), (_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(5978.2976)))) + 0.0), 0.0, 1.0, cos(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0), (mat4x3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(5978.2976))), 0.0, 1.0, cos(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)) - mat4x3(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-5.1)), float(0.0), bool(true)))) + 0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), (false ? _GLF_FUZZED(mat4(matrixCompMult(mat3x4(-6576.7280, -5156.2789, -8.5, -98.84, -0.5, -8.4, 9036.4767, -5721.8470, 6.3, -7.3, 9025.5611, -80.82), mat3x4(-5093.0405, -0.8, -4.5, -7.6, -930.584, 19.33, 7.5, -51.49, 8262.0173, 4.5, 5467.2978, 9.3)))) : _GLF_IDENTITY(mat4(1.0), (mat4(1.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-7.0)), bool(false))), 0.0, 0.0, _GLF_IDENTITY(0.0, float(mat3x2(0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(abs(1.0), max(_GLF_IDENTITY(abs(1.0), (abs(1.0)) / 1.0), abs(1.0)))))), _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0, 0.0)))), mat4(1.0), _GLF_struct_4(ivec4(1)), _GLF_struct_5(vec3(1.0), mat3x4(1.0)), true, _GLF_struct_6(mat4x2(1.0), bvec3(true), 1u, ivec4(1), bvec4(true), ivec2(1), vec2(1.0))), ivec3(1), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)) + _GLF_struct_replacement_22._f0._f2.subgroup_base, (workgroup_base + _GLF_struct_replacement_22._f0._f2.subgroup_base) ^ 0u) + subgroup_local_id, mat2x4(1.0), _GLF_struct_13(_GLF_struct_8(mat4(1.0), mat2(1.0), 1), _GLF_struct_9(1, vec2(1.0), mat2x4(1.0), true, mat4x3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), uvec4(1u)), _GLF_struct_10(ivec2(1), uvec2(1u), ivec3(1)), bvec4(_GLF_IDENTITY(true, ! (! (true)))), _GLF_struct_11(_GLF_IDENTITY(uvec4(1u), ~ (~ (_GLF_IDENTITY(uvec4(1u), (uvec4(1u)) | (uvec4(1u)))))), mat3x2(1.0), uvec4(1u), 1, 1, vec4(1.0), uvec2(1u)), mat3x2(1.0), _GLF_struct_12(vec3(1.0), mat3x2(_GLF_IDENTITY(1.0, (1.0) - 0.0)), mat4(1.0))), vec4(1.0));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, false, true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, false, true))), bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, false, true))), false, false, true)))))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 _GLF_struct_17 _GLF_struct_replacement_17 = _GLF_struct_17(_GLF_struct_16(_GLF_struct_15(uvec3(1u), workgroup_base + _GLF_struct_replacement_22._f0._f2.subgroup_base + ((subgroup_local_id + 1) % subgroup_size)), mat2x4(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(1649.4248)))), mat4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), (_GLF_IDENTITY(1.0, min(1.0, 1.0))) - 0.0)), vec2(1.0), 1.0), 1u, bvec2(true), _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) / mat2(1.0, 1.0, 1.0, 1.0)));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-554.327) : injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), false || (! (! (injectionSwitch.x > injectionSwitch.y))))))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint read = 0;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (! (! (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3(! (! (! (! (injectionSwitch.x > injectionSwitch.y)))), false, false)), _GLF_IDENTITY(bool(bvec2(bool(bvec3(! (! (! (! (injectionSwitch.x > injectionSwitch.y)))), false, false)), false)), (_GLF_IDENTITY(bool(bvec2(bool(bvec3(! (! (! (! (injectionSwitch.x > injectionSwitch.y)))), false, false)), false)), bool(bvec2(bool(bvec2(bool(bvec3(! (! (! (! (injectionSwitch.x > injectionSwitch.y)))), false, false)), false)), true)))) || false)))))))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (! (! (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3(! (! (! (! (injectionSwitch.x > injectionSwitch.y)))), false, false)), _GLF_IDENTITY(bool(bvec2(bool(bvec3(! (! (! (! (injectionSwitch.x > injectionSwitch.y)))), false, false)), false)), (_GLF_IDENTITY(bool(bvec2(bool(bvec3(! (! (! (! (injectionSwitch.x > injectionSwitch.y)))), false, false)), false)), bool(bvec2(bool(bvec2(bool(bvec3(! (! (! (! (injectionSwitch.x > injectionSwitch.y)))), false, false)), false)), true)))) || false)))))))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (! (! (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3(! (! (! (! (injectionSwitch.x > injectionSwitch.y)))), false, false)), _GLF_IDENTITY(bool(bvec2(bool(bvec3(! (! (! (! (injectionSwitch.x > injectionSwitch.y)))), false, false)), false)), (_GLF_IDENTITY(bool(bvec2(bool(bvec3(! (! (! (! (injectionSwitch.x > injectionSwitch.y)))), false, false)), false)), bool(bvec2(bool(bvec2(bool(bvec3(! (! (! (! (injectionSwitch.x > injectionSwitch.y)))), false, false)), false)), true)))) || false)))))))), true))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) || false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 atomicStore(buf[_GLF_struct_replacement_17._f0._f0.next_virtual_gid], uint(1), _GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), max(_GLF_IDENTITY(4, _GLF_IDENTITY(0 ^ (4), _GLF_IDENTITY((0 ^ (4)), ((0 ^ (4))) | ((0 ^ (4)))) / 1)), _GLF_IDENTITY(4, 0 ^ (4)))), 64, 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if((subgroup_local_id % 2) == 0)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   subgroupAll(false);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   read = atomicLoad(buf[_GLF_struct_replacement_14.virtual_gid], 4, 64, 2);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   subgroupAll(false);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, _GLF_IDENTITY(true, ! (! (true)))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, true)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.6)), float(injectionSwitch.y), bool(true)))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (false)), true)), bool(bvec4(bool(bvec2(_GLF_IDENTITY(false, true && (false)), true)), true, true, true))))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   read = atomicLoad(buf[_GLF_IDENTITY(_GLF_struct_replacement_14.virtual_gid, max(_GLF_struct_replacement_14.virtual_gid, _GLF_struct_replacement_14.virtual_gid))], _GLF_IDENTITY(4, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true) ? _GLF_FUZZED(clamp(24173, -94381, -29377)) : 4)), 64, 2);
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) / 1.0) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 subgroupBarrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ! (! ((false)))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(clamp(vec2(-76.45, 7.7), -963.443, -442.976)))).y)), bool(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), true, false)))) || false, ! (! ((_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(clamp(vec2(-76.45, 7.7), -963.443, -442.976)))).y)), bool(bvec3(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true, false)))) || false)))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))
  barrier();
 atomicStore(checker[_GLF_struct_replacement_14.virtual_gid], read, 4, 64, _GLF_IDENTITY(4, min(_GLF_IDENTITY(_GLF_IDENTITY(4, 1 * (4)), min(_GLF_IDENTITY(4, (4) | (4)), 4)), 4)));
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
