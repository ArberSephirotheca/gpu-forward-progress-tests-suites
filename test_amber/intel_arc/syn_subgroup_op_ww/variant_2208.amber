#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y)))) && true))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), _GLF_IDENTITY(bool(bvec2(bool(bvec3(false, false, false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2(bool(bvec3(false, false, false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec4(bvec3(false, _GLF_IDENTITY(true, true && (true)), false), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), true)))), _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, length(0.0)))), min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))))), (bool(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), true))), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec4(bvec3(false, _GLF_IDENTITY(true, true && (true)), false), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec4(bvec3(false, true, false), true)))), _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, length(0.0)))), min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))))) && true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0]))) / 1.0), injectionSwitch[1])).y))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))) && true))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), false || (! (false)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, true && (false)), false))))), bool(bvec4(! (! (false)), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) && true, (_GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, false))))), bool(bvec4(_GLF_IDENTITY(! (! (false)), bool(bvec4(_GLF_IDENTITY(! (! (false)), true && (! (! (false)))), false, true, false))), false, false, _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, true, false))), (injectionSwitch.x < injectionSwitch.y)))))))) && true, ((_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, false))))), bool(bvec4(! (! (false)), false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))) && true) || false)) && true)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) || false))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(0u, _GLF_IDENTITY((0u) * 1u, ((0u) * 1u) | 0u)), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) >> (1u ^ 1u))) / 1u), 0u) | (gl_WorkGroupID)).x;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, (true ? _GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (workgroup_id)), clamp(workgroup_id, workgroup_id, workgroup_id))) | (workgroup_id)) : _GLF_FUZZED(packHalf2x16(vec2(4325.2033, -2.3)))));
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) >> (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, (0u) | (0u))))))) ^ 0u)) * subgroup_size + _GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (subgroup_local_id), (~ _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) << _GLF_IDENTITY(0u, (0u) | 0u))) / 1u)));
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))) * subgroup_size, (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), (false ? _GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(num_workgroup), (bitfieldReverse(num_workgroup)) | (bitfieldReverse(num_workgroup)))) : _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u, (_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u) >> 0u)), (~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), _GLF_IDENTITY((subgroup_id), 0u ^ (_GLF_IDENTITY((subgroup_id), 0u ^ ((subgroup_id))))))) / 1u, (_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u) >> 0u))) | (~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u, (_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u) >> 0u))))))))) * subgroup_size) ^ 0u) + ((_GLF_IDENTITY(subgroup_local_id + 1, 1u * (subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)))) % subgroup_size), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))) * subgroup_size, (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), (false ? _GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(num_workgroup), (bitfieldReverse(num_workgroup)) | (bitfieldReverse(num_workgroup)))) : _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u, (_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u) >> 0u)), (~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), _GLF_IDENTITY((subgroup_id), 0u ^ (_GLF_IDENTITY((subgroup_id), 0u ^ ((subgroup_id))))))) / 1u, (_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u) >> 0u))) | (~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u, (_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u) >> 0u))))))))) * subgroup_size) ^ 0u) + ((_GLF_IDENTITY(subgroup_local_id + 1, 1u * (subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)))) % subgroup_size), clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))) * subgroup_size, (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), (false ? _GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(num_workgroup), (bitfieldReverse(num_workgroup)) | (bitfieldReverse(num_workgroup)))) : _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u, (_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u) >> 0u)), (~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), _GLF_IDENTITY((subgroup_id), 0u ^ (_GLF_IDENTITY((subgroup_id), 0u ^ ((subgroup_id))))))) / 1u, (_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u) >> 0u))) | (~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u, (_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u) >> 0u))))))))) * subgroup_size) ^ 0u) + ((_GLF_IDENTITY(subgroup_local_id + 1, 1u * (subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)))) % subgroup_size), (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))) * subgroup_size, (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), (false ? _GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(num_workgroup), (bitfieldReverse(num_workgroup)) | (bitfieldReverse(num_workgroup)))) : _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u, (_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u) >> 0u)), (~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), _GLF_IDENTITY((subgroup_id), 0u ^ (_GLF_IDENTITY((subgroup_id), 0u ^ ((subgroup_id))))))) / 1u, (_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u) >> 0u))) | (~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u, (_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u) >> 0u))))))))) * subgroup_size) ^ 0u) + ((_GLF_IDENTITY(subgroup_local_id + 1, 1u * (subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)))) % subgroup_size)) * 1u), _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))) * subgroup_size, (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), (false ? _GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(num_workgroup), (bitfieldReverse(num_workgroup)) | (bitfieldReverse(num_workgroup)))) : _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u, (_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u) >> 0u)), (~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), _GLF_IDENTITY((subgroup_id), 0u ^ (_GLF_IDENTITY((subgroup_id), 0u ^ ((subgroup_id))))))) / 1u, (_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u) >> 0u))) | (~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u, (_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u) >> 0u))))))))) * subgroup_size) ^ 0u) + ((_GLF_IDENTITY(subgroup_local_id + 1, 1u * (subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)))) % subgroup_size), _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))) * subgroup_size, (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), (false ? _GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(num_workgroup), (bitfieldReverse(num_workgroup)) | (bitfieldReverse(num_workgroup)))) : _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u, (_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u) >> 0u)), (~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), _GLF_IDENTITY((subgroup_id), 0u ^ (_GLF_IDENTITY((subgroup_id), 0u ^ ((subgroup_id))))))) / 1u, (_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u) >> 0u))) | (~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u, (_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u) >> 0u))))))))) * subgroup_size) ^ 0u) + ((_GLF_IDENTITY(subgroup_local_id + 1, 1u * (subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)))) % subgroup_size))), _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(bitfieldReverse(num_workgroup)) : _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))) * subgroup_size, (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), (false ? _GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(num_workgroup), (bitfieldReverse(num_workgroup)) | (bitfieldReverse(num_workgroup)))) : _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u, (_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u) >> 0u)), (~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), _GLF_IDENTITY((subgroup_id), 0u ^ (_GLF_IDENTITY((subgroup_id), 0u ^ ((subgroup_id))))))) / 1u, (_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u) >> 0u))) | (~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u, (_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ~ (~ ((subgroup_id)))), (subgroup_id))) / 1u) >> 0u))))))))) * subgroup_size) ^ 0u) + ((_GLF_IDENTITY(subgroup_local_id + 1, 1u * (subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)))) % subgroup_size)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, int(int(4))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, (_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + _GLF_IDENTITY(1, (1) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))))) < subgroup_size) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, false, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, false, true)), true, true, true)))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, false, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, false, true)), true, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false || (bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))), true)))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))))))), false, false, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, (false) || false))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), false || (bool(bvec2(true, false))))) && (false)), false, false, true)), true, _GLF_IDENTITY(true, (true) || false), true)))), (injectionSwitch.x > injectionSwitch.y))))))))))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, int(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) - 0), min(int(4), int(4))))), 64, _GLF_IDENTITY(4, 0 | (4)));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, true, true)), ! (! (bool(bvec4(_GLF_DEAD(false), false, true, true)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, true, true)), ! (! (bool(bvec4(_GLF_DEAD(false), false, true, true)))))), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, true, true)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_DEAD(false), false, true, true))), (! (bool(bvec4(_GLF_DEAD(false), false, true, true)))) || false))))) || false)), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, true, true)), ! (! (bool(bvec4(_GLF_DEAD(false), false, true, true)))))), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, true, true)), ! (! (bool(bvec4(_GLF_DEAD(false), false, true, true))))))) || false)), (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, true, true)), ! (! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false))), false, true, true)))))), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, true, true)), ! (! (bool(bvec4(_GLF_DEAD(false), false, true, true))))))) || false))) || false)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   subgroupAll(false);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 1.0, 0.0, 1.0, 1.0, 0.0))), 1.0, sin(0.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0))), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec4(0.0, 0.0, 1.0, 0.0), mix(vec4((vec4(0.0, 0.0, 1.0, 0.0))[0], _GLF_FUZZED(8289.2579), _GLF_FUZZED(0.6), _GLF_FUZZED(vec4(5.5, 253.330, -3.1, 3173.3616).t)), vec4(_GLF_FUZZED((-4.7 - 0.1)), (vec4(0.0, 0.0, 1.0, 0.0))[1], _GLF_IDENTITY((vec4(0.0, 0.0, 1.0, 0.0))[2], ((vec4(0.0, 0.0, 1.0, 0.0))[2]) + 0.0), (vec4(0.0, 0.0, 1.0, 0.0))[3]), bvec4(false, true, true, true))), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))) * (injectionSwitch.y))) / 1.0)))))
      barrier();
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), (bool(bvec2(_GLF_DEAD(false), true))) && true)))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(8.8), _GLF_FUZZED(_GLF_IDENTITY(-57.53, clamp(_GLF_IDENTITY(-57.53, mix(float(_GLF_FUZZED(-8823.0346)), float(-57.53), bool(true))), _GLF_IDENTITY(-57.53, _GLF_IDENTITY(_GLF_IDENTITY(float(mat3x4(-57.53, 0.0, sqrt(0.0), 0.0, 1.0, 1.0, sqrt(0.0), 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), dot(vec3(0.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(mat2(1.0, 1.0, 1.0, 1.0))), 1.0)), 1.0), vec3(1.0, 0.0, 0.0))), 1.0)), clamp(_GLF_IDENTITY(float(mat3x4(-57.53, 0.0, sqrt(0.0), 0.0, 1.0, 1.0, sqrt(0.0), 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), dot(vec3(0.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(mat2(1.0, 1.0, 1.0, 1.0))), 1.0)), 1.0), vec3(1.0, 0.0, 0.0))), 1.0)), (float(mat3x4(-57.53, 0.0, sqrt(0.0), 0.0, 1.0, 1.0, sqrt(0.0), 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), dot(vec3(0.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(mat2(1.0, 1.0, 1.0, 1.0))), 1.0)), 1.0), vec3(1.0, 0.0, 0.0))), 1.0))) - 0.0), float(mat3x4(-57.53, 0.0, sqrt(0.0), 0.0, 1.0, 1.0, sqrt(0.0), 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), dot(vec3(0.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(mat2(1.0, 1.0, 1.0, 1.0))), 1.0)), 1.0), vec3(1.0, 0.0, 0.0))), 1.0)), float(mat3x4(-57.53, 0.0, sqrt(0.0), 0.0, 1.0, 1.0, sqrt(0.0), 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), dot(vec3(0.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(mat2(1.0, 1.0, 1.0, 1.0))), 1.0)), 1.0), vec3(1.0, 0.0, 0.0))), 1.0)))), mix(float(float(mat3x4(-57.53, 0.0, sqrt(0.0), 0.0, 1.0, 1.0, sqrt(0.0), 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) - 0.0)) - 0.0), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-62.32)), float(1.0), bool(true))), 0.0, 0.0))), 1.0))), float(_GLF_FUZZED(7.5)), bool(false)))), -57.53)))), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(1, (false ? _GLF_FUZZED(3871) : 1))], mix(float(_GLF_FUZZED(7.1)), float((injectionSwitch)[_GLF_IDENTITY(1, (false ? _GLF_FUZZED(3871) : 1))]), bool(true))), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(1, (false ? _GLF_FUZZED(3871) : 1))], mix(float(_GLF_FUZZED(7.1)), float((injectionSwitch)[_GLF_IDENTITY(1, (false ? _GLF_FUZZED(3871) : 1))]), bool(true))), min(_GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(1, (false ? _GLF_FUZZED(3871) : 1))], mix(float(_GLF_FUZZED(7.1)), float((injectionSwitch)[_GLF_IDENTITY(1, (false ? _GLF_FUZZED(3871) : 1))]), bool(true))), _GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(1, (false ? _GLF_FUZZED(3871) : 1))], mix(float(_GLF_FUZZED(7.1)), float((injectionSwitch)[_GLF_IDENTITY(1, (false ? _GLF_FUZZED(3871) : 1))]), bool(true)))))) / 1.0)), bvec2(true, true))).x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) + vec2(0.0, 0.0))) - vec2(0.0, 0.0)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.3), _GLF_IDENTITY(_GLF_FUZZED(9.9), max(_GLF_FUZZED(9.9), _GLF_IDENTITY(_GLF_FUZZED(9.9), (_GLF_FUZZED(9.9)) * exp(0.0))))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y) && true)))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (false) && true))), (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)).x)), injectionSwitch.x)) > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(mix(float(injectionSwitch.y), float(_GLF_FUZZED(float(58521u))), bool(false)), (true ? mix(float(injectionSwitch.y), float(_GLF_FUZZED(_GLF_IDENTITY(float(58521u), float(mat4(float(58521u), 1.0, 1.0, 0.0, 1.0, tan(0.0), 1.0, 1.0, round(length(normalize(1.0))), 0.0, 1.0, tan(length(vec4(0.0, 0.0, 0.0, 0.0))), 0.0, 1.0, exp(0.0), _GLF_IDENTITY(dot(vec4(0.0, sin(0.0), 1.0, 0.0), vec4(0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0)), dot(vec4(0.0, sin(0.0), 1.0, 0.0), vec4(0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0)))))))), bool(false)) : _GLF_FUZZED(clamp(-62.29, 374.738, _GLF_IDENTITY(7322.0314, (false ? _GLF_FUZZED(-21.31) : _GLF_IDENTITY(7322.0314, (7322.0314) - 0.0)))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(float(58521u))), bool(false))), _GLF_ONE(1.0, injectionSwitch.y) * (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(float(58521u))), bool(false))))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(float(58521u))), bool(false))), _GLF_ONE(1.0, injectionSwitch.y) * (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(float(58521u))), bool(false))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(_GLF_IDENTITY(float(58521u), float(_GLF_IDENTITY(mat4x2(float(58521u), 1.0, length(vec3(0.0, 0.0, 0.0)), 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0), (mat4x2(float(58521u), 1.0, length(vec3(0.0, 0.0, 0.0)), 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0)) - mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), bool(false))), _GLF_ONE(1.0, injectionSwitch.y) * (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(float(58521u))), bool(false))))), float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(float(58521u))), bool(false))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(float(58521u))), bool(false)))) + 0.0), _GLF_ONE(1.0, injectionSwitch.y) * (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(float(58521u))), bool(false))))), 0.0, 0.0), (vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(float(58521u))), bool(false))), _GLF_ONE(1.0, injectionSwitch.y) * (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(float(58521u))), bool(false))))), 0.0, 0.0)) / vec3(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0)))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), float(_GLF_FUZZED(float(58521u))), bool(false))), float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), mix(float(injectionSwitch.y), float(_GLF_FUZZED(float(58521u))), bool(false))), 1.0, 1.0, 0.0, 1.0, 0.0)))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, false), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), true, false), false)))), ! (! (bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), bool(bvec3(_GLF_IDENTITY(true, bool(bool(true))), false, true)))) || false), false)))))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   atomicStore(buf[next_virtual_gid], uint(2), 4, _GLF_IDENTITY(64, _GLF_IDENTITY(0 | _GLF_IDENTITY((_GLF_IDENTITY(64, ~ (~ (64)))), ~ (~ ((_GLF_IDENTITY(64, ~ (~ (64))))))), (_GLF_IDENTITY(0 | _GLF_IDENTITY((_GLF_IDENTITY(64, ~ (~ (64)))), ~ (~ ((_GLF_IDENTITY(64, ~ (~ (64))))))), clamp(0 | _GLF_IDENTITY((_GLF_IDENTITY(64, ~ (~ (64)))), ~ (~ ((_GLF_IDENTITY(64, ~ (~ (64))))))), 0 | _GLF_IDENTITY((_GLF_IDENTITY(64, ~ (~ (64)))), ~ (~ ((_GLF_IDENTITY(64, ~ (~ (64))))))), 0 | _GLF_IDENTITY((_GLF_IDENTITY(64, ~ (~ (64)))), ~ (~ ((_GLF_IDENTITY(64, ~ (~ (64)))))))))) | (0 | _GLF_IDENTITY((_GLF_IDENTITY(64, ~ (~ (64)))), ~ (~ ((_GLF_IDENTITY(64, ~ (~ (64)))))))))), 4);
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   subgroupAll(true);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false))) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || (_GLF_IDENTITY(false, (false) || false))), (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), false, false)))) || false), (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))) && true)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, determinant(mat4(1.0, 0.0, 1.0, 1.0, 0.0, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0))))).x > injectionSwitch.y)))))) || false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(false || (_GLF_IDENTITY(false, bool(bool(false)))), (false || (_GLF_IDENTITY(false, bool(bool(false))))) || false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
