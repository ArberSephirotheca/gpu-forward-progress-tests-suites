#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) && true)); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | (0 >> _GLF_IDENTITY(int(1), int(1))))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            break;
          }
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, 0 + _GLF_IDENTITY((1), (_GLF_IDENTITY((1), (false ? _GLF_FUZZED(85705) : (1)))) | (_GLF_IDENTITY((1), min(_GLF_IDENTITY((1), min((1), (1))), _GLF_IDENTITY((1), ((1)) ^ 0)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))), bool(bvec4(bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bool(false)))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(sign(-2.8)))) < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(8.6), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2628.5450)), bvec2(true, false))).y)), false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)))))))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED((true ? -5.7 : 381.648)))) > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED((true ? -5.7 : 381.648)))) > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x, (true ? injectionSwitch.x : _GLF_FUZZED((true ? -5.7 : 381.648)))) > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, (false) && true), true)))))
                  continue;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  break;
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 return;
                }
              }
            }
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, true && (true)), false, true, true)), bool(bool(bool(bvec4(_GLF_IDENTITY(true, true && (true)), false, true, true))))))), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, true && (true)), false, true, true)), bool(bool(bool(bvec4(_GLF_IDENTITY(true, true && (true)), false, true, true))))))), bvec2(bvec3(bvec2(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, true && (true)), false, true, true)), bool(bool(bool(bvec4(_GLF_IDENTITY(true, true && (true)), false, true, true))))))), true))))))))))
                break;
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
              {
              }
             else
              {
               return;
               if(_GLF_DEAD(false))
                break;
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              continue;
             return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
               break;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
               do
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), max(vec2(0.0, 0.0), vec2(0.0, 0.0)))))).x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), max(_GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), ((injectionSwitch) - vec2(0.0, 0.0)) * vec2(1.0, 1.0)), _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), (true ? _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), min((injectionSwitch) - vec2(0.0, 0.0), (injectionSwitch) - vec2(0.0, 0.0))) : _GLF_FUZZED(injectionSwitch)))))), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) && true))));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      continue;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), (_GLF_DEAD(false)) && true))
      return;
     return;
    }
  }
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(_GLF_IDENTITY(int(0), max(int(0), int(0))), int(0))))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY(0 ^ (1), _GLF_IDENTITY(int(ivec4(0 ^ (1), 0, 0, 1)), (_GLF_IDENTITY(int(ivec4(0 ^ (1), 0, 0, 1)), (true ? int(ivec4(0 ^ (1), 0, 0, 1)) : _GLF_FUZZED(_injected_loop_counter)))) << 0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(int(3), int(3))), int(3))), false || (_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(int(3), int(3))), int(3))), false || (_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(int(3), int(3))), int(3)))))))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true)), ! (! (bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true))))))) || false))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.8)), bool(false))) > injectionSwitch.y), true && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.8)), bool(false))) > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.8)), bool(false))) > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.8)), bool(false))) > injectionSwitch.y)))) && true))))))
          return;
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(5725.4765), _GLF_FUZZED(-8.0)), bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) / 1.0)))) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 0.0, 1.0, 1.0))))).y)), false))))).x > injectionSwitch.y))))
        return;
      }
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), bool(bvec3(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), true, true)))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) || false))
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (false ? _GLF_FUZZED((~ num_workgroup)) : workgroup_size)) * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)) + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1) % subgroup_size, (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), (max(subgroup_local_id, subgroup_local_id)) | (max(subgroup_local_id, subgroup_local_id)))) + 1), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), (max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u))) | (max(subgroup_local_id, subgroup_local_id)))) + 1), 0u | ((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), (max(subgroup_local_id, subgroup_local_id)) | (max(subgroup_local_id, subgroup_local_id)))) + 1)))) ^ (0u << _GLF_IDENTITY(uint(0u), uint(0u)))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)) | 0u)), min(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1) % subgroup_size), (((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1, 1u * (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1, (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1) << (0u << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (_GLF_IDENTITY(3u, (true ? 3u : _GLF_FUZZED(workgroup_base)))) * 1u)), _GLF_IDENTITY(uint(3u), (uint(3u)) | 0u)))))), min(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1, ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1) : _GLF_FUZZED(num_workgroup))), max(~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1), ~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) | 0u) + 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), 0u ^ (max(subgroup_local_id, subgroup_local_id)))) + 1), uint(_GLF_IDENTITY(uvec3(~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1), _GLF_IDENTITY(0u, 0u ^ (0u)), ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) ^ 0u)) >> _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(_GLF_IDENTITY(7u, uint(uint(7u)))), ~ (~ (uint(7u))))))), (uvec3(~ (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + 1), 0u, ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), ~ (~ (uint(7u)))))))) << uvec3(0u, 0u, 0u))))) << 0u)))))) % subgroup_size)) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size), max(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size), min(workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size), workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size))), workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size))), clamp(workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size, ~ (~ ((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size)))), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id)))) << (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))))) + 1) % subgroup_size), 1u * (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size), ~ (~ (workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size)))))), workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size))), 0u | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size), clamp(workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size, ~ (~ ((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size, ~ (~ ((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size, ~ (~ ((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size, ~ (~ ((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size)))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size, ~ (~ ((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size)))))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size, ~ (~ ((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size, ~ (~ ((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size, ~ (~ ((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size, ~ (~ ((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size)))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size, ~ (~ ((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size))))))))), 0u + (~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size, ~ (~ ((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size))))))))), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size), 1u * (workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), subgroup_local_id)) + 1) % subgroup_size))), workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(subgroup_size))) + ((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))), subgroup_local_id)) + 1) % subgroup_size)))))));
 atomicStore(buf[virtual_gid], uint(_GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_IDENTITY((1), (_GLF_IDENTITY((1), min((1), (1)))) / 1)) >> 0) | 0)), 4, _GLF_IDENTITY(64, (64) | 0), _GLF_IDENTITY(4, max(4, 4)));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))), _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), (min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) - 0.0, _GLF_IDENTITY(float(mat2x3((injectionSwitch.x) - 0.0, 0.0, 0.0, 0.0, tan(0.0), 1.0)), mix(float(float(mat2x3((injectionSwitch.x) - 0.0, 0.0, 0.0, 0.0, tan(0.0), 1.0))), float(_GLF_FUZZED(-1.5)), bool(false))))))) / 1.0)), float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))), _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), (min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) - 0.0, _GLF_IDENTITY(float(mat2x3((injectionSwitch.x) - 0.0, 0.0, 0.0, 0.0, tan(0.0), 1.0)), mix(float(float(mat2x3((injectionSwitch.x) - 0.0, 0.0, 0.0, 0.0, tan(0.0), 1.0))), float(_GLF_FUZZED(-1.5)), bool(false))))))) / 1.0)), 0.0, 0.0, 0.0, 1.0, 1.0))), injectionSwitch.x)), injectionSwitch.x))))); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
    {
     if(_GLF_DEAD(false))
      continue;
     continue;
    }
   if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1))) | (subgroup_local_id + 1)), 0u + (_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)), (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1))) >> 0u)) | (subgroup_local_id + 1)))) < _GLF_IDENTITY(subgroup_size, uint(uvec4(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(subgroup_size, 0u, 0u), (uvec3(subgroup_size, 0u, 0u)) + uvec3(0u, 0u, 0u)), (uvec3(subgroup_size, 0u, 0u)) - uvec3(0u, 0u, 0u)))), uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED(1.2)), float(_GLF_ONE(1.0, injectionSwitch.y)), bool(true)))), uint(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x2(1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, abs(1.0))), min(float(mat3x2(1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, abs(1.0))), _GLF_IDENTITY(float(mat3x2(1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, abs(1.0))), float(vec2(float(mat3x2(1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, abs(1.0))), 1.0)))))), injectionSwitch.y)), 0u))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = ((1 & 1) & (0 | 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
        {
         atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(2, (2) | (2)), 2))), 4, 64, 4);
        }
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       continue;
      }
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(8))); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), clamp(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, int(int(2))), 2, 2)))), min(1 << _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), ~ (~ (1 << _GLF_IDENTITY(int(2), int(2))))))), 1 << _GLF_IDENTITY(int(2), int(2)), 1 << _GLF_IDENTITY(int(2), int(2))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, ~ (~ (2)))), int(_GLF_IDENTITY(2, (2) | (2)))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), clamp(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, int(int(2))), 2, 2)))), min(1 << _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), ~ (~ (1 << _GLF_IDENTITY(int(2), int(2))))))), 1 << _GLF_IDENTITY(int(2), int(2)), 1 << _GLF_IDENTITY(int(2), int(2))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, ~ (~ (2)))), int(_GLF_IDENTITY(2, (2) | (2)))))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), clamp(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, int(int(2))), 2, 2)))), min(1 << _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), ~ (~ (1 << _GLF_IDENTITY(int(2), int(2))))))), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, 0 ^ (2))), _GLF_IDENTITY(int(int(int(_GLF_IDENTITY(2, 0 ^ (2))))), max(int(int(int(_GLF_IDENTITY(2, 0 ^ (2))))), int(int(int(_GLF_IDENTITY(2, 0 ^ (2)))))))), int(2)), 1 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, 1 * (2))), int(2))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, ~ (~ (2)))), int(_GLF_IDENTITY(2, (2) | (2))))))))) && true), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, clamp(2, 2, 2))))) >> _GLF_IDENTITY(int(2), int(2))))))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((13.82)), _GLF_FUZZED(6.8)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], mix(float(_GLF_FUZZED(-868.102)), float(_GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec4(_GLF_IDENTITY((injectionSwitch), vec2(mat4x2((injectionSwitch), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0))), 1.0, exp(sqrt(0.0))), (true ? _GLF_IDENTITY(vec4(_GLF_IDENTITY((injectionSwitch), vec2(mat4x2((injectionSwitch), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0))), 1.0, exp(sqrt(0.0))), min(vec4(_GLF_IDENTITY((injectionSwitch), vec2(mat4x2((injectionSwitch), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0))), 1.0, exp(sqrt(0.0))), vec4(_GLF_IDENTITY((injectionSwitch), vec2(mat4x2((injectionSwitch), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0))), 1.0, exp(sqrt(0.0))))) : _GLF_FUZZED(vec4(-836.768, -964.965, 9.8, -644.991))))))[1]), bool(true)))), bvec2(true, true))).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((13.82)), _GLF_FUZZED(6.8)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], mix(float(_GLF_FUZZED(-868.102)), float(_GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec4(_GLF_IDENTITY((injectionSwitch), vec2(mat4x2((injectionSwitch), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0))), 1.0, exp(sqrt(0.0))), (true ? _GLF_IDENTITY(vec4(_GLF_IDENTITY((injectionSwitch), vec2(mat4x2((injectionSwitch), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0))), 1.0, exp(sqrt(0.0))), min(vec4(_GLF_IDENTITY((injectionSwitch), vec2(mat4x2((injectionSwitch), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0))), 1.0, exp(sqrt(0.0))), vec4(_GLF_IDENTITY((injectionSwitch), vec2(mat4x2((injectionSwitch), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0))), 1.0, exp(sqrt(0.0))))) : _GLF_FUZZED(vec4(-836.768, -964.965, 9.8, -644.991))))))[1]), bool(true)))), bvec2(true, true))).y))))))
          break;
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             do
              {
               do
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false)))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(atanh(injectionSwitch)) : _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(5.5)), vec2(_GLF_FUZZED(-4.2), (injectionSwitch)[1]), bvec2(false, true)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : (false ? _GLF_FUZZED(atanh(injectionSwitch)) : _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(5.5)), vec2(_GLF_FUZZED(-4.2), (injectionSwitch)[1]), bvec2(false, true)))))))[0], injectionSwitch[1])).y, max(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), injectionSwitch.y))))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)))))
                  break;
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       continue;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))), (! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))) && true)))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)))[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(11.00)), vec2(_GLF_FUZZED(-9318.5714), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec4(injectionSwitch.x, 1.0, 0.0, 1.0)), (false ? _GLF_FUZZED(-14.93) : _GLF_IDENTITY(_GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), sqrt(1.0), cos(0.0)))).x, 1.0, 0.0, 1.0)), (true ? _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), sqrt(1.0), cos(0.0)))).x, 1.0, 0.0, 1.0)), max(float(vec4(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), sqrt(1.0), cos(0.0)))).x, 1.0, 0.0, 1.0)), float(vec4(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), sqrt(1.0), cos(0.0)))).x, 1.0, 0.0, 1.0)))) : _GLF_FUZZED(1812.3787))), float(mat3x2(float(vec4(injectionSwitch.x, 1.0, 0.0, 1.0)), 0.0, 1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(smoothstep(9.5, 648.780, 759.207)) : _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-52.57) : 1.0)))), 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))))) < injectionSwitch.y))))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(8.6, -686.291)), min(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(8.6, -686.291)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(8.6, -686.291)))))).y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(8.6, -686.291)), min(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(8.6, -686.291)), _GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(8.6, -686.291)))))).y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1.0)), bool(false))))), 0.0)), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)))) && true))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                  continue;
                 return;
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))));
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
            break;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, true)))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
              }
            }
          }
         else
          {
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false))))) || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) || false), (injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), true))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))), bool(bvec4(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true, true))))), ! (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true, true))))))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), (mat2x4(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0)) + mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (float(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-597.014)), vec2(_GLF_FUZZED(1.4), (injectionSwitch)[1]), bvec2(false, true))).x, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), (mat2x4(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0)) + mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) + 0.0)) > injectionSwitch.y))), ! (_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))), false, true, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (! (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED((-5.7 - 96.65))), bool(false))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(3.6), _GLF_FUZZED(6.7)), bvec2(false, false))).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED((-5.7 - 96.65))), bool(false))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(3.6), _GLF_FUZZED(6.7)), bvec2(false, false))).x > injectionSwitch.y)) || false)))), bool(bvec4(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true, true))))), ! (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true, true)), true && (_GLF_IDENTITY(bool(bvec4(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true, true)), (bool(bvec4(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true, true))) || false)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true, true)), true && (_GLF_IDENTITY(bool(bvec4(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true, true)), (bool(bvec4(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true, true))) || false)))), ! (! (_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true, true)), true && (_GLF_IDENTITY(bool(bvec4(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(false, (false) && true), true, true)), (bool(bvec4(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true, true))) || _GLF_IDENTITY(false, ! (! (false))))))))))))))))))))) || false))))
      {
       if(_GLF_DEAD(false))
        break;
       break;
      }
     subgroupAll(false);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         break;
        }
       return;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      continue;
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_IDENTITY(false, ! (! (false)))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = (_GLF_IDENTITY(1 & 1, _GLF_IDENTITY((1 & 1) ^ 0, ((1 & 1) ^ 0) | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 | 0) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) - 0), (0 >> _GLF_IDENTITY(int(2), int(2))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) - 0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) - 0)), 0 | (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) - 0)))))))))); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, ~ (~ (_GLF_IDENTITY(5, min(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(_injected_loop_counter))), 5)))))), int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, int(ivec3(_GLF_IDENTITY(5, 0 ^ (5)), 1, 0)))))))) >> _GLF_IDENTITY(int(5), int(5))), clamp(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), _GLF_IDENTITY(int(5), int(_GLF_ONE(1.0, injectionSwitch.y)) * (int(5))))), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, 0 ^ (5))))), int(_GLF_IDENTITY(5, _GLF_IDENTITY(0 | (5), min(0 | (5), _GLF_IDENTITY(0 | (5), (0 | (5)) / 1)))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) - 0)), int(_GLF_IDENTITY(5, 0 | (5))))) + 0)), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY((_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), (int(5)) | 0)) - 0)), min(_GLF_IDENTITY((_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), (int(5)) | 0)) - 0)), ((_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), (int(5)) | 0)) - 0))) >> 0), (_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), (int(5)) | 0)) - 0)))) - int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(-2.3) : injectionSwitch.x, sqrt(0.0) + (false ? _GLF_FUZZED(-2.3) : injectionSwitch.x))), mix(float(_GLF_FUZZED(-3.9)), float((_GLF_IDENTITY(false ? _GLF_FUZZED(-2.3) : injectionSwitch.x, sqrt(0.0) + (false ? _GLF_FUZZED(-2.3) : injectionSwitch.x)))), bool(true))))))), int(5))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) - 0)))) | _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)), max((_GLF_IDENTITY(1, (1) / 1)), _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)), int(int((_GLF_IDENTITY(1, (1) / 1)))))))), _GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, 1 * (_GLF_IDENTITY((1) - 0, ~ (~ ((1) - 0))))))))) | (_GLF_IDENTITY(1, (1) / 1)))) | (_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) - 0)))), ((_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) - 0))))) ^ 0) | (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (1) / 1)))), max((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, 1 * (_GLF_IDENTITY((1) - 0, ~ (~ ((1) - 0))))))))) | (_GLF_IDENTITY(1, (1) / 1)))) | (_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) - 0)))), ((_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) - 0))))) ^ 0) | (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (1) / 1)))), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, 1 * (_GLF_IDENTITY((1) - 0, ~ (~ ((1) - 0))))))))) | (_GLF_IDENTITY(1, (1) / 1)))) | (_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) - 0)))), ((_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) - 0))))) ^ 0) | (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (1) / 1))))))) << _GLF_IDENTITY(int(5), int(5))), max((_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) - 0)))) | _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)), max((_GLF_IDENTITY(1, (1) / 1)), _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)), int(int((_GLF_IDENTITY(1, (1) / 1)))))))), _GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, 1 * (_GLF_IDENTITY((1) - 0, ~ (~ ((1) - 0))))))))) | (_GLF_IDENTITY(1, (1) / 1)))) | (_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) - 0)))), ((_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) - 0))))) ^ 0) | (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (1) / 1)))), max((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, 1 * (_GLF_IDENTITY((1) - 0, ~ (~ ((1) - 0))))))))) | (_GLF_IDENTITY(1, (1) / 1)))) | (_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) - 0)))), ((_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) - 0))))) ^ 0) | (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (1) / 1)))), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, 1 * (_GLF_IDENTITY((1) - 0, ~ (~ ((1) - 0))))))))) | (_GLF_IDENTITY(1, (1) / 1)))) | (_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) - 0)))), ((_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) - 0))))) ^ 0) | (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (1) / 1))))))) << _GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) - 0)))) | _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)), max((_GLF_IDENTITY(1, (1) / 1)), _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)), int(int((_GLF_IDENTITY(1, (1) / 1)))))))), _GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, 1 * (_GLF_IDENTITY((1) - 0, ~ (~ ((1) - 0))))))))) | (_GLF_IDENTITY(1, (1) / 1)))) | (_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) - 0)))), ((_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) - 0))))) ^ 0) | (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (1) / 1)))), max((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, 1 * (_GLF_IDENTITY((1) - 0, ~ (~ ((1) - 0))))))))) | (_GLF_IDENTITY(1, (1) / 1)))) | (_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) - 0)))), ((_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) - 0))))) ^ 0) | (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (1) / 1)))), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, 1 * (_GLF_IDENTITY((1) - 0, ~ (~ ((1) - 0))))))))) | (_GLF_IDENTITY(1, (1) / 1)))) | (_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) - 0)))), ((_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) - 0))))) ^ 0) | (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (1) / 1))))))) << _GLF_IDENTITY(int(5), int(5))), max((_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) - 0)))) | _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)), max((_GLF_IDENTITY(1, (1) / 1)), _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)), int(int((_GLF_IDENTITY(1, (1) / 1)))))))), _GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, 1 * (_GLF_IDENTITY((1) - 0, ~ (~ ((1) - 0))))))))) | (_GLF_IDENTITY(1, (1) / 1)))) | (_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) - 0)))), ((_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) - 0))))) ^ 0) | (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (1) / 1)))), max((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, 1 * (_GLF_IDENTITY((1) - 0, ~ (~ ((1) - 0))))))))) | (_GLF_IDENTITY(1, (1) / 1)))) | (_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) - 0)))), ((_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) - 0))))) ^ 0) | (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (1) / 1)))), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, 1 * (_GLF_IDENTITY((1) - 0, ~ (~ ((1) - 0))))))))) | (_GLF_IDENTITY(1, (1) / 1)))) | (_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) - 0)))), ((_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) - 0))))) ^ 0) | (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (1) / 1))))))) << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) - 0)))) | _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)), max((_GLF_IDENTITY(1, (1) / 1)), _GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)), int(int((_GLF_IDENTITY(1, (1) / 1)))))))), _GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, 1 * (_GLF_IDENTITY((1) - 0, ~ (~ ((1) - 0))))))))) | (_GLF_IDENTITY(1, (1) / 1)))) | (_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) - 0)))), ((_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) - 0))))) ^ 0) | (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (1) / 1)))), max((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, 1 * (_GLF_IDENTITY((1) - 0, ~ (~ ((1) - 0))))))))) | (_GLF_IDENTITY(1, (1) / 1)))) | (_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) - 0)))), ((_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) - 0))))) ^ 0) | (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (1) / 1)))), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, _GLF_IDENTITY((1) - 0, 1 * (_GLF_IDENTITY((1) - 0, ~ (~ ((1) - 0))))))))) | (_GLF_IDENTITY(1, (1) / 1)))) | (_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) - 0)))), ((_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) - 0))))) ^ 0) | (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (1) / 1))))))) << _GLF_IDENTITY(int(5), int(5))))))) >> _GLF_IDENTITY(int(5), int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                }
               else
                {
                 do
                  {
                   atomicStore(buf[next_virtual_gid], uint(2), 4, _GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY((64), int(_GLF_ZERO(0.0, injectionSwitch.x)) + _GLF_IDENTITY(((64)), (((64))) / 1)) << 0), (true ? _GLF_IDENTITY(64, (64) | (64)) : _GLF_FUZZED(52240))), 4);
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.8), _GLF_IDENTITY((injectionSwitch)[1], mix(float(_GLF_FUZZED(8.3)), float((injectionSwitch)[1]), bool(true)))), vec2((injectionSwitch)[0], _GLF_FUZZED(-668.188)), bvec2(true, false))).x, 1.0))) > injectionSwitch.y))));
                }
               if(_GLF_DEAD(false))
                continue;
              }
            }
          }
         else
          {
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), false || ((injectionSwitch.x > injectionSwitch.y))))))
        break;
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))))));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         subgroupAll(_GLF_IDENTITY(true, _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), (! (_GLF_IDENTITY(true, true && (true)))) && true)), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), (! (_GLF_IDENTITY(true, true && (true)))) && true))) || false)));
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       continue;
      }
    }
   if(_GLF_DEAD(false))
    break;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((66.90))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))).y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
