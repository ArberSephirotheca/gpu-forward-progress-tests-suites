#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_8 {
 mat4x3 _f0;
} ;

struct _GLF_struct_7 {
 vec4 _f0;
 mat2 _f1;
 vec4 _f2;
 bvec4 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_6 {
 mat3x4 _f0;
 float _f1;
 mat2 _f2;
 ivec2 _f3;
 mat2x4 _f4;
 uint _f5;
 mat2x4 _f6;
} ;

struct _GLF_struct_9 {
 mat2 _f0;
 mat4x3 _f1;
 _GLF_struct_6 _f2;
 _GLF_struct_7 _f3;
 _GLF_struct_8 _f4;
} ;

struct _GLF_struct_4 {
 bvec4 _f0;
 vec4 _f1;
 uint _f2;
 vec3 _f3;
 float _f4;
} ;

struct _GLF_struct_3 {
 uvec2 _f0;
 bvec2 _f1;
 mat3 _f2;
 mat2 _f3;
 mat3x2 _f4;
 bvec3 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_2 {
 bvec2 _f0;
} ;

struct _GLF_struct_5 {
 _GLF_struct_2 _f0;
 _GLF_struct_3 _f1;
 bvec3 _f2;
 _GLF_struct_4 _f3;
} ;

struct _GLF_struct_0 {
 mat4x2 _f0;
 float _f1;
 int _f2;
 bvec3 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 bool _f1;
 uvec2 _f2;
 vec3 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_10 {
 _GLF_struct_1 _f0;
 bvec4 _f1;
 uvec3 _f2;
 _GLF_struct_5 _f3;
 uint workgroup_base;
 int _f4;
 _GLF_struct_9 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, mix(float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x), float(_GLF_FUZZED((8296.5357))), bool(false))) > injectionSwitch.y))), _GLF_IDENTITY(false || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))))), bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))))), true, false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), clamp(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) * mat2(1.0)), mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).y)))), (false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))))), bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))), bvec2(bvec2(bvec2(false, false)))))))), true, false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)), (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), bvec2(bvec3(bvec2(bvec2(bvec2(false, false))), false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))))), bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))), bvec2(bvec2(bvec2(false, false)))))))), true, false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))) || false)))) && true)))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) * 1u);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | (_GLF_IDENTITY(int(1), 0 ^ (int(1))))), (false ? _GLF_FUZZED(89730) : int(1)))))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2x4(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0), _GLF_IDENTITY(mat2x4(_GLF_IDENTITY(mat4(mat2x4(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0)), (mat4(mat2x4(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), transpose(transpose(mat2x4(_GLF_IDENTITY(mat4(mat2x4(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0)), (mat4(mat2x4(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))))))))), true && (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, 0.0, abs(0.0), 1.0, 1.0, exp(0.0), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-571.879)), bool(false)))))).x, mix(float(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(abs(0.0), clamp(abs(0.0), abs(0.0), abs(0.0))), 1.0, 1.0, exp(0.0), _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-56.54) : 0.0))), float(_GLF_FUZZED(-571.879)), bool(false)))))).x), float(_GLF_FUZZED(_GLF_IDENTITY(-1.9, (false ? _GLF_FUZZED(4.5) : -1.9)))), bool(false))) > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0))), max((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0))), (1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(30840) : int(3))), (int(3)) << 0))), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(int(7), int(7))) >> 0), _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(int(7), int(7))) << 0))))))); _injected_loop_counter --)
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
              return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true)))))), ! (! (! (! _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(false, true && (false)), true)))))), ! (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))
            break;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), false || (bool(bvec2(_GLF_DEAD(false), false))))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true)))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) && true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) != 1, ! (! (_injected_loop_counter != _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(1, (1) * 1))))))); _injected_loop_counter ++)
            {
             return;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))
              break;
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   return;
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(_GLF_struct_1(_GLF_struct_0(mat4x2(1.0), 1.0, 1, bvec3(true), mat2x4(1.0)), true, uvec2(1u), _GLF_IDENTITY(vec3(1.0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(vec3(1.0), mat3(_GLF_IDENTITY(1.0, float(mat2x4(1.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, sin(0.0))))) * (vec3(1.0))), clamp(vec3(1.0), vec3(1.0), vec3(1.0))) : _GLF_FUZZED(vec3(-0.2, -8.1, 9685.7105)))), mat4x2(1.0)), bvec4(true), uvec3(1u), _GLF_struct_5(_GLF_struct_2(bvec2(true)), _GLF_struct_3(uvec2(1u), bvec2(true), mat3(1.0), mat2(1.0), mat3x2(1.0), bvec3(true), ivec2(1)), bvec3(true), _GLF_struct_4(bvec4(true), vec4(1.0), _GLF_IDENTITY(1u, ~ (~ (1u))), vec3(1.0), 1.0)), _GLF_IDENTITY(workgroup_size * workgroup_id, max(workgroup_size * workgroup_id, workgroup_size * workgroup_id)), _GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) >> 0)), min((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) >> 0)), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) >> 0)))))), _GLF_struct_9(mat2(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0))), mat4x3(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-4608.8127)))))), _GLF_struct_6(mat3x4(1.0), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-166.103)), float(1.0), bool(true))), mat2(1.0), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), clamp(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), ivec2(1), _GLF_IDENTITY(ivec2(1), (false ? _GLF_FUZZED(ivec2(-9675, -2098)) : ivec2(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(34441) : _GLF_IDENTITY(1, 0 + (1))))))))), ivec2(1), ivec2(1))), (ivec2(1)) | ivec2(0, 0)), mat2x4(1.0), 1u, mat2x4(1.0)), _GLF_struct_7(vec4(1.0), mat2(1.0), _GLF_IDENTITY(vec4(_GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(8.2)))) * 1.0), (1.0) * 1.0) : _GLF_FUZZED(-62.98)))) * _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-0.6))), max(_GLF_IDENTITY((_GLF_IDENTITY(1.0, min(1.0, 1.0))) * _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-0.6))), ((1.0) * _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-0.6)))) * 1.0), _GLF_IDENTITY((1.0) * _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-0.6))), _GLF_IDENTITY(max((1.0) * _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-0.6))), (1.0) * _GLF_IDENTITY(1.0, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), ! (! (! (_GLF_IDENTITY(true, (true) || false))))))) ? 1.0 : _GLF_FUZZED(-0.6)))), _GLF_IDENTITY((false ? _GLF_FUZZED(abs(dot(vec3(9246.9173, -11.01, -5.9), vec3(9.3, 2461.5443, 27.07)))) : _GLF_IDENTITY(max((1.0) * _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-0.6))), (1.0) * _GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), ! (! (! (_GLF_IDENTITY(true, (true) || false))))))), bool(bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), ! (! (! (_GLF_IDENTITY(true, (true) || false)))))))))) ? 1.0 : _GLF_FUZZED(-0.6)))), (false ? _GLF_FUZZED(4220.9443) : max((1.0) * _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-0.6))), (1.0) * _GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), ! (! (! (_GLF_IDENTITY(true, (true) || false))))))), bool(bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), ! (! (! (_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, bool(bvec2(false, false))))))))))))))) ? 1.0 : _GLF_FUZZED(-0.6))))))), ((false ? _GLF_FUZZED(abs(dot(vec3(9246.9173, -11.01, -5.9), vec3(9.3, 2461.5443, 27.07)))) : _GLF_IDENTITY(max((1.0) * _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-0.6))), (1.0) * _GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), ! (! (! (_GLF_IDENTITY(true, (true) || false))))))), bool(bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), ! (! (! (_GLF_IDENTITY(true, (true) || false)))))))))) ? 1.0 : _GLF_FUZZED(-0.6)))), (false ? _GLF_FUZZED(4220.9443) : max((1.0) * _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-0.6))), (1.0) * _GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), ! (! (! (_GLF_IDENTITY(true, (true) || false))))))), bool(bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), ! (! (! (_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, bool(bvec2(false, false))))))))))))))) ? 1.0 : _GLF_FUZZED(-0.6)))))))) * 1.0))))))), _GLF_IDENTITY(mat4(1.0) * (vec4(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) * _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-0.6))), max(_GLF_IDENTITY((1.0) * _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-0.6))), ((1.0) * _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-0.6)))) * 1.0), _GLF_IDENTITY(_GLF_IDENTITY((1.0) * _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-0.6))), max((1.0) * _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-0.6))), (1.0) * _GLF_IDENTITY(1.0, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), ! (! (! (_GLF_IDENTITY(true, (true) || false))))))) ? 1.0 : _GLF_FUZZED(-0.6))))), mix(float(_GLF_FUZZED(-4565.6689)), float(_GLF_IDENTITY((1.0) * _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-0.6))), max((1.0) * _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-0.6))), (1.0) * _GLF_IDENTITY(1.0, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), ! (! (! (_GLF_IDENTITY(true, (true) || false))))))) ? 1.0 : _GLF_FUZZED(-0.6)))))), bool(true)))))))), (_GLF_IDENTITY(mat4(1.0), transpose(transpose(_GLF_IDENTITY(mat4(1.0), transpose(transpose(mat4(1.0))))))) * (vec4(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) * _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-0.6))), max(_GLF_IDENTITY((1.0) * _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-9.8) : 1.0)))) : _GLF_FUZZED(-0.6))), _GLF_IDENTITY(((1.0) * _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-0.6)))) * 1.0, mix(float(_GLF_FUZZED(4.3)), float(((1.0) * _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-0.6)))) * 1.0), bool(true)))), _GLF_IDENTITY(_GLF_IDENTITY((1.0) * _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-0.6))), mix(float((1.0) * _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-0.6)))), float(_GLF_FUZZED((true ? vec4(-3.9, 98.60, -98.49, 11.85) : _GLF_IDENTITY(vec4(59.59, 5635.2718, 2.3, -690.621), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? vec4(59.59, 5635.2718, 2.3, -690.621) : _GLF_FUZZED(vec4(-527.576, 389.143, 690.647, -3120.5697))))).w)), bool(false))), max((1.0) * _GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_IDENTITY(true ? 1.0 : _GLF_FUZZED(-0.6), (true ? true ? 1.0 : _GLF_FUZZED(-0.6) : _GLF_FUZZED(-686.139))), (true ? 1.0 : _GLF_FUZZED(-0.6)) - 0.0))), (_GLF_IDENTITY(1.0, float(vec4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec2(1.0, 0.0)), (false ? _GLF_FUZZED(-310.086) : float(vec2(1.0, 0.0))))), 1.0, 1.0, sqrt(1.0))))) * _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-9.5)), float(1.0), bool(true))), (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), ! (! (! (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))) || false))))))) ? 1.0 : _GLF_FUZZED(-0.6), max(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), ! (! (! (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))) || false))))))) ? 1.0 : _GLF_FUZZED(-0.6), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), ! (! (! (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))) || false))))))) ? 1.0 : _GLF_FUZZED(-0.6))))))))))))) / vec4(1.0, 1.0, 1.0, 1.0))), bvec4(true), ivec2(1)), _GLF_struct_8(mat4x3(1.0))));
 uint virtual_gid = _GLF_struct_replacement_10.workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u | (subgroup_local_id), (0u | (subgroup_local_id)) >> 0u)), (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))) >> 0u);
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(0u ^ (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size, ~ (~ (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u)))), (uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u))))) | _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u)))), (uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u))))) | (uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u))))))), (_GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u)))), (uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u))))) | (uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u))))))), ((_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u)))), (uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u))))) | (uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u)))))))) - (184688u & 0u))) / 1u))), clamp(_GLF_struct_replacement_10.workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u)))), (uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u))))) | _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u)))), (uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u))))) | (uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u))))))), (_GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u)))), (uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u))))) | (uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u))))))), ((_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u)))), (uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u))))) | (uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u)))))))) - (184688u & 0u))) / 1u))), _GLF_struct_replacement_10.workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u)))), (uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u))))) | _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u)))), (uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u))))) | (uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u))))))), (_GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u)))), (uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u))))) | (uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u))))))), ((_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u)))), (uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u))))) | (uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u)))))))) - (184688u & 0u))) / 1u))), _GLF_struct_replacement_10.workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u)))), (uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u))))) | _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u)))), (uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u))))) | (uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u))))))), (_GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u)))), (uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u))))) | (uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u))))))), ((_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u)))), (uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u))))) | (uint(_GLF_IDENTITY(uint(subgroup_id * subgroup_size), uint(uvec3(uint(subgroup_id * subgroup_size), 1u, 1u)))))))) - (184688u & 0u))) / 1u))))))))), min(_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base + subgroup_id * subgroup_size, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, (_GLF_struct_replacement_10.workgroup_base) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((subgroup_id * subgroup_size) | (subgroup_id * subgroup_size), max((subgroup_id * subgroup_size) | (subgroup_id * subgroup_size), (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)))))), (0u ^ 0u) ^ ((~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base)), (_GLF_struct_replacement_10.workgroup_base) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, uint(uint(subgroup_id * subgroup_size)))) | (subgroup_id * subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base)), (_GLF_struct_replacement_10.workgroup_base) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, uint(uint(subgroup_id * subgroup_size)))) | (subgroup_id * subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base)), (_GLF_struct_replacement_10.workgroup_base) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, uint(uint(subgroup_id * subgroup_size)))) | (subgroup_id * subgroup_size)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base)), (_GLF_struct_replacement_10.workgroup_base) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, uint(uint(subgroup_id * subgroup_size)))) | (subgroup_id * subgroup_size)) : _GLF_FUZZED(107202u)))) + 0u)) | 0u))))))), max(_GLF_IDENTITY(0u ^ (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base + subgroup_id * subgroup_size, ~ (~ (_GLF_struct_replacement_10.workgroup_base + subgroup_id * subgroup_size)))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(1537.3169) : injectionSwitch.y)))))) ? _GLF_FUZZED(uint(false)) : _GLF_IDENTITY(0u, min(0u, 0u)) ^ (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), ~ (~ (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u)) << 0u, (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u)) << 0u, 0u ^ ((_GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u)) << 0u))) >> 0u)) * subgroup_size, 1u * (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u)) << 0u) * subgroup_size, (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, 0u ^ (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, (false ? _GLF_FUZZED((subgroup_local_id / workgroup_id)) : _GLF_struct_replacement_10.workgroup_base)))) + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u)) << 0u) * subgroup_size) * 1u))))))))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base + subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_10.workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))), 0u ^ (~ (_GLF_struct_replacement_10.workgroup_base + subgroup_id * subgroup_size))), (~ _GLF_IDENTITY((_GLF_struct_replacement_10.workgroup_base + subgroup_id * subgroup_size), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(78384u) : _GLF_IDENTITY((_GLF_struct_replacement_10.workgroup_base + _GLF_IDENTITY(subgroup_id, uint(uvec3(subgroup_id, 0u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)))))) * subgroup_size), 0u | ((_GLF_struct_replacement_10.workgroup_base + subgroup_id * subgroup_size)))))) ^ 0u))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, (_GLF_struct_replacement_10.workgroup_base) / 1u)) >> ((0u >> _GLF_IDENTITY(uint(1u), uint(1u))) << _GLF_IDENTITY(uint(7u), uint(7u)))) + subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_10.workgroup_base + subgroup_id * subgroup_size), (~ (_GLF_struct_replacement_10.workgroup_base + subgroup_id * subgroup_size)) ^ 0u))), _GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u))), ~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_10.workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, 0u + (subgroup_id * subgroup_size))) ^ _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(3u), uint(3u))), uint(uvec3(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(3u), uint(3u))), (_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(3u), uint(3u))), 0u | ((_GLF_IDENTITY(0u, 0u ^ (0u)) << _GLF_IDENTITY(uint(3u), uint(3u)))))) / 1u), 1u, 0u))))), (~ (_GLF_struct_replacement_10.workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u) * subgroup_size)) ^ 0u))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base + subgroup_id * subgroup_size, uint(uvec2(_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base + subgroup_id * subgroup_size, min(_GLF_struct_replacement_10.workgroup_base + subgroup_id * subgroup_size, _GLF_struct_replacement_10.workgroup_base + subgroup_id * subgroup_size))) | (_GLF_struct_replacement_10.workgroup_base + subgroup_id * subgroup_size)), 1u))), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_struct_replacement_10.workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(uaddCarry(workgroup_size, subgroup_id, workgroup_size)) : subgroup_id)) * subgroup_size), ((_GLF_struct_replacement_10.workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(uaddCarry(workgroup_size, subgroup_id, workgroup_size)) : subgroup_id)) * subgroup_size)) << (0u >> _GLF_IDENTITY(uint(2u), uint(2u)))), (~ (_GLF_struct_replacement_10.workgroup_base + subgroup_id * subgroup_size)) ^ 0u)))))))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base + subgroup_id * subgroup_size, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_struct_replacement_10.workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u | (subgroup_id), (0u | (subgroup_id)) << 0u)) * subgroup_size), ((_GLF_struct_replacement_10.workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u | (subgroup_id), (0u | (subgroup_id)) << 0u)) * subgroup_size)) / 1u)), ((~ _GLF_IDENTITY((_GLF_struct_replacement_10.workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u | (subgroup_id), (0u | (subgroup_id)) << 0u)) * subgroup_size), ((_GLF_struct_replacement_10.workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u | (subgroup_id), (0u | (subgroup_id)) << 0u)) * subgroup_size)) / 1u))) ^ 0u)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base + subgroup_id * subgroup_size, ~ (~ (_GLF_struct_replacement_10.workgroup_base + subgroup_id * subgroup_size))), ~ (~ (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base + subgroup_id * subgroup_size, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base + subgroup_id * subgroup_size, max(_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base + subgroup_id * subgroup_size, (true ? _GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, uint(uvec3(_GLF_struct_replacement_10.workgroup_base, (0u << _GLF_IDENTITY(uint(2u), uint(2u))), 1u)))) ^ 0u) + subgroup_id * subgroup_size : _GLF_FUZZED(subgroup_size))), _GLF_struct_replacement_10.workgroup_base + subgroup_id * subgroup_size)), _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(bitfieldExtract(uvec4(14043u, 126734u, 181836u, 67624u), 26246, 30480)[1], _GLF_IDENTITY(0u, ~ (~ (0u))) | _GLF_IDENTITY((bitfieldExtract(uvec4(14043u, 126734u, 181836u, 67624u), 26246, _GLF_IDENTITY(30480, (30480) | 0))[1]), ~ (~ ((bitfieldExtract(uvec4(14043u, 126734u, 181836u, 67624u), 26246, _GLF_IDENTITY(30480, (30480) | 0))[1])))))) : _GLF_struct_replacement_10.workgroup_base + subgroup_id * subgroup_size, (false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(bitfieldExtract(uvec4(14043u, 126734u, 181836u, 67624u), 26246, 30480)[1], 0u | (bitfieldExtract(uvec4(14043u, 126734u, 181836u, 67624u), 26246, _GLF_IDENTITY(30480, (30480) | 0))[1]))), (_GLF_FUZZED(_GLF_IDENTITY(bitfieldExtract(uvec4(14043u, 126734u, 181836u, 67624u), 26246, 30480)[1], 0u | (bitfieldExtract(uvec4(14043u, 126734u, 181836u, 67624u), 26246, _GLF_IDENTITY(30480, (30480) | 0))[1])))) | (_GLF_FUZZED(_GLF_IDENTITY(bitfieldExtract(uvec4(14043u, 126734u, 181836u, 67624u), 26246, 30480)[1], 0u | (bitfieldExtract(uvec4(14043u, 126734u, 181836u, 67624u), 26246, _GLF_IDENTITY(30480, (30480) | 0))[1]))))) : _GLF_struct_replacement_10.workgroup_base + subgroup_id * subgroup_size) / 1u)), 1u * ((false ? _GLF_FUZZED(bitfieldExtract(uvec4(14043u, _GLF_IDENTITY(126734u, uint(_GLF_IDENTITY(uvec3(126734u, 1u, 1u), (uvec3(126734u, 1u, 1u)) | (uvec3(126734u, 1u, 1u))))), 181836u, 67624u), _GLF_IDENTITY(26246, min(_GLF_IDENTITY(26246, (_GLF_IDENTITY(_GLF_IDENTITY(26246, min(26246, _GLF_IDENTITY(26246, max(26246, 26246)))), (_GLF_IDENTITY(false, bool(bool(false))) ? _GLF_FUZZED(-26401) : _GLF_IDENTITY(26246, int(ivec2(26246, 1)))))) - 0), 26246)), 30480)[1]) : _GLF_struct_replacement_10.workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_id)) * subgroup_size))))), ((_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(bitfieldExtract(uvec4(14043u, 126734u, _GLF_IDENTITY(181836u, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(181836u, (_GLF_IDENTITY(181836u, ~ (~ (181836u)))) - 0u), 1u)), ~ (~ (uint(uvec2(181836u, 1u)))))), 67624u), 26246, _GLF_IDENTITY(30480, max(30480, 30480))), (bitfieldExtract(uvec4(14043u, 126734u, _GLF_IDENTITY(181836u, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(181836u, (_GLF_IDENTITY(181836u, ~ (~ (181836u)))) - 0u), 1u)), ~ (~ (uint(uvec2(181836u, 1u)))))), 67624u), 26246, _GLF_IDENTITY(30480, max(30480, 30480)))) ^ uvec4(0u, 0u, 0u, 0u))[_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), (int(int(1))) * 1)) : _GLF_FUZZED(-11079)))]) : _GLF_struct_replacement_10.workgroup_base + subgroup_id * subgroup_size), 1u * ((false ? _GLF_FUZZED(_GLF_IDENTITY(bitfieldExtract(uvec4(_GLF_IDENTITY(14043u, (14043u) + 0u), 126734u, 181836u, 67624u), 26246, 30480)[_GLF_IDENTITY(_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) * _GLF_IDENTITY(1, (1) - 0)), 1, 1))))), min(_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) * 1), 1, 1))))), _GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) * 1), 1, 1)))))))], ~ (~ (bitfieldExtract(uvec4(14043u, 126734u, 181836u, 67624u), 26246, 30480)[_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) * 1), 1, 1)))))])))) : _GLF_struct_replacement_10.workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))), clamp(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))), _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))), _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))))), _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))))))))))) ^ 0u)))))))))))) + ((subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1)))) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)));
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(3), int(3))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (_GLF_IDENTITY(~ ((0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 ^ (int(3))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ ((0 << _GLF_IDENTITY(int(3), int(3))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))))))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       atomicStore(buf[virtual_gid], uint(1), 4, _GLF_IDENTITY(64, (false ? _GLF_FUZZED(88456) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, (false ? _GLF_FUZZED(_GLF_IDENTITY((-27251 + 26926), int(ivec2((-27251 + 26926), 0)))) : 64)))), (_GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, (false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY((-27251 + 26926), ~ (~ ((-27251 + 26926)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((-27251 + 26926), ~ (~ ((-27251 + 26926))))), (~ (_GLF_IDENTITY((-27251 + 26926), ~ (~ ((-27251 + 26926)))))) / ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))))) : 64))))) - int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY((64) | (0 >> _GLF_IDENTITY(int(6), int(6))), ~ _GLF_IDENTITY((~ ((64) | (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (int(6)) - 0)) | 0))))), (_GLF_IDENTITY((~ ((64) | (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (int(6)) - 0)) | 0))))), int(ivec4((~ ((64) | (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (int(6)) - 0)) | 0))))), 0, 0, 0)))) >> 0))))), 4);
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))), mix(vec2(_GLF_FUZZED(-3.4), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))))[1]), vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))))[0], max((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))))[0], (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))))[0])), _GLF_FUZZED(744.706)), bvec2(true, false))).x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bool(_GLF_IDENTITY((! (false)), ((! (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(_GLF_IDENTITY(-9512.2648, (-9512.2648) / cos(0.0)))))))))
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))))))
        continue;
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(subgroup_local_id + _GLF_IDENTITY(1, 0 | (1)) < subgroup_size)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, injectionSwitch.x))), (true ? min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) : _GLF_FUZZED(2970.8421)))) > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, false || (true)) && ((injectionSwitch.x > injectionSwitch.y))))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             return;
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            return;
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          return;
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) + 0))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(2), uint(_GLF_IDENTITY(uint(uint(2)), (true ? _GLF_IDENTITY(uint(uint(2)), uint(uint(uint(uint(2))))) : _GLF_FUZZED(40039u))))), 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(false, ! (! (false))), true))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3(injectionSwitch.x, 0.0, abs(1.0), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0)), min(float(mat3(injectionSwitch.x, 0.0, abs(1.0), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0)), float(mat3(injectionSwitch.x, 0.0, abs(1.0), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0))))) > injectionSwitch.y)))) && true)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, tan(0.0), 0.0, round(length(normalize(1.0))), 0.0, sqrt(1.0), 0.0)), mix(float(float(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) + 0.0), min(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) - 0.0, (true ? (injectionSwitch.y) - 0.0 : _GLF_FUZZED(-1014.5484)))), injectionSwitch.y)), 1.0, tan(0.0), 0.0, round(length(normalize(1.0))), _GLF_IDENTITY(0.0, max(0.0, 0.0)), sqrt(1.0), 0.0))), float(_GLF_FUZZED(1.2)), bool(false)))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 1.0, log(1.0), 0.0)))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
                {
                 return;
                }
               else
                {
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
              }
            }
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(false, true, true))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(false, true, true)))))), bool(bvec2(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(false, true, true))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(false, true, true)))))), true)))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), bool(bvec2(bool(bool(false)), false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(false)), bool(bvec2(bool(bool(false)), false)))), ! (! (! (_GLF_IDENTITY(bool(bool(false)), bool(bvec2(bool(bool(false)), false))))))))))), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec2(bool(bool(false)), false)))))), ! (! (bool(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec2(bool(bool(false)), false))))))))))))) || ((! (_GLF_IDENTITY(false, bool(bvec3(false, true, true))))))))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec2(injectionSwitch), min(vec2(injectionSwitch), vec2(injectionSwitch)))), min(vec2(_GLF_IDENTITY(vec2(injectionSwitch), min(vec2(injectionSwitch), vec2(injectionSwitch)))), vec2(_GLF_IDENTITY(vec2(injectionSwitch), min(vec2(injectionSwitch), vec2(injectionSwitch))))))))[1]), vec2(_GLF_FUZZED((18.34 / (-7.1 - 9761.2995))), _GLF_FUZZED(3.1)), bvec2(false, false))).x, float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), 1, 1))]), vec2(_GLF_FUZZED((18.34 / (-7.1 - 9761.2995))), _GLF_FUZZED(3.1)), bvec2(false, false))).x, 0.0, 1.0, 0.0), mat4(1.0) * (vec4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((18.34 / (-7.1 - 9761.2995))), _GLF_FUZZED(3.1)), bvec2(false, false)), max(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((18.34 / (-7.1 - 9761.2995))), _GLF_FUZZED(3.1)), bvec2(false, false)), mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((18.34 / (-7.1 - 9761.2995))), _GLF_FUZZED(3.1)), bvec2(false, false))))).x, 0.0, 1.0, 0.0))))) < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), bool(bool(! (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))))) || false)))), (bool(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)) && true)))))))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, 1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   subgroupAll(false);
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && (_GLF_DEAD(false))))
    return;
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), clamp(_GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), clamp(min(injectionSwitch.x, injectionSwitch.x), min(injectionSwitch.x, injectionSwitch.x), min(injectionSwitch.x, injectionSwitch.x))), min(injectionSwitch.x, injectionSwitch.x), min(injectionSwitch.x, injectionSwitch.x)))) < injectionSwitch.y))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true, false))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) || false)))))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))))))
      {
       atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY((4), (_GLF_IDENTITY((4), ((4)) | 0)) / 1) ^ 0), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(4, max(4, 4))), (_GLF_IDENTITY((_GLF_IDENTITY(4, max(4, 4))), clamp((_GLF_IDENTITY(4, max(4, 4))), _GLF_IDENTITY((_GLF_IDENTITY(4, max(4, 4))), ((_GLF_IDENTITY(_GLF_IDENTITY(4, int(ivec3(_GLF_IDENTITY(4, 0 + (4)), 0, 1))), max(4, 4)))) << 0), (_GLF_IDENTITY(4, max(4, 4)))))) | (_GLF_IDENTITY((_GLF_IDENTITY(4, max(4, 4))), 1 * _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(4, max(4, 4))), ((_GLF_IDENTITY(4, max(4, 4)))) ^ 0)), int(ivec2((_GLF_IDENTITY((_GLF_IDENTITY(4, max(4, 4))), ((_GLF_IDENTITY(4, max(4, 4)))) ^ 0)), 0)))))) | (4), ((_GLF_IDENTITY(4, max(4, 4))) | (4)) / 1)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY((4), (_GLF_IDENTITY((4), ((4)) | 0)) / 1) ^ 0), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(4, (4) + 0), max(4, 4))), (_GLF_IDENTITY((_GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-62265) : _GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, clamp(4, 4, 4))))))), 4))), clamp((_GLF_IDENTITY(4, max(4, 4))), _GLF_IDENTITY((_GLF_IDENTITY(4, max(4, 4))), ((_GLF_IDENTITY(4, max(4, 4)))) << 0), (_GLF_IDENTITY(4, max(4, 4)))))) | (_GLF_IDENTITY((_GLF_IDENTITY(4, max(4, 4))), 1 * (_GLF_IDENTITY((_GLF_IDENTITY(4, max(4, 4))), ((_GLF_IDENTITY(4, max(4, 4)))) ^ 0))))) | (4), ((_GLF_IDENTITY(4, max(4, 4))) | (4)) / 1)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY((4), (_GLF_IDENTITY((4), ((4)) | 0)) / 1) ^ 0), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(4, max(4, 4))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(4, max(4, 4)), (false ? _GLF_FUZZED(98820) : _GLF_IDENTITY(4, max(4, 4))))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(4, max(4, 4)), 0 + (_GLF_IDENTITY(4, max(4, 4))))), _GLF_IDENTITY((_GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, (4) | 0)))), ((_GLF_IDENTITY(4, max(4, 4)))) << 0), (_GLF_IDENTITY(4, max(4, 4)))))) | (_GLF_IDENTITY((_GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, max(4, 4))))), 1 * (_GLF_IDENTITY((_GLF_IDENTITY(4, max(4, 4))), ((_GLF_IDENTITY(4, max(4, 4)))) ^ 0))))) | (4), _GLF_IDENTITY(((_GLF_IDENTITY(4, max(4, 4))) | (4)), (((_GLF_IDENTITY(4, max(4, 4))) | (4))) / 1) / 1)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY((4), (_GLF_IDENTITY((4), ((4)) | 0)) / 1) ^ 0), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(4, max(4, 4))), (_GLF_IDENTITY((_GLF_IDENTITY(4, max(4, 4))), clamp((_GLF_IDENTITY(4, max(4, 4))), _GLF_IDENTITY((_GLF_IDENTITY(4, max(4, 4))), ((_GLF_IDENTITY(4, max(4, 4)))) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(4, max(4, 4)), (_GLF_IDENTITY(4, max(_GLF_IDENTITY(4, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (4)), _GLF_IDENTITY(4, 0 ^ (_GLF_IDENTITY(4, int(ivec2(4, 1)))))))) * 1))))) | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(4, max(4, 4))), (_GLF_IDENTITY((_GLF_IDENTITY(4, max(4, 4))), int(ivec2((_GLF_IDENTITY(4, max(4, 4))), 0)))) * 1), 1 * (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(4, min(4, 4)), max(4, _GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-10469)))))), ((_GLF_IDENTITY(4, max(4, 4)))) ^ 0))))) | _GLF_IDENTITY((4), ((4)) >> 0), _GLF_IDENTITY(((_GLF_IDENTITY(4, max(4, 4))) | (4)) / 1, ((_GLF_IDENTITY((_GLF_IDENTITY(4, max(4, 4))), ((_GLF_IDENTITY(4, max(4, 4)))) >> 0) | (4)) / 1) | 0)))))))))))), 4)), 64, 4);
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          return;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && (false))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) || false))))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(54.32), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(5.0, -5215.4332, 59.81, -43.12).z)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, false))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY(false, true && (false))), true, false, false)), ! (! (bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY(false, true && (false))), true, false, false))))))))) && _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1.6), _GLF_FUZZED(float(true))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 0.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(sin(1.6)) : 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 1.0, 1.0, 0.0, 0.0))))) < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((injectionSwitch.y), max((injectionSwitch.y), (injectionSwitch.y))) : _GLF_FUZZED(-2332.3855))) - _GLF_IDENTITY(0.0, (false ? _GLF_IDENTITY(_GLF_FUZZED(-356.638), (false ? _GLF_FUZZED(-62.36) : _GLF_FUZZED(-356.638))) : 0.0)))) + 0.0), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y)), min(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((injectionSwitch.y), max((injectionSwitch.y), (injectionSwitch.y))) : _GLF_FUZZED(-2332.3855))) - _GLF_IDENTITY(0.0, (false ? _GLF_IDENTITY(_GLF_FUZZED(-356.638), (false ? _GLF_FUZZED(-62.36) : _GLF_FUZZED(-356.638))) : 0.0)))) + 0.0), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y)), _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((injectionSwitch.y), max((injectionSwitch.y), (injectionSwitch.y))) : _GLF_FUZZED(-2332.3855))) - _GLF_IDENTITY(0.0, (false ? _GLF_IDENTITY(_GLF_FUZZED(-356.638), (false ? _GLF_FUZZED(-62.36) : _GLF_FUZZED(-356.638))) : 0.0)))) + 0.0), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y))))))))
    {
    }
   else
    {
     for(int _injected_loop_counter = (0 | 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, true))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, true))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, true))), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, true)))) && true)) && true)) || false))
        continue;
       do
        {
         subgroupAll(true);
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (_GLF_IDENTITY(! (bool(bool(false))), false || (! (bool(bool(false))))))))), ! _GLF_IDENTITY((! (_GLF_WRAPPED_IF_FALSE(false))), ((! (_GLF_WRAPPED_IF_FALSE(false)))) || false)))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))))) && true))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(float(injectionSwitch[1]))))), injectionSwitch)).x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
