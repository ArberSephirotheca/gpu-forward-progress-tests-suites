#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_1 {
 mat3 _f0;
 ivec3 _f1;
 uvec2 _f2;
 mat3 _f3;
 mat3 _f4;
 mat3 _f5;
 uint _f6;
} ;

struct _GLF_struct_0 {
 mat4x3 _f0;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
} ;

struct _GLF_struct_3 {
 mat3x2 _f0;
 _GLF_struct_2 _f1;
 mat2 _f2;
 uint subgroup_local_id;
 mat3x2 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))), min(injectionSwitch, injectionSwitch)), (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))), (_GLF_IDENTITY(bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))) || false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) && true) || (false)), (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), false || (_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec2((false), true))), (_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec2((false), true))), bool(bvec2(_GLF_IDENTITY((false), bool(bvec2((false), true))), false)))) && true))))))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          break;
         return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          continue;
        }
       else
        {
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        break;
      }
     if(_GLF_DEAD(false))
      return;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, false)), bool(bool(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, false)))))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, false)), bool(bool(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))))), true, false))))))))) || false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), mix(vec2(_GLF_FUZZED(-5705.7845), _GLF_FUZZED(7109.6243)), _GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), max(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])))), (injectionSwitch)[1]))), bvec2(true, true))).y), _GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || ((injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), mix(vec2(_GLF_FUZZED(-5705.7845), _GLF_FUZZED(7109.6243)), _GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), max(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((injectionSwitch)[_GLF_IDENTITY(0, int(int(0)))], (injectionSwitch)[1]))), bvec2(true, true))).y), false || ((injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), mix(vec2(_GLF_FUZZED(-5705.7845), _GLF_FUZZED(7109.6243)), _GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), max(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0))), mat2(mat2(mat2(injectionSwitch, 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0))))))), vec2(mat2x3(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0))), mat2(mat2(mat2(injectionSwitch, 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0))))))), 1.0, 0.0, 0.0, 0.0)))))[1]))), bvec2(true, true))).y), false || ((injectionSwitch.x > injectionSwitch.y)))), false)))), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), mix(vec2(_GLF_FUZZED(-5705.7845), _GLF_FUZZED(7109.6243)), _GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), max(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((injectionSwitch)[0], (injectionSwitch)[1]))), bvec2(true, true))).y), false || ((injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), min(injectionSwitch, injectionSwitch)), mix(vec2(_GLF_FUZZED(-5705.7845), _GLF_FUZZED(7109.6243)), _GLF_IDENTITY(vec2(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0))[0], (injectionSwitch)[1]), max(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((injectionSwitch)[0], (injectionSwitch)[1]))), bvec2(true, true))).y), false || ((injectionSwitch.x > injectionSwitch.y)))), false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))), ! (! ((! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-0.5)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))))))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).y))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2((! ((injectionSwitch.x > injectionSwitch.y))), true), _GLF_IDENTITY(bvec2(bvec2(bvec2((! ((injectionSwitch.x > injectionSwitch.y))), true))), bvec2(bvec4(bvec2(bvec2(bvec2((! ((injectionSwitch.x > injectionSwitch.y))), true))), false, false)))))), ! (! (! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true))))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          return;
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = _GLF_IDENTITY(0, int(ivec2(0, 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), bool(bvec2(bool(bool(injectionSwitch.x > injectionSwitch.y)), true))))))))
              {
              }
             else
              {
               return;
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      break;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      break;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), true)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(mat3x2(1.0), _GLF_struct_2(_GLF_struct_0(mat4x3(1.0)), _GLF_struct_1(mat3(1.0), ivec3(_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), (int(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) ^ 0)) << 0))) << 0))))), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, 0u ^ (1u))), uvec2(0u, 0u) ^ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, 0u ^ (1u))), uvec2(0u, 0u) ^ (uvec2(_GLF_IDENTITY(1u, 0u ^ (1u))))))), mat3(1.0), _GLF_IDENTITY(mat3(1.0), mat3(1.0) * (mat3(1.0))), _GLF_IDENTITY(mat3(1.0), mat3(1.0) * (mat3(1.0))), 1u)), mat2(1.0), gl_SubgroupInvocationID, mat3x2(1.0));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), true && (bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), bool(bvec4((! (injectionSwitch.x > injectionSwitch.y)), false, false, false))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))) || false), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), float(_GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch.x, 0.0), (false ? _GLF_FUZZED(vec2(-0.1, -12.88)) : vec2(injectionSwitch.x, 0.0))), (_GLF_IDENTITY(vec2(injectionSwitch.x, 0.0), (false ? _GLF_FUZZED(vec2(-0.1, -12.88)) : vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) / vec2(1.0, 1.0)).x, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))) - vec2(0.0, 0.0)))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))) || false)))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
            continue;
           return;
          }
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y)))))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! _GLF_IDENTITY((! _GLF_IDENTITY((false), true && ((false)))), bool(bvec4((! _GLF_IDENTITY((false), true && ((false)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y)))), false, false, false))))))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y : _GLF_FUZZED(-3.2)))))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(0, (0) / 1), 1)), (int(ivec2(0, 1))) | 0))); _injected_loop_counter --)
      {
       return;
      }
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat3x2(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))))).x > injectionSwitch.y))))
    return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   do
    {
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0, 0.0, 0.0, 1.0))).x < injectionSwitch.y)) && (false))));
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-9.7) : injectionSwitch.y))))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x, (false ? _GLF_FUZZED(((num_workgroup > 33241u) ? 8.6 : -9272.9979)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x)) > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x)) > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x)) > injectionSwitch.y))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       return;
       if(_GLF_DEAD(false))
        continue;
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! _GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), true), _GLF_IDENTITY(bvec2(bvec4(bvec2((_GLF_DEAD(false)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bvec2(bvec4(bvec2(bvec4(bvec2((_GLF_DEAD(false)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), true, true))))), (bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), true), _GLF_IDENTITY(bvec2(bvec4(bvec2((_GLF_DEAD(false)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bvec2(bvec4(bvec2(bvec4(bvec2((_GLF_DEAD(false)), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), true, true)))))) || false))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)))))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(! (false), ! (! (! (_GLF_IDENTITY(false, (false) && true))))), true))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y)))), true, false)), bool(bvec4(bool(bvec4(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), true, false)), true, false, false))))) && true)));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, tan(length(0.0)), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0)), sqrt(0.0), 0.0, 0.0), (mat4x3(injectionSwitch, tan(length(0.0)), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0)), sqrt(0.0), 0.0, 0.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(126.010), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(float(-46088))), bvec2(true, false))).y))))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), bool(bvec4(bool(bvec4(false, false, true, true)), true, true, false))))))))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), _GLF_IDENTITY((bool(true)), ! (! (_GLF_IDENTITY((bool(true)), false || ((bool(true))))))) || false))))))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     if(_GLF_DEAD(false))
                      continue;
                     return;
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                barrier();
               barrier();
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     return;
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 1.0, log(1.0), 0.0, 1.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 0.0))))))))))
  {
  }
 else
  {
   for(int _injected_loop_counter = (0 ^ ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), true && (_GLF_IDENTITY(false, bool(bool(false)))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(-8526.8349))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
           break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))), _GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))))), bool(bvec3((! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))))), true, false))) && true)))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             break;
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-343.666)), float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))), (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, false, false))))))) || false)))));
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! ((false)))))) || false)))
              break;
             continue;
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
               if(_GLF_DEAD(false))
                continue;
              }
            }
          }
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (0 & -68897); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (false ? _GLF_FUZZED(-29702) : int(5)))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
        return;
       do
        {
         barrier();
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_WRAPPED_LOOP(false), false)))) || false));
      }
    }
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, min(1.0, 1.0)))).x > injectionSwitch.y)))))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))))))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), round(length(normalize(1.0))), 0.0, 1.0, abs(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0)))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
           return;
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(8.5) : _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), true, true, true))))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << 0))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bool((false)))) && true)))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false), false, true, false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-98.80), _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) * 1.0)), vec2((injectionSwitch)[0], _GLF_FUZZED(-3.2)), bvec2(true, false))).x < injectionSwitch.y)))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY((true), bool(bool((true)))), ! (! (_GLF_IDENTITY((true), bool(bool((true))))))) || false)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)))) || false)))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
              barrier();
             break;
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
            barrier();
           break;
          }
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, max(5, 5))))), int(_GLF_IDENTITY(ivec2((1 << _GLF_IDENTITY(int(5), int(5))), 1), ivec2(0, 0) | (ivec2((1 << _GLF_IDENTITY(int(5), int(5))), 1))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(vec3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0)), (float(vec3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0))) / 1.0)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, false)), false || (_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), true, _GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(_GLF_IDENTITY(bvec2(false, true), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, false))), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, false))), false)), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, false))), false)), true))))))))))), bool(bvec4(bool(bvec3(_GLF_DEAD(false), true, false)), _GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bvec2(bool(bvec3(false, false, true)), false))))), false, true)))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, bool(bvec3((true) || false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false)))
          {
           for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), min((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, 0 ^ (5))), int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), max(int(1), _GLF_IDENTITY(int(1), (int(1)) ^ 0)))) / _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (1)))))) ^ 0)), (int(1)) >> 0))), 0 | ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), max(int(1), _GLF_IDENTITY(int(1), (int(1)) ^ 0)))) / 1), (int(1)) >> 0)), (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), max(int(1), _GLF_IDENTITY(int(1), (int(1)) ^ 0)))) / 1), (int(1)) >> 0))) + 0))))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))))))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true), false), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true), false), true)))))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true), false), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true), false), true))))))) || false)))
                continue;
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         break;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, 0.0 + (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))) ? _GLF_FUZZED((+ 6.6)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (_GLF_IDENTITY(false, (false) || false))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (_GLF_IDENTITY(false, (false) || false))), false)))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (false) || false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), false || (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), true && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), false, true, true)))))) || ((false) || false))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(false, (false) || false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, _GLF_IDENTITY(bool(bvec2((false) || false, false)), ! (! (bool(bvec2((false) || false, false))))))), true, _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)), injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)), injectionSwitch, injectionSwitch)).x, (false ? _GLF_FUZZED(8.3) : _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)), injectionSwitch, injectionSwitch)).x))) / _GLF_IDENTITY(dot(vec4(0.0, sqrt(1.0), 0.0, 0.0), vec4(0.0, exp(0.0), 0.0, 0.0)), dot(vec4(0.0, sqrt(1.0), 0.0, 0.0), vec4(0.0, exp(0.0), 0.0, 0.0)))) < injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)), injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)), injectionSwitch, injectionSwitch)).x, (false ? _GLF_FUZZED(8.3) : _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)), injectionSwitch, injectionSwitch)).x))) / _GLF_IDENTITY(dot(vec4(0.0, sqrt(1.0), 0.0, 0.0), vec4(0.0, exp(0.0), 0.0, 0.0)), dot(vec4(0.0, sqrt(1.0), 0.0, 0.0), vec4(0.0, exp(0.0), 0.0, 0.0)))) < injectionSwitch.y, true, false)), false || (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)), injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)), injectionSwitch, injectionSwitch)).x, (false ? _GLF_FUZZED(8.3) : _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)), injectionSwitch, injectionSwitch)).x))) / _GLF_IDENTITY(dot(vec4(0.0, sqrt(1.0), 0.0, 0.0), vec4(0.0, exp(0.0), 0.0, 0.0)), dot(vec4(0.0, sqrt(1.0), 0.0, 0.0), vec4(0.0, exp(0.0), 0.0, 0.0)))) < injectionSwitch.y, true, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)), injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)), injectionSwitch, injectionSwitch)).x, (false ? _GLF_FUZZED(8.3) : _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)), injectionSwitch, injectionSwitch)).x))) / _GLF_IDENTITY(dot(vec4(0.0, sqrt(1.0), 0.0, 0.0), vec4(0.0, exp(0.0), 0.0, 0.0)), dot(vec4(0.0, sqrt(1.0), 0.0, 0.0), vec4(0.0, exp(0.0), 0.0, 0.0)))) < injectionSwitch.y, true, false))) || false))))))))))))))))), _GLF_IDENTITY(bool(bvec2(false, false)), (_GLF_IDENTITY(bool(bvec2(false, false)), true && (_GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false)))))))) || false))))
        {
         for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bool(_GLF_IDENTITY(false, (false) && true))))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), _GLF_IDENTITY(bool(bvec2(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), true)), bool(bvec2(bool(bvec2(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), true)), true)))))))
        continue;
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
           continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) && true, (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)) && true, ! (! ((_GLF_IDENTITY(false, (false) || false)) && true)))) || false))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5.8)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) > injectionSwitch.y))), (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(5.8)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) > injectionSwitch.y)))) || false))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), true, true))), true, true)))))
    return;
   barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) >> _GLF_IDENTITY(0u, 0u ^ (0u))), max(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) >> _GLF_IDENTITY(_GLF_IDENTITY(0u, 0u ^ (0u)), (_GLF_IDENTITY(0u, 0u ^ (0u))) >> 0u)), (_GLF_IDENTITY(subgroup_base, (subgroup_base) >> _GLF_IDENTITY(0u, 0u ^ _GLF_IDENTITY((0u), ((0u)) | (_GLF_IDENTITY((0u), 0u ^ ((0u)))))))) << 0u), workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) >> _GLF_IDENTITY(0u, 0u ^ (0u))))) + _GLF_struct_replacement_3.subgroup_local_id, (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) >> _GLF_IDENTITY(0u, 0u ^ (0u))), max(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) >> _GLF_IDENTITY(_GLF_IDENTITY(0u, 0u ^ (0u)), (_GLF_IDENTITY(0u, _GLF_IDENTITY(0u ^ (0u), 0u + (0u ^ (0u))))) >> 0u)), (_GLF_IDENTITY(subgroup_base, (subgroup_base) >> _GLF_IDENTITY(0u, 0u ^ _GLF_IDENTITY((0u), ((0u)) | (_GLF_IDENTITY((0u), 0u ^ ((0u)))))))) << 0u), workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) >> _GLF_IDENTITY(0u, 0u ^ (0u))))) + _GLF_struct_replacement_3.subgroup_local_id) / 1u), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id, clamp(workgroup_base + subgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, 0u ^ (_GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, min(_GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, (true ? _GLF_struct_replacement_3.subgroup_local_id : _GLF_FUZZED(subgroup_id))), _GLF_struct_replacement_3.subgroup_local_id)))), 0u ^ (_GLF_struct_replacement_3.subgroup_local_id)), _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) >> 0u), (subgroup_base) / 1u)) | (subgroup_base)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, max(workgroup_base + subgroup_base, workgroup_base + subgroup_base)), min(_GLF_IDENTITY(workgroup_base + subgroup_base, max(workgroup_base + subgroup_base, workgroup_base + subgroup_base)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, max(workgroup_base + subgroup_base, workgroup_base + subgroup_base)), (true ? _GLF_IDENTITY(workgroup_base + subgroup_base, max(workgroup_base + subgroup_base, workgroup_base + subgroup_base)) : _GLF_FUZZED(workgroup_size))))), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_base, max(workgroup_base + subgroup_base, _GLF_IDENTITY(workgroup_base + subgroup_base, (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) - 0u)) ^ 0u)))), ((_GLF_IDENTITY(workgroup_base + subgroup_base, max(workgroup_base + subgroup_base, workgroup_base + subgroup_base)))) >> 0u) / 1u), workgroup_base + subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, uint(_GLF_IDENTITY(uvec2(workgroup_base + subgroup_base, _GLF_IDENTITY(1u, 0u | (1u))), (uvec2(workgroup_base + subgroup_base, 1u)) / uvec2(1u, 1u)))), (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)))), uint(_GLF_IDENTITY(uvec2(workgroup_base + subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) << (0u & 54042u)), 0u | (1u))), _GLF_IDENTITY((uvec2(workgroup_base + subgroup_base, 1u)) / uvec2(1u, 1u), ((uvec2(workgroup_base + subgroup_base, 1u)) / uvec2(1u, 1u)) >> uvec2(0u, 0u)))))) >> 0u))) + _GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, (_GLF_struct_replacement_3.subgroup_local_id) | (_GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, max(_GLF_struct_replacement_3.subgroup_local_id, _GLF_struct_replacement_3.subgroup_local_id)))), workgroup_base + _GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)) + _GLF_struct_replacement_3.subgroup_local_id))), clamp(~ (_GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y)) ? _GLF_FUZZED(79935u) : workgroup_base)), (_GLF_IDENTITY(workgroup_base, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, _GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, float(mat2x3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0))))))))).y)) ? _GLF_FUZZED(79935u) : workgroup_base))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) + subgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, (_GLF_struct_replacement_3.subgroup_local_id) / 1u), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y)) ? _GLF_FUZZED(79935u) : workgroup_base)), (_GLF_IDENTITY(workgroup_base, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, _GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, float(mat2x3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0))))))))).y)) ? _GLF_FUZZED(79935u) : workgroup_base))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) + subgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, (_GLF_struct_replacement_3.subgroup_local_id) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y)) ? _GLF_FUZZED(79935u) : workgroup_base)), (_GLF_IDENTITY(workgroup_base, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, _GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, float(mat2x3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0))))))))).y)) ? _GLF_FUZZED(79935u) : workgroup_base))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) + subgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, (_GLF_struct_replacement_3.subgroup_local_id) / 1u))), _GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id, (workgroup_base + _GLF_IDENTITY(subgroup_base, uint(uint(subgroup_base))) + _GLF_struct_replacement_3.subgroup_local_id) | 0u), workgroup_base + _GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)) + _GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, (true ? _GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, (_GLF_struct_replacement_3.subgroup_local_id) / 1u) : _GLF_FUZZED(workgroup_id)))))), ~ (_GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id, clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))) | (workgroup_base)) + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id, 0u ^ (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))) | (workgroup_base)) + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id)), _GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u) + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec3(workgroup_base, (1u ^ 1u), 0u))) + subgroup_base, max(workgroup_base + subgroup_base, _GLF_IDENTITY(workgroup_base + subgroup_base, _GLF_IDENTITY(uint(uvec4(workgroup_base + subgroup_base, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u, 1u)), max(uint(_GLF_IDENTITY(uvec4(workgroup_base + subgroup_base, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u, 1u), uvec4(1u, 1u, 1u, 1u) * (uvec4(workgroup_base + subgroup_base, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u, 1u)))), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(workgroup_base, (1u ^ 1u) ^ (workgroup_base)) + subgroup_base, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u, 1u), uvec4(0u, 0u, 0u, 0u) | (uvec4(_GLF_IDENTITY(workgroup_base, (1u ^ 1u) ^ (workgroup_base)) + subgroup_base, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u, 1u))), (true ? _GLF_IDENTITY(uvec4(_GLF_IDENTITY(workgroup_base, (1u ^ 1u) ^ (workgroup_base)) + subgroup_base, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u, 1u), uvec4(0u, 0u, 0u, 0u) | (uvec4(_GLF_IDENTITY(workgroup_base, (1u ^ 1u) ^ (workgroup_base)) + subgroup_base, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u, 1u))) : _GLF_FUZZED(uvec4(46704u, 420u, 34970u, 189012u)))))))))) + _GLF_struct_replacement_3.subgroup_local_id))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)) + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id, clamp(_GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (! (true)))), (bool(_GLF_IDENTITY(true, ! (! (true))))) || false)))))) ? _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, max(workgroup_base + subgroup_base, workgroup_base + subgroup_base)) + _GLF_struct_replacement_3.subgroup_local_id, min(workgroup_base + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id, workgroup_base + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id)) : _GLF_FUZZED(uint(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec2(! (true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base))) >> (_GLF_IDENTITY(114724u & 0u, _GLF_IDENTITY(0u | (_GLF_IDENTITY(114724u & 0u, (114724u & 0u) - 0u)), (0u | (_GLF_IDENTITY(114724u & 0u, (114724u & 0u) - 0u))) << 0u)))) + _GLF_struct_replacement_3.subgroup_local_id, workgroup_base + subgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(uint(732.317)) : _GLF_struct_replacement_3.subgroup_local_id, 0u ^ (false ? _GLF_FUZZED(uint(732.317)) : _GLF_struct_replacement_3.subgroup_local_id))), ((_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(_GLF_IDENTITY(uint(732.317), max(uint(732.317), uint(732.317)))) : _GLF_struct_replacement_3.subgroup_local_id)) << 0u)))))))), uint(uvec3(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base), max((subgroup_base), (subgroup_base))) / 1u) + _GLF_struct_replacement_3.subgroup_local_id, (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base), max((subgroup_base), (subgroup_base))) / 1u) + _GLF_struct_replacement_3.subgroup_local_id, ~ (~ (workgroup_base + _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base), max((subgroup_base), (subgroup_base))) / 1u) + _GLF_struct_replacement_3.subgroup_local_id)))) / 1u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (true ? workgroup_base + subgroup_base : _GLF_FUZZED(50137u))), ~ (~ (workgroup_base + subgroup_base))) + _GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, (_GLF_struct_replacement_3.subgroup_local_id) / 1u)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, (_GLF_struct_replacement_3.subgroup_local_id) / 1u)), (~ (_GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, (_GLF_struct_replacement_3.subgroup_local_id) / 1u))) | 0u)) | (~ (_GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, _GLF_IDENTITY((_GLF_struct_replacement_3.subgroup_local_id), 0u + ((_GLF_struct_replacement_3.subgroup_local_id))) / 1u)))))), workgroup_base + _GLF_IDENTITY(subgroup_base, ~ (~ (subgroup_base))) + _GLF_struct_replacement_3.subgroup_local_id, _GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id, (true ? workgroup_base + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id : _GLF_FUZZED(uint(false))))))), clamp(~ (_GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id, clamp(workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) << uint(_GLF_ZERO(0.0, injectionSwitch.x))) + _GLF_struct_replacement_3.subgroup_local_id, _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base))) | 0u), ~ (~ (workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base))) | 0u)))) + _GLF_struct_replacement_3.subgroup_local_id, workgroup_base + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id))), _GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, uint(uvec3(_GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, _GLF_IDENTITY((_GLF_struct_replacement_3.subgroup_local_id) * 1u, ((_GLF_struct_replacement_3.subgroup_local_id) * 1u) >> 0u)), 1u, 0u))), (_GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, uint(uvec3(_GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, _GLF_IDENTITY((_GLF_struct_replacement_3.subgroup_local_id) * 1u, ((_GLF_struct_replacement_3.subgroup_local_id) * 1u) >> 0u)), 1u, 0u)))) | 0u), clamp(workgroup_base + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id, workgroup_base + _GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(workgroup_size) : subgroup_base)) + _GLF_struct_replacement_3.subgroup_local_id, _GLF_IDENTITY(workgroup_base, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))) ^ (workgroup_base)) + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, uint(uvec3(_GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, _GLF_IDENTITY((_GLF_struct_replacement_3.subgroup_local_id) * 1u, ((_GLF_struct_replacement_3.subgroup_local_id) * 1u) >> 0u)), 1u, 0u))), (_GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, uint(uvec3(_GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, _GLF_IDENTITY((_GLF_struct_replacement_3.subgroup_local_id) * 1u, ((_GLF_struct_replacement_3.subgroup_local_id) * 1u) >> 0u)), 1u, 0u)))) | 0u), clamp(workgroup_base + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id, workgroup_base + _GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(workgroup_size) : subgroup_base)) + _GLF_struct_replacement_3.subgroup_local_id, _GLF_IDENTITY(workgroup_base, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))) ^ (workgroup_base)) + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id))), ((_GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, uint(uvec3(_GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, _GLF_IDENTITY((_GLF_struct_replacement_3.subgroup_local_id) * 1u, ((_GLF_struct_replacement_3.subgroup_local_id) * 1u) >> 0u)), 1u, 0u))), (_GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, uint(uvec3(_GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, _GLF_IDENTITY((_GLF_struct_replacement_3.subgroup_local_id) * 1u, ((_GLF_struct_replacement_3.subgroup_local_id) * 1u) >> 0u)), 1u, 0u)))) | 0u), clamp(workgroup_base + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id, workgroup_base + _GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(workgroup_size) : subgroup_base)) + _GLF_struct_replacement_3.subgroup_local_id, _GLF_IDENTITY(workgroup_base, (0u >> _GLF_IDENTITY(uint(0u), uint(0u))) ^ (workgroup_base)) + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id)))) << 0u) : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(0u, (0u) << 0u) ^ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id, clamp(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(uint(workgroup_base)))), max((_GLF_IDENTITY(workgroup_base, uint(uint(workgroup_base)))), (_GLF_IDENTITY(workgroup_base, uint(uint(workgroup_base)))))) >> 0u), workgroup_base, workgroup_base)))) + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id, workgroup_base + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id, workgroup_base + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id))), max(~ (_GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id, clamp(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(uint(workgroup_base)))), max((_GLF_IDENTITY(workgroup_base, uint(uint(workgroup_base)))), (_GLF_IDENTITY(workgroup_base, uint(uint(workgroup_base)))))) >> 0u), workgroup_base, workgroup_base)))) + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id, workgroup_base + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id, workgroup_base + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id))), ~ (_GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id, clamp(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(uint(workgroup_base)))), max((_GLF_IDENTITY(workgroup_base, uint(uint(workgroup_base)))), (_GLF_IDENTITY(workgroup_base, uint(uint(workgroup_base)))))) >> 0u), workgroup_base, workgroup_base)))) + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id, workgroup_base + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id, workgroup_base + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id))))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) ^ 0u) + _GLF_struct_replacement_3.subgroup_local_id, (false ? _GLF_FUZZED(subgroup_base) : workgroup_base + _GLF_IDENTITY(subgroup_base, ~ (_GLF_IDENTITY(~ (subgroup_base), _GLF_IDENTITY(_GLF_IDENTITY(clamp(~ (subgroup_base), ~ (subgroup_base), ~ (subgroup_base)), min(clamp(~ (subgroup_base), ~ (subgroup_base), ~ (subgroup_base)), clamp(~ (subgroup_base), ~ (_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))) | (subgroup_base))), ~ (subgroup_base)))), (_GLF_IDENTITY(clamp(~ (subgroup_base), ~ (subgroup_base), ~ (subgroup_base)), min(clamp(~ (subgroup_base), ~ (subgroup_base), ~ (subgroup_base)), clamp(~ (subgroup_base), ~ (_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))) | (subgroup_base))), ~ (subgroup_base))))) | (_GLF_IDENTITY(clamp(~ (subgroup_base), ~ (subgroup_base), ~ (subgroup_base)), min(clamp(~ (subgroup_base), ~ (subgroup_base), ~ (subgroup_base)), clamp(~ (subgroup_base), ~ (_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))) | (subgroup_base))), ~ (subgroup_base))))))))) + _GLF_struct_replacement_3.subgroup_local_id)), clamp(_GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id, 0u | (workgroup_base + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id)), workgroup_base + subgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_size) : _GLF_struct_replacement_3.subgroup_local_id))) - 0u), (true ? _GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, (_GLF_struct_replacement_3.subgroup_local_id) | (_GLF_struct_replacement_3.subgroup_local_id)) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(atomicXor(subgroup_id, subgroup_size)), (_GLF_FUZZED(atomicXor(subgroup_id, subgroup_size))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(atomicXor(subgroup_id, subgroup_size)), (_GLF_FUZZED(atomicXor(subgroup_id, subgroup_size))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(atomicXor(subgroup_id, subgroup_size)), (_GLF_FUZZED(atomicXor(subgroup_id, subgroup_size))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(atomicXor(subgroup_id, subgroup_size)), (_GLF_FUZZED(atomicXor(subgroup_id, subgroup_size))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))))))), workgroup_base + subgroup_base + _GLF_struct_replacement_3.subgroup_local_id)))))), uint(_GLF_ONE(1.0, injectionSwitch.y)), (0u | 0u)))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, false, true))), true)))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            return;
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         break;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         break;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false)))), true))), true)))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
           continue;
          }
        }
       continue;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, cos(0.0), 0.0, 0.0))))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec2(injectionSwitch.x, 1.0), (true ? _GLF_IDENTITY(vec2(injectionSwitch.x, 1.0), _GLF_IDENTITY((vec2(injectionSwitch.x, 1.0)) * mat2(1.0), (true ? (vec2(injectionSwitch.x, 1.0)) * mat2(1.0) : _GLF_FUZZED(injectionSwitch)))) : _GLF_FUZZED(vec2(7.2, 7218.6199)))))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)))).x)) > injectionSwitch.y, _GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(0.6)), bool(false))) > injectionSwitch.y))))), true, true)))))))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        continue;
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((0 & -20100) | 1)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + abs(sqrt(vec2(0.0, 0.0)))).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - tan(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1.2)), bool(_GLF_IDENTITY(false, ! (! (false))))))))))), true && (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            barrier();
           barrier();
          }
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
        return;
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false), false)))))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 | 0), bool(bvec2(_injected_loop_counter > (0 | 0), false)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(false, true && (false))), bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, false || (false)), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, false || (false)), false))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, false || (false)), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, false || (false)), false))))), true, true))), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, false || (false)), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, false || (false)), false))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, false || (false)), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, false || (false)), false))))), true, true))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, false || (false)), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, false || (false)), false))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, false || (false)), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, false || (false)), false))))), true, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))) || false), false || (false))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(7.3)), bool(false)))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          continue;
         continue;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y, (false ? _GLF_FUZZED(cos(321.255)) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y))), float(_GLF_FUZZED(-684.140)), bool(false)))))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true && (_GLF_DEAD(false)), (true && (_GLF_DEAD(false))) && true)))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            {
             if(_GLF_DEAD(false))
              return;
             break;
            }
           break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            continue;
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         break;
         if(_GLF_DEAD(false))
          barrier();
        }
       continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       break;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8055.9362), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(349.166)), bvec2(true, false))).y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((51.43 / 7.0))), float(injectionSwitch.y), bool(true)))))))
        barrier();
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false))))))))
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
            continue;
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))))), injectionSwitch)).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch)).y)) || false), false || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))))))), injectionSwitch)).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch)).y)) || false)))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch), max(max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch), max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch))), clamp(_GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch), max(max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch), max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch))), _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch), max(max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch), max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch))), _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch), max(max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch), max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch)))))).y), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(tanh(vec2(16.48, 9.6)))))) - tan(vec2(0.0, 0.0))), vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 0.0, 1.0, 0.0, sin(sin(0.0)), 1.0, 1.0), (false ? _GLF_FUZZED(mat2x4(5.3, 438.123, 3.8, 7.0, -2.8, 7197.7782, 1718.2765, -12.40)) : mat2x4(injectionSwitch, 0.0, 1.0, 0.0, sin(sin(0.0)), 1.0, 1.0))))).x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), vec2(mat2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch)).y)) || false))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).y))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), vec2(0.0, 0.0) + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))))))))), injectionSwitch)).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * ((injectionSwitch) * mat2(1.0)), (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * ((injectionSwitch) * mat2(1.0))) * mat2(1.0)))), 0.0, 1.0))), injectionSwitch)).y)) || false)), (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch), max(max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch), max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch)))).y, bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch), max(max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch), max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch)))).y, true, true)))), ((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5857.1501)), float(1.0), bool(true))), 0.0, sin(sin(0.0)), 1.0, 1.0), (false ? _GLF_FUZZED(mat2x4(5.3, 438.123, 3.8, 7.0, _GLF_IDENTITY(-2.8, clamp(-2.8, _GLF_IDENTITY(-2.8, float(float(-2.8))), _GLF_IDENTITY(-2.8, (-2.8) / 1.0))), 7197.7782, 1718.2765, -12.40)) : mat2x4(injectionSwitch, 0.0, 1.0, 0.0, sin(sin(0.0)), 1.0, 1.0))))).x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), vec2(mat2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch), min(max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), vec2(mat2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), vec2(mat2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch)))).y)) || false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) / mat2(1.0, 1.0, 1.0, 1.0))), 0.0, 1.0))))), injectionSwitch)).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))))).y)) || false)), _GLF_IDENTITY((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch), (max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch)) / vec2(1.0, 1.0)), max(max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch), max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch)))).y), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, sqrt(1.0)))), vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 0.0, 1.0, 0.0, sin(sin(0.0)), 1.0, 1.0), (false ? _GLF_FUZZED(mat2x4(5.3, 438.123, 3.8, 7.0, -2.8, 7197.7782, 1718.2765, -12.40)) : mat2x4(injectionSwitch, 0.0, 1.0, 0.0, sin(sin(0.0)), 1.0, 1.0))))).x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), vec2(mat2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(6446.9376)), vec2(_GLF_FUZZED(-9.8), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), injectionSwitch)))).y)) || false))), true && ((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch), (max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch)) / vec2(1.0, 1.0)), max(max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch), max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch)))).y), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, sqrt(1.0)))), vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 0.0, 1.0, 0.0, sin(sin(0.0)), 1.0, 1.0), (false ? _GLF_FUZZED(mat2x4(5.3, 438.123, 3.8, 7.0, -2.8, 7197.7782, 1718.2765, -12.40)) : mat2x4(injectionSwitch, 0.0, 1.0, 0.0, sin(sin(0.0)), 1.0, 1.0))))).x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), vec2(mat2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(6446.9376)), vec2(_GLF_FUZZED(-9.8), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), injectionSwitch)))).y)) || false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) - mat2(0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(0.0, (0.0) * 1.0), 1.0))), clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), vec2(_GLF_FUZZED(9.7), _GLF_FUZZED(-2.6)), bvec2(false, false)))), 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))) * mat2(1.0)), 0.0, 1.0))), _GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))))), injectionSwitch)).y), _GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch)).y)) || false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch)).y)) || false, false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch)).y)) || false, false, true), bvec3(bvec4(bvec3(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch)).y)) || false, false, true), true))), false)))), (bool(_GLF_IDENTITY(bvec3(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch)).y)) || false, false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch)).y)) || false, false, true), bvec3(bvec4(bvec3(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch)).y)) || false, false, true), true))), false))))) && true)))), (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch), max(max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch), max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))))) * mat2(1.0)), 0.0, 1.0))), injectionSwitch)))).y), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 0.0, 1.0, 0.0, sin(sin(0.0)), 1.0, 1.0), (false ? _GLF_FUZZED(mat2x4(5.3, 438.123, 3.8, 7.0, -2.8, 7197.7782, 1718.2765, -12.40)) : mat2x4(injectionSwitch, 0.0, 1.0, 0.0, sin(sin(0.0)), 1.0, 1.0))))).x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), vec2(mat2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch)).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 0.0, 1.0, 0.0, sin(sin(0.0)), 1.0, 1.0), (false ? _GLF_FUZZED(mat2x4(5.3, 438.123, 3.8, 7.0, -2.8, 7197.7782, 1718.2765, -12.40)) : mat2x4(injectionSwitch, 0.0, 1.0, 0.0, sin(sin(0.0)), 1.0, 1.0))))).x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), vec2(mat2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch)).y)))) || false), bool(bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch), max(max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch), max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch)))).y), _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 0.0, 1.0, 0.0, sin(sin(0.0)), 1.0, 1.0), (false ? _GLF_FUZZED(mat2x4(5.3, 438.123, 3.8, 7.0, -2.8, 7197.7782, 1718.2765, -12.40)) : mat2x4(injectionSwitch, 0.0, 1.0, 0.0, sin(sin(0.0)), 1.0, 1.0))))).x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), vec2(mat2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch)).y)) || false, _GLF_IDENTITY(bool(bvec3(((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 0.0, 1.0, 0.0, sin(sin(0.0)), 1.0, 1.0), (false ? _GLF_FUZZED(mat2x4(5.3, 438.123, 3.8, 7.0, -2.8, 7197.7782, 1718.2765, -12.40)) : mat2x4(injectionSwitch, 0.0, 1.0, 0.0, sin(sin(0.0)), 1.0, 1.0))))).x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), vec2(mat2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch)).y)) || false, true, false)), ! (! (bool(bvec3(((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 0.0, 1.0, 0.0, sin(sin(0.0)), 1.0, 1.0), (false ? _GLF_FUZZED(mat2x4(5.3, 438.123, 3.8, 7.0, -2.8, 7197.7782, 1718.2765, -12.40)) : mat2x4(injectionSwitch, 0.0, 1.0, 0.0, sin(sin(0.0)), 1.0, 1.0))))).x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), vec2(mat2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (injectionSwitch) * mat2(1.0)), 0.0, 1.0))), injectionSwitch)).y)) || false, true, false)))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))))))))))))))))
      break;
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))) || false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        {
         barrier();
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))), _GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))))) + subgroup_base, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))), _GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))))) + subgroup_base, 0u, 0u, 0u)), clamp(_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))), _GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))))) + subgroup_base, 0u, 0u, 0u)), (true ? uint(uvec4(_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, ~ (~ _GLF_IDENTITY((workgroup_base), ((workgroup_base)) | 0u))), _GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))))) + subgroup_base, 0u, 0u, 0u)) : _GLF_FUZZED(workgroup_id))), uint(uvec4(_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))), _GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))))) + subgroup_base, 0u, 0u, 0u)), uint(uvec4(_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))), _GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))))) + subgroup_base, 0u, 0u, 0u))))) + ((_GLF_IDENTITY(_GLF_struct_replacement_3.subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_struct_replacement_3.subgroup_local_id), uint(uvec2((_GLF_struct_replacement_3.subgroup_local_id), 0u))) - 0u, min((_GLF_struct_replacement_3.subgroup_local_id) - 0u, (_GLF_struct_replacement_3.subgroup_local_id) - 0u))) + _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(16282, (16282) << _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, ~ (~ (0))))), 0))), -67209, -37091, 30407)[2], _GLF_IDENTITY((ivec4(16282, -67209, -37091, 30407)[_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (true ? _GLF_IDENTITY(2, int(ivec4(2, 1, 0, 1))) : _GLF_FUZZED(64347)))) + (0 ^ 0))]), int(ivec4((_GLF_IDENTITY(ivec4(16282, -67209, -37091, 30407)[2], int(ivec3(ivec4(16282, -67209, -37091, _GLF_IDENTITY(30407, (30407) ^ 0))[2], 0, 1)))), _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), 1, 1)), 0, 1))) ^ (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), int(0)), clamp(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), int(0)), max(_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) >> 0), ~ (~ (_GLF_IDENTITY(0, max(0, 0)) << _GLF_IDENTITY(int(0), int(0))))), _GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), int(0)), (true ? 0 << _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(92154))))), 0 << _GLF_IDENTITY(int(0), int(0)), 0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), max(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))), int(0)))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), 0 ^ ((true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(16282, (16282) << _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, ~ (~ (0))))), 0))), -67209, -37091, 30407)[2], _GLF_IDENTITY((ivec4(16282, -67209, -37091, 30407)[_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (true ? _GLF_IDENTITY(2, int(ivec4(2, 1, 0, 1))) : _GLF_FUZZED(64347)))) + (0 ^ 0))]), int(ivec4((_GLF_IDENTITY(ivec4(16282, -67209, -37091, 30407)[2], int(ivec3(ivec4(16282, -67209, -37091, _GLF_IDENTITY(30407, (30407) ^ 0))[2], 0, 1)))), _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), 1, 1)), 0, 1))) ^ (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), int(0)), clamp(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), int(0)), max(_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) >> 0), ~ (~ (_GLF_IDENTITY(0, max(0, 0)) << _GLF_IDENTITY(int(0), int(0))))), _GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), int(0)), (true ? 0 << _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(92154))))), 0 << _GLF_IDENTITY(int(0), int(0)), 0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), max(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))), int(0)))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))))), min(_GLF_IDENTITY((true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(16282, -67209, -37091, 30407), clamp(_GLF_IDENTITY(ivec4(16282, -67209, -37091, 30407), clamp(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(16282, (true ? 16282 : _GLF_FUZZED((ivec3(-28655, 46824, _GLF_IDENTITY(-83587, clamp(-83587, _GLF_IDENTITY(-83587, 0 ^ (-83587)), -83587))) | -92940)[0]))), -67209, -37091, _GLF_IDENTITY(30407, max(30407, 30407))), _GLF_IDENTITY((ivec4(16282, -67209, -37091, 30407)) - ivec4(0, 0, 0, 0), (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(findMSB(uvec4(180213u, 185418u, 49746u, 165121u))), min(_GLF_FUZZED(findMSB(uvec4(180213u, 185418u, 49746u, 165121u))), _GLF_FUZZED(findMSB(uvec4(180213u, 185418u, 49746u, 165121u))))), (_GLF_IDENTITY(_GLF_FUZZED(findMSB(_GLF_IDENTITY(uvec4(180213u, 185418u, 49746u, 165121u), uvec4(0u, 0u, 0u, 0u) | (uvec4(180213u, 185418u, 49746u, 165121u))))), min(_GLF_FUZZED(findMSB(uvec4(180213u, 185418u, 49746u, 165121u))), _GLF_FUZZED(findMSB(uvec4(180213u, 185418u, 49746u, 165121u)))))) - ivec4(0, 0, 0, 0)) : _GLF_IDENTITY(_GLF_IDENTITY((ivec4(_GLF_IDENTITY(16282, (_GLF_IDENTITY(16282, 0 ^ (16282))) * 1), -67209, -37091, 30407)), ~ (~ ((ivec4(_GLF_IDENTITY(16282, (_GLF_IDENTITY(_GLF_IDENTITY(16282, 0 ^ (16282)), (_GLF_IDENTITY(16282, 0 ^ (16282))) | (_GLF_IDENTITY(_GLF_IDENTITY(16282, 0 ^ (16282)), (_GLF_IDENTITY(16282, 0 ^ (16282))) + 0)))) * 1), -67209, -37091, _GLF_IDENTITY(30407, (_GLF_IDENTITY(30407, (30407) >> 0)) >> 0)))))) - ivec4(0, 0, 0, _GLF_IDENTITY(0, (0) | (0))), (_GLF_IDENTITY((ivec4(16282, -67209, -37091, 30407)) - _GLF_IDENTITY(ivec4(0, 0, 0, 0), (_GLF_IDENTITY(ivec4(0, 0, 0, 0), max(ivec4(0, 0, 0, 0), ivec4(0, 0, 0, 0)))) - ivec4(0, 0, 0, 0)), clamp((ivec4(16282, -67209, -37091, 30407)) - ivec4(0, 0, 0, 0), (ivec4(16282, -67209, -37091, 30407)) - ivec4(0, _GLF_IDENTITY(0, (0) ^ 0), 0, 0), (ivec4(16282, _GLF_IDENTITY(-67209, max(-67209, -67209)), -37091, 30407)) - ivec4(0, 0, 0, 0)))) + (ivec4(0, 0, 0, 0) >> _GLF_IDENTITY(ivec4(2), ivec4(2))))))), ivec4(16282, -67209, -37091, 30407), ivec4(16282, -67209, -37091, _GLF_IDENTITY(30407, 0 + (30407))))), _GLF_IDENTITY(ivec4(16282, -67209, _GLF_IDENTITY(-37091, (_GLF_IDENTITY(-37091, (-37091) | (_GLF_IDENTITY(-37091, int(ivec4(-37091, 1, 1, 0)))))) - _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-6114) : 0))), 30407), clamp(_GLF_IDENTITY(ivec4(16282, -67209, _GLF_IDENTITY(-37091, (_GLF_IDENTITY(_GLF_IDENTITY(-37091, max(_GLF_IDENTITY(-37091, (-37091) - 0), -37091)), (-37091) | _GLF_IDENTITY((_GLF_IDENTITY(-37091, int(ivec4(-37091, 1, 1, 0)))), 0 + ((_GLF_IDENTITY(-37091, int(ivec4(-37091, 1, 1, _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) | (0))), (~ (_GLF_IDENTITY(0, (0) | (0)))) * 1))))))))))) - 0), _GLF_IDENTITY(30407, _GLF_IDENTITY(1 * (30407), (1 * (30407)) / 1))), (true ? ivec4(16282, -67209, _GLF_IDENTITY(_GLF_IDENTITY(-37091, (-37091) | (_GLF_IDENTITY(-37091, (-37091) / 1))), (_GLF_IDENTITY(-37091, (-37091) | (_GLF_IDENTITY(_GLF_IDENTITY(-37091, (-37091) | (-37091)), int(ivec4(-37091, 1, 1, 0)))))) - 0), 30407) : _GLF_FUZZED(ivec4(-76128, -97420, 43235, _GLF_IDENTITY(-95144, (-95144) | 0))))), ivec4(16282, -67209, _GLF_IDENTITY(-37091, (_GLF_IDENTITY(-37091, (-37091) | (_GLF_IDENTITY(-37091, int(ivec4(-37091, 1, 1, 0)))))) - 0), 30407), ivec4(16282, -67209, _GLF_IDENTITY(-37091, (_GLF_IDENTITY(_GLF_IDENTITY(-37091, (-37091) | (_GLF_IDENTITY(-37091, int(ivec4(_GLF_IDENTITY(-37091, ((0 >> _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(8), int(8))) | (-37091)), 1, 1, 0))))), ~ (~ (_GLF_IDENTITY(-37091, (-37091) | (_GLF_IDENTITY(-37091, int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(-37091, (-37091) - 0), ((0 >> _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), (_GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), int(int(_GLF_IDENTITY(int(8), int(8)))))) - ((0 | 0) | 0))) | (-37091)), 1, 1, 0))))))))) - 0), 30407))), ivec4(16282, -67209, -37091, 30407)))[2], _GLF_IDENTITY((ivec4(16282, _GLF_IDENTITY(-67209, (false ? _GLF_FUZZED(-47353) : -67209)), _GLF_IDENTITY(-37091, max(_GLF_IDENTITY(-37091, int(int(-37091))), _GLF_IDENTITY(-37091, _GLF_IDENTITY((-37091) - 0, ((-37091) - 0) + 0)))), 30407)[2]), 0 | ((ivec4(16282, -67209, _GLF_IDENTITY(-37091, max(_GLF_IDENTITY(-37091, int(int(-37091))), _GLF_IDENTITY(-37091, _GLF_IDENTITY((_GLF_IDENTITY(-37091, (-37091) / 1)) - 0, ((-37091) - 0) + 0)))), 30407)[2]))) ^ _GLF_IDENTITY((0 << _GLF_IDENTITY(int(0), int(0))), ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), 1 * (_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) | (0))), int(0)))))) - 0)))), ((true ? 1 : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(ivec4(16282, -67209, -37091, 30407)[2], (ivec4(16282, -67209, -37091, 30407)[2]) ^ (0 << _GLF_IDENTITY(int(0), int(0))))), (false ? _GLF_IDENTITY(_GLF_FUZZED(-66480), (_GLF_FUZZED(-66480)) | 0) : _GLF_FUZZED(_GLF_IDENTITY(ivec4(16282, -67209, -37091, 30407)[2], (ivec4(_GLF_IDENTITY(16282, (_GLF_IDENTITY(16282, (16282) ^ 0)) | 0), -67209, -37091, _GLF_IDENTITY(30407, (30407) | (30407)))[2]) ^ (0 << _GLF_IDENTITY(int(0), int(0))))))))) | ((true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(16282, 1 * _GLF_IDENTITY((16282), (_GLF_IDENTITY((16282), ((16282)) >> 0)) | 0)), -67209, -37091, 30407)[2], (_GLF_IDENTITY(ivec4(16282, -67209, -37091, 30407)[2], (ivec4(16282, -67209, -37091, 30407)[2]) - (0 | 0))) ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), ~ (~ (int(0))))) >> 0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-76582)))) >> 0), int(0))) ^ 0))))))), (true ? 1 : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(16282, -67209, -37091, 30407)[2], (ivec4(16282, -67209, -37091, 30407)[2]) ^ (0 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, int(ivec4(0, 0, 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))), int(ivec2(_GLF_IDENTITY(ivec4(16282, -67209, -37091, 30407)[2], (ivec4(16282, -67209, -37091, 30407)[2]) ^ (0 << _GLF_IDENTITY(int(0), int(0)))), 0))), (_GLF_IDENTITY(_GLF_IDENTITY(ivec4(16282, -67209, -37091, 30407)[2], (ivec4(16282, -67209, -37091, 30407)[2]) ^ (0 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, int(ivec4(0, 0, 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))), int(ivec2(_GLF_IDENTITY(ivec4(16282, -67209, -37091, 30407)[2], (ivec4(16282, -67209, -37091, 30407)[2]) ^ (0 << _GLF_IDENTITY(int(0), int(0)))), 0)))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(16282, -67209, -37091, 30407)[2], (ivec4(16282, -67209, -37091, 30407)[2]) ^ (0 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, int(ivec4(0, 0, 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))), int(ivec2(_GLF_IDENTITY(ivec4(16282, -67209, -37091, 30407)[2], (ivec4(16282, -67209, -37091, 30407)[2]) ^ (0 << _GLF_IDENTITY(int(0), int(0)))), 0))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(16282, -67209, -37091, 30407)[2], (ivec4(16282, -67209, -37091, 30407)[2]) ^ (0 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, int(ivec4(0, 0, 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))), int(ivec2(_GLF_IDENTITY(ivec4(16282, -67209, -37091, 30407)[2], (ivec4(16282, -67209, -37091, 30407)[2]) ^ (0 << _GLF_IDENTITY(int(0), int(0)))), 0))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(ivec4(16282, -67209, -37091, 30407)[2], (ivec4(16282, -67209, -37091, 30407)[2]) ^ (0 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, int(ivec4(0, 0, 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))), int(ivec2(_GLF_IDENTITY(ivec4(16282, -67209, -37091, 30407)[2], (ivec4(16282, -67209, -37091, 30407)[2]) ^ (0 << _GLF_IDENTITY(int(0), int(0)))), 0))) : _GLF_FUZZED(90520))), _GLF_IDENTITY(_GLF_IDENTITY(ivec4(16282, -67209, -37091, 30407)[2], (ivec4(16282, -67209, -37091, 30407)[2]) ^ (0 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, int(ivec4(0, 0, 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))), int(ivec2(_GLF_IDENTITY(ivec4(16282, -67209, -37091, 30407)[2], (ivec4(16282, -67209, -37091, 30407)[2]) ^ (0 << _GLF_IDENTITY(int(0), int(0)))), 0)))))))), (_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(16282, -67209, -37091, 30407)[2], (ivec4(16282, -67209, -37091, 30407)[2]) ^ (0 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, int(ivec4(0, 0, 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))), int(ivec2(_GLF_IDENTITY(ivec4(16282, -67209, -37091, 30407)[2], (ivec4(16282, -67209, -37091, 30407)[2]) ^ (0 << _GLF_IDENTITY(int(0), int(0)))), 0))), (_GLF_IDENTITY(_GLF_IDENTITY(ivec4(16282, -67209, -37091, 30407)[2], (ivec4(16282, -67209, -37091, 30407)[2]) ^ (0 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, int(ivec4(0, 0, 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))), int(ivec2(_GLF_IDENTITY(ivec4(16282, -67209, -37091, 30407)[2], (ivec4(16282, -67209, -37091, 30407)[2]) ^ (0 << _GLF_IDENTITY(int(0), int(0)))), 0)))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(16282, -67209, -37091, 30407)[2], (ivec4(16282, -67209, -37091, 30407)[2]) ^ (0 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, int(ivec4(0, 0, 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))), int(ivec2(_GLF_IDENTITY(ivec4(16282, -67209, -37091, 30407)[2], (ivec4(16282, -67209, -37091, 30407)[2]) ^ (0 << _GLF_IDENTITY(int(0), int(0)))), 0))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(16282, -67209, -37091, 30407)[2], (ivec4(16282, -67209, -37091, 30407)[2]) ^ (0 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, int(ivec4(0, 0, 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))), int(ivec2(_GLF_IDENTITY(ivec4(16282, -67209, -37091, 30407)[2], (ivec4(16282, -67209, -37091, 30407)[2]) ^ (0 << _GLF_IDENTITY(int(0), int(0)))), 0))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(ivec4(16282, -67209, -37091, 30407)[2], (ivec4(16282, -67209, -37091, 30407)[2]) ^ (0 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, int(ivec4(0, 0, 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))), int(ivec2(_GLF_IDENTITY(ivec4(16282, -67209, -37091, 30407)[2], (ivec4(16282, -67209, -37091, 30407)[2]) ^ (0 << _GLF_IDENTITY(int(0), int(0)))), 0))) : _GLF_FUZZED(90520))), _GLF_IDENTITY(_GLF_IDENTITY(ivec4(16282, -67209, -37091, 30407)[2], (ivec4(16282, -67209, -37091, 30407)[2]) ^ (0 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, int(ivec4(0, 0, 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))), int(ivec2(_GLF_IDENTITY(ivec4(16282, -67209, -37091, 30407)[2], (ivec4(16282, -67209, -37091, 30407)[2]) ^ (0 << _GLF_IDENTITY(int(0), int(0)))), 0))))))))) ^ 0)))))) % subgroup_size);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5))))))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) || false)))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
    break;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, 0.0)))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         continue;
        }
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
          {
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-9.7)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), true, false, false))))))))))))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       continue;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, ~ (~ (1)))]), vec2(_GLF_FUZZED(-21.36), _GLF_FUZZED(198.896)), bvec2(false, false))).x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, ~ (~ (1)))]), vec2(_GLF_FUZZED(-21.36), _GLF_FUZZED(198.896)), bvec2(false, false))).x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, ~ (~ (1)))]), vec2(_GLF_FUZZED(-21.36), _GLF_FUZZED(198.896)), bvec2(false, false))).x > injectionSwitch.y))) && true)), true && (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, ~ (~ (1)))]), vec2(_GLF_FUZZED(-21.36), _GLF_FUZZED(198.896)), bvec2(false, false))).x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, ~ (~ (1)))]), vec2(_GLF_FUZZED(-21.36), _GLF_FUZZED(198.896)), bvec2(false, false))).x > injectionSwitch.y))) && true))))))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))) || (_GLF_WRAPPED_IF_FALSE(false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         break;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((542.115))), float(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(0.3)))), bool(true))), 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(21.14)), float(_GLF_IDENTITY(1.0, float(mat2x3(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), exp(0.0))))), bool(true))), 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4(0.0, 1.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, 1.0, 1.0, 1.0, log(exp(0.0)), 0.0), (false ? _GLF_FUZZED(mat4(-9.7, -5.1, -620.876, -6.9, -6986.4801, -9929.3325, -7.9, -4.5, 9009.3232, -38.49, -902.707, 995.399, -174.120, -4.6, -493.743, 5.8)) : mat4(0.0, 1.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, log(exp(0.0)), 0.0))))), 1.0, 1.0, exp(0.0), 0.0, 1.0, 1.0)), (vec2(mat4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), 0.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-35.42)), bool(false))))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(exp(0.0), (exp(0.0)) * 1.0), 0.0, 1.0, 1.0))) * mat2(1.0)))), min(vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * vec2(1.0, 1.0), vec2(mat2((injectionSwitch) * vec2(1.0, 1.0), 0.0, 1.0)))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-62.24)), bool(false))), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-853.359))))), 1.0, exp(0.0), 0.0, 1.0, 1.0)), (vec2(mat4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, exp(0.0), 0.0, 1.0, 1.0))) * mat2(1.0)))), vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, exp(0.0), 0.0, 1.0, 1.0)), (vec2(mat4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(4.6)), float(0.0), bool(true))), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(85.15))), 0.0)), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, exp(0.0), 0.0, 1.0, 1.0))) * mat2(1.0)))))))).y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true)))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(1.8) : injectionSwitch.x)) > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              break;
             do
              {
               if(_GLF_DEAD(false))
                continue;
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       do
        {
         atomicStore(buf[virtual_gid], uint(1), _GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY((4), int(_GLF_ZERO(0.0, injectionSwitch.x)) | ((4))) / 1)) | (4)), 64, 4);
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_WRAPPED_LOOP(false), false, false))), ! (! (_GLF_WRAPPED_LOOP(false)))));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), (bool(bvec3(false, false, true))) || false))))
        continue;
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         continue;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))) || false), ! (! (false)))))
    break;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), ! (! ((_GLF_IDENTITY(false, (false) && true)))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), false))))))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
    continue;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), ! (! (bool(bool((injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   barrier();
  }
 if((_GLF_struct_replacement_3.subgroup_local_id % _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (true ? 2 : _GLF_IDENTITY(_GLF_FUZZED(-17199), ~ (_GLF_IDENTITY(~ (_GLF_FUZZED(-17199)), int(_GLF_IDENTITY(ivec2(~ (_GLF_FUZZED(-17199)), int(_GLF_ONE(1.0, injectionSwitch.y))), (false ? _GLF_FUZZED(ivec2(-82179, -79528)) : ivec2(~ (_GLF_FUZZED(-17199)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))))), 2))) == 0)
  {
   subgroupAll(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y)) && (true), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, false, false)), bool(_GLF_IDENTITY(bvec2(bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, false, false)), false), bvec2(bvec4(bvec2(bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, false, false)), false), true, true)))))))) && (true)) && true))), (bool(bool(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) + mat2(0.0, 0.0, 0.0, 0.0))).x < injectionSwitch.y)) && (true)) && true)))) || false))));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), (min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))) - 0.0))))), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), (min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))) - 0.0))))), true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y), float(mat3x4(clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y), cos(0.0), 0.0, sin(0.0), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), 0.0 + (dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)))))), bool(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)), injectionSwitch)).y)) || _GLF_IDENTITY(false, bool(bvec2(false, false))))), false, true)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           barrier();
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y)), bool(bool(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y)))))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), true, false)))))
        {
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) * mat2(1.0))).x > injectionSwitch.y))))
        return;
      }
    }
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (2), clamp(~ (2), ~ (2), ~ (2)))), (~ (_GLF_IDENTITY(~ (2), clamp(~ (2), ~ (2), ~ (2))))) / ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(int(int(2)))))) >> _GLF_IDENTITY(int(2), int(2)))))))), 4, 64, 4);
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true)))
    return;
   subgroupAll(false);
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))), (_GLF_DEAD(false)) || false), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))), false, false))))
          barrier();
         for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (((1 ^ 1) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(int(int(5)))))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
        {
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(65.83))) > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((-81.32))), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(false))), float(injectionSwitch.y), bool(true)))), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y)))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (false)))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                return;
               return;
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
            }
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(vec2(vec2(vec2(mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 0.0)))), (vec2(vec2(vec2(mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 0.0))))) * vec2(1.0, 1.0)))).y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (1 | 0), (_injected_loop_counter != (1 | 0)) || false)); _injected_loop_counter ++)
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     break;
                    }
                  }
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! ((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))))));
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) && true))), ! (! (bool(bool(_GLF_IDENTITY(false, (false) && true))))))))), ! (! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) && true)))))))))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, _GLF_IDENTITY((4) ^ _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(27209))), max((4) ^ 0, _GLF_IDENTITY((4), _GLF_IDENTITY(((4)), (true ? ((4)) : _GLF_FUZZED(98754))) - (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | (6))), int(6))) - 0))) ^ 0))), 64, 4);
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) * 1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       for(int _injected_loop_counter = _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(3), int(3))), (true ? (0 >> _GLF_IDENTITY(int(3), int(3))) : _GLF_FUZZED(-57272))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), min((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         return;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(1, (1 & 1) * (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, min(1, 1)), 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) / int(_GLF_ONE(1.0, injectionSwitch.y))))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (62038 & 0)); _injected_loop_counter --)
                  {
                   return;
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)));
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
            continue;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY((0), ((0)) / 1) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         else
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))).x > injectionSwitch.y))), _GLF_IDENTITY(((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))).x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec3(((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))).x > injectionSwitch.y)))), true, true), bvec3(bvec3(bvec3(((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))).x > injectionSwitch.y)))), true, true)))))) && true)), _GLF_IDENTITY((! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true, false || (_GLF_IDENTITY((! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) && true, ((! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))) && true) && true))))), false, _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (false))))))))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY((! (_GLF_DEAD(false))), ! (! ((! (_GLF_DEAD(false)))))) && true))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))))
      {
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
        }
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-0.9), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-1881.4153)), bvec2(true, false))).y))) || false)))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(763.103)), float(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-345.590), _GLF_FUZZED(-8.2)), (true ? vec2(_GLF_FUZZED(-345.590), _GLF_FUZZED(-8.2)) : _GLF_FUZZED((mat4x2(1.6, -79.84, 718.464, 4015.4127, 3.2, -28.99, -64.65, 7.8) * (mat2x4(1903.3724, 44.97, -2841.6340, -8296.9732, 43.44, 447.516, -2.5, -9874.1130) * injectionSwitch))))), vec2((injectionSwitch)[_GLF_IDENTITY(0, 0 ^ (0))], _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(min(_GLF_IDENTITY((injectionSwitch), vec2(1.0, 1.0) * ((injectionSwitch))), (injectionSwitch)), max(min(_GLF_IDENTITY((injectionSwitch), vec2(1.0, 1.0) * ((injectionSwitch))), (injectionSwitch)), _GLF_IDENTITY(min(_GLF_IDENTITY((injectionSwitch), vec2(1.0, 1.0) * ((injectionSwitch))), (injectionSwitch)), (min(_GLF_IDENTITY((injectionSwitch), vec2(1.0, 1.0) * ((injectionSwitch))), (injectionSwitch))) - sqrt(vec2(0.0, 0.0))))))))[1]), bvec2(true, true))).x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))), true)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ((_GLF_IDENTITY(false, ! (! (false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false))))))))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-5.4) : _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)) != 0); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       continue;
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), _GLF_IDENTITY(0, _GLF_IDENTITY(int(int(0)), min(_GLF_IDENTITY(int(int(0)), (int(int(0))) | (int(int(0)))), _GLF_IDENTITY(int(int(0)), clamp(int(int(0)), int(int(0)), int(int(0))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), (~ (1)) | (~ (1))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(~ (1), (~ (1)) | (~ (1))), 0, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1)), (false ? _GLF_FUZZED((_injected_loop_counter << _injected_loop_counter)) : int(ivec4(_GLF_IDENTITY(~ (1), (~ (1)) | (~ (1))), 0, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1)))))))))); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))) || false)))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))) || false)))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))) || false))))))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           barrier();
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), false || (bool(bvec2(false, false)))))))
          continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          continue;
         barrier();
        }
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-84.87)), bool(false))) > injectionSwitch.y))))
        barrier();
      }
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      break;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) && true))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))))))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))), ! (! ((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))))))))))) && true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      return;
    }
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
