#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_123 {
 mat2 _f0;
} ;

struct _GLF_struct_124 {
 bvec4 _f0;
 int _injected_loop_counter;
 _GLF_struct_123 _f1;
} ;

struct _GLF_struct_125 {
 _GLF_struct_124 _f0;
} ;

struct _GLF_struct_120 {
 mat3 _f0;
 mat4x3 _f1;
 bvec2 _f2;
 ivec3 _f3;
 int _f4;
} ;

struct _GLF_struct_119 {
 uvec4 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_118 {
 uvec2 _f0;
 mat2x3 _f1;
 mat4 _f2;
 ivec2 _f3;
 mat4x3 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_121 {
 _GLF_struct_118 _f0;
 _GLF_struct_119 _f1;
 _GLF_struct_120 _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_116 {
 mat3x2 _f0;
 vec4 _f1;
 mat3x4 _f2;
 mat2x3 _f3;
 mat4x2 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_115 {
 uvec2 _f0;
} ;

struct _GLF_struct_114 {
 bvec3 _f0;
 bvec3 _f1;
 mat3 _f2;
 uint _f3;
 mat3 _f4;
 mat3 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_117 {
 _GLF_struct_114 _f0;
 _GLF_struct_115 _f1;
 _GLF_struct_116 _f2;
} ;

struct _GLF_struct_112 {
 uvec3 _f0;
 mat4x2 _f1;
 bvec4 _f2;
 int _f3;
 ivec4 _f4;
 ivec3 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_111 {
 uvec4 _f0;
 ivec2 _f1;
 vec2 _f2;
 mat4 _f3;
 mat3 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_113 {
 _GLF_struct_111 _f0;
 _GLF_struct_112 _f1;
} ;

struct _GLF_struct_122 {
 uint subgroup_local_id;
 _GLF_struct_113 _f0;
 mat2x4 _f1;
 uvec2 _f2;
 _GLF_struct_117 _f3;
 _GLF_struct_121 _f4;
} ;

struct _GLF_struct_108 {
 mat2x3 _f0;
 int _f1;
 mat2x4 _f2;
 mat2 _f3;
 vec4 _f4;
 mat3x4 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_107 {
 vec3 _f0;
 uint _f1;
 vec4 _f2;
 vec4 _f3;
 bvec4 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_106 {
 uint _f0;
 mat4x2 _f1;
 bvec2 _f2;
 bvec3 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_109 {
 uvec4 _f0;
 _GLF_struct_106 _f1;
 _GLF_struct_107 _f2;
 bool _f3;
 _GLF_struct_108 _f4;
 mat4x3 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_110 {
 _GLF_struct_109 _f0;
 uint _f1;
 int _injected_loop_counter;
} ;

struct _GLF_struct_103 {
 mat2 _f0;
 uvec3 _f1;
 vec4 _f2;
} ;

struct _GLF_struct_102 {
 vec2 _f0;
 mat4 _f1;
 float _f2;
} ;

struct _GLF_struct_104 {
 float _f0;
 _GLF_struct_102 _f1;
 _GLF_struct_103 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_100 {
 mat4x2 _f0;
 mat3x2 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_99 {
 bvec2 _f0;
 uvec2 _f1;
 uint _f2;
} ;

struct _GLF_struct_98 {
 vec3 _f0;
 mat4x2 _f1;
 uint _f2;
 uvec2 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_101 {
 _GLF_struct_98 _f0;
 _GLF_struct_99 _f1;
 _GLF_struct_100 _f2;
 mat4 _f3;
} ;

struct _GLF_struct_96 {
 uvec3 _f0;
 vec3 _f1;
} ;

struct _GLF_struct_95 {
 mat2x4 _f0;
 vec4 _f1;
 uvec2 _f2;
 vec4 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_94 {
 mat3x4 _f0;
 mat2x4 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_93 {
 bvec4 _f0;
 mat3 _f1;
 bool _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_97 {
 _GLF_struct_93 _f0;
 _GLF_struct_94 _f1;
 _GLF_struct_95 _f2;
 _GLF_struct_96 _f3;
} ;

struct _GLF_struct_91 {
 uvec3 _f0;
} ;

struct _GLF_struct_92 {
 _GLF_struct_91 _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_89 {
 uint _f0;
} ;

struct _GLF_struct_88 {
 int _f0;
 mat4x2 _f1;
 uvec4 _f2;
 uvec3 _f3;
 int _f4;
 mat4x3 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_87 {
 mat2x4 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_86 {
 mat2 _f0;
 uvec2 _f1;
 ivec3 _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_85 {
 ivec2 _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_90 {
 _GLF_struct_85 _f0;
 _GLF_struct_86 _f1;
 _GLF_struct_87 _f2;
 _GLF_struct_88 _f3;
 _GLF_struct_89 _f4;
} ;

struct _GLF_struct_83 {
 mat2x4 _f0;
 uvec3 _f1;
 mat4x2 _f2;
 bvec3 _f3;
 vec3 _f4;
 mat4 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_82 {
 mat3x4 _f0;
 bool _f1;
 int _f2;
} ;

struct _GLF_struct_81 {
 mat3 _f0;
 mat2x4 _f1;
 ivec4 _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_84 {
 _GLF_struct_81 _f0;
 mat3x4 _f1;
 _GLF_struct_82 _f2;
 _GLF_struct_83 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_105 {
 mat4 _f0;
 _GLF_struct_84 _f1;
 _GLF_struct_90 _f2;
 int _injected_loop_counter;
 _GLF_struct_92 _f3;
 _GLF_struct_97 _f4;
 _GLF_struct_101 _f5;
 _GLF_struct_104 _f6;
} ;

struct _GLF_struct_78 {
 mat4 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_77 {
 bvec2 _f0;
 mat2 _f1;
 vec4 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_76 {
 mat4 _f0;
} ;

struct _GLF_struct_79 {
 _GLF_struct_76 _f0;
 uvec4 _f1;
 _GLF_struct_77 _f2;
 _GLF_struct_78 _f3;
} ;

struct _GLF_struct_74 {
 mat4x3 _f0;
 vec3 _f1;
 ivec2 _f2;
 vec3 _f3;
 uvec2 _f4;
 bvec3 _f5;
 float _f6;
 uint workgroup_base;
} ;

struct _GLF_struct_73 {
 bool _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_75 {
 mat3x2 _f0;
 _GLF_struct_73 _f1;
 mat2x3 _f2;
 _GLF_struct_74 _f3;
} ;

struct _GLF_struct_71 {
 ivec2 _f0;
} ;

struct _GLF_struct_72 {
 _GLF_struct_71 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_69 {
 mat2x4 _f0;
 vec3 _f1;
} ;

struct _GLF_struct_70 {
 _GLF_struct_69 _f0;
 bool _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_67 {
 vec2 _f0;
 uvec3 _f1;
 uvec2 _f2;
 uint _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_66 {
 mat2x3 _f0;
 mat2x3 _f1;
 uint _f2;
 uvec3 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_68 {
 mat3x2 _f0;
 _GLF_struct_66 _f1;
 _GLF_struct_67 _f2;
} ;

struct _GLF_struct_64 {
 bvec2 _f0;
 vec3 _f1;
 mat4 _f2;
 vec4 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_65 {
 uvec3 _f0;
 _GLF_struct_64 _f1;
} ;

struct _GLF_struct_80 {
 _GLF_struct_65 _f0;
 _GLF_struct_68 _f1;
 _GLF_struct_70 _f2;
 _GLF_struct_72 _f3;
 _GLF_struct_75 _f4;
 _GLF_struct_79 _f5;
} ;

struct _GLF_struct_61 {
 uvec3 _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_62 {
 _GLF_struct_61 _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_60 {
 vec2 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_59 {
 ivec2 _f0;
 int _f1;
} ;

struct _GLF_struct_57 {
 int _f0;
 mat3 _f1;
 mat3x2 _f2;
 int _f3;
} ;

struct _GLF_struct_56 {
 mat4x3 _f0;
} ;

struct _GLF_struct_58 {
 int _f0;
 bvec4 _f1;
 vec3 _f2;
 ivec2 _f3;
 mat3x4 _f4;
 _GLF_struct_56 _f5;
 _GLF_struct_57 _f6;
} ;

struct _GLF_struct_63 {
 _GLF_struct_58 _f0;
 _GLF_struct_59 _f1;
 ivec4 _f2;
 _GLF_struct_60 _f3;
 uint subgroup_size;
 _GLF_struct_62 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_53 {
 bvec4 _f0;
 ivec2 _f1;
 int _f2;
 uint _f3;
 int _f4;
 uint _f5;
} ;

struct _GLF_struct_52 {
 int _f0;
 int _injected_loop_counter;
 uvec2 _f1;
} ;

struct _GLF_struct_51 {
 mat2x4 _f0;
} ;

struct _GLF_struct_54 {
 ivec4 _f0;
 _GLF_struct_51 _f1;
 bvec3 _f2;
 mat2 _f3;
 mat3x2 _f4;
 _GLF_struct_52 _f5;
 _GLF_struct_53 _f6;
} ;

struct _GLF_struct_49 {
 ivec3 _f0;
 mat2x3 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_48 {
 mat4x3 _f0;
 bvec2 _f1;
 ivec4 _f2;
 mat4x2 _f3;
 mat4x3 _f4;
 mat4x2 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_50 {
 _GLF_struct_48 _f0;
 _GLF_struct_49 _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_46 {
 mat2x4 _f0;
 float _f1;
 vec3 _f2;
 vec4 _f3;
 uint _f4;
 vec2 _f5;
} ;

struct _GLF_struct_45 {
 mat4x3 _f0;
 vec2 _f1;
 vec3 _f2;
 vec3 _f3;
 mat4 _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_44 {
 vec3 _f0;
 bvec2 _f1;
 vec2 _f2;
 mat4x2 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_47 {
 _GLF_struct_44 _f0;
 uint _f1;
 _GLF_struct_45 _f2;
 mat3 _f3;
 _GLF_struct_46 _f4;
} ;

struct _GLF_struct_55 {
 _GLF_struct_47 _f0;
 mat2 _f1;
 _GLF_struct_50 _f2;
 _GLF_struct_54 _f3;
} ;

struct _GLF_struct_41 {
 mat4x2 _f0;
 float _f1;
 mat2x4 _f2;
 vec3 _f3;
 mat3 _f4;
 mat2 _f5;
} ;

struct _GLF_struct_42 {
 bvec2 _f0;
 ivec4 _f1;
 _GLF_struct_41 _f2;
 int _injected_loop_counter;
} ;

struct _GLF_struct_39 {
 mat4 _f0;
} ;

struct _GLF_struct_40 {
 bvec4 _f0;
 mat3x4 _f1;
 _GLF_struct_39 _f2;
} ;

struct _GLF_struct_37 {
 float _f0;
 ivec2 _f1;
 float _f2;
 vec3 _f3;
 mat4 _f4;
 ivec2 _f5;
 vec4 _f6;
} ;

struct _GLF_struct_36 {
 mat4 _f0;
 mat2x3 _f1;
 uint _f2;
 uint _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_35 {
 ivec3 _f0;
 ivec2 _f1;
 uint _f2;
 mat2 _f3;
 mat3x4 _f4;
 uvec2 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_34 {
 ivec3 _f0;
 mat2x3 _f1;
 bvec4 _f2;
 ivec3 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_33 {
 uvec3 _f0;
} ;

struct _GLF_struct_38 {
 _GLF_struct_33 _f0;
 _GLF_struct_34 _f1;
 bvec2 _f2;
 float _f3;
 _GLF_struct_35 _f4;
 _GLF_struct_36 _f5;
 _GLF_struct_37 _f6;
} ;

struct _GLF_struct_31 {
 bool _f0;
 bool _f1;
 mat2x4 _f2;
 mat2 _f3;
 mat3x4 _f4;
} ;

struct _GLF_struct_32 {
 _GLF_struct_31 _f0;
 int _f1;
 bvec2 _f2;
 bool _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_43 {
 _GLF_struct_32 _f0;
 _GLF_struct_38 _f1;
 _GLF_struct_40 _f2;
 uvec4 _f3;
 ivec3 _f4;
 _GLF_struct_42 _f5;
} ;

struct _GLF_struct_29 {
 int _f0;
} ;

struct _GLF_struct_27 {
 ivec3 _f0;
 mat2 _f1;
 ivec3 _f2;
 mat2x3 _f3;
 mat2x3 _f4;
 ivec3 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_26 {
 mat3 _f0;
 bvec2 _f1;
 mat2 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_25 {
 mat3x2 _f0;
 bool _f1;
 mat3x4 _f2;
 vec3 _f3;
 mat3 _f4;
} ;

struct _GLF_struct_28 {
 _GLF_struct_25 _f0;
 _GLF_struct_26 _f1;
 bvec4 _f2;
 uvec4 _f3;
 _GLF_struct_27 _f4;
} ;

struct _GLF_struct_30 {
 uint next_virtual_gid;
 _GLF_struct_28 _f0;
 _GLF_struct_29 _f1;
 uvec3 _f2;
 bool _f3;
} ;

struct _GLF_struct_22 {
 ivec4 _f0;
} ;

struct _GLF_struct_23 {
 _GLF_struct_22 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_21 {
 ivec4 _f0;
 int _injected_loop_counter;
} ;

struct _GLF_struct_19 {
 mat3x2 _f0;
 bvec3 _f1;
 uvec3 _f2;
 uint _f3;
 mat3x2 _f4;
 mat4x2 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_18 {
 bvec2 _f0;
 mat4 _f1;
 mat4x2 _f2;
 bvec3 _f3;
 uvec4 _f4;
 mat4x3 _f5;
 vec4 _f6;
} ;

struct _GLF_struct_20 {
 _GLF_struct_18 _f0;
 ivec4 _f1;
 mat4x2 _f2;
 _GLF_struct_19 _f3;
} ;

struct _GLF_struct_16 {
 uint _f0;
 int _f1;
} ;

struct _GLF_struct_15 {
 uvec4 _f0;
 ivec3 _f1;
 mat4 _f2;
 mat3 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_17 {
 _GLF_struct_15 _f0;
 uvec3 _f1;
 uvec4 _f2;
 _GLF_struct_16 _f3;
 bvec4 _f4;
 mat2x3 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_13 {
 mat2x3 _f0;
 float _f1;
 vec2 _f2;
 mat3 _f3;
 vec4 _f4;
 mat4x2 _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_14 {
 uvec4 _f0;
 vec2 _f1;
 _GLF_struct_13 _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_24 {
 _GLF_struct_14 _f0;
 _GLF_struct_17 _f1;
 _GLF_struct_20 _f2;
 mat2x3 _f3;
 _GLF_struct_21 _f4;
 _GLF_struct_23 _f5;
} ;

struct _GLF_struct_10 {
 mat2x4 _f0;
 mat4x3 _f1;
} ;

struct _GLF_struct_9 {
 ivec3 _f0;
 int _f1;
 vec4 _f2;
 uvec3 _f3;
 bvec4 _f4;
 ivec2 _f5;
 uint workgroup_size;
} ;

struct _GLF_struct_11 {
 _GLF_struct_9 _f0;
 vec2 _f1;
 _GLF_struct_10 _f2;
} ;

struct _GLF_struct_8 {
 mat3x2 _f0;
} ;

struct _GLF_struct_7 {
 mat2 _f0;
} ;

struct _GLF_struct_12 {
 vec4 _f0;
 _GLF_struct_7 _f1;
 _GLF_struct_8 _f2;
 _GLF_struct_11 _f3;
} ;

struct _GLF_struct_5 {
 uvec4 _f0;
} ;

struct _GLF_struct_3 {
 uvec4 _f0;
 ivec4 _f1;
 ivec4 _f2;
 bvec3 _f3;
 uint _f4;
 mat2x4 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_2 {
 bool _f0;
 bvec4 _f1;
 vec4 _f2;
 ivec2 _f3;
 ivec3 _f4;
 uvec4 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_1 {
 mat4x3 _f0;
 vec4 _f1;
 uvec3 _f2;
 bvec3 _f3;
 mat3 _f4;
} ;

struct _GLF_struct_4 {
 float _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
 _GLF_struct_3 _f3;
} ;

struct _GLF_struct_0 {
 ivec4 _f0;
 vec4 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_6 {
 mat2x4 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_4 _f2;
 uint subgroup_id;
 _GLF_struct_5 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 for(_GLF_struct_110 _GLF_struct_replacement_110 = _GLF_struct_110(_GLF_struct_109(uvec4(1u), _GLF_struct_106(1u, mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0 * (1.0))), bvec2(true), bvec3(true), ivec3(1)), _GLF_struct_107(vec3(1.0), 1u, vec4(1.0), vec4(1.0), bvec4(true), mat2x3(1.0)), true, _GLF_struct_108(mat2x3(1.0), 1, mat2x4(1.0), mat2(1.0), vec4(1.0), mat3x4(1.0), mat3x2(1.0)), mat4x3(1.0), mat2x3(1.0)), 1u, int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_110._injected_loop_counter > 0); _GLF_struct_replacement_110._injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(1.0))) - 0.0)))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(_GLF_struct_55 _GLF_struct_replacement_55 = _GLF_struct_55(_GLF_struct_47(_GLF_struct_44(vec3(1.0), bvec2(true), vec2(1.0), mat4x2(1.0), vec4(1.0)), 1u, _GLF_struct_45(mat4x3(1.0), vec2(1.0), vec3(1.0), vec3(1.0), mat4(1.0), mat2x4(1.0)), mat3(1.0), _GLF_struct_46(mat2x4(1.0), 1.0, vec3(1.0), vec4(1.0), 1u, vec2(1.0))), mat2(1.0), _GLF_struct_50(_GLF_struct_48(mat4x3(1.0), bvec2(true), ivec4(1), mat4x2(1.0), mat4x3(1.0), mat4x2(1.0), bvec3(true)), _GLF_struct_49(ivec3(1), mat2x3(1.0), mat2(1.0)), mat4x3(1.0)), _GLF_struct_54(ivec4(1), _GLF_struct_51(mat2x4(1.0)), bvec3(true), mat2(1.0), mat3x2(1.0), _GLF_struct_52(1, 1, uvec2(1u)), _GLF_struct_53(bvec4(true), ivec2(1), 1, 1u, 1, 1u))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_55._f3._f5._injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)); _GLF_struct_replacement_55._f3._f5._injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ((false) || false) && true)), (_GLF_IDENTITY(false, (false) || false)) || false)))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) >> 0) : _GLF_FUZZED(-26190)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(mat2x4(1.0), _GLF_struct_0(ivec4(1), vec4(1.0), bvec3(true)), _GLF_struct_4(_GLF_IDENTITY(1.0, 1.0 * (1.0)), _GLF_struct_1(mat4x3(1.0), _GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), log(vec4(1.0, 1.0, 1.0, 1.0)) + (_GLF_IDENTITY(vec4(1.0), mat4(1.0) * (vec4(1.0))))), (_GLF_IDENTITY(vec4(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_IDENTITY(_GLF_FUZZED(775.935), max(_GLF_FUZZED(775.935), _GLF_IDENTITY(_GLF_FUZZED(775.935), clamp(_GLF_IDENTITY(_GLF_FUZZED(775.935), max(_GLF_FUZZED(775.935), _GLF_IDENTITY(_GLF_FUZZED(775.935), max(_GLF_FUZZED(775.935), _GLF_FUZZED(775.935))))), _GLF_FUZZED(775.935), _GLF_FUZZED(775.935)))))))), log(vec4(1.0, 1.0, 1.0, 1.0)) + (vec4(1.0)))) - sin(vec4(0.0, 0.0, 0.0, 0.0))), uvec3(1u), bvec3(true), mat3(_GLF_IDENTITY(1.0, max(1.0, 1.0)))), _GLF_struct_2(true, bvec4(true), _GLF_IDENTITY(vec4(1.0), mix(vec4(_GLF_FUZZED((-12.06 + 6.9)), _GLF_FUZZED(46.51), (vec4(1.0))[_GLF_IDENTITY(2, int(int(2)))], _GLF_FUZZED(566.171)), vec4(_GLF_IDENTITY((vec4(1.0))[0], abs(0.0) + ((vec4(1.0))[0])), (vec4(1.0))[1], _GLF_FUZZED(336.554), (vec4(1.0))[3]), bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))), ivec2(1), ivec3(1), uvec4(1u), mat4(1.0)), _GLF_struct_3(uvec4(1u), ivec4(1), ivec4(1), bvec3(true), 1u, mat2x4(1.0), mat3(1.0))), gl_SubgroupID, _GLF_struct_5(uvec4(1u)));
 _GLF_struct_63 _GLF_struct_replacement_63 = _GLF_struct_63(_GLF_struct_58(1, bvec4(true), vec3(1.0), ivec2(1), mat3x4(1.0), _GLF_struct_56(mat4x3(1.0)), _GLF_struct_57(1, mat3(1.0), mat3x2(1.0), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ 0))), _GLF_struct_59(ivec2(1), 1), ivec4(1), _GLF_struct_60(vec2(1.0), vec2(1.0)), gl_SubgroupSize, _GLF_struct_62(_GLF_struct_61(uvec3(1u), ivec4(1)), mat3x4(1.0)), vec2(1.0));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || false)))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)))))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     return;
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), bool(bvec3(! (_GLF_IDENTITY(false, ! (! (false)))), true, true)))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
      barrier();
    }
   else
    {
    }
   barrier();
  }
 _GLF_struct_122 _GLF_struct_replacement_122 = _GLF_struct_122(gl_SubgroupInvocationID, _GLF_struct_113(_GLF_struct_111(uvec4(1u), ivec2(1), vec2(1.0), _GLF_IDENTITY(mat4(1.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))) + (mat4(1.0))), mat3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(241.766)))), mat4x2(1.0)), _GLF_struct_112(uvec3(1u), mat4x2(1.0), bvec4(true), 1, ivec4(1), ivec3(1), bvec3(true))), mat2x4(1.0), uvec2(1u), _GLF_struct_117(_GLF_struct_114(bvec3(true), bvec3(true), mat3(1.0), 1u, mat3(1.0), mat3(1.0), mat4(1.0)), _GLF_struct_115(uvec2(1u)), _GLF_struct_116(mat3x2(1.0), vec4(1.0), mat3x4(1.0), mat2x3(1.0), mat4x2(1.0), mat2x3(1.0))), _GLF_struct_121(_GLF_struct_118(uvec2(1u), mat2x3(1.0), mat4(1.0), ivec2(1), mat4x3(1.0), mat3x4(1.0)), _GLF_struct_119(uvec4(1u), ivec3(1)), _GLF_struct_120(mat3(1.0), mat4x3(1.0), bvec2(true), ivec3(1), 1), bvec4(true)));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, true, false))))), (injectionSwitch.x > injectionSwitch.y)), true))))
    {
     if(_GLF_DEAD(false))
      continue;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (0 | (0 | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), _GLF_IDENTITY(false, bool(bvec2(false, false))), false)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false))), false, true))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(8792.2562)), vec2(_GLF_FUZZED(384.741), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))))
            barrier();
           return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, (0) * 1)))); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(_GLF_struct_24 _GLF_struct_replacement_24 = _GLF_struct_24(_GLF_struct_14(uvec4(1u), vec2(1.0), _GLF_struct_13(mat2x3(1.0), 1.0, vec2(1.0), mat3(1.0), vec4(1.0), mat4x2(1.0), mat4x2(1.0)), bvec3(true)), _GLF_struct_17(_GLF_struct_15(uvec4(1u), _GLF_IDENTITY(ivec3(1), (ivec3(1)) / ivec3(1, 1, 1)), mat4(1.0), _GLF_IDENTITY(mat3(1.0), transpose(transpose(mat3(1.0)))), mat4x3(1.0)), uvec3(1u), uvec4(1u), _GLF_struct_16(1u, 1), bvec4(true), mat2x3(1.0), mat2x3(1.0)), _GLF_struct_20(_GLF_struct_18(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec2(bvec2(true))), _GLF_IDENTITY(bvec2(bvec2(bvec2(bvec2(bvec2(true))))), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), true))))))), bvec2(bvec4(bvec2(bvec2(bvec2(bvec2(bvec2(true))))), true, false)))))))), mat4(1.0), mat4x2(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(979.214)), float(1.0), bool(true))), 1.0))), bvec3(true), uvec4(1u), mat4x3(1.0), vec4(1.0)), ivec4(1), mat4x2(1.0), _GLF_struct_19(mat3x2(1.0), bvec3(true), uvec3(1u), 1u, mat3x2(1.0), mat4x2(1.0), ivec2(1))), mat2x3(1.0), _GLF_struct_21(ivec4(1), 1), _GLF_struct_23(_GLF_struct_22(ivec4(1)), ivec2(1))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_24._f4._injected_loop_counter != 0); _GLF_struct_replacement_24._f4._injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     else
      {
      }
     continue;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      continue;
     continue;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      break;
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, determinant(mat3(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, log(1.0), 1.0, 1.0, 1.0, 1.0)), (_GLF_IDENTITY(vec2(mat4(injectionSwitch, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, log(1.0), 1.0, 1.0, 1.0, 1.0)), vec2(0.0, 0.0) + (vec2(mat4(injectionSwitch, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, log(1.0), 1.0, 1.0, 1.0, 1.0))))) / vec2(1.0, 1.0))).y))))
  barrier();
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(vec4(1.0), _GLF_struct_7(mat2(1.0)), _GLF_struct_8(mat3x2(1.0)), _GLF_struct_11(_GLF_struct_9(ivec3(1), 1, vec4(1.0), uvec3(1u), bvec4(true), ivec2(1), _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(uvec4(gl_WorkGroupSize, 1u)), _GLF_IDENTITY((uvec3(uvec4(gl_WorkGroupSize, 1u))), ((uvec3(uvec4(gl_WorkGroupSize, 1u)))) | uvec3(0u, 0u, 0u)) << uvec3(0u, 0u, 0u))).x), vec2(1.0), _GLF_struct_10(mat2x4(1.0), mat4x3(1.0))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(false))))), bool(_GLF_IDENTITY(bvec3(false, true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, true))))), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, true)), ! (! (bool(bvec3(true, false, true)))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, false)), bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), false, false)), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, false)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), false, false)), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), false, false)), true)))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), false, false)), true)))), false)))))), true)))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 else
  {
  }
 _GLF_struct_80 _GLF_struct_replacement_80 = _GLF_struct_80(_GLF_struct_65(uvec3(1u), _GLF_struct_64(bvec2(true), vec3(1.0), mat4(1.0), vec4(1.0), uvec4(1u))), _GLF_struct_68(mat3x2(1.0), _GLF_struct_66(mat2x3(1.0), mat2x3(_GLF_IDENTITY(1.0, 1.0 * (1.0))), 1u, uvec3(1u), vec2(1.0)), _GLF_struct_67(vec2(1.0), uvec3(1u), uvec2(1u), 1u, uvec3(1u))), _GLF_struct_70(_GLF_struct_69(mat2x4(1.0), vec3(1.0)), true, bvec4(true)), _GLF_struct_72(_GLF_struct_71(ivec2(1)), ivec3(1)), _GLF_struct_75(mat3x2(1.0), _GLF_struct_73(true, uvec4(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(11097u) : _GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(1u, uint(uvec2(1u, 1u))), 1u)), 0u | (uint(uvec2(_GLF_IDENTITY(1u, uint(uvec2(1u, 1u))), 1u))))))))), mat2x3(1.0), _GLF_struct_74(mat4x3(1.0), vec3(1.0), ivec2(1), vec3(1.0), uvec2(1u), bvec3(true), 1.0, _GLF_struct_replacement_12._f3._f0.workgroup_size * workgroup_id)), _GLF_struct_79(_GLF_struct_76(mat4(1.0)), uvec4(1u), _GLF_struct_77(bvec2(true), mat2(1.0), vec4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4x3(1.0, cos(0.0), 0.0, 0.0, sin(0.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), sin(0.0)), (false ? _GLF_FUZZED(mat4x3(556.668, 5.2, 202.347, -34.16, 7051.1066, 3574.9384, -1192.5430, 3.4, -0.8, 2.1, 3005.2880, 810.282)) : mat4x3(1.0, cos(0.0), 0.0, 0.0, sin(0.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0, determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), sin(0.0))))))), mat3x2(1.0)), _GLF_struct_78(mat4(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((float(108350u) * 7.2))), bool(false)))), mat4x2(1.0))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec3(injectionSwitch.x, 1.0, 1.0)), clamp(float(vec3(injectionSwitch.x, 1.0, 1.0)), float(vec3(injectionSwitch.x, 1.0, 1.0)), float(vec3(injectionSwitch.x, 1.0, 1.0))))), injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
        }
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(true, true && (true)))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))))))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          break;
        }
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint virtual_gid = _GLF_struct_replacement_80._f4._f3.workgroup_base + _GLF_struct_replacement_6.subgroup_id * _GLF_struct_replacement_63.subgroup_size + _GLF_struct_replacement_122.subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), (false) && true)), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 _GLF_struct_30 _GLF_struct_replacement_30 = _GLF_struct_30(_GLF_struct_replacement_80._f4._f3.workgroup_base + _GLF_struct_replacement_6.subgroup_id * _GLF_struct_replacement_63.subgroup_size + (_GLF_IDENTITY((_GLF_struct_replacement_122.subgroup_local_id + 1), ((_GLF_struct_replacement_122.subgroup_local_id + 1)) * 1u) % _GLF_struct_replacement_63.subgroup_size), _GLF_struct_28(_GLF_struct_25(mat3x2(1.0), true, mat3x4(1.0), vec3(1.0), _GLF_IDENTITY(mat3(1.0), (true ? mat3(1.0) : _GLF_FUZZED(mat3(-4.9, 0.1, -5826.9225, -1.5, -1.1, -473.837, 1.6, -93.53, -2.6))))), _GLF_struct_26(mat3(1.0), _GLF_IDENTITY(bvec2(true), bvec2(_GLF_IDENTITY(bvec3(bvec2(true), _GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), false, false)))) || false)), bool(bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), false, false)))) || false)))))), bvec3(bvec4(bvec3(bvec2(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(70.47), _GLF_FUZZED((1.5))), bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (_GLF_IDENTITY(! (false || (false)), ! (! (! (false || (false)))))))), false))).y), _GLF_IDENTITY(bool(bool((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(70.47), _GLF_FUZZED((1.5))), bvec2(_GLF_IDENTITY(false, false || (false)), false))).y))), bool(bool(bool(bool((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(70.47), _GLF_FUZZED((1.5))), bvec2(_GLF_IDENTITY(false, false || (false)), false))).y))))))))))))), mat2(1.0), uvec2(1u)), bvec4(true), uvec4(1u), _GLF_struct_27(ivec3(1), mat2(1.0), ivec3(1), mat2x3(1.0), mat2x3(_GLF_IDENTITY(1.0, float(mat3x4(1.0, 0.0, 0.0, 1.0, determinant(mat2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), abs(_GLF_ZERO(0.0, injectionSwitch.x)), 1.0, 0.0, 0.0, length(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0))), 1.0, 0.0)))), ivec3(1), bvec2(true))), _GLF_struct_29(1), uvec3(1u), true);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, true))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec2(true, true)))), ! (! (bool(_GLF_IDENTITY(true, bool(bvec2(true, true)))))))))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       return;
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
     for(_GLF_struct_105 _GLF_struct_replacement_105 = _GLF_struct_105(mat4(1.0), _GLF_struct_84(_GLF_struct_81(mat3(1.0), mat2x4(1.0), ivec4(1), ivec2(1)), mat3x4(1.0), _GLF_struct_82(mat3x4(1.0), true, 1), _GLF_struct_83(mat2x4(1.0), uvec3(1u), mat4x2(1.0), bvec3(true), vec3(1.0), mat4(1.0), mat3x2(1.0)), mat4x3(1.0)), _GLF_struct_90(_GLF_struct_85(ivec2(1), mat2x3(1.0)), _GLF_struct_86(mat2(1.0), uvec2(1u), ivec3(1), bvec3(true)), _GLF_struct_87(mat2x4(1.0), vec2(1.0)), _GLF_struct_88(_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))), mat4x2(1.0), uvec4(1u), uvec3(1u), 1, mat4x3(1.0), uvec4(1u)), _GLF_struct_89(1u)), 0, _GLF_struct_92(_GLF_struct_91(uvec3(1u)), mat2x3(1.0)), _GLF_struct_97(_GLF_struct_93(bvec4(true), mat3(_GLF_IDENTITY(1.0, max(1.0, 1.0))), true, bvec4(true)), _GLF_struct_94(mat3x4(1.0), mat2x4(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), mat3(1.0)), _GLF_struct_95(mat2x4(1.0), vec4(1.0), uvec2(1u), vec4(1.0), mat2(1.0)), _GLF_struct_96(uvec3(1u), vec3(1.0))), _GLF_struct_101(_GLF_struct_98(vec3(1.0), mat4x2(1.0), 1u, _GLF_IDENTITY(uvec2(1u), (uvec2(1u)) + uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), bvec2(true)), _GLF_struct_99(bvec2(true), uvec2(1u), 1u), _GLF_struct_100(mat4x2(1.0), mat3x2(1.0), bvec2(true)), mat4(1.0)), _GLF_struct_104(1.0, _GLF_struct_102(vec2(1.0), mat4(1.0), 1.0), _GLF_struct_103(mat2(1.0), uvec3(1u), vec4(1.0)), mat3x4(1.0))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_105._injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, (1 ^ 0) / 1), clamp(_GLF_IDENTITY(1 ^ _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) * 1), 0)), (1 ^ 0) / 1), _GLF_IDENTITY(1 ^ 0, (1 ^ 0) / 1), _GLF_IDENTITY(1 ^ 0, (1 ^ 0) / 1))))); _GLF_struct_replacement_105._injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))), float(_GLF_FUZZED(-945.071)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), max(injectionSwitch, injectionSwitch)).y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_FUZZED(-355.856))))); _injected_loop_counter ++)
                {
                 return;
                 if(_GLF_DEAD(false))
                  continue;
                }
              }
            }
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, tan(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))).y))))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                continue;
              }
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bool(! (false))), bool(bvec3(bool(bool(! (false))), false, false)))))))))));
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
        }
       else
        {
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          continue;
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))))))
          barrier();
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)))))), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         return;
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))) || false))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           for(int _injected_loop_counter = (76385 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_FUZZED(8350.0601)))), (int(_GLF_ONE(1.0, injectionSwitch.y))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false), ((false)) && _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, true && (true)))))), true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY((false), ((false)) && true), true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), ((false)) && true), true, false)))))))))))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          return;
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, true)))))
            barrier();
           return;
           if(_GLF_DEAD(false))
            barrier();
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
          {
           barrier();
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(mat2x4(mat2(1.0) * (injectionSwitch), 1.0, 1.0, tan(0.0), length(vec2(0.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0)))).y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 atomicStore(buf[virtual_gid], uint(_GLF_IDENTITY(1, (1) ^ 0)), 4, 64, _GLF_IDENTITY(4, _GLF_IDENTITY((4), (_GLF_IDENTITY((4), (true ? _GLF_IDENTITY((4), ((4)) | (_GLF_IDENTITY((4), ((4)) >> 0))) : _GLF_FUZZED(61148)))) - 0) | 0));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 do
  {
   if(_GLF_struct_replacement_122.subgroup_local_id + 1 < _GLF_struct_replacement_63.subgroup_size)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(_GLF_struct_125 _GLF_struct_replacement_125 = _GLF_struct_125(_GLF_struct_124(bvec4(true), (0 | _GLF_IDENTITY(0, (0) - 0)), _GLF_struct_123(mat2(1.0)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_struct_replacement_125._f0._injected_loop_counter < 1), bool(bool(_GLF_WRAPPED_LOOP(_GLF_struct_replacement_125._f0._injected_loop_counter < 1)))); _GLF_struct_replacement_125._f0._injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true, false)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
            barrier();
           barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        continue;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           continue;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           continue;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ (0 | 1))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             break;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bvec2(bool(bvec3(false, false, true)), true))))))
              break;
             barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           break;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, bool(bool(false)))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           break;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)))) && true)))) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))) || false)))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false)), ! (! (bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ((false)) && true))))), ! (! (! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(((false)), false || (((false)))) && true))))))))), true, false))))))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           continue;
          }
        }
       atomicStore(buf[_GLF_struct_replacement_30.next_virtual_gid], _GLF_IDENTITY(uint(2), clamp(_GLF_IDENTITY(uint(2), _GLF_IDENTITY(clamp(uint(2), uint(2), uint(2)), ~ (~ (_GLF_IDENTITY(clamp(uint(2), uint(2), uint(2)), (clamp(uint(2), uint(2), uint(2))) | (clamp(uint(2), uint(2), uint(2)))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(2), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(virtual_gid) : uint(2))), max(uint(2), uint(2))), uint(2))), 4, 64, 4);
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           continue;
          }
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     subgroupAll(_GLF_IDENTITY(false, true && (false)));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(_GLF_IDENTITY(bvec2(! (! (false)), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(! (! (false)), false), bvec2(bvec4(bvec2(! (! (false)), false), false, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
        barrier();
       atomicStore(buf[_GLF_struct_replacement_30.next_virtual_gid], uint(2), _GLF_IDENTITY(4, (4) ^ 0), 64, _GLF_IDENTITY(4, (0 | 0) + (_GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (false ? _GLF_FUZZED(_GLF_IDENTITY(38897, (38897) | (38897))) : _GLF_IDENTITY(4, int(ivec2(4, 1)))))), ~ (~ (~ (_GLF_IDENTITY(4, (false ? _GLF_FUZZED(38897) : _GLF_IDENTITY(4, int(_GLF_IDENTITY(ivec2(4, 1), clamp(ivec2(4, 1), _GLF_IDENTITY(ivec2(4, 1), ivec2(ivec2(ivec2(4, 1)))), ivec2(4, 1))))))))))))))))));
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     subgroupAll(true);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       break;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(float(vec4(_GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), (false ? _GLF_FUZZED(7711.8086) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)))), 1.0, _GLF_IDENTITY(log(1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(log(1.0), 0.0, sqrt(1.0), 1.0, 0.0, 1.0), (mat3x2(log(1.0), 0.0, sqrt(1.0), 1.0, 0.0, 1.0)) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), float(mat2x3(float(_GLF_IDENTITY(mat3x2(log(1.0), 0.0, sqrt(1.0), 1.0, 0.0, 1.0), (mat3x2(log(1.0), 0.0, sqrt(1.0), 1.0, 0.0, 1.0)) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 0.0, 1.0, 0.0, 1.0, 1.0)))), round(length(normalize(_GLF_IDENTITY(vec2(1.0, 1.0), clamp(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2((vec2(1.0, 1.0))[0], _GLF_FUZZED(-225.789)), vec2(_GLF_FUZZED((-9.1)), (vec2(1.0, 1.0))[1]), bvec2(false, true))), vec2(1.0, 1.0)))))))), max(float(vec4(_GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), (false ? _GLF_FUZZED(7711.8086) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)))) - 0.0)))), 1.0, log(1.0), round(length(normalize(vec2(1.0, 1.0)))))), float(vec4(_GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), (false ? _GLF_IDENTITY(_GLF_FUZZED(7711.8086), mix(float(_GLF_FUZZED(-7.6)), float(_GLF_IDENTITY(_GLF_FUZZED(7711.8086), (_GLF_FUZZED(7711.8086)) / 1.0)), bool(true))) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)))), 1.0, log(1.0), round(length(normalize(vec2(1.0, 1.0)))))))), 0.0 + (_GLF_IDENTITY(float(vec4(_GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), (false ? _GLF_FUZZED(7711.8086) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)))), 1.0, _GLF_IDENTITY(log(1.0), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(log(1.0), 0.0, sqrt(1.0), 1.0, 0.0, 1.0), (mat3x2(log(1.0), 0.0, sqrt(1.0), 1.0, 0.0, 1.0)) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), float(mat2x3(float(_GLF_IDENTITY(mat3x2(log(1.0), 0.0, sqrt(1.0), 1.0, 0.0, 1.0), (mat3x2(log(1.0), 0.0, sqrt(1.0), 1.0, 0.0, 1.0)) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 0.0, 1.0, 0.0, 1.0, 1.0)))), round(length(normalize(_GLF_IDENTITY(vec2(1.0, 1.0), clamp(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2((vec2(1.0, 1.0))[0], _GLF_FUZZED(-225.789)), vec2(_GLF_FUZZED((-9.1)), (vec2(1.0, 1.0))[1]), bvec2(false, true))), vec2(1.0, 1.0)))))))), max(float(vec4(_GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), (false ? _GLF_FUZZED(7711.8086) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)))) - 0.0)))), 1.0, log(1.0), round(length(normalize(vec2(1.0, 1.0)))))), float(vec4(_GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), (false ? _GLF_IDENTITY(_GLF_FUZZED(7711.8086), mix(float(_GLF_FUZZED(-7.6)), float(_GLF_IDENTITY(_GLF_FUZZED(7711.8086), (_GLF_FUZZED(7711.8086)) / 1.0)), bool(true))) : min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)))), 1.0, log(1.0), round(length(normalize(vec2(1.0, 1.0)))))))))))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, true))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * sqrt(1.0)) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(_GLF_IDENTITY(true, bool(bool(true))), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)))))))))) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - length(vec4(0.0, 0.0, 0.0, 0.0))) > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    barrier();
   for(_GLF_struct_43 _GLF_struct_replacement_43 = _GLF_struct_43(_GLF_struct_32(_GLF_struct_31(true, true, mat2x4(1.0), mat2(1.0), mat3x4(1.0)), 1, bvec2(true), true, bvec3(true)), _GLF_struct_38(_GLF_struct_33(uvec3(1u)), _GLF_struct_34(ivec3(1), mat2x3(1.0), bvec4(true), ivec3(1), mat4x3(1.0)), bvec2(true), 1.0, _GLF_struct_35(ivec3(1), ivec2(1), 1u, mat2(1.0), mat3x4(1.0), uvec2(1u), mat3x4(1.0)), _GLF_struct_36(mat4(1.0), mat2x3(1.0), 1u, 1u, mat2x3(1.0)), _GLF_struct_37(1.0, ivec2(1), 1.0, vec3(1.0), mat4(1.0), ivec2(1), vec4(1.0))), _GLF_struct_40(bvec4(true), mat3x4(1.0), _GLF_struct_39(mat4(1.0))), uvec4(1u), ivec3(1), _GLF_struct_42(bvec2(true), ivec4(1), _GLF_struct_41(mat4x2(1.0), 1.0, mat2x4(1.0), vec3(1.0), mat3(1.0), mat2(1.0)), (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_43._f5._injected_loop_counter > 0); _GLF_struct_replacement_43._f5._injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 | 0) ^ 0)); _injected_loop_counter --)
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
