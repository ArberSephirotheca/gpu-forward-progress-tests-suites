#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0), _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter))), ((_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0))))) | ((_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter))))) | int(_GLF_ZERO(0.0, injectionSwitch.x))) > _GLF_IDENTITY(0, (0) | (0)), (_injected_loop_counter > 0) || _GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, false), false)), bvec3(bvec4(bvec3(bvec4(bvec3(false, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))), false), false)), true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, false), false)), bvec3(bvec4(bvec3(bvec4(bvec3(false, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))), false), false)), true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec4(false, true, true, true))) || (false)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, false, false))))))), true))), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false), _GLF_IDENTITY(false, (false) || false))), bvec3(bvec4(bvec3(bvec4(bvec3(false, _GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(false, false || (false))), false)), true)))))))))); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), bool(bvec2(bool(true), false)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), bool(bvec2(bool(true), false)))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(true), bool(bvec2(bool(true), false))))), false || (bool(bool(_GLF_IDENTITY(bool(true), bool(bvec2(bool(true), false)))))))))) && true)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x < injectionSwitch.y), bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, max(1.0, 1.0)) : _GLF_FUZZED(dot(vec3(-63.37, injectionSwitch), vec3(-809.509, 6.5, 6.8))))), 1.0)).x < injectionSwitch.y)))))))) && (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ((false)) && true))))))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), true && (bool(bvec2(true, true)))))) && true), false, false, true)))), bool(_GLF_IDENTITY(bool(true), bool(bvec2(_GLF_IDENTITY(bool(true), (bool(true)) || false), false))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-10.18) : 1.0)), 1.0) * ((injectionSwitch))) / vec2(1.0, 1.0)).x < injectionSwitch.y), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), ((injectionSwitch) / vec2(1.0, 1.0)) - vec2(0.0, 0.0))), mat2(_GLF_IDENTITY(1.0, min(1.0, 1.0))) * (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-6511.8125) : 1.0))) * 1.0), 1.0), ((injectionSwitch) / vec2(1.0, 1.0)) - vec2(0.0, 0.0))))).x < injectionSwitch.y))), bool(bvec2(bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), ((injectionSwitch) / vec2(1.0, 1.0)) - vec2(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-977.379)), bool(false)))), float(_GLF_FUZZED(28.21)), bool(_GLF_IDENTITY(false, true && (false)))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), ((injectionSwitch) / vec2(1.0, 1.0)) - vec2(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-977.379)), bool(false)))), float(_GLF_FUZZED(28.21)), bool(_GLF_IDENTITY(false, true && (false)))))))), vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), ((injectionSwitch) / vec2(1.0, 1.0)) - vec2(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-977.379)), bool(false)))), float(_GLF_FUZZED(28.21)), bool(_GLF_IDENTITY(false, true && (false)))))))), abs(1.0), 1.0, 1.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), ((injectionSwitch) / vec2(1.0, 1.0)) - vec2(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-977.379)), bool(false)))), float(_GLF_FUZZED(28.21)), bool(_GLF_IDENTITY(false, true && (false)))))))), mix(vec2((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), ((injectionSwitch) / vec2(1.0, 1.0)) - vec2(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-977.379)), bool(false)))), float(_GLF_FUZZED(28.21)), bool(_GLF_IDENTITY(false, true && (false)))))))))[0], (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), ((injectionSwitch) / vec2(1.0, 1.0)) - vec2(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-977.379)), bool(false)))), float(_GLF_FUZZED(28.21)), bool(_GLF_IDENTITY(false, true && (false)))))))))[1]), vec2(_GLF_FUZZED(7712.7538), _GLF_FUZZED(-2.5)), bvec2(false, false))))).x < injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false || (_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), _GLF_IDENTITY(true && (bool(bvec2(true, true))), ! (_GLF_IDENTITY(! (true && (bool(bvec2(true, true)))), true && (! (true && (bool(bvec2(true, true))))))))))) && true), false, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))), true && (bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))), true)))), bool(_GLF_IDENTITY(bool(true), bool(bvec2(_GLF_IDENTITY(bool(true), _GLF_IDENTITY((bool(true)), ! (! ((bool(true))))) || false), false))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-10.18) : 1.0)), 1.0) * ((injectionSwitch))) / vec2(1.0, 1.0)).x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(117.247) : _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y))))), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), ((injectionSwitch) / vec2(1.0, 1.0)) - vec2(0.0, 0.0))), mat2(_GLF_IDENTITY(1.0, min(1.0, 1.0))) * (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-6511.8125) : 1.0))) * 1.0), 1.0), ((injectionSwitch) / vec2(1.0, 1.0)) - vec2(0.0, 0.0))))).x < injectionSwitch.y))), bool(bvec2(bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))), ((injectionSwitch) / vec2(1.0, 1.0)) - vec2(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-977.379)), bool(false)))), float(_GLF_FUZZED(28.21)), bool(_GLF_IDENTITY(false, true && (false)))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), ((injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))) - vec2(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_IDENTITY(_GLF_FUZZED(-977.379), float(mat3x4(_GLF_FUZZED(-977.379), cos(0.0), _GLF_ONE(1.0, injectionSwitch.y), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, tan(0.0))))), bool(false)))), float(_GLF_FUZZED(_GLF_IDENTITY(28.21, min(_GLF_IDENTITY(28.21, (28.21) / 1.0), 28.21)))), bool(_GLF_IDENTITY(false, true && (false)))))))), vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(_GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0), ((injectionSwitch) / vec2(1.0, 1.0)) - vec2(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-977.379)), bool(false))), max(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-977.379)), bool(false))), _GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-977.379)), bool(false))), 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-977.379)), bool(false))), clamp(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-977.379)), bool(false))), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-977.379)), bool(false))), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-977.379)), bool(false)))))))))), float(_GLF_FUZZED(28.21)), bool(_GLF_IDENTITY(false, true && (false)))))))), abs(1.0), 1.0, 1.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), ((injectionSwitch) / vec2(1.0, 1.0)) - vec2(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-977.379)), _GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (bool(false)), ! (! (! (bool(false)))))))))), float(_GLF_FUZZED(28.21)), bool(_GLF_IDENTITY(false, true && (false)))))))), mix(vec2((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), ((injectionSwitch) / vec2(1.0, 1.0)) - vec2(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-977.379)), bool(_GLF_IDENTITY(false, true && (false)))))), float(_GLF_FUZZED(28.21)), bool(_GLF_IDENTITY(false, true && (false)))))))))[0], (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), ((injectionSwitch) / vec2(1.0, 1.0)) - vec2(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-977.379)), bool(false)))), float(_GLF_FUZZED(28.21)), bool(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) && true))))))))[1]), vec2(_GLF_FUZZED(7712.7538), _GLF_FUZZED(-2.5)), bvec2(false, false))))).x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 0.0, 0.0)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (! (false)))))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (! (false)))))), true, false, false)), ! (! (_GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (! (false)))))), true, false, false)), (bool(bvec4((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (! (false)))))), true, false, false))) && true))))))), bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))), bool(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (! (false)))))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (! (false)))))), true, false, false)), ! (! (_GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (! (false)))))), true, false, false)), (bool(bvec4((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (! (false)))))), true, false, false))) && true))))))), bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), false, false)), bool(bvec3(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, _GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), bool(_GLF_IDENTITY(bool(true), bool(bvec2(bool(true), false))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0 * (1.0)), 1.0)), clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, 1.0 * _GLF_IDENTITY((1.0), ((1.0)) * 1.0)), 1.0)), mix(vec2(_GLF_FUZZED(5586.6028), _GLF_FUZZED(104.269)), vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0 * (1.0)), 1.0)))[0], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0)))[1]), bvec2(true, true))))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0)))).x < injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), clamp(_GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch))) / vec2(1.0, 1.0), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(mat4((injectionSwitch), _GLF_IDENTITY(log(1.0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-9.9) : log(1.0))), 0.0, 1.0, sqrt(1.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0), (mat4((injectionSwitch), log(1.0), 0.0, 1.0, sqrt(1.0), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) / vec2(1.0, 1.0), (true ? (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.0), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(4649.6746)), bvec2(true, false)))) / vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0)))) / 1.0), 1.0) : _GLF_FUZZED(injectionSwitch))), (injectionSwitch) / vec2(1.0, 1.0)))).x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-351.996)), bool(false)))))))) && (_GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((! (false)), (_GLF_IDENTITY((! (false)), false || ((! (false))))) && true))), ! (! (bool(bool(_GLF_IDENTITY((! (false)), (_GLF_IDENTITY((! (false)), false || ((! (false))))) && true)))))))))), ((_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((! (false)), (_GLF_IDENTITY((! (false)), _GLF_IDENTITY(false, false || (false)) || ((! (false))))) && true))), ! (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((! (false)), (_GLF_IDENTITY(_GLF_IDENTITY((! (false)), false || ((! (false)))), ! (! (_GLF_IDENTITY((! (false)), false || ((! _GLF_IDENTITY((false), ((false)) || false)))))))) && true))), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((! (false)), (_GLF_IDENTITY(_GLF_IDENTITY((! (false)), false || ((! (false)))), ! (! (_GLF_IDENTITY((! (false)), false || ((! _GLF_IDENTITY((false), ((false)) || false)))))))) && true))), bool(bvec4(bool(bool(_GLF_IDENTITY((! (false)), (_GLF_IDENTITY(_GLF_IDENTITY((! (false)), false || ((! (false)))), ! (! (_GLF_IDENTITY((! (false)), false || ((! _GLF_IDENTITY((false), ((false)) || false)))))))) && true))), true, true, true)))) && true))))))))) && true)))), bool(bvec4(bool(bvec3(_GLF_IDENTITY(false, _GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bvec2(bool(true), false))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) / vec2(1.0, 1.0)), vec2(_GLF_IDENTITY(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) / vec2(1.0, 1.0)), min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) / vec2(1.0, 1.0)))), 0.0), (true ? vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) / vec2(1.0, 1.0)), min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) / vec2(1.0, 1.0)))), 0.0) : _GLF_FUZZED(vec3(-22.12, -1.4, 4.1)))))).x < injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-4.5)))) * 1.0)) + 0.0))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.0)), float(1.0), bool(true))))).x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) / sqrt(cos(vec2(0.0, 0.0)))).y, bool(bool(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.0)), float(1.0), bool(true))))).x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) / sqrt(cos(vec2(0.0, 0.0)))).y)))), bool(bool((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x < injectionSwitch.y)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], _GLF_FUZZED(-8.5)), vec2(_GLF_FUZZED(908.540), ((injectionSwitch))[1]), bvec2(false, true))), min(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], _GLF_FUZZED(-8.5)), vec2(_GLF_FUZZED(908.540), ((injectionSwitch))[1]), bvec2(false, true))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], _GLF_FUZZED(-8.5)), vec2(_GLF_FUZZED(908.540), ((injectionSwitch))[1]), bvec2(false, true))), (_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], _GLF_FUZZED(-8.5)), vec2(_GLF_FUZZED(908.540), ((injectionSwitch))[1]), bvec2(false, true)))) - vec2(0.0, 0.0)))) / vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.0)), float(1.0), _GLF_IDENTITY(bool(true), (bool(true)) || false))))).x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) / sqrt(cos(vec2(0.0, 0.0)))).y), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) / vec2(1.0, 1.0)).x < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))), max((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))) / vec2(1.0, 1.0)).x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(637.937, -9.6)) : (injectionSwitch))) / vec2(1.0, 1.0)).x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), bool(bool((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(637.937, -9.6)) : (injectionSwitch))) / vec2(1.0, 1.0)).x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), bool(bool((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x < injectionSwitch.y))))), false || (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(637.937, -9.6)) : (injectionSwitch))) / vec2(1.0, 1.0), (_GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(637.937, -9.6)) : (injectionSwitch))) / vec2(1.0, 1.0)) * mat2(1.0))).x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), bool(bool((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x < injectionSwitch.y)))))))))) && true), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0)).x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), bool(bool((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x < injectionSwitch.y)))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), _GLF_IDENTITY(((injectionSwitch) / vec2(1.0, 1.0)) * mat2(1.0), mat2(1.0) * (((injectionSwitch) / vec2(1.0, 1.0)) * mat2(1.0)))))) - vec2(0.0, 0.0)).x < injectionSwitch.y), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), _GLF_IDENTITY(vec2(_GLF_FUZZED(75.19), _GLF_FUZZED(vec4(39.17, -1.6, 4.6, 127.096).r)), vec2(mat2x4(vec2(_GLF_FUZZED(75.19), _GLF_FUZZED(vec4(39.17, -1.6, 4.6, 127.096).r)), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) / vec2(1.0, 1.0)).x < injectionSwitch.y)), true && (bool((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), max(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0)), _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))) / vec2(1.0, 1.0)).x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))))) && true), _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-6714.8386), _GLF_FUZZED(964.879)), bvec2(false, false))))), injectionSwitch, injectionSwitch)).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, true && (true))))))))) && (_GLF_IDENTITY(false, ! (! (false))))), false, false)), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))), _GLF_IDENTITY(true, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, false)), false || (_GLF_IDENTITY(bool(bvec3(true, true, false)), false || (bool(bvec3(true, true, false))))))) && (true)), true))), true, false))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(0, (false ? _GLF_FUZZED((-36026 ^ -80022)) : 0)) & -25251), clamp(_GLF_IDENTITY((0 & -25251), ((0 & -25251)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(0, max(0, 0)), 1)), 0 | (int(ivec2(_GLF_IDENTITY(0, max(0, 0)), 1))))) & -25251), _GLF_IDENTITY((0 & -25251), min((0 & -25251), (_GLF_IDENTITY(0 & -25251, clamp(_GLF_IDENTITY(0 & -25251, ~ (_GLF_IDENTITY(~ (0 & -25251), (~ (0 & -25251)) | (~ (0 & -25251))))), _GLF_IDENTITY(0 & -25251, 0 | (0 & -25251)), 0 & -25251))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, 0 ^ (1)))), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(1, 0 ^ (1)), 1, 1)), (int(ivec3(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), max(ivec2(1, ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, max(3, 3))), int(3)))), ivec2(1, ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))))))))), 1, _GLF_IDENTITY(1, int(int(1)))))) | 0))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), _GLF_IDENTITY(false, (false) || false) || (bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((1.1 + 3.6)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((-2.9 + 7.0))), bvec2(true, false))).y) || false)))))), _GLF_IDENTITY(true, (true) || false), false)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), bool(bool(true))), (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) * 1.0, clamp((injectionSwitch.x) * 1.0, (injectionSwitch.x) * 1.0, (injectionSwitch.x) * 1.0))) > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) * 1.0, clamp((injectionSwitch.x) * 1.0, (injectionSwitch.x) * 1.0, (injectionSwitch.x) * 1.0))) > injectionSwitch.y), ! (! (! (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) * 1.0, clamp((injectionSwitch.x) * 1.0, (injectionSwitch.x) * 1.0, (injectionSwitch.x) * 1.0))) > injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x) - 0.0), _GLF_IDENTITY((injectionSwitch.x) * 1.0, clamp((injectionSwitch.x) * 1.0, (injectionSwitch.x) * 1.0, (injectionSwitch.x) * _GLF_IDENTITY(1.0, float(mat4(1.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, abs(0.0), 0.0, 1.0)))))) > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY((injectionSwitch.x) * 1.0, _GLF_IDENTITY(clamp((injectionSwitch.x) * 1.0, (injectionSwitch.x) * 1.0, _GLF_IDENTITY((injectionSwitch.x), (_GLF_IDENTITY((injectionSwitch.x), ((injectionSwitch.x)) * 1.0)) * 1.0) * 1.0), min(clamp((injectionSwitch.x) * 1.0, (injectionSwitch.x) * 1.0, _GLF_IDENTITY((injectionSwitch.x), (_GLF_IDENTITY((injectionSwitch.x), ((injectionSwitch.x)) * 1.0)) * 1.0) * 1.0), clamp((injectionSwitch.x) * 1.0, (injectionSwitch.x) * 1.0, _GLF_IDENTITY((injectionSwitch.x), (_GLF_IDENTITY((injectionSwitch.x), ((injectionSwitch.x)) * 1.0)) * 1.0) * 1.0))))) > injectionSwitch.y) || false)) && true)))));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8.9)), float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(84.00)), float(injectionSwitch.x), bool(true)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(1.0)) - _GLF_IDENTITY(vec2(0.0, 0.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? vec2(0.0, 0.0) : _GLF_FUZZED(injectionSwitch)))).y, (injectionSwitch.x > injectionSwitch.y) || _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), bool(bvec2(false, true))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       barrier();
      }
    }
  }
 else
  {
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u), uint(_GLF_IDENTITY(uvec2(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u), 0u), ~ (_GLF_IDENTITY(~ (uvec2(workgroup_size * _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id), max((workgroup_id), (workgroup_id))) ^ 0u), 0u)), (_GLF_IDENTITY(~ (uvec2(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u), 0u)), _GLF_IDENTITY(max(~ (uvec2(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u), 0u)), ~ (uvec2(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u), 0u))), (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(0u), _GLF_IDENTITY(uvec2(0u), (uvec2(0u)) | uvec2(0u, 0u)))) ^ (max(~ (uvec2(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u), 0u)), ~ (uvec2(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u), 0u))))))) | _GLF_IDENTITY((~ (uvec2(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(num_workgroup)))) << 0u) * _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u), 0u))), uvec2(0u, 0u) | ((~ (uvec2(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(num_workgroup)))) << 0u) * _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u), 0u))))))))));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), _GLF_IDENTITY((int(_GLF_IDENTITY(6, _GLF_IDENTITY(int(ivec4(6, 0, 0, (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 + (4))), int(4))))), (_GLF_IDENTITY(int(ivec4(6, 0, 0, (0 << _GLF_IDENTITY(int(4), int(4))))), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) * 1) | (int(ivec4(6, 0, 0, (0 << _GLF_IDENTITY(int(4), int(4)))))))) | (int(ivec4(6, 0, 0, (0 << _GLF_IDENTITY(int(4), int(4)))))))))), ((int(_GLF_IDENTITY(6, _GLF_IDENTITY(int(ivec4(6, 0, 0, (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 + (4))), int(4))))), (_GLF_IDENTITY(int(ivec4(6, 0, 0, (0 << _GLF_IDENTITY(int(4), int(4))))), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) * 1) | (int(ivec4(6, 0, 0, (0 << _GLF_IDENTITY(int(4), int(4)))))))) | (int(ivec4(6, 0, 0, (0 << _GLF_IDENTITY(int(4), int(4))))))))))) >> 0) + _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(0, ~ (~ (0)))))))) >> _GLF_IDENTITY(int(6), int(6)), ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(_GLF_IDENTITY(6, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(6, 0, 0, (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 + (4))), int(4))))), (_GLF_IDENTITY(int(ivec4(6, 0, 0, (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 + (4))), int(4))))), (int(ivec4(6, 0, 0, (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 + (4))), int(4)))))) / 1)) | (int(ivec4(6, 0, 0, (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 + (4))), int(4))))))), _GLF_IDENTITY((_GLF_IDENTITY(int(ivec4(6, 0, 0, (0 << _GLF_IDENTITY(int(4), int(4))))), 0 | (int(ivec4(6, 0, 0, (0 << _GLF_IDENTITY(int(4), int(4)))))))) | (int(ivec4(6, 0, 0, (0 << _GLF_IDENTITY(int(4), int(4)))))), max((_GLF_IDENTITY(int(ivec4(6, 0, 0, (0 << _GLF_IDENTITY(int(4), int(4))))), 0 | (int(ivec4(6, 0, 0, (0 << _GLF_IDENTITY(int(4), int(4)))))))) | (int(ivec4(6, 0, 0, (0 << _GLF_IDENTITY(int(4), int(4)))))), (_GLF_IDENTITY(int(ivec4(6, 0, 0, (0 << _GLF_IDENTITY(int(4), int(4))))), 0 | (int(ivec4(6, 0, 0, (0 << _GLF_IDENTITY(int(4), int(4)))))))) | (int(ivec4(6, 0, 0, (0 << _GLF_IDENTITY(int(4), int(4)))))))))))) + _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), min(_GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(0, clamp(0, 0, 0)))), _GLF_IDENTITY(0, ~ (~ (0)))))))) >> _GLF_IDENTITY(int(6), int(6))) << (0 >> _GLF_IDENTITY(int(8), int(8)))))); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))))))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))])).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0))))).y))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0))))), (_GLF_IDENTITY(_GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), clamp(clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))))), _GLF_IDENTITY((clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) / vec2(1.0, 1.0)))), (false ? _GLF_FUZZED(injectionSwitch) : (clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) / vec2(1.0, 1.0)))))) / vec2(1.0, 1.0))) - vec2(0.0, 0.0)), clamp(_GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ 563.827)), (injectionSwitch)[1]), vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) - 0.0), _GLF_IDENTITY(mix(float(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0]))), float(_GLF_FUZZED(0.1)), bool(false)), 0.0 + (_GLF_IDENTITY(mix(float(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0]))), float(_GLF_FUZZED(0.1)), bool(false)), mix(float(_GLF_IDENTITY(mix(float(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0]))), float(_GLF_FUZZED(0.1)), bool(false)), mix(float(_GLF_FUZZED(-463.717)), float(mix(float(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0]))), float(_GLF_FUZZED(0.1)), bool(false))), bool(true)))), float(_GLF_FUZZED(-6.8)), bool(false)))))), _GLF_FUZZED(9.6)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))) - vec2(0.0, 0.0))), _GLF_IDENTITY(vec2(mat4(_GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))), mix(vec2(_GLF_FUZZED(476.312), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))))[1], min(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))))[1], max((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))))[1], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))))[1])), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))))[1]))), vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))))[0], _GLF_FUZZED((- (-389.512 - 7.2)))), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) : _GLF_FUZZED(vec2(6776.9336, -6.1)), clamp(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))), mix(vec2(_GLF_FUZZED(476.312), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))))[1], min(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))))[1], max((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))))[1], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))))[1])), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))))[1]))), vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))))[0], _GLF_FUZZED((- (-389.512 - 7.2)))), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) : _GLF_FUZZED(vec2(6776.9336, -6.1)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))), mix(vec2(_GLF_FUZZED(476.312), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))))[1], min(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))))[1], max((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))))[1], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))))[1])), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))))[1]))), vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))))[0], _GLF_FUZZED((- (-389.512 - 7.2)))), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) : _GLF_FUZZED(vec2(6776.9336, -6.1)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))), mix(vec2(_GLF_FUZZED(476.312), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))))[1], min(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))))[1], max((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))))[1], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))))[1])), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))))[1]))), vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)))))[0], _GLF_FUZZED((- (-389.512 - 7.2)))), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) : _GLF_FUZZED(vec2(6776.9336, -6.1)))))), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(distance(vec3(-7.7, 1.6, -11.99).br, injectionSwitch)))), 1.0) * (vec2(mat4(clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch))) - vec2(_GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, (0.0) * 1.0))), 0.0))), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0))), sin(vec2(0.0, 0.0)) + (vec2(1.0, 1.0) * (vec2(mat4(clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), vec2(mat2x4(_GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), clamp((injectionSwitch) - vec2(0.0, 0.0), (injectionSwitch) - vec2(0.0, 0.0), (injectionSwitch) - vec2(0.0, 0.0))), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))))), _GLF_IDENTITY(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(mix(352.158, -3557.4327, -6.2)) : 0.0)), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(mix(352.158, -3557.4327, -6.2)) : 0.0)), max(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(mix(352.158, -3557.4327, -6.2)) : 0.0)), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(mix(352.158, -3557.4327, -6.2)) : 0.0))))), float(_GLF_FUZZED(0.9)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0))))))), clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), vec2(vec3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), 0.0))))))).y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + sqrt(0.0)) > injectionSwitch.y))))
            barrier();
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(int(7), int(7))) * 1)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), ~ (~ (int(7)))), int(7)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), ~ (~ ((subgroup_local_id)))) | 0u), max(workgroup_base + subgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))), _GLF_IDENTITY((subgroup_local_id) | 0u, ((subgroup_local_id) | 0u) | ((subgroup_local_id) | 0u))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id))) + 0u)) | 0u), (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_local_id), 0u | ((subgroup_local_id)))), (~ (_GLF_IDENTITY((subgroup_local_id), 0u | ((subgroup_local_id))))) * 1u))) | 0u)) << 0u)), 0u | ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id))) + 0u), (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id))) | 0u)) << 0u)) + 0u)) - 0u)) | 0u), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u)) << 0u)))) << _GLF_IDENTITY(0u, uint(uint(0u)))), _GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u), uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u + (_GLF_IDENTITY(0u, 0u ^ (0u))))) | 0u)), (true ? workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) : _GLF_FUZZED(170885u))), 0u, 1u, 1u))))), (_GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))), (subgroup_local_id) | 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (1u & 1u) * (subgroup_local_id))), uint(_GLF_IDENTITY(uint(min(subgroup_local_id, subgroup_local_id)), (uint(min(subgroup_local_id, subgroup_local_id))) / ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))))))), clamp(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(min(subgroup_local_id, subgroup_local_id), uint(uint(min(subgroup_local_id, subgroup_local_id))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(min(subgroup_local_id, subgroup_local_id), uint(uint(min(subgroup_local_id, subgroup_local_id))))), (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(min(subgroup_local_id, subgroup_local_id), uint(uint(min(subgroup_local_id, subgroup_local_id)))))) | (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(min(subgroup_local_id, subgroup_local_id), uint(uint(min(subgroup_local_id, subgroup_local_id))))))), _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(min(subgroup_local_id, subgroup_local_id), uint(uint(min(subgroup_local_id, subgroup_local_id))))))), _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))), _GLF_IDENTITY((subgroup_local_id) | 0u, (false ? _GLF_FUZZED(workgroup_id) : (subgroup_local_id) | 0u))), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u))))))), (subgroup_local_id) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(min(subgroup_local_id, subgroup_local_id), min(min(subgroup_local_id, subgroup_local_id), min(subgroup_local_id, subgroup_local_id)))), _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))), (subgroup_local_id) | 0u))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << (0u | 0u)), min(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), uint(5u)), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (0u >> _GLF_IDENTITY(uint(5u), uint(5u))) + (uint(5u))), uint(5u))))) | (subgroup_local_id)))))), (subgroup_local_id) | 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) | (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))))), (max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) | (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))))) ^ 0u)), (subgroup_local_id) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))), ~ (_GLF_IDENTITY(~ (max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))), (~ (max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))))) - 0u)))), (subgroup_local_id) | 0u), _GLF_IDENTITY(0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))), (subgroup_local_id) | 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))), (subgroup_local_id) | 0u)), (false ? _GLF_FUZZED(workgroup_size) : 0u | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) / 1u))), (subgroup_local_id) | 0u)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(8102u) : (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) / 1u))), (subgroup_local_id) | 0u)))))), (0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), min(subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), max(max(subgroup_local_id, subgroup_local_id), _GLF_IDENTITY(_GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), 0u ^ (max(subgroup_local_id, subgroup_local_id))), max(_GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), (max(subgroup_local_id, subgroup_local_id)) | (max(subgroup_local_id, subgroup_local_id))), max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, 0u | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)))))))))))), (subgroup_local_id) | 0u))) - 0u)) << (1u ^ 1u))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u), subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))), (subgroup_local_id) | 0u))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)) ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) << 0u, ((subgroup_local_id) << 0u) / 1u)))), min(subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))), (subgroup_local_id) | 0u))), (workgroup_base + subgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)))), _GLF_IDENTITY((subgroup_local_id) | 0u, clamp(_GLF_IDENTITY((subgroup_local_id) | 0u, ((_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, (0u >> _GLF_IDENTITY(uint(5u), uint(5u))), 0u)))) | 0u) | ((subgroup_local_id) | 0u)), (subgroup_local_id) | 0u, (subgroup_local_id) | 0u)))) - 0u)) * 1u);
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(min(workgroup_base, _GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(workgroup_size) : workgroup_base))), (min(workgroup_base, _GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(workgroup_size) : workgroup_base)))) | 0u), (min(_GLF_IDENTITY(workgroup_base, 0u ^ (_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u))))), _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec2(workgroup_base, 0u)), uint(uvec4(uint(uvec2(workgroup_base, 0u)), 0u, 1u, 1u)))))) / 1u)) + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(min(workgroup_base, workgroup_base), (min(workgroup_base, workgroup_base)) / 1u)) + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(max(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(min(workgroup_base, workgroup_base), (min(workgroup_base, workgroup_base)) / 1u)) + subgroup_base + (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) << 0u) % subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(min(workgroup_base, workgroup_base), (min(workgroup_base, workgroup_base)) / 1u)) + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(min(workgroup_base, workgroup_base), (min(workgroup_base, workgroup_base)) / 1u)) + subgroup_base + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, max((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size)))))), (false ? _GLF_FUZZED(workgroup_id) : max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(min(workgroup_base, workgroup_base), (min(workgroup_base, workgroup_base)) / 1u)) + subgroup_base, (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(min(workgroup_base, workgroup_base), (min(workgroup_base, workgroup_base)) / 1u)) + subgroup_base) * 1u) + (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) << 0u) % subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(min(workgroup_base, workgroup_base), (min(workgroup_base, workgroup_base)) / 1u)) + subgroup_base + ((subgroup_local_id + _GLF_IDENTITY(1, min(1, 1))) % subgroup_size), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(min(workgroup_base, workgroup_base), _GLF_IDENTITY((min(workgroup_base, workgroup_base)) / 1u, ((min(workgroup_base, workgroup_base)) / 1u) | ((min(workgroup_base, workgroup_base)) / 1u)))) + subgroup_base + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, max((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))), 0u, 0u), (uvec3(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))), 0u, 0u)) | uvec3(0u, 0u, 0u)))), _GLF_IDENTITY(min(workgroup_base, workgroup_base), (min(workgroup_base, _GLF_IDENTITY(workgroup_base, (0u >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), ~ _GLF_IDENTITY((~ _GLF_IDENTITY((uint(3u)), _GLF_IDENTITY(((uint(3u))), (((uint(3u)))) - 0u) / (1u & 1u))), 1u * ((~ _GLF_IDENTITY((uint(3u)), ((uint(_GLF_IDENTITY(3u, (3u) - 0u)))) / (_GLF_IDENTITY(1u & 1u, clamp(_GLF_IDENTITY(1u & 1u, (_GLF_IDENTITY(1u & 1u, (1u & 1u) | 0u)) - 0u), 1u & 1u, _GLF_IDENTITY(1u & 1u, min(1u & 1u, 1u & 1u)))))))))))) | (workgroup_base)))) / 1u)) + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1))), (true ? subgroup_local_id + 1 : _GLF_FUZZED(subgroup_size)))) % subgroup_size)));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(4.7, -2.9))))) * vec2(1.0, 1.0)).x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), _GLF_TRUE(_GLF_IDENTITY(true, bool(bool(true))), (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))
    barrier();
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), true, true))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), true, true))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bool(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), true, true))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) || false), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), true, true))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), true, true))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bool(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), true, true))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) || false), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(true), false), bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_TRUE(true), false), true, true))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(true), false), bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), true, true))))))), _GLF_IDENTITY(! (! (bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))), false)))), (! (! _GLF_IDENTITY((bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))), false))), ((bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))), false)))) || false), true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))), false))), ((bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))), false)))) || false), true, false), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))), false))), ((bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))), false)))) || false), true, false), true)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))), false))), ((bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))), false)))) || false), true, false), true))))))))), bvec3(bvec4(bvec3((bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false))), true, false), true))))))) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) || false))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))), false, true))))
      {
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_IDENTITY(bool(bool(_injected_loop_counter > 0)), (bool(bool(_injected_loop_counter > 0))) || false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true, true, true)), (bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true, true, true))) && true)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true, true, true)), (bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true, true, true))) && true))) || false))); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || _GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / 1.0), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY((int(2)), _GLF_IDENTITY((_GLF_IDENTITY((int(2)), max((int(2)), (int(2))))), clamp((_GLF_IDENTITY((int(2)), max((int(2)), (int(2))))), (_GLF_IDENTITY((int(2)), max((int(2)), (int(2))))), (_GLF_IDENTITY((int(2)), max((int(2)), (int(2))))))) | ((int(2)))) ^ 0, 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY((int(2)), _GLF_IDENTITY((_GLF_IDENTITY((int(2)), max((int(2)), (int(2))))), clamp((_GLF_IDENTITY((int(2)), max((int(2)), (int(2))))), (_GLF_IDENTITY((int(2)), max((int(2)), (int(2))))), (_GLF_IDENTITY((int(2)), max((int(2)), (int(2))))))) | ((int(2)))) ^ 0, 0 | (_GLF_IDENTITY((int(2)), _GLF_IDENTITY((_GLF_IDENTITY((int(2)), max((int(2)), (int(2))))), clamp((_GLF_IDENTITY((int(2)), max((int(2)), (int(2))))), (_GLF_IDENTITY((int(2)), max((int(2)), (int(2))))), (_GLF_IDENTITY((int(2)), max((int(2)), (int(2))))))) | ((int(2)))) ^ 0))))), int(2)))); _injected_loop_counter ++)
      {
       atomicStore(buf[virtual_gid], uint(1), _GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(4, (4) + 0)) | (4), 0 | ((4) | (4)))), 64, _GLF_IDENTITY(4, _GLF_IDENTITY(min(4, 4), (min(4, 4)) ^ 0)));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-5330.2377))) > injectionSwitch.y))))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(35.14, -1.4)) : injectionSwitch)).y))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))))))))), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))))))))), false, false, false)), false || (bool(bvec4(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))))))))), false, false, false))))))))))), bool(bvec3(! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(35.14, -1.4)) : injectionSwitch, mix(vec2(_GLF_FUZZED(-5442.7520), (false ? _GLF_FUZZED(vec2(35.14, -1.4)) : injectionSwitch)[1]), vec2((false ? _GLF_FUZZED(vec2(35.14, -1.4)) : injectionSwitch)[0], _GLF_FUZZED(1961.4563)), bvec2(true, false))))).y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(536.654)), float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7618.6800)))), bool(true))) > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(536.654)), float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7618.6800)))), bool(true))) > injectionSwitch.y))), ! (! ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(536.654)), float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7618.6800)))), bool(true))) > injectionSwitch.y))))))) && true))), false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))))))), false, true)))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, true)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bvec4(false, true, false, true)), bool(bvec3(bool(bvec4(false, true, _GLF_IDENTITY(false, (false) && true), true)), false, false)))), bool(bvec4(bool(bool(bvec4(false, true, false, true))), true, true, false)))))), ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(false || (! (false)), ! (! (false || (! _GLF_IDENTITY((false), ((false)) && true))))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, true, false, true)), (bool(bvec4(false, true, false, true))) && true), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bvec4(false, true, false, true)), bool(bvec3(bool(bvec4(false, true, false, true)), false, false)))), bool(bvec4(bool(bool(bvec4(false, true, false, true))), true, true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(false || (! (false)), ! (! (false || (! _GLF_IDENTITY((false), _GLF_IDENTITY(((false)), ! (! (((false))))) && true)))))))))) && true)), false || (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec4(bool(bvec2(false, false)), _GLF_IDENTITY(false, true && (false)), true, true))))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-75.43, 86.33)) : injectionSwitch)).y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (false) && true)))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (false) && true)))), bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (false) && true)))), false, true)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if((_GLF_IDENTITY(subgroup_local_id, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u), _GLF_IDENTITY(max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id, ~ (~ (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(next_virtual_gid) : _GLF_IDENTITY(false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id, ~ (~ (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)))))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec2(true, false))) && (false)) ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))), (max(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))) | 0u))) | (max(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))) << 0u), (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))))), 0u ^ (_GLF_IDENTITY(max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec2(true, _GLF_IDENTITY(false, false || (false))))) && (false)) ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))), (max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)))) | (max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)))))))), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(max(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)), 0u + (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))))), (max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)))) | (max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(true, ! (! (true))), false)), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(true, ! (! (true))), false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(true, ! (! (true))), false)), true, true, false))))))))))), (_GLF_IDENTITY(bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))))) || false)) ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))), (_GLF_IDENTITY(max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))), clamp(max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))), max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))), max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)))))) | (max(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(next_virtual_gid, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid))), min(~ (_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid))), ~ (_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid)))))))) : subgroup_local_id), min((false ? _GLF_FUZZED(_GLF_IDENTITY(next_virtual_gid, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid))), min(~ (_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid))), ~ (_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid)))))))) : subgroup_local_id), _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(next_virtual_gid, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid))), min(~ (_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid))), ~ (_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid)))))))) : subgroup_local_id), ((false ? _GLF_FUZZED(_GLF_IDENTITY(next_virtual_gid, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid))), min(~ (_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid))), ~ (_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, next_virtual_gid)))))))) : subgroup_local_id)) >> 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))) + 0u)) + 0u)), min(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))) + 0u)), uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))) + 0u)))))), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u, 0u)))))))), (uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))), (max(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(uvec2(126484u, 64868u).x) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (0u << _GLF_IDENTITY(uint(4u), uint(4u)))))), (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)))) | (max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))))), (0u >> _GLF_IDENTITY(uint(2u), uint(2u))) + (_GLF_IDENTITY(max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))), (max(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(uvec2(126484u, 64868u).x) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (0u << _GLF_IDENTITY(uint(4u), uint(4u)))))), (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)))) | _GLF_IDENTITY((max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)))), ((max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))))) | ((max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)))))))))))) | (uint(uint(_GLF_IDENTITY(max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))), (max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(_GLF_IDENTITY(next_virtual_gid, (0u << _GLF_IDENTITY(uint(1u), uint(1u))) ^ (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | 0u)))) : subgroup_local_id)))) | (max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)))))))))))))), _GLF_IDENTITY(0u ^ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec2(true, false))) && (false)) ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))), (max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)))) | (max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))))), 0u ^ (_GLF_IDENTITY(max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec2(true, false))) && (false)) ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))), (max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)))) | (max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)))))))), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(max(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)), 0u + (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))))), (max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)))) | (max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)) ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))), (_GLF_IDENTITY(max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))), clamp(max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))), max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))), max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)))))) | (max(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))) + 0u)), min(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))) + 0u)), uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))) + 0u)))))), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u, 0u)))))))), (uint(uint(_GLF_IDENTITY(max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))), (max(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(uvec2(126484u, 64868u).x) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (0u << _GLF_IDENTITY(uint(4u), uint(4u)))))), (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)))) | (max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)))))))) | (uint(uint(_GLF_IDENTITY(max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))), (max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)))) | (max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))))))))))))))), (0u ^ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec2(true, false))) && (false)) ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))), (max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)))) | (max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))))), 0u ^ (_GLF_IDENTITY(max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec2(true, false))) && (false)) ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))), (max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)))) | (max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)))))))), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(max(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)), 0u + (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))))), (max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)))) | (max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)) ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))), (_GLF_IDENTITY(max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))), clamp(max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))), max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))), max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)))))) | (max(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))) + 0u)), min(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))) + 0u)), uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))) + 0u)))))), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u, 0u)))))))), (uint(uint(_GLF_IDENTITY(max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))), (max(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(uvec2(126484u, 64868u).x) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (0u << _GLF_IDENTITY(uint(4u), uint(4u)))))), (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)))) | (max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)))))))) | (uint(uint(_GLF_IDENTITY(max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id))), (max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)))) | (max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(next_virtual_gid) : subgroup_local_id)))))))))))))))) >> 0u))))))) % 2) == 0)
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true), true, false))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))) || (_GLF_IDENTITY(true, bool(bvec4(true, true, true, false)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), true && _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY((true), true && (_GLF_IDENTITY((true), bool(bvec3((true), true, true))))) || false)), ((_GLF_IDENTITY(true, (true) || false))) || false)) && (false))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_GLF_IDENTITY(_injected_loop_counter < 1, bool(bvec4(_injected_loop_counter < 1, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                    barrier();
                  }
                }
              }
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         subgroupAll(true);
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec2(false, true)))) && true) ? _GLF_FUZZED((vec2(723.504, -867.875) / injectionSwitch)) : injectionSwitch, vec2(vec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true), ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true)))) ? _GLF_FUZZED((vec2(723.504, -867.875) / injectionSwitch)) : injectionSwitch, 0.0))))).y, (true ? _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec2(false, true)))) && true) ? _GLF_FUZZED((vec2(723.504, -867.875) / injectionSwitch)) : injectionSwitch, vec2(vec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true), ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true)))) ? _GLF_FUZZED((vec2(723.504, -867.875) / injectionSwitch)) : injectionSwitch, 0.0))))).y : _GLF_FUZZED(-1.8)))))))
          barrier();
         for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), (! (! (_GLF_DEAD(false)))) || false)))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), bool(bool(_GLF_IDENTITY((true), ((true)) || false)))))), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) < injectionSwitch.y))))
          {
           do
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))))
            barrier();
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))), false || (_GLF_DEAD(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     do
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-9.0))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0))) > _GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), int(_GLF_IDENTITY(ivec3(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) | 0), (_GLF_IDENTITY(0, (0) | (1 ^ 1))) / 1), 1), (ivec3(0, 0, 1)) / ivec3(1, 1, 1))))) | (0))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3762.2368), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(8.7)), bool(false))), _GLF_FUZZED(-459.413)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3762.2368), (injectionSwitch)[1]), vec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(1.0))[0], 0.0 + (_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(1.0))[0])), mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(8.7)), bool(false))), _GLF_FUZZED(-459.413)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3762.2368), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(8.7)), bool(false))), _GLF_FUZZED(-459.413)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3762.2368), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(8.7)), bool(false))), _GLF_FUZZED(-459.413)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(_GLF_IDENTITY(3851.4894, min(3851.4894, 3851.4894)), -2.9)) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(-3762.2368, min(-3762.2368, _GLF_IDENTITY(-3762.2368, (-3762.2368) / 1.0)))), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(8.7)), bool(false))), _GLF_IDENTITY(_GLF_FUZZED(-459.413), min(_GLF_FUZZED(-459.413), _GLF_FUZZED(-459.413)))), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))).y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, 0 ^ (2))), 4, 64, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, 0 | (4)))))) + 0));
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (bool(injectionSwitch.x > injectionSwitch.y)), bool(bvec4(! (bool(injectionSwitch.x > injectionSwitch.y)), false, true, false)))))))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-90.77)), bool(false)))) && true))))))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(4.4), _GLF_FUZZED(79.84)), bvec2(false, false))), injectionSwitch)).x, (false ? _GLF_FUZZED(8.1) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], (false ? _GLF_FUZZED(mod(-2.8, 24.01)) : (injectionSwitch)[1]))), vec2(_GLF_FUZZED(4.4), _GLF_FUZZED(79.84)), bvec2(false, false))), injectionSwitch)).x)) > injectionSwitch.y), true && ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(4.4), _GLF_FUZZED(79.84)), bvec2(false, false))), injectionSwitch)).x, (false ? _GLF_FUZZED(8.1) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], (false ? _GLF_FUZZED(mod(-2.8, 24.01)) : (injectionSwitch)[1]))), vec2(_GLF_FUZZED(4.4), _GLF_FUZZED(79.84)), bvec2(false, false))), injectionSwitch)).x)) > injectionSwitch.y))))))
      barrier();
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_IDENTITY(((false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (((false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (((false)) && _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true))), (injectionSwitch.x < injectionSwitch.y)))))))))), _GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, true && (true)), false)), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, true && (true)), false)), true && (bool(bvec2(_GLF_IDENTITY(true, true && (true)), false)))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), ! (_GLF_IDENTITY(! (true), true && (! (true)))))), bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (_GLF_IDENTITY(! (true), (! (true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false))))) && true)), ! _GLF_IDENTITY((! ((_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(! (! (true)), (! (! _GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(true, true && (true))), ! (! ((true)))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), bool(bvec2(! ((true)), true))))), false, true), false))))))) && true))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))), _GLF_IDENTITY(false || ((_GLF_IDENTITY(true, ! (! (true))))), (false || (_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))), ((_GLF_IDENTITY(true, ! (! (true))))) && true))) && true))))) && true)))), bool(_GLF_IDENTITY(bvec3((! ((_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(! (! (true)), (! (! _GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(true, true && (true))), ! (! ((true)))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), bool(bvec2(! ((true)), true))))), false, true), false))))))) && true))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))), _GLF_IDENTITY(false || ((_GLF_IDENTITY(true, ! (! (true))))), (false || (_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))), ((_GLF_IDENTITY(true, ! (! (true))))) && true))) && true))))) && true)))), false, true), bvec3(bvec3(bvec3((! ((_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(! (! (true)), (! (! _GLF_IDENTITY((true), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(true, true && (true))), ! (! ((true)))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), bool(bvec2(! ((true)), true))))), false, true), false))))))) && true))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))), _GLF_IDENTITY(false || ((_GLF_IDENTITY(true, ! (! (true))))), (false || (_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))), ((_GLF_IDENTITY(true, ! (! (true))))) && true))) && true))))) && true)))), false, true))))))) && true)))), _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), true && ((false))))) && true)))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (((injectionSwitch.x > injectionSwitch.y))) || false))))) && true))), false, false)), bool(bool(bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))))), (! ((injectionSwitch.x > injectionSwitch.y))) && true))), false, false)))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
            {
             barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float((mat4x2(940.506, -81.09, -8.8, 9.6, 3350.4666, 0.4, -6.6, 9.3) == mat4x2(4.3, -99.75, 3.9, -60.99, -4.6, 5633.6604, -325.609, -258.313)))), _GLF_FUZZED(float(false))), vec2(_GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(641.802, -2897.0518))))) - vec2(0.0, 0.0))[0], (injectionSwitch)[1]), bvec2(true, true))).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float((mat4x2(940.506, -81.09, -8.8, 9.6, 3350.4666, 0.4, -6.6, 9.3) == mat4x2(4.3, -99.75, 3.9, -60.99, -4.6, 5633.6604, -325.609, -258.313)))), _GLF_FUZZED(float(false))), vec2(_GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(641.802, -2897.0518))))) - vec2(0.0, 0.0))[0], (injectionSwitch)[1]), bvec2(true, true))).x, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float((mat4x2(940.506, -81.09, -8.8, 9.6, 3350.4666, 0.4, -6.6, 9.3) == mat4x2(4.3, -99.75, 3.9, -60.99, -4.6, 5633.6604, -325.609, -258.313)))), _GLF_FUZZED(float(false))), vec2(_GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(641.802, -2897.0518))))) - vec2(0.0, 0.0))[0], (injectionSwitch)[1]), bvec2(true, true))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float((mat4x2(940.506, -81.09, -8.8, 9.6, 3350.4666, 0.4, -6.6, 9.3) == mat4x2(4.3, -99.75, 3.9, -60.99, -4.6, 5633.6604, -325.609, -258.313)))), _GLF_FUZZED(float(false))), vec2(_GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(641.802, -2897.0518))))) - vec2(0.0, 0.0))[0], (injectionSwitch)[1]), bvec2(true, true))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float((mat4x2(940.506, -81.09, -8.8, 9.6, 3350.4666, 0.4, -6.6, 9.3) == mat4x2(4.3, -99.75, 3.9, -60.99, -4.6, 5633.6604, -325.609, -258.313)))), _GLF_FUZZED(float(false))), vec2(_GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(641.802, -2897.0518))))) - vec2(0.0, 0.0))[0], (injectionSwitch)[1]), bvec2(true, true))).x))) / 1.0), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x)), float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 1.0, 1.0, 1.0, length(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0)))), min((_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 1.0, 1.0, 1.0, length(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0)))), (_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), clamp(max(injectionSwitch.x, injectionSwitch.x), max(injectionSwitch.x, injectionSwitch.x), _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), clamp(max(injectionSwitch.x, injectionSwitch.x), max(injectionSwitch.x, injectionSwitch.x), max(injectionSwitch.x, injectionSwitch.x)))))), 1.0, 1.0, 1.0, length(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0)))))) / exp(0.0)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     subgroupAll(false);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-30833) : 0)), (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-30833) : 0))) >> 0)) | (_GLF_IDENTITY(0, (false ? _GLF_FUZZED((_GLF_IDENTITY(-2445 % -75508, (-2445 % -75508) | (-2445 % -75508)))) : _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, ~ (~ (0))), 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, 1 * (_injected_loop_counter ++)))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) || false)))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true))), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true))))))))))
          {
           do
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (-18494 & 0)); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
                {
                }
               else
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), _GLF_IDENTITY((false), bool(bool((false)))) || false))))));
          }
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && _GLF_IDENTITY(_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), true), _GLF_IDENTITY(bvec2(bvec4(bvec2((false), true), false, false)), bvec2(bvec2(bvec2(bvec4(bvec2((false), true), false, false)))))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2((false), true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((false), ((false)) && true), true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((false), ((false)) && true), true)), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((false), ((false)) && true), true)), _GLF_IDENTITY(bool(bvec4(bool(bvec2(_GLF_IDENTITY((false), ((false)) && true), true)), true, true, true)), ! (! (bool(bvec4(bool(bvec2(_GLF_IDENTITY((false), ((false)) && true), true)), true, true, true))))))) && true)), bool(bvec4(! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) && true), true && (_GLF_IDENTITY((false), ((false)) && true))), true)), false || (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) && true), true && (_GLF_IDENTITY((false), ((false)) && true))), true)))), (bool(bvec2(_GLF_IDENTITY((false), ((false)) && true), true))) && true)), false, true, true)))))), ! (! (! _GLF_IDENTITY((bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))), true), bvec2(bvec4(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))), true), bvec2(bvec3(bvec2((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, true))), bvec2(bvec4(bvec2((false), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), ((bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))), true), bvec2(bvec4(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))), true), bvec2(bvec3(bvec2((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, true))), bvec2(bvec4(bvec2((false), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) || false)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2((false), true)), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) && true), true && (_GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) && true), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((false), ((false)) && true), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((false), ((false)) && true), false), true, true))))))), true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((false), ((false)) && true), true)), (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) && true), (_GLF_IDENTITY((false), (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), true && ((_GLF_IDENTITY(false, ! (! (false))))))))) && true)) || false), true))) && true)), bool(bvec4(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) && true), true)), (bool(bvec2(_GLF_IDENTITY((false), ((false)) && true), true))) && true)), false, true, true)))))), ! (! ((_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) && true), true && (_GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) && true), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((false), ((false)) && true), false), bvec2(bvec4(bvec2(_GLF_IDENTITY((false), ((false)) && true), false), true, true))))))), true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((false), ((false)) && true), true)), (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) && true), (_GLF_IDENTITY((false), (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), true && ((_GLF_IDENTITY(false, ! (! (false))))))))) && true)) || false), true))) && true)), bool(bvec4(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) && true), true)), (bool(bvec2(_GLF_IDENTITY((false), ((false)) && true), true))) && true)), false, true, true))))))))), ! (! (! (bool(_GLF_IDENTITY(bvec2((false), true), bvec2(bvec4(bvec2((false), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2((false), true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((false), ((false)) && true), true)), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((false), ((_GLF_IDENTITY(false, false || (false)))) && true), true)), (bool(bvec2(_GLF_IDENTITY((false), ((false)) && true), true))) && true)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((false), ((_GLF_IDENTITY(false, false || (false)))) && true), true)), (bool(bvec2(_GLF_IDENTITY((false), ((false)) && true), true))) && true)), ((_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((false), ((_GLF_IDENTITY(false, false || (false)))) && true), true)), (bool(bvec2(_GLF_IDENTITY((false), ((false)) && true), true))) && true))) || false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((false), ((_GLF_IDENTITY(false, false || (false)))) && true), true)), (bool(bvec2(_GLF_IDENTITY((false), ((false)) && true), true))) && true)), ((_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((false), ((_GLF_IDENTITY(false, false || (false)))) && true), true)), (bool(bvec2(_GLF_IDENTITY((false), ((false)) && true), true))) && true))) || false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bool(bvec4(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((false), ((false)) && true), true), bvec2(bvec4(bvec2(_GLF_IDENTITY((false), ((false)) && true), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((false), ((false)) && true), true)), (bool(bvec2(_GLF_IDENTITY((false), ((false)) && true), true))) && true)) && true)), false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), bool(_GLF_IDENTITY(bvec3(bool(bool(true)), false, false), bvec3(bvec3(bvec3(bool(bool(true)), false, false))))))), true)))))), ! (! (! _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2((false), true), bvec2(bvec4(bvec2((false), true), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)), true))))), bool(bvec2((bool(_GLF_IDENTITY(bvec2((false), true), bvec2(bvec4(bvec2((false), true), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)), true))))), false))))))))), ! (! (! (_GLF_IDENTITY(bool(bvec2((false), true)), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((false), ((false)) && true), true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((false), ((false)) && true), true)), (bool(bvec2(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bool(_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), true && ((false)))))))))) && true), true))) && true)), bool(bvec4(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((false), ((false)) && true), true)), (bool(bvec2(_GLF_IDENTITY((false), ((false)) && true), true))) && true)), false, true, true)))))), ! (! (! (bool(_GLF_IDENTITY(bvec2((false), true), bvec2(bvec4(bvec2((false), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))), bool(bvec4(! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((false), ((false)) && true), true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((false), ((false)) && true), true)), (bool(bvec2(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bool(_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), true && ((false)))))))))) && true), true))) && true)), bool(bvec4(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((false), ((false)) && true), true)), (bool(bvec2(_GLF_IDENTITY((false), ((false)) && true), true))) && true)), false, true, true)))))), ! (! (! (bool(_GLF_IDENTITY(bvec2((false), true), bvec2(bvec4(bvec2((false), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))))))))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec2(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 0.0))).y), false))), false, true, false)), (bool(bvec4(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec2(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 0.0))).y), false))), false, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) || false)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 barrier();
                 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), ! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))))))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
                barrier();
              }
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) < injectionSwitch.y)))), false || (bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / cos(0.0)))))), true && (! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / cos(0.0)))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / cos(0.0)))))), true && (! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / cos(0.0)))))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / cos(0.0)))))), true && (! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / cos(0.0)))))))))), true && (bool(bool(_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / cos(0.0)))))), true && (! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / cos(0.0))))))))))))))))))) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), _GLF_IDENTITY(true && (bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), ! (! _GLF_IDENTITY((true && (bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), _GLF_IDENTITY(bool(bool((true && (bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))), ! (! (bool(bool((true && (bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))))))))))))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)) + 0.0, float(mat2x3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)) + 0.0, ((_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), float(_GLF_IDENTITY(mat2((injectionSwitch.y), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 0.0, 1.0), (mat2((injectionSwitch.y), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 0.0, 1.0)) + mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))) + 0.0)) + 0.0) * 1.0), 1.0, 1.0, 1.0, abs(1.0), 1.0))))))))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) > (_GLF_IDENTITY(0, ~ (~ _GLF_IDENTITY((0), int(ivec3((0), (0 | 1), 0))))) << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false))), false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           barrier();
          }
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (false), true && _GLF_IDENTITY((_GLF_IDENTITY(! (false), (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) && true)))) && true)), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(! (false), (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) && true)))) && true)), ! (! ((_GLF_IDENTITY(! (false), (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) && true)))) && true)))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), (! (_GLF_IDENTITY(false, ! (! (false))))) && true)))), true && ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), true && (_GLF_IDENTITY(_GLF_IDENTITY(! (false), true && (! (false))), (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), (! (false)) || false))))))))) && true))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((! (false))) && true))), ! (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), (! (false)) && true)))), ((! (false))) && true))))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((-407.299 + 51.81))), vec2(_GLF_FUZZED(-8.4), (injectionSwitch)[1]), bvec2(false, true))).y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (false)))), (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (false))))) || _GLF_IDENTITY(false, bool(bvec2(false, false)))))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = (0 | (0 ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       atomicStore(buf[next_virtual_gid], uint(2), 4, 64, _GLF_IDENTITY(4, (_GLF_IDENTITY(_GLF_IDENTITY(4, int(ivec3(4, 0, 1))), _GLF_IDENTITY((4) ^ 0, 0 + ((4) ^ 0)))) >> 0));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), tan(abs(0.0))))).x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
