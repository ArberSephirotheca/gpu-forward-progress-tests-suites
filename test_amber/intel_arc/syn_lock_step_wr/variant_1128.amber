#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_33 {
 ivec4 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_32 {
 mat4x2 _f0;
} ;

struct _GLF_struct_34 {
 vec3 _f0;
 _GLF_struct_32 _f1;
 _GLF_struct_33 _f2;
 mat2x3 _f3;
 ivec3 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_30 {
 uint _f0;
 uvec3 _f1;
 mat2x3 _f2;
 mat4x3 _f3;
 mat2x4 _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_31 {
 _GLF_struct_30 _f0;
} ;

struct _GLF_struct_28 {
 bvec4 _f0;
} ;

struct _GLF_struct_27 {
 mat3x4 _f0;
 mat4x3 _f1;
 vec3 _f2;
 mat2x4 _f3;
 uvec2 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_26 {
 mat2x4 _f0;
 mat4x2 _f1;
 mat4x3 _f2;
 bvec4 _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_29 {
 mat4x3 _f0;
 mat3x2 _f1;
 _GLF_struct_26 _f2;
 _GLF_struct_27 _f3;
 ivec4 _f4;
 int _injected_loop_counter;
 _GLF_struct_28 _f5;
} ;

struct _GLF_struct_35 {
 _GLF_struct_29 _f0;
 uvec2 _f1;
 uvec3 _f2;
 _GLF_struct_31 _f3;
 vec3 _f4;
 _GLF_struct_34 _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_23 {
 bvec4 _f0;
 ivec4 _f1;
 uvec3 _f2;
 mat3x4 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_24 {
 _GLF_struct_23 _f0;
 bool _f1;
 float _f2;
 uint workgroup_base;
 ivec2 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_21 {
 ivec2 _f0;
 vec3 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_22 {
 _GLF_struct_21 _f0;
} ;

struct _GLF_struct_19 {
 ivec2 _f0;
 bvec4 _f1;
 uint _f2;
 vec2 _f3;
 mat3 _f4;
 float _f5;
} ;

struct _GLF_struct_20 {
 mat2x4 _f0;
 bvec2 _f1;
 uvec2 _f2;
 _GLF_struct_19 _f3;
} ;

struct _GLF_struct_18 {
 ivec4 _f0;
 ivec3 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_16 {
 uvec3 _f0;
 mat4 _f1;
 vec4 _f2;
 vec4 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_15 {
 mat2x3 _f0;
 uint _f1;
} ;

struct _GLF_struct_17 {
 ivec3 _f0;
 _GLF_struct_15 _f1;
 _GLF_struct_16 _f2;
} ;

struct _GLF_struct_25 {
 _GLF_struct_17 _f0;
 mat2x4 _f1;
 _GLF_struct_18 _f2;
 _GLF_struct_20 _f3;
 _GLF_struct_22 _f4;
 _GLF_struct_24 _f5;
} ;

struct _GLF_struct_13 {
 mat2 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_11 {
 ivec2 _f0;
 bvec2 _f1;
 bvec3 _f2;
 mat2x3 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_12 {
 _GLF_struct_11 _f0;
} ;

struct _GLF_struct_9 {
 vec2 _f0;
 mat2x4 _f1;
 vec4 _f2;
} ;

struct _GLF_struct_8 {
 mat3x2 _f0;
 mat2 _f1;
 mat2x4 _f2;
 bvec3 _f3;
 vec2 _f4;
 mat3x2 _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_10 {
 _GLF_struct_8 _f0;
 mat3x2 _f1;
 _GLF_struct_9 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_6 {
 mat2x3 _f0;
 mat3x2 _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_5 {
 vec4 _f0;
 bvec2 _f1;
 uint _f2;
} ;

struct _GLF_struct_7 {
 mat2x4 _f0;
 mat2x3 _f1;
 _GLF_struct_5 _f2;
 _GLF_struct_6 _f3;
} ;

struct _GLF_struct_3 {
 ivec2 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_2 {
 vec3 _f0;
 uint _f1;
 mat3 _f2;
 vec2 _f3;
 uvec3 _f4;
 vec2 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_1 {
 uvec3 _f0;
 mat3x4 _f1;
 uvec4 _f2;
 uvec2 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_4 {
 _GLF_struct_1 _f0;
 _GLF_struct_2 _f1;
 _GLF_struct_3 _f2;
} ;

struct _GLF_struct_0 {
 uint _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_14 {
 uint read;
 _GLF_struct_0 _f0;
 _GLF_struct_4 _f1;
 _GLF_struct_7 _f2;
 _GLF_struct_10 _f3;
 _GLF_struct_12 _f4;
 _GLF_struct_13 _f5;
 ivec3 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(_GLF_IDENTITY(! (false), ! (! (! (false)))))))))))
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(0, _GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, max(0, 0)), 0))) << 0, (true ? (0) << 0 : _GLF_FUZZED(-8810)))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) * 1)), int(4))) + (int(5))), int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, min(_GLF_IDENTITY(5, (5) / 1), _GLF_IDENTITY(5, (5) >> 0))))))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       for(int _injected_loop_counter = (0 & -44519); _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) | 1)); _injected_loop_counter ++)
        {
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))));
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.2), _GLF_FUZZED(float(false))), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], (true ? (injectionSwitch)[1] : _GLF_FUZZED(-4.7)))), bvec2(true, true))).x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, float(vec4(1.0, 1.0, 1.0, 1.0)))) * (injectionSwitch)))).y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false)))))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      barrier();
    }
   else
    {
    }
  }
 else
  {
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) >> uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) / 1u)) - 0u), 0u, _GLF_IDENTITY(0u, ~ (~ (0u))))).x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), mix(float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(((true ? true : false) ? 4.0 : 9.7))), bool(false))))), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-5.5, -584.476)) : injectionSwitch)).x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), min((1 << _GLF_IDENTITY(int(1), int(1))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1 << _GLF_IDENTITY(int(1), int(1))) : _GLF_FUZZED(18676))))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
        {
         do
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) / vec2(1.0, 1.0)).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             do
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-3.1) : injectionSwitch.x)))) > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), false))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, false))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bvec2(bool(bvec4(false, true, false, false)), false)))), false)))))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, min(gl_WorkGroupID, gl_WorkGroupID)).x;
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_25 _GLF_struct_replacement_25 = _GLF_struct_25(_GLF_struct_17(ivec3(1), _GLF_struct_15(mat2x3(1.0), 1u), _GLF_struct_16(uvec3(1u), mat4(1.0), vec4(1.0), _GLF_IDENTITY(vec4(1.0), (vec4(1.0)) * vec4(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(mix(-1449.5037, -9.6, true)) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))))), bvec3(true))), mat2x4(1.0), _GLF_struct_18(ivec4(_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) + 0), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(1, (1) + 0)), (int(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(1, (1) + 0))) / (1 ^ 0)))) ^ 0)))) << _GLF_IDENTITY(0, 0 ^ (0))), 1, 0, int(_GLF_ZERO(0.0, injectionSwitch.x)))))), ivec3(1), mat2(1.0)), _GLF_struct_20(mat2x4(1.0), _GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), false))), false, false)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2(true), bvec2(_GLF_IDENTITY(bvec3(bvec2(true), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(true), false), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec2(true), false))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec2(true), false))), false)))), true))))), false, false)), true, false)))), uvec2(1u), _GLF_struct_19(ivec2(1), bvec4(true), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, uint(uvec3(1u, _GLF_IDENTITY(0u, min(0u, 0u)), 1u)))))) | 0u), vec2(1.0), mat3(1.0), 1.0)), _GLF_struct_22(_GLF_struct_21(ivec2(1), vec3(1.0), _GLF_IDENTITY(ivec3(1), min(ivec3(1), ivec3(1))))), _GLF_struct_24(_GLF_struct_23(bvec4(true), ivec4(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, int(ivec4(1, 1, 0, 0))), 1, 1))), uvec3(1u), mat3x4(1.0), mat4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))), mix(float(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))), float(_GLF_FUZZED(-995.061)), bool(false))))), true, 1.0, _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> 0u), ivec2(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, max(1, 1))))) | (1))), mat2x4(1.0)));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_struct_replacement_25._f5.workgroup_base, min(_GLF_IDENTITY(_GLF_struct_replacement_25._f5.workgroup_base, (_GLF_struct_replacement_25._f5.workgroup_base) | (_GLF_struct_replacement_25._f5.workgroup_base)), _GLF_struct_replacement_25._f5.workgroup_base)) + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) / _GLF_IDENTITY(1u, uint(uvec2(1u, 1u))))) | 0u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u)) | (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec3(subgroup_size, 1u, 1u)), _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) | 0u))) | (uint(uvec3(subgroup_size, 1u, 1u))))))), subgroup_size), max(_GLF_IDENTITY(_GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (0u ^ uint(_GLF_ONE(1.0, injectionSwitch.y)))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) / _GLF_IDENTITY(1u, uint(uvec2(1u, 1u))), max((subgroup_size) / _GLF_IDENTITY(1u, uint(uvec2(1u, 1u))), (subgroup_size) / _GLF_IDENTITY(1u, uint(uvec2(1u, 1u))))))) | 0u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u)) | (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec3(subgroup_size, 1u, 1u)), 0u | (uint(uvec3(subgroup_size, 1u, 1u))))))), subgroup_size), ~ (~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (0u ^ uint(_GLF_ONE(1.0, injectionSwitch.y)))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) / _GLF_IDENTITY(1u, uint(uvec2(1u, 1u))), max((subgroup_size) / _GLF_IDENTITY(1u, uint(uvec2(1u, 1u))), (subgroup_size) / _GLF_IDENTITY(1u, uint(uvec2(1u, 1u))))))) | 0u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u)) | (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec3(subgroup_size, 1u, 1u)), 0u | (uint(uvec3(subgroup_size, 1u, 1u))))))), subgroup_size), (clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (0u ^ uint(_GLF_ONE(1.0, injectionSwitch.y)))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) / _GLF_IDENTITY(1u, uint(uvec2(1u, 1u))), max((subgroup_size) / _GLF_IDENTITY(1u, uint(uvec2(1u, 1u))), (subgroup_size) / _GLF_IDENTITY(1u, uint(uvec2(1u, 1u))))))) | 0u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u)) | (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec3(subgroup_size, 1u, 1u)), 0u | (uint(uvec3(subgroup_size, 1u, 1u))))))), subgroup_size)) | (clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), uint(uvec2(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (0u ^ uint(_GLF_ONE(1.0, injectionSwitch.y)))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) / _GLF_IDENTITY(1u, uint(uvec2(1u, 1u))), max((subgroup_size) / _GLF_IDENTITY(1u, uint(uvec2(1u, 1u))), (subgroup_size) / _GLF_IDENTITY(1u, uint(uvec2(1u, 1u))))))) | 0u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u)) | (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec3(subgroup_size, 1u, 1u)), 0u | (uint(uvec3(subgroup_size, 1u, 1u))))))), subgroup_size)))))), uint(uvec2(_GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) / _GLF_IDENTITY(1u, uint(uvec2(1u, 1u))))) | 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) / _GLF_IDENTITY(1u, uint(uvec2(1u, 1u))))) | 0u), (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) / _GLF_IDENTITY(1u, uint(uvec2(1u, 1u))))) | 0u)) | (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) / _GLF_IDENTITY(1u, uint(uvec2(1u, 1u))))) | 0u))), _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) / _GLF_IDENTITY(1u, uint(uvec2(1u, 1u))))) | 0u))), (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u)) | (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec3(subgroup_size, 1u, 1u)), 0u | (uint(uvec3(subgroup_size, 1u, 1u))))))), subgroup_size), uint(uint(clamp(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) / _GLF_IDENTITY(1u, uint(uvec2(1u, 1u))))) | 0u), (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), min(_GLF_IDENTITY((subgroup_size), clamp((subgroup_size), (subgroup_size), (subgroup_size))), (subgroup_size))) >> 0u)) | (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec3(subgroup_size, 1u, 1u)), 0u | (uint(uvec3(subgroup_size, 1u, 1u))))))), subgroup_size)))), 0u))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) / _GLF_IDENTITY(1u, uint(uvec2(1u, 1u))))) | 0u), (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) >> 0u, _GLF_IDENTITY(uint(uint((subgroup_size) >> 0u)), 0u | (uint(uint((subgroup_size) >> 0u))))))) | (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec3(subgroup_size, 1u, 1u)), 0u | (uint(uvec3(subgroup_size, 1u, _GLF_IDENTITY(1u, (1u) | 0u)))))))), subgroup_size), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), (_GLF_IDENTITY(subgroup_size, (subgroup_size) / _GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uvec2(1u, 1u), min(uvec2(1u, 1u), _GLF_IDENTITY(uvec2(1u, 1u), (uvec2(1u, 1u)) | (uvec2(1u, 1u))))))))) | 0u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u)) | (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec3(subgroup_size, 1u, 1u)), 0u | (_GLF_IDENTITY(uint(uvec3(subgroup_size, 1u, 1u)), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(uint(uvec3(subgroup_size, 1u, 1u)), 0u ^ (uint(uvec3(subgroup_size, 1u, 1u)))), 0u, 1u, 0u)), (_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(uint(uvec3(subgroup_size, 1u, 1u)), 0u ^ (uint(uvec3(subgroup_size, 1u, 1u)))), 0u, 1u, 0u)), (uint(uvec4(_GLF_IDENTITY(uint(uvec3(subgroup_size, 1u, 1u)), 0u ^ (uint(uvec3(subgroup_size, 1u, 1u)))), 0u, 1u, 0u))) | (uint(uvec4(_GLF_IDENTITY(uint(uvec3(subgroup_size, 1u, 1u)), 0u ^ (uint(uvec3(subgroup_size, 1u, 1u)))), 0u, 1u, 0u))))) ^ (0u ^ 0u)))))))), subgroup_size), (clamp(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), (_GLF_IDENTITY(subgroup_size, (subgroup_size) / _GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uvec2(1u, 1u), min(uvec2(1u, 1u), _GLF_IDENTITY(uvec2(1u, 1u), (uvec2(1u, 1u)) | (uvec2(1u, 1u))))))))) | 0u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u)) | (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec3(subgroup_size, 1u, 1u)), 0u | (_GLF_IDENTITY(uint(uvec3(subgroup_size, 1u, 1u)), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(uint(uvec3(subgroup_size, 1u, 1u)), 0u ^ (uint(uvec3(subgroup_size, 1u, 1u)))), 0u, 1u, 0u)), (_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(uint(uvec3(subgroup_size, 1u, 1u)), 0u ^ (uint(uvec3(subgroup_size, 1u, 1u)))), 0u, 1u, 0u)), (uint(uvec4(_GLF_IDENTITY(uint(uvec3(subgroup_size, 1u, 1u)), 0u ^ (uint(uvec3(subgroup_size, 1u, 1u)))), 0u, 1u, 0u))) | (uint(uvec4(_GLF_IDENTITY(uint(uvec3(subgroup_size, 1u, 1u)), 0u ^ (uint(uvec3(subgroup_size, 1u, 1u)))), 0u, 1u, 0u))))) ^ (0u ^ 0u)))))))), subgroup_size)) | 0u)))))), (_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u))), ~ (~ (subgroup_size))), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u))), ~ (~ (subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u))), ~ (~ (subgroup_size))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) / _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | 0u), (1u) ^ 0u), uint(uvec2(1u, 1u))))) | 0u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u)) | (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec3(subgroup_size, 1u, 1u)), 0u | (uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), min(uvec3(subgroup_size, 1u, 1u), uvec3(subgroup_size, 1u, 1u))))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) / _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), uint(uvec2(1u, 1u))), clamp((subgroup_size) / _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), uint(uvec2(1u, 1u))), _GLF_IDENTITY((subgroup_size) / _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), uint(uvec2(1u, 1u))), uint(_GLF_IDENTITY(uvec3((subgroup_size) / _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), uint(uvec2(1u, 1u))), 0u, 0u), (uvec3((subgroup_size) / _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), uint(uvec2(1u, 1u))), 0u, 0u)) ^ uvec3(0u, 0u, 0u)))), (subgroup_size) / _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), uint(uvec2(1u, 1u))))))) | 0u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u)) | (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec3(subgroup_size, 1u, 1u)), 0u | (uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), min(uvec3(subgroup_size, 1u, 1u), uvec3(subgroup_size, 1u, 1u))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) / _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), uint(uvec2(1u, 1u))))) | 0u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u)) | (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec3(subgroup_size, 1u, 1u)), 0u | (uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), min(uvec3(subgroup_size, 1u, 1u), uvec3(subgroup_size, 1u, 1u))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) / _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), uint(uvec2(1u, 1u))))) | 0u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u)) | (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec3(subgroup_size, 1u, 1u)), 0u | (uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), min(uvec3(subgroup_size, 1u, 1u), uvec3(subgroup_size, 1u, 1u)))))))))) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) / _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), uint(uvec2(1u, 1u))))) | 0u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u)) | (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec3(subgroup_size, 1u, 1u)), 0u | (uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 1u), min(uvec3(subgroup_size, 1u, 1u), uvec3(subgroup_size, 1u, 1u))))))))))), subgroup_size))) << 0u)) >> 0u) + subgroup_local_id;
 uint next_virtual_gid = _GLF_struct_replacement_25._f5.workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), min(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size)));
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   do
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) - 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter))))) < _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 + (int(_GLF_ONE(1.0, injectionSwitch.y)))), int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y))))) | (int(_GLF_ONE(1.0, injectionSwitch.y)))), _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) | (int(_GLF_ONE(1.0, injectionSwitch.y))))), ((_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) | (int(_GLF_ONE(1.0, injectionSwitch.y)))))) | ((_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) | (int(_GLF_ONE(1.0, injectionSwitch.y))))))) << 0), (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter))))) < _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) | (int(_GLF_ONE(1.0, injectionSwitch.y)))), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))) | (int(_GLF_ONE(1.0, injectionSwitch.y))))) << 0)) && true)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec4(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true, false))))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(trunc(vec2(-2.7, -5917.9221)))), ((true ? injectionSwitch : _GLF_FUZZED(trunc(vec2(-2.7, -5917.9221))))) / vec2(1.0, 1.0))).x > injectionSwitch.y))))
                  barrier();
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))));
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || false)))) || _GLF_IDENTITY(false, ! (! (false)))), ((injectionSwitch.x > injectionSwitch.y)) && true))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           else
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false, true)))));
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 do
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
      }
    }
   for(_GLF_struct_35 _GLF_struct_replacement_35 = _GLF_struct_35(_GLF_struct_29(mat4x3(1.0), mat3x2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(1.0, _GLF_ONE(1.0, injectionSwitch.y)), clamp(vec2(1.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(1.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(1.0, _GLF_ONE(1.0, injectionSwitch.y))))), (float(_GLF_IDENTITY(vec2(1.0, _GLF_ONE(1.0, injectionSwitch.y)), clamp(vec2(1.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(1.0, _GLF_ONE(1.0, injectionSwitch.y)), vec2(1.0, _GLF_ONE(1.0, injectionSwitch.y)))))) / 1.0))), _GLF_struct_26(mat2x4(1.0), mat4x2(1.0), mat4x3(1.0), bvec4(true), mat3x2(1.0)), _GLF_struct_27(mat3x4(_GLF_IDENTITY(1.0, min(1.0, 1.0))), mat4x3(1.0), vec3(_GLF_IDENTITY(1.0, float(vec3(1.0, _GLF_IDENTITY(dot(vec4(1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), mix(_GLF_IDENTITY(float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0))), clamp(float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0))), _GLF_IDENTITY(float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(cos(7.8)) : 1.0)), 1.0, 0.0))), float(mat2x4(float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0))), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0) - 0.0, (true ? _GLF_IDENTITY((0.0) - 0.0, clamp((0.0) - 0.0, (0.0) - 0.0, (0.0) - 0.0)) : _GLF_FUZZED(157.733)))), _GLF_IDENTITY(0.0, (0.0) / 1.0))), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0))), float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0, 0.0))))), float(_GLF_FUZZED(280.065)), bool(false))), dot(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-7496.4563))), 1.0), vec4(1.0, 1.0, 1.0, 0.0))), _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(0.0, 1.0, 1.0, 1.0), mix(vec4(_GLF_FUZZED(-38.01), _GLF_FUZZED(-0.0), (vec4(0.0, 1.0, 1.0, 1.0))[2], (vec4(_GLF_IDENTITY(0.0, float(vec3(0.0, 1.0, 0.0))), 1.0, 1.0, 1.0))[3]), vec4((vec4(0.0, 1.0, 1.0, 1.0))[0], _GLF_IDENTITY((vec4(0.0, 1.0, 1.0, 1.0)), vec4(mat3(_GLF_IDENTITY((vec4(0.0, 1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0)), 1.0)), max((vec4(0.0, 1.0, 1.0, 1.0)), (vec4(0.0, 1.0, 1.0, 1.0)))), determinant(mat2(0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 0.0)), 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) / abs(1.0)), 1.0)))[1], _GLF_FUZZED(-9.7), _GLF_FUZZED(5.9)), bvec4(true, true, false, false)))), (true ? float(_GLF_IDENTITY(vec4(0.0, 1.0, 1.0, 1.0), mix(vec4(_GLF_FUZZED(-38.01), _GLF_FUZZED(-0.0), (vec4(0.0, 1.0, 1.0, 1.0))[2], (vec4(_GLF_IDENTITY(0.0, float(vec3(0.0, 1.0, 0.0))), 1.0, 1.0, 1.0))[3]), vec4((vec4(0.0, 1.0, 1.0, 1.0))[0], _GLF_IDENTITY((vec4(0.0, 1.0, 1.0, 1.0)), vec4(mat3(_GLF_IDENTITY((vec4(0.0, 1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0)), 1.0)), max((vec4(0.0, 1.0, 1.0, 1.0)), (vec4(0.0, 1.0, 1.0, 1.0)))), determinant(mat2(0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 0.0)), 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) / abs(1.0)), 1.0)))[1], _GLF_FUZZED(-9.7), _GLF_FUZZED(5.9)), bvec4(true, true, false, false)))) : _GLF_FUZZED(determinant(mat3(6901.8840, -37.39, 669.941, 7.4, -795.836, -4.3, 57.87, -265.375, 6714.6746)))))), 0.0)), 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, _GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-3.1) : _GLF_IDENTITY(0.0, (0.0) * 1.0))), 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(dot(vec3(abs(1.0), 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(abs(1.0), 1.0, 1.0), vec3(0.0, 0.0, 0.0))) + (_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(529.018) : 1.0))))), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(_GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) / abs(1.0)), (true ? _GLF_IDENTITY(0.0, (0.0) / abs(1.0)) : _GLF_FUZZED(-49.58))))), 0.0, 0.0, 1.0), vec4(1.0, _GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, float(mat4x2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-53.68) : 1.0)), 0.0, 0.0, abs(0.0), exp(0.0), 1.0, 1.0, 1.0))))), 1.0, 0.0))), 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0)))), mat2x4(1.0), uvec2(1u), uvec4(_GLF_IDENTITY(1u, min(1u, 1u)))), ivec4(1), 0, _GLF_struct_28(bvec4(true))), uvec2(1u), _GLF_IDENTITY(uvec3(1u), (uvec3(1u)) << uvec3(0u, 0u, 0u)), _GLF_struct_31(_GLF_struct_30(1u, uvec3(1u), mat2x3(_GLF_IDENTITY(1.0, (1.0) / 1.0)), mat4x3(1.0), mat2x4(1.0), uvec2(_GLF_IDENTITY(1u, 1u * (1u))))), vec3(1.0), _GLF_struct_34(vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), (true ? (1.0) : _GLF_FUZZED(8.8))) / 1.0), max(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), 1.0)), _GLF_IDENTITY(1.0, 1.0 * (1.0))))), _GLF_struct_32(mat4x2(1.0)), _GLF_struct_33(ivec4(1), mat3(1.0)), mat2x3(1.0), ivec3(1), ivec2(1)), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, 0u | (_GLF_IDENTITY(1u, ~ (~ _GLF_IDENTITY((1u), uint(uvec2((1u), 1u)))))))), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, 0u | (_GLF_IDENTITY(1u, ~ (~ _GLF_IDENTITY((1u), uint(uvec2((1u), 1u)))))))), (uvec3(_GLF_IDENTITY(1u, 0u | (_GLF_IDENTITY(1u, ~ (~ _GLF_IDENTITY((1u), uint(uvec2((1u), 1u))))))))) >> uvec3(0u, 0u, 0u))) | uvec3(0u, 0u, 0u))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_35._f0._injected_loop_counter < (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y)))); _GLF_struct_replacement_35._f0._injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), true)))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
        barrier();
       barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (false ? _GLF_FUZZED(14566u) : next_virtual_gid))], _GLF_IDENTITY(_GLF_IDENTITY(uint(1), 0u | _GLF_IDENTITY((_GLF_IDENTITY(uint(1), (uint(1)) / 1u)), ~ (~ ((_GLF_IDENTITY(uint(1), (_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1)))) / 1u)))))), min(_GLF_IDENTITY(uint(1), 0u | (_GLF_IDENTITY(uint(1), (uint(1)) / 1u))), _GLF_IDENTITY(uint(1), _GLF_IDENTITY(0u | (_GLF_IDENTITY(uint(1), (uint(1)) / 1u)), (0u | (_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)), ((uint(1))) + 0u) / 1u))) - 0u)))), _GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, min(4, 4)))), 64, 4);
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) + sin(vec2(0.0, 0.0)), min(_GLF_IDENTITY((injectionSwitch) + sin(vec2(0.0, 0.0)), max((injectionSwitch) + sin(vec2(0.0, 0.0)), _GLF_IDENTITY((injectionSwitch) + sin(vec2(0.0, 0.0)), ((injectionSwitch) + sin(vec2(0.0, 0.0))) / vec2(1.0, 1.0)))), (injectionSwitch) + sin(vec2(0.0, 0.0))))).y))))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), ! (_GLF_IDENTITY(! (! (false)), (! (! (false))) || false)))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, bool(bvec2(false, true))) || (! (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7077.4318), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(4707.3369)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y))))))))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), float(mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (false ? _GLF_FUZZED(9.7) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), sin(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, length(0.0)))), 0.0, 1.0, 0.0, 0.0, exp(0.0), abs(1.0), 0.0, 1.0, 0.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)))), (float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), float(mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (false ? _GLF_FUZZED(9.7) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), sin(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, length(0.0)))), 0.0, 1.0, 0.0, 0.0, exp(0.0), abs(1.0), 0.0, 1.0, 0.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0))))) / 1.0)), _GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), max(_GLF_IDENTITY(min(injectionSwitch.x, injectionSwitch.x), mix(float(_GLF_FUZZED(float(false))), float(min(injectionSwitch.x, injectionSwitch.x)), bool(true))), min(injectionSwitch.x, injectionSwitch.x))))))), _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / abs(1.0))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))), injectionSwitch.x))), float(_GLF_FUZZED(3.6)), bool(false)))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), max(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (_GLF_IDENTITY(~ (int(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(~ (int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(~ (int(_GLF_ZERO(0.0, injectionSwitch.x))), min(~ (int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)))))) && _GLF_IDENTITY(true, (true) || false)), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(float(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0)), 0.0, 1.0))).x))), injectionSwitch.x))), float(_GLF_FUZZED(3.6)), bool(false)))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), max(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))))), _GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))) | (int(_GLF_ZERO(0.0, injectionSwitch.x))), 0 ^ (_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))) | (int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))) | (int(_GLF_ZERO(0.0, injectionSwitch.x))), ((int(_GLF_ZERO(0.0, injectionSwitch.x))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)))) >> 0))))))))) && _GLF_IDENTITY(true, (true) || false))))) && true)), false || (_GLF_IDENTITY(true, true && (true)) && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) != int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0)), 0.0)), injectionSwitch.x), clamp(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0)), 0.0)), injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0)), 0.0)), injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0)), 0.0)), injectionSwitch.x))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(-68.40)), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true)))), _GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), ((int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ 0) | (int(_GLF_ZERO(0.0, injectionSwitch.x)))))) && true)) && true))))); _injected_loop_counter --)
                {
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
                {
                 barrier();
                }
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)))))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(6), int(6))), ((0 >> _GLF_IDENTITY(int(6), int(6)))) | 0), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(6), int(6))), ((0 >> _GLF_IDENTITY(int(6), int(6)))) | 0)) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) || false))) && true)))) && true))))))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 _GLF_struct_14 _GLF_struct_replacement_14 = _GLF_struct_14(atomicLoad(buf[virtual_gid], 4, 64, 0), _GLF_struct_0(1u, _GLF_IDENTITY(uvec4(1u), uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, (0u) * uint(_GLF_ONE(1.0, injectionSwitch.y)))) | (uvec4(1u)))), _GLF_struct_4(_GLF_struct_1(uvec3(1u), mat3x4(1.0), uvec4(1u), _GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY((uvec2(1u)) | (_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | 0u), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1u, (1u) | 0u))), max((~ (_GLF_IDENTITY(1u, (1u) | 0u))), (~ (_GLF_IDENTITY(1u, (1u) | 0u))))))), uvec2(_GLF_IDENTITY(uvec4(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | _GLF_IDENTITY(0u, (0u) / 1u)), ~ (~ (_GLF_IDENTITY(1u, (1u) | 0u))))), 1u, ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (_GLF_IDENTITY(uint(5u), (true ? _GLF_IDENTITY(uint(5u), (uint(5u)) * 1u) : _GLF_FUZZED(subgroup_size)))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), uint(5u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), (uint(5u)) + 0u), uint(5u)))), uvec4(0u, 0u, 0u, 0u) | (uvec4(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | 0u), ~ (~ (_GLF_IDENTITY(1u, (1u) | 0u))))), 1u, ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))))))) | (_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u)))), _GLF_IDENTITY((~ ((uvec2(1u)) | (_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))))) >> uvec2(0u, 0u), (_GLF_IDENTITY((~ ((uvec2(1u)) | (_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))))) >> uvec2(0u, 0u), min((~ ((uvec2(1u)) | (_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))))) >> uvec2(0u, 0u), (~ ((uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) * 1u)) | (1u)))) | (_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) >> uvec2(0u, 0u))))) >> _GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), min(uvec2(0u, 0u), uvec2(0u, 0u)))) << uvec2(0u, 0u))) | uvec2(0u, 0u))))) ^ uvec2(0u, _GLF_IDENTITY(0u, (0u) / 1u))))))), vec4(1.0)), _GLF_struct_2(_GLF_IDENTITY(vec3(1.0), min(_GLF_IDENTITY(vec3(1.0), (true ? _GLF_IDENTITY(vec3(1.0), vec3(mat2x4(vec3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))))), 1.0, 1.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(vec3(-378.666, 67.71, _GLF_IDENTITY(7648.4107, (7648.4107) * 1.0))))), vec3(1.0))), 1u, mat3(1.0), vec2(1.0), uvec3(1u), vec2(1.0), mat3x4(1.0)), _GLF_struct_3(ivec2(1), mat3x2(1.0))), _GLF_struct_7(mat2x4(1.0), mat2x3(1.0), _GLF_struct_5(vec4(1.0), bvec2(true), 1u), _GLF_struct_6(mat2x3(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0))), mat3x2(1.0), _GLF_IDENTITY(uvec3(1u), (uvec3(1u)) | (_GLF_IDENTITY(uvec3(1u), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(uvec3(1u), uvec3(uvec3(uvec3(1u))))), max(_GLF_IDENTITY((_GLF_IDENTITY(uvec3(1u), uvec3(uvec3(uvec3(1u))))), ~ (~ ((_GLF_IDENTITY(uvec3(1u), uvec3(uvec3(uvec3(1u)))))))), (_GLF_IDENTITY(uvec3(1u), uvec3(uvec3(uvec3(1u)))))))))))), _GLF_struct_10(_GLF_struct_8(mat3x2(1.0), mat2(1.0), mat2x4(_GLF_IDENTITY(1.0, min(1.0, 1.0))), bvec3(true), vec2(1.0), mat3x2(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0), (mat3x4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0)) - mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), ~ (_GLF_IDENTITY(~ (uvec3(1u)), uvec3(0u, 0u, 0u) + (~ (uvec3(1u)))))), min(uvec3(1u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), min(uvec3(1u), uvec3(1u))), _GLF_IDENTITY((_GLF_IDENTITY(uvec3(1u), min(uvec3(1u), uvec3(1u)))), min((_GLF_IDENTITY(uvec3(1u), min(uvec3(1u), uvec3(1u)))), (_GLF_IDENTITY(uvec3(1u), min(uvec3(1u), uvec3(1u)))))) | (_GLF_IDENTITY(uvec3(1u), min(uvec3(1u), uvec3(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, max(1u, 1u)), 1u, _GLF_IDENTITY(1u, min(1u, 1u)))), 1u))))))), (false ? _GLF_FUZZED(uvec3(109741u, 70609u, 50032u)) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), min(uvec3(1u), uvec3(1u))), (_GLF_IDENTITY(uvec3(1u), min(uvec3(1u), uvec3(1u)))) | (_GLF_IDENTITY(uvec3(1u), min(uvec3(1u), uvec3(1u))))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), min(_GLF_IDENTITY(uvec3(1u), min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), (true ? uvec3(1u) : _GLF_FUZZED(uvec3(181238u, 13586u, 14155u)))))), uvec3(1u))), (_GLF_IDENTITY(uvec3(1u), min(uvec3(1u), uvec3(1u)))) | (_GLF_IDENTITY(uvec3(1u), min(uvec3(1u), uvec3(1u)))))) ^ (uvec3(0u, 0u, 0u) ^ uvec3(0u, 0u, 0u)))))))), mat3x2(1.0), _GLF_struct_9(vec2(1.0), mat2x4(1.0), vec4(1.0)), mat3(1.0)), _GLF_struct_12(_GLF_struct_11(ivec2(1), bvec2(true), bvec3(true), mat2x3(1.0), _GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), false))))), _GLF_struct_13(mat2(1.0), bvec3(true)), ivec3(1));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   atomicStore(checker[virtual_gid], _GLF_struct_replacement_14.read, 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(abs(vec2(0.0, 0.0)))).x > injectionSwitch.y))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
