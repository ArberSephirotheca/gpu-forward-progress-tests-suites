#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_6 {
 ivec3 _f0;
 bool _f1;
} ;

struct _GLF_struct_5 {
 uint next_virtual_gid;
 mat4 _f0;
} ;

struct _GLF_struct_7 {
 _GLF_struct_5 _f0;
 bvec3 _f1;
 _GLF_struct_6 _f2;
} ;

struct _GLF_struct_4 {
 float _f0;
 mat2x4 _f1;
 uint subgroup_local_id;
} ;

struct _GLF_struct_1 {
 vec4 _f0;
} ;

struct _GLF_struct_0 {
 mat4x3 _f0;
 mat4x3 _f1;
 mat2 _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_2 {
 uint workgroup_size;
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 bvec4 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_3 {
 _GLF_struct_2 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uvec2 GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(1, (false ? _GLF_FUZZED(3379) : 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 else
  {
  }
 uvec4 GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_14subgroup_idsubgroup_local_idvirtual_gidworkgroup_base;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 uvec2 GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uvec2 GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false))))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
          }
        }
       else
        {
        }
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, float(mat4x2(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, _GLF_IDENTITY(1.0, float(mat2x4(1.0, 1.0, 1.0, 1.0, tan(0.0), 0.0, sqrt(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(1.9) : 0.0))))), 0.0, cos(0.0), 0.0, 1.0, 0.0, log(1.0), 1.0))) > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(3) : _GLF_FUZZED(ivec3(19870, -80300, -89594)[2])))))); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -60320)); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))) > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            barrier();
           barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              barrier();
            }
           barrier();
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 0.0, 0.0, 0.0, length(0.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, sin(0.0)))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter))) / 1), _injected_loop_counter)) < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1))
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, 0 ^ (1))); _injected_loop_counter ++)
        {
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))))));
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(log(0.1)) : _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))))) > injectionSwitch.y))));
  }
 do
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_14subgroup_idsubgroup_local_idvirtual_gidworkgroup_base.x = subgroup_id;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((false ? -9.2 : -441.890)), _GLF_FUZZED((-39.12))), bvec2(false, false))), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(sqrt(1.0), 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(sqrt(1.0), 0.0, 0.0), vec3(1.0, 0.0, 0.0))), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, sqrt(0.0), 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, sqrt(0.0), 0.0))), 0.0, 0.0, 0.0, 1.0)), max(_GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(sqrt(1.0), 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(sqrt(1.0), 0.0, 0.0), vec3(1.0, 0.0, 0.0))), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, sqrt(0.0), 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, sqrt(0.0), 0.0))), 0.0, 0.0, 0.0, 1.0)), min(vec2(mat4x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(sqrt(1.0), 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(_GLF_IDENTITY(sqrt(1.0), max(sqrt(1.0), sqrt(1.0))), 0.0, 0.0), vec3(1.0, 0.0, 0.0))), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, sqrt(0.0), 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, sqrt(0.0), 0.0))), 0.0, 0.0, 0.0, 1.0)), vec2(mat4x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(sqrt(1.0), 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(sqrt(1.0), 0.0, 0.0), vec3(1.0, 0.0, 0.0))), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, sqrt(0.0), 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, sqrt(0.0), 0.0))), 0.0, 0.0, 0.0, 1.0)))), vec2(mat4x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(sqrt(1.0), 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(sqrt(1.0), 0.0, 0.0), vec3(1.0, 0.0, 0.0))), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, sqrt(0.0), 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, sqrt(0.0), 0.0))), 0.0, 0.0, 0.0, 1.0))))).y)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))) || false), true && (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))) || false))), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))), true && (bool(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, clamp(5, _GLF_IDENTITY(5, 0 | (5)), 5)))))); _injected_loop_counter --)
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) ^ 0)), (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(int(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)), ~ (~ ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))))))), 0 ^ (int(int(_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)), ~ (~ ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))))))))))) * (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, int(ivec2(6, 1))), 6, 6)))) ^ 0))))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, true && (_GLF_IDENTITY((false), ((false)) && true) || false)))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, (true) && true))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x = subgroup_size;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false)))))))
          barrier();
         barrier();
        }
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4.0), _GLF_FUZZED(4485.0188)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))).y))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y = GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(1.0, mat2x4(1.0), gl_SubgroupInvocationID);
 do
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_14subgroup_idsubgroup_local_idvirtual_gidworkgroup_base.y = _GLF_struct_replacement_4.subgroup_local_id;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(2), int(2)))); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             else
              {
               _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x = GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_14subgroup_idsubgroup_local_idvirtual_gidworkgroup_base.y, 0u + (_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x = GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_14subgroup_idsubgroup_local_idvirtual_gidworkgroup_base.y, 0u ^ (GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x = GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_14subgroup_idsubgroup_local_idvirtual_gidworkgroup_base.y))));
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))))))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                    {
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), false || (bool(bvec3(false, true, false)))))))
                      barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false, false, false)), (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false, false, false))) || false)))
                barrier();
              }
             barrier();
            }
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), _GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! _GLF_IDENTITY((! (! (false))), true && ((! (! (false))))))))) || false)), ! (! ((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))) || false))))) || false)), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), bool(bvec4((false), true, false, false))), ! (! (! (false))))))) || false)) || false))), false || _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))) || false)) || false))), false || (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))) || false)) || false)))))), (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))) || false, ((_GLF_IDENTITY(false, ! (! (false)))) || false) || false)), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))) || false)) || false))), false || (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! _GLF_IDENTITY((false), ((false)) && true))))))) || false)) || false)))))), (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))) || false)) || false))), false || (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))) || false)) || false)), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))) || false)) || false)), true, true, true)), bool(bvec4(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))) || false)) || false)), true, true, true)), true, false, true)))))))), ((_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))) || false)) || false))), false || (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))) || false)) || false))))))) && true)) && true)) && true)))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), true && (! (! (true)))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) / 1), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(_injected_loop_counter) : int(2)))), min(~ (_GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(_injected_loop_counter) : int(2)))), _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(_injected_loop_counter) : int(2)))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)))))) : int(2)))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(_injected_loop_counter) : int(2)))), (~ (_GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(_injected_loop_counter) : int(2))))) ^ 0), min(~ (_GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(_injected_loop_counter) : int(2)))), ~ (_GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(_injected_loop_counter) : int(2))))))) >> 0), ~ (_GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(_injected_loop_counter) : int(2)))), ~ (_GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(_injected_loop_counter) : int(2)))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(_injected_loop_counter) : int(2)))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)))))) : int(2)))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(_injected_loop_counter) : int(2)))), (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(2, 0 ^ (_GLF_IDENTITY(2, 0 | (2))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(int(mod(-7.1, -15.98))) : _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))))))) : int(2))))) ^ 0), min(~ (_GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(_injected_loop_counter) : int(2)))), ~ (_GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(_injected_loop_counter) : int(2))))))) >> 0), ~ (_GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(_injected_loop_counter) : int(2)))), ~ (_GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(_injected_loop_counter) : int(2))))))) / 1)))))))); _injected_loop_counter ++)
                          {
                           do
                            {
                             for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), int(6))) ^ _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) >> 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               barrier();
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                          {
                           barrier();
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                       for(int _injected_loop_counter = _GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, (true ? 8 : _GLF_FUZZED((_injected_loop_counter))))))), clamp((0 << _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, (true ? 8 : _GLF_FUZZED((_injected_loop_counter))))))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, (true ? 8 : _GLF_FUZZED((_injected_loop_counter))))))), ((0 << _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, (true ? 8 : _GLF_FUZZED((_injected_loop_counter)))))))) | ((0 << _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, (true ? 8 : _GLF_FUZZED((_injected_loop_counter))))))))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, (true ? 8 : _GLF_FUZZED((_injected_loop_counter))))))), (true ? (0 << _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, (true ? 8 : _GLF_FUZZED((_injected_loop_counter))))))) : _GLF_FUZZED(6641))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                          barrier();
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))))))) * vec2(1.0, 1.0)).y))));
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((-74069 & 0) << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).y))))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(int(1), 1, 1), ivec3(ivec4(ivec3(int(1), 1, 1), 0)))), max(int(_GLF_IDENTITY(ivec3(int(1), 1, 1), ivec3(ivec4(ivec3(int(1), 1, 1), 0)))), int(_GLF_IDENTITY(ivec3(int(1), 1, 1), ivec3(ivec4(ivec3(int(1), 1, 1), 0)))))))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(_GLF_struct_2(_GLF_IDENTITY(gl_WorkGroupSize.x, uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u)), 0u, _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, uint(uvec2(0u, 0u))))))).x, _GLF_IDENTITY((gl_WorkGroupSize.x), (true ? (gl_WorkGroupSize.x) : _GLF_FUZZED(67107u))) | 0u)), clamp(uint(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | 0u)), uint(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-79.75), _GLF_FUZZED((-953.304 * float(false)))), bvec2(false, _GLF_IDENTITY(false, false || (false))))).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) * (_GLF_IDENTITY((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) >> _GLF_IDENTITY(uvec3(3u), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(3u), min(uvec3(3u), uvec3(3u))), (uvec3(3u)) << uvec3(0u, 0u, 0u))), ((_GLF_IDENTITY(uvec3(1u, 1u, 1u), (uvec3(1u, 1u, 1u)) | (uvec3(1u, 1u, 1u))) << _GLF_IDENTITY(uvec3(3u), uvec3(3u))) >> _GLF_IDENTITY(uvec3(3u), _GLF_IDENTITY(uvec3(3u), (uvec3(3u)) << uvec3(0u, 0u, 0u)))) >> uvec3(0u, 0u, 0u)))).x) | 0u)), uint(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)).x), _GLF_IDENTITY((true ? (gl_WorkGroupSize.x) : _GLF_FUZZED(67107u)), (false ? _GLF_FUZZED(num_workgroup) : (true ? (gl_WorkGroupSize.x) : _GLF_FUZZED(67107u))))) | 0u)), clamp(uint(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | 0u)), uint(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x2(0.0, 1.0, tan(log(1.0)), 0.0, 1.0, 0.0), (mat3x2(0.0, 1.0, tan(log(1.0)), 0.0, 1.0, 0.0)) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), sqrt(0.0)), mat2(mat3x2(mat2(0.0, 1.0, determinant(mat3(1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY((false ? _GLF_FUZZED(roundEven(-5.6)) : 0.0), ((false ? _GLF_FUZZED(roundEven(-5.6)) : 0.0)) - sin(_GLF_ZERO(0.0, injectionSwitch.x)))), 1.0, 1.0, 0.0, 0.0, 1.0)), sqrt(0.0)))))), (true ? float(_GLF_IDENTITY(_GLF_IDENTITY(mat2(0.0, 1.0, determinant(mat3(1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), sqrt(0.0)), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (mat2(0.0, 1.0, determinant(mat3(1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), sqrt(0.0)))), mat2(mat3x2(_GLF_IDENTITY(mat2(0.0, 1.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0)))), sqrt(0.0)), _GLF_IDENTITY(mat2(mat4x3(mat2(0.0, 1.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), sqrt(0.0)))), (_GLF_IDENTITY(mat2(mat4x3(mat2(0.0, 1.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), sqrt(0.0)))), (mat2(mat4x3(mat2(0.0, 1.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), sqrt(0.0))))) + mat2(0.0, 0.0, 0.0, 0.0))) - mat2(0.0, 0.0, 0.0, 0.0))))))) : _GLF_FUZZED(clamp(-3.3, -4564.3126, -669.170))))), injectionSwitch.x), (_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(0.0, 1.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), sqrt(0.0)), mat2(mat3x2(mat2(0.0, 1.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), sqrt(0.0)))))), (true ? float(_GLF_IDENTITY(_GLF_IDENTITY(mat2(0.0, 1.0, determinant(mat3(1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0)), 1.0, 0.0, 0.0, 1.0)), sqrt(0.0)), mat2(mat3x2(mat2(0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), _GLF_IDENTITY(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), mix(float(determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED((- -19.82))), bool(false))), sqrt(0.0))))), (_GLF_IDENTITY(mat2(0.0, 1.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), sqrt(0.0)), mat2(mat3x2(mat2(0.0, 1.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), sqrt(0.0)))))) / mat2(1.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(clamp(-3.3, -4564.3126, -669.170))))), injectionSwitch.x)) - tan(0.0)))).x) | 0u)), uint(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | 0u), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | 0u), (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | 0u)) << 0u)) << 0u))))), min((_GLF_IDENTITY(uint(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x), (true ? (gl_WorkGroupSize.x) : _GLF_FUZZED(67107u))) | 0u)), clamp(uint(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) | _GLF_IDENTITY((gl_WorkGroupSize), max((gl_WorkGroupSize), (gl_WorkGroupSize)))).x))))) | 0u)), uint(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2(0.0, 1.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), sqrt(0.0)), mat2(mat3x2(mat2(0.0, 1.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(3.9))))), sqrt(0.0))))))), min(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2(0.0, 1.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), sqrt(0.0)), mat2(mat3x2(mat2(0.0, 1.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(true, (true) && true) ? 1.0 : _GLF_FUZZED(3.9))))), sqrt(0.0))))))), _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2(0.0, 1.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), sqrt(0.0)), mat2(mat3x2(mat2(0.0, 1.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), vec3(0.0, 0.0, abs(0.0))), dot(vec3(1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), vec3(0.0, 0.0, abs(0.0)))) + (_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(5718.0440) : 1.0)))) : _GLF_IDENTITY(_GLF_FUZZED(3.9), mix(float(_GLF_FUZZED(3.9)), float(_GLF_FUZZED(3.0)), bool(false))))))), sqrt(0.0))))))))), injectionSwitch.x))).x) | 0u)), uint(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | 0u))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, min(gl_WorkGroupSize, gl_WorkGroupSize)).x), (true ? (gl_WorkGroupSize.x) : _GLF_FUZZED(67107u))) | 0u)), clamp(uint(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) << 0u)), min((_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) << 0u)), _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) << 0u)), ((_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) << 0u))) / 1u))) | 0u)), uint(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2(0.0, 1.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), sqrt(0.0)), mat2(mat3x2(mat2(0.0, 1.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 1.0)), sqrt(0.0))))))), injectionSwitch.x))).x) | 0u)), _GLF_IDENTITY(uint(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | 0u)), ~ (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x), uint(uvec2((gl_WorkGroupSize.x), uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | 0u)), (uint(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | 0u))) | 0u))))))))) >> _GLF_IDENTITY(0u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(bitfieldInsert(125687u, min(subgroup_size, num_workgroup), -71007, (-29966 / -56562))) : 0u))))), _GLF_struct_0(mat4x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), _GLF_IDENTITY(float(vec4((1.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x))), mix(float(_GLF_IDENTITY(float(vec4((1.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x))), max(float(vec4((1.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x))), float(vec4((1.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x)))))), float(_GLF_FUZZED(6263.9620)), bool(false)))) + 0.0)), mat4x3(1.0), mat2(1.0), bvec3(_GLF_IDENTITY(true, bool(bvec2(true, false))))), _GLF_struct_1(vec4(_GLF_IDENTITY(1.0, min(1.0, 1.0)))), bvec4(true), bvec2(true)));
 GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y = _GLF_struct_replacement_3._f0.workgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), _GLF_IDENTITY(int(2), min(int(2), int(2))))) >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, ~ (_GLF_IDENTITY(~ (2), 0 ^ (_GLF_IDENTITY(~ (2), clamp(_GLF_IDENTITY(~ (2), (~ (2)) | (_GLF_IDENTITY(~ (2), ~ (_GLF_IDENTITY(~ (~ (2)), max(~ (~ (2)), ~ (~ (2)))))))), ~ (2), ~ (2))))))))))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.y * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = _GLF_IDENTITY(1, max(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((-1.2 * vec2(-405.626, -1.7))))), injectionSwitch), mix(vec2(_GLF_FUZZED(float(-86537)), _GLF_FUZZED(-929.255)), vec2((max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((-1.2 * vec2(-405.626, -1.7))))), injectionSwitch))[0], (max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((-1.2 * vec2(-405.626, -1.7))))), injectionSwitch))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   do
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = ((1 ^ 1) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, ~ (~ (0))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_14subgroup_idsubgroup_local_idvirtual_gidworkgroup_base.w = workgroup_base;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_IDENTITY(_GLF_FUZZED(-7989.5518), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(-7989.5518), float(float(_GLF_FUZZED(_GLF_IDENTITY(-7989.5518, (_GLF_IDENTITY(-7989.5518, min(_GLF_IDENTITY(-7989.5518, mix(float(-7989.5518), float(_GLF_FUZZED(4373.3188)), bool(false))), _GLF_IDENTITY(-7989.5518, float(vec2(-7989.5518, 0.0)))))) * 1.0))))) : _GLF_FUZZED(69.76))) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   for(int _injected_loop_counter = (((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2)))))); _injected_loop_counter ++)
    {
     GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x = GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_14subgroup_idsubgroup_local_idvirtual_gidworkgroup_base.w;
    }
  }
 uint virtual_gid = _GLF_IDENTITY(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x + _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_14subgroup_idsubgroup_local_idvirtual_gidworkgroup_base.x * GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y, 0u | (GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_14subgroup_idsubgroup_local_idvirtual_gidworkgroup_base.x * GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y)) + GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, (GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x + _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_14subgroup_idsubgroup_local_idvirtual_gidworkgroup_base.x * GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y, 0u | (GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_14subgroup_idsubgroup_local_idvirtual_gidworkgroup_base.x * GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y)) + GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x) | (_GLF_IDENTITY(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x + _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_14subgroup_idsubgroup_local_idvirtual_gidworkgroup_base.x * GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y, 0u | (GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_14subgroup_idsubgroup_local_idvirtual_gidworkgroup_base.x * GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y)) + GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, 0u ^ (GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x + _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_14subgroup_idsubgroup_local_idvirtual_gidworkgroup_base.x * GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y, 0u | (GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_14subgroup_idsubgroup_local_idvirtual_gidworkgroup_base.x * GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y)) + GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x))));
 for(int _injected_loop_counter = _GLF_IDENTITY(0, min(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (false ? _GLF_FUZZED(ivec2(66209, 33156).t) : _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) - 0))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), true)))), false || (bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), true))))))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --))), (~ (_GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --)))) ^ 0))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y = virtual_gid;
 GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_14subgroup_idsubgroup_local_idvirtual_gidworkgroup_base.z = GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           do
            {
             for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(_GLF_struct_5(GLF_merged2_0_1_14_1_1_14workgroup_baseworkgroup_size.x + GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_14subgroup_idsubgroup_local_idvirtual_gidworkgroup_base.x * GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y + ((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x + 1) % GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y), mat4(1.0)), bvec3(true), _GLF_struct_6(ivec3(1), true));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             atomicStore(buf[_GLF_struct_replacement_7._f0.next_virtual_gid], uint(1), _GLF_IDENTITY(4, (_GLF_IDENTITY(true ? _GLF_IDENTITY(4, (4) - 0) : _GLF_FUZZED(-43764), clamp(_GLF_IDENTITY(true ? _GLF_IDENTITY(4, (4) - 0) : _GLF_FUZZED(-43764), clamp(true ? _GLF_IDENTITY(4, (4) - 0) : _GLF_FUZZED(-43764), true ? _GLF_IDENTITY(4, _GLF_IDENTITY((4) - 0, 0 ^ ((4) - 0))) : _GLF_FUZZED(-43764), true ? _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, ~ (~ (4)))) + 0)) | (4))) - 0) : _GLF_FUZZED(-43764))), true ? _GLF_IDENTITY(4, (4) - 0) : _GLF_FUZZED(-43764), true ? _GLF_IDENTITY(4, (4) - 0) : _GLF_FUZZED(-43764))))), 64, 4);
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true)))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, false)))))));
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (false ? _GLF_FUZZED(-99823) : int(7)))) | _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) | (0))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), min(_GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), ~ (~ (_GLF_IDENTITY(int(7), int(7)))))))))))); _GLF_IDENTITY(_injected_loop_counter ++, 0 | (_injected_loop_counter ++)))
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), ! (! (bool(bvec3(false, false, true))))))))
            barrier();
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (injectionSwitch.y) / 1.0)))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) && true)), bool(bvec3(false, false, true)))))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0)))); _injected_loop_counter --)
              {
               barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                barrier();
              }
             else
              {
              }
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 uint read = atomicLoad(_GLF_IDENTITY(buf[GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_14subgroup_idsubgroup_local_idvirtual_gidworkgroup_base.z], 0u | (buf[GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_14subgroup_idsubgroup_local_idvirtual_gidworkgroup_base.z])), _GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, _GLF_IDENTITY((4), 0 + ((4))) >> 0))), 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2128.8387)), bool(false))), injectionSwitch.x)), _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), (_GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), mix(float(_GLF_FUZZED(44.79)), _GLF_IDENTITY(float(_GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), mix(float(_GLF_FUZZED(7.1)), float(max(injectionSwitch.x, injectionSwitch.x)), bool(true)))), clamp(float(_GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), mix(float(_GLF_FUZZED(7.1)), float(max(injectionSwitch.x, injectionSwitch.x)), bool(true)))), _GLF_IDENTITY(float(_GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), mix(float(_GLF_FUZZED(7.1)), float(max(injectionSwitch.x, injectionSwitch.x)), bool(true)))), _GLF_IDENTITY((float(_GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), mix(float(_GLF_FUZZED(7.1)), float(max(injectionSwitch.x, injectionSwitch.x)), bool(true))))) / 1.0, mix(float(_GLF_FUZZED(-89.07)), float((float(_GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), mix(float(_GLF_FUZZED(7.1)), float(max(injectionSwitch.x, injectionSwitch.x)), bool(true))))) / 1.0), bool(true)))), float(_GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), mix(float(_GLF_FUZZED(7.1)), float(max(injectionSwitch.x, injectionSwitch.x)), bool(true)))))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) * 1.0)) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))))).y))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 << _GLF_IDENTITY(int(0), int(0))), (false ? _GLF_FUZZED(ivec4(8742, 54418, -7946, -77733)[1]) : (0 << _GLF_IDENTITY(int(0), int(0)))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) - 0), 1 * (_GLF_IDENTITY(int(4), (int(4)) - 0)))), 0 | (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) - 0), 1 * (_GLF_IDENTITY(int(4), (int(4)) - 0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, _GLF_IDENTITY((1), _GLF_IDENTITY(((1)) / 1, min(((1)) / 1, _GLF_IDENTITY(((1)) / 1, 0 ^ (((1)) / 1))))) | (1))); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((97715 - _GLF_IDENTITY(97643, 0 ^ (97643))) & (-95411 & 0))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 | (0 & (_GLF_IDENTITY(-95041, clamp(-95041, _GLF_IDENTITY(-95041, min(_GLF_IDENTITY(-95041, (-95041) / 1), -95041)), -95041)) - 38759))), (0 >> _GLF_IDENTITY(int(0), int(0))) | (_GLF_IDENTITY((0 | (_GLF_IDENTITY(0 & (_GLF_IDENTITY(-95041, 0 | (_GLF_IDENTITY(-95041, min(-95041, -95041)))) - 38759), ~ (_GLF_IDENTITY(~ (0 & (_GLF_IDENTITY(_GLF_IDENTITY(-95041, max(-95041, -95041)), 0 | (-95041)) - 38759)), (~ (0 & (_GLF_IDENTITY(-95041, 0 | (_GLF_IDENTITY(-95041, ~ (~ (-95041))))) - 38759))) + 0))))), 0 | ((0 | (0 & _GLF_IDENTITY((_GLF_IDENTITY(-95041 - 38759, max(-95041 - 38759, -95041 - 38759))), (_GLF_IDENTITY((-95041 - 38759), 0 ^ ((-95041 - 38759)))) | _GLF_IDENTITY(0, max(0, 0)))))))))); _injected_loop_counter --)
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))), int(6))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                        {
                         barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
              barrier();
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     else
                      {
                      }
                     barrier();
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               barrier();
              }
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(true, true, true))), (_GLF_IDENTITY(true, bool(bvec3(true, true, true)))) && true)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-9747.2685) : injectionSwitch.x)))) < injectionSwitch.y)))) && true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) ^ 0), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) | (int(_GLF_ONE(1.0, injectionSwitch.y)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         atomicStore(checker[GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_14subgroup_idsubgroup_local_idvirtual_gidworkgroup_base.z], read, 4, _GLF_IDENTITY(64, max(64, 64)), 4);
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
