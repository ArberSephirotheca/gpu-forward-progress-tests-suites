#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_16 {
 ivec2 _f0;
 mat2x3 _f1;
 bool _f2;
 bool _f3;
 mat3 _f4;
} ;

struct _GLF_struct_15 {
 float _f0;
} ;

struct _GLF_struct_14 {
 float _f0;
 mat2 _f1;
 mat4x3 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_13 {
 uint _f0;
 uvec3 _f1;
 uvec4 _f2;
 mat2x4 _f3;
 float _f4;
} ;

struct _GLF_struct_17 {
 mat2 _f0;
 mat4x2 _f1;
 _GLF_struct_13 _f2;
 _GLF_struct_14 _f3;
 mat2 _f4;
 _GLF_struct_15 _f5;
 _GLF_struct_16 _f6;
} ;

struct _GLF_struct_11 {
 mat3x4 _f0;
 mat4 _f1;
 mat4 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_12 {
 _GLF_struct_11 _f0;
} ;

struct _GLF_struct_9 {
 int _f0;
} ;

struct _GLF_struct_8 {
 mat2 _f0;
 bvec4 _f1;
 uvec2 _f2;
 ivec2 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_7 {
 mat3x2 _f0;
 mat3x4 _f1;
 uvec4 _f2;
 uvec3 _f3;
 float _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_10 {
 _GLF_struct_7 _f0;
 _GLF_struct_8 _f1;
 _GLF_struct_9 _f2;
} ;

struct _GLF_struct_18 {
 int _f0;
 uint read;
 _GLF_struct_10 _f1;
 _GLF_struct_12 _f2;
 _GLF_struct_17 _f3;
} ;

struct _GLF_struct_4 {
 vec4 _f0;
} ;

struct _GLF_struct_3 {
 mat2 _f0;
 mat3 _f1;
 ivec3 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_5 {
 mat2x4 _f0;
 bvec4 _f1;
 _GLF_struct_3 _f2;
 _GLF_struct_4 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_2 {
 uvec4 _f0;
 mat4 _f1;
} ;

struct _GLF_struct_0 {
 mat2x3 _f0;
} ;

struct _GLF_struct_1 {
 mat2x3 _f0;
 bvec2 _f1;
 _GLF_struct_0 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_6 {
 uint workgroup_id;
 _GLF_struct_1 _f0;
 _GLF_struct_2 _f1;
 mat2x3 _f2;
 mat3x4 _f3;
 _GLF_struct_5 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], _GLF_IDENTITY(gl_NumWorkGroups[1], ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups[1], max(gl_NumWorkGroups[1], gl_NumWorkGroups[1]))))), gl_NumWorkGroups[2]))) + uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : 0u, ((uint(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), 0u ^ (_GLF_IDENTITY(uint(2u), uint(2u))))) >> _GLF_IDENTITY(uint(2u), uint(2u))) * (false ? _GLF_FUZZED(subgroup_size) : 0u)))), 0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), max(_GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), clamp((gl_NumWorkGroups), (gl_NumWorkGroups), (gl_NumWorkGroups))), _GLF_IDENTITY(max((gl_NumWorkGroups), (gl_NumWorkGroups)), (max((gl_NumWorkGroups), (gl_NumWorkGroups))) * (uvec3(1u, 1u, 1u) | uvec3(1u, 1u, 1u)))), _GLF_IDENTITY((gl_NumWorkGroups), clamp(_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) | (_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) ^ uvec3(0u, 0u, 0u)))), (gl_NumWorkGroups), (gl_NumWorkGroups))))), (_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec4(gl_NumWorkGroups, 0u)), uvec3(0u, 0u, 0u) ^ (uvec3(uvec4(gl_NumWorkGroups, 0u)))))), max((gl_NumWorkGroups), _GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(clamp((gl_NumWorkGroups), (gl_NumWorkGroups), (gl_NumWorkGroups)), ~ (_GLF_IDENTITY(~ (clamp((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(_GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, min(0u, 0u))))), 0u, 0u))), (gl_NumWorkGroups), (gl_NumWorkGroups))), (~ (clamp((gl_NumWorkGroups), (gl_NumWorkGroups), (gl_NumWorkGroups)))) | uvec3(0u, 0u, 0u)))))))) | uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), max(_GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), clamp((gl_NumWorkGroups), (gl_NumWorkGroups), (gl_NumWorkGroups))), _GLF_IDENTITY(max((gl_NumWorkGroups), (gl_NumWorkGroups)), (max((gl_NumWorkGroups), (gl_NumWorkGroups))) * (uvec3(1u, 1u, 1u) | uvec3(1u, 1u, 1u)))), _GLF_IDENTITY((gl_NumWorkGroups), clamp(_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) | (_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) ^ uvec3(0u, 0u, 0u)))), (gl_NumWorkGroups), (gl_NumWorkGroups))))), (_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec4(gl_NumWorkGroups, 0u)), uvec3(0u, 0u, 0u) ^ (uvec3(uvec4(gl_NumWorkGroups, 0u)))))), max((gl_NumWorkGroups), _GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(clamp((gl_NumWorkGroups), (gl_NumWorkGroups), (gl_NumWorkGroups)), ~ (_GLF_IDENTITY(~ (clamp((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(_GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, min(0u, 0u))))), 0u, 0u))), (gl_NumWorkGroups), (gl_NumWorkGroups))), (~ (clamp((gl_NumWorkGroups), (gl_NumWorkGroups), (gl_NumWorkGroups)))) | uvec3(0u, 0u, 0u)))))))) | uvec3(0u, 0u, 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), max(_GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), clamp((gl_NumWorkGroups), (gl_NumWorkGroups), (gl_NumWorkGroups))), _GLF_IDENTITY(max((gl_NumWorkGroups), (gl_NumWorkGroups)), (max((gl_NumWorkGroups), (gl_NumWorkGroups))) * (uvec3(1u, 1u, 1u) | uvec3(1u, 1u, 1u)))), _GLF_IDENTITY((gl_NumWorkGroups), clamp(_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) | (_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) ^ uvec3(0u, 0u, 0u)))), (gl_NumWorkGroups), (gl_NumWorkGroups))))), (_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec4(gl_NumWorkGroups, 0u)), uvec3(0u, 0u, 0u) ^ (uvec3(uvec4(gl_NumWorkGroups, 0u)))))), max((gl_NumWorkGroups), _GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(clamp((gl_NumWorkGroups), (gl_NumWorkGroups), (gl_NumWorkGroups)), ~ (_GLF_IDENTITY(~ (clamp((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(_GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, min(0u, 0u))))), 0u, 0u))), (gl_NumWorkGroups), (gl_NumWorkGroups))), (~ (clamp((gl_NumWorkGroups), (gl_NumWorkGroups), (gl_NumWorkGroups)))) | uvec3(0u, 0u, 0u)))))))) | uvec3(0u, 0u, 0u)))) + uvec3(_GLF_IDENTITY(0u, _GLF_IDENTITY((0u), ((0u)) << 0u) * 1u), 0u, 0u), (_GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), max((_GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))), _GLF_IDENTITY((gl_NumWorkGroups), clamp((gl_NumWorkGroups), (gl_NumWorkGroups), (gl_NumWorkGroups))))), (_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))), max((gl_NumWorkGroups), _GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), (_GLF_IDENTITY((gl_NumWorkGroups), (_GLF_IDENTITY((gl_NumWorkGroups), min((gl_NumWorkGroups), (gl_NumWorkGroups)))) + uvec3(0u, 0u, 0u))) << ((uvec3(138695u, 118602u, 62060u) & uvec3(0u, 0u, 0u)) ^ uvec3(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u, 1u * (0u))), 0u | (~ (_GLF_IDENTITY(0u, 1u * (0u))))))), 0u, 0u))), _GLF_IDENTITY(clamp((gl_NumWorkGroups), (gl_NumWorkGroups), (_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups)))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (clamp((gl_NumWorkGroups), (gl_NumWorkGroups), (gl_NumWorkGroups))), (~ (clamp((gl_NumWorkGroups), (gl_NumWorkGroups), (gl_NumWorkGroups)))) | uvec3(0u, 0u, 0u))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (clamp((gl_NumWorkGroups), (gl_NumWorkGroups), (gl_NumWorkGroups))), (~ (clamp((gl_NumWorkGroups), (gl_NumWorkGroups), (gl_NumWorkGroups)))) | uvec3(0u, 0u, 0u))), min(~ (_GLF_IDENTITY(~ (clamp((gl_NumWorkGroups), (gl_NumWorkGroups), (gl_NumWorkGroups))), (~ (clamp((gl_NumWorkGroups), (gl_NumWorkGroups), (gl_NumWorkGroups)))) | uvec3(0u, 0u, 0u))), ~ (_GLF_IDENTITY(~ (clamp((gl_NumWorkGroups), (gl_NumWorkGroups), (gl_NumWorkGroups))), (~ (clamp((gl_NumWorkGroups), (gl_NumWorkGroups), (gl_NumWorkGroups)))) | uvec3(0u, 0u, 0u))))), ~ (_GLF_IDENTITY(~ (clamp((gl_NumWorkGroups), (gl_NumWorkGroups), (gl_NumWorkGroups))), (~ (clamp((gl_NumWorkGroups), (gl_NumWorkGroups), (gl_NumWorkGroups)))) | uvec3(0u, 0u, 0u))), ~ (_GLF_IDENTITY(~ (clamp((gl_NumWorkGroups), (gl_NumWorkGroups), (gl_NumWorkGroups))), (~ (clamp((gl_NumWorkGroups), (gl_NumWorkGroups), (gl_NumWorkGroups)))) | uvec3(0u, 0u, 0u)))))))))) | uvec3(0u, 0u, 0u)) + uvec3(_GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY((0u) * 1u, clamp((0u) * 1u, (0u) * 1u, (0u) * 1u))), (_GLF_IDENTITY(0u, _GLF_IDENTITY((0u) * 1u, clamp((0u) * 1u, _GLF_IDENTITY((0u) * 1u, clamp((0u) * 1u, (0u) * 1u, (0u) * 1u)), (0u) * 1u)))) / 1u), 0u, 0u)) | (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, (0u) ^ 0u), 0u, 0u) << _GLF_IDENTITY(uvec3(0u), _GLF_IDENTITY(uvec3(0u), min(uvec3(0u), uvec3(0u)))), uvec3(0u, 0u, 0u) ^ (uvec3(_GLF_IDENTITY(0u, (0u) ^ 0u), 0u, 0u) << _GLF_IDENTITY(uvec3(0u), _GLF_IDENTITY(uvec3(0u), min(uvec3(0u), uvec3(0u))))))))).x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false)))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false)))), ((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, false)), (bool(bvec3(_GLF_DEAD(false), true, false))) && true)))) || false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false))) || false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch), (true ? true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch) : _GLF_FUZZED(injectionSwitch))))), clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch), (true ? true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch) : _GLF_FUZZED(injectionSwitch))))), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch), (true ? true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch) : _GLF_FUZZED(injectionSwitch))))), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch), (true ? true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch) : _GLF_FUZZED(injectionSwitch))))))).y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), false)))), (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), false))))) || false)), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), false)))), (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), false))))) || false))) && true))) && true))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, tan(vec2(0.0, 0.0)) + (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(4367.2939)), bool(false)))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).y))))
  return;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (false ? _GLF_FUZZED(164914u) : _GLF_IDENTITY(gl_WorkGroupSize, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((uvec3(85781u, 167529u, 17578u) | subgroup_id)) : _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) + uvec3(0u, 0u, 0u)))))).x));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_ONE(1.0, injectionSwitch.y)) > injectionSwitch.y))))
  barrier();
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(gl_WorkGroupID.x, _GLF_struct_1(mat2x3(1.0), bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(true && (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true)))), ! (! (_GLF_IDENTITY(true && (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true)))), bool(bvec2(true && (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true)))), true)))))))), _GLF_struct_0(mat2x3(1.0)), mat3x4(1.0)), _GLF_struct_2(uvec4(_GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) << 0u)) | (1u)) : _GLF_FUZZED((true ? 99744u : subgroup_size))))), mat4(1.0)), mat2x3(1.0), mat3x4(1.0), _GLF_struct_5(mat2x4(_GLF_IDENTITY(1.0, (1.0) - abs(0.0))), bvec4(true), _GLF_struct_3(mat2(1.0), _GLF_IDENTITY(mat3(1.0), (false ? _GLF_FUZZED(transpose((false ? mat3(_GLF_IDENTITY(-2.6, mix(float(_GLF_IDENTITY(-2.6, max(-2.6, -2.6))), float(_GLF_FUZZED(-893.106)), bool(false))), 1.8, -4.5, 8.9, 1916.1463, 51.80, -688.192, -515.222, -72.12) : mat3(2.8, -496.211, -5127.8395, -7.6, 3.5, -6.4, -8969.0910, 2.7, 1.6)))) : mat3(1.0))), ivec3(1), uvec3(_GLF_IDENTITY(1u, (1u) | (1u)))), _GLF_struct_4(vec4(1.0)), bvec4(true)));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)) && true))), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))) || (injectionSwitch.x > injectionSwitch.y)))), true, false)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))))))
  return;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size), 0u + ((workgroup_size))) << 0u), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, 0u | (workgroup_size))) << 0u)), max((_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, 0u | (workgroup_size))) << 0u)), (_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, 0u | (_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, ~ (~ (workgroup_size))), workgroup_size))) | (workgroup_size))))) << 0u)))) + 0u)) | 0u)) ^ 0u) * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_6.workgroup_id, (_GLF_struct_replacement_6.workgroup_id) | (_GLF_struct_replacement_6.workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(num_workgroup) : 0u)), clamp(0u, _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, _GLF_IDENTITY(_GLF_IDENTITY((0u), max((0u), (0u))) - 0u, ((0u) - _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, max(0u, 0u)), 0u))) | ((0u) - 0u)))))), 0u)) | (_GLF_struct_replacement_6.workgroup_id), (_GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, 0u)) | (_GLF_struct_replacement_6.workgroup_id), _GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), max(~ (_GLF_IDENTITY(1u, uint(uvec4(1u, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), ~ (1u))))) * (_GLF_IDENTITY(0u | (_GLF_struct_replacement_6.workgroup_id), uint(uvec3(0u | (_GLF_struct_replacement_6.workgroup_id), 1u, 1u)))))) + 0u));
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, _GLF_IDENTITY(1u, (1u) - 0u)))) + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size, uint(uint(subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1u : _GLF_FUZZED(subgroup_local_id)))) | (_GLF_IDENTITY(1u, 0u ^ (1u)))), 0u), (uvec3(subgroup_size, 1u, 0u)) / uvec3(1u, 1u, 1u)))), _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) | 0u))))))) | (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(workgroup_base) : subgroup_id * subgroup_size))), clamp(_GLF_IDENTITY(clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), 0u + (_GLF_FUZZED(workgroup_base))) : subgroup_id * subgroup_size, (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), 0u + (_GLF_FUZZED(workgroup_base))) : subgroup_id * subgroup_size) | (1u ^ 1u))))), clamp(clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) >> 0u), max(false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) >> 0u), false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) >> 0u)))))), clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(workgroup_base) : subgroup_id * subgroup_size))), clamp(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), _GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(workgroup_base) : subgroup_id * subgroup_size))))), clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(workgroup_base) : subgroup_id * subgroup_size))), _GLF_IDENTITY(clamp(subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)), subgroup_size)))), _GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(workgroup_base) : subgroup_id * subgroup_size))), (true ? _GLF_IDENTITY(clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(workgroup_base) : subgroup_id * subgroup_size))), ~ (~ (clamp(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id, uint(uvec4(subgroup_id, 0u, 1u, 0u))) * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(false ? _GLF_FUZZED(workgroup_base) : subgroup_id * subgroup_size, (false ? _GLF_FUZZED(workgroup_base) : subgroup_id * subgroup_size) - 0u))))))) : _GLF_FUZZED(subgroup_local_id))))), (clamp(subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), subgroup_size)), _GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(workgroup_base) : subgroup_id * subgroup_size)))) | (clamp(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(subgroup_size) : subgroup_id * subgroup_size)), _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((false ? _GLF_FUZZED(workgroup_base) : subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) - _GLF_IDENTITY(0u, (0u) << 0u))), 0u | ((false ? _GLF_FUZZED(workgroup_base) : subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u))))))))))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) | (1)))), clamp(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) | (1)))), (((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) | (1))))) - 0u), ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) | (1)))), ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) | (1)))))) ^ 0u) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) | (1)))), clamp(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) | (1)))), (((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) | (1))))) - 0u), ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) | (1)))), ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) | (1)))))) ^ 0u) % subgroup_size) | 0u));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / determinant(mat3(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, float(vec3(0.0, 1.0, 1.0))))), 1.0, 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2x4(0.0, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), clamp(float(mat2x4(0.0, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), _GLF_IDENTITY(float(mat2x4(0.0, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), (float(mat2x4(0.0, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0))) - 0.0), float(mat2x4(0.0, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0))))), 0.0, 1.0, 1.0)))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / determinant(mat3(1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, float(vec3(0.0, 1.0, 1.0))))), 1.0, 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2x4(0.0, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), clamp(float(mat2x4(0.0, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), _GLF_IDENTITY(float(mat2x4(0.0, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0)), (float(mat2x4(0.0, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0))) - 0.0), float(mat2x4(0.0, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0))))), 0.0, 1.0, 1.0))))) || false))))))) || false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
    }
   barrier();
  }
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), (uint(1)) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), max(uint(1), uint(1))), (true ? _GLF_IDENTITY(uint(1), (uint(1)) * 1u) : _GLF_IDENTITY(_GLF_FUZZED(usubBorrow(subgroup_local_id, next_virtual_gid, workgroup_base)), (_GLF_FUZZED(usubBorrow(subgroup_local_id, next_virtual_gid, workgroup_base))) << 0u))), (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (_GLF_FUZZED(num_workgroup)) >> 0u))) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) >> 0)), max(uint(1), _GLF_IDENTITY(uint(1), clamp(uint(1), uint(1), uint(1))))), (true ? _GLF_IDENTITY(uint(1), (uint(1)) * 1u) : _GLF_IDENTITY(_GLF_FUZZED(usubBorrow(subgroup_local_id, next_virtual_gid, workgroup_base)), (_GLF_FUZZED(usubBorrow(subgroup_local_id, next_virtual_gid, workgroup_base))) ^ 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), max(uint(1), uint(1))), (true ? _GLF_IDENTITY(uint(1), (uint(1)) * 1u) : _GLF_FUZZED(usubBorrow(subgroup_local_id, next_virtual_gid, workgroup_base))))) | uint(_GLF_ZERO(0.0, injectionSwitch.x))))))), 4, _GLF_IDENTITY(64, min(_GLF_IDENTITY(64, max(64, 64)), 64)), 4);
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 0.0))), min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)), _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(8.3)), float(injectionSwitch.x), bool(true))), (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-4154.9106)))) + 0.0), _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(1347.2709), ((injectionSwitch))[1]), vec2((_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0))) - sqrt(vec2(0.0, 0.0))))))[0], _GLF_FUZZED(float(false))), bvec2(true, false)))), injectionSwitch)).x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0)) * mat2(_GLF_IDENTITY(1.0, max(1.0, 1.0)))).y))), bool(bvec4(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(8.3)), float(injectionSwitch.x), bool(true))), (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-4154.9106)))) + 0.0), _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(1347.2709), ((injectionSwitch))[1]), vec2((_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0))) - sqrt(vec2(0.0, 0.0))))))[0], _GLF_FUZZED(float(false))), bvec2(true, false)))), injectionSwitch)).x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0)) * mat2(_GLF_IDENTITY(1.0, max(1.0, 1.0)))).y))), bool(bool((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(8.3)), float(injectionSwitch.x), bool(true))), (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-4154.9106)))) + 0.0), _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(1347.2709), ((injectionSwitch))[1]), vec2((_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0))) - sqrt(vec2(0.0, 0.0))))))[0], _GLF_FUZZED(float(false))), bvec2(true, false)))), injectionSwitch)).x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0)) * mat2(_GLF_IDENTITY(1.0, max(1.0, 1.0)))).y)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))))), true, false)))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_18 _GLF_struct_replacement_18 = _GLF_struct_18(1, atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(_GLF_IDENTITY(64, max(_GLF_IDENTITY(64, 0 | (64)), 64)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(64, max(_GLF_IDENTITY(64, 0 | (64)), 64)), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (64) | (64))) | (64)), max(_GLF_IDENTITY(64, 0 | (64)), 64)), 0))), _GLF_IDENTITY(_GLF_IDENTITY(64, max(_GLF_IDENTITY(64, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 1)))) | (0)) | (64)), 64)), (_GLF_IDENTITY(_GLF_IDENTITY(64, max(_GLF_IDENTITY(64, _GLF_IDENTITY(0, (0) - 0) | (64)), 64)), min(_GLF_IDENTITY(64, max(_GLF_IDENTITY(64, 0 | (64)), 64)), _GLF_IDENTITY(64, max(_GLF_IDENTITY(64, 0 | (64)), 64))))) | 0), _GLF_IDENTITY(_GLF_IDENTITY(64, max(_GLF_IDENTITY(64, 0 | (64)), 64)), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(64, max(_GLF_IDENTITY(64, 0 | (64)), 64)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(64, max(_GLF_IDENTITY(64, 0 | (64)), 64)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(64, max(_GLF_IDENTITY(64, 0 | (64)), 64))), 0 | (~ (_GLF_IDENTITY(64, max(_GLF_IDENTITY(64, 0 | (64)), 64))))))))), 0))))), 0), _GLF_struct_10(_GLF_struct_7(mat3x2(1.0), mat3x4(1.0), _GLF_IDENTITY(uvec4(1u), min(uvec4(1u), _GLF_IDENTITY(uvec4(1u), (_GLF_IDENTITY(uvec4(1u), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(1u), (uvec4(1u)) | (_GLF_IDENTITY(uvec4(1u), clamp(uvec4(1u), uvec4(1u), uvec4(1u))))), uvec4(0u, 0u, 0u, 0u) | (_GLF_IDENTITY(uvec4(1u), (uvec4(1u)) | (_GLF_IDENTITY(uvec4(1u), clamp(uvec4(1u), uvec4(1u), uvec4(1u))))))), (uvec4(1u)) | (uvec4(1u))))))) << uvec4(0u, _GLF_IDENTITY(0u, (0u) | (0u)), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), max(_GLF_IDENTITY(~ _GLF_IDENTITY((0u), ((0u)) | uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u ^ (~ (0u))), ~ (0u))))), 0u)))), uvec3(1u), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), uvec3(1u)), _GLF_struct_8(_GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY((mat2(1.0)) - mat2(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0), (true ? (mat2(1.0)) - mat2(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0) : _GLF_FUZZED(mat2(-6574.8157, 0.4, -94.02, -7.2))))), bvec4(true), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), ~ (~ (uvec2(1u)))), min(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), ~ (~ (uvec2(1u)))), min(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), ~ (~ (uvec2(1u)))), (_GLF_IDENTITY(uvec2(1u), ~ (~ (uvec2(1u))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), ~ (~ (uvec2(1u)))), (_GLF_IDENTITY(uvec2(1u), ~ (~ (uvec2(1u))))) * uvec2(1u, 1u)))), _GLF_IDENTITY(uvec2(1u), ~ (~ (uvec2(1u)))))), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), ~ (~ (uvec2(1u)))), clamp(_GLF_IDENTITY(uvec2(1u), ~ (~ (uvec2(1u)))), _GLF_IDENTITY(uvec2(1u), ~ (~ (uvec2(1u)))), _GLF_IDENTITY(uvec2(1u), ~ (~ (uvec2(1u)))))))), ivec2(1), _GLF_IDENTITY(ivec3(1), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(1), (ivec3(1)) + ivec3(0, 0, 0)), max(ivec3(1), _GLF_IDENTITY(ivec3(1), _GLF_IDENTITY((_GLF_IDENTITY(ivec3(1), _GLF_IDENTITY(ivec3(0, 0, 0) + (_GLF_IDENTITY(ivec3(1), ivec3(0, 0, 0) + (ivec3(1)))), ivec3(ivec3(ivec3(0, 0, 0) + (ivec3(1))))))) ^ ivec3(0, 0, 0), (true ? _GLF_IDENTITY((_GLF_IDENTITY(ivec3(1), _GLF_IDENTITY(ivec3(0, 0, 0) + (_GLF_IDENTITY(ivec3(1), (ivec3(1)) + ivec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), ivec3(ivec3(ivec3(0, 0, 0) + _GLF_IDENTITY((ivec3(1)), ivec3(ivec3((ivec3(1)))))))))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(ivec3(1), _GLF_IDENTITY(ivec3(0, 0, 0) + (ivec3(1)), ivec3(ivec3(ivec3(0, 0, 0) + _GLF_IDENTITY((ivec3(1)), ivec3(ivec3((ivec3(1))))))))))), ivec3(ivec4(~ ((_GLF_IDENTITY(ivec3(1), _GLF_IDENTITY(ivec3(0, 0, 0) + (ivec3(1)), ivec3(ivec3(_GLF_IDENTITY(ivec3(0, 0, 0) + _GLF_IDENTITY((ivec3(1)), ivec3(ivec3((ivec3(1))))), (ivec3(0, 0, 0) + _GLF_IDENTITY((ivec3(1)), ivec3(ivec3((ivec3(1)))))) ^ (ivec3(0, 0, 0) >> _GLF_IDENTITY(ivec3(5), ivec3(5)))))))))), 0))))) ^ ivec3(_GLF_IDENTITY(0, (0) << 0), 0, 0) : _GLF_FUZZED((ivec3(21494, -37945, 75931) ^ ivec3(-52913, 75839, -30245)))))))), ivec3(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (_GLF_IDENTITY(1, max(1, 1))) | (_GLF_IDENTITY(1, max(1, 1))))), max(ivec3(1), _GLF_IDENTITY(ivec3(1), (_GLF_IDENTITY(ivec3(1), _GLF_IDENTITY(_GLF_IDENTITY(ivec3(0, 0, 0) + (ivec3(1)), clamp(_GLF_IDENTITY(ivec3(0, 0, 0) + (ivec3(1)), (ivec3(0, 0, 0) + (ivec3(1))) - ivec3(0, 0, 0)), ivec3(0, 0, 0) + (ivec3(1)), _GLF_IDENTITY(ivec3(0, 0, 0) + (ivec3(1)), ivec3(_GLF_IDENTITY(ivec4(ivec3(0, 0, 0) + (ivec3(1)), 1), (ivec4(ivec3(0, 0, 0) + (ivec3(1)), 1)) | (ivec4(_GLF_IDENTITY(ivec3(0, 0, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(95876) : 0))), ivec3(ivec4(ivec3(0, 0, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(95876) : 0))), 0))) + (ivec3(1)), 1))))))), ivec3(ivec3(_GLF_IDENTITY(ivec3(0, _GLF_IDENTITY(0, min(0, 0)), 0), ivec3(0, 0, 0) + (ivec3(0, 0, 0))) + (ivec3(1))))))) ^ ivec3(0, 0, 0))))), ivec3(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) >> 0), 0)), 0, 0) | (ivec3(_GLF_IDENTITY(ivec3(1), max(ivec3(1), _GLF_IDENTITY(ivec3(1), (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, (1) / 1)), _GLF_IDENTITY(ivec3(0, 0, 0) + (ivec3(1)), _GLF_IDENTITY(ivec3(ivec3(ivec3(0, 0, 0) + (ivec3(1)))), ivec3(0, 0, 0) ^ _GLF_IDENTITY((ivec3(ivec3(ivec3(0, 0, 0) + (ivec3(1))))), ivec3(0, 0, 0) | ((ivec3(ivec3(ivec3(0, 0, 0) + (ivec3(1))))))))))) ^ ivec3(0, 0, 0))))))))), ivec3(1)))), _GLF_struct_9(1)), _GLF_struct_12(_GLF_struct_11(mat3x4(1.0), mat4(1.0), mat4(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0))), mat3x2(1.0))), _GLF_struct_17(mat2(1.0), mat4x2(1.0), _GLF_struct_13(_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (1u) + (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))), 1u)), _GLF_IDENTITY(~ (~ (1u)), (_GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) * 1u)) >> 0u)), uvec3(1u), uvec4(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) + 0u))))), mat2x4(1.0), 1.0), _GLF_struct_14(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat3x4(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-16.87)), float(1.0), bool(true))) : _GLF_FUZZED(-9213.2985))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 1.0))), 1.0, 1.0, 1.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY((1.0) / _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(4071.4983) : _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-1.9))))))), (true ? (1.0) / _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(4071.4983) : _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-1.9))), clamp(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-1.9))), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-1.9))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-1.9))), mix(float(_GLF_FUZZED(-123.531)), float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-1.9)))), bool(true))))))))) : _GLF_FUZZED(-16.15)))), mat2(1.0), mat4x3(1.0), mat2x4(1.0)), mat2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(abs(0.0), (abs(0.0)) - determinant(mat2(_GLF_IDENTITY(0.0, (0.0) + log(1.0)), abs(0.0), 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0)))) + (1.0))), _GLF_struct_15(1.0), _GLF_struct_16(ivec2(1), mat2x3(1.0), _GLF_IDENTITY(true, bool(bool(true))), _GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), (_GLF_IDENTITY(true && (true), (true && _GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)), ((true)) || false)) && true)) || false)), mat3(1.0))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y, mix(float(_GLF_FUZZED(3199.3285)), float(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(injectionSwitch[0])))), bool(true)))), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))), (! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && true), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, false))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(determinant(mat4(1.0, 0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0)), min(determinant(mat4(1.0, 0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0)), determinant(mat4(1.0, 0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, 1.0, 1.0))))))).y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 atomicStore(checker[virtual_gid], _GLF_struct_replacement_18.read, _GLF_IDENTITY(4, (4) | 0), 64, 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)))))))
    barrier();
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec2((! (false)), true))))), _GLF_IDENTITY(true && (_GLF_DEAD(false)), _GLF_IDENTITY((true && (_GLF_DEAD(false))) || _GLF_IDENTITY(false, false || (false)), ((true && (_GLF_DEAD(false))) || false) || _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))) || false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))), false || ((injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(57.93)), float(injectionSwitch.y), bool(true)))))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       barrier();
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - tan(0.0))), false || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - tan(0.0))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - tan(0.0)))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), true && (false || (false)))), _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ((_GLF_IDENTITY(false, false || (false)))) && true)) && true), false), bvec2(bvec3(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ((_GLF_IDENTITY(false, false || (false)))) && true), false), false))))) || false)) || false)))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(2.9)), bool(false))), injectionSwitch.x)) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! (bool(bvec3(false, true, true)))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! (bool(bvec3(false, true, true))))))) || false)))
          return;
         return;
        }
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) || false)))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, true, _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, sqrt(1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))), ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, sqrt(1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)))) && true), (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, sqrt(1.0) * (injectionSwitch.y))), ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, sqrt(1.0) * (injectionSwitch.y)))) && true)) || false)))), bool(bool(bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(false, true && (false)), true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), false))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-5162.2389, 9037.5658)) : injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), min(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))), 1.0, 0.0, abs(0.0))), vec2(1.0, 1.0) * (vec2(mat4x2(injectionSwitch, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), min(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))))), 1.0, 0.0, abs(0.0)))))))).y))) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((false)), ! (! (_GLF_IDENTITY(! ((false)), bool(bvec2(! ((false)), true))))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((false)), _GLF_IDENTITY(! (! (! ((false)))), ! (! (! (! (! ((false))))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((false)), ! (! (_GLF_IDENTITY(! ((false)), true && (! _GLF_IDENTITY(((false)), false || (((false)))))))))), false || (! (_GLF_IDENTITY(! ((false)), ! (! (! ((false))))))))) && true)))), true && (_GLF_IDENTITY(true && _GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((false)), ! (! (! ((false)))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((false)), ! (! (! ((false)))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((false)), ! (! (! ((false)))))), false || (! (_GLF_IDENTITY(! ((false)), ! (! (! ((false))))))))) && true)))), bool(bvec3(_GLF_IDENTITY(true && _GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((false)), ! (! (! ((false)))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((false)), ! (! (! ((false)))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((false)), ! (! (! ((false)))))), false || (! (_GLF_IDENTITY(! ((false)), ! (! (! ((false))))))))) && true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true && _GLF_IDENTITY((false), _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), bool(bool(! ((false))))), _GLF_IDENTITY(! (! (! ((false)))), (! (! (! _GLF_IDENTITY(((false)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(((false)), ! (! (((false))))), true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(((false)), ! (! (((false))))), true, true)), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(((false)), ! (! (((false))))), true, true)))))))))))) || false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! ((false)), ! (! (! ((false)))))), (! (_GLF_IDENTITY(! ((false)), ! (! (! ((false))))))) && true), (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((false)), ! (! (! (_GLF_IDENTITY((false), ! (! ((false))))))))), false || (! (_GLF_IDENTITY(! ((false)), ! (! (! ((false))))))))) && true)))))), true, true))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)) ? injectionSwitch.x : _GLF_FUZZED(-9.1))) > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9.1))) > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec4(! (true), false, true, true))))))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))) ? injectionSwitch.x : _GLF_FUZZED(-9.1))) > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? injectionSwitch.x : _GLF_FUZZED(-9.1)), max((true ? injectionSwitch.x : _GLF_FUZZED(-9.1)), (true ? injectionSwitch.x : _GLF_FUZZED(-9.1))))) > injectionSwitch.y)), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, true && (true))))))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9.1))) > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9.1))) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), true && (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(_GLF_IDENTITY(-9.1, clamp(-9.1, -9.1, -9.1))))) > injectionSwitch.y)))), _GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), (injectionSwitch.x > injectionSwitch.y)), true)))), bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9.1))) > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-9.1))) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), true && (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(_GLF_IDENTITY(-9.1, clamp(-9.1, -9.1, -9.1))))) > injectionSwitch.y)))), _GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), (injectionSwitch.x > injectionSwitch.y)), true)))))))), _GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((67.56))), float(injectionSwitch.x), bool(true))) : _GLF_FUZZED(-9.1))) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((67.56))), float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sqrt(vec2(0.0, 0.0))).x), bool(true))) : _GLF_FUZZED(-9.1))) > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x : _GLF_FUZZED(-9.1))) > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x : _GLF_FUZZED(-9.1))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y))) && true), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x : _GLF_IDENTITY(_GLF_FUZZED(-9.1), float(float(_GLF_FUZZED(-9.1)))))) > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) && true, _GLF_IDENTITY(bool(bvec2((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((67.56))), float(injectionSwitch.x), bool(true))) : _GLF_FUZZED(-9.1))) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((67.56))), float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sqrt(vec2(0.0, 0.0))).x), bool(true))) : _GLF_FUZZED(-9.1))) > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x : _GLF_FUZZED(-9.1))) > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x : _GLF_FUZZED(-9.1))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y))) && true), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x : _GLF_IDENTITY(_GLF_FUZZED(-9.1), float(float(_GLF_FUZZED(-9.1)))))) > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) && true, true)), bool(bool(bool(bvec2((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((67.56))), float(injectionSwitch.x), bool(true))) : _GLF_FUZZED(-9.1))) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((67.56))), float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sqrt(vec2(0.0, 0.0))).x), bool(true))) : _GLF_FUZZED(-9.1))) > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x : _GLF_FUZZED(-9.1))) > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x : _GLF_FUZZED(-9.1))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y))) && true), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x : _GLF_IDENTITY(_GLF_FUZZED(-9.1), float(float(_GLF_FUZZED(-9.1)))))) > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) && true, true))))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) && true)), _GLF_IDENTITY(true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) && true))), (true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) && true)))) || false)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ((_GLF_IDENTITY(false, ! (! (false))))) || false), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ((_GLF_IDENTITY(false, ! (! (false))))) || false), false), false, true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ((_GLF_IDENTITY(false, ! (! (false))))) || false), false), false, true)), true, false))))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ((_GLF_IDENTITY(false, ! (! (false))))) || false), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ((_GLF_IDENTITY(false, ! (! (false))))) || false), false), false, true)), bvec2(bvec4(bvec2(bvec4(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ((_GLF_IDENTITY(false, ! (! (false))))) || false), false), false, true)), true, false)))))) || false)))), false || (false))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
