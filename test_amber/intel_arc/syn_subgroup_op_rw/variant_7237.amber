#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)) || false); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))) || false)))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(false))
        continue;
      }
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((_GLF_IDENTITY(5.5, exp(0.0) * (5.5)) * 669.718))), bool(false)))))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((_GLF_IDENTITY(5.5, exp(0.0) * (5.5)) * 669.718))), bool(false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((_GLF_IDENTITY(5.5, exp(0.0) * (5.5)) * 669.718))), bool(false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((_GLF_IDENTITY(5.5, exp(0.0) * (5.5)) * 669.718))), bool(false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), true))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bool(true)))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))
              {
               return;
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
              }
            }
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
      }
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(-38563) : int(1)))))); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), ! (! ((_GLF_IDENTITY(false, bool(bool(false))))))))), ! _GLF_IDENTITY((! ((_GLF_IDENTITY(false, bool(bool(false)))))), _GLF_IDENTITY(bool(bvec4((! ((_GLF_IDENTITY(false, bool(bool(false)))))), false, true, false)), (bool(bvec4((! ((_GLF_IDENTITY(false, bool(bool(false)))))), false, true, false))) || false))))))) || false) && true)))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), transpose(_GLF_IDENTITY(transpose(mat2(1.0)), transpose(_GLF_IDENTITY(transpose(transpose(mat2(1.0))), (transpose(transpose(mat2(1.0)))) + mat2(0.0, 0.0, 0.0, 0.0)))))) * (injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 0.0))))), injectionSwitch, injectionSwitch)).x)), ~ (_GLF_IDENTITY(~ (uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 0.0))))), injectionSwitch, injectionSwitch)).x))), min(~ (uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 0.0))))), injectionSwitch, injectionSwitch)).x))), ~ (uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 0.0))))), injectionSwitch, injectionSwitch)).x))))))) ^ (_GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id)))), (workgroup_size * _GLF_IDENTITY(workgroup_id, uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat4x2(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, cos(0.0), 0.0, 1.0)))) ^ (_GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id))))) + 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = (int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3.5), (injectionSwitch)[1]), vec2((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x3(injectionSwitch, 1.0, 1.0, length(vec2(0.0, 0.0)), 1.0), (true ? mat2x3(injectionSwitch, 1.0, 1.0, length(vec2(0.0, 0.0)), 1.0) : _GLF_FUZZED(mat2x3(mat3(-9.2, 1960.5963, -343.550, -8.6, -272.834, -5.7, -277.179, 3.4, 217.626))))))))[0], _GLF_FUZZED(_GLF_IDENTITY((-7.4 - -9.3), ((-7.4 - -9.3)) * 1.0))), bvec2(true, false))).y, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3.5), (injectionSwitch)[1]), vec2((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x3(injectionSwitch, 1.0, 1.0, length(vec2(0.0, 0.0)), 1.0), (true ? mat2x3(injectionSwitch, 1.0, 1.0, length(vec2(0.0, 0.0)), 1.0) : _GLF_FUZZED(mat2x3(mat3(-9.2, 1960.5963, -343.550, -8.6, -272.834, -5.7, -277.179, 3.4, 217.626))))))))[0], _GLF_FUZZED(_GLF_IDENTITY((-7.4 - -9.3), ((-7.4 - -9.3)) * 1.0))), bvec2(true, false))).y) / 1.0))) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | (0 | 1))); _injected_loop_counter ++)
          {
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
           if(_GLF_DEAD(false))
            break;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
  }
 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(-26927)))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) + 0u))))) + subgroup_local_id, (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u) + subgroup_local_id, (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size)))) + subgroup_local_id, (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), max(~ (subgroup_id), ~ (subgroup_id))))))) * subgroup_size)))) + subgroup_local_id, max(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_id * subgroup_size), (~ (subgroup_id * subgroup_size)) ^ 0u))))))) + subgroup_local_id, workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(_GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(subgroup_id) : subgroup_id * subgroup_size)), _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size)))) + subgroup_local_id))) | _GLF_IDENTITY(0u, 0u | (0u)))) * 1u)) >> _GLF_IDENTITY(0u, max(0u, 0u)));
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), ((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u | ((subgroup_local_id + 1) % subgroup_size)))) - uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), _GLF_IDENTITY((_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(sign(-3.1)), _GLF_IDENTITY(1.0 * (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(sign(-3.1))), min(1.0 * (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_IDENTITY(_GLF_FUZZED(sign(-3.1)), (_GLF_FUZZED(sign(-3.1))) + determinant(mat2(0.0, sin(0.0), 0.0, tan(0.0))))), 1.0 * (true ? _GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x) : _GLF_FUZZED(_GLF_IDENTITY(sign(-3.1), clamp(sign(-3.1), sign(-3.1), sign(-3.1))))))))), clamp((_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(sign(-3.1)), _GLF_IDENTITY(1.0 * (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(sign(-3.1))), min(1.0 * (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_IDENTITY(_GLF_FUZZED(sign(-3.1)), (_GLF_FUZZED(sign(-3.1))) + determinant(mat2(0.0, sin(0.0), 0.0, tan(0.0))))), 1.0 * (true ? _GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x) : _GLF_FUZZED(_GLF_IDENTITY(sign(-3.1), clamp(sign(-3.1), sign(-3.1), sign(-3.1))))))))), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(sign(-3.1)), _GLF_IDENTITY(1.0 * (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(sign(-3.1))), min(1.0 * (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_IDENTITY(_GLF_FUZZED(sign(-3.1)), (_GLF_FUZZED(sign(-3.1))) + determinant(mat2(0.0, sin(0.0), 0.0, tan(0.0))))), 1.0 * (true ? _GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x) : _GLF_FUZZED(_GLF_IDENTITY(sign(-3.1), clamp(sign(-3.1), sign(-3.1), sign(-3.1))))))))), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(sign(-3.1)), _GLF_IDENTITY(1.0 * (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(sign(-3.1))), min(1.0 * (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_IDENTITY(_GLF_FUZZED(sign(-3.1)), (_GLF_FUZZED(sign(-3.1))) + determinant(mat2(0.0, sin(0.0), 0.0, tan(0.0))))), 1.0 * (true ? _GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x) : _GLF_FUZZED(_GLF_IDENTITY(sign(-3.1), clamp(sign(-3.1), sign(-3.1), sign(-3.1)))))))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)) + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(uint(uvec3(~ (~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)) + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 0u, 1u)), clamp(_GLF_IDENTITY(uint(uvec3(~ (~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)) + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 0u, 1u)), (uint(uvec3(~ (~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)) + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 0u, 1u))) ^ 0u), uint(uvec3(~ (~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)) + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 0u, 1u)), uint(uvec3(~ (~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)) + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 0u, 1u))))), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(~ (~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)) + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))), uint(uvec2(~ (~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)) + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 0u))), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(~ (~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)) + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))), (false ? _GLF_FUZZED(workgroup_id) : ~ (~ _GLF_IDENTITY((workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)) + _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), ~ (_GLF_IDENTITY(~ (((subgroup_local_id + 1) % subgroup_size)), (~ (((subgroup_local_id + 1) % subgroup_size))) - 0u))), (((subgroup_local_id + 1) % subgroup_size)) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))), min(_GLF_IDENTITY((workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)) + _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), ~ (_GLF_IDENTITY(~ (((subgroup_local_id + 1) % subgroup_size)), (~ (((subgroup_local_id + 1) % subgroup_size))) - 0u))), (((subgroup_local_id + 1) % subgroup_size)) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))), ((workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)) + _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), ~ (_GLF_IDENTITY(~ (((subgroup_local_id + 1) % subgroup_size)), (~ (((subgroup_local_id + 1) % subgroup_size))) - 0u))), (((subgroup_local_id + 1) % subgroup_size)) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | 0u), (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)) + _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), ~ (_GLF_IDENTITY(~ (((subgroup_local_id + 1) % subgroup_size)), (~ (((subgroup_local_id + 1) % subgroup_size))) - 0u))), (((subgroup_local_id + 1) % subgroup_size)) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))))))), uint(uvec2(~ (~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)) + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 0u))))), 1u))), (~ (~ (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(1u * (subgroup_size), max(1u * (subgroup_size), 1u * (subgroup_size)))) + _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) << 0u)), (((subgroup_local_id + 1) % subgroup_size)) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(0u, 0u))) >> 0u))), (((subgroup_local_id + 1) % subgroup_size)) - _GLF_IDENTITY(uint(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x)), (uint(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x))) / 1u)), 0u, 1u, 0u)), (_GLF_IDENTITY(false, bool(bvec2(false, false))) ? _GLF_FUZZED(workgroup_size) : uint(uvec4(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) << 0u)), (((_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(subgroup_local_id, 1u * (subgroup_local_id)))) + 1) % subgroup_size)) - _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), min(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 0u, 1u, 0u)))))))) ^ 0u));
 if(_GLF_DEAD(false))
  return;
 uint read = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, determinant(mat2(0.0, 1.0, 0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) / 1.0)))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), ~ (~ _GLF_IDENTITY((uvec2(buf[virtual_gid], 1u)), min((uvec2(buf[virtual_gid], 1u)), (uvec2(buf[virtual_gid], 1u)))))), uvec2(0u, 0u) + (_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), ~ _GLF_IDENTITY((~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), (uvec2(buf[virtual_gid], 1u)) ^ uvec2(0u, 0u))), min((uvec2(buf[virtual_gid], 1u)), (uvec2(buf[virtual_gid], 1u)))), uvec2(0u, 0u) ^ (_GLF_IDENTITY(_GLF_IDENTITY((uvec2(buf[virtual_gid], 1u)), min((_GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), clamp(uvec2(buf[virtual_gid], 1u), uvec2(buf[virtual_gid], 1u), _GLF_IDENTITY(uvec2(buf[virtual_gid], 1u), (uvec2(buf[virtual_gid], 1u)) | (uvec2(buf[virtual_gid], 1u)))))), (uvec2(buf[virtual_gid], 1u)))), ~ (~ (_GLF_IDENTITY((uvec2(buf[virtual_gid], 1u)), min((uvec2(buf[virtual_gid], 1u)), (uvec2(buf[virtual_gid], 1u)))))))))), (_GLF_IDENTITY((~ _GLF_IDENTITY(_GLF_IDENTITY((uvec2(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, uint(uint(virtual_gid)))) - 0u)], 1u)), min((uvec2(buf[virtual_gid], 1u)), (uvec2(buf[virtual_gid], 1u)))), uvec2(0u, 0u) ^ (_GLF_IDENTITY(_GLF_IDENTITY((uvec2(buf[virtual_gid], 1u)), min((uvec2(buf[virtual_gid], 1u)), (uvec2(buf[virtual_gid], 1u)))), ~ (~ (_GLF_IDENTITY((uvec2(buf[virtual_gid], 1u)), min((uvec2(buf[virtual_gid], 1u)), (uvec2(buf[virtual_gid], 1u)))))))))), max((~ _GLF_IDENTITY(_GLF_IDENTITY((uvec2(buf[virtual_gid], 1u)), min((uvec2(buf[virtual_gid], 1u)), (uvec2(buf[virtual_gid], 1u)))), uvec2(0u, 0u) ^ (_GLF_IDENTITY(_GLF_IDENTITY((uvec2(buf[virtual_gid], 1u)), min((uvec2(buf[virtual_gid], 1u)), (uvec2(buf[virtual_gid], 1u)))), ~ (~ (_GLF_IDENTITY((uvec2(buf[virtual_gid], 1u)), min((uvec2(buf[virtual_gid], 1u)), (uvec2(buf[virtual_gid], 1u)))))))))), (~ _GLF_IDENTITY(_GLF_IDENTITY((uvec2(buf[virtual_gid], 1u)), min((uvec2(buf[virtual_gid], 1u)), (uvec2(buf[virtual_gid], 1u)))), uvec2(0u, 0u) ^ (_GLF_IDENTITY(_GLF_IDENTITY((uvec2(buf[virtual_gid], 1u)), min(_GLF_IDENTITY((uvec2(buf[virtual_gid], 1u)), uvec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * ((uvec2(buf[virtual_gid], 1u)))), (uvec2(buf[virtual_gid], 1u)))), ~ (~ (_GLF_IDENTITY((uvec2(buf[virtual_gid], 1u)), min((uvec2(buf[virtual_gid], 1u)), (uvec2(buf[virtual_gid], 1u))))))))))))) / uvec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)))))))), _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (4) | 0), 4)), 64, 0);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), vec3(mat4(vec3(injectionSwitch, 0.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 0.0, round(length(normalize(1.0))), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, tan(0.0), 0.0))))).x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false)))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))))), (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), (false || (injectionSwitch.x > injectionSwitch.y)) || false))) || false))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), (false || (injectionSwitch.x > injectionSwitch.y)) || false))) || false)))), (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), (false || (injectionSwitch.x > injectionSwitch.y)) || false))) || false)))), ! (! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false || (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-143.822)), bool(false))) > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), (false || (injectionSwitch.x > injectionSwitch.y)) || false))) || false)))))))) && true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), (false || (injectionSwitch.x > injectionSwitch.y)) || false))) || false))))))))))) && true))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, true)))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))
      return;
     return;
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))
      return;
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> int(_GLF_ZERO(0.0, injectionSwitch.x))))
  {
   do
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (true ? next_virtual_gid : _GLF_FUZZED(next_virtual_gid)))], uint(1), 4, 64, 4);
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          continue;
         break;
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          break;
         continue;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat2x4(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, tan(determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, sin(0.0), 1.0, exp(0.0), 1.0, 1.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, tan(determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, sin(0.0), 1.0, exp(0.0), 1.0, 1.0))))).x, injectionSwitch.x, injectionSwitch.x)), sqrt(1.0), 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0, _GLF_IDENTITY(sqrt(0.0), (false ? _GLF_FUZZED(-39.34) : sqrt(0.0)))))))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat2x4(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, tan(determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, sin(0.0), 1.0, exp(0.0), 1.0, 1.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, tan(determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, sin(0.0), 1.0, exp(0.0), 1.0, 1.0))))).x, injectionSwitch.x, injectionSwitch.x), (true ? _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, tan(determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, sin(0.0), 1.0, exp(0.0), 1.0, 1.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, tan(determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, sin(0.0), 1.0, exp(0.0), 1.0, 1.0))))).x, injectionSwitch.x, injectionSwitch.x), clamp(clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, tan(determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, sin(0.0), 1.0, exp(0.0), 1.0, 1.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, tan(determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, sin(0.0), 1.0, exp(0.0), 1.0, 1.0))))).x, injectionSwitch.x, injectionSwitch.x), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, tan(determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, sin(0.0), 1.0, exp(0.0), 1.0, 1.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, tan(determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, sin(0.0), 1.0, exp(0.0), 1.0, 1.0))))).x, injectionSwitch.x, injectionSwitch.x), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, tan(determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, sin(0.0), 1.0, exp(0.0), 1.0, 1.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, tan(determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 1.0, 0.0, sin(0.0), 1.0, exp(0.0), 1.0, 1.0))))).x, injectionSwitch.x, injectionSwitch.x))) : _GLF_FUZZED(-105.368)))), sqrt(1.0), 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0, _GLF_IDENTITY(sqrt(0.0), (false ? _GLF_FUZZED(-39.34) : sqrt(0.0)))))))) > injectionSwitch.y)))))));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, true && (subgroup_local_id + 1 < subgroup_size)), bool(bvec2(_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, (0u | _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, min(0u, 0u))), uint(0u))), ~ (~ ((0u << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))))))), _GLF_IDENTITY(1u, (1u) ^ 0u)))) + 1 < subgroup_size, true))))
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           continue;
          }
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! _GLF_IDENTITY((bool(bvec2(false, true))), ! (_GLF_IDENTITY(! ((bool(bvec2(false, true)))), (! ((bool(bvec2(false, true))))) || false))))))))
        return;
      }
     atomicStore(checker[virtual_gid], read, 4, 64, 4);
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             subgroupAll(false);
             if(_GLF_DEAD(false))
              break;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                return;
               return;
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))).x > injectionSwitch.y))));
         do
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))), true && (bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_TRUE(true))), bool(bool(! (! (_GLF_WRAPPED_IF_TRUE(true)))))))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
         else
          {
          }
        }
       else
        {
        }
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       return;
      }
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
          {
           do
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               do
                {
                 atomicStore(buf[virtual_gid], read, 4, 64, _GLF_IDENTITY(4, 0 + (4)));
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec2(injectionSwitch.y, 1.0)), min(float(vec2(injectionSwitch.y, 1.0)), float(vec2(injectionSwitch.y, 1.0))))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))));
             if(_GLF_DEAD(false))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     subgroupAll(true);
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               else
                {
                }
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         return;
        }
      }
     else
      {
      }
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      break;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1719.7459)), float(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, sqrt(sqrt(1.0)), 0.0, 1.0, 1.0, 1.0, 0.0, log(1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))).x), bool(true)))), float(_GLF_FUZZED(-6798.2926)), bool(false)), (true ? mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1719.7459)), float(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, sqrt(sqrt(1.0)), 0.0, 1.0, 1.0, 1.0, 0.0, log(1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))).x), bool(true)))), float(_GLF_FUZZED(-6798.2926)), bool(false)) : _GLF_FUZZED(371.082)))) > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
