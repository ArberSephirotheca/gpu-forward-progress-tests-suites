#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_157 {
 mat2 _f0;
 int _injected_loop_counter;
 uvec2 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_155 {
 mat4 _f0;
 mat2 _f1;
 ivec2 _f2;
 mat2 _f3;
 mat2x3 _f4;
 uint _f5;
} ;

struct _GLF_struct_156 {
 _GLF_struct_155 _f0;
 mat3x4 _f1;
 mat4 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_153 {
 mat2x3 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_154 {
 _GLF_struct_153 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_158 {
 _GLF_struct_154 _f0;
 _GLF_struct_156 _f1;
 _GLF_struct_157 _f2;
} ;

struct _GLF_struct_150 {
 int _f0;
 mat2x4 _f1;
 int _f2;
 uvec2 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_149 {
 bool _f0;
 uvec3 _f1;
 vec2 _f2;
 vec3 _f3;
 mat3 _f4;
} ;

struct _GLF_struct_151 {
 bvec4 _f0;
 _GLF_struct_149 _f1;
 _GLF_struct_150 _f2;
} ;

struct _GLF_struct_152 {
 uvec2 _f0;
 uint _f1;
 bool _f2;
 _GLF_struct_151 _f3;
 int _injected_loop_counter;
} ;

struct _GLF_struct_148 {
 bvec4 _f0;
 int _injected_loop_counter;
} ;

struct _GLF_struct_145 {
 bvec4 _f0;
 mat4 _f1;
 mat3 _f2;
 bvec3 _f3;
 ivec2 _f4;
 mat4 _f5;
} ;

struct _GLF_struct_146 {
 bvec2 _f0;
 _GLF_struct_145 _f1;
} ;

struct _GLF_struct_143 {
 uvec4 _f0;
 ivec3 _f1;
 int _f2;
} ;

struct _GLF_struct_144 {
 mat4 _f0;
 _GLF_struct_143 _f1;
} ;

struct _GLF_struct_141 {
 mat3 _f0;
 ivec2 _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_142 {
 _GLF_struct_141 _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_139 {
 ivec3 _f0;
} ;

struct _GLF_struct_138 {
 uvec4 _f0;
 bvec4 _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_140 {
 mat4x2 _f0;
 _GLF_struct_138 _f1;
 float _f2;
 vec4 _f3;
 mat3x4 _f4;
 _GLF_struct_139 _f5;
} ;

struct _GLF_struct_147 {
 int _injected_loop_counter;
 _GLF_struct_140 _f0;
 _GLF_struct_142 _f1;
 _GLF_struct_144 _f2;
 _GLF_struct_146 _f3;
 vec3 _f4;
} ;

struct _GLF_struct_135 {
 vec3 _f0;
 vec3 _f1;
 bvec3 _f2;
 mat4 _f3;
 vec2 _f4;
 mat4x2 _f5;
 vec2 _f6;
} ;

struct _GLF_struct_136 {
 _GLF_struct_135 _f0;
} ;

struct _GLF_struct_133 {
 int _f0;
 vec3 _f1;
 mat4 _f2;
 bvec4 _f3;
 vec2 _f4;
 int _injected_loop_counter;
 ivec2 _f5;
} ;

struct _GLF_struct_132 {
 vec3 _f0;
 uint _f1;
 uvec2 _f2;
 mat3 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_131 {
 vec3 _f0;
} ;

struct _GLF_struct_134 {
 _GLF_struct_131 _f0;
 bvec4 _f1;
 _GLF_struct_132 _f2;
 ivec4 _f3;
 mat2x3 _f4;
 _GLF_struct_133 _f5;
} ;

struct _GLF_struct_129 {
 ivec4 _f0;
 uvec2 _f1;
 float _f2;
 mat3x4 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_130 {
 bvec3 _f0;
 _GLF_struct_129 _f1;
 mat2 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_128 {
 int _f0;
} ;

struct _GLF_struct_126 {
 bvec4 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_125 {
 vec4 _f0;
 mat2x3 _f1;
 mat3x2 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_124 {
 uvec4 _f0;
 mat2x3 _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_123 {
 vec3 _f0;
 uvec2 _f1;
 mat4x3 _f2;
 mat4x3 _f3;
 bool _f4;
} ;

struct _GLF_struct_122 {
 uint _f0;
 mat2x4 _f1;
 mat4x2 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_127 {
 _GLF_struct_122 _f0;
 _GLF_struct_123 _f1;
 _GLF_struct_124 _f2;
 vec2 _f3;
 _GLF_struct_125 _f4;
 mat3x4 _f5;
 _GLF_struct_126 _f6;
} ;

struct _GLF_struct_120 {
 mat4x2 _f0;
 uvec3 _f1;
 bvec2 _f2;
 uvec2 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_121 {
 _GLF_struct_120 _f0;
 uvec2 _f1;
 bool _f2;
 int _f3;
} ;

struct _GLF_struct_137 {
 _GLF_struct_121 _f0;
 mat3x2 _f1;
 _GLF_struct_127 _f2;
 _GLF_struct_128 _f3;
 _GLF_struct_130 _f4;
 _GLF_struct_134 _f5;
 _GLF_struct_136 _f6;
} ;

struct _GLF_struct_117 {
 float _f0;
 ivec3 _f1;
 float _f2;
 mat3 _f3;
} ;

struct _GLF_struct_118 {
 mat2 _f0;
 _GLF_struct_117 _f1;
 ivec3 _f2;
 mat4 _f3;
} ;

struct _GLF_struct_115 {
 mat2 _f0;
 bvec3 _f1;
 int _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_114 {
 bvec4 _f0;
 mat4x3 _f1;
 uint _f2;
} ;

struct _GLF_struct_113 {
 ivec2 _f0;
 mat3 _f1;
 mat2x3 _f2;
 mat4 _f3;
} ;

struct _GLF_struct_112 {
 uint _f0;
 mat3x2 _f1;
 mat3x2 _f2;
 float _f3;
 ivec3 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_111 {
 vec4 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_116 {
 ivec3 _f0;
 _GLF_struct_111 _f1;
 _GLF_struct_112 _f2;
 _GLF_struct_113 _f3;
 _GLF_struct_114 _f4;
 _GLF_struct_115 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_119 {
 _GLF_struct_116 _f0;
 mat2x3 _f1;
 uvec3 _f2;
 vec2 _f3;
 _GLF_struct_118 _f4;
 int _injected_loop_counter;
 bool _f5;
 vec2 _f6;
} ;

struct _GLF_struct_108 {
 int _f0;
 vec3 _f1;
 ivec2 _f2;
 vec4 _f3;
 mat2x3 _f4;
 vec4 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_107 {
 mat2x3 _f0;
 bvec2 _f1;
 bvec2 _f2;
 mat3 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_106 {
 mat4x3 _f0;
 mat3 _f1;
 mat2x3 _f2;
 bvec2 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_109 {
 mat4x2 _f0;
 int _f1;
 bvec4 _f2;
 _GLF_struct_106 _f3;
 _GLF_struct_107 _f4;
 bvec2 _f5;
 _GLF_struct_108 _f6;
} ;

struct _GLF_struct_104 {
 bvec2 _f0;
 bool _f1;
 mat2x4 _f2;
 uvec4 _f3;
 vec3 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_103 {
 mat2 _f0;
 mat2x3 _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_102 {
 vec4 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_105 {
 _GLF_struct_102 _f0;
 ivec2 _f1;
 _GLF_struct_103 _f2;
 _GLF_struct_104 _f3;
} ;

struct _GLF_struct_101 {
 mat4x2 _f0;
} ;

struct _GLF_struct_110 {
 _GLF_struct_101 _f0;
 int _injected_loop_counter;
 _GLF_struct_105 _f1;
 _GLF_struct_109 _f2;
} ;

struct _GLF_struct_98 {
 mat3x2 _f0;
 vec3 _f1;
 mat2x3 _f2;
 bvec3 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_99 {
 _GLF_struct_98 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_100 {
 _GLF_struct_99 _f0;
 int _injected_loop_counter;
} ;

struct _GLF_struct_95 {
 ivec4 _f0;
} ;

struct _GLF_struct_96 {
 float _f0;
 mat3 _f1;
 _GLF_struct_95 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_93 {
 mat3 _f0;
 mat4 _f1;
} ;

struct _GLF_struct_94 {
 _GLF_struct_93 _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_91 {
 ivec4 _f0;
 bvec3 _f1;
 mat3 _f2;
 mat3x2 _f3;
 ivec4 _f4;
 mat3x2 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_92 {
 bool _f0;
 _GLF_struct_91 _f1;
 uvec2 _f2;
 uint _f3;
} ;

struct _GLF_struct_97 {
 _GLF_struct_92 _f0;
 _GLF_struct_94 _f1;
 mat3x4 _f2;
 int _injected_loop_counter;
 uvec2 _f3;
 vec3 _f4;
 _GLF_struct_96 _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_88 {
 mat3x4 _f0;
 ivec2 _f1;
 ivec3 _f2;
 mat2x4 _f3;
 bvec4 _f4;
 uvec2 _f5;
 uint _f6;
} ;

struct _GLF_struct_87 {
 float _f0;
 uvec4 _f1;
 int _injected_loop_counter;
 mat3x2 _f2;
 vec4 _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_86 {
 vec2 _f0;
 vec3 _f1;
 mat2 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_85 {
 bvec2 _f0;
 uvec2 _f1;
 ivec2 _f2;
 int _f3;
 bool _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_84 {
 mat4x3 _f0;
 mat3x4 _f1;
 mat2 _f2;
 bool _f3;
} ;

struct _GLF_struct_89 {
 _GLF_struct_84 _f0;
 _GLF_struct_85 _f1;
 _GLF_struct_86 _f2;
 _GLF_struct_87 _f3;
 _GLF_struct_88 _f4;
 mat4 _f5;
} ;

struct _GLF_struct_90 {
 _GLF_struct_89 _f0;
 mat4x3 _f1;
 ivec4 _f2;
 mat4 _f3;
 mat3 _f4;
} ;

struct _GLF_struct_83 {
 uint virtual_gid;
 vec2 _f0;
} ;

struct _GLF_struct_82 {
 int _f0;
 int _injected_loop_counter;
} ;

struct _GLF_struct_79 {
 mat4 _f0;
 uvec3 _f1;
 ivec4 _f2;
 bvec3 _f3;
 mat2x3 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_78 {
 mat2x3 _f0;
 uint _f1;
 uvec2 _f2;
 bvec3 _f3;
 mat3 _f4;
 mat2 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_80 {
 _GLF_struct_78 _f0;
 _GLF_struct_79 _f1;
} ;

struct _GLF_struct_76 {
 mat3 _f0;
 bvec2 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_77 {
 mat3 _f0;
 int _injected_loop_counter;
 ivec2 _f1;
 vec4 _f2;
 _GLF_struct_76 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_81 {
 _GLF_struct_77 _f0;
 int _f1;
 uint _f2;
 _GLF_struct_80 _f3;
} ;

struct _GLF_struct_73 {
 mat2x3 _f0;
 mat3x2 _f1;
 ivec3 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_72 {
 vec3 _f0;
 float _f1;
 bool _f2;
 uint _f3;
} ;

struct _GLF_struct_74 {
 _GLF_struct_72 _f0;
 vec2 _f1;
 uvec2 _f2;
 _GLF_struct_73 _f3;
 mat3 _f4;
} ;

struct _GLF_struct_70 {
 mat3x2 _f0;
 ivec2 _f1;
 uvec2 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_69 {
 bvec3 _f0;
} ;

struct _GLF_struct_68 {
 float _f0;
 uvec2 _f1;
 mat2x3 _f2;
 uvec3 _f3;
 mat3 _f4;
} ;

struct _GLF_struct_71 {
 _GLF_struct_68 _f0;
 _GLF_struct_69 _f1;
 uvec4 _f2;
 _GLF_struct_70 _f3;
} ;

struct _GLF_struct_75 {
 bvec2 _f0;
 int _injected_loop_counter;
 _GLF_struct_71 _f1;
 _GLF_struct_74 _f2;
} ;

struct _GLF_struct_67 {
 uint subgroup_size;
 uvec4 _f0;
} ;

struct _GLF_struct_64 {
 uvec4 _f0;
 mat2 _f1;
 ivec4 _f2;
 ivec3 _f3;
 float _f4;
 vec3 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_63 {
 uvec2 _f0;
 mat2x3 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_62 {
 bool _f0;
 mat3x4 _f1;
 bool _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_65 {
 bvec3 _f0;
 _GLF_struct_62 _f1;
 _GLF_struct_63 _f2;
 _GLF_struct_64 _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_60 {
 mat3x2 _f0;
 ivec2 _f1;
 int _f2;
 bvec3 _f3;
 uint _f4;
 mat2 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_61 {
 bool _f0;
 float _f1;
 _GLF_struct_60 _f2;
} ;

struct _GLF_struct_58 {
 uvec4 _f0;
 float _f1;
 uint _f2;
 ivec2 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_59 {
 bvec2 _f0;
 _GLF_struct_58 _f1;
 mat3x4 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_66 {
 _GLF_struct_59 _f0;
 mat3 _f1;
 int _injected_loop_counter;
 _GLF_struct_61 _f2;
 _GLF_struct_65 _f3;
} ;

struct _GLF_struct_55 {
 float _f0;
 ivec4 _f1;
 bool _f2;
 int _f3;
 bvec2 _f4;
 mat4x2 _f5;
 vec4 _f6;
} ;

struct _GLF_struct_54 {
 mat4 _f0;
} ;

struct _GLF_struct_53 {
 uvec3 _f0;
 vec3 _f1;
 float _f2;
 ivec2 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_56 {
 int _f0;
 _GLF_struct_53 _f1;
 _GLF_struct_54 _f2;
 _GLF_struct_55 _f3;
} ;

struct _GLF_struct_51 {
 mat3 _f0;
 vec3 _f1;
 vec2 _f2;
 mat3 _f3;
 mat3x2 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_50 {
 mat4 _f0;
} ;

struct _GLF_struct_52 {
 _GLF_struct_50 _f0;
 _GLF_struct_51 _f1;
} ;

struct _GLF_struct_48 {
 float _f0;
 mat2x3 _f1;
 bvec4 _f2;
 uvec3 _f3;
 uint _f4;
} ;

struct _GLF_struct_47 {
 float _f0;
 vec4 _f1;
 mat4 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_49 {
 mat3x2 _f0;
 uvec4 _f1;
 vec2 _f2;
 _GLF_struct_47 _f3;
 _GLF_struct_48 _f4;
 mat4x3 _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_46 {
 uvec3 _f0;
} ;

struct _GLF_struct_44 {
 ivec4 _f0;
 mat4x3 _f1;
 int _f2;
 int _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_43 {
 uvec4 _f0;
 vec4 _f1;
 mat2x3 _f2;
 uvec4 _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_42 {
 ivec4 _f0;
 float _f1;
 mat3 _f2;
 mat4x2 _f3;
 float _f4;
} ;

struct _GLF_struct_45 {
 ivec4 _f0;
 vec4 _f1;
 _GLF_struct_42 _f2;
 _GLF_struct_43 _f3;
 _GLF_struct_44 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_57 {
 bvec4 _f0;
 int _injected_loop_counter;
 _GLF_struct_45 _f1;
 _GLF_struct_46 _f2;
 _GLF_struct_49 _f3;
 _GLF_struct_52 _f4;
 _GLF_struct_56 _f5;
} ;

struct _GLF_struct_41 {
 mat3 _f0;
 int _injected_loop_counter;
} ;

struct _GLF_struct_38 {
 vec2 _f0;
 bvec2 _f1;
 vec3 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_39 {
 _GLF_struct_38 _f0;
} ;

struct _GLF_struct_40 {
 mat3 _f0;
 int _injected_loop_counter;
 _GLF_struct_39 _f1;
 mat2 _f2;
 mat4x3 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_35 {
 float _f0;
 mat3 _f1;
 mat3x2 _f2;
} ;

struct _GLF_struct_34 {
 ivec2 _f0;
 bvec4 _f1;
 vec4 _f2;
} ;

struct _GLF_struct_36 {
 _GLF_struct_34 _f0;
 ivec3 _f1;
 _GLF_struct_35 _f2;
} ;

struct _GLF_struct_33 {
 bool _f0;
} ;

struct _GLF_struct_37 {
 bvec2 _f0;
 _GLF_struct_33 _f1;
 ivec4 _f2;
 mat4x3 _f3;
 _GLF_struct_36 _f4;
 mat4 _f5;
 ivec4 _f6;
 int _injected_loop_counter;
} ;

struct _GLF_struct_30 {
 ivec2 _f0;
 ivec2 _f1;
 mat4 _f2;
 uvec3 _f3;
 float _f4;
 int _f5;
 vec2 _f6;
} ;

struct _GLF_struct_29 {
 mat3x4 _f0;
 mat4x3 _f1;
 uint workgroup_size;
 mat3 _f2;
} ;

struct _GLF_struct_31 {
 mat3 _f0;
 _GLF_struct_29 _f1;
 _GLF_struct_30 _f2;
} ;

struct _GLF_struct_28 {
 mat4x2 _f0;
} ;

struct _GLF_struct_32 {
 _GLF_struct_28 _f0;
 _GLF_struct_31 _f1;
} ;

struct _GLF_struct_26 {
 bvec4 _f0;
} ;

struct _GLF_struct_24 {
 vec3 _f0;
 vec3 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_23 {
 uvec4 _f0;
} ;

struct _GLF_struct_22 {
 mat4x3 _f0;
 ivec3 _f1;
 mat4x3 _f2;
 mat4x3 _f3;
 int _f4;
 mat4x3 _f5;
} ;

struct _GLF_struct_25 {
 bvec3 _f0;
 _GLF_struct_22 _f1;
 _GLF_struct_23 _f2;
 _GLF_struct_24 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_27 {
 uint subgroup_id;
 mat4x3 _f0;
 _GLF_struct_25 _f1;
 ivec2 _f2;
 _GLF_struct_26 _f3;
 mat3x4 _f4;
 mat3x4 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_19 {
 ivec4 _f0;
 ivec3 _f1;
 mat3 _f2;
 mat4 _f3;
} ;

struct _GLF_struct_18 {
 vec4 _f0;
 bvec3 _f1;
 bvec2 _f2;
 int _f3;
} ;

struct _GLF_struct_20 {
 _GLF_struct_18 _f0;
 _GLF_struct_19 _f1;
} ;

struct _GLF_struct_21 {
 mat4x2 _f0;
 uint workgroup_base;
 _GLF_struct_20 _f1;
} ;

struct _GLF_struct_17 {
 ivec2 _f0;
 ivec3 _f1;
 mat2 _f2;
 int _injected_loop_counter;
 mat4 _f3;
} ;

struct _GLF_struct_14 {
 mat3x4 _f0;
 ivec4 _f1;
 vec4 _f2;
 uvec4 _f3;
 vec3 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_15 {
 _GLF_struct_14 _f0;
 mat4 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_13 {
 uvec2 _f0;
 uvec2 _f1;
 uint subgroup_local_id;
} ;

struct _GLF_struct_16 {
 vec4 _f0;
 mat3x2 _f1;
 _GLF_struct_13 _f2;
 mat3x2 _f3;
 _GLF_struct_15 _f4;
} ;

struct _GLF_struct_10 {
 uint _f0;
 uvec2 _f1;
 mat3 _f2;
 uvec4 _f3;
 bool _f4;
 mat4x3 _f5;
} ;

struct _GLF_struct_9 {
 mat2 _f0;
} ;

struct _GLF_struct_11 {
 uvec4 _f0;
 _GLF_struct_9 _f1;
 _GLF_struct_10 _f2;
} ;

struct _GLF_struct_8 {
 uvec2 _f0;
} ;

struct _GLF_struct_12 {
 mat4x2 _f0;
 _GLF_struct_8 _f1;
 bvec4 _f2;
 _GLF_struct_11 _f3;
 uint next_virtual_gid;
 vec2 _f4;
} ;

struct _GLF_struct_5 {
 bvec2 _f0;
} ;

struct _GLF_struct_6 {
 mat3x2 _f0;
 _GLF_struct_5 _f1;
} ;

struct _GLF_struct_3 {
 mat3x2 _f0;
 bvec2 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_2 {
 mat2x4 _f0;
 mat4 _f1;
 uint _f2;
 mat2 _f3;
} ;

struct _GLF_struct_1 {
 float _f0;
 int _f1;
 uvec3 _f2;
 bvec2 _f3;
 uvec2 _f4;
 mat4x3 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_4 {
 mat3x2 _f0;
 _GLF_struct_1 _f1;
 uvec2 _f2;
 _GLF_struct_2 _f3;
 _GLF_struct_3 _f4;
} ;

struct _GLF_struct_0 {
 vec2 _f0;
 uint read;
} ;

struct _GLF_struct_7 {
 _GLF_struct_0 _f0;
 ivec2 _f1;
 mat4x2 _f2;
 _GLF_struct_4 _f3;
 mat3 _f4;
 _GLF_struct_6 _f5;
 int _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      continue;
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) & 1) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, ~ (~ (0))))))); _injected_loop_counter --)
                {
                 return;
                }
              }
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | (0 | 1))); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               return;
              }
            }
           continue;
          }
         continue;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        break;
       for(_GLF_struct_17 _GLF_struct_replacement_17 = _GLF_struct_17(ivec2(1), ivec3(1), mat2(1.0), 1, mat4(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_17._injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_struct_replacement_17._injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   return;
                  }
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                return;
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         continue;
        }
       for(_GLF_struct_81 _GLF_struct_replacement_81 = _GLF_struct_81(_GLF_struct_77(mat3(1.0), ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4)))))), ivec2(1), vec4(1.0), _GLF_struct_76(mat3(1.0), bvec2(true), vec3(1.0)), mat4x3(1.0)), 1, 1u, _GLF_struct_80(_GLF_struct_78(mat2x3(1.0), 1u, uvec2(1u), bvec3(true), mat3(1.0), mat2(1.0), mat4(1.0)), _GLF_struct_79(mat4(1.0), uvec3(1u), ivec4(1), bvec3(true), mat2x3(1.0), ivec2(1)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_81._f0._injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_struct_replacement_81._f0._injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
            continue;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           do
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   break;
                  }
                 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    break;
                   return;
                   if(_GLF_DEAD(false))
                    break;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          continue;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     break;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || false)))
        return;
       continue;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
         if(_GLF_DEAD(false))
          continue;
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           for(_GLF_struct_82 _GLF_struct_replacement_82 = _GLF_struct_82(1, 1); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_82._injected_loop_counter > 0); _GLF_struct_replacement_82._injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 continue;
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          return;
                         return;
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     return;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       continue;
                      }
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, true))), true, false, true)))))
                      continue;
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         break;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_27 _GLF_struct_replacement_27 = _GLF_struct_27(gl_SubgroupID, mat4x3(1.0), _GLF_struct_25(bvec3(true), _GLF_struct_22(mat4x3(1.0), ivec3(1), mat4x3(1.0), mat4x3(1.0), 1, mat4x3(1.0)), _GLF_struct_23(uvec4(1u)), _GLF_struct_24(vec3(1.0), vec3(1.0), vec2(1.0)), mat2x4(1.0)), ivec2(1), _GLF_struct_26(bvec4(true)), mat3x4(1.0), mat3x4(1.0), vec3(1.0));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             return;
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       return;
      }
    }
  }
 else
  {
  }
 _GLF_struct_67 _GLF_struct_replacement_67 = _GLF_struct_67(gl_SubgroupSize, uvec4(1u));
 _GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(vec4(1.0), mat3x2(1.0), _GLF_struct_13(uvec2(1u), uvec2(1u), gl_SubgroupInvocationID), mat3x2(1.0), _GLF_struct_15(_GLF_struct_14(mat3x4(1.0), ivec4(1), vec4(1.0), uvec4(1u), vec3(1.0), ivec2(1)), mat4(1.0), ivec4(1)));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
               for(_GLF_struct_137 _GLF_struct_replacement_137 = _GLF_struct_137(_GLF_struct_121(_GLF_struct_120(mat4x2(1.0), uvec3(1u), bvec2(true), uvec2(1u), vec4(1.0)), uvec2(1u), true, 1), mat3x2(1.0), _GLF_struct_127(_GLF_struct_122(1u, mat2x4(1.0), mat4x2(1.0), ivec3(1)), _GLF_struct_123(vec3(1.0), uvec2(1u), mat4x3(1.0), mat4x3(1.0), true), _GLF_struct_124(uvec4(1u), mat2x3(1.0), mat4x3(1.0)), vec2(1.0), _GLF_struct_125(vec4(1.0), mat2x3(1.0), mat3x2(1.0), uvec3(1u)), mat3x4(1.0), _GLF_struct_126(bvec4(true), uvec4(1u))), _GLF_struct_128(1), _GLF_struct_130(bvec3(true), _GLF_struct_129(ivec4(1), uvec2(1u), 1.0, mat3x4(1.0), ivec3(1)), mat2(1.0), vec4(1.0)), _GLF_struct_134(_GLF_struct_131(vec3(1.0)), bvec4(true), _GLF_struct_132(vec3(1.0), 1u, uvec2(1u), mat3(1.0), uvec2(1u)), ivec4(1), mat2x3(1.0), _GLF_struct_133(1, vec3(1.0), mat4(1.0), bvec4(true), vec2(1.0), ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 | (int(4))))) >> _GLF_IDENTITY(int(4), int(4))), ivec2(1))), _GLF_struct_136(_GLF_struct_135(vec3(1.0), vec3(1.0), bvec3(true), mat4(1.0), vec2(1.0), mat4x2(1.0), vec2(1.0)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_137._f5._f5._injected_loop_counter > 0); _GLF_struct_replacement_137._f5._f5._injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
                        {
                        }
                       else
                        {
                         return;
                        }
                      }
                    }
                   else
                    {
                    }
                   return;
                  }
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         return;
                        }
                       else
                        {
                        }
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    break;
                  }
                 else
                  {
                  }
                }
              }
            }
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            break;
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 _GLF_struct_32 _GLF_struct_replacement_32 = _GLF_struct_32(_GLF_struct_28(mat4x2(1.0)), _GLF_struct_31(mat3(1.0), _GLF_struct_29(mat3x4(1.0), mat4x3(1.0), gl_WorkGroupSize.x, mat3(1.0)), _GLF_struct_30(ivec2(1), ivec2(1), mat4(1.0), uvec3(1u), 1.0, 1, vec2(1.0))));
 for(_GLF_struct_75 _GLF_struct_replacement_75 = _GLF_struct_75(bvec2(true), 1, _GLF_struct_71(_GLF_struct_68(1.0, uvec2(1u), mat2x3(1.0), uvec3(1u), mat3(1.0)), _GLF_struct_69(bvec3(true)), uvec4(1u), _GLF_struct_70(mat3x2(1.0), ivec2(1), uvec2(1u), bvec2(true))), _GLF_struct_74(_GLF_struct_72(vec3(1.0), 1.0, true, 1u), vec2(1.0), uvec2(1u), _GLF_struct_73(mat2x3(1.0), mat3x2(1.0), ivec3(1), vec2(1.0)), mat3(1.0))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_75._injected_loop_counter != 0); _GLF_struct_replacement_75._injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               break;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
            }
           else
            {
             return;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          break;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    break;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, false)))))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          continue;
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, 0 | (0))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 _GLF_struct_21 _GLF_struct_replacement_21 = _GLF_struct_21(mat4x2(1.0), _GLF_struct_replacement_32._f1._f1.workgroup_size * workgroup_id, _GLF_struct_20(_GLF_struct_18(vec4(1.0), bvec3(true), bvec2(true), 1), _GLF_struct_19(ivec4(1), ivec3(1), mat3(1.0), mat4(1.0))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            return;
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 return;
                }
               if(_GLF_DEAD(false))
                break;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       return;
      }
     do
      {
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 _GLF_struct_83 _GLF_struct_replacement_83 = _GLF_struct_83(_GLF_struct_replacement_21.workgroup_base + _GLF_struct_replacement_27.subgroup_id * _GLF_struct_replacement_67.subgroup_size + _GLF_struct_replacement_16._f2.subgroup_local_id, vec2(1.0));
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(mat4x2(1.0), _GLF_struct_8(uvec2(1u)), bvec4(true), _GLF_struct_11(uvec4(1u), _GLF_struct_9(mat2(1.0)), _GLF_struct_10(1u, uvec2(1u), mat3(1.0), uvec4(1u), true, mat4x3(1.0))), _GLF_struct_replacement_21.workgroup_base + _GLF_struct_replacement_27.subgroup_id * _GLF_struct_replacement_67.subgroup_size + ((_GLF_struct_replacement_16._f2.subgroup_local_id + 1) % _GLF_struct_replacement_67.subgroup_size), vec2(1.0));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), true && (bool(bvec2(false, true)))))))
          {
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(0, clamp(0, 0, 0)) | 1)); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
 for(_GLF_struct_37 _GLF_struct_replacement_37 = _GLF_struct_37(bvec2(true), _GLF_struct_33(true), ivec4(1), mat4x3(1.0), _GLF_struct_36(_GLF_struct_34(ivec2(1), bvec4(true), vec4(1.0)), ivec3(1), _GLF_struct_35(1.0, mat3(1.0), mat3x2(1.0))), mat4(1.0), ivec4(1), 1); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_37._injected_loop_counter > 0); _GLF_struct_replacement_37._injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
             return;
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(false))
        continue;
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(_GLF_struct_0(vec2(1.0), atomicLoad(buf[_GLF_struct_replacement_83.virtual_gid], 4, 64, 0)), ivec2(1), mat4x2(1.0), _GLF_struct_4(mat3x2(1.0), _GLF_struct_1(1.0, 1, uvec3(1u), bvec2(true), uvec2(1u), mat4x3(1.0), bvec3(true)), uvec2(1u), _GLF_struct_2(mat2x4(1.0), mat4(1.0), 1u, mat2(1.0)), _GLF_struct_3(mat3x2(1.0), bvec2(true), uvec4(1u))), mat3(1.0), _GLF_struct_6(mat3x2(1.0), _GLF_struct_5(bvec2(true))), 1);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) / 1)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       atomicStore(buf[_GLF_struct_replacement_12.next_virtual_gid], uint(1), 4, 64, 4);
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              break;
             for(_GLF_struct_66 _GLF_struct_replacement_66 = _GLF_struct_66(_GLF_struct_59(bvec2(true), _GLF_struct_58(uvec4(1u), 1.0, 1u, ivec2(1), bvec3(true)), mat3x4(1.0), uvec2(1u)), mat3(1.0), 0, _GLF_struct_61(true, 1.0, _GLF_struct_60(mat3x2(1.0), ivec2(1), 1, bvec3(true), 1u, mat2(1.0), mat4x3(1.0))), _GLF_struct_65(bvec3(true), _GLF_struct_62(true, mat3x4(1.0), true, uvec3(1u)), _GLF_struct_63(uvec2(1u), mat2x3(1.0), uvec4(1u)), _GLF_struct_64(uvec4(1u), mat2(1.0), ivec4(1), ivec3(1), 1.0, vec3(1.0), mat4x3(1.0)), uvec3(1u))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_66._injected_loop_counter < 1); _GLF_struct_replacement_66._injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                return;
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                }
               if(_GLF_DEAD(false))
                break;
               return;
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = ((0 | 0) << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, int(int(1)))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                return;
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 do
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       return;
                       if(_GLF_DEAD(false))
                        continue;
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     return;
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         break;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), (true ? ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) : _GLF_FUZZED(-36036))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             return;
             if(_GLF_DEAD(false))
              break;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             break;
            }
           if(_GLF_DEAD(false))
            continue;
          }
        }
       if(_GLF_struct_replacement_16._f2.subgroup_local_id + 1 < _GLF_struct_replacement_67.subgroup_size)
        {
         do
          {
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              continue;
             do
              {
               if(_GLF_DEAD(false))
                break;
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 + (int(6)))))); _injected_loop_counter ++)
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    return;
                   do
                    {
                     do
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           do
                            {
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
                              {
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(false))
                                  break;
                                 return;
                                }
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                continue;
                              }
                             do
                              {
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(false))
                                  break;
                                 continue;
                                }
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                continue;
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                 if(_GLF_DEAD(false))
                                  return;
                                 break;
                                }
                               atomicStore(checker[_GLF_struct_replacement_83.virtual_gid], _GLF_struct_replacement_7._f0.read, 4, 64, 4);
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                 if(_GLF_DEAD(false))
                                  continue;
                                 return;
                                }
                               if(_GLF_DEAD(false))
                                continue;
                               break;
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), true && (bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          break;
                         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
                          break;
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            continue;
                           return;
                          }
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            break;
                           if(_GLF_DEAD(false))
                            break;
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            continue;
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            continue;
                           continue;
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                       for(_GLF_struct_40 _GLF_struct_replacement_40 = _GLF_struct_40(mat3(1.0), 1, _GLF_struct_39(_GLF_struct_38(vec2(1.0), bvec2(true), vec3(1.0), ivec3(1))), mat2(1.0), mat4x3(1.0), bvec2(true)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_40._injected_loop_counter != 0); _GLF_struct_replacement_40._injected_loop_counter --)
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           for(_GLF_struct_147 _GLF_struct_replacement_147 = _GLF_struct_147(1, _GLF_struct_140(mat4x2(1.0), _GLF_struct_138(uvec4(1u), bvec4(true), mat2x3(1.0)), 1.0, vec4(1.0), mat3x4(1.0), _GLF_struct_139(ivec3(1))), _GLF_struct_142(_GLF_struct_141(mat3(1.0), ivec2(1), mat4x3(1.0)), bvec4(true)), _GLF_struct_144(mat4(1.0), _GLF_struct_143(uvec4(1u), ivec3(1), 1)), _GLF_struct_146(bvec2(true), _GLF_struct_145(bvec4(true), mat4(1.0), mat3(1.0), bvec3(true), ivec2(1), mat4(1.0))), vec3(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_147._injected_loop_counter > (1 ^ 1)); _GLF_struct_replacement_147._injected_loop_counter --)
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                break;
                               continue;
                              }
                             do
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))
                                return;
                               do
                                {
                                 if(_GLF_DEAD(false))
                                  continue;
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                    {
                                     return;
                                    }
                                   else
                                    {
                                    }
                                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                                    continue;
                                  }
                                 else
                                  {
                                   if(_GLF_DEAD(false))
                                    continue;
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            continue;
                          }
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               continue;
              }
             break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         subgroupAll(false);
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               for(_GLF_struct_90 _GLF_struct_replacement_90 = _GLF_struct_90(_GLF_struct_89(_GLF_struct_84(mat4x3(1.0), mat3x4(1.0), mat2(1.0), true), _GLF_struct_85(bvec2(true), uvec2(1u), ivec2(1), 1, true, mat3x4(1.0)), _GLF_struct_86(vec2(1.0), vec3(1.0), mat2(1.0), uvec2(1u)), _GLF_struct_87(1.0, uvec4(1u), 0, mat3x2(1.0), vec4(1.0), uvec3(1u)), _GLF_struct_88(mat3x4(1.0), ivec2(1), ivec3(1), mat2x4(1.0), bvec4(true), uvec2(1u), 1u), mat4(1.0)), mat4x3(1.0), ivec4(1), mat4(1.0), mat3(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_90._f0._f3._injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_struct_replacement_90._f0._f3._injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   break;
                  }
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
              }
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           return;
           if(_GLF_DEAD(false))
            return;
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
              {
               do
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   return;
                   if(_GLF_DEAD(false))
                    continue;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(_GLF_struct_148 _GLF_struct_replacement_148 = _GLF_struct_148(bvec4(true), 1); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_148._injected_loop_counter > (0 >> _GLF_IDENTITY(int(5), int(5)))); _GLF_struct_replacement_148._injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     return;
                    }
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     return;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                   if(_GLF_DEAD(false))
                    return;
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                return;
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
            }
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           do
            {
             do
              {
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
                  break;
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   atomicStore(buf[_GLF_struct_replacement_83.virtual_gid], _GLF_struct_replacement_7._f0.read, 4, 64, 4);
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                 for(_GLF_struct_152 _GLF_struct_replacement_152 = _GLF_struct_152(uvec2(1u), 1u, true, _GLF_struct_151(bvec4(true), _GLF_struct_149(true, uvec3(1u), vec2(1.0), vec3(1.0), mat3(1.0)), _GLF_struct_150(1, mat2x4(1.0), 1, uvec2(1u), mat4x3(1.0))), 1); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_152._injected_loop_counter != 0); _GLF_struct_replacement_152._injected_loop_counter --)
                  {
                   for(_GLF_struct_97 _GLF_struct_replacement_97 = _GLF_struct_97(_GLF_struct_92(true, _GLF_struct_91(ivec4(1), bvec3(true), mat3(1.0), mat3x2(1.0), ivec4(1), mat3x2(1.0), mat4(1.0)), uvec2(1u), 1u), _GLF_struct_94(_GLF_struct_93(mat3(1.0), mat4(1.0)), bvec4(true)), mat3x4(1.0), 0, uvec2(1u), vec3(1.0), _GLF_struct_96(1.0, mat3(1.0), _GLF_struct_95(ivec4(1)), mat2x3(1.0)), mat4x2(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_97._injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _GLF_struct_replacement_97._injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(false))
                              return;
                            }
                           else
                            {
                            }
                           continue;
                          }
                         break;
                        }
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          return;
                         return;
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  return;
                 do
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       for(int _injected_loop_counter = ((0 & 8831) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (0 | 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             do
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                break;
                               return;
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                              {
                               return;
                               if(_GLF_DEAD(false))
                                break;
                              }
                             else
                              {
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                      continue;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       return;
                      }
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                  }
                }
              }
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   break;
                  }
                }
               else
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(false))
                            continue;
                           subgroupAll(true);
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            return;
                          }
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          return;
                         break;
                        }
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 continue;
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                return;
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   return;
                   if(_GLF_DEAD(false))
                    break;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               else
                {
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               for(_GLF_struct_100 _GLF_struct_replacement_100 = _GLF_struct_100(_GLF_struct_99(_GLF_struct_98(mat3x2(1.0), vec3(1.0), mat2x3(1.0), bvec3(true), uvec4(1u)), vec2(1.0)), 0); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_100._injected_loop_counter != _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), int(int(((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))))))); _GLF_struct_replacement_100._injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  continue;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   return;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    continue;
                   return;
                  }
                }
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(int(int(3))), (int(int(int(3)))) | 0)))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                break;
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   for(_GLF_struct_41 _GLF_struct_replacement_41 = _GLF_struct_41(mat3(1.0), 1); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_41._injected_loop_counter > 0); _GLF_struct_replacement_41._injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            break;
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              continue;
                             break;
                            }
                           if(_GLF_DEAD(false))
                            continue;
                           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                            break;
                           return;
                          }
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            continue;
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            break;
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              return;
                             break;
                            }
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              break;
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 do
                                  {
                                   return;
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                 if(_GLF_DEAD(false))
                                  return;
                                }
                               else
                                {
                                 if(_GLF_DEAD(false))
                                  break;
                                }
                              }
                             else
                              {
                              }
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              return;
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              return;
                             continue;
                            }
                           if(_GLF_DEAD(false))
                            continue;
                          }
                        }
                      }
                    }
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), (_GLF_IDENTITY(true, bool(bvec4(true, false, true, true)))) || false)))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            continue;
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             return;
                            }
                           else
                            {
                            }
                          }
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))
                          {
                           if(_GLF_DEAD(false))
                            return;
                           continue;
                          }
                        }
                      }
                     break;
                    }
                  }
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   break;
                  }
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                break;
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                return;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               return;
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) && true), true)))))
                return;
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    break;
                   return;
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, min(1, 1))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                       if(_GLF_DEAD(false))
                        return;
                      }
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           return;
                           if(_GLF_DEAD(false))
                            return;
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                       return;
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     return;
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                return;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                  }
                 return;
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 return;
                }
               else
                {
                }
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   return;
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       if(_GLF_DEAD(false))
                        break;
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          return;
                         continue;
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          return;
                         break;
                        }
                       for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
                        {
                         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                          {
                           return;
                          }
                        }
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          return;
                         return;
                         if(_GLF_DEAD(false))
                          continue;
                        }
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         do
                          {
                           if(_GLF_DEAD(false))
                            return;
                           for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) | 0)) | (int(7)))))); _injected_loop_counter ++)
                            {
                             return;
                             if(_GLF_DEAD(false))
                              return;
                             if(_GLF_DEAD(false))
                              break;
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         return;
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                         continue;
                        }
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        break;
                       do
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             return;
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     do
                      {
                       return;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     for(_GLF_struct_57 _GLF_struct_replacement_57 = _GLF_struct_57(bvec4(true), 0, _GLF_struct_45(ivec4(1), vec4(1.0), _GLF_struct_42(ivec4(1), 1.0, mat3(1.0), mat4x2(1.0), 1.0), _GLF_struct_43(uvec4(1u), vec4(1.0), mat2x3(1.0), uvec4(1u), uvec3(1u)), _GLF_struct_44(ivec4(1), mat4x3(1.0), 1, 1, mat2x4(1.0)), mat3x4(1.0)), _GLF_struct_46(uvec3(1u)), _GLF_struct_49(mat3x2(1.0), uvec4(1u), vec2(1.0), _GLF_struct_47(1.0, vec4(1.0), mat4(1.0), uvec4(1u)), _GLF_struct_48(1.0, mat2x3(1.0), bvec4(true), uvec3(1u), 1u), mat4x3(1.0), uvec3(1u)), _GLF_struct_52(_GLF_struct_50(mat4(1.0)), _GLF_struct_51(mat3(1.0), vec3(1.0), vec2(1.0), mat3(1.0), mat3x2(1.0), bvec4(true))), _GLF_struct_56(1, _GLF_struct_53(uvec3(1u), vec3(1.0), 1.0, ivec2(1), vec4(1.0)), _GLF_struct_54(mat4(1.0)), _GLF_struct_55(1.0, ivec4(1), true, 1, bvec2(true), mat4x2(1.0), vec4(1.0)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_57._injected_loop_counter != (1 & (1 | 1))); _GLF_struct_replacement_57._injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     if(_GLF_DEAD(false))
                      return;
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
               if(_GLF_DEAD(false))
                return;
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              return;
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
            return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                        {
                         if(_GLF_DEAD(false))
                          return;
                         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                          {
                           return;
                          }
                         if(_GLF_DEAD(false))
                          return;
                        }
                       do
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           return;
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                     return;
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
               do
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       for(_GLF_struct_110 _GLF_struct_replacement_110 = _GLF_struct_110(_GLF_struct_101(mat4x2(1.0)), (0 | 0), _GLF_struct_105(_GLF_struct_102(vec4(1.0), bvec3(true)), ivec2(1), _GLF_struct_103(mat2(1.0), mat2x3(1.0), mat2x3(1.0)), _GLF_struct_104(bvec2(true), true, mat2x4(1.0), uvec4(1u), vec3(1.0), vec3(1.0))), _GLF_struct_109(mat4x2(1.0), 1, bvec4(true), _GLF_struct_106(mat4x3(1.0), mat3(1.0), mat2x3(1.0), bvec2(true), ivec3(1)), _GLF_struct_107(mat2x3(1.0), bvec2(true), bvec2(true), mat3(1.0), bvec4(true)), bvec2(true), _GLF_struct_108(1, vec3(1.0), ivec2(1), vec4(1.0), mat2x3(1.0), vec4(1.0), ivec2(1)))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_110._injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_struct_replacement_110._injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              return;
                             continue;
                            }
                           if(_GLF_DEAD(false))
                            return;
                           break;
                           if(_GLF_DEAD(false))
                            continue;
                           if(_GLF_DEAD(false))
                            return;
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                         return;
                         if(_GLF_DEAD(false))
                          break;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                        }
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       return;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(false))
                        return;
                      }
                     if(_GLF_DEAD(false))
                      break;
                    }
                   do
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          return;
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          return;
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          return;
                         return;
                        }
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                               if(_GLF_DEAD(false))
                                return;
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                break;
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  return;
                                }
                               else
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    return;
                                  }
                                 else
                                  {
                                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                    {
                                     do
                                      {
                                       return;
                                       if(_GLF_DEAD(false))
                                        continue;
                                       if(_GLF_DEAD(false))
                                        break;
                                      }
                                     while(_GLF_WRAPPED_LOOP(false));
                                    }
                                  }
                                }
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(false))
                                  break;
                                 break;
                                }
                              }
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              return;
                             if(_GLF_DEAD(false))
                              return;
                             if(_GLF_DEAD(false))
                              return;
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              break;
                            }
                          }
                         if(_GLF_DEAD(false))
                          return;
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_DEAD(false))
                      return;
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     return;
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                }
               if(_GLF_DEAD(false))
                return;
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     for(_GLF_struct_119 _GLF_struct_replacement_119 = _GLF_struct_119(_GLF_struct_116(ivec3(1), _GLF_struct_111(vec4(1.0), uvec3(1u)), _GLF_struct_112(1u, mat3x2(1.0), mat3x2(1.0), 1.0, ivec3(1), ivec3(1)), _GLF_struct_113(ivec2(1), mat3(1.0), mat2x3(1.0), mat4(1.0)), _GLF_struct_114(bvec4(true), mat4x3(1.0), 1u), _GLF_struct_115(mat2(1.0), bvec3(true), 1, ivec3(1)), mat2(1.0)), mat2x3(1.0), uvec3(1u), vec2(1.0), _GLF_struct_118(mat2(1.0), _GLF_struct_117(1.0, ivec3(1), 1.0, mat3(1.0)), ivec3(1), mat4(1.0)), int(_GLF_ZERO(0.0, injectionSwitch.x)), true, vec2(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_119._injected_loop_counter != _GLF_IDENTITY(1, (1) / 1)); _GLF_struct_replacement_119._injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
       return;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   for(_GLF_struct_158 _GLF_struct_replacement_158 = _GLF_struct_158(_GLF_struct_154(_GLF_struct_153(mat2x3(1.0), ivec2(1)), uvec4(1u)), _GLF_struct_156(_GLF_struct_155(mat4(1.0), mat2(1.0), ivec2(1), mat2(1.0), mat2x3(1.0), 1u), mat3x4(1.0), mat4(1.0), mat3x4(1.0)), _GLF_struct_157(mat2(1.0), 0, uvec2(1u), ivec4(1))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_158._f2._injected_loop_counter < 1); _GLF_struct_replacement_158._f2._injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), true && (_GLF_IDENTITY(true, (true) && true)))))
            {
             return;
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
    }
   return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           return;
          }
        }
      }
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
