#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))) || false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), bool(bool((false)))))))))))) || _GLF_IDENTITY(false, false || (false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ! (! ((false))))))) || false), (_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ! _GLF_IDENTITY((! ((false))), ((! ((false)))) || false))))) || false)) && true)))) && true, ((_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (! ((false) || false))))) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (! (true)))), bool(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, (true) || false), false, true, false))), ! (! (true)))), false, false)))))) && true))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0))), min(clamp(0.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0))), clamp(0.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)))))), injectionSwitch.x)) | 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (false)), false, true))), ! (! (_GLF_IDENTITY(false, false || (false))))))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          break;
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), (injectionSwitch.x > injectionSwitch.y)))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
          return;
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))));
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 ^ 0) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (3)))), int(3)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         do
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      return;
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x < injectionSwitch.y)))) && true))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))))).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(173.308), _GLF_FUZZED(float(true))), bvec2(false, false))).y))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
        return;
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0))) > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.4), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.9)), bvec2(true, false))).x, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.4), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.9)), bvec2(true, false))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.4), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.9)), bvec2(true, false))).x)) > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(3.4, float(_GLF_IDENTITY(vec3(3.4, 1.0, 1.0), (vec3(_GLF_IDENTITY(3.4, (_GLF_IDENTITY(3.4, min(3.4, 3.4))) / 1.0), 1.0, 1.0)) - vec3(0.0, 0.0, 0.0))))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.9)), bvec2(true, false))).x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.4), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.9)), bvec2(true, false))).x > injectionSwitch.y, true, true, true))))))), bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false))))), true && (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false))))))), false, true, true)))), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))))).y, float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))), float(mat2x4(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))) : _GLF_FUZZED(-6.3))), 1.0, 1.0, 1.0, 1.0, 0.0))))), _GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))), (! (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))) && true)), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))), (! (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))) && true))) && true)), (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, abs(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 0.0, 1.0, 0.0, 1.0)), vec2(_GLF_IDENTITY(vec3(vec2(mat2x4(injectionSwitch, abs(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 0.0, 1.0, 0.0, 1.0)), 0.0), (vec3(vec2(mat2x4(injectionSwitch, abs(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 0.0, 1.0, 0.0, 1.0)), 0.0)) / vec3(1.0, 1.0, 1.0))))))).x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) * vec2(1.0, 1.0)), injectionSwitch, injectionSwitch)).y, true && _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y)) || false))))))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, false))))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))), false || (bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), clamp((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), (_GLF_IDENTITY(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch) - vec2(0.0, 0.0))), (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))).x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), clamp((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), (_GLF_IDENTITY(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch) - vec2(0.0, 0.0))), (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))).x > injectionSwitch.y, true), bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), clamp((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), (_GLF_IDENTITY(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch) - vec2(0.0, 0.0))), (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))).x > injectionSwitch.y, true)))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) ? _GLF_FUZZED(uvec3(87923u, 82726u, 11187u)) : gl_WorkGroupSize)).x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
      {
       for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec3(! (_GLF_DEAD(false)), true, false))))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), (! (! (_GLF_DEAD(false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_DEAD(false)) && true))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
              return;
             return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               break;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((! (false)), ((! (false))) || false), false)), (bool(bvec2((! (false)), false))) && true)))))
              break;
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), (bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))) && true)) || false)));
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), min(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), sqrt(0.0) + (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), ((_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))) - 0.0) - 0.0), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) - 0.0, ((injectionSwitch.y) - 0.0) / 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.y) - 0.0, float(vec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))) - _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0, 0.0, 0.0, round(length(normalize(1.0))), 0.0)), mix(float(_GLF_FUZZED(-8.8)), float(float(mat3(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0, 0.0, 0.0, round(length(normalize(1.0))), 0.0))), bool(true)))), _GLF_IDENTITY(((injectionSwitch.y) - 0.0), 1.0 * (((injectionSwitch.y) - 0.0))) / 1.0), 1.0, 1.0, 0.0))), (_GLF_IDENTITY((injectionSwitch.y) - 0.0, float(vec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))) - _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0), mix(float(_GLF_FUZZED(57.69)), float((0.0)), bool(true))) - 0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0, 0.0, 0.0, round(length(normalize(1.0))), 0.0)), mix(float(_GLF_FUZZED(-8.8)), float(float(mat3(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0, 0.0, 0.0, round(length(normalize(1.0))), 0.0))), bool(true)))), _GLF_IDENTITY(((injectionSwitch.y) - 0.0), 1.0 * (((injectionSwitch.y) - 0.0))) / _GLF_IDENTITY(1.0, (1.0) + 0.0)), 1.0, 1.0, 0.0)))) - 0.0))))));
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), true)))))
            continue;
          }
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, false || (_injected_loop_counter != 1))); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_injected_loop_counter ++), (false ? _GLF_FUZZED(int(-3788.2196)) : (_injected_loop_counter ++))) >> 0), (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0)) + 0)) * 1), (_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_injected_loop_counter ++), (false ? _GLF_FUZZED(int(-3788.2196)) : (_injected_loop_counter ++))) >> 0), (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0)) + 0)) * 1)) >> (0 & -78697)))
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec4(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))) || false)))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)))))
      continue;
     return;
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(atomicCompSwap(virtual_gid, _GLF_IDENTITY(subgroup_id, ~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (1u ^ 1u))))))) | (subgroup_id))), (~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))) | (subgroup_id)))) | 0u)), clamp((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) | (1u ^ 1u), ((subgroup_id) | (1u ^ 1u)) | 0u))))))) | (subgroup_id))), (~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))) | (subgroup_id)))) | 0u)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (1u ^ 1u))), max(min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (1u ^ 1u))), _GLF_IDENTITY(min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (1u ^ 1u))), (min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (1u ^ 1u)))) - 0u))))))) | (subgroup_id))), (~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * _GLF_IDENTITY((subgroup_id), uint(uvec2((subgroup_id), 0u))))) | (subgroup_id)))) | 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (1u ^ 1u))))))) | (subgroup_id))), (~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))) | (subgroup_id)))) | 0u), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (1u ^ 1u))))))) | (subgroup_id))), (~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))) | (subgroup_id)))) | 0u), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (1u ^ 1u))))))) | (subgroup_id))), (~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))) | (subgroup_id)))) | 0u), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (1u ^ 1u))))))) | (subgroup_id))), (~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))) | (subgroup_id)))) | 0u)))))), 0u | (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (1u ^ 1u))))))) | (subgroup_id))), (~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))) | (subgroup_id)))) | 0u)), clamp((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 1u * (_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (1u ^ 1u)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 1u * (_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (1u ^ 1u)))))), min(_GLF_IDENTITY(subgroup_id, 1u * (_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (1u ^ 1u)))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 1u * (_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (1u ^ 1u)))))), (_GLF_IDENTITY(subgroup_id, 1u * (_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (1u ^ 1u))))))) * 1u))), _GLF_IDENTITY(subgroup_id, 1u * (_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (1u ^ 1u))))))))) | (subgroup_id))), (~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))) | (subgroup_id)))) | 0u)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 1u * (_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (1u ^ 1u))))))) | (subgroup_id), clamp((_GLF_IDENTITY(subgroup_id, 1u * (_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (1u ^ 1u))))))) | (subgroup_id), (_GLF_IDENTITY(subgroup_id, 1u * (_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (1u ^ 1u))))))) | (subgroup_id), (_GLF_IDENTITY(subgroup_id, 1u * (_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (1u ^ 1u))))))) | (subgroup_id))))), (~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))) | (subgroup_id)))) | 0u)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (1u ^ 1u))))))) | (subgroup_id))), (~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))) | (subgroup_id)))) | 0u))))))), subgroup_id))))) | _GLF_IDENTITY((subgroup_id), (_GLF_IDENTITY((subgroup_id), ((subgroup_id)) | ((subgroup_id)))) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_id))), (_GLF_IDENTITY((subgroup_id), (true ? (subgroup_id) : _GLF_FUZZED(workgroup_size)))) << 0u))), _GLF_IDENTITY(~ (~ ((_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(atomicCompSwap(virtual_gid, _GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(subgroup_local_id)))) | (subgroup_id)), (false ? _GLF_FUZZED(num_workgroup) : subgroup_id)), (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))) | (subgroup_id))), (~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))) | (subgroup_id)))) | 0u))), subgroup_id))))) | (_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id))))), (_GLF_IDENTITY(~ (~ ((_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(atomicCompSwap(virtual_gid, _GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), uint(uint(_GLF_FUZZED(num_workgroup)))) : subgroup_id)), (_GLF_IDENTITY(subgroup_id, 1u * _GLF_IDENTITY((subgroup_id), (_GLF_IDENTITY((subgroup_id), ((subgroup_id)) | ((subgroup_id)))) + 0u))) | (subgroup_id))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))) | (subgroup_id)), (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))) | (subgroup_id))) >> 0u))) | 0u))), subgroup_id))))) | (subgroup_id))), (_GLF_IDENTITY(false ? _GLF_FUZZED(atomicAdd(num_workgroup, workgroup_id)) : ~ (~ ((_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(true, ! (! (true))) ? subgroup_id : _GLF_FUZZED(atomicCompSwap(virtual_gid, _GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_id)), (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))) | (subgroup_id))), (~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))) | (subgroup_id)))) | 0u))), subgroup_id))))) | (subgroup_id))), (_GLF_IDENTITY(false ? _GLF_FUZZED(atomicAdd(num_workgroup, workgroup_id)) : ~ (~ ((_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(true, ! (! (true))) ? subgroup_id : _GLF_FUZZED(atomicCompSwap(virtual_gid, _GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_id)), (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))) | (subgroup_id))), (~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))) | (subgroup_id)))) | 0u))), subgroup_id))))) | (subgroup_id))), ~ (~ (_GLF_IDENTITY(false ? _GLF_FUZZED(atomicAdd(num_workgroup, workgroup_id)) : ~ (~ ((_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(true, ! (! (true))) ? subgroup_id : _GLF_FUZZED(atomicCompSwap(virtual_gid, _GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_id)), (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))) | (subgroup_id))), (~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))) | (subgroup_id)))) | 0u))), subgroup_id))))) | (subgroup_id))), ~ (~ (false ? _GLF_FUZZED(atomicAdd(num_workgroup, workgroup_id)) : ~ (~ ((_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(true, ! (! (true))) ? subgroup_id : _GLF_FUZZED(atomicCompSwap(virtual_gid, _GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_id)), (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))) | (subgroup_id))), (~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))) | (subgroup_id)))) | 0u))), subgroup_id))))) | (subgroup_id)))))))))) ^ 0u)))) - (1u ^ 1u)))) * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)) : _GLF_FUZZED(workgroup_size))) + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (true ? _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size)) : _GLF_FUZZED(subgroup_id)))), _GLF_IDENTITY((false ? _GLF_FUZZED(93989u) : (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((true ? _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (subgroup_local_id + 1), 0u | (_GLF_IDENTITY(~ (subgroup_local_id + 1), ~ (~ (~ (subgroup_local_id + 1))))))))) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size)) : _GLF_FUZZED(subgroup_id)), ((true ? _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (subgroup_local_id + 1), 0u | (_GLF_IDENTITY(~ (subgroup_local_id + 1), ~ (~ (~ (subgroup_local_id + 1))))))))) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size)) : _GLF_FUZZED(subgroup_id))) ^ 0u)))), clamp((false ? _GLF_FUZZED(93989u) : (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((true ? _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (subgroup_local_id + 1), 0u | (_GLF_IDENTITY(~ (subgroup_local_id + 1), ~ (~ (~ (subgroup_local_id + 1))))))))) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size)) : _GLF_FUZZED(subgroup_id)), ((true ? _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (subgroup_local_id + 1), 0u | (_GLF_IDENTITY(~ (subgroup_local_id + 1), ~ (~ (~ (subgroup_local_id + 1))))))))) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size)) : _GLF_FUZZED(subgroup_id))) ^ 0u)))), (false ? _GLF_FUZZED(93989u) : (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((true ? _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (subgroup_local_id + 1), 0u | (_GLF_IDENTITY(~ (subgroup_local_id + 1), ~ (~ (~ (subgroup_local_id + 1))))))))) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size)) : _GLF_FUZZED(subgroup_id)), ((true ? _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (subgroup_local_id + 1), 0u | (_GLF_IDENTITY(~ (subgroup_local_id + 1), ~ (~ (~ (subgroup_local_id + 1))))))))) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size)) : _GLF_FUZZED(subgroup_id))) ^ 0u)))), (false ? _GLF_FUZZED(93989u) : (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((true ? _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (subgroup_local_id + 1), 0u | (_GLF_IDENTITY(~ (subgroup_local_id + 1), ~ (~ (~ (subgroup_local_id + 1))))))))) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size)) : _GLF_FUZZED(subgroup_id)), ((true ? _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (subgroup_local_id + 1), 0u | (_GLF_IDENTITY(~ (subgroup_local_id + 1), ~ (~ (~ (subgroup_local_id + 1))))))))) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size)) : _GLF_FUZZED(subgroup_id))) ^ 0u)))))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))) && true)))), false), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))
  return;
 uint read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (4) | (4)), 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), (uint(1)) >> 0u), _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (4) | 0), 4, _GLF_IDENTITY(4, 0 ^ (4)))), 64, 4);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(-33503) : int(0)))))); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         for(int _injected_loop_counter = (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, ~ (~ (0))))), 0, 0)) >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(8, _GLF_IDENTITY(max(8, 8), (true ? max(8, 8) : _GLF_FUZZED(-93688)))), (_GLF_IDENTITY(8, (8) | (8))) << 0)), max(int(8), int(8))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (4) << 0)), _GLF_IDENTITY(_GLF_IDENTITY(int(int(~ (4))), min(int(int(~ (4))), _GLF_IDENTITY(int(int(~ (4))), (true ? int(int(~ (4))) : _GLF_FUZZED((~ _injected_loop_counter)))))), (int(int(~ (4)))) | 0)))))), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ _GLF_IDENTITY((4), clamp((4), _GLF_IDENTITY((4), clamp((4), (4), (4))), (4))))), (int(int(~ (4)))) | 0)))))), clamp(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0)))), (_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), _GLF_IDENTITY((int(int(~ (4)))) | 0, (_GLF_IDENTITY((int(int(~ (4)))) | 0, ((int(int(~ (4)))) | 0) / 1)) | ((int(int(~ (4)))) | 0))))))) - 0))), _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (_GLF_IDENTITY(4, int(int(4)))))), (int(int(~ (4)))) | 0))), (~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0)))) | (~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0)))))) - 0)) >> (0 >> _GLF_IDENTITY(int(2), int(2)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (_GLF_IDENTITY(4, int(int(4)))))), (int(int(~ (4)))) | 0))), (~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0)))) | (~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0)))))) - 0)) >> (0 >> _GLF_IDENTITY(int(2), int(2)))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (_GLF_IDENTITY(4, int(int(4)))))), (int(int(~ (4)))) | 0))), (~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0)))) | (~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0)))))) - 0)) >> (0 >> _GLF_IDENTITY(int(2), int(2)))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (_GLF_IDENTITY(4, int(int(4)))))), (int(int(~ (4)))) | 0))), (~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0)))) | (~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0)))))) - 0)) >> (0 >> _GLF_IDENTITY(int(2), int(2)))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (_GLF_IDENTITY(4, int(int(4)))))), (int(int(~ (4)))) | 0))), (~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0)))) | (~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0)))))) - 0)) >> (0 >> _GLF_IDENTITY(int(2), int(2)))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (_GLF_IDENTITY(4, int(int(4)))))), (int(int(~ (4)))) | 0))), (~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0)))) | (~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0)))))) - 0)) >> (0 >> _GLF_IDENTITY(int(2), int(2))))))))), _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(_GLF_IDENTITY(int(~ (_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (4) + 0), _GLF_IDENTITY(4, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(4, max(4, 4)))), _GLF_IDENTITY(4, ~ (~ (4))))))), 0 ^ (int(~ (_GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(4, max(4, 4)))), _GLF_IDENTITY(4, ~ (~ (4))))))))))) | 0)))))))), 1, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ _GLF_IDENTITY((4), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((4), _GLF_IDENTITY(int(ivec4((4), 0, 1, 0)), 0 | (int(ivec4((4), 0, 1, 0))))))))), (int(int(~ (4)))) | 0)))), min(_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0)))), (_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0)), clamp(_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0)), _GLF_IDENTITY(_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0)), 0 ^ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0)))), _GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0))))))) - 0), _GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0)))))))), (_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) / 1), ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), _GLF_IDENTITY((int(int(~ (4)))) | 0, 1 * ((int(int(~ (4)))) | 0)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0))), 0 | (~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0)))))), (_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0))))) - 0), _GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0))))))))) >> (33245 & 0)), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0)))))), clamp(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, int(ivec4(4, _GLF_IDENTITY(0, max(0, 0)), 1, 0)))), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ _GLF_IDENTITY((4), ((4)) | ((4)))))) | 0)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(_injected_loop_counter) : int(4))), int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), _GLF_IDENTITY((int(int(~ (_GLF_IDENTITY(4, (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))) ? 4 : _GLF_FUZZED(_GLF_IDENTITY(-15328, (_GLF_IDENTITY(-15328, clamp(_GLF_IDENTITY(-15328, (-15328) | 0), -15328, -15328))) - 0)))))))) | _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))))) ^ 0), (true ? _GLF_IDENTITY((int(int(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), ~ (~ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), 0 ^ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))))), ~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))))), max((int(int(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), ~ (~ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), 0 ^ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))))), ~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))))), _GLF_IDENTITY((int(int(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), ~ (~ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), 0 ^ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))))), ~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))))), min((int(int(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), ~ (~ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), 0 ^ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))))), ~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))))), (int(int(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), ~ (~ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), 0 ^ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))))), ~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))))))))) | 0 : _GLF_FUZZED(_injected_loop_counter))))))))), _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(_GLF_IDENTITY(int(~ (4)), max(int(~ (4)), _GLF_IDENTITY(int(~ (4)), 0 ^ (int(~ (4))))))), (int(int(~ (4)))) | 0)))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(_GLF_IDENTITY(int(~ (4)), max(int(~ (4)), _GLF_IDENTITY(int(~ (4)), 0 ^ (int(~ (4))))))), (int(int(~ (4)))) | 0)))), (_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(_GLF_IDENTITY(int(~ (4)), max(int(~ (4)), _GLF_IDENTITY(int(~ (4)), 0 ^ (int(~ (4))))))), (int(int(~ (4)))) | 0))))) ^ 0))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0)))))), clamp(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, int(ivec4(4, _GLF_IDENTITY(0, max(0, 0)), 1, 0)))), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ _GLF_IDENTITY((4), ((4)) | ((4)))))) | 0)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(_injected_loop_counter) : int(4))), int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), _GLF_IDENTITY((int(int(~ (_GLF_IDENTITY(4, (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))) ? 4 : _GLF_FUZZED(_GLF_IDENTITY(-15328, (_GLF_IDENTITY(-15328, clamp(_GLF_IDENTITY(-15328, (-15328) | 0), -15328, -15328))) - 0)))))))) | _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))))) ^ 0), (true ? _GLF_IDENTITY((int(int(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), ~ (~ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), 0 ^ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))))), ~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))))), max((int(int(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), ~ (~ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), 0 ^ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))))), ~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))))), _GLF_IDENTITY((int(int(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), ~ (~ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), 0 ^ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))))), ~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))))), min((int(int(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), ~ (~ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), 0 ^ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))))), ~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))))), (int(int(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), ~ (~ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), 0 ^ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))))), ~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))))))))) | 0 : _GLF_FUZZED(_injected_loop_counter))))))))), _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(_GLF_IDENTITY(int(~ (4)), max(int(~ (4)), _GLF_IDENTITY(int(~ (4)), 0 ^ (int(~ (4))))))), (int(int(~ (4)))) | 0)))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(_GLF_IDENTITY(int(~ (4)), max(int(~ (4)), _GLF_IDENTITY(int(~ (4)), 0 ^ (int(~ (4))))))), (int(int(~ (4)))) | 0)))), (_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(_GLF_IDENTITY(int(~ (4)), max(int(~ (4)), _GLF_IDENTITY(int(~ (4)), 0 ^ (int(~ (4))))))), (int(int(~ (4)))) | 0))))) ^ 0))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0)))))), clamp(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, int(ivec4(4, _GLF_IDENTITY(0, max(0, 0)), 1, 0)))), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ _GLF_IDENTITY((4), ((4)) | ((4)))))) | 0)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(_injected_loop_counter) : int(4))), int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), _GLF_IDENTITY((int(int(~ (_GLF_IDENTITY(4, (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))) ? 4 : _GLF_FUZZED(_GLF_IDENTITY(-15328, (_GLF_IDENTITY(-15328, clamp(_GLF_IDENTITY(-15328, (-15328) | 0), -15328, -15328))) - 0)))))))) | _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))))) ^ 0), (true ? _GLF_IDENTITY((int(int(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), ~ (~ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), 0 ^ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))))), ~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))))), max((int(int(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), ~ (~ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), 0 ^ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))))), ~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))))), _GLF_IDENTITY((int(int(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), ~ (~ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), 0 ^ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))))), ~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))))), min((int(int(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), ~ (~ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), 0 ^ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))))), ~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))))), (int(int(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), ~ (~ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), 0 ^ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))))), ~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))))))))) | 0 : _GLF_FUZZED(_injected_loop_counter))))))))), _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(_GLF_IDENTITY(int(~ (4)), max(int(~ (4)), _GLF_IDENTITY(int(~ (4)), 0 ^ (int(~ (4))))))), (int(int(~ (4)))) | 0)))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(_GLF_IDENTITY(int(~ (4)), max(int(~ (4)), _GLF_IDENTITY(int(~ (4)), 0 ^ (int(~ (4))))))), (int(int(~ (4)))) | 0)))), (_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(_GLF_IDENTITY(int(~ (4)), max(int(~ (4)), _GLF_IDENTITY(int(~ (4)), 0 ^ (int(~ (4))))))), (int(int(~ (4)))) | 0))))) ^ 0))))))), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0)))))), clamp(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, int(ivec4(4, _GLF_IDENTITY(0, max(0, 0)), 1, 0)))), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ _GLF_IDENTITY((4), ((4)) | ((4)))))) | 0)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(_injected_loop_counter) : int(4))), int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), _GLF_IDENTITY((int(int(~ (_GLF_IDENTITY(4, (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))) ? 4 : _GLF_FUZZED(_GLF_IDENTITY(-15328, (_GLF_IDENTITY(-15328, clamp(_GLF_IDENTITY(-15328, (-15328) | 0), -15328, -15328))) - 0)))))))) | _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))))) ^ 0), (true ? _GLF_IDENTITY((int(int(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), ~ (~ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), 0 ^ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))))), ~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))))), max((int(int(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), ~ (~ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), 0 ^ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))))), ~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))))), _GLF_IDENTITY((int(int(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), ~ (~ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), 0 ^ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))))), ~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))))), min((int(int(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), ~ (~ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), 0 ^ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))))), ~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))))), (int(int(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), ~ (~ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), 0 ^ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))))), ~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))))))))) | 0 : _GLF_FUZZED(_injected_loop_counter))))))))), _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(_GLF_IDENTITY(int(~ (4)), max(int(~ (4)), _GLF_IDENTITY(int(~ (4)), 0 ^ (int(~ (4))))))), (int(int(~ (4)))) | 0)))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(_GLF_IDENTITY(int(~ (4)), max(int(~ (4)), _GLF_IDENTITY(int(~ (4)), 0 ^ (int(~ (4))))))), (int(int(~ (4)))) | 0)))), (_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(_GLF_IDENTITY(int(~ (4)), max(int(~ (4)), _GLF_IDENTITY(int(~ (4)), 0 ^ (int(~ (4))))))), (int(int(~ (4)))) | 0))))) ^ 0))))))))))), 1, 1)), (int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), (int(int(~ (4)))) | 0)))))), clamp(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | 0)) >> 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, int(ivec4(4, _GLF_IDENTITY(0, max(0, 0)), 1, 0)))), _GLF_IDENTITY(int(int(~ _GLF_IDENTITY((4), ((4)) - 0))), (int(int(~ _GLF_IDENTITY((4), ((4)) | ((4)))))) | 0)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(_injected_loop_counter) : int(4))), int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(int(~ (4))), _GLF_IDENTITY((int(int(~ (_GLF_IDENTITY(4, (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))) ? 4 : _GLF_FUZZED(_GLF_IDENTITY(-15328, (_GLF_IDENTITY(-15328, clamp(_GLF_IDENTITY(-15328, (-15328) | 0), -15328, -15328))) - 0)))))))) | _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, int(ivec4(0, 0, 1, 0)))))) ^ 0), (true ? _GLF_IDENTITY((int(int(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(_GLF_IDENTITY(-15328, ~ (~ (-15328))))))), ~ (~ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), 0 ^ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))))), ~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))))), max((int(int(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), ~ (~ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), 0 ^ (~ (_GLF_IDENTITY(4, (_GLF_IDENTITY(true, ! (! (true))) ? 4 : _GLF_FUZZED(-15328)))))), ~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))))), _GLF_IDENTITY((int(int(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), ~ (~ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, 0 + (4)) : _GLF_FUZZED(-15328)))), 0 ^ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))))), ~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))))), min((int(int(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(_GLF_IDENTITY(-15328, clamp(-15328, _GLF_IDENTITY(-15328, (-15328) ^ 0), _GLF_IDENTITY(-15328, (-15328) | (-15328)))))))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), ~ (~ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_IDENTITY(_GLF_FUZZED(-15328), (_GLF_IDENTITY(_GLF_FUZZED(-15328), 0 | (_GLF_FUZZED(-15328)))) << 0))))))), _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), 0 ^ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), 0 ^ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), 0 ^ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), 0 ^ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), 0 ^ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))))))), _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), 0 ^ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))))), int(ivec2(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), 0 ^ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))))), 0))), _GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), 0 ^ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))))))))), ~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))))), (int(int(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), ~ (~ (~ (_GLF_IDENTITY(4, _GLF_IDENTITY((true ? 4 : _GLF_FUZZED(-15328)), ~ (~ ((true ? 4 : _GLF_FUZZED(-15328)))))))))), _GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))), ((_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))) << 0), 0 ^ (~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328)))))), ~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-15328))))))))))))) | 0 : _GLF_FUZZED(_injected_loop_counter))))))))), _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(_GLF_IDENTITY(int(~ (4)), max(int(~ (4)), _GLF_IDENTITY(int(~ (4)), 0 ^ _GLF_IDENTITY((int(~ (4))), ~ (~ ((int(~ (4)))))))))), (int(int(~ (4)))) | 0)))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(_GLF_IDENTITY(int(~ (4)), max(int(~ (4)), _GLF_IDENTITY(int(~ (4)), 0 ^ (int(~ (4))))))), (int(int(~ (4)))) | 0)))), (_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(_GLF_IDENTITY(int(~ (4)), max(int(~ _GLF_IDENTITY((4), 0 + ((4)))), _GLF_IDENTITY(int(~ (4)), 0 ^ (int(~ (4))))))), (int(int(~ (4)))) | 0))))) ^ 0))))))), 1, 1))) ^ 0))) / (1 & 1))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ (~ (4)))), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), int(5))), ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) >> 0), int(5)))) << 0) ^ (int(4)), ((0 << _GLF_IDENTITY(int(5), int(5))) ^ (int(4))) + 0)), (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(_GLF_IDENTITY(4, int(int(_GLF_IDENTITY(4, (4) | (4)))))), (int(4)) | (int(4)))))) | (int(4))), _GLF_IDENTITY(0, (0) - 0), 1)))))); _injected_loop_counter ++)
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
              {
              }
             else
              {
               return;
              }
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) * 1.0)))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          break;
         break;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) && true)))
        break;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
        break;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) * 1.0) > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) * 1.0) > injectionSwitch.y))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, true)))))))))), false || (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (injectionSwitch.x) * 1.0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (injectionSwitch.x) * 1.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (injectionSwitch.x) * 1.0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (injectionSwitch.x) * 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (injectionSwitch.x) * 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (injectionSwitch.x) * 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (injectionSwitch.x) * 1.0))) > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(float(injectionSwitch.y), min(float(injectionSwitch.y), float(injectionSwitch.y))))))))))))))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
          continue;
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
         continue;
        }
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_TRUE(true)), bool(bvec4(bool(_GLF_WRAPPED_IF_TRUE(true)), true, true, true)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_TRUE(true)), bool(bvec4(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_TRUE(true)), ! (! (bool(_GLF_WRAPPED_IF_TRUE(true))))), true, true, true))))), (! (bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_TRUE(true)), bool(bvec4(bool(_GLF_WRAPPED_IF_TRUE(true)), true, true, true)))))) || false)))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), (! (false)) || false)) && true))))))))
                break;
               return;
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), bool(_GLF_IDENTITY(bool(bool(bvec4(false, false, _GLF_IDENTITY(true, ! (! (true))), true))), bool(bvec2(bool(bool(bvec4(false, false, _GLF_IDENTITY(true, ! (! (true))), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(67182) : int(3))))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         do
          {
           return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)))))
              return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        break;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(true && (_GLF_WRAPPED_LOOP(false)), (true && (_GLF_WRAPPED_LOOP(false))) || false)));
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(max(1, _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, ~ (~ (1)))))), (max(1, _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, ~ (~ (1))))))) << 0)), (subgroup_local_id + 1) << 0u) < subgroup_size)
      {
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((1 ^ 1) | 0), (_GLF_IDENTITY(_injected_loop_counter != ((1 ^ 1) | 0), (_injected_loop_counter != ((1 ^ 1) | 0)) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))); _GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED((-76977 << (80326 | _injected_loop_counter))) : _injected_loop_counter --)))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(_GLF_IDENTITY(float(_GLF_FUZZED(vec3(-8.9, 3194.6584, 82.71).y)), float(mat2x3(float(_GLF_FUZZED(vec3(-8.9, 3194.6584, 82.71).y)), 0.0, 1.0, 0.0, 0.0, 1.0))), float(injectionSwitch.y), bool(true)), max(mix(float(_GLF_FUZZED(vec3(-8.9, 3194.6584, 82.71).y)), float(injectionSwitch.y), bool(true)), _GLF_IDENTITY(mix(_GLF_IDENTITY(float(_GLF_FUZZED(vec3(-8.9, 3194.6584, 82.71).y)), cos(0.0) * (float(_GLF_FUZZED(vec3(-8.9, 3194.6584, 82.71).y)))), float(injectionSwitch.y), bool(true)), clamp(mix(float(_GLF_FUZZED(vec3(-8.9, 3194.6584, 82.71).y)), float(injectionSwitch.y), bool(true)), mix(float(_GLF_FUZZED(vec3(-8.9, 3194.6584, 82.71).y)), float(injectionSwitch.y), bool(true)), _GLF_IDENTITY(mix(float(_GLF_FUZZED(vec3(-8.9, 3194.6584, 82.71).y)), float(injectionSwitch.y), bool(true)), float(vec2(mix(float(_GLF_FUZZED(vec3(-8.9, 3194.6584, _GLF_IDENTITY(82.71, float(mat4(_GLF_IDENTITY(82.71, (82.71) * 1.0), 1.0, 1.0, 0.0, 0.0, tan(0.0), sin(0.0), 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, determinant(mat4(abs(1.0), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, abs(0.0), 0.0, sqrt(0.0), 1.0, 0.0, tan(0.0), determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), 0.0, 1.0)), 1.0, 1.0)))).y)), float(injectionSwitch.y), bool(true)), 0.0)))))))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(vec3(-8.9, 3194.6584, 82.71).y)), float(injectionSwitch.y), bool(true)))) / 1.0)) * 1.0)))))
              return;
            }
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                break;
               continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                    }
                   if(_GLF_DEAD(false))
                    break;
                  }
                 return;
                }
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             else
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))); _injected_loop_counter ++)
                    {
                     atomicStore(checker[virtual_gid], read, 4, 64, 4);
                    }
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), (bool(bvec4(false, false, false, false))) && true)), bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), false, false, true)))))
                    return;
                   continue;
                  }
                 continue;
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 continue;
                }
               continue;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), true && (bool(false)))), bool(bvec3(bool(bool(false)), true, false))))))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           subgroupAll(false);
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            break;
          }
        }
       else
        {
        }
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        break;
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), bool(bvec2(! (_GLF_WRAPPED_IF_FALSE(false)), true))))))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))), ! (! (bool(_GLF_DEAD(false))))))))
            return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           break;
           if(_GLF_DEAD(false))
            break;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, _GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false))), (bool(bvec4(false, true, true, _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(3.2, -98.47)) : injectionSwitch)), 0.0, _GLF_IDENTITY(0.0, float(mat3x4(0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0))), exp(abs(0.0)), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-885.406))), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))))).x > injectionSwitch.y)))))))) || false))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           continue;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), true && ((! (false)))))))
              break;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
              break;
            }
           atomicStore(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) - 0u)], read, 4, 64, 4);
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec3(0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0), (false ? _GLF_FUZZED(vec3(500.511, -10.00, 87.24)) : _GLF_IDENTITY(vec3(0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0), (vec3(0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0)) * mat3(1.0)))))), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (0 ^ int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) >> 0)), int(5))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) << 0))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                break;
               return;
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec2(bvec2(_GLF_DEAD(false), false)))), bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false))))), (_GLF_DEAD(false)) && true))
            break;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(false, (false) || false), false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, _GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, false || (false))), false), true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec4(bvec3(false, _GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false) || false, ((false) || false) || false)), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY((false) || false, ((false) || false) || false)), true, true)), true && (bool(bvec3(! (_GLF_IDENTITY((false) || false, ((false) || false) || false)), true, true)))))))), false), true)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec4(bvec3(false, _GLF_IDENTITY(false, (false) || false), false), true)))))))))))))
        return;
       for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 & 1) | 0)); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) | 0), 0))); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                continue;
               do
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))
                          {
                           return;
                          }
                         else
                          {
                          }
                        }
                       if(_GLF_DEAD(false))
                        return;
                      }
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(false));
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                break;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       do
        {
         do
          {
           subgroupAll(true);
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))))))))))
            continue;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          break;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), false || ((false))))))
              return;
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))))));
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false)))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
              continue;
             continue;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
           break;
           if(_GLF_DEAD(false))
            break;
          }
        }
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, false, false))))))))), bool(bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, false))), bvec3(bvec3(bvec3(bvec3(bvec3(false, false, false))))))))))))))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))))), false, true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))))), false, true))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))))), false, true)))), (! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))))), false, true))))) || false)), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))), bvec3(bvec3(bvec3(false, true, false)))))), false, true)))), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec3(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))))), false, true))))) || false))) || false)))))));
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(! (false), (! (false)) || false), false)))))));
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, (5) + 0)))), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
