#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_16 {
 ivec4 _f0;
} ;

struct _GLF_struct_15 {
 bool _f0;
 uint _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_14 {
 mat3x2 _f0;
 bvec4 _f1;
 uint _f2;
 ivec2 _f3;
 mat3 _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_17 {
 _GLF_struct_14 _f0;
 _GLF_struct_15 _f1;
 mat4x3 _f2;
 _GLF_struct_16 _f3;
 uint _f4;
} ;

struct _GLF_struct_12 {
 mat4 _f0;
} ;

struct _GLF_struct_11 {
 mat4 _f0;
 ivec2 _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_13 {
 uvec4 _f0;
 _GLF_struct_11 _f1;
 _GLF_struct_12 _f2;
 uint virtual_gid;
} ;

struct _GLF_struct_18 {
 _GLF_struct_13 _f0;
 ivec2 _f1;
 _GLF_struct_17 _f2;
 mat4x3 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_8 {
 uvec3 _f0;
 vec2 _f1;
 uvec4 _f2;
 int _f3;
 ivec4 _f4;
 uvec2 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_7 {
 ivec2 _f0;
 mat3x4 _f1;
 mat2x4 _f2;
 ivec2 _f3;
 vec3 _f4;
} ;

struct _GLF_struct_6 {
 int _f0;
 uvec4 _f1;
 mat4x2 _f2;
 vec4 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_9 {
 ivec3 _f0;
 _GLF_struct_6 _f1;
 _GLF_struct_7 _f2;
 _GLF_struct_8 _f3;
} ;

struct _GLF_struct_10 {
 _GLF_struct_9 _f0;
 uint workgroup_base;
} ;

struct _GLF_struct_3 {
 bvec3 _f0;
 mat4x3 _f1;
 vec3 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_2 {
 uvec3 _f0;
 vec3 _f1;
 mat3x4 _f2;
 vec2 _f3;
 bvec3 _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_1 {
 vec4 _f0;
 bool _f1;
 mat3x2 _f2;
} ;

struct _GLF_struct_0 {
 mat2x4 _f0;
 mat4x3 _f1;
 uvec2 _f2;
 float _f3;
} ;

struct _GLF_struct_4 {
 ivec2 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_2 _f3;
 mat2x4 _f4;
 uint next_virtual_gid;
 _GLF_struct_3 _f5;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
 uint _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) + 0)), int(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, ~ (~ (1))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (false ? _GLF_FUZZED(-96575) : _injected_loop_counter ++)))
  {
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) / 1.0), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -23278)); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) || false, bool(bvec4((_GLF_DEAD(false)) || false, false, true, false)))))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(1.6)), (false ? _GLF_FUZZED(7.7) : (true ? injectionSwitch.y : _GLF_FUZZED(1.6))))))), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(1.6))))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, length(0.0), 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, abs(1.0), sin(0.0), 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0), transpose(transpose(mat3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, length(0.0), 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, abs(1.0), _GLF_IDENTITY(sin(0.0), (sin(0.0)) / abs(1.0)), 0.0, 0.0, 0.0)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0))), round(length(_GLF_IDENTITY(normalize(vec2(1.0, 1.0)), (normalize(vec2(1.0, 1.0))) * mat2(1.0)))), 1.0)))))).y : _GLF_FUZZED(1.6))))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(injectionSwitch.y), float(_GLF_FUZZED(3.5)), bool(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((+ 9.8))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((+ 9.8))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))), true && (bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((+ 9.8))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))))))))), clamp(mix(float(injectionSwitch.y), float(_GLF_FUZZED(3.5)), bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(tanh(_GLF_IDENTITY(atanh(-912.086), mix(float(_GLF_IDENTITY(atanh(-912.086), (_GLF_IDENTITY(atanh(-912.086), (atanh(-912.086)) + 0.0)) / 1.0)), float(_GLF_FUZZED(3.4)), bool(false))))) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), _GLF_FUZZED(-6224.5807)), vec2(_GLF_FUZZED(vec4(-4.6, 1738.4876, -8.2, -33.36).s), (injectionSwitch)[1]), bvec2(false, true))).y))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)) && true)))), mix(float(injectionSwitch.y), float(_GLF_FUZZED(3.5)), bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), ((injectionSwitch.x > injectionSwitch.y)) && true)))), mix(float(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(346.993, -6.5)) : _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) - vec2(0.0, 0.0)))).y), float(_GLF_FUZZED(3.5)), bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_IDENTITY(true, bool(bvec4(true, false, true, true))))))))))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0)))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-4096.6537) : _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))) > injectionSwitch.y)), false, true)))))) && true)))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_WRAPPED_IF_TRUE(true)))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))) || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), (_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), false || (_GLF_IDENTITY(true, true && (true))))) || false)))))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), bool(bvec4(false, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y)))), false, true)))))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               else
                {
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(7.3) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))), mix(float(_GLF_FUZZED(_GLF_IDENTITY(85.22, float(mat3x2(85.22, 1.0, 0.0, sqrt(1.0), 1.0, determinant(mat4(0.0, 1.0, sqrt(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0)), dot(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), (vec3(0.0, 1.0, 0.0)) * mat3(1.0)), vec3(1.0, 0.0, 1.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_LOOP(false), true, false)), true && (bool(bvec3(_GLF_WRAPPED_LOOP(false), true, false))))));
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (false))))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                     barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), false, false, true)))))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       do
                        {
                         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), true))))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         else
                          {
                           barrier();
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                  }
                }
               else
                {
                }
              }
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-0.1)), float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), bool(true))), _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, false || (true)), false, false)), true && (bool(bvec3(_GLF_IDENTITY(true, false || (true)), false, false))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, false || (true)), false, false)), true && (bool(bvec3(_GLF_IDENTITY(true, false || (true)), false, false))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, false || (true)), false, false)), true && (bool(bvec3(_GLF_IDENTITY(true, false || (true)), false, false))))), ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) && true)) || (true)), false, false)), true && (bool(bvec3(_GLF_IDENTITY(true, false || (true)), false, false)))))))))))), bool(bvec2(true, false))), _GLF_IDENTITY((_GLF_IDENTITY(true, (true) || false)) || false, ((_GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, ! (! (true)))))) || false)) || false) && true))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       else
        {
         for(int _injected_loop_counter = (((0 ^ 1) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3))))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
          {
           do
            {
             barrier();
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), false, true, false))));
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, gl_WorkGroupSize.x));
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, ~ (~ (_GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, 0u) + (gl_WorkGroupID))))).x;
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(_GLF_struct_9(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(true, ! (! (true))) ? 1 : _GLF_FUZZED(-50802))), ~ (~ (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-687)))))))), 1), (95336 & 0) | (min(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(true, ! (! (true))) ? 1 : _GLF_FUZZED(-50802))), ~ (~ (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-687)))))))), 1))))), _GLF_struct_6(1, _GLF_IDENTITY(uvec4(1u), min(uvec4(_GLF_IDENTITY(1u, (1u) | (1u))), uvec4(1u))), mat4x2(1.0), _GLF_IDENTITY(vec4(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, float(mat4x3(1.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(float(0.0))), 0.0)), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-8.7)), bool(false)))) * 1.0), 1.0, 1.0, 0.0))), 1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)))), 1.0, 1.0))), (true ? vec4(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, float(mat4x3(1.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(float(0.0))), 0.0)), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-8.7)), bool(false)))) * 1.0), 1.0, 1.0, 0.0))), 1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)))), 1.0, 1.0))) : _GLF_FUZZED(vec4(4.8, -645.821, 8910.5060, 8.0)))), mat4(1.0)), _GLF_struct_7(ivec2(1), mat3x4(_GLF_IDENTITY(1.0, (1.0) - 0.0)), mat2x4(1.0), ivec2(1), vec3(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) * 1.0), mix(float(_GLF_IDENTITY(1.0, (1.0) * 1.0)), float(_GLF_FUZZED(868.745)), bool(false))), 1.0)))), _GLF_struct_8(uvec3(1u), vec2(1.0), uvec4(1u), 1, ivec4(1), uvec2(1u), mat4x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, float(mat3x4(1.0, 1.0, abs(0.0), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(1.0, float(mat2(1.0, 0.0, 1.0, 0.0))), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), max(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), min(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0)))), dot(vec2(0.0, 1.0), vec2(1.0, 0.0)))), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 1.0, 0.0, 0.0)))) - 0.0, mix(float(_GLF_IDENTITY((_GLF_IDENTITY(1.0, float(mat3x4(1.0, 1.0, abs(_GLF_IDENTITY(0.0, float(vec2(0.0, 1.0)))), 1.0, 1.0, _GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(mat2x4(1.0, cos(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))), 1.0)), injectionSwitch.y), 1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(_GLF_IDENTITY(0.0, (0.0) + sqrt(0.0)), 1.0), vec2(1.0, 0.0))), 1.0, 0.0, 0.0)))) - 0.0, _GLF_IDENTITY(float(mat4x2((_GLF_IDENTITY(1.0, float(mat3x4(1.0, 1.0, abs(0.0), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 1.0, 0.0, 0.0)))) - 0.0, 1.0, 1.0, sqrt(1.0), 0.0, 1.0, 0.0, 1.0)), 0.0 + (float(mat4x2((_GLF_IDENTITY(1.0, float(mat3x4(1.0, 1.0, abs(0.0), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 1.0, 0.0, 0.0)))) - 0.0, 1.0, 1.0, sqrt(1.0), 0.0, 1.0, 0.0, 1.0)))))), float(_GLF_FUZZED(vec3(75.08, -41.48, 73.91).p)), bool(false))))))), _GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) * 1u), min(workgroup_size, _GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)), workgroup_size))))), ((_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), false || (! (false))))))) ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)), _GLF_IDENTITY(workgroup_size, (workgroup_size) - (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))))))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0u)))) - 0u) * workgroup_id);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))), false, true)))) && true)))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) - _GLF_IDENTITY(0, (0) + 0)))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), max(int(4), int(4))), int(ivec2(int(4), 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               barrier();
              }
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 _GLF_struct_18 _GLF_struct_replacement_18 = _GLF_struct_18(_GLF_struct_13(uvec4(_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) | (1u))) ^ (0u >> _GLF_IDENTITY(uint(4u), uint(4u))))))), _GLF_struct_11(_GLF_IDENTITY(_GLF_IDENTITY(mat4(1.0), (false ? _GLF_FUZZED(mat4(97.65, 917.588, -5217.5482, -9.0, 5816.0028, 3518.8412, -68.69, -8.2, 57.49, -9.7, -7690.5513, 8.9, 434.914, 3.4, -378.775, 7.1)) : mat4(1.0))), (mat4(_GLF_IDENTITY(1.0, (1.0) / 1.0))) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), ivec2(1), uvec2(1u)), _GLF_struct_12(mat4(1.0)), _GLF_struct_replacement_10.workgroup_base + subgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))) | (subgroup_local_id)), ~ (~ (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))) | (subgroup_local_id)))))), ivec2(1), _GLF_struct_17(_GLF_struct_14(mat3x2(1.0), bvec4(_GLF_IDENTITY(true, ! (! (true)))), _GLF_IDENTITY(1u, (1u) - 0u), ivec2(1), _GLF_IDENTITY(_GLF_IDENTITY(mat3(1.0), transpose(transpose(mat3(1.0)))), (mat3(1.0)) / mat3(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), _GLF_IDENTITY(float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), _GLF_IDENTITY(min(float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), _GLF_IDENTITY(float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), (false ? _GLF_FUZZED(0.1) : float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0))))), _GLF_IDENTITY(max(_GLF_IDENTITY(min(float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), _GLF_IDENTITY(float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), (false ? _GLF_FUZZED(0.1) : float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0))))), mix(float(_GLF_FUZZED(-96.00)), float(_GLF_IDENTITY(min(float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), _GLF_IDENTITY(float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), (false ? _GLF_FUZZED(0.1) : float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0))))), min(min(float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), _GLF_IDENTITY(float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), (false ? _GLF_FUZZED(0.1) : float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0))))), min(float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), _GLF_IDENTITY(float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), (false ? _GLF_FUZZED(0.1) : float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0)))))))), bool(true))), _GLF_IDENTITY(min(float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), _GLF_IDENTITY(float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), (false ? _GLF_FUZZED(0.1) : float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0))))), max(min(float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), _GLF_IDENTITY(float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), (false ? _GLF_FUZZED(0.1) : float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0))))), min(float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), _GLF_IDENTITY(float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), (false ? _GLF_FUZZED(0.1) : float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0)))))))), (max(_GLF_IDENTITY(min(float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), _GLF_IDENTITY(float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), (false ? _GLF_FUZZED(0.1) : float(mat4x3(_GLF_IDENTITY(1.0, min(1.0, 1.0)), exp(0.0), 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(abs(1.0), min(abs(1.0), abs(1.0))), 0.0, 0.0, sqrt(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-4555.0754) : 1.0))) - 0.0)), 0.0, 0.0))))), mix(float(_GLF_IDENTITY(_GLF_FUZZED(-96.00), mix(float(_GLF_FUZZED(-96.00)), float(_GLF_FUZZED(-6.1)), bool(false)))), float(_GLF_IDENTITY(min(float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), _GLF_IDENTITY(float(mat4x3(1.0, exp(0.0), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-6597.1852)), float(_GLF_IDENTITY(0.0, 0.0 + (0.0))), bool(true))), 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, _GLF_IDENTITY(sqrt(1.0), clamp(_GLF_IDENTITY(sqrt(1.0), clamp(sqrt(1.0), sqrt(1.0), sqrt(1.0))), sqrt(1.0), sqrt(1.0))), 0.0, 0.0)), (false ? _GLF_FUZZED(0.1) : float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0))))), min(min(float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(661.066) : 1.0))), 0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), max(_GLF_IDENTITY(float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), min(float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0)))), _GLF_IDENTITY(float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), (true ? float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0)) : _GLF_FUZZED((-61.33 - 2172.8148)))))), (false ? _GLF_FUZZED(0.1) : float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2731.3193) : 1.0)), abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0))))), min(float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), _GLF_IDENTITY(float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), (false ? _GLF_IDENTITY(_GLF_FUZZED(0.1), (_GLF_FUZZED(0.1)) - abs(0.0)) : float(mat4x3(1.0, exp(0.0), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0)))))))), bool(true))), _GLF_IDENTITY(min(float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), _GLF_IDENTITY(float(mat4x3(1.0, exp(_GLF_IDENTITY(0.0, (0.0) / 1.0)), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), (false ? _GLF_FUZZED(0.1) : float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(_GLF_IDENTITY(1.0, min(1.0, 1.0))), 0.0, 0.0, sqrt(1.0), 0.0, 0.0))))), max(min(float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), _GLF_IDENTITY(float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), abs(1.0), 0.0, 0.0, sqrt(_GLF_IDENTITY(1.0, (1.0) / 1.0)), 0.0, 0.0)), (false ? _GLF_FUZZED(0.1) : float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0))))), min(float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0)), _GLF_IDENTITY(float(mat4x3(1.0, exp(0.0), 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(62.12)), bool(false)))) / exp(0.0)), abs(1.0), 0.0, 0.0, _GLF_IDENTITY(sqrt(1.0), (sqrt(1.0)) + 0.0), 0.0, 0.0)), (false ? _GLF_FUZZED(0.1) : float(mat4x3(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, 0.0 + (1.0)))), 1.0)), exp(0.0), 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0))))))))) + 0.0)))), 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0)), mat3x2(1.0)), _GLF_struct_15(true, 1u, mat2x3(1.0)), mat4x3(1.0), _GLF_struct_16(ivec4(1)), _GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) >> 0u))), mat4x3(1.0), _GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), true))));
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(_GLF_struct_4(ivec2(1), _GLF_struct_0(mat2x4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(_GLF_IDENTITY(-8863.7457, 0.0 + (-8863.7457))) : 1.0))), mat4x3(1.0), _GLF_IDENTITY(uvec2(1u), (_GLF_IDENTITY(uvec2(1u), (_GLF_IDENTITY(uvec2(1u), (true ? uvec2(1u) : _GLF_FUZZED(uvec2(68569u, 71361u))))) >> uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) << uvec2(0u, 0u)), 1.0), _GLF_struct_1(vec4(1.0), true, mat3x2(1.0)), _GLF_struct_2(uvec3(1u), vec3(1.0), mat3x4(1.0), vec2(1.0), bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), false))))))), bvec3(true)), mat2x4(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(_GLF_IDENTITY(-2.2, (false ? _GLF_FUZZED(4.7) : -2.2))) : 1.0)), max(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2.2) : 1.0)), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2.2) : 1.0))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, 0u | (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base)))), ~ (~ (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, 0u | (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base))))))) + subgroup_base, ~ (~ (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, _GLF_IDENTITY(0u | (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base))), 0u + (_GLF_IDENTITY(0u | (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base))), (0u | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base)), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, _GLF_IDENTITY(min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base), 0u ^ (min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base))))))) << 0u), 0u))))) + 0u)))) + subgroup_base))) + _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u, (true ? _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))), ((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1)))) ^ (uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(6u), uint(6u)))) / 1u : _GLF_FUZZED(subgroup_size))))), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))), min((subgroup_local_id + 1), (subgroup_local_id + 1))), clamp(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u)), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))), min((subgroup_local_id + 1), (subgroup_local_id + 1))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u)), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u)), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))) : _GLF_FUZZED(subgroup_local_id))), _GLF_IDENTITY(min((subgroup_local_id + 1), (subgroup_local_id + 1)), (_GLF_IDENTITY(min((subgroup_local_id + 1), (subgroup_local_id + 1)), max(min((subgroup_local_id + 1), (subgroup_local_id + 1)), min((subgroup_local_id + 1), (subgroup_local_id + 1))))) | 0u)), max(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u)), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))), min((subgroup_local_id + 1), (subgroup_local_id + 1))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u, clamp(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u, uint(uvec2((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u, 0u))), (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u, (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u)))), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))), min((subgroup_local_id + 1), (subgroup_local_id + 1))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u)), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u)), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u))))) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u)), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))))), min((subgroup_local_id + 1), (subgroup_local_id + 1))))) % subgroup_size), ((_GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), (subgroup_local_id + 1))) % subgroup_size)) + 0u), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, 0u | (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base)))), ~ (~ (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, 0u | (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base))))))) + subgroup_base, ~ (~ (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, _GLF_IDENTITY(0u | (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base))), 0u + (_GLF_IDENTITY(0u | (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base))), (0u | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base)), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, _GLF_IDENTITY(min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base), 0u ^ (min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base))))))) << 0u), 0u))))) + 0u)))) + subgroup_base))) + _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u, (true ? _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))), ((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1)))) ^ (uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(6u), uint(6u)))) / 1u : _GLF_FUZZED(subgroup_size))))), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))), min((subgroup_local_id + 1), (subgroup_local_id + 1))), clamp(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u)), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))), min((subgroup_local_id + 1), (subgroup_local_id + 1))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u)), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u)), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))) : _GLF_FUZZED(subgroup_local_id))), _GLF_IDENTITY(min((subgroup_local_id + 1), (subgroup_local_id + 1)), (_GLF_IDENTITY(min((subgroup_local_id + 1), (subgroup_local_id + 1)), max(min((subgroup_local_id + 1), (subgroup_local_id + 1)), min((subgroup_local_id + 1), (subgroup_local_id + 1))))) | 0u)), max(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u)), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))), min((subgroup_local_id + 1), (subgroup_local_id + 1))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u, clamp(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u, uint(uvec2((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u, 0u))), (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u, (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u)))), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))), min((subgroup_local_id + 1), (subgroup_local_id + 1))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u)), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u)), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u))))) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u)), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))))), min((subgroup_local_id + 1), (subgroup_local_id + 1))))) % subgroup_size), ((_GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), (subgroup_local_id + 1))) % subgroup_size)) + 0u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, 0u | (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base)))), ~ (~ (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, 0u | (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base))))))) + subgroup_base, ~ (~ (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, _GLF_IDENTITY(0u | (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base))), 0u + (_GLF_IDENTITY(0u | (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base))), (0u | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base)), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, _GLF_IDENTITY(min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base), 0u ^ (min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base))))))) << 0u), 0u))))) + 0u)))) + subgroup_base))) + _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u, (true ? _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))), ((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1)))) ^ (uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(6u), uint(6u)))) / 1u : _GLF_FUZZED(subgroup_size))))), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))), min((subgroup_local_id + 1), (subgroup_local_id + 1))), clamp(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u)), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))), min((subgroup_local_id + 1), (subgroup_local_id + 1))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u)), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u)), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))) : _GLF_FUZZED(subgroup_local_id))), _GLF_IDENTITY(min((subgroup_local_id + 1), (subgroup_local_id + 1)), (_GLF_IDENTITY(min((subgroup_local_id + 1), (subgroup_local_id + 1)), max(min((subgroup_local_id + 1), (subgroup_local_id + 1)), min((subgroup_local_id + 1), (subgroup_local_id + 1))))) | 0u)), max(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u)), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))), min((subgroup_local_id + 1), (subgroup_local_id + 1))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u, clamp(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u, uint(uvec2((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u, 0u))), (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u, (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u)))), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))), min((subgroup_local_id + 1), (subgroup_local_id + 1))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u)), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u)), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u))))) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u)), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))))), min((subgroup_local_id + 1), (subgroup_local_id + 1))))) % subgroup_size), ((_GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), (subgroup_local_id + 1))) % subgroup_size)) + 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, 0u | (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base)))), ~ (~ (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, 0u | (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base))))))) + subgroup_base, ~ (~ (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, _GLF_IDENTITY(0u | (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base))), 0u + (_GLF_IDENTITY(0u | (_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base))), (0u | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base)), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_base, _GLF_IDENTITY(min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base), 0u ^ (min(_GLF_struct_replacement_10.workgroup_base, _GLF_struct_replacement_10.workgroup_base))))))) << 0u), 0u))))) + 0u)))) + subgroup_base))) + _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u, (true ? _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))), ((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1)))) ^ (uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(6u), uint(6u)))) / 1u : _GLF_FUZZED(subgroup_size))))), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))), min((subgroup_local_id + 1), (subgroup_local_id + 1))), clamp(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u)), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))), min((subgroup_local_id + 1), (subgroup_local_id + 1))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u)), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u)), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))) : _GLF_FUZZED(subgroup_local_id))), _GLF_IDENTITY(min((subgroup_local_id + 1), (subgroup_local_id + 1)), (_GLF_IDENTITY(min((subgroup_local_id + 1), (subgroup_local_id + 1)), max(min((subgroup_local_id + 1), (subgroup_local_id + 1)), min((subgroup_local_id + 1), (subgroup_local_id + 1))))) | 0u)), max(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u)), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))), min((subgroup_local_id + 1), (subgroup_local_id + 1))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u, clamp(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u, uint(uvec2((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u, 0u))), (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u, (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u)))), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))), min((subgroup_local_id + 1), (subgroup_local_id + 1))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u)), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u)), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u))))) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) / 1u)), 1u * ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))))), min((subgroup_local_id + 1), (subgroup_local_id + 1))))) % subgroup_size), ((_GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), (subgroup_local_id + 1))) % subgroup_size)) + 0u)))))), _GLF_struct_3(bvec3(true), mat4x3(1.0), vec3(1.0), vec3(1.0))), 1u);
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = (0 & 95512); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = ((0 & 2997) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), true && ((_GLF_IDENTITY(false, ! (! (false))))))))) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y)), ! (! ((_GLF_IDENTITY(false, ! (! (false)))) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y))))))))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-543.503)), bool(false))), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(-7924.9812)), (_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(-7924.9812)), (vec2((injectionSwitch)[0], _GLF_FUZZED(-7924.9812))) / vec2(1.0, 1.0))) / vec2(1.0, 1.0)), vec2(_GLF_FUZZED(7.5), (injectionSwitch)[1]), bvec2(false, true))).y), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-543.503)), bool(false))), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(-7924.9812)), (_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(-7924.9812)), (vec2((injectionSwitch)[0], _GLF_FUZZED(-7924.9812))) / vec2(1.0, 1.0))) / vec2(1.0, 1.0)), vec2(_GLF_FUZZED(7.5), (injectionSwitch)[1]), bvec2(false, true))).y), true, true, true)), false || (bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-543.503)), bool(false))), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(-7924.9812)), (_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(-7924.9812)), (vec2((injectionSwitch)[0], _GLF_FUZZED(-7924.9812))) / vec2(1.0, 1.0))) / vec2(1.0, 1.0)), vec2(_GLF_FUZZED(7.5), (injectionSwitch)[1]), bvec2(false, true))).y), true, true, true)))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))) || false))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint read = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_18._f0.virtual_gid], 4, 64, _GLF_IDENTITY(2, (_GLF_IDENTITY(2, 0 ^ (2))) + 0)), (_GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_18._f0.virtual_gid], 4, 64, 2), max(atomicLoad(buf[_GLF_IDENTITY(_GLF_struct_replacement_18._f0.virtual_gid, min(_GLF_struct_replacement_18._f0.virtual_gid, _GLF_IDENTITY(_GLF_struct_replacement_18._f0.virtual_gid, clamp(_GLF_struct_replacement_18._f0.virtual_gid, _GLF_struct_replacement_18._f0.virtual_gid, _GLF_struct_replacement_18._f0.virtual_gid))))], _GLF_IDENTITY(4, ~ (~ (4))), 64, 2), _GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_18._f0.virtual_gid], 4, 64, _GLF_IDENTITY(2, ~ (~ (2)))), min(atomicLoad(buf[_GLF_struct_replacement_18._f0.virtual_gid], 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(2, ~ (~ (2))), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(2, 0 ^ (2)), ~ (~ (2)))))), atomicLoad(buf[_GLF_struct_replacement_18._f0.virtual_gid], 4, 64, _GLF_IDENTITY(2, ~ (~ (2))))))))) ^ 0u), (_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_18._f0.virtual_gid], 4, 64, 2), (false ? _GLF_FUZZED(subgroup_size) : atomicLoad(buf[_GLF_struct_replacement_18._f0.virtual_gid], 4, 64, 2))), _GLF_IDENTITY((atomicLoad(buf[_GLF_IDENTITY(_GLF_struct_replacement_18._f0.virtual_gid, (_GLF_struct_replacement_18._f0.virtual_gid) | (_GLF_IDENTITY(_GLF_struct_replacement_18._f0.virtual_gid, max(_GLF_IDENTITY(_GLF_struct_replacement_18._f0.virtual_gid, (_GLF_struct_replacement_18._f0.virtual_gid) * 1u), _GLF_struct_replacement_18._f0.virtual_gid))))], _GLF_IDENTITY(4, ~ (~ (4))), 64, _GLF_IDENTITY(2, (2) | (0 << _GLF_IDENTITY(int(5), int(5)))))), clamp(_GLF_IDENTITY((atomicLoad(buf[_GLF_IDENTITY(_GLF_struct_replacement_18._f0.virtual_gid, (_GLF_struct_replacement_18._f0.virtual_gid) | (_GLF_IDENTITY(_GLF_struct_replacement_18._f0.virtual_gid, max(_GLF_IDENTITY(_GLF_struct_replacement_18._f0.virtual_gid, (_GLF_struct_replacement_18._f0.virtual_gid) * 1u), _GLF_struct_replacement_18._f0.virtual_gid))))], _GLF_IDENTITY(4, ~ (~ (4))), 64, _GLF_IDENTITY(2, (2) | (0 << _GLF_IDENTITY(int(5), int(5)))))), uint(uvec4((atomicLoad(buf[_GLF_IDENTITY(_GLF_struct_replacement_18._f0.virtual_gid, (_GLF_struct_replacement_18._f0.virtual_gid) | (_GLF_IDENTITY(_GLF_struct_replacement_18._f0.virtual_gid, max(_GLF_IDENTITY(_GLF_struct_replacement_18._f0.virtual_gid, (_GLF_struct_replacement_18._f0.virtual_gid) * 1u), _GLF_struct_replacement_18._f0.virtual_gid))))], _GLF_IDENTITY(4, ~ (~ (4))), 64, _GLF_IDENTITY(2, (2) | (0 << _GLF_IDENTITY(int(5), int(5)))))), 0u, 0u, 0u))), _GLF_IDENTITY((atomicLoad(buf[_GLF_IDENTITY(_GLF_struct_replacement_18._f0.virtual_gid, (_GLF_struct_replacement_18._f0.virtual_gid) | (_GLF_IDENTITY(_GLF_struct_replacement_18._f0.virtual_gid, max(_GLF_IDENTITY(_GLF_struct_replacement_18._f0.virtual_gid, (_GLF_struct_replacement_18._f0.virtual_gid) * 1u), _GLF_struct_replacement_18._f0.virtual_gid))))], _GLF_IDENTITY(4, ~ (~ (4))), 64, _GLF_IDENTITY(2, (2) | (0 << _GLF_IDENTITY(int(5), int(5)))))), (false ? _GLF_FUZZED(subgroup_size) : (atomicLoad(buf[_GLF_IDENTITY(_GLF_struct_replacement_18._f0.virtual_gid, (_GLF_struct_replacement_18._f0.virtual_gid) | (_GLF_IDENTITY(_GLF_struct_replacement_18._f0.virtual_gid, max(_GLF_IDENTITY(_GLF_struct_replacement_18._f0.virtual_gid, (_GLF_struct_replacement_18._f0.virtual_gid) * 1u), _GLF_struct_replacement_18._f0.virtual_gid))))], _GLF_IDENTITY(4, ~ (~ (4))), 64, _GLF_IDENTITY(2, (2) | (0 << _GLF_IDENTITY(int(5), int(5)))))))), (atomicLoad(buf[_GLF_IDENTITY(_GLF_struct_replacement_18._f0.virtual_gid, (_GLF_struct_replacement_18._f0.virtual_gid) | (_GLF_IDENTITY(_GLF_struct_replacement_18._f0.virtual_gid, max(_GLF_IDENTITY(_GLF_struct_replacement_18._f0.virtual_gid, (_GLF_struct_replacement_18._f0.virtual_gid) * 1u), _GLF_struct_replacement_18._f0.virtual_gid))))], _GLF_IDENTITY(4, ~ (~ (4))), 64, _GLF_IDENTITY(2, (2) | (0 << _GLF_IDENTITY(int(5), int(5)))))))) ^ 0u)) | (0u | 0u)), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_18._f0.virtual_gid], 4, 64, 2), (atomicLoad(buf[_GLF_struct_replacement_18._f0.virtual_gid], 4, _GLF_IDENTITY(64, min(_GLF_IDENTITY(64, clamp(64, 64, 64)), 64)), _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, ~ (_GLF_IDENTITY(~ (2), min(~ (2), _GLF_IDENTITY(~ (2), int(ivec4(~ (2), 1, 1, 1))))))), 2)))) ^ _GLF_IDENTITY(0u, (1u ^ _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(3u, (0u << _GLF_IDENTITY(uint(1u), uint(1u))) + (_GLF_IDENTITY(3u, 0u | (3u)))), max(3u, 3u))), uint(3u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), 0u ^ (uint(3u)))), (_GLF_IDENTITY(uint(3u), uint(3u))) | (_GLF_IDENTITY(uint(3u), uint(3u))))), max(_GLF_IDENTITY(_GLF_IDENTITY(((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), uint(3u)), (_GLF_IDENTITY(uint(3u), uint(3u))) >> 0u)) >> _GLF_IDENTITY(uint(3u), uint(3u))), min(((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))), min(_GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (uint(3u)) | (uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u))), min(((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))), _GLF_IDENTITY(((_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(uint(-471.687)) : 1u)) << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))), min(((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))))), (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (3u) | 0u)), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)), ~ (~ (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)), (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(3u), uint(3u))), clamp((1u << _GLF_IDENTITY(uint(3u), uint(3u))), (1u << _GLF_IDENTITY(uint(3u), uint(3u))), (1u << _GLF_IDENTITY(uint(3u), uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u))) ^ 0u)))))))) + (0u)))));
 for(int _injected_loop_counter = _GLF_IDENTITY((1 & _GLF_IDENTITY(((_GLF_IDENTITY(1, 0 | (1)) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(_GLF_IDENTITY(6, 0 ^ (6)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, _GLF_IDENTITY(0, 0 | (0)) ^ (6))), (~ (_GLF_IDENTITY(6, 0 ^ (6)))) | (~ (_GLF_IDENTITY(6, 0 ^ (6))))))), 6, _GLF_IDENTITY(6, _GLF_IDENTITY((6), max((6), _GLF_IDENTITY((6), (true ? (6) : _GLF_FUZZED(-26351))))) | (_GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), clamp(6, 6, 6))))))), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (true ? 6 : _GLF_FUZZED(_GLF_IDENTITY(-76205, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? -76205 : _GLF_FUZZED(-89067))))))), 0 | (int(_GLF_IDENTITY(6, (true ? 6 : _GLF_FUZZED(_GLF_IDENTITY(-76205, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? -76205 : _GLF_FUZZED(-89067))))))))), int(6))), max(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, 0 ^ (6)), 6, _GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, clamp(6, 6, 6))))))), int(6))) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) / int(_GLF_ONE(1.0, injectionSwitch.y)))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, (0 ^ 0)), (_GLF_IDENTITY(ivec2(1, (0 ^ 0)), (true ? ivec2(1, (0 ^ 0)) : _GLF_FUZZED(ivec2(-67945, -61754))))) * ivec2(1, 1)))) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, 0 ^ (6)), 6, _GLF_IDENTITY(6, _GLF_IDENTITY((6), ~ (~ ((6)))) | (_GLF_IDENTITY(6, clamp(6, 6, _GLF_IDENTITY(6, min(6, 6))))))))), int(6)), min(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, _GLF_IDENTITY(0, _GLF_IDENTITY((0), ~ (~ ((0)))) >> 0) ^ (6)), 6, _GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, _GLF_IDENTITY(clamp(6, 6, 6), (true ? _GLF_IDENTITY(clamp(6, 6, 6), (_GLF_IDENTITY(clamp(6, 6, 6), ~ (~ (clamp(6, 6, 6))))) - 0) : _GLF_FUZZED(-71275))))))))), int(6)), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, _GLF_IDENTITY(clamp(_GLF_IDENTITY(6, 0 ^ (6)), 6, _GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, clamp(6, 6, 6))))), min(clamp(_GLF_IDENTITY(6, 0 ^ (6)), 6, _GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, clamp(6, 6, 6))))), clamp(_GLF_IDENTITY(6, 0 ^ (6)), 6, _GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, clamp(6, 6, 6))))))))), int(6)), (false ? _GLF_FUZZED(14561) : 1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, 0 ^ (_GLF_IDENTITY(6, (6) ^ 0))), 6, _GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, clamp(6, 6, 6))))))), int(6))))))) >> _GLF_IDENTITY(int(6), int(6)), 0 | (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, 0 ^ (6)), 6, _GLF_IDENTITY(6, _GLF_IDENTITY((6), ~ (~ ((6)))) | (_GLF_IDENTITY(6, clamp(6, 6, _GLF_IDENTITY(6, min(6, 6))))))))), int(6)), _GLF_IDENTITY(min(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, _GLF_IDENTITY(0, (0) >> 0) ^ (6)), 6, _GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, clamp(6, 6, 6))))))), int(6)), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, 0 ^ (6)), 6, _GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, clamp(6, 6, 6))))))), int(6)), (false ? _GLF_FUZZED(14561) : 1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, 0 ^ (6)), 6, _GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, clamp(6, 6, 6))))))), int(6))))), int(ivec4(min(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, _GLF_IDENTITY(0, (0) >> 0) ^ (6)), 6, _GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, clamp(6, 6, 6))))))), int(6)), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, 0 ^ (6)), 6, _GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, clamp(6, 6, 6))))))), int(6)), (false ? _GLF_FUZZED(14561) : 1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, 0 ^ (6)), 6, _GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, clamp(6, 6, 6))))))), int(6))))), ((0 >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(4), int(4))), 0, (0 | 0)))))) >> _GLF_IDENTITY(int(6), int(6)), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, 0 ^ (6)), 6, _GLF_IDENTITY(6, _GLF_IDENTITY((6), ~ (~ ((6)))) | (_GLF_IDENTITY(6, clamp(6, 6, _GLF_IDENTITY(6, min(6, 6))))))))), int(6)), min(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) >> 0), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) >> 0), (_GLF_IDENTITY(0, (0) >> 0)) / 1))) ^ (6)), 6, _GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, clamp(6, 6, 6))))))), int(6)), _GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, 0 ^ (6)), 6, _GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, clamp(6, 6, 6))))))), int(6)), (false ? _GLF_FUZZED(14561) : 1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, 0 ^ (6)), 6, _GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, clamp(6, 6, 6))))))), int(6)))), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, 0 ^ (6)), 6, _GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, clamp(6, 6, 6))))))), int(6)), (false ? _GLF_FUZZED(14561) : 1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, 0 ^ (6)), 6, _GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, clamp(6, 6, 6))))))), int(6))))) >> 0)))) >> _GLF_IDENTITY(int(6), int(6))) ^ 0))))))), ((_GLF_IDENTITY(1, (1) - 0) & _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(_GLF_IDENTITY(6, 0 ^ (6)), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, 0 ^ (6))), (~ (_GLF_IDENTITY(6, 0 ^ (6)))) | (~ _GLF_IDENTITY((_GLF_IDENTITY(6, 0 ^ (6))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(6, 0 ^ (6))), (_GLF_IDENTITY((_GLF_IDENTITY(6, _GLF_IDENTITY(0 ^ (6), ~ (_GLF_IDENTITY(~ (0 ^ (6)), 0 ^ (~ (0 ^ (6)))))))), ((_GLF_IDENTITY(6, _GLF_IDENTITY(0 ^ (6), ~ (_GLF_IDENTITY(~ (0 ^ (6)), 0 ^ (~ (0 ^ (6))))))))) | ((_GLF_IDENTITY(6, _GLF_IDENTITY(0 ^ (6), ~ (_GLF_IDENTITY(~ (0 ^ (6)), 0 ^ (~ (0 ^ (6))))))))))) | _GLF_IDENTITY(((_GLF_IDENTITY(6, 0 ^ (6)))), (true ? ((_GLF_IDENTITY(6, 0 ^ (6)))) : _GLF_FUZZED(25915)))), (_GLF_IDENTITY(6, 0 ^ (6))), (_GLF_IDENTITY(6, 0 ^ (6)))))))), 1 * (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, 0 ^ (6))), (~ (_GLF_IDENTITY(6, 0 ^ (6)))) | (~ _GLF_IDENTITY((_GLF_IDENTITY(6, 0 ^ (6))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(6, 0 ^ (6))), ((_GLF_IDENTITY(_GLF_IDENTITY(6, 0 ^ (6)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(6, 0 ^ (6)), min(_GLF_IDENTITY(6, 0 ^ (6)), _GLF_IDENTITY(6, 0 ^ (6)))), _GLF_IDENTITY(6, 0 ^ (6)), _GLF_IDENTITY(6, 0 ^ (6)))))) | ((_GLF_IDENTITY(6, 0 ^ (6))))), (_GLF_IDENTITY(6, _GLF_IDENTITY(0 ^ (6), (_GLF_IDENTITY(0 ^ (6), (false ? _GLF_FUZZED(34213) : 0 ^ (6)))) | (_GLF_IDENTITY(0 ^ (6), int(_GLF_IDENTITY(ivec3(0 ^ (6), 0, 0), ivec3(0, 0, 0) ^ (ivec3(0 ^ (6), 0, 0))))))))), (_GLF_IDENTITY(6, 0 ^ (6)))))))), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, min(0, 0))))) ^ (6))), (~ (_GLF_IDENTITY(6, 0 ^ (6)))) | (~ _GLF_IDENTITY((_GLF_IDENTITY(6, 0 ^ (6))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(6, 0 ^ (6))), ((_GLF_IDENTITY(6, 0 ^ (6)))) | ((_GLF_IDENTITY(6, 0 ^ _GLF_IDENTITY((6), (_GLF_IDENTITY((6), ((6)) / 1)) | ((6))))))), (_GLF_IDENTITY(6, 0 ^ (6))), (_GLF_IDENTITY(6, 0 ^ (6)))))))), 0 ^ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, 0 ^ (6))), (~ (_GLF_IDENTITY(6, 0 ^ (6)))) | (~ _GLF_IDENTITY((_GLF_IDENTITY(6, 0 ^ (6))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(6, 0 ^ (6))), ((_GLF_IDENTITY(6, 0 ^ (6)))) | ((_GLF_IDENTITY(6, 0 ^ (6))))), (_GLF_IDENTITY(6, 0 ^ (6))), (_GLF_IDENTITY(6, 0 ^ (6)))))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, 0 ^ (6))), (~ (_GLF_IDENTITY(6, 0 ^ (6)))) | (~ _GLF_IDENTITY((_GLF_IDENTITY(6, 0 ^ (6))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(6, 0 ^ (6))), _GLF_IDENTITY(((_GLF_IDENTITY(6, 0 ^ (6)))) | ((_GLF_IDENTITY(6, 0 ^ (6)))), (_GLF_IDENTITY(((_GLF_IDENTITY(6, 0 ^ (6)))) | ((_GLF_IDENTITY(6, 0 ^ (6)))), 0 ^ (((_GLF_IDENTITY(6, 0 ^ (6)))) | ((_GLF_IDENTITY(6, 0 ^ (6))))))) + (0 >> _GLF_IDENTITY(int(7), int(7))))), (_GLF_IDENTITY(6, 0 ^ (6))), (_GLF_IDENTITY(6, 0 ^ (6))))))))))))), 6, _GLF_IDENTITY(6, (6) | _GLF_IDENTITY((_GLF_IDENTITY(6, clamp(6, 6, 6))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(6, clamp(6, 6, 6))), (false ? _GLF_FUZZED(-13166) : (_GLF_IDENTITY(6, clamp(6, 6, 6)))))), clamp(~ (_GLF_IDENTITY((_GLF_IDENTITY(6, clamp(6, 6, 6))), (false ? _GLF_FUZZED(-13166) : (_GLF_IDENTITY(6, clamp(6, 6, 6)))))), ~ (_GLF_IDENTITY((_GLF_IDENTITY(6, clamp(6, 6, 6))), (false ? _GLF_FUZZED(-13166) : (_GLF_IDENTITY(6, clamp(6, 6, 6)))))), ~ (_GLF_IDENTITY((_GLF_IDENTITY(6, clamp(6, 6, 6))), (false ? _GLF_FUZZED(-13166) : (_GLF_IDENTITY(6, clamp(6, 6, 6)))))))))))))), int(6))) >> _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(max(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, _GLF_IDENTITY(0 ^ (6), (true ? 0 ^ (6) : _GLF_FUZZED(-6140)))), 6, _GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(_GLF_IDENTITY(6, clamp(6, 6, 6)), (_GLF_IDENTITY(6, clamp(6, 6, 6))) << (0 & -91411))))))), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) * 1)), int(6))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, 0 ^ (6)), 6, _GLF_IDENTITY(6, _GLF_IDENTITY((6) | (_GLF_IDENTITY(6, clamp(6, 6, 6))), (true ? _GLF_IDENTITY((6) | (_GLF_IDENTITY(6, clamp(6, 6, 6))), min((6) | (_GLF_IDENTITY(6, clamp(6, 6, 6))), (6) | (_GLF_IDENTITY(6, clamp(6, 6, 6))))) : _GLF_FUZZED(-27015))))))), int(6)), min(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, 0 ^ (6)), 6, _GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, clamp(6, 6, 6))))))), int(6)), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(6, max(6, 6)), 0 ^ (6)), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(6, max(6, 6)), 0 ^ (6)))), 6, _GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, clamp(6, 6, 6))))))), int(_GLF_IDENTITY(6, min(6, 6)))), (false ? _GLF_FUZZED(14561) : 1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) | (0)))) ^ (6)), 6, _GLF_IDENTITY(_GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, clamp(6, 6, 6)))), min(_GLF_IDENTITY(_GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, clamp(6, 6, 6)))), 0 | (_GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, clamp(6, 6, 6)))))), _GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, clamp(6, 6, 6))))))))), _GLF_IDENTITY(int(6), max(int(6), int(6))))))))) >> _GLF_IDENTITY(int(6), int(6)))), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, 1 * (0))))) + 0) ^ (max(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(_GLF_IDENTITY(6, _GLF_IDENTITY(0 ^ (6), (0 ^ (6)) ^ 0)), (_GLF_IDENTITY(6, _GLF_IDENTITY(0 ^ (6), (0 ^ (6)) ^ 0))) ^ 0), 6, _GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, clamp(6, 6, 6))))))), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, _GLF_IDENTITY(int(ivec3(6, 1, 0)), ~ (~ (int(ivec3(6, 1, 0))))))), int(6)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (_GLF_IDENTITY(int(6), int(ivec4(int(6), 1, 0, 0)))))), int(6)), _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))), (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true))))) && true))) ? _GLF_FUZZED(54432) : _GLF_IDENTITY(int(6), int(6)))), _GLF_IDENTITY(int(6), int(6))))), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, _GLF_IDENTITY(clamp(_GLF_IDENTITY(6, 0 ^ (6)), 6, _GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, clamp(6, 6, 6))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(6, 0 ^ (6)), 6, _GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, clamp(6, 6, 6))))), min(clamp(_GLF_IDENTITY(6, 0 ^ (6)), 6, _GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, clamp(6, 6, 6))))), clamp(_GLF_IDENTITY(6, 0 ^ (6)), 6, _GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, clamp(6, 6, 6)))))))), (~ (_GLF_IDENTITY(clamp(_GLF_IDENTITY(6, 0 ^ (6)), 6, _GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, clamp(6, 6, 6))))), min(clamp(_GLF_IDENTITY(6, 0 ^ (6)), 6, _GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, clamp(6, 6, 6))))), clamp(_GLF_IDENTITY(6, 0 ^ (6)), 6, _GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, clamp(6, 6, 6))))))))) >> (0 | 0)))))), int(6)), min(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, 0 ^ (6)), 6, _GLF_IDENTITY(6, (_GLF_IDENTITY(6, ~ (~ (6)))) | (_GLF_IDENTITY(6, clamp(6, 6, 6))))))), int(6)), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, 0 ^ (6)), 6, _GLF_IDENTITY(6, _GLF_IDENTITY((_GLF_IDENTITY(6, (6) + 0)) | (_GLF_IDENTITY(6, clamp(6, 6, 6))), min((_GLF_IDENTITY(6, (6) + 0)) | (_GLF_IDENTITY(6, clamp(6, 6, 6))), (_GLF_IDENTITY(6, (6) + 0)) | (_GLF_IDENTITY(6, clamp(6, 6, 6))))))))), int(6)), (false ? _GLF_IDENTITY(_GLF_FUZZED(14561), (false ? _GLF_FUZZED(86995) : _GLF_FUZZED(14561))) : 1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, _GLF_IDENTITY(clamp(_GLF_IDENTITY(6, 0 ^ (6)), 6, _GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, clamp(6, 6, 6))))), min(clamp(_GLF_IDENTITY(6, 0 ^ (6)), 6, _GLF_IDENTITY(6, _GLF_IDENTITY((6) | (_GLF_IDENTITY(6, clamp(6, 6, 6))), ((6) | (_GLF_IDENTITY(6, clamp(6, 6, 6)))) >> 0))), clamp(_GLF_IDENTITY(6, 0 ^ (6)), 6, _GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, clamp(6, 6, 6))))))))), int(6))))))) >> _GLF_IDENTITY(int(6), int(6))))))))) ^ (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), ~ _GLF_IDENTITY((~ (int(1))), 0 ^ ((~ (_GLF_IDENTITY(int(1), ~ (~ (int(1))))))))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, ~ (~ (1)))))), min(int(1), int(1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))) && true), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))), bool(bvec2(bool(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))), false))))), (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))) && true), (injectionSwitch.x > injectionSwitch.y))))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).x))) - tan(0.0)), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec3(bvec2(_GLF_DEAD(false), true), false))))))
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))))))
                      barrier();
                     barrier();
                    }
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
                    barrier();
                  }
                }
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) - vec2(0.0, 0.0)).y) && true)))));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) && _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, false))), (injectionSwitch.x < injectionSwitch.y)))), ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), (_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), true && ((false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), true && ((false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), (_GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), true && ((false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))) || false))))) || false)))))), _GLF_IDENTITY(true, (true) && true), false, true)), (bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), true, false, true))) || false))));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
      barrier();
     barrier();
    }
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if((subgroup_local_id % 2) == 0)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)))) > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               subgroupAll(false);
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) / 1)))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-0.4), _GLF_FUZZED(103.467)), bvec2(false, false))).y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))
            barrier();
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         atomicStore(buf[_GLF_struct_replacement_5._f0.next_virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, int(int(4))));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
         subgroupAll(false);
         do
          {
           do
            {
             atomicStore(buf[_GLF_struct_replacement_5._f0.next_virtual_gid], uint(1), _GLF_IDENTITY(4, ~ (~ (4))), _GLF_IDENTITY(64, max(_GLF_IDENTITY(64, (_GLF_IDENTITY(_GLF_IDENTITY(64, (64) ^ 0), min(64, 64))) ^ 0), _GLF_IDENTITY(64, 0 | (_GLF_IDENTITY(64, min(64, 64)))))), 4);
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || _GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((false) || _GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (false) && true), false || (_GLF_IDENTITY((false) || _GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (false) && true), bool(bvec2((false) || _GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (false) && true), false))))), ((false) || _GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, (false) && true)))) && true)))))));
          }
         while(_GLF_WRAPPED_LOOP(false));
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(! (false), ! (! (! (false)))), true)))))) || false)))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1.4) : _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))))))), bool(bvec3(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))) ? injectionSwitch.y : _GLF_FUZZED(5.9)), max((_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))))))) ? injectionSwitch.y : _GLF_FUZZED(5.9)), _GLF_IDENTITY((_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y)), _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y)), log(cos(0.0)))), clamp(float(vec2(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y)), log(cos(0.0)))), float(vec2(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y)), log(cos(0.0)))), float(vec2(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y)), log(cos(0.0)))))))), _GLF_IDENTITY(! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))))), bool(bool(_GLF_IDENTITY(! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))))), bool(bool(! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))))))))))))) ? injectionSwitch.y : _GLF_FUZZED(5.9)), (_GLF_IDENTITY((_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y)), _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y)), log(cos(0.0)))), clamp(float(vec2(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y)), log(cos(0.0)))), float(vec2(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y)), log(cos(0.0)))), float(vec2(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y)), log(cos(0.0)))))))), _GLF_IDENTITY(! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))))), bool(bool(_GLF_IDENTITY(! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))))), bool(bool(! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))))))))))))) ? injectionSwitch.y : _GLF_FUZZED(5.9)), clamp((_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y)), _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y)), log(cos(0.0)))), clamp(float(vec2(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y)), log(cos(0.0)))), float(vec2(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y)), log(cos(0.0)))), float(vec2(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y)), log(cos(0.0)))))))), _GLF_IDENTITY(! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))))), bool(bool(_GLF_IDENTITY(! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))))), bool(bool(! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))))))))))))) ? injectionSwitch.y : _GLF_FUZZED(5.9)), (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y)), _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y)), log(cos(0.0)))), clamp(float(vec2(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y)), log(cos(0.0)))), float(vec2(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y)), log(cos(0.0)))), float(vec2(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y)), log(cos(0.0)))))))), _GLF_IDENTITY(! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))))), bool(bool(_GLF_IDENTITY(! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))))), bool(bool(! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))))))))))))) ? injectionSwitch.y : _GLF_FUZZED(5.9)), (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y)), _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y)), log(cos(0.0)))), clamp(float(vec2(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y)), log(cos(0.0)))), float(vec2(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y)), log(cos(0.0)))), float(vec2(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y)), log(cos(0.0)))))))), _GLF_IDENTITY(! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))))), bool(bool(_GLF_IDENTITY(! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))))), bool(bool(! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))))))))))))) ? injectionSwitch.y : _GLF_FUZZED(5.9))))) / 1.0))))))))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1.4) : _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))), ! (! ((injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-502.747) : injectionSwitch.y)), (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))))))) ? injectionSwitch.y : _GLF_FUZZED(5.9)), max((_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))))))) ? injectionSwitch.y : _GLF_FUZZED(5.9)), (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))))))) ? injectionSwitch.y : _GLF_FUZZED(5.9)))))))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1.4) : _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(5.6)), vec2(_GLF_FUZZED(371.103), _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(false, true))).x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))))))) ? injectionSwitch.y : _GLF_FUZZED(5.9)), max(_GLF_IDENTITY((_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y)), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))) && _GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))))))) ? injectionSwitch.y : _GLF_FUZZED(5.9)), clamp(_GLF_IDENTITY((_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y)), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))) && _GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))))))) ? injectionSwitch.y : _GLF_FUZZED(5.9)), 0.0 + ((_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y)), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))) && _GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))))))) ? injectionSwitch.y : _GLF_FUZZED(5.9)))), (_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y)), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))) && _GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))))))) ? injectionSwitch.y : _GLF_FUZZED(5.9)), (_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y)), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))) && _GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))))))) ? injectionSwitch.y : _GLF_FUZZED(5.9)))), (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6492.5093) : injectionSwitch.y))))))) ? injectionSwitch.y : _GLF_FUZZED(5.9))))))))))))), false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true)))) || false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, clamp(1, 1, 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, 1.0 * (0.0)), injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1))
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
        barrier();
      }
     else
      {
      }
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   subgroupBarrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))))).y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec3(! (false), false, true)), (bool(bvec3(! (false), false, true))) && true))) && true)))))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), _GLF_IDENTITY(float(_GLF_FUZZED(927.584)), (true ? float(_GLF_FUZZED(927.584)) : _GLF_FUZZED(vec3(-767.063, 8.2, -323.742)[2]))), bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, clamp(0, 0, 0))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, clamp(0, 0, 0))))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))), false || (_GLF_DEAD(false))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! _GLF_IDENTITY((! (_GLF_WRAPPED_IF_FALSE(false))), true && (_GLF_IDENTITY((! (_GLF_WRAPPED_IF_FALSE(false))), ! (! ((! (_GLF_WRAPPED_IF_FALSE(false))))))))))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec3(! (_GLF_DEAD(false)), true, false)), false || (bool(bvec3(! (_GLF_DEAD(false)), true, false))))))))
                barrier();
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0)))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2(injectionSwitch.x, sin(0.0), 0.0, 0.0), (mat2(injectionSwitch.x, sin(0.0), 0.0, 0.0)) / mat2(1.0, 1.0, 1.0, 1.0)))) > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))))
                      barrier();
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
    }
   else
    {
    }
  }
 else
  {
  }
 atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_18._f0.virtual_gid, 0u + (_GLF_struct_replacement_18._f0.virtual_gid)), (_GLF_struct_replacement_18._f0.virtual_gid) | (_GLF_struct_replacement_18._f0.virtual_gid))], read, 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
