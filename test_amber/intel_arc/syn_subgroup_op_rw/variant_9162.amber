#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_10 {
 mat4x2 _f0;
 ivec4 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_9 {
 mat4x2 _f0;
 float _f1;
 uvec4 _f2;
 ivec3 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_8 {
 mat3 _f0;
 mat4 _f1;
 bvec2 _f2;
 uvec4 _f3;
 vec2 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_11 {
 mat3x4 _f0;
 mat2x4 _f1;
 vec3 _f2;
 _GLF_struct_8 _f3;
 _GLF_struct_9 _f4;
 _GLF_struct_10 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_6 {
 ivec4 _f0;
} ;

struct _GLF_struct_7 {
 uint next_virtual_gid;
 ivec3 _f0;
 _GLF_struct_6 _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_4 {
 mat2x4 _f0;
} ;

struct _GLF_struct_5 {
 mat4 _f0;
 uvec3 _f1;
 _GLF_struct_4 _f2;
 ivec4 _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_2 {
 mat4 _f0;
 vec3 _f1;
 mat2 _f2;
 bvec2 _f3;
 mat4x2 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_1 {
 ivec3 _f0;
 mat2x3 _f1;
 ivec4 _f2;
 vec2 _f3;
 mat4 _f4;
 vec4 _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_0 {
 uvec4 _f0;
 mat3 _f1;
 mat4x2 _f2;
} ;

struct _GLF_struct_3 {
 mat4 _f0;
 _GLF_struct_0 _f1;
 vec4 _f2;
 _GLF_struct_1 _f3;
 vec3 _f4;
 uvec4 _f5;
 _GLF_struct_2 _f6;
} ;

struct _GLF_struct_12 {
 _GLF_struct_3 _f0;
 float _f1;
 _GLF_struct_5 _f2;
 _GLF_struct_7 _f3;
 mat4x2 _f4;
 _GLF_struct_11 _f5;
 bvec2 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) ^ 0), min(_GLF_IDENTITY(int(3), (int(3)) ^ 0), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) ^ 0), min(_GLF_IDENTITY(int(3), (int(3)) ^ 0), _GLF_IDENTITY(int(3), (int(3)) ^ 0))))), (_GLF_IDENTITY(int(3), (int(3)) ^ 0)) ^ 0))), ((0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) | 0), ~ (~ (int(3)))), (int(3)) ^ 0)))) - 0), ((0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0)))) | ((0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (_GLF_IDENTITY(~ (3), (~ (3)) + 0)))), _GLF_IDENTITY(int(3), (int(3)) ^ 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = ((1 & 1) & _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(20519)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, max(0, 0))))), ! (! (_injected_loop_counter != 0)))); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((_GLF_IDENTITY(0, 0 | (0)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(int(7), int(7))))), min((0 >> _GLF_IDENTITY(int(7), int(7))), _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(7), int(7))), _GLF_IDENTITY(min((0 >> _GLF_IDENTITY(int(7), int(7))), (0 >> _GLF_IDENTITY(int(7), int(7)))), (min((0 >> _GLF_IDENTITY(int(7), int(7))), (0 >> _GLF_IDENTITY(int(7), int(7))))) >> 0))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec2((false), false)))) && true)) && true)))))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   else
    {
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (_GLF_IDENTITY(0, 0 ^ (0)) << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) / 1u);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), false || (_GLF_IDENTITY(bool(bvec3(false, true, false)), false || (bool(bvec3(false, true, false)))))))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 else
  {
  }
 do
  {
   for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) * 1.0), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) || false)))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)));
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), (bool(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), false, false))) || false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (1 | int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(bool(bvec3(_injected_loop_counter != 1, false, true)), bool(bool(bool(bvec3(_injected_loop_counter != 1, false, true))))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(_GLF_struct_3(_GLF_IDENTITY(mat4(1.0), transpose(transpose(mat4(1.0)))), _GLF_struct_0(uvec4(1u), mat3(1.0), mat4x2(1.0)), vec4(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)))), 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))), _GLF_struct_1(ivec3(1), mat2x3(1.0), ivec4(1), vec2(1.0), _GLF_IDENTITY(_GLF_IDENTITY(mat4(1.0), transpose(_GLF_IDENTITY(transpose(_GLF_IDENTITY(mat4(1.0), (mat4(1.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (true ? transpose(_GLF_IDENTITY(mat4(1.0), (mat4(1.0)) - mat4(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))) : _GLF_FUZZED(mat4(635.750, _GLF_IDENTITY(4.4, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 4.4 : _GLF_FUZZED(1527.5333))), _GLF_IDENTITY(77.22, min(77.22, 77.22)), -262.218, 3.0, 1.3, -776.064, 1513.1900, 9.8, 3.3, 7049.0957, _GLF_IDENTITY(-666.553, max(-666.553, -666.553)), -490.524, 6125.6881, 284.173, 981.725)))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mat4(779.297, -607.776, 5.2, -41.74, -1726.0212, _GLF_IDENTITY(4.9, (4.9) - _GLF_ZERO(0.0, injectionSwitch.x)), -4.0, 5287.9966, 2.2, -80.87, -3.1, 148.570, -84.09, 0.8, 4.3, -8.0)) : mat4(1.0))), vec4(1.0), uvec2(1u)), vec3(1.0), uvec4(1u), _GLF_struct_2(mat4(1.0), vec3(1.0), _GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY(mat2(mat2x3(mat2(1.0))), (mat2(mat2x3(mat2(1.0)))) / mat2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0, 1.0))), bvec2(true), mat4x2(1.0), uvec3(1u))), 1.0, _GLF_struct_5(mat4(1.0), uvec3(1u), _GLF_struct_4(mat2x4(1.0)), ivec4(1), mat3x2(1.0)), _GLF_struct_7(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)) + subgroup_base + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))) * (subgroup_size), (((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))) * (subgroup_size)) >> (0u | 0u))))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), ivec3(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(63851))) : _GLF_FUZZED(68143)))), _GLF_struct_6(ivec4(1)), mat2x3(1.0)), mat4x2(1.0), _GLF_struct_11(mat3x4(1.0), mat2x4(1.0), _GLF_IDENTITY(vec3(1.0), min(_GLF_IDENTITY(vec3(1.0), mix(vec3((vec3(1.0))[0], (vec3(1.0))[1], _GLF_FUZZED(-6.9)), vec3(_GLF_FUZZED(-8.2), _GLF_FUZZED(-5063.9544), (vec3(1.0))[2]), bvec3(false, false, true))), vec3(1.0))), _GLF_struct_8(mat3(1.0), _GLF_IDENTITY(mat4(1.0), transpose(_GLF_IDENTITY(transpose(mat4(1.0)), (transpose(mat4(1.0))) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(atanh(-9.1)) : 0.0)), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(42.80) : 0.0)), _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)), 0.0, 0.0, 0.0, 0.0)))), bvec2(true), uvec4(1u), vec2(1.0), mat4x2(1.0)), _GLF_struct_9(mat4x2(1.0), _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-49.18) : 1.0))), float(_GLF_FUZZED((-446.201 + -1.5))), bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))), uvec4(1u), ivec3(1), bvec2(true)), _GLF_struct_10(mat4x2(1.0), ivec4(1), bvec4(true)), _GLF_IDENTITY(uvec4(1u), max(_GLF_IDENTITY(uvec4(1u), (uvec4(1u)) << uvec4(0u, 0u, 0u, 0u)), uvec4(1u)))), bvec2(true));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(31.60)), vec2(_GLF_FUZZED(-19.46), (injectionSwitch)[1]), bvec2(false, true)))) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), 1.0, abs(0.0), 1.0, 1.0, 0.0, cos(0.0), sin(0.0), 0.0, 0.0, tan(0.0), 0.0))) < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(456.712)), float(injectionSwitch.y), bool(true)))))))
    {
     barrier();
    }
   else
    {
     for(int _injected_loop_counter = (0 ^ (1 | ((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) ^ 0))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) >> 0), int(4)), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) >> 0), int(4)), 1, 1, 1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ (_GLF_IDENTITY(0, max(0, 0)) << _GLF_IDENTITY(int(1), int(1)))) & 1, (0 | _GLF_IDENTITY(0, _GLF_IDENTITY(min(0, 0), min(min(0, 0), min(0, 0))))) ^ (_GLF_IDENTITY(1, (1) ^ (0 << _GLF_IDENTITY(int(1), int(1)))) & 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (_GLF_IDENTITY(~ (int(_GLF_ZERO(0.0, injectionSwitch.x))), (~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(~ (int(_GLF_ZERO(0.0, injectionSwitch.x))), 0 ^ (~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (_GLF_IDENTITY(~ (int(_GLF_ZERO(0.0, injectionSwitch.x))), min(~ (int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, max(0, 0))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     for(int _injected_loop_counter = _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, max(1, 1)), 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if((subgroup_local_id % _GLF_IDENTITY(2, 1 * (2))) == 0)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, sqrt(_GLF_ZERO(0.0, injectionSwitch.x))))).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, sqrt(_GLF_ZERO(0.0, injectionSwitch.x))))).x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, sqrt(_GLF_ZERO(0.0, injectionSwitch.x))))).x > injectionSwitch.y, true)))) || false)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               subgroupAll(false);
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), true && (bool(bvec4(false, true, true, true)))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))), injectionSwitch.y, injectionSwitch.y)), clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(269.424)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), injectionSwitch.y, injectionSwitch.y))))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))));
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1)))))) != _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(1, min(1, 1))) * 1)); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             atomicStore(buf[_GLF_IDENTITY(_GLF_struct_replacement_12._f3.next_virtual_gid, ~ (~ (_GLF_struct_replacement_12._f3.next_virtual_gid)))], _GLF_IDENTITY(uint(1), (uint(1)) | 0u), 4, 64, 4);
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) | (1))); _injected_loop_counter ++)
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) < _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) | 0)), ~ (~ ((_GLF_IDENTITY(1, (1) | 0))))) | (1))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         subgroupAll(false);
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false, true, false))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), sin(0.0), 1.0, 0.0, 0.0, 0.0))) : _GLF_FUZZED(6788.4890))))), max(_GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), sin(0.0), 1.0, 0.0, 0.0, 0.0))) : _GLF_FUZZED(6788.4890))))), (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), sin(0.0), 1.0, 0.0, 0.0, 0.0))) : _GLF_FUZZED(6788.4890)))))) - 0), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), sin(0.0), 1.0, 0.0, 0.0, 0.0))) : _GLF_FUZZED(6788.4890)))))))); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                    }
                  }
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         else
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) || false)))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))))))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6)))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6)))), int(_GLF_IDENTITY(ivec3(0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6)))), 1, 0), max(ivec3(0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6)))), 1, 0), ivec3(0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6)))), 1, 0)))))) | (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         atomicStore(buf[_GLF_struct_replacement_12._f3.next_virtual_gid], uint(1), 4, 64, 4);
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)), injectionSwitch)).y))))))
      barrier();
    }
   else
    {
    }
  }
 subgroupBarrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, true))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, true))), bvec3(bvec4(bvec3(bvec3(bvec3(false, false, true))), false)))))))), false || (_GLF_IDENTITY(bool(bvec3(false, false, _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, bool(bool(true))))))), (bool(bvec3(false, false, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), _GLF_IDENTITY(false || (bool(bvec3(false, _GLF_IDENTITY(false, ! (! (false))), true))), (false || (bool(bvec3(false, false, true)))) || false)))) || false)))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))), float(_GLF_FUZZED(-2.6)), bool(false))) > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))))), injectionSwitch)).y, min(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-9.1))), 0.0, 1.0, 0.0, 1.0, 0.0)), mix(float(_GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-9.1))), 0.0, 1.0, 0.0, 1.0, 0.0)), clamp(float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-9.1))), 0.0, 1.0, 0.0, 1.0, 0.0)), float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-9.1))), 0.0, 1.0, 0.0, 1.0, 0.0)), float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-9.1))), 0.0, 1.0, 0.0, 1.0, 0.0))))), float(_GLF_FUZZED(-2187.9935)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch), mix(vec2(_GLF_FUZZED(-855.783), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch))[1]), vec2(((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch))[0], _GLF_FUZZED((-2070.9385 / 3026.7872))), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0))), mix(vec2((_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0))))[0], (_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0))))[1]), vec2(_GLF_FUZZED(5.5), _GLF_FUZZED(-6682.5011)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, _GLF_IDENTITY(1.4, float(mat2x3(1.4, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(exp(0.0), 0.0)), dot(vec2(1.0, 0.0), vec2(exp(0.0), 0.0))), 0.0, _GLF_IDENTITY(tan(log(1.0)), clamp(_GLF_IDENTITY(tan(log(1.0)), (false ? _GLF_FUZZED(30.12) : tan(log(1.0)))), tan(log(1.0)), tan(log(1.0))))))), -4225.1624).yy) : injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))))), injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))))), injectionSwitch), vec2(_GLF_IDENTITY(mat3x4(max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))))), injectionSwitch), 1.0, 1.0, sqrt(0.0), 0.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0), (false ? _GLF_FUZZED(mat3x4(-35.64, 430.653, 288.244, -1.5, 592.585, 56.55, 73.31, 8.0, -7.8, 4.8, -4684.4386, -3286.0141)) : mat3x4(max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)), (_GLF_IDENTITY(true, true && (true)) ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))))), injectionSwitch), 1.0, 1.0, sqrt(0.0), 0.0, tan(0.0), 0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(669.246)), float(1.0), bool(true))), 0.0, 1.0)))))).y, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))))), injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))))), injectionSwitch)).y, 1.0 * (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(vec2(956.635, _GLF_IDENTITY(5.0, (_GLF_IDENTITY(5.0, clamp(5.0, 5.0, 5.0))) / 1.0)), (_GLF_IDENTITY(vec2(956.635, _GLF_IDENTITY(5.0, (_GLF_IDENTITY(5.0, clamp(5.0, 5.0, 5.0))) / 1.0)), min(vec2(956.635, _GLF_IDENTITY(5.0, (_GLF_IDENTITY(5.0, clamp(5.0, 5.0, 5.0))) / 1.0)), _GLF_IDENTITY(vec2(956.635, _GLF_IDENTITY(5.0, (_GLF_IDENTITY(5.0, clamp(5.0, 5.0, 5.0))) / 1.0)), (vec2(956.635, _GLF_IDENTITY(5.0, (_GLF_IDENTITY(5.0, clamp(5.0, 5.0, 5.0))) / 1.0))) / vec2(1.0, 1.0))))) - vec2(0.0, 0.0)), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))))), injectionSwitch)).y)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))))), injectionSwitch)).y, min(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-9.1))), 0.0, 1.0, 0.0, 1.0, 0.0)), mix(float(_GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-9.1))), 0.0, 1.0, 0.0, 1.0, 0.0)), clamp(float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-9.1))), 0.0, 1.0, 0.0, 1.0, 0.0)), float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-9.1))), 0.0, 1.0, 0.0, 1.0, 0.0)), float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-9.1))), 0.0, 1.0, 0.0, 1.0, 0.0))))), float(_GLF_FUZZED(-2187.9935)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch), mix(vec2(_GLF_FUZZED(-855.783), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch))[1]), vec2(((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch))[0], _GLF_FUZZED((-2070.9385 / 3026.7872))), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0))), mix(vec2((_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0))))[0], (_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0))))[1]), vec2(_GLF_FUZZED(5.5), _GLF_FUZZED(-6682.5011)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, _GLF_IDENTITY(1.4, float(mat2x3(1.4, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(exp(0.0), 0.0)), dot(vec2(1.0, 0.0), vec2(exp(0.0), 0.0))), 0.0, _GLF_IDENTITY(tan(log(1.0)), clamp(_GLF_IDENTITY(tan(log(1.0)), (false ? _GLF_FUZZED(30.12) : tan(log(1.0)))), tan(log(1.0)), tan(log(1.0))))))), -4225.1624).yy) : injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))))), injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))))), injectionSwitch), vec2(_GLF_IDENTITY(mat3x4(max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))))), injectionSwitch), 1.0, 1.0, sqrt(0.0), 0.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0), (false ? _GLF_FUZZED(mat3x4(-35.64, 430.653, 288.244, -1.5, 592.585, 56.55, 73.31, 8.0, -7.8, 4.8, -4684.4386, -3286.0141)) : mat3x4(max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)), (_GLF_IDENTITY(true, true && (true)) ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))))), injectionSwitch), 1.0, 1.0, sqrt(0.0), 0.0, tan(0.0), 0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(669.246)), float(1.0), bool(true))), 0.0, 1.0)))))).y, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))))), injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))))), injectionSwitch)).y, 1.0 * (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(vec2(956.635, _GLF_IDENTITY(5.0, (_GLF_IDENTITY(5.0, clamp(5.0, 5.0, 5.0))) / 1.0)), (_GLF_IDENTITY(vec2(956.635, _GLF_IDENTITY(5.0, (_GLF_IDENTITY(5.0, clamp(5.0, 5.0, 5.0))) / 1.0)), min(vec2(956.635, _GLF_IDENTITY(5.0, (_GLF_IDENTITY(5.0, clamp(5.0, 5.0, 5.0))) / 1.0)), _GLF_IDENTITY(vec2(956.635, _GLF_IDENTITY(5.0, (_GLF_IDENTITY(5.0, clamp(5.0, 5.0, 5.0))) / 1.0)), (vec2(956.635, _GLF_IDENTITY(5.0, (_GLF_IDENTITY(5.0, clamp(5.0, 5.0, 5.0))) / 1.0))) / vec2(1.0, 1.0))))) - vec2(0.0, 0.0)), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))))), injectionSwitch)).y)))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))))), injectionSwitch)).y, min(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-9.1))), 0.0, 1.0, 0.0, 1.0, 0.0)), mix(float(_GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-9.1))), 0.0, 1.0, 0.0, 1.0, 0.0)), clamp(float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-9.1))), 0.0, 1.0, 0.0, 1.0, 0.0)), float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-9.1))), 0.0, 1.0, 0.0, 1.0, 0.0)), float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-9.1))), 0.0, 1.0, 0.0, 1.0, 0.0))))), float(_GLF_FUZZED(-2187.9935)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch), mix(vec2(_GLF_FUZZED(-855.783), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch))[1]), vec2(((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch))[0], _GLF_FUZZED((-2070.9385 / 3026.7872))), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0))), mix(vec2((_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0))))[0], (_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0))))[1]), vec2(_GLF_FUZZED(5.5), _GLF_FUZZED(-6682.5011)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, _GLF_IDENTITY(1.4, float(mat2x3(1.4, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(exp(0.0), 0.0)), dot(vec2(1.0, 0.0), vec2(exp(0.0), 0.0))), 0.0, _GLF_IDENTITY(tan(log(1.0)), clamp(_GLF_IDENTITY(tan(log(1.0)), (false ? _GLF_FUZZED(30.12) : tan(log(1.0)))), tan(log(1.0)), tan(log(1.0))))))), -4225.1624).yy) : injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))))), injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))))), injectionSwitch), vec2(_GLF_IDENTITY(mat3x4(max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))))), injectionSwitch), 1.0, 1.0, sqrt(0.0), 0.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0), (false ? _GLF_FUZZED(mat3x4(-35.64, 430.653, 288.244, -1.5, 592.585, 56.55, 73.31, 8.0, -7.8, 4.8, -4684.4386, -3286.0141)) : mat3x4(max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)), (_GLF_IDENTITY(true, true && (true)) ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))))), injectionSwitch), 1.0, 1.0, sqrt(0.0), 0.0, tan(0.0), 0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(669.246)), float(1.0), bool(true))), 0.0, 1.0)))))).y, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))))), injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))))), injectionSwitch)).y, 1.0 * (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(vec2(956.635, _GLF_IDENTITY(5.0, (_GLF_IDENTITY(5.0, clamp(5.0, 5.0, 5.0))) / 1.0)), (_GLF_IDENTITY(vec2(956.635, _GLF_IDENTITY(5.0, (_GLF_IDENTITY(5.0, clamp(5.0, 5.0, 5.0))) / 1.0)), min(vec2(956.635, _GLF_IDENTITY(5.0, (_GLF_IDENTITY(5.0, clamp(5.0, 5.0, 5.0))) / 1.0)), _GLF_IDENTITY(vec2(956.635, _GLF_IDENTITY(5.0, (_GLF_IDENTITY(5.0, clamp(5.0, 5.0, 5.0))) / 1.0)), (vec2(956.635, _GLF_IDENTITY(5.0, (_GLF_IDENTITY(5.0, clamp(5.0, 5.0, 5.0))) / 1.0))) / vec2(1.0, 1.0))))) - vec2(0.0, 0.0)), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))))), injectionSwitch)).y)))))))), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)), (_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))), _GLF_IDENTITY(mat2(1.0) * (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0))))), mix(vec2((mat2(1.0) * (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0))))))[0], _GLF_FUZZED(-96.65)), vec2(_GLF_FUZZED(2526.1445), (mat2(1.0) * (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0))))))[1]), bvec2(false, true)))))), injectionSwitch)).y, min(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-9.1))), 0.0, 1.0, 0.0, 1.0, 0.0)), mix(float(_GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-9.1))), 0.0, 1.0, 0.0, 1.0, 0.0)), clamp(float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-9.1))), 0.0, 1.0, 0.0, 1.0, 0.0)), float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-83.89) : injectionSwitch.y)) : _GLF_FUZZED(-9.1))), 0.0, 1.0, 0.0, 1.0, 0.0)), float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-9.1))), 0.0, 1.0, 0.0, 1.0, 0.0))))), float(_GLF_FUZZED(-2187.9935)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch), mix(vec2(_GLF_FUZZED(-855.783), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch))[1]), vec2(((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch))[0], _GLF_FUZZED((-2070.9385 / _GLF_IDENTITY(3026.7872, max(3026.7872, _GLF_IDENTITY(3026.7872, min(3026.7872, 3026.7872))))))), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_IDENTITY(956.635, clamp(956.635, 956.635, _GLF_IDENTITY(956.635, (956.635) - 0.0))), 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0))), mix(vec2(_GLF_IDENTITY((_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))), min((_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))), (_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))))) : _GLF_FUZZED(vec2(-6.9, 1594.3284))))[0], (_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0))))[1]), vec2(_GLF_FUZZED(5.5), _GLF_FUZZED(-6682.5011)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, _GLF_IDENTITY(1.4, float(mat2x3(1.4, 1.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(exp(0.0), 0.0)), 0.0 + (dot(vec2(1.0, 0.0), vec2(exp(0.0), 0.0)))), dot(vec2(1.0, 0.0), vec2(exp(0.0), 0.0))), 0.0, _GLF_IDENTITY(tan(log(1.0)), clamp(_GLF_IDENTITY(tan(log(1.0)), (false ? _GLF_FUZZED(30.12) : tan(log(1.0)))), tan(log(1.0)), tan(log(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, float(vec4(1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))))), 1.0, 1.0))))))))), -4225.1624).yy) : injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))))), injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))))), injectionSwitch), vec2(_GLF_IDENTITY(mat3x4(max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)), mix(vec2(_GLF_FUZZED((+ -25.97)), _GLF_FUZZED(43.87)), vec2((_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)))[0], (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)))[1]), bvec2(true, true))))), (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))))), injectionSwitch), 1.0, 1.0, sqrt(0.0), 0.0, tan(0.0), _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, _GLF_IDENTITY(1.0, (1.0) + determinant(mat2(0.0, 0.0, 1.0, 0.0))), 0.0, 1.0), (false ? _GLF_FUZZED(mat3x4(-35.64, 430.653, 288.244, -1.5, 592.585, 56.55, 73.31, 8.0, -7.8, 4.8, -4684.4386, -3286.0141)) : mat3x4(max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)), (_GLF_IDENTITY(true, true && (true)) ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(956.635, _GLF_IDENTITY(5.0, (_GLF_IDENTITY(5.0, clamp(5.0, 5.0, _GLF_IDENTITY(5.0, (false ? _GLF_FUZZED(-4.1) : 5.0))))) / 1.0)), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))))), injectionSwitch), 1.0, 1.0, sqrt(0.0), 0.0, tan(0.0), 0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(669.246)), float(1.0), bool(true))), 0.0, 1.0)))))).y, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))))), injectionSwitch), min(max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))))), injectionSwitch), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))))), injectionSwitch), max(max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))))), injectionSwitch), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))))), injectionSwitch)))))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(vec2(956.635, 5.0), vec2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0) * (vec2(956.635, _GLF_IDENTITY(5.0, (5.0) - 0.0))))))), injectionSwitch)).y, 1.0 * (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(vec2(956.635, _GLF_IDENTITY(5.0, (_GLF_IDENTITY(5.0, clamp(5.0, 5.0, 5.0))) / 1.0)), (_GLF_IDENTITY(vec2(956.635, _GLF_IDENTITY(5.0, (_GLF_IDENTITY(5.0, clamp(5.0, 5.0, 5.0))) / 1.0)), min(vec2(956.635, _GLF_IDENTITY(5.0, (_GLF_IDENTITY(5.0, clamp(5.0, 5.0, 5.0))) / 1.0)), _GLF_IDENTITY(vec2(956.635, _GLF_IDENTITY(5.0, (_GLF_IDENTITY(5.0, clamp(5.0, 5.0, 5.0))) / 1.0)), (vec2(956.635, _GLF_IDENTITY(5.0, (_GLF_IDENTITY(5.0, clamp(5.0, _GLF_IDENTITY(5.0, min(5.0, 5.0)), 5.0))) / 1.0))) / vec2(1.0, 1.0))))) - vec2(0.0, 0.0)), vec2(1.0, 1.0) * (vec2(956.635, 5.0)))))), injectionSwitch)).y))))))))))) && true)))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy) : injectionSwitch)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))) : _GLF_FUZZED(vec2(956.635, 5.0)), (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))) : _GLF_FUZZED(vec2(956.635, 5.0))) / abs(vec2(1.0, 1.0))))), injectionSwitch)).y))), false, false, false)), (bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(7.5)), float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), bool(true))), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)) ? _GLF_IDENTITY(_GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy), mat2(1.0) * (_GLF_FUZZED(vec3(-17.18, 1.4, -4225.1624).yy))) : injectionSwitch)), (true ? injectionSwitch : _GLF_FUZZED(vec2(956.635, 5.0)))), injectionSwitch)).y))), false, false, false))) && true)))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   barrier();
                  }
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (4) - 0)))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))), int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))))), int(4))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 & 1) ^ 1)), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 & 1) ^ 1))))); _injected_loop_counter --)
                      {
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                      barrier();
                     barrier();
                    }
                  }
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 1.0, 1.0, cos(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, exp(0.0)), (mat4x3(injectionSwitch, 1.0, 1.0, cos(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, exp(0.0))) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), max(vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 1.0, 1.0, cos(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, exp(0.0)), (mat4x3(injectionSwitch, 1.0, 1.0, cos(0.0), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-2.5) : injectionSwitch.x))), 1.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, exp(0.0))) - mat4x3(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-2.3)))) / 1.0), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((-8.1 * -5.8))), float(0.0), bool(true))), 0.0, 0.0, 0.0))), vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, 1.0, 1.0, cos(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, _GLF_IDENTITY(length(vec4(0.0, 0.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(float(85314u))), float(length(vec4(0.0, 0.0, 0.0, 0.0))), bool(true))), 0.0, exp(0.0)), (mat4x3(injectionSwitch, 1.0, 1.0, cos(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, exp(0.0))) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))).y))); _GLF_IDENTITY(_injected_loop_counter ++, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (false ? _GLF_FUZZED(99632) : _injected_loop_counter ++)), (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter ++)))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   barrier();
                  }
                }
               do
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-41.49) : injectionSwitch.y)), injectionSwitch.y))))))))))) && true));
               barrier();
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), (false || (injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), mix(vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])))))))[1]), vec2(_GLF_FUZZED((-6.8 - 40.81)), _GLF_FUZZED((-8.2))), bvec2(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))) || false)))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, true && (false))), (injectionSwitch.x > injectionSwitch.y))));
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), _GLF_IDENTITY(int(1), (int(1)) | 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - _GLF_ZERO(0.0, injectionSwitch.x))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))))); _injected_loop_counter --)
  {
   atomicStore(buf[virtual_gid], read, 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) < (0 ^ 1)); _injected_loop_counter ++)
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(0), int(0))) ^ 1)); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x > injectionSwitch.y) && true)))));
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
