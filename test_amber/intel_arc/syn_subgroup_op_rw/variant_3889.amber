#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) + vec2(0.0, 0.0)).y))))), bool(bvec4(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) + vec2(0.0, 0.0)).y))))), true, _GLF_IDENTITY(false, (false) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(_GLF_IDENTITY(int(6), (int(6)) / 1), int(6)))))), clamp(~ (~ (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(_GLF_IDENTITY(int(6), (int(6)) / 1), int(6)))))), ~ (~ (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(_GLF_IDENTITY(int(6), (int(6)) / 1), int(6)))))), ~ (~ (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(_GLF_IDENTITY(int(6), (int(6)) / 1), int(6)))))))))) >> _GLF_IDENTITY(int(6), int(6))) ^ 1)); _injected_loop_counter --)
            {
             if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, ! (! (false))) || (_GLF_DEAD(false))), (_GLF_DEAD(false)) || false)), bool(bvec3(true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true))) || false)), false, true))), true && (true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))), (_GLF_DEAD(false)) && true))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 1.0, abs(1.0), 0.0, 1.0, 0.0, 0.0)), min(vec2(mat2x4(injectionSwitch, 1.0, abs(1.0), 0.0, 1.0, 0.0, 0.0)), vec2(mat2x4(injectionSwitch, 1.0, abs(1.0), 0.0, 1.0, 0.0, 0.0))))).x > injectionSwitch.y)), (((injectionSwitch.x > injectionSwitch.y))) && true), (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (((injectionSwitch.x > injectionSwitch.y))) && true)) && true)) || false))) && _GLF_IDENTITY(true, true && (true))))))
              barrier();
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), ! (! (bool(bvec3(false, false, false)))))), (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (_GLF_IDENTITY(int(4), (int(4)) | 0)))))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), max(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 ^ (int(_GLF_ZERO(0.0, injectionSwitch.x)))), (1 ^ 0), 0, (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) * 1))) << _GLF_IDENTITY(int(8), int(8))))), min(int(ivec4(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 ^ (int(_GLF_ZERO(0.0, injectionSwitch.x)))), (1 ^ 0), 0, (_GLF_IDENTITY(0, 1 * (0)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), max(_GLF_IDENTITY(int(8), clamp(int(8), int(8), int(8))), int(8))))))), int(ivec4(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 ^ (int(_GLF_ZERO(0.0, injectionSwitch.x)))), (1 ^ 0), 0, (0 << _GLF_IDENTITY(int(8), int(8))))))))) | 0) << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 0)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) > 0))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))))); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), ! (! (! (_GLF_IDENTITY(false, false || (false))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))) * mat2(1.0)).x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))))) * mat2(1.0)))), _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0))))).x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(649.922)), float(injectionSwitch.y), bool(true))), injectionSwitch.y))), _GLF_IDENTITY(true, true && (true)) && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), mix(float(_GLF_FUZZED(649.922)), float(injectionSwitch.y), bool(true))), injectionSwitch.y)), true && (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 0.0))))).y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(649.922)), float(injectionSwitch.y), bool(true))), injectionSwitch.y))))), ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), mix(float(_GLF_FUZZED(649.922)), float(injectionSwitch.y), bool(true))), injectionSwitch.y)), true && (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 0.0))))).y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(649.922)), float(injectionSwitch.y), bool(true))), injectionSwitch.y)))))) || false)))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))))) * mat2(1.0)))), _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0))))).x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(649.922)), float(injectionSwitch.y), bool(true))), injectionSwitch.y))), _GLF_IDENTITY(true, true && (true)) && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), mix(float(_GLF_FUZZED(649.922)), float(injectionSwitch.y), bool(true))), injectionSwitch.y)), true && (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 0.0))))).y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(649.922)), float(injectionSwitch.y), bool(true))), injectionSwitch.y))))), ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), mix(float(_GLF_FUZZED(649.922)), float(injectionSwitch.y), bool(true))), injectionSwitch.y)), true && (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 0.0))))).y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(649.922)), float(injectionSwitch.y), bool(true))), injectionSwitch.y)))))) || false)))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))))) * mat2(1.0)))), _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0))))).x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(649.922)), float(injectionSwitch.y), bool(true))), injectionSwitch.y))), _GLF_IDENTITY(true, true && (true)) && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), mix(float(_GLF_FUZZED(649.922)), float(injectionSwitch.y), bool(true))), injectionSwitch.y)), true && (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 0.0))))).y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(649.922)), float(injectionSwitch.y), bool(true))), injectionSwitch.y))))), ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), mix(float(_GLF_FUZZED(649.922)), float(injectionSwitch.y), bool(true))), injectionSwitch.y)), true && (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 0.0))))).y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(649.922)), float(injectionSwitch.y), bool(true))), injectionSwitch.y)))))) || false)))), false || (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), (false ? _GLF_FUZZED(mat2(-96.35, 45.47, 32.04, 6672.6416)) : mat2(1.0))) * (injectionSwitch)))), max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))))) * mat2(1.0)))), _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0))))).x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(649.922)), float(injectionSwitch.y), bool(true))), injectionSwitch.y))), _GLF_IDENTITY(true, true && (true)) && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), mix(float(_GLF_FUZZED(649.922)), float(injectionSwitch.y), bool(true))), injectionSwitch.y)), true && (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(4469.7054, -7.6)) : injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 0.0))))).y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(649.922)), float(injectionSwitch.y), bool(true))), max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(649.922)), float(injectionSwitch.y), bool(true))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(649.922)), float(injectionSwitch.y), bool(true))))), injectionSwitch.y))))), ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), mix(float(_GLF_FUZZED(649.922)), float(injectionSwitch.y), bool(true))), injectionSwitch.y)), true && (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - tan(0.0)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 0.0))))).y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(649.922)), float(injectionSwitch.y), bool(true))), injectionSwitch.y)))))) || false))))))))))))) || false), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, mix(float(_GLF_FUZZED(649.922)), float(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(_GLF_IDENTITY(mat4(injectionSwitch.y, determinant(mat4(0.0, 0.0, 0.0, abs(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 0.0, sqrt(0.0), abs(0.0), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0), (mat4(injectionSwitch.y, determinant(mat4(0.0, 0.0, 0.0, abs(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 0.0, sqrt(0.0), abs(0.0), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), transpose(transpose(_GLF_IDENTITY(mat4(injectionSwitch.y, determinant(mat4(0.0, 0.0, 0.0, abs(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 0.0, sqrt(0.0), abs(0.0), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0), (mat4(injectionSwitch.y, determinant(mat4(0.0, 0.0, 0.0, abs(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 0.0, sqrt(0.0), abs(0.0), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))), bool(true))), injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(649.922)), float(injectionSwitch.y), bool(true))), injectionSwitch.y)), float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(649.922)), float(injectionSwitch.y), bool(true))), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, 1.0))), 0.0, 0.0, 0.0, 0.0), (mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, 1.0))), 0.0, 0.0, 0.0, 0.0)) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).y)), 1.0, 1.0, 1.0, 1.0, 1.0)))) / 1.0)), true && ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(649.922)), float(injectionSwitch.y), bool(true))), _GLF_IDENTITY(injectionSwitch, tan(vec2(0.0, 0.0)) + (injectionSwitch)).y)), (_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(649.922)), _GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y), mix(float(_GLF_FUZZED(-7191.3255)), float(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)), bool(true))), _GLF_IDENTITY(bool(_GLF_IDENTITY(true, false || (true))), ! (! (_GLF_IDENTITY(bool(true), ! (! _GLF_IDENTITY((_GLF_IDENTITY(bool(true), bool(bvec2(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), false || (bool(bvec2(_GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), true)))))), false)))), true && (_GLF_IDENTITY((_GLF_IDENTITY(bool(true), bool(bvec2(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), false || (bool(bvec2(true, true)))))), false)))), ((_GLF_IDENTITY(bool(true), bool(bvec2(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(true, true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(bvec2(true, true))), bvec2(bvec4(bvec2(bvec2(bvec2(true, true))), false, false))), true, false))))), false || (bool(bvec2(true, true)))))), false))))) && true)))))))))), injectionSwitch.y))) / 1.0), (_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(649.922)), float(injectionSwitch.y), bool(true))), _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(649.922)), min(float(_GLF_FUZZED(649.922)), _GLF_IDENTITY(float(_GLF_FUZZED(649.922)), (float(_GLF_FUZZED(649.922))) / 1.0))), float(injectionSwitch.y), bool(true))), 0.0, abs(1.0), 1.0, tan(0.0), 1.0)), mix(float(_GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(649.922)), float(injectionSwitch.y), bool(true))), 0.0, abs(1.0), 1.0, tan(0.0), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(vec4(-33.45, -9.8, 9.6, -534.381).y)), bool(false))))), min(float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(649.922)), float(injectionSwitch.y), bool(true))), 0.0, abs(1.0), 1.0, tan(0.0), 1.0)), float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(649.922)), float(injectionSwitch.y), bool(_GLF_IDENTITY(true, false || (true))))), 0.0, abs(1.0), 1.0, tan(0.0), 1.0))))), float(_GLF_FUZZED(vec4(-5.1, -5328.1626, 7.7, -8.7).w)), bool(false)))), injectionSwitch.y))) / 1.0)))))) || false)) && _GLF_IDENTITY(true, true && (true)))))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])))).x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])))).x > injectionSwitch.y))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
        barrier();
      }
    }
   else
    {
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bvec2(false, false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bvec2(false, false))))), ((! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))) && true)), true && (! (_GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bvec2(false, false))))), ((! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))) && true)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))))
  barrier();
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(injectionSwitch), mix(vec2((vec2(injectionSwitch))[0], (vec2(injectionSwitch))[1]), vec2(_GLF_FUZZED(8.3), _GLF_FUZZED(896.576)), bvec2(false, false))))).y))) || false, _GLF_IDENTITY(bool(bvec4((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(injectionSwitch), mix(vec2((vec2(injectionSwitch))[0], (vec2(injectionSwitch))[1]), vec2(_GLF_FUZZED(8.3), _GLF_FUZZED(896.576)), bvec2(false, false))))).y))) || false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), (_GLF_IDENTITY(bool(bvec4((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(injectionSwitch), mix(vec2((vec2(injectionSwitch))[0], (vec2(injectionSwitch))[1]), vec2(_GLF_FUZZED(8.3), _GLF_FUZZED(896.576)), bvec2(false, false))))).y))) || false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (! (bool(bvec4((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(injectionSwitch), mix(vec2((vec2(injectionSwitch))[0], (vec2(injectionSwitch))[1]), vec2(_GLF_FUZZED(8.3), _GLF_FUZZED(896.576)), bvec2(false, false))))).y))) || false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))) || false)))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       barrier();
      }
    }
  }
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) || false)), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         for(int _injected_loop_counter = _GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), ((_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> (0 | 0))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), (false ? _GLF_FUZZED(-6476) : int(8))), max(int(8), int(8))), int(8)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), max(int(8), int(8))), int(8))))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, min(_GLF_IDENTITY(8, min(8, 8)), 8))) | (_GLF_IDENTITY(8, (8) ^ _GLF_IDENTITY(0, 0 | (0)))))), _GLF_IDENTITY(int(8), (int(8)) >> 0)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(72.01))))) | (0 << _GLF_IDENTITY(int(8), int(8))))) | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))), 0 ^ ((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), (0 << _GLF_IDENTITY(int(8), int(8))) << 0))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> (0 | 0))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), max(int(8), int(8))), int(8))))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, min(_GLF_IDENTITY(8, min(8, 8)), 8))) | (_GLF_IDENTITY(8, (8) ^ _GLF_IDENTITY(0, 0 | (0)))))), _GLF_IDENTITY(int(8), (int(8)) >> 0)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(72.01))))) | (0 << _GLF_IDENTITY(int(8), int(8))))) | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))), 0 ^ ((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), (0 << _GLF_IDENTITY(int(8), int(8))) << 0))), clamp(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> (0 | 0))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), max(int(8), int(8))), int(8))))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, min(_GLF_IDENTITY(8, min(8, 8)), 8))) | (_GLF_IDENTITY(8, (8) ^ _GLF_IDENTITY(0, 0 | (0)))))), _GLF_IDENTITY(int(8), (int(8)) >> 0)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(72.01))))) | (0 << _GLF_IDENTITY(int(8), int(8))))) | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))), 0 ^ ((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), (0 << _GLF_IDENTITY(int(8), int(8))) << 0))), _GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> (0 | 0))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), max(int(8), int(8))), int(8))))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, min(_GLF_IDENTITY(8, min(8, 8)), 8))) | (_GLF_IDENTITY(8, (8) ^ _GLF_IDENTITY(0, 0 | (0)))))), _GLF_IDENTITY(int(8), (int(8)) >> 0)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(72.01))))) | (0 << _GLF_IDENTITY(int(8), int(8))))) | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))), 0 ^ ((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), (0 << _GLF_IDENTITY(int(8), int(8))) << 0))), _GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> (0 | 0))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), max(int(8), int(8))), int(8))))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, min(_GLF_IDENTITY(8, min(8, 8)), 8))) | (_GLF_IDENTITY(8, (8) ^ _GLF_IDENTITY(0, 0 | (0)))))), _GLF_IDENTITY(int(8), (int(8)) >> 0)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(72.01))))) | (0 << _GLF_IDENTITY(int(8), int(8))))) | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))), 0 ^ ((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), (0 << _GLF_IDENTITY(int(8), int(8))) << 0))), max(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> (0 | 0))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), max(int(8), int(8))), int(8))))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, min(_GLF_IDENTITY(8, min(8, 8)), 8))) | (_GLF_IDENTITY(8, (8) ^ _GLF_IDENTITY(0, 0 | (0)))))), _GLF_IDENTITY(int(8), (int(8)) >> 0)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(72.01))))) | (0 << _GLF_IDENTITY(int(8), int(8))))) | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))), 0 ^ ((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), (0 << _GLF_IDENTITY(int(8), int(8))) << 0))), _GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> (0 | 0))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), max(int(8), int(8))), int(8))))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, min(_GLF_IDENTITY(8, min(8, 8)), 8))) | (_GLF_IDENTITY(8, (8) ^ _GLF_IDENTITY(0, 0 | (0)))))), _GLF_IDENTITY(int(8), (int(8)) >> 0)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(72.01))))) | (0 << _GLF_IDENTITY(int(8), int(8))))) | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))), 0 ^ ((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), (0 << _GLF_IDENTITY(int(8), int(8))) << 0)))))))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> (0 | 0))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), max(int(8), int(8))), int(8))))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, min(_GLF_IDENTITY(8, min(8, 8)), 8))) | (_GLF_IDENTITY(8, (8) ^ _GLF_IDENTITY(0, 0 | (0)))))), _GLF_IDENTITY(int(8), (int(8)) >> 0)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(72.01))))) | (0 << _GLF_IDENTITY(int(8), int(8))))) | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))), 0 ^ ((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), (0 << _GLF_IDENTITY(int(8), int(8))) << 0)))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> (0 | 0))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), max(int(8), int(8))), int(8))))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, min(_GLF_IDENTITY(8, min(8, 8)), 8))) | (_GLF_IDENTITY(8, (8) ^ _GLF_IDENTITY(0, 0 | (0)))))), _GLF_IDENTITY(int(8), (int(8)) >> 0)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(72.01))))) | (0 << _GLF_IDENTITY(int(8), int(8))))) | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))), 0 ^ ((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), (0 << _GLF_IDENTITY(int(8), int(8))) << 0))), clamp(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> (0 | 0))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), max(int(8), int(8))), int(8))))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, min(_GLF_IDENTITY(8, min(8, 8)), 8))) | (_GLF_IDENTITY(8, (8) ^ _GLF_IDENTITY(0, 0 | (0)))))), _GLF_IDENTITY(int(8), (int(8)) >> 0)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(72.01))))) | (0 << _GLF_IDENTITY(int(8), int(8))))) | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))), 0 ^ ((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), (0 << _GLF_IDENTITY(int(8), int(8))) << 0))), _GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> (0 | 0))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), max(int(8), int(8))), int(8))))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, min(_GLF_IDENTITY(8, min(8, 8)), 8))) | (_GLF_IDENTITY(8, (8) ^ _GLF_IDENTITY(0, 0 | (0)))))), _GLF_IDENTITY(int(8), (int(8)) >> 0)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(72.01))))) | (0 << _GLF_IDENTITY(int(8), int(8))))) | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))), 0 ^ ((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), (0 << _GLF_IDENTITY(int(8), int(8))) << 0))), _GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> (0 | 0))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), max(int(8), int(8))), int(8))))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, min(_GLF_IDENTITY(8, min(8, 8)), 8))) | (_GLF_IDENTITY(8, (8) ^ _GLF_IDENTITY(0, 0 | (0)))))), _GLF_IDENTITY(int(8), (int(8)) >> 0)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(72.01))))) | (0 << _GLF_IDENTITY(int(8), int(8))))) | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))), 0 ^ ((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), (0 << _GLF_IDENTITY(int(8), int(8))) << 0))), max(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> (0 | 0))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), max(int(8), int(8))), int(8))))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, min(_GLF_IDENTITY(8, min(8, 8)), 8))) | (_GLF_IDENTITY(8, (8) ^ _GLF_IDENTITY(0, 0 | (0)))))), _GLF_IDENTITY(int(8), (int(8)) >> 0)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(72.01))))) | (0 << _GLF_IDENTITY(int(8), int(8))))) | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))), 0 ^ ((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), (0 << _GLF_IDENTITY(int(8), int(8))) << 0))), _GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> (0 | 0))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), max(int(8), int(8))), int(8))))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, min(_GLF_IDENTITY(8, min(8, 8)), 8))) | (_GLF_IDENTITY(8, (8) ^ _GLF_IDENTITY(0, 0 | (0)))))), _GLF_IDENTITY(int(8), (int(8)) >> 0)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(72.01))))) | (0 << _GLF_IDENTITY(int(8), int(8))))) | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))), 0 ^ ((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), (0 << _GLF_IDENTITY(int(8), int(8))) << 0)))))))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> (0 | 0))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), max(int(8), int(8))), int(8))))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, min(_GLF_IDENTITY(8, min(8, 8)), 8))) | (_GLF_IDENTITY(8, (8) ^ _GLF_IDENTITY(0, 0 | (0)))))), _GLF_IDENTITY(int(8), (int(8)) >> 0)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(72.01))))) | (0 << _GLF_IDENTITY(int(8), int(8))))) | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))), 0 ^ ((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), (0 << _GLF_IDENTITY(int(8), int(8))) << 0)))), (false ? _GLF_FUZZED(65049) : _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> (0 | 0))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), max(int(8), int(8))), int(8))))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, min(_GLF_IDENTITY(8, min(8, 8)), 8))) | (_GLF_IDENTITY(8, (8) ^ _GLF_IDENTITY(0, 0 | (0)))))), _GLF_IDENTITY(int(8), (int(8)) >> 0)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(72.01))))) | (0 << _GLF_IDENTITY(int(8), int(8))))) | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))), 0 ^ ((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), (0 << _GLF_IDENTITY(int(8), int(8))) << 0))), clamp(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> (0 | 0))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), max(int(8), int(8))), int(8))))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, min(_GLF_IDENTITY(8, min(8, 8)), 8))) | (_GLF_IDENTITY(8, (8) ^ _GLF_IDENTITY(0, 0 | (0)))))), _GLF_IDENTITY(int(8), (int(8)) >> 0)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(72.01))))) | (0 << _GLF_IDENTITY(int(8), int(8))))) | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))), 0 ^ ((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), (0 << _GLF_IDENTITY(int(8), int(8))) << 0))), _GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> (0 | 0))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), max(int(8), int(8))), int(8))))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, min(_GLF_IDENTITY(8, min(8, 8)), 8))) | (_GLF_IDENTITY(8, (8) ^ _GLF_IDENTITY(0, 0 | (0)))))), _GLF_IDENTITY(int(8), (int(8)) >> 0)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(72.01))))) | (0 << _GLF_IDENTITY(int(8), int(8))))) | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))), 0 ^ ((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), (0 << _GLF_IDENTITY(int(8), int(8))) << 0))), _GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> (0 | 0))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), max(int(8), int(8))), int(8))))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, min(_GLF_IDENTITY(8, min(8, 8)), 8))) | (_GLF_IDENTITY(8, (8) ^ _GLF_IDENTITY(0, 0 | (0)))))), _GLF_IDENTITY(int(8), (int(8)) >> 0)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(72.01))))) | (0 << _GLF_IDENTITY(int(8), int(8))))) | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))), 0 ^ ((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), (0 << _GLF_IDENTITY(int(8), int(8))) << 0))), max(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> (0 | 0))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), max(int(8), int(8))), int(8))))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, min(_GLF_IDENTITY(8, min(8, 8)), 8))) | (_GLF_IDENTITY(8, (8) ^ _GLF_IDENTITY(0, 0 | (0)))))), _GLF_IDENTITY(int(8), (int(8)) >> 0)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(72.01))))) | (0 << _GLF_IDENTITY(int(8), int(8))))) | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))), 0 ^ ((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), (0 << _GLF_IDENTITY(int(8), int(8))) << 0))), _GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> (0 | 0))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), max(int(8), int(8))), int(8))))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, min(_GLF_IDENTITY(8, min(8, 8)), 8))) | (_GLF_IDENTITY(8, (8) ^ _GLF_IDENTITY(0, 0 | (0)))))), _GLF_IDENTITY(int(8), (int(8)) >> 0)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(72.01))))) | (0 << _GLF_IDENTITY(int(8), int(8))))) | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))), 0 ^ ((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), (0 << _GLF_IDENTITY(int(8), int(8))) << 0)))))))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> (0 | 0))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), max(int(8), int(8))), int(8))))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, min(_GLF_IDENTITY(8, min(8, 8)), 8))) | (_GLF_IDENTITY(8, (8) ^ _GLF_IDENTITY(0, 0 | (0)))))), _GLF_IDENTITY(int(8), (int(8)) >> 0)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(72.01))))) | (0 << _GLF_IDENTITY(int(8), int(8))))) | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))), 0 ^ ((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), (0 << _GLF_IDENTITY(int(8), int(8))) << 0)))), 0 ^ ((_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> (0 | 0))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), max(int(8), int(8))), int(8))))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, min(_GLF_IDENTITY(8, min(8, 8)), 8))) | (_GLF_IDENTITY(8, (8) ^ _GLF_IDENTITY(0, 0 | (0)))))), _GLF_IDENTITY(int(8), (int(8)) >> 0)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(72.01))))) | (0 << _GLF_IDENTITY(int(8), int(8))))) | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))), 0 ^ ((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), (0 << _GLF_IDENTITY(int(8), int(8))) << 0))), clamp(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> (0 | 0))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), max(int(8), int(8))), int(8))))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, min(_GLF_IDENTITY(8, min(8, 8)), 8))) | (_GLF_IDENTITY(8, (8) ^ _GLF_IDENTITY(0, 0 | (0)))))), _GLF_IDENTITY(int(8), (int(8)) >> 0)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(72.01))))) | (0 << _GLF_IDENTITY(int(8), int(8))))) | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))), 0 ^ ((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), (0 << _GLF_IDENTITY(int(8), int(8))) << 0))), _GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> (0 | 0))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), max(int(8), int(8))), int(8))))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, min(_GLF_IDENTITY(8, min(8, 8)), 8))) | (_GLF_IDENTITY(8, (8) ^ _GLF_IDENTITY(0, 0 | (0)))))), _GLF_IDENTITY(int(8), (int(8)) >> 0)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(72.01))))) | (0 << _GLF_IDENTITY(int(8), int(8))))) | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))), 0 ^ ((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), (0 << _GLF_IDENTITY(int(8), int(8))) << 0))), _GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> (0 | 0))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), max(int(8), int(8))), int(8))))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, min(_GLF_IDENTITY(8, min(8, 8)), 8))) | (_GLF_IDENTITY(8, (8) ^ _GLF_IDENTITY(0, 0 | (0)))))), _GLF_IDENTITY(int(8), (int(8)) >> 0)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(72.01))))) | (0 << _GLF_IDENTITY(int(8), int(8))))) | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))), 0 ^ ((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), (0 << _GLF_IDENTITY(int(8), int(8))) << 0))), max(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> (0 | 0))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), max(int(8), int(8))), int(8))))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, min(_GLF_IDENTITY(8, min(8, 8)), 8))) | (_GLF_IDENTITY(8, (8) ^ _GLF_IDENTITY(0, 0 | (0)))))), _GLF_IDENTITY(int(8), (int(8)) >> 0)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(72.01))))) | (0 << _GLF_IDENTITY(int(8), int(8))))) | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))), 0 ^ ((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), (0 << _GLF_IDENTITY(int(8), int(8))) << 0))), _GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> (0 | 0))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), max(int(8), int(8))), int(8))))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, min(_GLF_IDENTITY(8, min(8, 8)), 8))) | (_GLF_IDENTITY(8, (8) ^ _GLF_IDENTITY(0, 0 | (0)))))), _GLF_IDENTITY(int(8), (int(8)) >> 0)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(72.01))))) | (0 << _GLF_IDENTITY(int(8), int(8))))) | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))), 0 ^ ((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), (0 << _GLF_IDENTITY(int(8), int(8))) << 0)))))))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> (0 | 0))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), int(8)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), max(int(8), int(8))), max(int(8), int(8))), int(8))))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, min(_GLF_IDENTITY(8, min(8, 8)), 8))) | (_GLF_IDENTITY(8, (8) ^ _GLF_IDENTITY(0, 0 | (0)))))), _GLF_IDENTITY(int(8), (int(8)) >> 0)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(72.01))))) | (0 << _GLF_IDENTITY(int(8), int(8))))) | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))), 0 ^ ((int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))) | (ivec2(_GLF_IDENTITY(8, max(8, 8)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))), int(8))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 + (0)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), (0 << _GLF_IDENTITY(int(8), int(8))) << 0)))))))))))))) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           else
            {
            }
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, true)))) && true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1]))))), vec2(_GLF_FUZZED(452.958), _GLF_FUZZED(-752.394)), bvec2(false, false))).y : _GLF_FUZZED(_GLF_IDENTITY(3.7, (false ? _GLF_FUZZED(-32.02) : 3.7)))))))))
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) + (0 << _GLF_IDENTITY(int(3), int(3)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
           barrier();
           for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))), bool(bvec4(_GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), (bool(bool(_GLF_DEAD(false)))) || false), false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))), 0.0, 0.0, 1.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, log(1.0), 1.0, 1.0, 0.0, 1.0)), 1.0))).y, mix(float(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))), 0.0, 0.0, 1.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, log(1.0), 1.0, 1.0, 0.0, 1.0)), 1.0))).y), float(_GLF_FUZZED(39.99)), bool(false))), bool(bool(injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))), 0.0, 0.0, 1.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, log(1.0), 1.0, 1.0, 0.0, 1.0)), 1.0))).y, mix(float(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))), 0.0, 0.0, 1.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, log(1.0), 1.0, 1.0, 0.0, 1.0)), 1.0))).y), float(_GLF_FUZZED(39.99)), bool(false))))))))))), false || (bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false))))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
            barrier();
           barrier();
          }
         barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)), 0u), uvec2(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)), 0u), (true ? uvec2(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)), 0u) : _GLF_FUZZED(uvec2(171954u, 28942u))))))))), clamp(workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) * _GLF_IDENTITY(1u, uint(uvec2(1u, 0u)))), _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)) + subgroup_base, _GLF_IDENTITY(workgroup_base + subgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base + subgroup_base), (~ (workgroup_base + subgroup_base)) << (1u ^ 1u)))))) + ((subgroup_local_id + 1) % subgroup_size);
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) * 1))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), _GLF_IDENTITY((bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))) && true, ! (_GLF_IDENTITY(! ((bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))) && true), false || (! ((bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))) && true)))))))))
      barrier();
    }
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if((subgroup_local_id % 2) == _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (0), (false ? _GLF_FUZZED(mix(-76150, 30816, true)) : ~ (0))), _GLF_IDENTITY((~ (0)), min((~ (0)), (~ (0)))) | (~ _GLF_IDENTITY((0), ((0)) | ((0))))))), max(0, 0)))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               subgroupAll(false);
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _GLF_IDENTITY(_injected_loop_counter ++, ~ (_GLF_IDENTITY(~ (_injected_loop_counter ++), 0 ^ (~ (_injected_loop_counter ++))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), injectionSwitch)).y))))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8962.9155), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-7851.5126)), bvec2(true, false))).x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec4(bvec3(bvec3(bvec3(false, true, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) << 0) | 1)); _GLF_IDENTITY(_injected_loop_counter ++, 0 | (_GLF_IDENTITY(_injected_loop_counter ++, (false ? _GLF_FUZZED((mat4(321.994, 18.31, 85.42, -3.0, -537.580, -9764.7823, 6.7, -831.578, 3.6, -54.47, 7345.9404, -2.5, -37.37, 5.8, 1.3, 7414.6278) , 91547)) : _injected_loop_counter ++)))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED(-24321))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))))))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, clamp(3, 3, 3))), _GLF_IDENTITY(min(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(int(int(3)))), (_GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) * 1)), int(int(int(3))))) - (0 >> _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, (8) >> 0)))))), clamp(_GLF_IDENTITY(min(int(3), _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(int(int(3)), (int(int(3))) - 0)))), clamp(_GLF_IDENTITY(min(int(3), _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(int(int(3)), (int(int(3))) - 0)))), (min(int(3), _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(int(int(3)), (int(int(3))) - 0))))) * 1), min(int(3), _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(int(int(3)), (int(int(3))) - 0)))), min(int(3), _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(int(int(3)), (int(int(3))) - 0)))))), min(int(3), _GLF_IDENTITY(int(3), int(int(int(3))))), min(int(3), _GLF_IDENTITY(int(3), int(int(int(3)))))))))), 0 | (((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), min(int(3), _GLF_IDENTITY(int(3), int(int(int(3)))))))))), int(int(_GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), int(ivec2(_GLF_IDENTITY(int(3), int(3)), 0))), 0, (1 & 1), (1 ^ 1))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY(min(int(3), _GLF_IDENTITY(int(3), int(int(int(3))))), clamp(min(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(int(int(3))), 0 ^ (int(int(int(3))))))), min(int(3), _GLF_IDENTITY(int(3), int(int(int(3))))), min(int(3), _GLF_IDENTITY(int(3), int(int(int(3)))))))))), 0 | (((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) << 0)), _GLF_IDENTITY(_GLF_IDENTITY(min(int(3), _GLF_IDENTITY(int(3), int(int(int(3))))), (_GLF_IDENTITY(min(int(3), _GLF_IDENTITY(int(3), int(int(int(3))))), clamp(_GLF_IDENTITY(min(int(3), _GLF_IDENTITY(int(3), int(int(int(3))))), (min(int(3), _GLF_IDENTITY(int(3), int(int(int(3)))))) | 0), min(int(3), _GLF_IDENTITY(int(3), int(int(int(3))))), min(int(3), _GLF_IDENTITY(int(3), int(int(int(3)))))))) >> 0), max(_GLF_IDENTITY(min(int(3), _GLF_IDENTITY(int(3), int(int(int(3))))), (_GLF_IDENTITY(min(int(3), _GLF_IDENTITY(int(3), int(int(int(3))))), clamp(_GLF_IDENTITY(min(int(3), _GLF_IDENTITY(int(3), int(int(int(3))))), (min(int(3), _GLF_IDENTITY(int(3), int(int(int(3)))))) | 0), min(int(3), _GLF_IDENTITY(int(3), int(int(int(3))))), min(int(3), _GLF_IDENTITY(int(3), int(int(int(3)))))))) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(min(int(3), _GLF_IDENTITY(int(3), int(int(int(3))))), (_GLF_IDENTITY(min(int(3), _GLF_IDENTITY(int(3), int(int(int(3))))), clamp(_GLF_IDENTITY(min(int(3), _GLF_IDENTITY(int(3), int(int(int(3))))), (min(int(3), _GLF_IDENTITY(int(3), int(int(int(3)))))) | 0), min(int(3), _GLF_IDENTITY(int(3), int(int(int(3))))), min(int(3), _GLF_IDENTITY(int(3), int(int(int(3)))))))) >> 0), 1 * (_GLF_IDENTITY(min(int(3), _GLF_IDENTITY(int(3), int(int(int(3))))), (_GLF_IDENTITY(min(int(3), _GLF_IDENTITY(int(3), int(int(int(3))))), clamp(_GLF_IDENTITY(min(int(3), _GLF_IDENTITY(int(3), int(int(int(3))))), (min(int(3), _GLF_IDENTITY(int(3), int(int(int(3)))))) | 0), min(int(3), _GLF_IDENTITY(int(3), int(int(int(3))))), min(int(3), _GLF_IDENTITY(int(3), int(int(int(3)))))))) >> 0)))))))))))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, bool(bool(_injected_loop_counter != 1)))); _injected_loop_counter ++)
          {
           barrier();
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       for(int _injected_loop_counter = (1 | ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)))))
        barrier();
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), max(int(2), int(2)))) << 0))))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       subgroupAll(false);
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
      {
       barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6726.4331)), float(injectionSwitch.x), bool(true))), determinant(mat4(1.0, 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), max(_GLF_IDENTITY(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), min(_GLF_IDENTITY(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), mix(float(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0))), float(_GLF_FUZZED(-844.949)), bool(false))), _GLF_IDENTITY(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), (true ? determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)) : _GLF_FUZZED(9.2))))), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), 0.0, 1.0, 1.0, 1.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)), exp(0.0), determinant(mat4(1.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)), 1.0))) > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(_GLF_IDENTITY(bvec2(! ((false)), false), bvec2(bvec4(bvec2(! ((false)), false), false, true))))))))))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   subgroupBarrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), false)))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false), true, true, false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
      }
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-4.0))) > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
      }
    }
  }
 atomicStore(buf[virtual_gid], read, 4, _GLF_IDENTITY(64, min(_GLF_IDENTITY(64, (64) << 0), 64)), 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
