#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_10 {
 mat4x3 _f0;
 uint workgroup_id;
} ;

struct _GLF_struct_7 {
 ivec4 _f0;
 vec2 _f1;
 bvec4 _f2;
 uvec3 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_6 {
 vec4 _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_5 {
 bvec3 _f0;
 mat4x3 _f1;
 vec3 _f2;
 mat4x3 _f3;
 float _f4;
} ;

struct _GLF_struct_4 {
 int _f0;
 uvec3 _f1;
 uvec2 _f2;
 ivec4 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_8 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_6 _f2;
 float _f3;
 bvec3 _f4;
 bvec4 _f5;
 _GLF_struct_7 _f6;
 uint num_workgroup;
} ;

struct _GLF_struct_2 {
 bool _f0;
 mat4x2 _f1;
 mat2x3 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_1 {
 mat2x4 _f0;
 uint _f1;
 vec3 _f2;
} ;

struct _GLF_struct_0 {
 ivec3 _f0;
 mat4x2 _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_3 {
 mat4x2 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
 int _f3;
 _GLF_struct_2 _f4;
} ;

struct _GLF_struct_9 {
 ivec4 _f0;
 vec3 _f1;
 _GLF_struct_3 _f2;
 _GLF_struct_8 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size;
 uvec4 GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_4_2_1_13next_virtual_gidreadsubgroup_basesubgroup_base;
 uvec2 GLF_merged2_0_1_4_1_1_13readsubgroup_base;
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size;
 uvec3 GLF_merged3_0_1_16_1_1_4_2_1_13next_virtual_gidreadsubgroup_base;
 do
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) ^ 0), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (false ? _GLF_FUZZED(-67889) : int(5)))))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY((1 | 1), ((1 | 1)) | ((1 | 1))), (_GLF_IDENTITY(_GLF_IDENTITY((1 | 1), ((1 | 1)) >> 0), ((1 | 1)) | ((1 | 1)))) * int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter))))), (int(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)))))) / 1)) | 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(int(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_IDENTITY(int(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter))))), 0 + (int(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter))))))))))))) != 0); _injected_loop_counter --)
          {
           _GLF_IDENTITY(GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_4_2_1_13next_virtual_gidreadsubgroup_basesubgroup_base.xyz = GLF_merged3_0_1_16_1_1_4_2_1_13next_virtual_gidreadsubgroup_base, (GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_4_2_1_13next_virtual_gidreadsubgroup_basesubgroup_base.xyz = GLF_merged3_0_1_16_1_1_4_2_1_13next_virtual_gidreadsubgroup_base) + uvec3(0u, 0u, 0u));
          }
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, 1))) != 1); _injected_loop_counter ++)
  {
   do
    {
     GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.w = _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u);
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
    {
     GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size.x = subgroup_local_id;
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), ! (! (! (false))))) || false)))))
  {
  }
 else
  {
   do
    {
     GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z = GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size.x;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(ivec4(1), vec3(1.0), _GLF_struct_3(mat4x2(1.0), _GLF_struct_0(ivec3(1), mat4x2(1.0), mat2x3(1.0)), _GLF_struct_1(mat2x4(_GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, float(mat3(1.0, abs(1.0), 1.0, 1.0, 0.0, 0.0, 0.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), 1.0))))))))), _GLF_IDENTITY(1u, (1u) | (1u)), vec3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, float(mat3(1.0, exp(0.0), 0.0, determinant(mat4(1.0, log(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, abs(1.0), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0)), 1.0, 0.0, 0.0, 1.0, 1.0))))))), _GLF_IDENTITY(1, _GLF_IDENTITY((1), 0 ^ (_GLF_IDENTITY((1), max((1), (1))))) | (_GLF_IDENTITY(1, min(1, 1)))), _GLF_struct_2(true, mat4x2(1.0), mat2x3(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, _GLF_IDENTITY((false ? _GLF_FUZZED(-8.0) : 1.0), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))) ? (false ? _GLF_FUZZED(-8.0) : 1.0) : _GLF_FUZZED(1.1)))), 1.0))), _GLF_IDENTITY(mat2(1.0), mat2(mat2x4(_GLF_IDENTITY(mat2(1.0), mat2(1.0) * (mat2(1.0)))))))), _GLF_struct_8(_GLF_struct_4(1, uvec3(1u), uvec2(1u), ivec4(1), vec4(1.0)), _GLF_struct_5(bvec3(true), mat4x3(1.0), vec3(1.0), mat4x3(1.0), 1.0), _GLF_struct_6(_GLF_IDENTITY(vec4(1.0), max(_GLF_IDENTITY(vec4(1.0), (false ? _GLF_FUZZED(vec4(4.8, 2.1, -3.8, -4651.4391)) : _GLF_IDENTITY(vec4(_GLF_IDENTITY(1.0, 1.0 * (1.0))), max(vec4(1.0), vec4(1.0))))), vec4(1.0))), mat3x4(1.0)), _GLF_IDENTITY(1.0, float(vec3(1.0, round(length(normalize(vec4(1.0, 1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-797.851) : 1.0)), 1.0)))), 0.0))), _GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), true))), bvec4(true), _GLF_struct_7(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - (0 | 0)), ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(int(true))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-45556) : (1))) - (_GLF_IDENTITY(0 | 0, ~ (~ (0 | 0))))))))), vec2(1.0), bvec4(true), uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) << 0u), (1u) / 1u)), mat2(1.0)), _GLF_IDENTITY(gl_NumWorkGroups.x, min(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) + (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (uint(6u)) | (uint(6u)))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), clamp(_GLF_IDENTITY(0u, (0u) ^ 0u), 0u, 0u)) << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (uint(6u)) | (uint(6u))))) - 0u))), gl_NumWorkGroups.x))));
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size.z = _GLF_IDENTITY(workgroup_size, (workgroup_size) | 0u);
  }
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(mat4x3(1.0), gl_WorkGroupID.x);
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size.z, clamp(GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size.z, GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size.z, GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size.z)), ~ (~ (GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size.z))) * _GLF_IDENTITY(_GLF_struct_replacement_10.workgroup_id, (_GLF_struct_replacement_10.workgroup_id) + 0u);
 GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size.y = _GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base));
 uint subgroup_base = subgroup_id * GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.w;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))
  {
   GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_4_2_1_13next_virtual_gidreadsubgroup_basesubgroup_base.w = subgroup_base;
  }
 else
  {
  }
 _GLF_IDENTITY(GLF_merged2_0_1_4_1_1_13readsubgroup_base.y = GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_4_2_1_13next_virtual_gidreadsubgroup_basesubgroup_base.w, (GLF_merged2_0_1_4_1_1_13readsubgroup_base.y = GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_4_2_1_13next_virtual_gidreadsubgroup_basesubgroup_base.w) + 0u);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, true, true)))), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (bool(bvec3(true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(_GLF_FUZZED(-8157.3773), _GLF_FUZZED(-18.21)), vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))).x > injectionSwitch.y)), false))))))), bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))), false, true, true)))))))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))
                  {
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(828.561, -7.0)))).y))))
                      {
                       for(int _injected_loop_counter = _GLF_IDENTITY((82253 & 0), ((82253 & 0)) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                              {
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                {
                                 for(int _injected_loop_counter = ((_GLF_IDENTITY(((((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), (false ? _GLF_FUZZED(_injected_loop_counter) : ((((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), int(0))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
                                  {
                                   do
                                    {
                                     do
                                      {
                                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                        {
                                         do
                                          {
                                           GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.y = _GLF_IDENTITY(GLF_merged2_0_1_4_1_1_13readsubgroup_base, (GLF_merged2_0_1_4_1_1_13readsubgroup_base) ^ (uvec2(0u, 0u) >> _GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), uvec2(1u)), ~ (~ (_GLF_IDENTITY(uvec2(1u), uvec2(1u))))))).y;
                                          }
                                         while(_GLF_WRAPPED_LOOP(false));
                                        }
                                      }
                                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                  }
                                }
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (0 & 14776); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_injected_loop_counter < 1, _GLF_IDENTITY(true, true && (true))), bvec2(bvec4(bvec2(_injected_loop_counter < 1, true), false, true)))), bool(bool(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)), ~ (~ (_GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, 1)))))) < 1, true), bvec2(bvec4(bvec2(_injected_loop_counter < 1, true), false, true))))))))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
              {
              }
             else
              {
               _GLF_IDENTITY(GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_4_2_1_13next_virtual_gidreadsubgroup_basesubgroup_base.xyz.z = _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size, uvec4(0u, 0u, 0u, 0u) ^ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size, uvec4(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size[0], GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size[1], GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size[2], GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size[3])))).y, (false ? _GLF_FUZZED(_GLF_IDENTITY(GLF_merged2_0_1_4_1_1_13readsubgroup_base, (true ? GLF_merged2_0_1_4_1_1_13readsubgroup_base : _GLF_FUZZED(GLF_merged2_0_1_4_1_1_13readsubgroup_base))).y) : GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_4_2_1_13next_virtual_gidreadsubgroup_basesubgroup_base.xyz.z = _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.y, uint(uvec2(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.y, uint(_GLF_ZERO(0.0, injectionSwitch.x)))))));
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
    }
   else
    {
    }
  }
 uint virtual_gid = _GLF_IDENTITY(GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size, uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size, uvec3(_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size, uvec3(0u, 0u, 0u) ^ (GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size))) / uvec3(1u, 1u, 1u))[0], GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size[1], GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size[_GLF_IDENTITY(2, 0 ^ (_GLF_IDENTITY(2, (2) + 0)))])), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size, (true ? GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size : _GLF_FUZZED(GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size, (true ? GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size : _GLF_FUZZED(GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size)))), (~ (_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size, (true ? GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size : _GLF_FUZZED(GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size))))) >> uvec3(0u, 0u, 0u))) | (~ (_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size, (true ? GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size : _GLF_FUZZED(GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size))))))), min(~ _GLF_IDENTITY((~ (_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size, (true ? GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size : _GLF_FUZZED(GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size))))), max((~ (_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size, (true ? GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size : _GLF_FUZZED(GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size))))), (~ (_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size, (true ? GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size : _GLF_FUZZED(GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size))))))), ~ (~ (_GLF_IDENTITY(GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size, (true ? GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size : _GLF_FUZZED(GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size)))))))))).y + GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_4_2_1_13next_virtual_gidreadsubgroup_basesubgroup_base.xyz.z + GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z;
 uint next_virtual_gid = GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size.y + GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_4_2_1_13next_virtual_gidreadsubgroup_basesubgroup_base.xyz.z + (_GLF_IDENTITY(_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z + 1), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, _GLF_IDENTITY(0u, uint(uvec4(_GLF_IDENTITY(0u, (0u) * 1u), 1u, 1u, 0u))) ^ (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z)) + 1), ((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, _GLF_IDENTITY(0u, uint(uvec4(_GLF_IDENTITY(0u, (0u) * 1u), 1u, 1u, 0u))) ^ (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z)) + 1)) | (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, _GLF_IDENTITY(0u, uint(uvec4(_GLF_IDENTITY(0u, (0u) * 1u), 1u, 1u, 0u))) ^ (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z)) + 1), ((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, _GLF_IDENTITY(0u, uint(uvec4(_GLF_IDENTITY(0u, (0u) * 1u), 1u, 1u, 0u))) ^ (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z)) + 1)) << 0u))), (0u ^ 1u), uint(_GLF_ZERO(0.0, injectionSwitch.x))), min(uvec3((GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z + 1), (0u ^ 1u), uint(_GLF_ZERO(0.0, injectionSwitch.x))), uvec3((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z) - 0u) + 1, clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z) - 0u) + 1, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z) - 0u) + 1, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z) - 0u) + 1))), (0u ^ 1u), uint(_GLF_ZERO(0.0, injectionSwitch.x))))))) % GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.w, max(_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z + 1), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, _GLF_IDENTITY(0u, uint(uvec4(_GLF_IDENTITY(0u, (0u) * 1u), 1u, 1u, 0u))) ^ (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z)) + 1), ((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, _GLF_IDENTITY(0u, uint(uvec4(_GLF_IDENTITY(0u, (0u) * 1u), 1u, 1u, 0u))) ^ (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z)) + 1)) | (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, _GLF_IDENTITY(0u, uint(uvec4(_GLF_IDENTITY(0u, (0u) * 1u), 1u, 1u, 0u))) ^ (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z)) + 1), ((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, _GLF_IDENTITY(0u, uint(uvec4(_GLF_IDENTITY(0u, (0u) * 1u), 1u, 1u, 0u))) ^ (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z)) + 1)) << 0u))), (0u ^ 1u), uint(_GLF_ZERO(0.0, injectionSwitch.x))), min(uvec3((GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z + 1), (0u ^ 1u), uint(_GLF_ZERO(0.0, injectionSwitch.x))), uvec3((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z) - 0u) + 1, clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z) - 0u) + 1, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z) - 0u) + 1, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z) - 0u) + 1))), (0u ^ 1u), uint(_GLF_ZERO(0.0, injectionSwitch.x))))))) % GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.w, _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z + 1), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, _GLF_IDENTITY(0u, uint(uvec4(_GLF_IDENTITY(0u, (0u) * 1u), 1u, 1u, 0u))) ^ (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z)) + 1), ((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, _GLF_IDENTITY(0u, uint(uvec4(_GLF_IDENTITY(0u, (0u) * 1u), 1u, 1u, 0u))) ^ (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z)) + 1)) | (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, _GLF_IDENTITY(0u, uint(uvec4(_GLF_IDENTITY(0u, (0u) * 1u), 1u, 1u, 0u))) ^ (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z)) + 1), ((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, _GLF_IDENTITY(0u, uint(uvec4(_GLF_IDENTITY(0u, (0u) * 1u), 1u, 1u, 0u))) ^ (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z)) + 1)) << 0u))), (0u ^ 1u), uint(_GLF_ZERO(0.0, injectionSwitch.x))), min(uvec3((GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z + 1), (0u ^ 1u), uint(_GLF_ZERO(0.0, injectionSwitch.x))), uvec3((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z) - 0u) + 1, clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z) - 0u) + 1, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z) - 0u) + 1, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z) - 0u) + 1))), (0u ^ 1u), uint(_GLF_ZERO(0.0, injectionSwitch.x))))))) % GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.w)));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.x = next_virtual_gid;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec2(false, false))))))))));
  }
 else
  {
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, 0 ^ (0)), 0))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_TRUE(true))), bool(_GLF_IDENTITY(bvec3(! (! (_GLF_WRAPPED_IF_TRUE(true))), false, true), bvec3(bvec3(bvec3(! (! (_GLF_WRAPPED_IF_TRUE(true))), false, true))))))), false || _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), ! (! (_GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), bool(bvec3((_GLF_WRAPPED_IF_TRUE(true)), false, true)))))))), ((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(false, ! (! (false))) || (_GLF_WRAPPED_IF_TRUE(true))))) || false)), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))), false || _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), ! (! (_GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), bool(bvec3((_GLF_WRAPPED_IF_TRUE(true)), false, true)))))))), ((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(false, ! (! (false))) || (_GLF_WRAPPED_IF_TRUE(true))))) || false)), false))))
    {
     GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_4_2_1_13next_virtual_gidreadsubgroup_basesubgroup_base.xyz.x = GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.x;
    }
   else
    {
    }
  }
 uint read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid) * 1u, ((virtual_gid) * 1u) >> 0u))) + 0u)], 4, 64, 2);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0)) ^ 0), (_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0)) ^ 0)) >> (0 >> _GLF_IDENTITY(int(5), int(5)))), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0)) ^ 0), (_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0)) ^ 0)) >> (0 >> _GLF_IDENTITY(int(5), int(5)))))), ~ (~ (_injected_loop_counter ++))), 0 + (_injected_loop_counter ++))) << _GLF_IDENTITY(0, (0) - 0), (0 >> _GLF_IDENTITY(int(2), int(2))) ^ ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0)) ^ 0), (_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0)) ^ 0)) >> (0 >> _GLF_IDENTITY(int(5), int(5)))), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0)) ^ 0), (_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0)) ^ 0)) >> (0 >> _GLF_IDENTITY(int(5), int(5)))))), ~ (~ (_injected_loop_counter ++))), 0 + (_injected_loop_counter ++))) << _GLF_IDENTITY(0, (0) - 0)))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) ^ 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(69671))))), (_injected_loop_counter != _GLF_IDENTITY(1, 0 | _GLF_IDENTITY((_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(69671)))), (_GLF_IDENTITY((_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(69671)))), max((_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(69671)))), (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(69671))))))) | ((_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(69671)))))))) || false)); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ _GLF_IDENTITY((_injected_loop_counter --), (_GLF_IDENTITY((_injected_loop_counter --), _GLF_IDENTITY(((_injected_loop_counter --)), 0 | ((_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_injected_loop_counter --))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (_GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_injected_loop_counter --))) : _GLF_FUZZED(-81545)))))) ^ 0)) << 0)))) << (0 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))))
            {
             do
              {
               do
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             do
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   do
                                    {
                                     do
                                      {
                                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                        {
                                         GLF_merged2_0_1_4_1_1_13readsubgroup_base.x = read;
                                        }
                                      }
                                     while(_GLF_WRAPPED_LOOP(false));
                                    }
                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                  }
                                 else
                                  {
                                  }
                                }
                               else
                                {
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)))))))));
                            }
                           else
                            {
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) : _GLF_FUZZED(-5.1))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), (false ? _GLF_FUZZED(injectionSwitch) : (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).y)), true && (((_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) : _GLF_FUZZED(-5.1))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)), (false ? _GLF_FUZZED(injectionSwitch) : (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).y))))))));
        }
       else
        {
        }
      }
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))) || false); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = (1 & int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                      {
                       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, 1 * (6))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, true && (_injected_loop_counter < 1))); _injected_loop_counter ++)
                        {
                         GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_4_2_1_13next_virtual_gidreadsubgroup_basesubgroup_base.xyz.y = GLF_merged2_0_1_4_1_1_13readsubgroup_base.x;
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
        }
      }
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY(0, _GLF_IDENTITY((0), _GLF_IDENTITY(((0)) | 0, max(((0)) | 0, ((0)) | 0))) | 0) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) | int(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(_GLF_IDENTITY(float(float(0.0)), min(float(float(0.0)), float(float(_GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2x3(0.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), float(mat2(float(mat2x3(0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), 1.0, 0.0, 0.0)))))))))), (_GLF_IDENTITY(float(float(0.0)), min(float(float(0.0)), _GLF_IDENTITY(float(float(0.0)), mix(float(float(float(0.0))), float(_GLF_FUZZED((-48.34 + 6.0))), bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))))))))))))) - 0.0)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) | int(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(_GLF_IDENTITY(float(float(0.0)), min(float(float(0.0)), float(float(_GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2x3(0.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), float(mat2(float(mat2x3(0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), 1.0, 0.0, 0.0)))))))))), (_GLF_IDENTITY(float(float(0.0)), min(float(float(0.0)), _GLF_IDENTITY(float(float(0.0)), mix(float(float(float(0.0))), float(_GLF_FUZZED((-48.34 + 6.0))), bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))))))))))))) - 0.0)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))))), ! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) | int(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(_GLF_IDENTITY(float(float(0.0)), min(float(_GLF_IDENTITY(float(0.0), min(_GLF_IDENTITY(float(0.0), mix(float(_GLF_FUZZED(-9689.2061)), float(float(0.0)), bool(true))), float(0.0)))), float(float(_GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2x3(0.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), float(mat2(float(mat2x3(0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), 1.0, 0.0, 0.0)))))))))), (_GLF_IDENTITY(float(float(0.0)), min(float(float(0.0)), _GLF_IDENTITY(float(float(0.0)), mix(float(float(float(0.0))), float(_GLF_FUZZED((-48.34 + 6.0))), bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))))))))))))) - 0.0)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))))))))))); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z % 2, max(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, min(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size) + uvec4(0u, 0u, 0u, 0u)).z)) % 2, 0u ^ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, min(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z)) % _GLF_IDENTITY(2, 0 ^ (2)))), _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, 0u | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, _GLF_IDENTITY(clamp(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z), (clamp(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z)) | (clamp(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z)))))) % 2))), (false ? _GLF_FUZZED(_GLF_IDENTITY((virtual_gid), uint(_GLF_IDENTITY(uvec3((virtual_gid), ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u), uvec3(0u, 0u, 0u) ^ (uvec3((virtual_gid), ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u)))))) : (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size) / uvec4(1u, 1u, 1u, 1u))), uvec4(0u, 0u, 0u, 0u) ^ (_GLF_IDENTITY(~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size) / uvec4(1u, 1u, 1u, 1u))), (false ? _GLF_FUZZED(uvec4(165617u, 104875u, 110924u, 83058u)) : ~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size) / uvec4(1u, 1u, 1u, 1u))))))))), max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size, ~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size) / uvec4(1u, 1u, 1u, 1u))))), _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size, ~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size) / uvec4(1u, 1u, 1u, 1u))))))).z % 2, max(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, min(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z)) % 2, 0u ^ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, min(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z)) % 2)), GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z % 2))))), clamp((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z % 2, max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, min(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size, uvec4(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size[0], _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size[1], min(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size[1], GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size[1])), GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size[2], _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size[3], _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size[3]), (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size[3]), clamp((GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size[3]), (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size[3]), (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size[3])))) / 1u) >> 0u))).z, GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z)) % 2, GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z % 2))), _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z % 2, max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, min(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z)) % 2, GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z % _GLF_IDENTITY(_GLF_IDENTITY(2, 0 | (2)), (_GLF_IDENTITY(2, 0 | (2))) - 0)))), (true ? (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z % 2, max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, min(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z)) % _GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, min(2, 2))))), _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, clamp(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, (GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z) >> 0u), GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z)) % 2))) : _GLF_FUZZED(floatBitsToUint(_GLF_IDENTITY(_GLF_IDENTITY(126.021, float(_GLF_IDENTITY(vec2(126.021, 0.0), max(vec2(126.021, 0.0), vec2(126.021, _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, float(float(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(823.926) : 0.0))))))), min(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0)))))))), float(mat3x4(_GLF_IDENTITY(126.021, float(_GLF_IDENTITY(_GLF_IDENTITY(vec2(126.021, 0.0), max(vec2(126.021, 0.0), vec2(126.021, _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, float(float(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(823.926) : 0.0))))))), min(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0)))))), (false ? _GLF_FUZZED(vec2(2.5, _GLF_IDENTITY(-4.5, float(vec2(-4.5, log(1.0)))))) : _GLF_IDENTITY(vec2(126.021, 0.0), max(vec2(126.021, 0.0), vec2(126.021, _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, float(float(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))), bool(bool(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))))))) ? _GLF_FUZZED(823.926) : 0.0))))))), min(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0)))))))))), 1.0, 1.0, 0.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(114.236)), float(0.0), bool(true))), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0))))))), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, (false ? _GLF_FUZZED(subgroup_base) : GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z)) % 2, max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, min(GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z, GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z)) % 2, GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_13next_virtual_gidsubgroup_basesubgroup_local_idsubgroup_size.z % 2))))) == 0)
            {
             for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               do
                {
                 subgroupAll(false);
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))));
              }
             do
              {
               do
                {
                 do
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), (bool(_GLF_WRAPPED_IF_FALSE(false))) || false))))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))))); _injected_loop_counter --)
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), min(_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), float(mat3(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), 1.0, 0.0, length(0.0), 0.0, 1.0, cos(0.0), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))))), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               do
                                {
                                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, ~ (~ (0)))); _injected_loop_counter --)
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     atomicStore(buf[GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_4_2_1_13next_virtual_gidreadsubgroup_basesubgroup_base.xyz.x], uint(1), _GLF_IDENTITY(4, _GLF_IDENTITY((4) | (_GLF_IDENTITY(4, int(ivec4(4, 1, 1, 1)))), int(ivec2((4) | (4), 1)))), 64, 4);
                                    }
                                  }
                                }
                               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
                              }
                             else
                              {
                              }
                            }
                           else
                            {
                            }
                          }
                        }
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))));
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), (injectionSwitch.x > injectionSwitch.y))));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
            }
           else
            {
             for(int _injected_loop_counter = (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED((_injected_loop_counter ++)))))) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(1), int(1))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false, false)))) && true); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           subgroupAll(false);
                          }
                         else
                          {
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), (int(3)) | (_GLF_IDENTITY(int(3), ~ (~ (int(3)))))), _GLF_IDENTITY(int(3), 0 + (int(3))))), int(3))) << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, min(3, 3))))); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))))) >> _GLF_IDENTITY(int(2), int(2)))), ! _GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(_GLF_IDENTITY(_GLF_IDENTITY(2, int(ivec2(2, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(2, int(ivec2(2, 1))), max(_GLF_IDENTITY(2, int(ivec2(2, 1))), _GLF_IDENTITY(2, int(ivec2(2, 1))))), _GLF_IDENTITY(_GLF_IDENTITY(2, int(ivec2(2, 1))), (_GLF_IDENTITY(2, int(ivec2(2, 1)))) + 0)))))))) >> _GLF_IDENTITY(int(2), int(2)))))), bool(bvec4((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), clamp(int(2), _GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), clamp(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, clamp(2, 2, _GLF_IDENTITY(2, (2) * 1)))) - 0)), int(2), int(2))), int(2), int(2))), int(2))))) >> _GLF_IDENTITY(int(2), int(2)))))), false, false, true)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))))) >> _GLF_IDENTITY(int(2), int(2)))), ! _GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(_GLF_IDENTITY(2, int(ivec2(2, 1)))))))) >> _GLF_IDENTITY(int(2), int(2)))))), bool(bvec4((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), clamp(int(2), _GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), clamp(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, clamp(2, 2, _GLF_IDENTITY(2, (2) * 1)))) - 0)), int(2), int(2))), int(2), int(2))), int(2))))) >> _GLF_IDENTITY(int(2), int(2)))))), false, false, true)))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))))) >> _GLF_IDENTITY(int(2), int(2)))), ! _GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(_GLF_IDENTITY(2, int(ivec2(2, 1)))))))) >> _GLF_IDENTITY(int(2), int(2)))))), bool(bvec4((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (2))), _GLF_IDENTITY(int(2), clamp(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), min(int(2), int(2))), clamp(_GLF_IDENTITY(int(2), clamp(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, clamp(2, 2, _GLF_IDENTITY(2, (2) * 1)))) - 0)), int(2), int(2))), int(2), int(2))), int(2))))) >> _GLF_IDENTITY(int(2), int(2)))))), false, _GLF_IDENTITY(false, (false) && true), true)))))))) || false); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       do
                        {
                         do
                          {
                           atomicStore(buf[GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_4_2_1_13next_virtual_gidreadsubgroup_basesubgroup_base.xyz.x], uint(1), 4, 64, 4);
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     else
                      {
                      }
                    }
                  }
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     subgroupBarrier();
    }
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(3), int(3)), 0 ^ (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | 0)))))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(_GLF_FUZZED(834.890), float(vec3(_GLF_IDENTITY(_GLF_FUZZED(834.890), (_GLF_IDENTITY(_GLF_FUZZED(834.890), (_GLF_FUZZED(834.890)) / _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), _GLF_IDENTITY(1.0, (1.0) + 0.0), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) + 0.0)) / 1.0))))) / 1.0), tan(0.0), 1.0)))), float(injectionSwitch.x), _GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bvec3(bool(true), false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(bool(true), false, true))), bvec3(bvec4(bvec3(bvec3(bvec3(bool(true), false, true))), true)))))))), injectionSwitch.x)), 1.0, 0.0), min(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(834.890)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), 1.0, 0.0), _GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(834.890)), _GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(_GLF_IDENTITY(length(-664.845), (true ? length(-664.845) : _GLF_FUZZED(-283.714)))) : _GLF_IDENTITY(float(injectionSwitch.x), float(vec4(float(injectionSwitch.x), 1.0, 1.0, exp(0.0)))))), bool(true))), _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(5445.3442) : 1.0)))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))).x)), 1.0, 0.0), mat3(1.0) * (vec3(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(834.890)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), 1.0, 0.0))))))) > injectionSwitch.y))))
      {
      }
     else
      {
       do
        {
         atomicStore(buf[virtual_gid], GLF_merged2_0_3_64_3_1_13GLF_merged3_0_1_16_1_1_4_2_1_13next_virtual_gidreadsubgroup_basesubgroup_base.xyz.y, _GLF_IDENTITY(4, 0 ^ (4)), 64, 4);
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
      }
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
