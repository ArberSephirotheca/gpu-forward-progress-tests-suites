#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_10 {
 ivec2 _f0;
} ;

struct _GLF_struct_9 {
 mat4x2 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_11 {
 _GLF_struct_9 _f0;
 ivec2 _f1;
 bvec4 _f2;
 mat4 _f3;
 _GLF_struct_10 _f4;
 uvec2 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_7 {
 uvec4 _f0;
 mat2x3 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_6 {
 bool _f0;
 ivec2 _f1;
 int _f2;
 vec2 _f3;
 mat3x2 _f4;
 bvec4 _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_8 {
 _GLF_struct_6 _f0;
 _GLF_struct_7 _f1;
 uint subgroup_size;
} ;

struct _GLF_struct_12 {
 ivec3 _f0;
 _GLF_struct_8 _f1;
 ivec3 _f2;
 _GLF_struct_11 _f3;
} ;

struct _GLF_struct_3 {
 int _f0;
 ivec3 _f1;
 mat4 _f2;
 bool _f3;
 mat4x2 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_2 {
 int _f0;
 uvec4 _f1;
 vec2 _f2;
 int _f3;
 ivec2 _f4;
 mat4 _f5;
} ;

struct _GLF_struct_1 {
 mat3x2 _f0;
 float _f1;
} ;

struct _GLF_struct_0 {
 vec4 _f0;
 uvec3 _f1;
 int _f2;
 ivec2 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_4 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 ivec3 _f2;
 _GLF_struct_2 _f3;
 _GLF_struct_3 _f4;
} ;

struct _GLF_struct_5 {
 mat4x2 _f0;
 uint subgroup_base;
 mat3 _f1;
 _GLF_struct_4 _f2;
 vec2 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(ivec3(1), _GLF_struct_8(_GLF_struct_6(true, ivec2(1), 1, _GLF_IDENTITY(vec2(1.0), _GLF_IDENTITY(max(vec2(1.0), vec2(1.0)), mat2(1.0) * (max(vec2(1.0), vec2(1.0))))), mat3x2(1.0), bvec4(true), uvec2(1u)), _GLF_struct_7(uvec4(1u), mat2x3(1.0), mat2(1.0)), gl_SubgroupSize), ivec3(1), _GLF_struct_11(_GLF_struct_9(mat4x2(1.0), uvec3(1u)), _GLF_IDENTITY(ivec2(1), clamp(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), ~ (~ (ivec2(1)))), _GLF_IDENTITY(ivec2(0, 0), _GLF_IDENTITY(ivec2(0, 0) + (ivec2(0, 0)), (ivec2(0, 0) + (ivec2(0, 0))) - ivec2(0, 0))) ^ (ivec2(1))), _GLF_IDENTITY(ivec2(1), min(_GLF_IDENTITY(ivec2(1), (ivec2(_GLF_IDENTITY(1, (1) | (1)))) << ivec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x))))), ivec2(1))), ivec2(1))), bvec4(true), mat4(1.0), _GLF_struct_10(ivec2(1)), _GLF_IDENTITY(uvec2(1u), max(_GLF_IDENTITY(uvec2(1u), max(uvec2(1u), uvec2(1u))), uvec2(1u))), mat4(1.0)));
 for(int _injected_loop_counter = (1 | _GLF_IDENTITY(1, 0 + (1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ (1 & 1))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (gl_NumWorkGroups.x));
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     do
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
     barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), clamp(_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)), min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), ~ (~ (workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, clamp(workgroup_id, workgroup_id, workgroup_id)), min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))) | (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))))))), workgroup_size * _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)), (_GLF_IDENTITY(min(workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id))), (workgroup_id) ^ 0u)), max(min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)), min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))) | (5802u & 0u))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) ^ 0u), (workgroup_size) / (0u | _GLF_IDENTITY(1u, max(1u, 1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) ^ 0u), (workgroup_size) / _GLF_IDENTITY((0u | 1u), ((0u | 1u)) ^ 0u))) * 1u) * _GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) << 0u) * _GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), clamp(_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)), _GLF_IDENTITY(min(workgroup_id, _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id), (false ? _GLF_FUZZED(atomicExchange(num_workgroup, subgroup_id)) : (workgroup_id))) ^ 0u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(min(workgroup_id, _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id), (false ? _GLF_FUZZED(atomicExchange(num_workgroup, subgroup_id)) : (workgroup_id))) ^ 0u)), (min(workgroup_id, _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id), (false ? _GLF_FUZZED(atomicExchange(num_workgroup, subgroup_id)) : (workgroup_id))) ^ 0u))) ^ 0u)))), ~ (~ (workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ _GLF_IDENTITY(0u, (1u ^ 1u) | (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))))))) | (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))))))), workgroup_size * _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(min(workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u), (_GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)) | (_GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))), (_GLF_IDENTITY(min(workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, uint(_GLF_IDENTITY(uint(workgroup_id), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(uint(workgroup_id), (uint(workgroup_id)) >> 0u) : _GLF_FUZZED(uvec3(18122u, 149552u, 115387u)[2]))))), _GLF_IDENTITY((workgroup_id) ^ 0u, ((workgroup_id) ^ 0u) - 0u))), max(min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)), min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))) | (5802u & 0u))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) ^ 0u), _GLF_IDENTITY((workgroup_size), clamp((workgroup_size), (workgroup_size), (workgroup_size))) / (0u | 1u)) * _GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))), 0u + (_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), clamp(_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, 0u | _GLF_IDENTITY((workgroup_id), (_GLF_IDENTITY((workgroup_id), ((workgroup_id)) | ((workgroup_id)))) / uint(_GLF_ONE(1.0, injectionSwitch.y)))), max(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)), (_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id))) | (_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)))))), min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), ~ (~ (workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))) | (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))))))), _GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)) * _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)), (_GLF_IDENTITY(min(workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(uint(uint(workgroup_id)), min(uint(uint(workgroup_id)), uint(uint(workgroup_id))))), (workgroup_id) ^ 0u)), max(_GLF_IDENTITY(min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)), max(min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)), min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))), min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))) | (5802u & 0u))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) ^ 0u), (workgroup_size) / (0u | 1u)) * _GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))), (true ? uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), clamp(_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)), min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), ~ (~ (workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))) | (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))))))), workgroup_size * _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)), (_GLF_IDENTITY(min(workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id))), _GLF_IDENTITY((workgroup_id), clamp((workgroup_id), _GLF_IDENTITY((workgroup_id), ((workgroup_id)) | ((workgroup_id))), (workgroup_id))) ^ 0u)), max(min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)), min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))) | (5802u & 0u))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) ^ 0u), (workgroup_size) / (0u | 1u)) * _GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))), 0u + (_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)), min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), _GLF_IDENTITY(~ (~ (workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))) | (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))))), min(_GLF_IDENTITY(~ (~ (workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))) | (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))))), ~ (_GLF_IDENTITY(~ (~ (~ (workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))) | (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))))))), (~ (~ (~ (workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))) | (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))))))) >> 0u))), _GLF_IDENTITY(~ (~ (workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))) | (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))))), clamp(_GLF_IDENTITY(~ (~ (workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))) | (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))))), (~ (~ (workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))) | (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))))))) | 0u), _GLF_IDENTITY(~ (~ (workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))) | (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))))), (~ (~ (workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))) | (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))))))) | (~ (~ (workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))) | (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))))))), ~ (~ (workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))) | (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))))))))))), workgroup_size * _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)), (_GLF_IDENTITY(min(workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id))), 0u | (_GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id))))))), (workgroup_id) ^ 0u)), max(min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)), min(workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u), (_GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)) | (_GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))))) | (5802u & 0u))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) ^ 0u), (workgroup_size) / (0u | 1u)) * _GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))), (clamp(_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)), min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), _GLF_IDENTITY(~ (~ (workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))) ^ 0u))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))) | _GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))), _GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))), 1u)), (uint(uvec2((_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))), 1u))) * 1u))))), min(_GLF_IDENTITY(~ (~ (workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, uint(uvec2(workgroup_id, 1u))), (workgroup_id) ^ 0u))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))) | (_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)), 0u | (_GLF_IDENTITY(min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)), 0u | (min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))))))))), ~ (_GLF_IDENTITY(~ (~ (~ (workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))) | (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))))))), (~ (~ (~ (workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))) | (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))))))) >> 0u))), _GLF_IDENTITY(~ (~ (workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))) | (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))))), clamp(_GLF_IDENTITY(~ (~ (workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id), ((workgroup_id)) / 1u) ^ 0u)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id), ((workgroup_id)) / 1u) ^ 0u)))))) | (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id), max((workgroup_id), (workgroup_id))) ^ 0u))))))), (~ (~ (workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))) | (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))))))) | 0u), _GLF_IDENTITY(~ (~ (workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))) | (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))))), _GLF_IDENTITY((~ (~ (workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))) | (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))))))), ((~ (~ (workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))) | (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))))))) | (_GLF_IDENTITY((~ (~ (workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))) | (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))))))), ((~ (~ (workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))) | (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))))))) << 0u))) | (~ (~ (workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))) | (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))))))), ~ (~ _GLF_IDENTITY((workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))) | (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))) | (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))))), ((workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))) | (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))) | (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))))) | 0u))))))), workgroup_size * _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)), (_GLF_IDENTITY(min(workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id))), 0u | (_GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id))))))), (workgroup_id) ^ 0u)), max(min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)), min(workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u), (_GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)) | (_GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))))) | (5802u & 0u))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) ^ 0u), (workgroup_size) / (0u | 1u)) * _GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))) / ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))) : _GLF_FUZZED(workgroup_id)))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), clamp(_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)), min(workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)), (~ (_GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))) - 0u), ~ (_GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))))))), ~ (~ (workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))) | (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))))))), workgroup_size * _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(min(workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, clamp(_GLF_IDENTITY(workgroup_id, (false ? _GLF_FUZZED(workgroup_id) : workgroup_id)), _GLF_IDENTITY(workgroup_id, (workgroup_id) / 1u), workgroup_id)), _GLF_IDENTITY((workgroup_id), max((workgroup_id), (workgroup_id))) ^ 0u)), (_GLF_IDENTITY(min(workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id))), (workgroup_id) ^ 0u), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id))), (workgroup_id) ^ 0u), (0u >> _GLF_IDENTITY(uint(5u), uint(5u))), (0u | 0u)), clamp(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id))), (workgroup_id) ^ 0u), (0u >> _GLF_IDENTITY(uint(5u), uint(5u))), (_GLF_IDENTITY(0u | 0u, max(0u | 0u, 0u | 0u)))), uvec3(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id))), (workgroup_id) ^ 0u), (0u >> _GLF_IDENTITY(uint(5u), uint(5u))), (0u | 0u)), uvec3(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id))), (workgroup_id) ^ 0u), (0u >> _GLF_IDENTITY(uint(5u), uint(5u))), (0u | 0u))))))), max(min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)), min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))) | (_GLF_IDENTITY(5802u & 0u, (true ? 5802u & 0u : _GLF_FUZZED(subgroup_local_id)))))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size), ((workgroup_size)) * 1u) ^ 0u), (workgroup_size) / (0u | 1u)) * _GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), clamp(_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)), min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), ~ (~ (workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))) | (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))))))), workgroup_size * _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)), (_GLF_IDENTITY(min(workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), uint(uint(workgroup_id))), (workgroup_id) ^ 0u)), max(min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)), min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))) | (5802u & 0u))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) ^ 0u), (workgroup_size) / (_GLF_IDENTITY(0u, uint(uint(0u))) | 1u)) * _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)), max(min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)), min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))))), 0u + (_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(_GLF_IDENTITY(workgroup_id, (workgroup_id) + 0u), workgroup_id)), min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), clamp(_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)), min(workgroup_id, _GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)) ^ 0u))), ~ (~ (workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id), ((workgroup_id)) << 0u) ^ 0u)))) | (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))))))), workgroup_size * _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)), (_GLF_IDENTITY(min(workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id))), (workgroup_id) ^ 0u)), max(min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)), min(workgroup_id, _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id) ^ 0u, ((workgroup_id) ^ 0u) | (_GLF_IDENTITY((workgroup_id) ^ 0u, ((workgroup_id) ^ 0u) + 0u)))))))) | (5802u & 0u))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) ^ 0u), max(_GLF_IDENTITY(workgroup_size, (workgroup_size) ^ 0u), _GLF_IDENTITY(workgroup_size, (workgroup_size) ^ 0u))), (workgroup_size) / (0u | 1u)) * _GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))))), uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - 0.0)) - _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))))), _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(8u, min(_GLF_IDENTITY(8u, (false ? _GLF_FUZZED(num_workgroup) : 8u)), 8u))))), ~ (_GLF_IDENTITY(~ ((0u >> _GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(8u, min(_GLF_IDENTITY(8u, (false ? _GLF_FUZZED(num_workgroup) : 8u)), 8u)))))), max(~ ((0u >> _GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(8u, min(_GLF_IDENTITY(8u, (false ? _GLF_FUZZED(num_workgroup) : 8u)), 8u)))))), ~ ((0u >> _GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(8u, min(_GLF_IDENTITY(8u, (false ? _GLF_FUZZED(num_workgroup) : 8u)), 8u)))))))))))), (true ? uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, (false ? _GLF_FUZZED(workgroup_id) : workgroup_id))) ^ 0u), (_GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)) >> 0u))), clamp(_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(0u | (workgroup_id), clamp(0u | (workgroup_id), 0u | (workgroup_id), 0u | (workgroup_id)))), min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), ~ (~ (_GLF_IDENTITY(workgroup_size, 1u * (workgroup_size)) * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))) | (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id), min((workgroup_id), (workgroup_id))) ^ 0u)))))))), workgroup_size * _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)), (_GLF_IDENTITY(min(workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id))), (workgroup_id) ^ 0u)), max(min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)), min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))) | (5802u & 0u))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, 1u * (workgroup_size)), (workgroup_size) ^ 0u), (workgroup_size) / (0u | 1u)) * _GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id) ^ 0u, 0u ^ ((workgroup_id) ^ 0u))))))), 0u + (_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, clamp(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id))) | (workgroup_id)), workgroup_id, workgroup_id)), (workgroup_id) ^ 0u))), clamp(_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)), min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), ~ (~ (workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id) ^ 0u, 0u + ((workgroup_id) ^ 0u)))))) | (_GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)))))))), workgroup_size * _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)), (_GLF_IDENTITY(min(workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, uint(uint(workgroup_id))), (workgroup_id) ^ 0u)), max(_GLF_IDENTITY(min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ _GLF_IDENTITY(0u, min(0u, 0u)))), (0u >> _GLF_IDENTITY(uint(7u), uint(7u))) + (_GLF_IDENTITY(min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ _GLF_IDENTITY(0u, min(0u, 0u)))), ~ (~ (min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ _GLF_IDENTITY(0u, min(0u, 0u))))))))), min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))))) | (5802u & 0u))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))) ^ 0u), (workgroup_size) / (0u | 1u)) * _GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ _GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(workgroup_size))), _GLF_IDENTITY(0u, (0u) >> 0u), 0u), 0u | (clamp(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(workgroup_size))), _GLF_IDENTITY(0u, (0u) >> 0u), 0u))))))))))), uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)))), (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))) : _GLF_FUZZED(workgroup_id))))));
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(mat4x2(1.0), subgroup_id * _GLF_struct_replacement_12._f1.subgroup_size, mat3(1.0), _GLF_struct_4(_GLF_struct_0(vec4(1.0), uvec3(1u), 1, ivec2(1), mat4(1.0)), _GLF_struct_1(mat3x2(1.0), 1.0), ivec3(1), _GLF_struct_2(_GLF_IDENTITY(1, ~ (~ (1))), uvec4(1u), vec2(1.0), 1, ivec2(1), mat4(_GLF_IDENTITY(1.0, (1.0) * 1.0))), _GLF_struct_3(_GLF_IDENTITY(1, min(1, 1)), ivec3(1), mat4(1.0), true, mat4x2(1.0), ivec2(1))), vec2(1.0));
 do
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(workgroup_base, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u)), max((~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, _GLF_IDENTITY(((workgroup_base) ^ 0u) << 0u, (((workgroup_base) ^ 0u) << 0u) | (((workgroup_base) ^ 0u) << 0u))))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u)), _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u)), clamp((~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))) ^ 0u, max(_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), ((workgroup_base)) >> 0u) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), _GLF_IDENTITY(0u, (0u) ^ 0u), 0u)), ((workgroup_base) ^ 0u) << 0u))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u)), (~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), clamp((workgroup_base), _GLF_IDENTITY((workgroup_base), max((workgroup_base), (workgroup_base))), (workgroup_base))) ^ 0u, ((workgroup_base) ^ 0u) << 0u))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u)), (~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), _GLF_IDENTITY(max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))), 0u ^ (max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))))) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ _GLF_IDENTITY(0u, max(0u, 0u))), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << _GLF_IDENTITY(0u, min(0u, 0u))))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u))))))), 0u), uvec2(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(workgroup_base, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u)), max((~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, _GLF_IDENTITY(((workgroup_base) ^ 0u) << 0u, (((workgroup_base) ^ 0u) << 0u) | (((workgroup_base) ^ 0u) << 0u))))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u)), _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u)), clamp((~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))) ^ 0u, max(_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), ((workgroup_base)) >> 0u) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), _GLF_IDENTITY(0u, (0u) ^ 0u), 0u)), ((workgroup_base) ^ 0u) << 0u))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u)), (~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), clamp((workgroup_base), _GLF_IDENTITY((workgroup_base), max((workgroup_base), (workgroup_base))), (workgroup_base))) ^ 0u, ((workgroup_base) ^ 0u) << 0u))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u)), (~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), _GLF_IDENTITY(max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))), 0u ^ (max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))))) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ _GLF_IDENTITY(0u, max(0u, 0u))), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << _GLF_IDENTITY(0u, min(0u, 0u))))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u))))))), 0u), max(uvec2(_GLF_IDENTITY(workgroup_base, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u)), max((~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, _GLF_IDENTITY(((workgroup_base) ^ 0u) << 0u, (((workgroup_base) ^ 0u) << 0u) | (((workgroup_base) ^ 0u) << 0u))))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u)), _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u)), clamp((~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))) ^ 0u, max(_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), ((workgroup_base)) >> 0u) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), _GLF_IDENTITY(0u, (0u) ^ 0u), 0u)), ((workgroup_base) ^ 0u) << 0u))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u)), (~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), clamp((workgroup_base), _GLF_IDENTITY((workgroup_base), max((workgroup_base), (workgroup_base))), (workgroup_base))) ^ 0u, ((workgroup_base) ^ 0u) << 0u))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u)), (~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), _GLF_IDENTITY(max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))), 0u ^ (max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))))) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ _GLF_IDENTITY(0u, max(0u, 0u))), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << _GLF_IDENTITY(0u, min(0u, 0u))))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u))))))), 0u), uvec2(_GLF_IDENTITY(workgroup_base, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u)), max((~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, _GLF_IDENTITY(((workgroup_base) ^ 0u) << 0u, (((workgroup_base) ^ 0u) << 0u) | (((workgroup_base) ^ 0u) << 0u))))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u)), _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u)), clamp((~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))) ^ 0u, max(_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), ((workgroup_base)) >> 0u) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), _GLF_IDENTITY(0u, (0u) ^ 0u), 0u)), ((workgroup_base) ^ 0u) << 0u))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u)), (~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), clamp((workgroup_base), _GLF_IDENTITY((workgroup_base), max((workgroup_base), (workgroup_base))), (workgroup_base))) ^ 0u, ((workgroup_base) ^ 0u) << 0u))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u)), (~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), _GLF_IDENTITY(max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))), 0u ^ (max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))))) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ _GLF_IDENTITY(0u, max(0u, 0u))), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << _GLF_IDENTITY(0u, min(0u, 0u))))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u))))))), 0u))), (0u << _GLF_IDENTITY(uint(1u), uint(1u)))), uvec3(uvec4(uvec3(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(workgroup_base, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u)), max((~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, _GLF_IDENTITY(((workgroup_base) ^ 0u) << 0u, (((workgroup_base) ^ 0u) << 0u) | (((workgroup_base) ^ 0u) << 0u))))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u)), _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u)), clamp((~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))) ^ 0u, max(_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), ((workgroup_base)) >> 0u) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), _GLF_IDENTITY(0u, (0u) ^ 0u), 0u)), ((workgroup_base) ^ 0u) << 0u))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u)), (~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), clamp((workgroup_base), _GLF_IDENTITY((workgroup_base), max((workgroup_base), (workgroup_base))), (workgroup_base))) ^ 0u, ((workgroup_base) ^ 0u) << 0u))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u)), (~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), _GLF_IDENTITY(max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))), 0u ^ (max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))))) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ _GLF_IDENTITY(0u, max(0u, 0u))), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << _GLF_IDENTITY(0u, min(0u, 0u))))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u))))))), 0u), max(uvec2(_GLF_IDENTITY(workgroup_base, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u)), max((~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, _GLF_IDENTITY(((workgroup_base) ^ 0u) << 0u, (((workgroup_base) ^ 0u) << 0u) | (((workgroup_base) ^ 0u) << 0u))))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u)), _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u)), clamp((~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))) ^ 0u, max(_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), ((workgroup_base)) >> 0u) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), _GLF_IDENTITY(0u, (0u) ^ 0u), 0u)), ((workgroup_base) ^ 0u) << 0u))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u)), (~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), clamp((workgroup_base), _GLF_IDENTITY((workgroup_base), max((workgroup_base), (workgroup_base))), (workgroup_base))) ^ 0u, ((workgroup_base) ^ 0u) << 0u))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u)), (~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), _GLF_IDENTITY(max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))), 0u ^ (max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))))) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ _GLF_IDENTITY(0u, max(0u, 0u))), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << _GLF_IDENTITY(0u, min(0u, 0u))))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u))))))), 0u), uvec2(_GLF_IDENTITY(workgroup_base, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u)), max((~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, _GLF_IDENTITY(((workgroup_base) ^ 0u) << 0u, (((workgroup_base) ^ 0u) << 0u) | (((workgroup_base) ^ 0u) << 0u))))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u)), _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u)), clamp((~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))) ^ 0u, max(_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), ((workgroup_base)) >> 0u) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), _GLF_IDENTITY(0u, (0u) ^ 0u), 0u)), ((workgroup_base) ^ 0u) << 0u))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u)), (~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), clamp((workgroup_base), _GLF_IDENTITY((workgroup_base), max((workgroup_base), (workgroup_base))), (workgroup_base))) ^ 0u, ((workgroup_base) ^ 0u) << 0u))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u)), (~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), _GLF_IDENTITY(max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))), 0u ^ (max(uint(workgroup_base), _GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base)))))))))) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ _GLF_IDENTITY(0u, max(0u, 0u))), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << _GLF_IDENTITY(0u, min(0u, 0u))))))), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) ^ 0u, max(_GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) ^ 0u), _GLF_IDENTITY((workgroup_base) ^ 0u, ((workgroup_base) ^ 0u) << 0u)))))) >> 0u))))))), 0u))), (0u << _GLF_IDENTITY(uint(1u), uint(1u)))), 1u))))))), (_GLF_IDENTITY(workgroup_base, uint(uvec2(_GLF_IDENTITY(workgroup_base, ~ (~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ _GLF_IDENTITY(0u, uint(uvec4(0u, 0u, ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u))))))), 0u)))) >> 0u), _GLF_IDENTITY(0u ^ (workgroup_base), (0u ^ (workgroup_base)) | (0u ^ (workgroup_base)))) + _GLF_IDENTITY(_GLF_struct_replacement_5.subgroup_base, (_GLF_struct_replacement_5.subgroup_base) + 0u) + subgroup_local_id;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_IDENTITY(false, false || (false)), false, false)))))
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 ^ (0))) | (0)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-99717))), 1), min(ivec2(_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-99717))), 1), ivec2(_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-99717))), 1)))), (int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-99717))), 1), min(ivec2(_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-99717))), 1), ivec2(_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-99717))), 1))))) ^ 0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) ^ 0), clamp(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) ^ 0), 0, 0))), ~ (~ (_GLF_IDENTITY(int(0), (int(0)) | 0)))), _GLF_IDENTITY(int(0), clamp(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0))), int(0))))), (int(0)) | (int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(1, (1710 & 0) | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, (0) / 1), (_GLF_IDENTITY(0, (0) / 1)) ^ 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
          }
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, true, false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), false))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), false))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true)))), bvec3(bvec4(bvec3(false, true, true), false))), false))), false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(float(mat2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))), 1.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(22.36)), _GLF_IDENTITY(float(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, max(0.0, 0.0)))))), max(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-8.8)), float(0.0), bool(true))))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(_GLF_FUZZED(-75.50)), float(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(_GLF_FUZZED(7116.1134)), float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), bool(true)))), bool(true))), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))) * (float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)))), _GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)), round(length(normalize(1.0))) * (float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0))))))), _GLF_IDENTITY(float(vec2(float(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, max(0.0, 0.0)))))), max(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(_GLF_FUZZED(-75.50)), float(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(_GLF_FUZZED(7116.1134)), float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), bool(true)))), bool(true))), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))) * (float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)))), _GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)), round(length(normalize(1.0))) * (float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0))))))), exp(0.0))), clamp(float(vec2(float(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, max(0.0, 0.0)))))), max(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), _GLF_IDENTITY(mix(float(_GLF_FUZZED(-75.50)), float(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(_GLF_FUZZED(7116.1134)), float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), bool(true)))), bool(true)), (mix(float(_GLF_FUZZED(-75.50)), float(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(_GLF_FUZZED(7116.1134)), float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), bool(true)))), bool(true))) / 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))) * (float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)))), _GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)), round(length(normalize(1.0))) * (float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0))))))), exp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0))))))), float(vec2(float(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, max(0.0, 0.0)))))), max(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(_GLF_FUZZED(-75.50)), float(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(_GLF_FUZZED(7116.1134)), float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), bool(true)))), bool(true))), dot(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, 1.0), (vec2(0.0, 1.0)) / vec2(1.0, 1.0)))) * (float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)))), _GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)), round(length(normalize(1.0))) * (float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0))))))), exp(0.0))), float(vec2(float(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, max(0.0, 0.0)))))), max(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(_GLF_FUZZED(-75.50)), float(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(_GLF_FUZZED(7116.1134)), float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), bool(true)))), bool(true))), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))) * (float(mat2(_GLF_IDENTITY(injectionSwitch.y, cos(0.0) * (injectionSwitch.y)), 1.0, 0.0, 0.0)))), _GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)), round(length(normalize(_GLF_IDENTITY(1.0, float(mat4x2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), abs(_GLF_ONE(1.0, injectionSwitch.y)), 1.0, sin(0.0), 0.0, 0.0, 0.0, 1.0)))))) * (float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0))))))), exp(0.0)))))), bool(true))), float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(float(mat2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))), 1.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(22.36)), _GLF_IDENTITY(float(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, max(0.0, 0.0)))))), max(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-8.8)), float(0.0), bool(true))))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(_GLF_FUZZED(-75.50)), float(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(_GLF_FUZZED(7116.1134)), float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), bool(true)))), bool(true))), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))) * (float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)))), _GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)), round(length(normalize(1.0))) * (float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0))))))), _GLF_IDENTITY(float(vec2(float(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, max(0.0, 0.0)))))), max(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(_GLF_FUZZED(-75.50)), float(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(_GLF_FUZZED(7116.1134)), float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), bool(true)))), bool(true))), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))) * (float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)))), _GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)), round(length(normalize(1.0))) * (float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0))))))), exp(0.0))), clamp(float(vec2(float(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, max(0.0, 0.0)))))), max(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), _GLF_IDENTITY(mix(float(_GLF_FUZZED(-75.50)), float(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(_GLF_FUZZED(7116.1134)), float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), bool(true)))), bool(true)), (mix(float(_GLF_FUZZED(-75.50)), float(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(_GLF_FUZZED(7116.1134)), float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), bool(true)))), bool(true))) / 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))) * (float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)))), _GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)), round(length(normalize(1.0))) * (float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0))))))), exp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0))))))), float(vec2(float(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, max(0.0, 0.0)))))), max(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(_GLF_FUZZED(-75.50)), float(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(_GLF_FUZZED(7116.1134)), float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), bool(true)))), bool(true))), dot(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, 1.0), (vec2(0.0, 1.0)) / vec2(1.0, 1.0)))) * (float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)))), _GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)), round(length(normalize(1.0))) * (float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0))))))), exp(0.0))), float(vec2(float(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, max(0.0, 0.0)))))), max(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(_GLF_FUZZED(-75.50)), float(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(_GLF_FUZZED(7116.1134)), float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), bool(true)))), bool(true))), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))) * (float(mat2(_GLF_IDENTITY(injectionSwitch.y, cos(0.0) * (injectionSwitch.y)), 1.0, 0.0, 0.0)))), _GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)), round(length(normalize(_GLF_IDENTITY(1.0, float(mat4x2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), abs(_GLF_ONE(1.0, injectionSwitch.y)), 1.0, sin(0.0), 0.0, 0.0, 0.0, 1.0)))))) * (float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0))))))), exp(0.0)))))), bool(true))), float(mat4x3(_GLF_IDENTITY(float(mat2(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))), 1.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(22.36)), _GLF_IDENTITY(float(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, max(0.0, 0.0)))))), max(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-8.8)), float(0.0), bool(true))))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(_GLF_FUZZED(-75.50)), float(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(_GLF_FUZZED(7116.1134)), float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), bool(true)))), bool(true))), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))) * (float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)))), _GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)), round(length(normalize(1.0))) * (float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0))))))), _GLF_IDENTITY(float(vec2(float(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, max(0.0, 0.0)))))), max(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(_GLF_FUZZED(-75.50)), float(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(_GLF_FUZZED(7116.1134)), float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), bool(true)))), bool(true))), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))) * (float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)))), _GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)), round(length(normalize(1.0))) * (float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0))))))), exp(0.0))), clamp(float(vec2(float(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, max(0.0, 0.0)))))), max(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), _GLF_IDENTITY(mix(float(_GLF_FUZZED(-75.50)), float(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(_GLF_FUZZED(7116.1134)), float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), bool(true)))), bool(true)), (mix(float(_GLF_FUZZED(-75.50)), float(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(_GLF_FUZZED(7116.1134)), float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), bool(true)))), bool(true))) / 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))) * (float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)))), _GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)), round(length(normalize(1.0))) * (float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0))))))), exp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0))))))), float(vec2(float(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, max(0.0, 0.0)))))), max(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(_GLF_FUZZED(-75.50)), float(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(_GLF_FUZZED(7116.1134)), float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), bool(true)))), bool(true))), dot(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, 1.0), (vec2(0.0, 1.0)) / vec2(1.0, 1.0)))) * (float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)))), _GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)), round(length(normalize(1.0))) * (float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0))))))), exp(0.0))), float(vec2(float(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, max(0.0, 0.0)))))), max(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(_GLF_FUZZED(-75.50)), float(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), mix(float(_GLF_FUZZED(7116.1134)), float(dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), bool(true)))), bool(true))), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))) * (float(mat2(_GLF_IDENTITY(injectionSwitch.y, cos(0.0) * (injectionSwitch.y)), 1.0, 0.0, 0.0)))), _GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)), round(length(normalize(_GLF_IDENTITY(1.0, float(mat4x2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), abs(_GLF_ONE(1.0, injectionSwitch.y)), 1.0, sin(0.0), 0.0, 0.0, 0.0, 1.0)))))) * (float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0))))))), exp(0.0)))))), bool(true))), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, sqrt(1.0), 1.0, tan(0.0)))), 0.0, 1.0, 1.0, sqrt(1.0), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))), mix(float(_GLF_FUZZED(404.313)), float(_GLF_IDENTITY(_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0)), _GLF_IDENTITY((float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0))) * _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), (true ? (float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0))) * _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))) : _GLF_FUZZED(-68.81)))), mix(float(_GLF_FUZZED(22.36)), _GLF_IDENTITY(float(float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0))), float(vec2(float(float(mat2(injectionSwitch.y, 1.0, 0.0, 0.0))), 1.0))), bool(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, ! (! (true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, ! (! (true))), false), false, false))))))))), bool(true))))))))
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY(20617 & (0 >> _GLF_IDENTITY(int(1), int(1))), (20617 & (0 >> _GLF_IDENTITY(int(1), int(1)))) << 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + _GLF_struct_replacement_5.subgroup_base + _GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_struct_replacement_12._f1.subgroup_size), min(((subgroup_local_id + 1) % _GLF_struct_replacement_12._f1.subgroup_size), ((subgroup_local_id + 1) % _GLF_struct_replacement_12._f1.subgroup_size)));
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), false, true)))))), bool(bvec2(! (false), false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))));
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))), mix(vec2(_GLF_FUZZED(vec3(-4.4, 9115.0031, -1.0).t), _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))))[1], (((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))))[1]) / 1.0)), vec2(((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))))[0], _GLF_FUZZED(562.755)), bvec2(true, false))) / abs(vec2(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))), (_GLF_IDENTITY(false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), min(injectionSwitch, injectionSwitch))) / abs(vec2(1.0, 1.0))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))))))) / abs(vec2(1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) / abs(vec2(1.0, 1.0))))), mix(vec2((false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), min(injectionSwitch, injectionSwitch))) / abs(vec2(1.0, 1.0))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))))))) / abs(vec2(1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) / abs(vec2(1.0, 1.0))))))[0], (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), min(injectionSwitch, injectionSwitch))) / abs(vec2(1.0, 1.0))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))))))) / abs(vec2(1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) / abs(vec2(1.0, 1.0))))))[1]), vec2(_GLF_FUZZED(458.863), _GLF_FUZZED(-4520.8367)), bvec2(false, false))))).y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, false || _GLF_IDENTITY(((false) || false), false || (((false) || false))))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, 1.0 * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))) + sqrt(0.0)), (injectionSwitch.y) - 0.0)))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = (1 ^ ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(ivec3(int(_GLF_IDENTITY(5, (5) - (0 << _GLF_IDENTITY(int(4), int(4))))), 0, 1))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), ~ (~ (int(5)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), ~ (~ (int(5)))), clamp(_GLF_IDENTITY(int(5), ~ (~ (int(5)))), _GLF_IDENTITY(int(5), ~ (~ (int(5)))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), ~ (~ (int(5)))), (_GLF_IDENTITY(int(5), ~ (~ (int(5))))) >> 0)))) << 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1, (1) + 0) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
                {
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                barrier();
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, false, false, true))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))), bool(bool(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               do
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 1.0, 1.0))), injectionSwitch.y))))))
                    barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             else
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)), 0u + ((_GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))], 4, 64, 2);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, ! (! (false))), true), true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (! (bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (! (bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && ((_GLF_IDENTITY(bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), ! (! (bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || false); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), false || (_GLF_DEAD(false))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))) && true, bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true && (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))) && true)))))
        {
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x)) ^ ((_GLF_IDENTITY(97396, int(ivec2(97396, 1))) & _GLF_IDENTITY(0, (0) ^ (0 >> _GLF_IDENTITY(int(2), int(2))))) << _GLF_IDENTITY(int(5), int(5))))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
        }
      }
     for(int _injected_loop_counter = ((_GLF_IDENTITY(4023 & 0, (false ? _GLF_FUZZED(_injected_loop_counter) : 4023 & 0))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), min(int(7), int(7))), (_GLF_IDENTITY(int(7), min(int(7), int(7)))) - (0 | 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
      {
       do
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(8, (0 | 0) ^ (_GLF_IDENTITY(8, (8) * 1)))), _GLF_IDENTITY(int(8), (true ? int(8) : _GLF_FUZZED(_injected_loop_counter))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(_GLF_IDENTITY(false, (false) || false)))) && true)), (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_LOOP(false), false, true)), ! (! (bool(bvec3(_GLF_WRAPPED_LOOP(false), false, true)))))));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) || false)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, int(ivec3(2, 0, 0)))) | 0))) | (int(2))))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))))), true, false))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), (_GLF_IDENTITY(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), ! (! (_injected_loop_counter < ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), max(int(0), int(0)))) | (int(0))), int(0))) >> _GLF_IDENTITY(int(0), int(0))))))) || false)); _injected_loop_counter ++)
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)), false || (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))))))))))))
      barrier();
    }
  }
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (_GLF_IDENTITY(! (_injected_loop_counter < 1), _GLF_IDENTITY(bool(bool(! (_injected_loop_counter < 1))), _GLF_IDENTITY(bool(bvec4(bool(bool(! (_injected_loop_counter < 1))), false, false, false)), bool(bool(bool(bvec4(bool(bool(! (_injected_loop_counter < 1))), false, false, false)))))))))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, 0 + (0))); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))) << 0u))), subgroup_local_id), clamp(clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))) << 0u))), subgroup_local_id), clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))) << 0u))), subgroup_local_id), clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))), (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))) << 0u))), subgroup_local_id)))) % 2) == 0)
      {
       subgroupAll(_GLF_IDENTITY(false, (false) || false));
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))))) && true))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(injectionSwitch.x, 1.0, exp(0.0), 1.0, 1.0, 1.0, 0.0, 1.0), (mat2x4(injectionSwitch.x, 1.0, exp(0.0), 1.0, 1.0, 1.0, 0.0, 1.0)) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), mix(float(_GLF_FUZZED(62.20)), float(float(_GLF_IDENTITY(mat2x4(injectionSwitch.x, 1.0, exp(0.0), 1.0, 1.0, 1.0, 0.0, 1.0), (mat2x4(injectionSwitch.x, 1.0, exp(0.0), 1.0, 1.0, 1.0, 0.0, 1.0)) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), bool(true)))) > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bool(bvec3(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false)))))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bool(bvec3(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))) || false)))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, 0u + (next_virtual_gid))], uint(1), _GLF_IDENTITY(4, clamp(4, 4, 4)), 64, 4);
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))[1])).y)) && (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) && true), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) && true), true), true, true))))), _GLF_IDENTITY(bool(bvec4(false, true, true, true)), false || (bool(bvec4(false, true, true, true))))))))), true && (_GLF_DEAD(false)))))))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                      }
                     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       do
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           do
                            {
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 do
                                  {
                                   barrier();
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                               else
                                {
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, log(1.0), 0.0, determinant(mat3(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0))) + abs(0.0)), 0.0, 0.0, 1.0, sqrt(0.0), 0.0, 0.0, 1.0))))).y))));
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), false || (bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))
          barrier();
        }
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) || false) || false, bool(_GLF_IDENTITY(bvec3((false) || false, true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3((false) || false, true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3((false) || false, true, false), bvec3(bvec3(bvec3((false) || false, true, false)))), false))), true))))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   barrier();
                  }
                }
               else
                {
                }
              }
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), false, true))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), false, true))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(! (! (bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), false, true))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec4(! (! (bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), false, true))), false || (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), false, true))), true && (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(89.45), _GLF_FUZZED(vec4(-70.75, 7585.7805, -82.77, -85.85).s)), bvec2(false, false))).x > injectionSwitch.y)), bool(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), false, true))))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(bvec4(! (! (bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), bool(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), false, true))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || (! (bool(bvec4(! (! (bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec3(! ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), false, true))))), false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = ((0 & -88874) >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(ivec3(int(8), 1, 0), (ivec3(int(8), 1, 0)) | (ivec3(int(8), 1, 0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
                      barrier();
                    }
                  }
                }
               else
                {
                }
               barrier();
              }
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(float(36286)) : injectionSwitch.y))))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  barrier();
                }
              }
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                  barrier();
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool((false)), (bool((false))) && true)))))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (-36121 & 0)); _injected_loop_counter --)
              {
               barrier();
              }
            }
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), _GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)), false))))
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1))
                  {
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), ! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((! (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))))))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           subgroupAll(false);
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))));
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-93.82)))))))));
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_DEAD(false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || false))))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! _GLF_IDENTITY((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), vec2(vec3(vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), 0.0))))) - vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(851.210, mix(float(_GLF_FUZZED(-412.761)), float(851.210), bool(true))))), float(0.0), bool(true))))))).x > injectionSwitch.y)) || false))), bool(bool(_GLF_IDENTITY((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), float(mat2x4(_GLF_IDENTITY(clamp(0.0, 0.0, 0.0), float(vec4(_GLF_IDENTITY(clamp(0.0, 0.0, 0.0), min(clamp(0.0, 0.0, 0.0), clamp(0.0, 0.0, 0.0))), sqrt(0.0), 0.0, 0.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, 1.0, 0.0)))), 0.0)), 0.0, 0.0)), vec2(vec3(vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), 0.0))))) - vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(851.210)), float(0.0), bool(true))))))).x > injectionSwitch.y)) || false))), ! (! ((! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0))).y), ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), vec2(vec3(vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), 0.0))), max(_GLF_IDENTITY(_GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), vec2(vec3(vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), 0.0))), max(_GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), vec2(vec3(vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), vec2(vec3(vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), 0.0))), max(_GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), vec2(vec3(vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), 0.0))), _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), vec2(vec3(vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), 0.0))))))), _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), vec2(vec3(vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), 0.0))))))) - vec2(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(851.210)), float(0.0), bool(true)))), mix(float(_GLF_FUZZED(-8830.6311)), float(clamp(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(851.210)), float(0.0), bool(true))))), bool(true)))))).x > injectionSwitch.y)) || false)))))))))))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(sin(vec2(1327.2171, _GLF_IDENTITY(-7.8, min(-7.8, _GLF_IDENTITY(-7.8, mix(float(-7.8), float(_GLF_FUZZED(3287.4537)), bool(false)))))))) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))))))))
            barrier();
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))));
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))))))), ! (! ((_GLF_IDENTITY(! (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))) || false)), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))), false || (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y)))))))))))))))))))
              {
              }
             else
              {
               barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), false || (bool(bool((injectionSwitch.x > injectionSwitch.y)))))))));
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-0.6)))))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), sqrt(sqrt(1.0)) * (_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             do
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (false)), (_GLF_IDENTITY((! (false)), ((! (false))) && true)) || _GLF_IDENTITY(false, bool(bvec3(false, true, true)))), (_GLF_IDENTITY(! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), true && ((false))))))), true && (! (! _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), true && ((false)))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), true && ((false)))), (! (_GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), (_GLF_IDENTITY((false), true && ((false)))) && true))) || false)))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                  barrier();
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), false || (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                      barrier();
                    }
                   else
                    {
                     for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & -31735)); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
              {
              }
             else
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)), ~ (~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)), min((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)), (1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))))))))); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (_GLF_IDENTITY(~ (int(0)), 0 ^ (~ (int(0)))))))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), (uint(_GLF_IDENTITY(1, 0 + (1)))) / (1u & _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) << 0u), min(_GLF_IDENTITY(1u, (1u) << 0u), _GLF_IDENTITY(1u, (1u) << 0u))))), 4, 64, 4);
              }
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, (false) || false), true))))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))));
                 barrier();
                }
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) | (1))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), true && (bool(_GLF_IDENTITY(bvec3(false, true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, true, true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(false, true, true), false)), false))))))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(_GLF_IDENTITY(-1.4, clamp(-1.4, -1.4, -1.4)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)))
                barrier();
              }
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), false, false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), false, false)))), false || ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), false, false))))))), true && (bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), false, false)))), false || ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), false, false)))))))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), false, false)))), false || ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), false, false))))))), true && (bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), false, false)))), false || ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), false, false)))))))))), bool(bvec4(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), false, false)))), false || ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), false, false))))))), true && (bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), false, false)))), false || ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), false, false)))))))))), true, false, false))), false, false, true)))))))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, 1.0, log(1.0), determinant(mat2(1.0, log(1.0), 0.0, 1.0)), tan(0.0), 1.0), (mat3x2(injectionSwitch.y, 1.0, log(1.0), determinant(mat2(1.0, log(1.0), 0.0, 1.0)), tan(0.0), 1.0)) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))))), ! (! (! (_GLF_DEAD(false))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false)))) && true))));
      }
     subgroupBarrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), _GLF_IDENTITY(bool(bvec2(bool(bvec2(_GLF_DEAD(false), true)), _GLF_IDENTITY(true, (true) && true))), (bool(bvec2(bool(bvec2(_GLF_DEAD(false), true)), true))) && true))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec4(false, true, true, false))))))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) - 0), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1)))))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (false), (! (false)) || false)))));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   atomicStore(buf[virtual_gid], _GLF_IDENTITY(read, _GLF_IDENTITY(0u + (read), ~ (~ (0u + (read))))), 4, 64, 4);
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
