#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(591.118)), vec2(_GLF_FUZZED(7.3), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(591.118)), vec2(_GLF_FUZZED(7.3), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(591.118)), clamp(vec2((injectionSwitch)[0], _GLF_FUZZED(591.118)), vec2((injectionSwitch)[0], _GLF_FUZZED(591.118)), vec2((injectionSwitch)[0], _GLF_FUZZED(591.118)))), vec2(_GLF_IDENTITY(_GLF_FUZZED(7.3), min(_GLF_IDENTITY(_GLF_FUZZED(7.3), mix(float(_GLF_IDENTITY(_GLF_FUZZED(7.3), 0.0 + (_GLF_FUZZED(7.3)))), float(_GLF_FUZZED(float(false))), bool(false))), _GLF_FUZZED(7.3))), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y) || false))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(591.118)), vec2(_GLF_FUZZED(7.3), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(591.118)), vec2(_GLF_FUZZED(7.3), (injectionSwitch)[1]), bvec2(false, true))).x, mix(float(_GLF_FUZZED((956.482 - -7916.0149))), float(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(591.118)), vec2(_GLF_FUZZED(7.3), (injectionSwitch)[1]), bvec2(false, true))).x), bool(true))) > injectionSwitch.y)))), true), false, false)))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(67366))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))))
          barrier();
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         else
          {
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(18.37) : injectionSwitch.x)) > injectionSwitch.y)))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = ((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY((1) / 1, int(ivec3((1) / 1, 0, 1)))) << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) >> (0 | 0)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(4, (4) >> (0 | 0)), max(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) >> (0 | 0)), 0 ^ (_GLF_IDENTITY(4, (4) >> (0 | 0)))), _GLF_IDENTITY(4, (4) >> (0 | 0)))))))), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((int(4)), _GLF_IDENTITY(int(ivec4((int(4)), 1, (1 ^ 1), 0)), (int(ivec4((int(4)), 1, (1 ^ 1), 0))) << 0)), ((int(_GLF_IDENTITY(4, 0 | (4))))) * 1), int(ivec3(_GLF_IDENTITY((int(4)), ((int(4))) * 1), 1, 0))) >> 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         else
          {
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))), (false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).x > injectionSwitch.y) && true)))))) && true)))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false ? _GLF_FUZZED(4.6) : injectionSwitch.y, (false ? _GLF_FUZZED(4.6) : injectionSwitch.y) + 0.0))), injectionSwitch.y)))))) || false), false, false)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, clamp(_GLF_IDENTITY(gl_WorkGroupSize.x, (true ? _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, gl_WorkGroupSize))) + (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u))).x : _GLF_FUZZED(subgroup_id))), gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x))) >> 0u, min(_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x))) >> 0u, 0u | ((_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x))) >> _GLF_IDENTITY(0u, (0u) / 1u))), _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x))) >> 0u, ~ (~ ((_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x))) >> 0u))))))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) || false))), true, false, false))), (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, false, false)))) && true)) || false), ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), true, false)), true && (bool(bvec3(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), true, false)))), (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), ((! (false))) && true)))), ! (! (! (! (false))))), true, false)), true && (bool(bvec3(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), true, false))))) && true))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY((false), ((false)) && true)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (! (false)), ! (! (! (! (_GLF_IDENTITY(false, (false) && true)))))), true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(! (! (false)), ! (! (! (! (_GLF_IDENTITY(false, (false) && true)))))), true, false)), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(! (! (false)), ! (! (! (! (_GLF_IDENTITY(false, (false) && true)))))), true, false)), false)))))), true && _GLF_IDENTITY((bool(bvec3(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), true, false))), ! (_GLF_IDENTITY(! ((bool(bvec3(_GLF_IDENTITY(! (! (false)), ! (! (! _GLF_IDENTITY((! (false)), ((! (false))) || false)))), true, false)))), true && (! ((bool(bvec3(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), true, _GLF_IDENTITY(false, (false) || false))))))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), 1.0))).x > injectionSwitch.y)) || (true)), false, false)))) || false)), (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), true, false)), true && (bool(bvec3(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), true, false)))))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY((false), ((false)) && true)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), true, false)), true && _GLF_IDENTITY((bool(bvec3(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), true, false))), ! (_GLF_IDENTITY(! ((bool(bvec3(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), true, false)))), true && (! ((bool(bvec3(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), true, false)))))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), false, false)))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), true, false)), true && (bool(bvec3(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), true, false)))))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY((false), ((false)) && true)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), true, false)), true && _GLF_IDENTITY((bool(bvec3(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), true, false))), ! (_GLF_IDENTITY(! ((bool(bvec3(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), true, false)))), true && (! ((bool(bvec3(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), true, false)))))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), false, false)))))) || false)), bool(bvec3((_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), true, false)), true && (bool(bvec3(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), true, false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), true, false)), true && (bool(bvec3(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), true, false)))))), bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), true, false)), true && (bool(bvec3(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), true, false)))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))), ((false)) && true)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (! _GLF_IDENTITY((false), false || ((false)))), ! (! (! (! (false))))), true, false)), true && _GLF_IDENTITY((bool(bvec3(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), true, false))), ! (_GLF_IDENTITY(! ((bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), true && (! (! (false)))), ! (! (! (_GLF_IDENTITY(! (false), (! (false)) || false))))), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) || false))))), false)))), true && (! ((bool(bvec3(_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (! (! (! (false))))), true, false)))))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), false, false)))) || false)), true, false)))) && true)))))
    barrier();
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u)) << 0u) + _GLF_IDENTITY(subgroup_base, 0u | (subgroup_base)), min(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u)) << 0u) + _GLF_IDENTITY(subgroup_base, 0u | (_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, uint(uvec3(subgroup_base, 1u, (1u | 0u)))), subgroup_base)))), _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), (workgroup_base) - 0u)) << 0u) + _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) - 0u)) | (_GLF_IDENTITY(0u, (0u) / 1u))) | (subgroup_base)))) + subgroup_local_id;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), bool(bvec2(bool(_GLF_IDENTITY(false, false || (false))), false)))), bool(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(false, false || (false))))), ((bool(bool(_GLF_IDENTITY(false, false || (false)))))) && true) && true))))), bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), bool(bvec2(bool(_GLF_IDENTITY(false, false || (false))), false)))), bool(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(false, false || (false))))), ((bool(bool(_GLF_IDENTITY(false, false || (false)))))) && true) && true))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (true ? _GLF_IDENTITY(workgroup_base, (workgroup_base) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) + _GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)) : _GLF_FUZZED(workgroup_base))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, uint(uvec2(workgroup_base + subgroup_base, 0u))), max(workgroup_base + subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 0u | (_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)))) + subgroup_base, ~ (~ (_GLF_IDENTITY(workgroup_base, 0u | (_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)))) + subgroup_base))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(workgroup_base + subgroup_base), max(uint(workgroup_base + subgroup_base), uint(workgroup_base + subgroup_base)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(workgroup_base + subgroup_base), max(uint(workgroup_base + subgroup_base), uint(workgroup_base + subgroup_base)))), ~ (_GLF_IDENTITY(~ (uint(_GLF_IDENTITY(uint(workgroup_base + subgroup_base), max(uint(workgroup_base + subgroup_base), uint(workgroup_base + subgroup_base))))), clamp(~ (uint(_GLF_IDENTITY(uint(workgroup_base + subgroup_base), max(uint(workgroup_base + subgroup_base), uint(workgroup_base + subgroup_base))))), ~ (uint(_GLF_IDENTITY(uint(workgroup_base + subgroup_base), max(uint(workgroup_base + subgroup_base), uint(workgroup_base + subgroup_base))))), ~ (uint(_GLF_IDENTITY(uint(workgroup_base + subgroup_base), max(uint(workgroup_base + subgroup_base), uint(workgroup_base + subgroup_base)))))))))) | 0u))))) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u), (subgroup_base) * 1u), subgroup_base)), (_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u) + subgroup_base) / 1u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, 0u | (subgroup_base)), (workgroup_base + subgroup_base) | _GLF_IDENTITY(0u, ~ (~ (0u))))) / uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(391.850), _GLF_FUZZED(-641.290)), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[1]), bvec2(true, true))).y))), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_base, max(workgroup_base + subgroup_base, workgroup_base + subgroup_base))), clamp(_GLF_IDENTITY((workgroup_base + subgroup_base), min((workgroup_base + subgroup_base), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, uint(uint(workgroup_base))), _GLF_IDENTITY(workgroup_base, ~ (~ (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u)) >> (0u ^ 0u))))))) + subgroup_base))), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u)) ^ 0u), 0u, 1u)), min(uint(uvec3(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u)) ^ 0u), 0u, 1u)), uint(uvec3(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u)) ^ 0u), 0u, 1u))))) + subgroup_base), 0u | ((workgroup_base + subgroup_base))), (workgroup_base + subgroup_base))) / 1u)))) | 0u) + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, 0u + (subgroup_local_id + 1))) / 1u)), clamp((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))) + 1), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / _GLF_IDENTITY(1u, min(1u, 1u))), (subgroup_local_id + 1)))))) >> _GLF_IDENTITY(0u, min(0u, 0u))) % subgroup_size), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / 1u))), max((subgroup_local_id + 1), (subgroup_local_id + 1))), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, 1u * (subgroup_local_id + 1))), clamp((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))) + 1), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / 1u), (subgroup_local_id + 1)))))) >> 0u, ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY((subgroup_local_id + 1), clamp((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), min(subgroup_local_id, subgroup_local_id)))) + 1), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / 1u), (subgroup_local_id + 1)))))) >> 0u, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) ? _GLF_FUZZED(workgroup_size) : (_GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(clamp((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))) + 1), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / 1u), (subgroup_local_id + 1)), (clamp((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))) + 1), _GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (subgroup_local_id + 1) : _GLF_FUZZED(atomicExchange(workgroup_size, workgroup_id))))) / 1u), (subgroup_local_id + 1))) | (clamp((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))) + 1), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / 1u), (subgroup_local_id + 1)))))))) >> 0u)))))) % subgroup_size), (true ? _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / 1u))), max((subgroup_local_id + 1), (subgroup_local_id + 1))), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, 1u * (subgroup_local_id + 1))), clamp((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))) + 1), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / 1u), (subgroup_local_id + 1)))))) >> 0u, ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY((subgroup_local_id + 1), clamp((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), min(subgroup_local_id, subgroup_local_id)))) + 1), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / 1u), (subgroup_local_id + 1)))))) >> 0u, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) ? _GLF_FUZZED(workgroup_size) : (_GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(clamp((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))) + 1), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / 1u), (subgroup_local_id + 1)), (clamp((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))) + 1), _GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (subgroup_local_id + 1) : _GLF_FUZZED(atomicExchange(workgroup_size, workgroup_id))))) / 1u), (subgroup_local_id + 1))) | (clamp((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))) + 1), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / 1u), (subgroup_local_id + 1)))))))) >> 0u)))))) % subgroup_size), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / 1u))), max((subgroup_local_id + 1), (subgroup_local_id + 1))), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, 1u * (subgroup_local_id + 1))), clamp((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))) + 1), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / 1u), (subgroup_local_id + 1)))))) >> 0u, ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY((subgroup_local_id + 1), clamp((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), min(subgroup_local_id, subgroup_local_id)))) + 1), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / 1u), (subgroup_local_id + 1)))))) >> 0u, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) ? _GLF_FUZZED(workgroup_size) : (_GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(clamp((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))) + 1), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / 1u), (subgroup_local_id + 1)), (clamp((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))) + 1), _GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (subgroup_local_id + 1) : _GLF_FUZZED(atomicExchange(workgroup_size, workgroup_id))))) / 1u), (subgroup_local_id + 1))) | (clamp((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))) + 1), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / 1u), (subgroup_local_id + 1)))))))) >> 0u)))))) % subgroup_size)) << (0u | 0u)) : _GLF_FUZZED(subgroup_base))), 0u), (uvec2((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))), max((subgroup_local_id + 1), (subgroup_local_id + 1))), (_GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY((subgroup_local_id + 1), clamp((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))), min(subgroup_local_id, subgroup_local_id)))), (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), min(subgroup_local_id, subgroup_local_id))))) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)), min(subgroup_local_id, subgroup_local_id)))), (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))))) / 1u))) + 1), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / 1u), (subgroup_local_id + 1)))))) >> 0u) % subgroup_size), 0u)) | (uvec2((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), max((subgroup_local_id + 1), (subgroup_local_id + 1))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + 1), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY((subgroup_local_id + 1), clamp((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))) + 1), _GLF_IDENTITY((subgroup_local_id + 1), ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << (0u >> _GLF_IDENTITY(uint(6u), uint(6u))))) * 1u) + 1)) / 1u), (subgroup_local_id + 1)))))) >> 0u) % subgroup_size), 0u)))));
 uint read = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(2, 0, (1 | 1)), ~ (~ (_GLF_IDENTITY(ivec3(2, 0, (1 | 1)), ~ (~ (ivec3(2, 0, (1 | 1))))))))), ~ (~ (int(_GLF_IDENTITY(ivec3(2, 0, (1 | 1)), ~ (~ (_GLF_IDENTITY(ivec3(2, 0, (1 | 1)), ~ (~ (ivec3(2, 0, (1 | 1))))))))))))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << 0)), (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), 1.0 * (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)))) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))) ? _GLF_IDENTITY(_GLF_FUZZED(-95580), (_GLF_FUZZED(-95580)) / 1) : _GLF_IDENTITY(int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec4(1, 1, 1, 1)))) << 0)), _GLF_IDENTITY(int(1), (int(1)) << 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << 0)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-95580) : _GLF_IDENTITY(_GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(13755) : int(1))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), 1 * (int(1))), int(1), int(1)))) << 0))), _GLF_IDENTITY(int(int(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-95580) : _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), 1 * (int(1))), int(1), int(1))), (_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), 1 * (int(1))), int(1), int(1)))) ^ 0)) << 0))), ~ (_GLF_IDENTITY(~ ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-95580) : _GLF_IDENTITY(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) * (1 | 1))) | (int(1))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), 1 * (int(1))), int(1), int(1)))) << 0)))), (~ ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(-4466.8466, -42.96)))).y)) ? _GLF_FUZZED(-95580) : _GLF_IDENTITY(int(_GLF_IDENTITY(1, ~ (~ (1)))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(1), 1 * (int(1))), (_GLF_IDENTITY(int(1), 1 * (int(1)))) >> 0), int(1), int(1)))) << 0))))) - 0))))), (_GLF_IDENTITY(int(int(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-95580) : _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) * int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), 1 * (int(1))), int(1), int(1)))) << 0))), ~ (_GLF_IDENTITY(~ ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-95580) : _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), 1 * (int(1))), int(1), int(1)))) << 0)))), (~ ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-95580) : _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), 1 * (int(1))), int(1), int(1)))) << 0))))) - 0))))), (int(int(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-95580) : _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), 1 * (int(1))), int(1), int(1)))) << 0))), ~ (_GLF_IDENTITY(~ ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-95580) : _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), 1 * (int(1))), int(1), int(1)))) << 0)))), (~ ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-95580) : _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), 1 * (int(1))), int(1), int(1)))) << 0))))) - 0)))))) | (int(int(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y)) ? _GLF_FUZZED(-95580) : _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) ^ 0), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), 1 * (int(1))), int(1), int(1))), ~ (~ (_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, (1) >> 0), 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 1)), int(int(int(ivec4(_GLF_IDENTITY(1, (1) >> 0), 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 1))))))), 1 * (int(1))), int(1), int(1))))))) << 0))), ~ (_GLF_IDENTITY(~ ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-95580) : _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), 1 * (int(1))), int(1), int(1)))) << _GLF_IDENTITY(0, clamp(0, 0, 0)))))), _GLF_IDENTITY((~ ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-95580) : _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), 1 * (int(1))), int(1), int(1)))) << 0))))) - 0, max(_GLF_IDENTITY((~ ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-95580) : _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), 1 * (int(1))), int(1), int(1)))) << 0))))) - 0, ((~ ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-95580) : _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), 1 * (int(1))), int(1), int(1)))) << 0))))) - 0) << 0), (~ ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-95580) : _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), 1 * (int(1))), int(1), int(1)))) << 0))))) - 0)))))))))) - 0)))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) << 0), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) << 0), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) << 0), 0 + (_GLF_IDENTITY(int(1), (int(1)) << 0))))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-95580) : _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp((int(1)), _GLF_IDENTITY((int(1)), clamp((int(1)), (int(1)), (int(1)))), _GLF_IDENTITY((int(1)), clamp((int(1)), (int(1)), (int(1)))))) << 0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((false), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, true)))))), (_GLF_IDENTITY((false), bool(bvec3((false), true, false)))) || false)), true && (! (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec3((false), true, false)))) || false))))), bool(bvec2((_GLF_IDENTITY(! (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec3((false), true, false)))) || false)), true && (! (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec3((false), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) && true), false)))) || false))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))) && true))))))
            barrier();
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(3108.4808)), bool(false)))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + abs(0.0))), ! _GLF_IDENTITY((! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + abs(0.0))))), ! (! ((! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + abs(0.0))))))))))), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))) || false)), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))) || false, true && ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))), true)))) || false))))))))));
      }
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_IDENTITY((subgroup_local_id % 2) == 0, true && (_GLF_IDENTITY((subgroup_local_id % 2), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | ((subgroup_local_id % 2))) == 0)))
        {
         subgroupAll(false);
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, 0 ^ (2))), int(2)), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) >> 0), clamp(2, 2, _GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, (2) ^ 0)))))), int(2)), 0, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1), min(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) | (int(2)))) / 1), int(2)), 0, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1), ivec4(_GLF_IDENTITY(int(2), int(2)), 0, int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0))) : _GLF_FUZZED(6.4)))) - 0.0)), 1)))))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
            {
             atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
            }
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, true && (false)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_IDENTITY(false, true && (false)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), ! (_GLF_IDENTITY(! (bool(bvec2(false, _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))), bool(bvec4(! (bool(bvec2(false, false))), true, false, true)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)))), true && (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                  }
                 else
                  {
                  }
                }
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y), ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(448.979)), bool(false))), 1.0)), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(448.979)), bool(false))), 1.0)), clamp(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(448.979)), bool(false))), 1.0)), _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(448.979)), bool(false))), 1.0)), _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(448.979)), bool(false))), 1.0))))) - 0.0)), float(_GLF_FUZZED(4.6)), bool(_GLF_IDENTITY(false, true && (false))))))).y, float(mat2x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(448.979)), bool(false))), 1.0))), float(_GLF_FUZZED(4.6)), bool(false))))).y, 1.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 0.0))))) || false))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y), _GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(tan(vec2(6484.0265, -0.6))) : injectionSwitch))) * vec2(1.0, 1.0)).y)) || _GLF_IDENTITY(false, (false) || false), bool(bvec4(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(tan(vec2(6484.0265, -0.6))) : injectionSwitch))) * vec2(1.0, 1.0)).y)) || _GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))), true, true))))
                barrier();
              }
             else
              {
               do
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))))))
                  {
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false), _GLF_IDENTITY(false, (false) || false), true))));
              }
             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, true))))))))
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, round(length(normalize(vec2(1.0, 1.0)))) * (injectionSwitch.y))))))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                 barrier();
                }
              }
            }
          }
         else
          {
          }
         for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) - 0.0), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           subgroupAll(_GLF_IDENTITY(false, bool(bool(false))));
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(7), min(int(7), int(7))), int(7))))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ _GLF_IDENTITY((0 ^ 1), ((0 ^ 1)) / 1))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) * 1.0, max((injectionSwitch.y) * 1.0, (injectionSwitch.y) * 1.0))), injectionSwitch.y))))), false || ((injectionSwitch.x > injectionSwitch.y))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))) || false))), true)))) && true)))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(findLSB(_GLF_IDENTITY(42728, min(_GLF_IDENTITY(42728, (42728) | (42728)), 42728)))) : _injected_loop_counter)) < (0 ^ 1)), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)), false, true, true)))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((0 ^ 1), int(ivec3((0 ^ 1), int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)), false, true, true)))), true && (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((0 ^ 1), int(ivec3((0 ^ _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(1, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)), false, _GLF_IDENTITY(true, (true) || false), true)))))))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) * 1.0))) < injectionSwitch.y)) && (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(0, (0) | (0)) ^ 1)), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1))))))), false, true, true)))), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(0 ^ 1, clamp(0 ^ 1, 0 ^ 1, 0 ^ 1)))), false, true, true)))))))), bool(bool(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)), false, true, true)))), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)), false, true, true))))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, max(0, 0)))) ^ 1)), false)))), bool(bool(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)), false))))))))), false, true, true)))), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((0 ^ 1), ~ (~ ((0 ^ 1))))), bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (0 ^ 1), bool(bvec2(_injected_loop_counter < (0 ^ 1), true)))), false, true, true))))))))))))))))); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 | 1, clamp(_GLF_IDENTITY(0 | 1, (true ? 0 | 1 : _GLF_FUZZED(_injected_loop_counter))), 0 | 1, 0 | 1)))); _injected_loop_counter ++)
                  {
                   do
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(7.2)), vec2(_GLF_FUZZED(-33.00), (injectionSwitch)[1]), bvec2(false, true))).y, bool(bvec3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(7.2)), vec2(_GLF_FUZZED(-33.00), (injectionSwitch)[1]), bvec2(false, true))).y, true, true))))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch), (false ? _GLF_FUZZED(vec2(-7.6, 3415.0134)) : min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)))).y)), false))), false || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) && true, _GLF_IDENTITY(true, false || (true)) && (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) && true, ! (! (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (((injectionSwitch.x > injectionSwitch.y))) && true) && true))))))), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bool(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, (true ? _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y : _GLF_FUZZED(-7796.0643)))))), true && ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, (true ? _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y : _GLF_FUZZED(-7796.0643))))))))), false))), false || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bool(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))) || false)), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))), false))))))))) || false)), bool(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch), (false ? _GLF_FUZZED(vec2(-7.6, 3415.0134)) : min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)))).y)), false))), false || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) && true, _GLF_IDENTITY(true, false || (true)) && (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) && true, ! (! (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (((injectionSwitch.x > injectionSwitch.y))) && true) && true))))))), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bool(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, (true ? _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y : _GLF_FUZZED(-7796.0643)))))), true && ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, (true ? _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y : _GLF_FUZZED(-7796.0643))))))))), false))), false || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bool(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))) || false)), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))), false))))))))) || false)), false, false))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(7.2)), vec2(_GLF_FUZZED(-33.00), (injectionSwitch)[1]), bvec2(false, true))).y, bool(bvec3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(7.2)), vec2(_GLF_FUZZED(-33.00), (injectionSwitch)[1]), bvec2(false, true))).y, true, true))))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch), (false ? _GLF_FUZZED(vec2(-7.6, 3415.0134)) : min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)))).y)), false))), false || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) && true, _GLF_IDENTITY(true, false || (true)) && (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) && true, ! (! (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (((injectionSwitch.x > injectionSwitch.y))) && true) && true))))))), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bool(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, (true ? _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y : _GLF_FUZZED(-7796.0643)))))), true && ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, (true ? _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y : _GLF_FUZZED(-7796.0643))))))))), false))), false || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bool(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))) || false)), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))), false))))))))) || false)), bool(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch), (false ? _GLF_FUZZED(vec2(-7.6, 3415.0134)) : min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)))).y)), false))), false || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) && true, _GLF_IDENTITY(true, false || (true)) && (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) && true, ! (! (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (((injectionSwitch.x > injectionSwitch.y))) && true) && true))))))), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bool(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, (true ? _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y : _GLF_FUZZED(-7796.0643)))))), true && ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, (true ? _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y : _GLF_FUZZED(-7796.0643))))))))), false))), false || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bool(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))) || false)), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))), false))))))))) || false)), false, false)))))), true && (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(7.2)), vec2(_GLF_FUZZED(-33.00), (injectionSwitch)[1]), bvec2(false, true))).y, bool(bvec3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(7.2)), vec2(_GLF_FUZZED(-33.00), (injectionSwitch)[1]), bvec2(false, true))).y, true, true))))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch), (false ? _GLF_FUZZED(vec2(-7.6, 3415.0134)) : min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)))).y)), false))), false || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) && true, _GLF_IDENTITY(true, false || (true)) && (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) && true, ! (! (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (((injectionSwitch.x > injectionSwitch.y))) && true) && true))))))), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bool(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, (true ? _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y : _GLF_FUZZED(-7796.0643)))))), true && ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, (true ? _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y : _GLF_FUZZED(-7796.0643))))))))), false))), false || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bool(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))) || false)), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))), false))))))))) || false)), bool(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch), (false ? _GLF_FUZZED(vec2(-7.6, 3415.0134)) : min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)))).y)), false))), false || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) && true, _GLF_IDENTITY(true, false || (true)) && (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) && true, ! (! (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (((injectionSwitch.x > injectionSwitch.y))) && true) && true))))))), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bool(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, (true ? _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y : _GLF_FUZZED(-7796.0643)))))), true && ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, (true ? _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y : _GLF_FUZZED(-7796.0643))))))))), false))), false || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bool(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))) || false)), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))), false))))))))) || false)), false, false)))))), bool(bvec3(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(7.2)), vec2(_GLF_FUZZED(-33.00), (injectionSwitch)[1]), bvec2(false, true))).y, bool(bvec3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(7.2)), vec2(_GLF_FUZZED(-33.00), (injectionSwitch)[1]), bvec2(false, true))).y, true, true))))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch), (false ? _GLF_FUZZED(vec2(-7.6, 3415.0134)) : min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)))).y)), false))), false || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) && true, _GLF_IDENTITY(true, false || (true)) && (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) && true, ! (! (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (((injectionSwitch.x > injectionSwitch.y))) && true) && true))))))), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bool(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, (true ? _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y : _GLF_FUZZED(-7796.0643)))))), true && ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, (true ? _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y : _GLF_FUZZED(-7796.0643))))))))), false))), false || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bool(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))) || false)), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))), false))))))))) || false)), bool(bvec3((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch), (false ? _GLF_FUZZED(vec2(-7.6, 3415.0134)) : min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)))).y)), false))), false || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) && true, _GLF_IDENTITY(true, false || (true)) && (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) && true, ! (! (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (((injectionSwitch.x > injectionSwitch.y))) && true) && true))))))), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bool(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, (true ? _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y : _GLF_FUZZED(-7796.0643)))))), true && ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y, (true ? _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, sqrt(1.0), 0.0))), injectionSwitch)).y : _GLF_FUZZED(-7796.0643))))))))), false))), false || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bool(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))) || false)), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))), false))))))))) || false)), false, false)))))), false, false))))))))
                          barrier();
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false)))))))), false || (! (_GLF_IDENTITY(false, ! (! (false))))))))))
            {
            }
           else
            {
             atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), (uint(1)) + _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) + 0u, uint(uint((0u) + 0u))))), _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), bool(bvec2(bool(bool(true)), true)))) ? 4 : _GLF_FUZZED(_injected_loop_counter))), 4))) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))) | 0), 64, 4);
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(mat4x2(-698.751, -536.688, 55.88, -6.4, -7.1, 9.3, 2.4, -61.51)[0]))).x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(mat4x2(-698.751, -536.688, 55.88, -6.4, -7.1, 9.3, 2.4, -61.51)[0]))).x > injectionSwitch.y)), false)), (bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(mat4x2(-698.751, -536.688, 55.88, -6.4, -7.1, 9.3, 2.4, -61.51)[0]))).x > injectionSwitch.y)), false))) && true))))
  {
  }
 else
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, ~ (~ (6)))), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     subgroupBarrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) || false)))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0))).x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), sqrt(0.0), 1.0, 0.0, 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0)), (_GLF_IDENTITY(vec2(mat3(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), sqrt(0.0), 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - length(vec4(0.0, 0.0, 0.0, 0.0))), 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0)), (true ? vec2(mat3(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), sqrt(0.0), 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - length(vec4(0.0, 0.0, 0.0, 0.0))), 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0)) : _GLF_FUZZED(vec2(260.137, -2.5))))) * vec2(1.0, 1.0))), max(injectionSwitch, injectionSwitch)), 0.0))).x > injectionSwitch.y), false)), (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), mix(vec2((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[0], (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[1]), vec2(_GLF_FUZZED(1003.2988), _GLF_FUZZED(852.656)), bvec2(false, false))), 0.0))).x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0))).x > injectionSwitch.y), true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0))).x > injectionSwitch.y), true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3((_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0))).x > injectionSwitch.y), true, true), _GLF_IDENTITY(true, false || (true)))), bvec3(bvec4(bvec3(bvec4(bvec3((_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0))).x > injectionSwitch.y), true, true), _GLF_IDENTITY(true, false || (true)))), _GLF_IDENTITY(true, true && (true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), mix(vec2((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[0], (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[1]), vec2(_GLF_FUZZED(1003.2988), _GLF_FUZZED(852.656)), bvec2(false, false))), 0.0))).x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0))).x > injectionSwitch.y), true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0))).x > injectionSwitch.y), true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3((_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0))).x > injectionSwitch.y), true, true), _GLF_IDENTITY(true, false || (true)))), bvec3(bvec4(bvec3(bvec4(bvec3((_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0))).x > injectionSwitch.y), true, true), _GLF_IDENTITY(true, false || (true)))), _GLF_IDENTITY(true, true && (true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false, true, _GLF_IDENTITY(true, (true) && true)))), false))) && true)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   atomicStore(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(read, (_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true), true && (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, true, false)))) && true)) || false)))) ? read : _GLF_FUZZED(workgroup_base), uint(uint(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true), true && (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, true, false)))) && true)) || false)))) ? read : _GLF_FUZZED(workgroup_base)))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(_GLF_IDENTITY(read, (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y), ((injectionSwitch.x < injectionSwitch.y)) && true)) ? read : _GLF_FUZZED(workgroup_base))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read, (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true)) ? read : _GLF_FUZZED(workgroup_base))), (_GLF_IDENTITY(read, (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, float(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, (true ? _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y : _GLF_FUZZED(-5228.8635))), _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(7609.9810))), 0.0)), 1.0, 0.0, 1.0, 1.0, 0.0, length(vec2(0.0, 0.0))))), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))), ((injectionSwitch.x < injectionSwitch.y)) && true)) ? read : _GLF_FUZZED(workgroup_base)))) + uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(0u | 0u, 0u + (0u | 0u))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(read, (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y) || false))) && true)) ? read : _GLF_FUZZED(workgroup_base))), min(_GLF_IDENTITY(read, (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true)) ? read : _GLF_FUZZED(workgroup_base))), _GLF_IDENTITY(read, (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true)) ? read : _GLF_FUZZED(workgroup_base)))))))) >> 0u))), 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
