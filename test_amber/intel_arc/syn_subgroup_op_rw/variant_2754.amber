#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_40 {
 float _f0;
} ;

struct _GLF_struct_39 {
 uvec2 _f0;
 uint _f1;
 ivec3 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_38 {
 ivec2 _f0;
 uvec3 _f1;
 uvec2 _f2;
 mat2x4 _f3;
 bvec2 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_41 {
 mat3x4 _f0;
 mat4x3 _f1;
 ivec2 _f2;
 _GLF_struct_38 _f3;
 _GLF_struct_39 _f4;
 _GLF_struct_40 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_36 {
 vec3 _f0;
 mat4 _f1;
 vec3 _f2;
 mat4x3 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_35 {
 mat2x3 _f0;
 uint _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_34 {
 mat4x2 _f0;
 uvec3 _f1;
 mat2x3 _f2;
 ivec4 _f3;
 int _f4;
 mat2 _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_33 {
 mat4x2 _f0;
 float _f1;
 mat2x4 _f2;
 uvec3 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_37 {
 _GLF_struct_33 _f0;
 bvec3 _f1;
 _GLF_struct_34 _f2;
 _GLF_struct_35 _f3;
 int _f4;
 _GLF_struct_36 _f5;
} ;

struct _GLF_struct_31 {
 mat2x3 _f0;
} ;

struct _GLF_struct_30 {
 mat2 _f0;
 uvec4 _f1;
 vec3 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_32 {
 _GLF_struct_30 _f0;
 _GLF_struct_31 _f1;
} ;

struct _GLF_struct_42 {
 int _injected_loop_counter;
 _GLF_struct_32 _f0;
 _GLF_struct_37 _f1;
 _GLF_struct_41 _f2;
} ;

struct _GLF_struct_29 {
 vec4 _f0;
 int _injected_loop_counter;
} ;

struct _GLF_struct_27 {
 vec2 _f0;
 int _f1;
} ;

struct _GLF_struct_25 {
 mat3x4 _f0;
 vec4 _f1;
 mat4x3 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_24 {
 int _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_23 {
 vec2 _f0;
 uvec2 _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_26 {
 bvec3 _f0;
 ivec3 _f1;
 _GLF_struct_23 _f2;
 vec2 _f3;
 _GLF_struct_24 _f4;
 _GLF_struct_25 _f5;
} ;

struct _GLF_struct_21 {
 mat4x2 _f0;
} ;

struct _GLF_struct_20 {
 bool _f0;
 vec2 _f1;
} ;

struct _GLF_struct_22 {
 mat2x4 _f0;
 _GLF_struct_20 _f1;
 mat3x2 _f2;
 _GLF_struct_21 _f3;
} ;

struct _GLF_struct_28 {
 _GLF_struct_22 _f0;
 mat3 _f1;
 _GLF_struct_26 _f2;
 mat3x2 _f3;
 bvec3 _f4;
 uint next_virtual_gid;
 _GLF_struct_27 _f5;
} ;

struct _GLF_struct_17 {
 uvec4 _f0;
 uvec3 _f1;
 uint _f2;
 float _f3;
 uint _f4;
 bvec4 _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_16 {
 uvec3 _f0;
 ivec2 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_15 {
 ivec4 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_18 {
 float _f0;
 bvec2 _f1;
 _GLF_struct_15 _f2;
 _GLF_struct_16 _f3;
 mat3x4 _f4;
 _GLF_struct_17 _f5;
} ;

struct _GLF_struct_14 {
 uint subgroup_base;
 bvec3 _f0;
} ;

struct _GLF_struct_19 {
 _GLF_struct_14 _f0;
 mat2x3 _f1;
 bvec4 _f2;
 _GLF_struct_18 _f3;
} ;

struct _GLF_struct_11 {
 mat4 _f0;
 uvec2 _f1;
 mat4x3 _f2;
 float _f3;
 mat4x3 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_12 {
 _GLF_struct_11 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_13 {
 mat3x4 _f0;
 _GLF_struct_12 _f1;
 uint workgroup_size;
 mat2 _f2;
} ;

struct _GLF_struct_8 {
 uint _f0;
 ivec4 _f1;
 bool _f2;
 vec2 _f3;
 mat3x4 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_7 {
 uvec2 _f0;
 uint virtual_gid;
 bvec2 _f1;
 bool _f2;
 float _f3;
} ;

struct _GLF_struct_6 {
 bvec4 _f0;
 vec3 _f1;
 mat3x2 _f2;
 uvec3 _f3;
 vec3 _f4;
} ;

struct _GLF_struct_9 {
 mat3 _f0;
 _GLF_struct_6 _f1;
 float _f2;
 _GLF_struct_7 _f3;
 _GLF_struct_8 _f4;
} ;

struct _GLF_struct_4 {
 mat2 _f0;
 mat2x3 _f1;
 mat3x2 _f2;
 vec3 _f3;
 bvec2 _f4;
 mat3x4 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_10 {
 mat4x3 _f0;
 ivec2 _f1;
 _GLF_struct_5 _f2;
 bvec2 _f3;
 mat3x4 _f4;
 mat4x3 _f5;
 _GLF_struct_9 _f6;
} ;

struct _GLF_struct_1 {
 mat4x3 _f0;
 vec4 _f1;
 vec3 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_0 {
 mat2x3 _f0;
 mat2x4 _f1;
 uint num_workgroup;
 int _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 bool _f1;
 _GLF_struct_1 _f2;
 bvec2 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_3 {
 mat4x3 _f0;
 ivec4 _f1;
 _GLF_struct_2 _f2;
 uvec3 _f3;
 vec3 _f4;
 ivec4 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(false, (false) && true)))), true, false)))))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, (true) || false)), bool(bvec2(bool(_GLF_IDENTITY(true, (true) || false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (false) || false)))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), true, true, false))), (false) || false)))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), min(1 << _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), clamp(1 << _GLF_IDENTITY(int(5), int(5)), 1 << _GLF_IDENTITY(int(5), int(5)), 1 << _GLF_IDENTITY(int(5), int(5))))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << 0))
        {
         barrier();
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(mat4x3(1.0), ivec4(1), _GLF_struct_2(_GLF_struct_0(mat2x3(1.0), mat2x4(1.0), _GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])), _GLF_IDENTITY(gl_NumWorkGroups, uvec3(1u, 1u, 1u) * (gl_NumWorkGroups)))).x, 1, uvec3(1u)), true, _GLF_struct_1(mat4x3(1.0), vec4(1.0), vec3(1.0), ivec3(1)), bvec2(true), mat4x2(1.0)), uvec3(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))), vec3(1.0), ivec4(1));
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     return;
    }
  }
 _GLF_struct_13 _GLF_struct_replacement_13 = _GLF_struct_13(mat3x4(1.0), _GLF_struct_12(_GLF_struct_11(_GLF_IDENTITY(mat4(1.0), (_GLF_IDENTITY(mat4(1.0), _GLF_IDENTITY(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0), float(mat3((0.0), 0.0, 1.0, 1.0, 1.0, 0.0, abs(log(1.0)), 1.0, 0.0))) / 1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(1.0)), (_GLF_IDENTITY(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-45.32))), 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), transpose(_GLF_IDENTITY(transpose(mat4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0)))), 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0, 0.0, 0.0)), (transpose(_GLF_IDENTITY(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) + (mat4(1.0))) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)) : _GLF_FUZZED(-4.7))), 0.0, 0.0, 0.0)))) / mat4(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), uvec2(1u), mat4x3(1.0), 1.0, mat4x3(1.0), mat3x4(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), bvec3(true)), gl_WorkGroupSize.x, mat2(1.0));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, true)), (bool(bvec4(false, true, false, true))) && true)))))));
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1)))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (false))) && true)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ((injectionSwitch.x > injectionSwitch.y)) || false))))))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = (1 & ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED(52185))), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
    barrier();
  }
 uint workgroup_base = _GLF_IDENTITY(_GLF_struct_replacement_13.workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id)), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_struct_replacement_13.workgroup_size * workgroup_id, 1u * (_GLF_struct_replacement_13.workgroup_size * _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)))), _GLF_struct_replacement_13.workgroup_size * workgroup_id), max(min(_GLF_IDENTITY(_GLF_struct_replacement_13.workgroup_size * workgroup_id, 1u * _GLF_IDENTITY((_GLF_struct_replacement_13.workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) / 1u)), (false ? _GLF_FUZZED(subgroup_local_id) : (_GLF_struct_replacement_13.workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) / 1u))))), _GLF_IDENTITY(_GLF_struct_replacement_13.workgroup_size, (true ? _GLF_struct_replacement_13.workgroup_size : _GLF_FUZZED(subgroup_size))) * workgroup_id), min(_GLF_IDENTITY(_GLF_struct_replacement_13.workgroup_size * workgroup_id, _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(packUnorm4x8(mix(vec4(361.469, 7454.5892, -5440.1913, 0.8), vec4(-308.932, 7.2, -26.64, -1124.0682), vec4(-8682.2222, 3.0, 2755.4406, 1455.5426)))) : 1u)) * (_GLF_struct_replacement_13.workgroup_size * _GLF_IDENTITY(workgroup_id, uint(uint(_GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id))))))), _GLF_struct_replacement_13.workgroup_size * workgroup_id))));
 _GLF_struct_19 _GLF_struct_replacement_19 = _GLF_struct_19(_GLF_struct_14(subgroup_id * subgroup_size, bvec3(true)), mat2x3(1.0), bvec4(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))), _GLF_struct_18(1.0, _GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)))), bvec2(bvec2(bvec2(bvec3(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), _GLF_struct_15(ivec4(1), vec2(1.0)), _GLF_struct_16(uvec3(1u), ivec2(_GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), min(int(int(1)), _GLF_IDENTITY(int(_GLF_IDENTITY(int(1), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-90654) : _GLF_IDENTITY(int(1), int(ivec2(int(1), 0)))))), (int(int(1))) | (int(int(1)))))))), mat3(1.0)), mat3x4(1.0), _GLF_struct_17(uvec4(1u), _GLF_IDENTITY(uvec3(1u), (uvec3(1u)) | uvec3(0u, 0u, 0u)), 1u, 1.0, 1u, bvec4(true), uvec2(_GLF_IDENTITY(1u, (1u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))))));
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(mat4x3(1.0), ivec2(1), _GLF_struct_5(_GLF_struct_4(mat2(1.0), mat2x3(1.0), mat3x2(1.0), _GLF_IDENTITY(_GLF_IDENTITY(vec3(1.0), (true ? vec3(1.0) : _GLF_FUZZED(trunc(vec3(99.91, -9.5, -2.4))))), _GLF_IDENTITY(_GLF_IDENTITY((vec3(1.0)) * vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0) * (_GLF_IDENTITY((vec3(1.0)) * vec3(1.0, 1.0, 1.0), (false ? _GLF_FUZZED(fma(vec3(-2.2, 6.4, -38.01), vec3(-2.1, 702.608, 76.34), vec3(-40.77, 5.6, -438.839))) : (vec3(1.0)) * vec3(1.0, 1.0, 1.0))))), _GLF_IDENTITY((_GLF_IDENTITY((vec3(1.0)) * vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0) * (_GLF_IDENTITY((vec3(1.0)) * vec3(1.0, 1.0, 1.0), (false ? _GLF_FUZZED(fma(vec3(-2.2, 6.4, -38.01), vec3(-2.1, 702.608, 76.34), vec3(-40.77, 5.6, -438.839))) : (vec3(1.0)) * vec3(1.0, 1.0, 1.0)))))) * mat3(1.0), min((_GLF_IDENTITY((vec3(1.0)) * vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0) * (_GLF_IDENTITY((vec3(1.0)) * vec3(1.0, 1.0, 1.0), (false ? _GLF_FUZZED(fma(vec3(-2.2, 6.4, -38.01), vec3(-2.1, 702.608, 76.34), vec3(-40.77, 5.6, -438.839))) : (vec3(1.0)) * vec3(1.0, 1.0, 1.0)))))) * mat3(1.0), (_GLF_IDENTITY((vec3(1.0)) * vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0) * (_GLF_IDENTITY((vec3(1.0)) * vec3(1.0, 1.0, 1.0), (false ? _GLF_FUZZED(fma(vec3(-2.2, 6.4, -38.01), vec3(-2.1, 702.608, 76.34), vec3(-40.77, 5.6, -438.839))) : (vec3(1.0)) * vec3(1.0, 1.0, 1.0)))))) * mat3(1.0))))), bvec2(true), mat3x4(1.0), mat4x3(1.0)), bvec3(true)), bvec2(true), mat3x4(1.0), mat4x3(1.0), _GLF_struct_9(mat3(1.0), _GLF_struct_6(bvec4(true), vec3(1.0), mat3x2(1.0), uvec3(1u), vec3(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, _GLF_IDENTITY(max(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(mat2(1.0, 0.0, 1.0, 0.0)))) - 0.0), 1.0), min(_GLF_IDENTITY(max(1.0, 1.0), max(max(1.0, 1.0), max(1.0, 1.0))), max(1.0, 1.0)))), 1.0, 1.0)), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))), 1.0, _GLF_struct_7(_GLF_IDENTITY(uvec2(1u), uvec2(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), min(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, uint(uint(1u)))))), uvec2(uvec2(uvec2(1u)))), uvec2(1u))), max(_GLF_IDENTITY(uvec2(1u), min(_GLF_IDENTITY(uvec2(1u), uvec2(_GLF_IDENTITY(uvec2(uvec2(1u)), (_GLF_IDENTITY(uvec2(uvec2(1u)), min(uvec2(uvec2(1u)), uvec2(uvec2(1u))))) | (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(8u), uvec2(8u)))))), uvec2(1u))), _GLF_IDENTITY(uvec2(1u), min(_GLF_IDENTITY(uvec2(1u), uvec2(uvec2(uvec2(1u)))), uvec2(1u))))), 1u, 1u), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uvec2(1u), min(_GLF_IDENTITY(uvec2(1u), uvec2(uvec2(uvec2(_GLF_IDENTITY(1u, (1u) << (0u << _GLF_IDENTITY(uint(7u), uint(7u)))))))), uvec2(1u))), 1u, 1u), _GLF_IDENTITY((uvec4(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), uvec2(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) | uvec2(0u, 0u)), (1u & 1u), 0u), (uvec4(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) | uvec2(0u, 0u)), (1u & 1u), 0u)) - uvec4(0u, 0u, 0u, 0u)))), min(_GLF_IDENTITY(uvec2(1u), uvec2(uvec2(uvec2(1u)))), uvec2(1u))), 1u, 1u)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(uvec4(75450u, 136232u, 139208u, 66432u)) : (uvec4(_GLF_IDENTITY(uvec2(1u), min(_GLF_IDENTITY(uvec2(1u), uvec2(uvec2(uvec2(1u)))), uvec2(1u))), 1u, 1u)))) - uvec4(0u, 0u, 0u, 0u))) + uvec4(0u, 0u, _GLF_IDENTITY(0u, min(0u, 0u)), 0u)))), workgroup_base + _GLF_struct_replacement_19._f0.subgroup_base + subgroup_local_id, bvec2(true), true, 1.0), _GLF_struct_8(1u, ivec4(1), _GLF_IDENTITY(true, ! (! (true))), vec2(1.0), mat3x4(1.0), vec2(1.0))));
 _GLF_struct_28 _GLF_struct_replacement_28 = _GLF_struct_28(_GLF_struct_22(mat2x4(1.0), _GLF_struct_20(true, vec2(1.0)), mat3x2(1.0), _GLF_struct_21(mat4x2(1.0))), mat3(1.0), _GLF_struct_26(_GLF_IDENTITY(bvec3(true), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), true))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(_GLF_IDENTITY(bvec3(true), _GLF_IDENTITY(bvec3(bvec4(bvec3(true), true)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(bvec3(true), true)), bvec3(bvec4(bvec3(bvec4(bvec3(true), true)), false))), true)))), true))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), true))), true))), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), true))), true)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), true))), true)))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), true))), true)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), true))), true)))))))), true))))))))), true)))), _GLF_IDENTITY(ivec3(1), min(ivec3(1), ivec3(_GLF_IDENTITY(1, (1) - 0)))), _GLF_struct_23(vec2(1.0), uvec2(1u), mat2x3(1.0)), vec2(1.0), _GLF_struct_24(1, uvec2(1u)), _GLF_struct_25(mat3x4(1.0), vec4(1.0), mat4x3(1.0), mat3x4(1.0))), mat3x2(1.0), bvec3(true), _GLF_IDENTITY(workgroup_base + _GLF_struct_replacement_19._f0.subgroup_base, clamp(_GLF_IDENTITY(workgroup_base + _GLF_struct_replacement_19._f0.subgroup_base, clamp(workgroup_base + _GLF_struct_replacement_19._f0.subgroup_base, _GLF_IDENTITY(workgroup_base + _GLF_struct_replacement_19._f0.subgroup_base, min(workgroup_base + _GLF_struct_replacement_19._f0.subgroup_base, workgroup_base + _GLF_struct_replacement_19._f0.subgroup_base)), workgroup_base + _GLF_struct_replacement_19._f0.subgroup_base)), _GLF_IDENTITY(workgroup_base + _GLF_struct_replacement_19._f0.subgroup_base, (_GLF_IDENTITY(workgroup_base + _GLF_struct_replacement_19._f0.subgroup_base, (workgroup_base + _GLF_struct_replacement_19._f0.subgroup_base) << 0u)) >> 0u), _GLF_IDENTITY(workgroup_base + _GLF_struct_replacement_19._f0.subgroup_base, clamp(workgroup_base + _GLF_struct_replacement_19._f0.subgroup_base, workgroup_base + _GLF_struct_replacement_19._f0.subgroup_base, workgroup_base + _GLF_struct_replacement_19._f0.subgroup_base)))) + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, max((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) + 1) % subgroup_size, (subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) ^ 0) | (1))) % subgroup_size))), _GLF_struct_27(vec2(1.0), 1));
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))))
  {
   for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)), ((_GLF_IDENTITY(1, clamp(1, 1, 1)) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) | ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))))); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint read = atomicLoad(_GLF_IDENTITY(buf[_GLF_struct_replacement_10._f6._f3.virtual_gid], (buf[_GLF_struct_replacement_10._f6._f3.virtual_gid]) | 0u), 4, 64, 2);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))) || false))))), false || (! (((injectionSwitch.x > injectionSwitch.y))))))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY((subgroup_local_id % 2), max((subgroup_local_id % 2), (subgroup_local_id % _GLF_IDENTITY(2, 0 | (2))))) == 0)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, tan(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 1.0, 1.0, 1.0, 1.0, 1.0))) > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)))))))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     subgroupAll(false);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(14.18)), float(injectionSwitch.y), bool(true)))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
               return;
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-494.891) : _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, log(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0))))), injectionSwitch.x)) > injectionSwitch.y), ! (! _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), false, true), bvec3(bvec3(bvec3((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), false, true))))), (bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), false, true), bvec3(bvec3(bvec3((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), false, true)))))) || false))))))))))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) << (0 | 0))), max(_GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) | (3))), (int(3)) / 1), int(3))), int(3)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) | _GLF_IDENTITY(0, (0) ^ 0)), _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (0 & -95974) ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), min(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY(int(3), int(3))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << (1 ^ ((1 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, clamp(3, 3, 3))))) >> _GLF_IDENTITY(int(3), int(3))))))
            {
             return;
            }
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
          return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bool(true))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || _GLF_IDENTITY(false, (false) && true))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       else
        {
        }
      }
     atomicStore(buf[_GLF_struct_replacement_28.next_virtual_gid], uint(1), 4, 64, 4);
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y))))))
        {
         return;
        }
       else
        {
        }
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 return;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
             barrier();
            }
          }
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               break;
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))
              continue;
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              barrier();
            }
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false)), bool(bvec4(bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(true, false || (true)))))))
            {
             return;
            }
           else
            {
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), ! (! (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), true && (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), true && (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)), bool(bool((_GLF_WRAPPED_LOOP(false))))))))))))));
        }
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), ! (! (! (_GLF_WRAPPED_IF_FALSE(false))))))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     subgroupAll(false);
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
     atomicStore(buf[_GLF_IDENTITY(_GLF_struct_replacement_28.next_virtual_gid, max(_GLF_IDENTITY(_GLF_struct_replacement_28.next_virtual_gid, max(_GLF_struct_replacement_28.next_virtual_gid, _GLF_struct_replacement_28.next_virtual_gid)), _GLF_IDENTITY(_GLF_struct_replacement_28.next_virtual_gid, _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_struct_replacement_28.next_virtual_gid), clamp(uint(_GLF_struct_replacement_28.next_virtual_gid), uint(_GLF_struct_replacement_28.next_virtual_gid), uint(_GLF_struct_replacement_28.next_virtual_gid))), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uint(_GLF_struct_replacement_28.next_virtual_gid), clamp(uint(_GLF_struct_replacement_28.next_virtual_gid), uint(_GLF_struct_replacement_28.next_virtual_gid), uint(_GLF_struct_replacement_28.next_virtual_gid))), 1u, 1u, 1u), clamp(uvec4(_GLF_IDENTITY(uint(_GLF_struct_replacement_28.next_virtual_gid), clamp(uint(_GLF_struct_replacement_28.next_virtual_gid), uint(_GLF_struct_replacement_28.next_virtual_gid), uint(_GLF_struct_replacement_28.next_virtual_gid))), 1u, 1u, 1u), uvec4(_GLF_IDENTITY(uint(_GLF_struct_replacement_28.next_virtual_gid), clamp(uint(_GLF_struct_replacement_28.next_virtual_gid), uint(_GLF_struct_replacement_28.next_virtual_gid), uint(_GLF_struct_replacement_28.next_virtual_gid))), 1u, 1u, 1u), uvec4(_GLF_IDENTITY(uint(_GLF_struct_replacement_28.next_virtual_gid), clamp(uint(_GLF_struct_replacement_28.next_virtual_gid), uint(_GLF_struct_replacement_28.next_virtual_gid), uint(_GLF_struct_replacement_28.next_virtual_gid))), 1u, 1u, 1u)))))), (uint(_GLF_IDENTITY(uint(_GLF_struct_replacement_28.next_virtual_gid), clamp(uint(_GLF_struct_replacement_28.next_virtual_gid), uint(_GLF_struct_replacement_28.next_virtual_gid), uint(_GLF_struct_replacement_28.next_virtual_gid))))) >> 0u))))], _GLF_IDENTITY(uint(1), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), clamp(uint(1), uint(1), uint(1))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), clamp(uint(1), uint(1), uint(1))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), clamp(uint(1), uint(1), uint(1))), (_GLF_IDENTITY(uint(1), clamp(uint(1), uint(1), uint(1)))) << 0u))))) | ((0u ^ 0u) << _GLF_IDENTITY(uint(5u), uint(5u)))), (false ? _GLF_FUZZED(subgroup_local_id) : uint(1))), _GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (uint(1)), (~ (uint(1))) * 1u)), 0u ^ (~ (_GLF_IDENTITY(~ (uint(1)), (~ (uint(1))) * 1u))))), _GLF_IDENTITY((uint(1)) | (_GLF_IDENTITY(uint(1), (true ? uint(1) : _GLF_FUZZED(_GLF_IDENTITY(_GLF_struct_replacement_13.workgroup_size, (_GLF_IDENTITY(_GLF_struct_replacement_13.workgroup_size, uint(_GLF_IDENTITY(uvec2(_GLF_struct_replacement_13.workgroup_size, 1u), (uvec2(_GLF_struct_replacement_13.workgroup_size, 1u)) | (uvec2(_GLF_struct_replacement_13.workgroup_size, 1u)))))) - 0u))))), clamp((uint(1)) | (_GLF_IDENTITY(uint(1), (true ? uint(1) : _GLF_FUZZED(_GLF_struct_replacement_13.workgroup_size)))), (uint(1)) | _GLF_IDENTITY((_GLF_IDENTITY(uint(1), (true ? uint(1) : _GLF_FUZZED(_GLF_IDENTITY(_GLF_struct_replacement_13.workgroup_size, (_GLF_IDENTITY(_GLF_struct_replacement_13.workgroup_size, min(_GLF_struct_replacement_13.workgroup_size, _GLF_struct_replacement_13.workgroup_size))) / 1u))))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(uint(1), (true ? uint(1) : _GLF_FUZZED(_GLF_IDENTITY(_GLF_struct_replacement_13.workgroup_size, (_GLF_IDENTITY(_GLF_struct_replacement_13.workgroup_size, min(_GLF_struct_replacement_13.workgroup_size, _GLF_struct_replacement_13.workgroup_size))) / 1u))))), (true ? (_GLF_IDENTITY(uint(1), (true ? uint(1) : _GLF_FUZZED(_GLF_IDENTITY(_GLF_struct_replacement_13.workgroup_size, (_GLF_IDENTITY(_GLF_struct_replacement_13.workgroup_size, min(_GLF_struct_replacement_13.workgroup_size, _GLF_struct_replacement_13.workgroup_size))) / 1u))))) : _GLF_FUZZED(workgroup_id))) : _GLF_FUZZED(workgroup_id))), (uint(1)) | (_GLF_IDENTITY(uint(1), (true ? uint(1) : _GLF_FUZZED(_GLF_struct_replacement_13.workgroup_size))))))), uint(1))), _GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), (~ (4)) | (~ (4))))), 64, 4);
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0))) > injectionSwitch.y))))
      {
      }
     else
      {
       for(_GLF_struct_29 _GLF_struct_replacement_29 = _GLF_struct_29(vec4(1.0), 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_struct_replacement_29._injected_loop_counter != _GLF_IDENTITY(1, (false ? _GLF_FUZZED(78151) : 1)), ! (! (_GLF_IDENTITY(_GLF_struct_replacement_29._injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), (false ? _GLF_FUZZED(78151) : 1)), ! (! (_GLF_struct_replacement_29._injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), (false ? _GLF_FUZZED(78151) : 1))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_struct_replacement_29._injected_loop_counter != _GLF_IDENTITY(1, (false ? _GLF_FUZZED(78151) : 1)), ! (! (_GLF_IDENTITY(_GLF_struct_replacement_29._injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), (false ? _GLF_FUZZED(78151) : 1)), ! _GLF_IDENTITY((! (_GLF_struct_replacement_29._injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), (false ? _GLF_FUZZED(78151) : 1)))), bool(bvec2((! (_GLF_struct_replacement_29._injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), (false ? _GLF_FUZZED(78151) : 1)))), false)))))))))); _GLF_struct_replacement_29._injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), true, false, false))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    break;
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  continue;
                }
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, false, true)))))), ! (! (_GLF_IDENTITY(false, false || (false)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), bool(bvec4(false || (false), false, false, true)))))), ! (! (_GLF_IDENTITY(false, false || (false))))))) || _GLF_IDENTITY(false, (false) || false)))))
                barrier();
              }
             else
              {
               return;
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                    barrier();
                  }
                 return;
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               barrier();
              }
            }
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | (0 >> _GLF_IDENTITY(int(7), int(7))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (false ? _GLF_FUZZED(55232) : 0))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0)))))), bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), (false || (injectionSwitch.x > injectionSwitch.y)) && true), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), (false || (injectionSwitch.x > injectionSwitch.y)) && true), true, true), false))))))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), (false || (injectionSwitch.x > injectionSwitch.y)) && true), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), (false || (injectionSwitch.x > injectionSwitch.y)) && true), true, true), false))))))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, determinant(mat2(1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 1.0)), exp(0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0))).x > injectionSwitch.y))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), _GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))), bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(3919.1791)), vec2(_GLF_FUZZED((-5.5)), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).x > injectionSwitch.y), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), (! (! (bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), true && (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))), bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(3919.1791)), vec2(_GLF_FUZZED((-5.5)), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, (true) && true)))).x > injectionSwitch.y), false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, true)), true && (bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, true)))))))))))))))))) && true))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 for(_GLF_struct_42 _GLF_struct_replacement_42 = _GLF_struct_42(0, _GLF_struct_32(_GLF_struct_30(mat2(1.0), uvec4(1u), vec3(1.0), mat3x2(1.0)), _GLF_struct_31(mat2x3(1.0))), _GLF_struct_37(_GLF_struct_33(mat4x2(1.0), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 0.0 + (1.0))) / 1.0), mat2x4(1.0), uvec3(1u), bvec2(true)), _GLF_IDENTITY(bvec3(true), bvec3(bvec3(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), true)))))), _GLF_struct_34(mat4x2(1.0), uvec3(1u), mat2x3(1.0), ivec4(1), 1, mat2(1.0), _GLF_IDENTITY(uvec3(1u), ~ (~ (_GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u))))))), _GLF_struct_35(mat2x3(1.0), 1u, ivec3(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) | (1)) : _GLF_FUZZED(36851))))), 1, _GLF_struct_36(vec3(1.0), _GLF_IDENTITY(mat4(1.0), mat4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(187.930)))), max(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x)))), float(_GLF_FUZZED(6942.2985)), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (mat4(1.0))), vec3(1.0), mat4x3(1.0), uvec2(1u))), _GLF_struct_41(mat3x4(1.0), mat4x3(1.0), ivec2(1), _GLF_struct_38(_GLF_IDENTITY(ivec2(1), clamp(ivec2(1), _GLF_IDENTITY(ivec2(1), (ivec2(1)) / ivec2(1, 1)), _GLF_IDENTITY(ivec2(1), ivec2(ivec4(ivec2(1), 0, 1))))), _GLF_IDENTITY(uvec3(1u), min(uvec3(1u), _GLF_IDENTITY(uvec3(1u), uvec3(1u, 1u, 1u) * (uvec3(1u))))), uvec2(1u), mat2x4(1.0), bvec2(true), vec4(1.0)), _GLF_struct_39(uvec2(1u), 1u, ivec3(1), mat3x2(1.0)), _GLF_struct_40(1.0), mat3x4(1.0))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_42._injected_loop_counter < (0 ^ _GLF_IDENTITY(1, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (1), int(ivec2(~ (1), 1)))), ((_GLF_IDENTITY(~ (1), int(ivec2(~ (1), 1))))) ^ 0)))); _GLF_struct_replacement_42._injected_loop_counter ++)
  {
   subgroupBarrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      break;
     atomicStore(buf[_GLF_struct_replacement_10._f6._f3.virtual_gid], read, 4, 64, 4);
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), true && (bool(bvec3(false, true, false))))), bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), true, true)))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
