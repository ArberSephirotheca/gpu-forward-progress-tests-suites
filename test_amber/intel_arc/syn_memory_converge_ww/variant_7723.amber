#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(injectionSwitch[0]), float(_GLF_FUZZED(-1.8)), bool(false))), injectionSwitch[1])), injectionSwitch)).y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec3(! (false), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(! (_GLF_IDENTITY(false, true && (false))), false, true), true)), bvec3(bvec3(bvec3(bvec4(bvec3(! (false), false, true), _GLF_IDENTITY(true, ! (! (true)))))))))))))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).y)))) && true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)) != (0 ^ 1)); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   do
    {
     for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) | (int(8))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), true))))))
        barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, false)))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   do
    {
     do
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, (0 << _GLF_IDENTITY(int(7), int(7))) ^ (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
            }
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
      }
     else
      {
      }
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), (injectionSwitch.x < injectionSwitch.y) || false), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false), true)))))))))))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))))
                    barrier();
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))), float(_GLF_FUZZED(-67.50)), bool(false))))) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0))))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
            barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, cos(0.0), 1.0, 1.0, 1.0, 1.0))), injectionSwitch.x)) > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, cos(0.0), 1.0, 1.0, 1.0, 1.0))), injectionSwitch.x)) > injectionSwitch.y)), false, true, true)))))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       barrier();
                      }
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                            {
                             barrier();
                            }
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 else
                  {
                  }
                }
              }
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), ! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), (! (_GLF_WRAPPED_LOOP(false))) && true)))))));
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))) && true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                }
               else
                {
                }
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 | (int(6))))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     do
      {
       for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0))
        {
         barrier();
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             barrier();
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
        }
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
      {
       barrier();
      }
     else
      {
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))));
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               barrier();
              }
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) >> (0 << _GLF_IDENTITY(int(4), int(4))))), _GLF_IDENTITY(int(int(_GLF_IDENTITY(int(4), int(4)))), max(int(int(_GLF_IDENTITY(int(4), int(4)))), int(int(_GLF_IDENTITY(int(4), int(4)))))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED((- -38984))))))), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(int(_GLF_IDENTITY(int(4), int(4)))), max(int(int(_GLF_IDENTITY(int(4), int(4)))), int(int(_GLF_IDENTITY(int(4), int(4)))))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED((- -38984))))))), false, true, true))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
              }
             else
              {
              }
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true, ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.7)), bool(false)))))) && true) || false))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), false), false)))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), false), false)))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), false), false)))))))))))))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), false)))) && true))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                }
              }
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
          barrier();
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) / (0 ^ 1)), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true) || (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           else
            {
            }
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, true, false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) & 22436); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, max(1, 1))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 0)); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_IDENTITY(true, (true) && true)))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
              {
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                }
               else
                {
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))), true)))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2((false), false)), bool(bvec2(bool(bvec2((false), false)), false)))) && true)))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (51660 & 0)); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                }
              }
            }
           else
            {
            }
           barrier();
          }
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> 0u);
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size));
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))), _GLF_IDENTITY((uint(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)))) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(~ (~ (subgroup_base)), _GLF_IDENTITY(uint(uvec3(~ (~ (subgroup_base)), 1u, 0u)), ~ (~ (uint(uvec3(~ (~ (subgroup_base)), 1u, 0u))))))), subgroup_base))), (uint(_GLF_IDENTITY(subgroup_base, min(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u))))) - 0u), (_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(~ (~ (subgroup_base)), _GLF_IDENTITY(uint(uvec3(~ (~ (subgroup_base)), 1u, 0u)), ~ (~ (uint(uvec3(~ (~ (subgroup_base)), 1u, 0u))))))), subgroup_base))), (uint(_GLF_IDENTITY(subgroup_base, min(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u))))) - 0u)) ^ 0u)), ((uint(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)))) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(~ (~ (subgroup_base)), _GLF_IDENTITY(uint(uvec3(~ (~ (subgroup_base)), 1u, 0u)), ~ (~ (uint(uvec3(~ (~ (subgroup_base)), 1u, 0u))))))), subgroup_base))), (uint(_GLF_IDENTITY(subgroup_base, min(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u))))) - 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY((uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), (_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))) ^ 0u))), min(_GLF_IDENTITY((uint(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)))), max((uint(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)))), (uint(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)))))), _GLF_IDENTITY((uint(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)))), ~ (~ ((uint(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))))))))) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(~ (~ (subgroup_base)), _GLF_IDENTITY(uint(uvec3(~ (~ (subgroup_base)), 1u, 0u)), _GLF_IDENTITY(~ (~ (uint(uvec3(~ (~ (subgroup_base)), 1u, 0u)))), clamp(~ (~ (uint(uvec3(~ (~ (subgroup_base)), 1u, 0u)))), _GLF_IDENTITY(~ (~ (uint(uvec3(~ (~ (subgroup_base)), 1u, 0u)))), 0u | (~ _GLF_IDENTITY((~ (uint(uvec3(~ _GLF_IDENTITY((~ (subgroup_base)), (false ? _GLF_FUZZED(write_val) : (~ (subgroup_base)))), 1u, 0u)))), (_GLF_IDENTITY((~ (uint(uvec3(~ _GLF_IDENTITY((~ (subgroup_base)), (false ? _GLF_FUZZED(write_val) : (~ (subgroup_base)))), 1u, 0u)))), uint(uint((~ (uint(uvec3(~ _GLF_IDENTITY((~ (subgroup_base)), (false ? _GLF_FUZZED(write_val) : (~ (subgroup_base)))), 1u, 0u)))))))) / 1u))), _GLF_IDENTITY(~ (~ (uint(uvec3(~ (~ (subgroup_base)), _GLF_IDENTITY(1u, (1u) + 0u), 0u)))), (~ (~ (uint(uvec3(~ (~ (subgroup_base)), 1u, 0u))))) / uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-0.3))))))))))), subgroup_base))), (uint(_GLF_IDENTITY(subgroup_base, min(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u))))) - 0u)), ((uint(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)))) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(~ (~ (subgroup_base)), _GLF_IDENTITY(uint(uvec3(~ (~ (subgroup_base)), 1u, 0u)), ~ (~ (uint(uvec3(~ (~ (subgroup_base)), 1u, 0u))))))), subgroup_base))), (uint(_GLF_IDENTITY(subgroup_base, min(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u))))) - 0u))) ^ 0u)))))), (workgroup_base + _GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)), min(subgroup_base, subgroup_base))), _GLF_IDENTITY((uint(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)))) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), _GLF_IDENTITY(~ (~ (subgroup_base)), _GLF_IDENTITY(uint(uvec3(~ (~ (subgroup_base)), 1u, 0u)), ~ (~ (uint(uvec3(~ (~ (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)))), 1u, 0u))))))), subgroup_base))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, ((((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))) << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * (subgroup_base)), min(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u))))) - 0u)), clamp((uint(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)))) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), _GLF_IDENTITY(~ (~ (subgroup_base)), _GLF_IDENTITY(uint(uvec3(~ (~ (subgroup_base)), 1u, 0u)), ~ (~ (uint(uvec3(~ (~ (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)))), 1u, 0u))))))), subgroup_base))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, ((((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))) << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * (subgroup_base)), min(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u))))) - 0u)), (uint(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)))) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), _GLF_IDENTITY(~ (~ (subgroup_base)), _GLF_IDENTITY(uint(uvec3(~ (_GLF_IDENTITY(~ (subgroup_base), max(_GLF_IDENTITY(~ (subgroup_base), (~ (subgroup_base)) + 0u), ~ (subgroup_base)))), 1u, 0u)), ~ (~ (uint(uvec3(~ (~ (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)))), 1u, 0u))))))), subgroup_base))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, ((((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))) << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * (subgroup_base)), min(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u))))) - 0u)), _GLF_IDENTITY((uint(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)))) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), _GLF_IDENTITY(~ (~ (subgroup_base)), _GLF_IDENTITY(uint(uvec3(~ (~ (subgroup_base)), 1u, 0u)), ~ (~ (uint(uvec3(~ (~ (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)))), 1u, 0u))))))), subgroup_base))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, ((((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))) << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * (subgroup_base)), min(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u))))) - 0u)), (true ? _GLF_IDENTITY((uint(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)))), uint(uvec2((uint(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)))), 1u))) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), _GLF_IDENTITY(~ (~ (subgroup_base)), _GLF_IDENTITY(uint(uvec3(~ (~ (subgroup_base)), 1u, 0u)), ~ (~ (uint(uvec3(~ (~ (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)))), 1u, 0u))))))), subgroup_base))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, ((((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))) << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * _GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)), subgroup_base))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))), ((_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, max(_GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)), subgroup_base))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))) >> 0u)), min(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u))))) - 0u)) : _GLF_FUZZED(78632u))))))))) - ((0u >> _GLF_IDENTITY(uint(6u), uint(6u))) | 0u)) + subgroup_local_id, (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))), (uint(_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)), subgroup_base)))) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(~ (~ (subgroup_base)), _GLF_IDENTITY(uint(uvec3(~ (~ (subgroup_base)), 1u, 0u)), ~ (~ (_GLF_IDENTITY(uint(uvec3(~ (~ (subgroup_base)), 1u, 0u)), (_GLF_IDENTITY(uint(uvec3(~ (~ (subgroup_base)), 1u, 0u)), (uint(uvec3(~ (~ (subgroup_base)), 1u, 0u))) - 0u)) + 0u)))))), subgroup_base)), uint(uvec3(_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(~ (~ (subgroup_base)), _GLF_IDENTITY(uint(uvec3(~ (~ (subgroup_base)), 1u, 0u)), ~ (~ (_GLF_IDENTITY(uint(uvec3(~ (~ (subgroup_base)), 1u, 0u)), (_GLF_IDENTITY(uint(uvec3(~ (~ (subgroup_base)), 1u, 0u)), (uint(uvec3(~ (~ (subgroup_base)), 1u, 0u))) - 0u)) + 0u)))))), subgroup_base)), 0u, 0u)))), _GLF_IDENTITY((uint(_GLF_IDENTITY(subgroup_base, min(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u))))) - 0u, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY((uint(_GLF_IDENTITY(subgroup_base, min(subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(uint(uvec3(subgroup_base, 0u, 0u)), 0u ^ (uint(uvec3(subgroup_base, 0u, 0u))))), (subgroup_base) - 0u))))) - 0u, _GLF_IDENTITY(~ (~ ((uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), min(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u))))) - 0u)), (~ (_GLF_IDENTITY(~ ((uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), min(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u))))) - 0u), 0u ^ (~ ((uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), min(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u))))) - 0u))))) / 1u)), (0u >> _GLF_IDENTITY(uint(1u), uint(1u))), 0u, 1u)), min(uint(uvec4(_GLF_IDENTITY((uint(_GLF_IDENTITY(subgroup_base, min(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u))))) - 0u, ~ (~ ((uint(_GLF_IDENTITY(subgroup_base, min(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u))))) - 0u))), (0u >> _GLF_IDENTITY(uint(1u), uint(1u))), 0u, 1u)), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY((uint(_GLF_IDENTITY(subgroup_base, min(subgroup_base, _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base))) - 0u))))) - 0u, ~ (~ ((uint(_GLF_IDENTITY(subgroup_base, min(subgroup_base, _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3((subgroup_base), 1u, 1u), uvec3(0u, 0u, 0u) + (uvec3((subgroup_base), 1u, 1u)))), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (uint(_GLF_IDENTITY(uvec3((subgroup_base), 1u, 1u), uvec3(0u, 0u, 0u) + (uvec3((subgroup_base), 1u, 1u))))))) - 0u))))) - 0u))), (0u >> _GLF_IDENTITY(uint(1u), uint(1u))), 0u, 1u)), (false ? _GLF_FUZZED(workgroup_base) : uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY((uint(_GLF_IDENTITY(subgroup_base, min(subgroup_base, _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base))) - 0u))))), max((uint(_GLF_IDENTITY(subgroup_base, min(subgroup_base, _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base))) - 0u))))), (uint(_GLF_IDENTITY(subgroup_base, min(subgroup_base, _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base))) - 0u))))))) - 0u, ~ (~ ((uint(_GLF_IDENTITY(subgroup_base, min(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u))))) - 0u))), (0u >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), (true ? uint(1u) : _GLF_FUZZED(mix(158923u, subgroup_local_id, false)))))), 0u, 1u)))))))))))), (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, 0u ^ (subgroup_base)), _GLF_IDENTITY(uint(uvec2(subgroup_base, 0u)), ~ (~ (uint(uvec2(subgroup_base, 0u)))))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))), (uint(_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, 0u | (_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)))), subgroup_base)))) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), _GLF_IDENTITY(~ (~ (subgroup_base)), _GLF_IDENTITY(uint(uvec3(~ (~ (subgroup_base)), 1u, 0u)), ~ (~ (uint(uvec3(~ (~ (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)))), 1u, 0u))))))), subgroup_base))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u))), (false ? _GLF_FUZZED(25538u) : _GLF_IDENTITY(subgroup_base, min(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u))))))) - 0u)))))) - ((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), 0u ^ (_GLF_IDENTITY(uint(6u), uint(6u))))))) | 0u)) + subgroup_local_id) | (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))), (uint(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)))) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, max(subgroup_base, _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)))), min(_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (subgroup_base)), clamp(~ (~ (subgroup_base)), ~ (~ (subgroup_base)), ~ (~ (subgroup_base)))), _GLF_IDENTITY(uint(uvec3(~ (~ (subgroup_base)), 1u, 0u)), ~ (~ (uint(uvec3(~ (_GLF_IDENTITY(~ (subgroup_base), ~ (_GLF_IDENTITY(~ (~ (subgroup_base)), ~ (~ (~ (~ (subgroup_base)))))))), 1u, 0u))))))), subgroup_base))), (uint(_GLF_IDENTITY(subgroup_base, min(subgroup_base, _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base), uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-428.157)), bool(false))))) | ((subgroup_base))) - 0u))))) - 0u))))), (workgroup_base + _GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_base : _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), 1u * (_GLF_FUZZED(workgroup_id))), uint(uvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_base : _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), 1u * (_GLF_FUZZED(workgroup_id))), 0u))))), subgroup_base))), (uint(_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, (subgroup_base) | 0u), subgroup_base)))) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), _GLF_IDENTITY(~ (~ (subgroup_base)), _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(~ (~ (subgroup_base)), 1u, 0u)), ~ (~ (uint(uvec3(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)))), max(~ (~ (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)))), ~ (~ (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)))))), 1u, 0u))))), min(_GLF_IDENTITY(uint(uvec3(~ (~ (subgroup_base)), 1u, 0u)), ~ (~ (uint(uvec3(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)))), max(~ (~ (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)))), ~ (~ (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)))))), 1u, 0u))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(~ (~ (subgroup_base)), 1u, 0u)), ~ (~ (uint(uvec3(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)))), max(~ (~ (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)))), ~ (~ (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)))))), 1u, 0u))))), 0u ^ (_GLF_IDENTITY(uint(uvec3(~ (~ (subgroup_base)), 1u, 0u)), ~ (~ (uint(uvec3(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)))), max(~ (~ (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)))), ~ (~ (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)))))), 1u, 0u))))))))))), subgroup_base))), (uint(_GLF_IDENTITY(subgroup_base, min(subgroup_base, _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, 1u * (subgroup_base))) - 0u))))) - 0u)))))) - ((0u >> _GLF_IDENTITY(uint(6u), uint(6u))) | 0u)) + subgroup_local_id));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))), false, true)), bool(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))) && true), true))))) || false)))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(float(168679u))), bool(false))))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     else
      {
      }
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec2(663.547, -575.235).s), _GLF_FUZZED(938.539)), vec2(_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY(float(vec2((injectionSwitch)[0], 0.0)), (false ? _GLF_FUZZED(6014.1382) : float(vec2((injectionSwitch)[0], 0.0)))), min(float(vec2((injectionSwitch)[0], 0.0)), float(vec2((injectionSwitch)[0], 0.0))))), (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bool(true)))))) || false)))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, max(0, 0))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 barrier();
                }
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))))), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))))), 1.0), (vec4(injectionSwitch, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))))), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))))), 1.0)) - vec4(0.0, 0.0, 0.0, 0.0)))).x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))).y)))))
          {
          }
         else
          {
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = (1 & int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat2x3(injectionSwitch[0], 1.0, 1.0, 1.0, 0.0, 1.0))), injectionSwitch[1])).y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                          barrier();
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y))))
                    {
                     do
                      {
                       do
                        {
                         do
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                         do
                          {
                           for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, ~ (~ (0))))), 0, 0))); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             for(int _injected_loop_counter = _GLF_IDENTITY(((1 | 1) | 1), clamp(((1 | 1) | 1), ((1 | 1) | 1), _GLF_IDENTITY(((1 | 1) | 1), (((1 | 1) | 1)) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (38567 & 0)); _injected_loop_counter --)
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (false) || _GLF_IDENTITY(false, false || (false)))))
                                barrier();
                               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))))
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 barrier();
                                }
                              }
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                              }
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                                  {
                                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                    {
                                     barrier();
                                    }
                                  }
                                 barrier();
                                }
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + sqrt(0.0))))))
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    barrier();
                                   do
                                    {
                                     barrier();
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                  }
                                }
                               else
                                {
                                }
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) || false)), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))), max(injectionSwitch.y, injectionSwitch.y))) || false)))))))
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(_GLF_IDENTITY(int(8), (_GLF_IDENTITY(int(8), 0 | (int(8)))) | (_GLF_IDENTITY(int(8), int(ivec3(int(8), 0, 0))))), int(8)))); _injected_loop_counter --)
                            {
                             do
                              {
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               barrier();
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, clamp(1, 1, 1))); _injected_loop_counter ++)
                          {
                           barrier();
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                }
              }
            }
           for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 | (int(5))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           for(int _injected_loop_counter = (63395 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
                    barrier();
                  }
                }
              }
            }
           else
            {
             barrier();
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
        }
      }
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), (int(int(1))) / 1))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(int(5), int(5)))), (false ? _GLF_FUZZED(70750) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(ivec2(int(5), 1)), (false ? _GLF_FUZZED(39223) : int(ivec2(int(5), 1))))), int(5)), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(ivec2(int(5), 1)), (false ? _GLF_FUZZED(39223) : int(ivec2(int(5), _GLF_IDENTITY(1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : 1))))))), int(5))) + 0))), (_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(int(5), int(5)) : _GLF_FUZZED(_injected_loop_counter)))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(ivec4(int(5), 1, 0, 0))), 0 + (int(5)))))); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = (((_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), int(int(~ (1)))))) | 1) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5)))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                }
               else
                {
                }
              }
            }
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch))), mix(vec2(_GLF_FUZZED(9.3), (mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch))))[1]), vec2((mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), 1.0, 0.0, sqrt(0.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), _GLF_IDENTITY(vec4(sin(0.0), abs(1.0), 0.0, 0.0), min(_GLF_IDENTITY(vec4(sin(0.0), abs(1.0), 0.0, 0.0), (false ? _GLF_FUZZED(vec4(87.81, 411.116, -0.9, 1.6)) : _GLF_IDENTITY(vec4(sin(0.0), abs(1.0), 0.0, 0.0), min(vec4(sin(0.0), abs(1.0), 0.0, 0.0), vec4(sin(0.0), abs(1.0), 0.0, 0.0))))), vec4(sin(0.0), abs(1.0), 0.0, 0.0)))), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(sin(0.0), abs(1.0), 0.0, 0.0))), 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), _GLF_ONE(1.0, injectionSwitch.y), 1.0)))))))[0], _GLF_FUZZED(-681.874)), bvec2(true, false)))), 1.0, determinant(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (vec4(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, ~ (~ (0)))], injectionSwitch[1])))), injectionSwitch)), 1.0, determinant(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) + vec4(0.0, 0.0, 0.0, 0.0))), (_GLF_IDENTITY(vec2(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)), 1.0, determinant(mat4(0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY((vec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, 1.0) * (injectionSwitch), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(vec2(1.0, 1.0) * (injectionSwitch), (vec2(1.0, 1.0) * (injectionSwitch)) / vec2(1.0, 1.0)) : _GLF_FUZZED(vec2(-58.30, 4.0))))), clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch))) / vec2(1.0, 1.0)), 1.0, determinant(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) + vec4(0.0, 0.0, 0.0, 0.0), ((vec4(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)), 1.0, determinant(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) + vec4(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0)) * mat4(1.0)))), (vec2(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(determinant(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2x3(0.0, 1.0, 1.0, tan(0.0), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ZERO(0.0, injectionSwitch.x))), (float(mat2x3(0.0, 1.0, 1.0, tan(0.0), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ZERO(0.0, injectionSwitch.x)))) / 1.0)), 0.0, 0.0, 0.0)), (false ? _GLF_FUZZED(-53.95) : determinant(mat4(0.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-71.63)), float(1.0), bool(true))), _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 0.0, 1.0, 0.0, 0.0, 1.0, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), min(_GLF_IDENTITY(determinant(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), (false ? _GLF_FUZZED(-53.95) : determinant(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(determinant(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), (false ? _GLF_FUZZED(-53.95) : determinant(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), (vec4(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)), 1.0, determinant(mat4(_GLF_IDENTITY(0.0, (0.0) / _GLF_IDENTITY(dot(vec4(0.0, sqrt(1.0), 0.0, 0.0), vec4(0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 0.0)), dot(vec4(0.0, sqrt(1.0), 0.0, 0.0), vec4(0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 0.0)))), 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(657.933)))), _GLF_ONE(1.0, injectionSwitch.y) * (_GLF_IDENTITY((_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(657.933)))), 1.0 * (_GLF_IDENTITY((_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(657.933)))), float(mat3x2((_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(657.933)))), 1.0, 0.0, 0.0, 1.0, 0.0))))))) - _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)))), sqrt(1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) + vec4(0.0, 0.0, 0.0, 0.0)))) - vec2(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0))) - vec2(0.0, 0.0))).y, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY((1.0), float(_GLF_IDENTITY(mat2x3((1.0), sin(0.0), length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0, 1.0), mat2x3(mat2x3(_GLF_IDENTITY(mat2x3((1.0), sin(0.0), length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0, 1.0), (mat2x3((1.0), sin(0.0), length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0, 1.0)) * mat2(1.0))))))) - 0.0, 0.0 + ((1.0) - 0.0)))), float(_GLF_FUZZED(630.621)), bool(false)))) * (injectionSwitch)).x > injectionSwitch.y) && true)))))
            {
             for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, true))))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, true))))), true))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7164.0974)), vec2(_GLF_FUZZED(1682.0611), _GLF_IDENTITY((injectionSwitch)[1], clamp(_GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(float(vec2((injectionSwitch)[1], 0.0)), clamp(float(vec2((injectionSwitch)[1], 0.0)), float(vec2((injectionSwitch)[1], 0.0)), float(vec2((injectionSwitch)[1], 0.0))))), (injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(false, _GLF_IDENTITY(true, bool(bvec4(true, true, true, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! _GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((! (_GLF_IDENTITY(false, ! (! (false))))))), ! (! (_GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))))))))))))))))))).y), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7164.0974)), vec2(_GLF_FUZZED(1682.0611), (injectionSwitch)[1]), bvec2(false, _GLF_IDENTITY(true, bool(bvec4(true, true, true, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! _GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((! (_GLF_IDENTITY(false, ! (! (false))))))), ! (! (_GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((! (_GLF_IDENTITY(false, ! (! (false))))))))))))))))))).y), false)))), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7164.0974)), vec2(_GLF_FUZZED(1682.0611), (injectionSwitch)[1]), bvec2(false, _GLF_IDENTITY(true, bool(bvec4(true, true, true, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(true, bool(bvec2(true, false))), true))), ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), false || ((false)))) && true)))))))))))))))).y)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7164.0974)), vec2(_GLF_FUZZED(1682.0611), (injectionSwitch)[1]), bvec2(false, _GLF_IDENTITY(true, bool(bvec4(true, true, true, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(true, bool(bvec2(true, false))), true))), ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), false || ((false)))) && true)))))))))))))))).y)))), ! (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7164.0974)), vec2(_GLF_FUZZED(1682.0611), (injectionSwitch)[1]), bvec2(false, _GLF_IDENTITY(true, bool(bvec4(true, true, true, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(true, bool(bvec2(true, false))), true))), ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), false || ((false)))) && true)))))))))))))))).y))))))), true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7164.0974)), vec2(_GLF_FUZZED(1682.0611), (injectionSwitch)[1]), bvec2(false, _GLF_IDENTITY(true, bool(bvec4(true, true, true, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(true, bool(bvec2(true, false))), true))), ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), false || ((false)))) && true)))))))))))))))).y)))), ! (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7164.0974)), vec2(_GLF_FUZZED(1682.0611), (injectionSwitch)[1]), bvec2(false, _GLF_IDENTITY(true, bool(bvec4(true, true, true, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(true, bool(bvec2(true, false))), true))), ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), false || ((false)))) && true)))))))))))))))).y))))))), true, false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7164.0974)), vec2(_GLF_FUZZED(1682.0611), (injectionSwitch)[1]), bvec2(false, _GLF_IDENTITY(true, bool(bvec4(true, true, true, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(true, bool(bvec2(true, false))), true))), ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), false || ((false)))) && true)))))))))))))))).y)))), ! (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7164.0974)), vec2(_GLF_FUZZED(1682.0611), (injectionSwitch)[1]), bvec2(false, _GLF_IDENTITY(true, bool(bvec4(true, true, true, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(true, bool(bvec2(true, false))), true))), ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), false || ((false)))) && true)))))))))))))))).y))))))), true, false), true)), true))))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7164.0974)), vec2(_GLF_FUZZED(1682.0611), (injectionSwitch)[1]), bvec2(false, _GLF_IDENTITY(true, bool(bvec4(true, true, true, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(true, bool(bvec2(true, false))), true))), ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), false || ((false)))) && true)))))))))))))))).y)))), ! (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7164.0974)), vec2(_GLF_FUZZED(1682.0611), (injectionSwitch)[1]), bvec2(false, _GLF_IDENTITY(true, bool(bvec4(true, true, true, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(true, bool(bvec2(true, false))), true))), ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), false || ((false)))) && true)))))))))))))))).y))))))), true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7164.0974)), vec2(_GLF_FUZZED(1682.0611), (injectionSwitch)[1]), bvec2(false, _GLF_IDENTITY(true, bool(bvec4(true, true, true, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(true, bool(bvec2(true, false))), true))), ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), false || ((false)))) && true)))))))))))))))).y)))), ! (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7164.0974)), vec2(_GLF_FUZZED(1682.0611), (injectionSwitch)[1]), bvec2(false, _GLF_IDENTITY(true, bool(bvec4(true, true, true, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(true, bool(bvec2(true, false))), true))), ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), false || ((false)))) && true)))))))))))))))).y))))))), true, false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7164.0974)), vec2(_GLF_FUZZED(1682.0611), (injectionSwitch)[1]), bvec2(false, _GLF_IDENTITY(true, bool(bvec4(true, true, true, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(true, bool(bvec2(true, false))), true))), ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), false || ((false)))) && true)))))))))))))))).y)))), ! (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7164.0974)), vec2(_GLF_FUZZED(1682.0611), (injectionSwitch)[1]), bvec2(false, _GLF_IDENTITY(true, bool(bvec4(true, true, true, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(true, bool(bvec2(true, false))), true))), ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), false || ((false)))) && true)))))))))))))))).y))))))), true, false), true)), true)))))) || false))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-92.64)), bool(false))), 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, sqrt(0.0), 0.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0)), min(float(mat4x3(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-92.64)), bool(false))), 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, sqrt(0.0), 0.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0)), float(mat4x3(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-92.64)), bool(false))), 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, sqrt(0.0), 0.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0))))), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, cos(0.0), 0.0, 1.0))))), true, false)))))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                  }
                 else
                  {
                  }
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
      }
     else
      {
      }
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               barrier();
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
  }
 uint read_val = _GLF_IDENTITY(atomicLoad(write_val, _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) << 0), 4)), 64, 0), _GLF_IDENTITY(~ _GLF_IDENTITY((~ (atomicLoad(write_val, 4, 64, 0))), ((~ (atomicLoad(write_val, 4, 64, 0)))) / 1u), min(~ _GLF_IDENTITY((~ (atomicLoad(write_val, 4, 64, 0))), ((~ (atomicLoad(write_val, 4, 64, 0)))) / 1u), ~ _GLF_IDENTITY((~ (atomicLoad(write_val, 4, 64, 0))), ((~ (atomicLoad(write_val, 4, 64, 0)))) / 1u))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), false, false)))), false || (! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), false, false)))))))), bool(bvec4(_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), false, false)))), false || (! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), false, false)))))))), true, true, false))), (! (true)) && true)))))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), mix(vec2(_GLF_IDENTITY((max(injectionSwitch, injectionSwitch))[0], _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))) + ((max(injectionSwitch, injectionSwitch))[0]), min(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))) + ((max(injectionSwitch, injectionSwitch))[0]), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))) + ((max(injectionSwitch, injectionSwitch))[0])))), (max(injectionSwitch, injectionSwitch))[1]), vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(_GLF_IDENTITY(-2.3, _GLF_IDENTITY(float(mat4x2(-2.3, sqrt(1.0), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), clamp(float(mat4x2(-2.3, sqrt(1.0), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), _GLF_IDENTITY(float(mat4x2(-2.3, sqrt(1.0), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), min(float(mat4x2(-2.3, sqrt(1.0), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), _GLF_IDENTITY(float(mat4x2(-2.3, sqrt(1.0), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), max(float(mat4x2(-2.3, sqrt(1.0), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), float(mat4x2(-2.3, sqrt(1.0), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))))), float(mat4x2(-2.3, sqrt(1.0), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))))))), bvec2(false, false)))).x < injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))), true, false), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))), true, false), bvec3(bvec4(bvec3(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))), true, false), true)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))), true, false), bvec3(bvec4(bvec3(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))), true, false), true)))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))), true, false), bvec3(bvec4(bvec3(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))), true, false), true)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))), true, false), bvec3(bvec4(bvec3(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))), true, false), true)))))))), true))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                {
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
              }
             else
              {
               buf[virtual_gid] = uint(subgroupAllEqual(read_val));
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (17653 & 0)); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, sin(0.0), 0.0, 0.0), mat3x2(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(489.068)), float(_GLF_IDENTITY(0.0, (0.0) - 0.0)), bool(true)))), float(_GLF_FUZZED(79.28)), bool(false)))), float(_GLF_FUZZED(-3.3)), bool(false))) + _GLF_IDENTITY((_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), max((_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))))), (_GLF_IDENTITY(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(489.068)), float(0.0), bool(true)))), float(_GLF_FUZZED(79.28)), bool(false)))), float(_GLF_IDENTITY(_GLF_FUZZED(-3.3), clamp(_GLF_IDENTITY(_GLF_FUZZED(-3.3), sin(0.0) + (_GLF_FUZZED(-3.3))), _GLF_FUZZED(-3.3), _GLF_FUZZED(-3.3)))), bool(false))) + _GLF_IDENTITY((_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), max((_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))))) * abs(1.0)), 0.0) + (mat3x2(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))))) * vec2(1.0, 1.0)), injectionSwitch, injectionSwitch)), 1.0, _GLF_IDENTITY(sin(0.0), max(sin(0.0), _GLF_IDENTITY(sin(0.0), mix(float(_GLF_FUZZED(-7464.1052)), float(sin(0.0)), bool(true))))), 0.0, 0.0))))))).y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, log(1.0), 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))))) * (injectionSwitch.y)), (injectionSwitch.y) - 0.0))) * (injectionSwitch)).x > injectionSwitch.y))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 barrier();
                }
              }
             else
              {
               do
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 1.0, 0.0, 0.0))))) > injectionSwitch.y))))
                          barrier();
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                }
                               else
                                {
                                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
                                  {
                                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                                    barrier();
                                  }
                                }
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), min(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), (1 << _GLF_IDENTITY(int(0), int(0))) * (1 & 1)), 1 << _GLF_IDENTITY(int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
                                {
                                 barrier();
                                }
                              }
                            }
                          }
                         barrier();
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y) && true)))))
                      barrier();
                     barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                        }
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(false));
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                         else
                          {
                          }
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))));
                   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_IDENTITY(false, false || (false))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             else
              {
              }
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), min(int(8), int(8))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0)))); _injected_loop_counter --)
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(58.73, 9123.2951)) : _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))).y))))
                  barrier();
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || (false))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 1
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
