#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, false, false))) || (_GLF_DEAD(false))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false, ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, false, false))) || (_GLF_DEAD(false))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false, true && ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, false, false))) || (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false)))))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))
              {
              }
             else
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(89.24), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-3418.4419)), bvec2(true, false))).y, float(_GLF_IDENTITY(vec2(injectionSwitch.y, 0.0), (vec2(injectionSwitch.y, 0.0)) + vec2(0.0, 0.0))))))) && true)), bool(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec2(injectionSwitch.y, 0.0), (vec2(injectionSwitch.y, 0.0)) + vec2(0.0, 0.0))))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec2(injectionSwitch.y, 0.0), (vec2(injectionSwitch.y, 0.0)) + vec2(0.0, 0.0)))))))))) && true))))))
                      barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         else
                          {
                           for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                            }
                          }
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))
                          barrier();
                         barrier();
                         do
                          {
                           if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                            barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       barrier();
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     for(int _injected_loop_counter = (0 & -75907); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) < 1); _GLF_IDENTITY(_injected_loop_counter ++, 1 * (_injected_loop_counter ++)))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_IDENTITY(_GLF_DEAD(false), true && _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && true)))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 0.0, 1.0, exp(0.0), 1.0, 1.0)))))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))))), bool(bvec4(! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))))), true, false, false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))))), bool(bvec4(! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))))), true, false, false)))), true), bvec2(bvec2(bvec2(! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))))), bool(bvec4(! _GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))))), ((! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))) && true), true, false, false)))), true))))), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))))), bool(bvec4(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), ! (_GLF_IDENTITY(! (bool(bvec4(false, false, true, false))), bool(bvec4(! (bool(bvec4(false, false, true, false))), true, true, false)))))))), true, false, false)))), true), bvec2(bvec2(bvec2(! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))))), bool(bvec4(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))), (! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), false, true, false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, false, _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))))), true))))), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))))), bool(bvec4(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), ! (_GLF_IDENTITY(! (bool(bvec4(false, false, true, false))), bool(bvec4(! (bool(bvec4(false, false, true, false))), true, true, false)))))))), true, false, false)))), true), bvec2(bvec2(bvec2(! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))))), bool(bvec4(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))), (! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), false, true, false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, false, _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))))), true))))), false), false), bvec3(bvec4(bvec3(bvec2(bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))))), bool(bvec4(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), ! (_GLF_IDENTITY(! (bool(bvec4(false, false, true, false))), bool(bvec4(! (bool(bvec4(false, false, true, false))), true, true, false)))))))), true, false, false)))), true), bvec2(bvec2(bvec2(! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))))), bool(bvec4(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))), (! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), false, true, false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, false, _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))))), true))))), false), false), false)))))))))))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(54.73) : injectionSwitch.x)) > injectionSwitch.y))))
                    barrier();
                   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 ^ (int(1)))))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, true))), false, false, true)), (bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, true))), false, false, true))) || false))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       do
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0)))))))
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), (_GLF_IDENTITY(bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true && (bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))) || false))));
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) && true)));
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (! (! _GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)), bool(bvec4(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)), false, true, true))), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)), bool(bvec4(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))))), true)), false, true, _GLF_IDENTITY(true, (true) && true))))) && true))))))), false || ((! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)), bool(bvec4(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)), false, true, true))), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)), bool(bvec4(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))))), true)), false, true, _GLF_IDENTITY(true, (true) && true))))) && true))))))))))) && true)))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, ! (! (false)))))))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && true, false || ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))) && true))))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))))))), true, false, false)), bool(bvec4(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))))))), true, false, false)), true, false, false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))) || false))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uvec2 GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((0 | 0) | 0, min((0 | 0) | 0, (0 | 0) | 0)))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), true && (bool(bvec2(false, true))))) || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((0 | 0) | 0, ~ (~ (_GLF_IDENTITY((0 | 0) | 0, min((0 | 0) | 0, (0 | _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) - 0)) | 0))))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((0 | 0) | 0, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((0 | 0) | 0, int(ivec2((0 | 0) | 0, 1))), min(_GLF_IDENTITY((0 | 0) | 0, max((0 | 0) | 0, (0 | 0) | 0)), (0 | 0) | 0)))))))) && true))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - int(_GLF_ZERO(0.0, injectionSwitch.x))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(injectionSwitch.x), (_GLF_IDENTITY(float(injectionSwitch.x), mix(float(_GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(6.0) : float(injectionSwitch.x)))), float(_GLF_FUZZED(7.1)), bool(false)))) - 0.0), float(_GLF_FUZZED(36.99)), bool(false))), mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(injectionSwitch.x), (_GLF_IDENTITY(float(injectionSwitch.x), mix(float(_GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(6.0) : float(injectionSwitch.x)))), float(_GLF_FUZZED(7.1)), bool(false)))) - 0.0), float(_GLF_FUZZED(36.99)), bool(false)))), float(_GLF_FUZZED(-2.0)), bool(false))) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(_GLF_IDENTITY(float(injectionSwitch.x), (_GLF_IDENTITY(float(injectionSwitch.x), mix(float(_GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(6.0) : float(injectionSwitch.x)))), float(_GLF_FUZZED(7.1)), bool(false)))) - 0.0), float(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(float(injectionSwitch.x), (_GLF_IDENTITY(float(injectionSwitch.x), mix(float(_GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(6.0) : float(injectionSwitch.x)))), float(_GLF_FUZZED(7.1)), bool(false)))) - 0.0), min(_GLF_IDENTITY(_GLF_IDENTITY(float(injectionSwitch.x), (_GLF_IDENTITY(float(injectionSwitch.x), mix(float(_GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(6.0) : float(injectionSwitch.x)))), float(_GLF_FUZZED(7.1)), bool(false)))) - 0.0), mix(float(_GLF_FUZZED(8115.8570)), float(_GLF_IDENTITY(float(injectionSwitch.x), (_GLF_IDENTITY(float(injectionSwitch.x), mix(float(_GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(6.0) : float(injectionSwitch.x)))), float(_GLF_FUZZED(7.1)), bool(false)))) - 0.0)), bool(true))), _GLF_IDENTITY(float(injectionSwitch.x), (_GLF_IDENTITY(float(injectionSwitch.x), mix(float(_GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(6.0) : float(injectionSwitch.x)))), float(_GLF_FUZZED(7.1)), bool(false)))) - 0.0))), 0.0, 1.0, 0.0, 1.0, 1.0, abs(0.0), 1.0))), float(_GLF_FUZZED(36.99)), bool(false))) > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
          barrier();
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        {
         do
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), (! (false)) || false)), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (false)), ! (! ((! (false)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY((! (false)), ! (! ((! (false)))))), false, false), bvec3(bvec3(bvec3(! (_GLF_IDENTITY((! (false)), ! (! ((! (false)))))), false, false))))), bool(bvec4(bool(bvec3(! (_GLF_IDENTITY((! (false)), ! (! ((! (false)))))), false, false)), true, true, false)))))) || false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! _GLF_IDENTITY((false), ((false)) || false), (_GLF_IDENTITY(! (false), false || (! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec3(bool(bvec2(false, true)), true, true)))), false, false, false))))))) || false))), ! (! (! (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)) || false, false || (_GLF_IDENTITY((! (false)), bool(bvec2((! (false)), false))) || false)))))))))), false, true, true)))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true)))))))) || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), (! (false)) || false)), false || ((_GLF_IDENTITY(! (false), (! (false)) || false))))), (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (false), (! (false)) || false))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), ! _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((false), ((false)) && true), (! (false)) || false)), false || ((_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || false), (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(! (false), (! (false)) || false))), (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || false), ! (! (_GLF_IDENTITY(! (false), (! (false)) || false))))))))) && true))) && true))))), (injectionSwitch.x > injectionSwitch.y)))))), (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), false || (bool(bvec3(false, true, true))))))) || false)), true && (! (_GLF_IDENTITY(! (false), (! (false)) || false))))), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0), mat3(mat4(_GLF_IDENTITY(mat3(injectionSwitch, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0), (mat3(injectionSwitch, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))).x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (false)))))))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), (! (false)) || false)), false || ((_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || false), (_GLF_IDENTITY(! (false), (! (false)) || false)) && true))))), (injectionSwitch.x > injectionSwitch.y))))))) || false)))) && true), bool(bvec2(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)) || false, bool(bvec4((! (false)) || false, false, false, false))))), true && (! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))))))) || false, bool(bvec4(_GLF_IDENTITY((! (false)), ! (! ((! (false))))) || false, false, false, false)))))))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))) && true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-9007.1652) : injectionSwitch.x)) < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool((false)), bool(bvec2(_GLF_IDENTITY(bool((false)), (bool((false))) || false), false)))))) || false)))) && true)), ! (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-9007.1652) : injectionSwitch.x)) < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))), (! (false)) || false))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool((false)), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool((false)), true && (_GLF_IDENTITY(bool((false)), (bool((false))) && true))), (bool((false))) || false), false)))))) || false)))) && true)))))), (! (_GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec4(! (false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (false), bool(bvec4(! (false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))), false)), bool(bvec3(bool(bvec2(_GLF_IDENTITY(! (false), bool(bvec4(! (false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))), false)), false, true))))))), (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, _GLF_IDENTITY(false, ! (! (false))), true)))) || false))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)) || false, ! (! ((! (false)) || false))))))) && true)))) && true)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) || false)) && true, ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), bool(bool(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)))) || false)) && true) && true)), true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) || false)) && true, ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), bool(bool(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)))) || false)) && true) && true)))), false || (injectionSwitch.x > injectionSwitch.y))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), bool(bool(injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))) || false)) && true, ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), bool(bool(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)))) || false)) && true) && true)), false || (injectionSwitch.x > injectionSwitch.y)))) || false))), false))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-6.6) : _GLF_IDENTITY(injectionSwitch.x, float(vec3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5247.6164)), float(injectionSwitch.x), bool(true))), 1.0, 0.0))))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED((-7.9 - 63.72))), bool(false))))) > injectionSwitch.y), _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))) ? _GLF_FUZZED(279.370) : injectionSwitch.x), (false ? _GLF_FUZZED(70.26) : (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(279.370) : injectionSwitch.x)))), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), (_GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_IDENTITY(_GLF_FUZZED(279.370), clamp(_GLF_FUZZED(279.370), _GLF_FUZZED(279.370), _GLF_FUZZED(279.370))) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)), false || (((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(279.370) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(279.370) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(279.370) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(279.370) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y, true, false)))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(279.370) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(279.370) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(279.370) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y, true, false)))))))))), (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_IDENTITY(_GLF_FUZZED(279.370), clamp(_GLF_IDENTITY(_GLF_FUZZED(279.370), (_GLF_FUZZED(279.370)) + 0.0), _GLF_FUZZED(279.370), _GLF_IDENTITY(_GLF_FUZZED(279.370), max(_GLF_FUZZED(279.370), _GLF_FUZZED(279.370))))) : injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], 1.0 * (injectionSwitch[0])), injectionSwitch[1])).x)) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y) && true))))), (_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) || false), _GLF_IDENTITY(! (! ((false))), bool(bvec2(_GLF_IDENTITY(! (! ((false))), false || (! (! ((false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! (_GLF_IDENTITY(! ((! (_GLF_IDENTITY(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) || false), _GLF_IDENTITY(! (! ((false))), bool(bvec2(_GLF_IDENTITY(! (! ((false))), false || (! (! ((false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), false || (! ((! (_GLF_IDENTITY(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) || false), _GLF_IDENTITY(! (! ((false))), bool(bvec2(_GLF_IDENTITY(! (! ((false))), false || (! (! ((false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))) ? _GLF_FUZZED(279.370) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) || false), _GLF_IDENTITY(! (! ((false))), bool(bvec2(_GLF_IDENTITY(! (! ((false))), false || (! (! ((false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! (_GLF_IDENTITY(! ((! (_GLF_IDENTITY(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) || false), _GLF_IDENTITY(! (! ((false))), bool(bvec2(_GLF_IDENTITY(! (! ((false))), false || (! (! ((false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), false || (! ((! (_GLF_IDENTITY(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) || false), _GLF_IDENTITY(! (! ((false))), bool(bvec2(_GLF_IDENTITY(! (! ((false))), false || (! (! ((false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))) ? _GLF_FUZZED(279.370) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y, false, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) || false), _GLF_IDENTITY(! (! ((false))), bool(bvec2(_GLF_IDENTITY(! (! ((false))), false || (! (! ((false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), ! (_GLF_IDENTITY(! ((! (_GLF_IDENTITY(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) || false), _GLF_IDENTITY(! (! ((false))), bool(bvec2(_GLF_IDENTITY(! (! ((false))), false || (! (! ((false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), false || (! ((! (_GLF_IDENTITY(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) || false), _GLF_IDENTITY(! (! ((false))), bool(bvec2(_GLF_IDENTITY(! (! ((false))), false || (! (! ((false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))) ? _GLF_FUZZED(279.370) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y, false, true, false)), false, true, true)))))), false || (((_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(_GLF_IDENTITY(! (false), false || (! (false))), true, false))))) ? _GLF_FUZZED(279.370) : _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / exp(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))))))), max(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(279.370) : _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / exp(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x3(0.0, 1.0, 0.0, 1.0, tan(0.0), round(length(normalize(1.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, abs(0.0), 0.0, round(length(normalize(1.0)))), transpose(_GLF_IDENTITY(transpose(mat4x3(0.0, 1.0, 0.0, 1.0, tan(0.0), round(length(normalize(1.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, abs(0.0), 0.0, round(length(normalize(1.0))))), transpose(transpose(transpose(mat4x3(0.0, 1.0, 0.0, 1.0, tan(0.0), round(length(normalize(1.0))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, abs(0.0), 0.0, round(length(normalize(1.0)))))))))))))))), _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false)), bool(bvec2(bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false)), true)))) ? _GLF_FUZZED(279.370) : _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / exp(0.0)))))), injectionSwitch.x)) > injectionSwitch.y))))) && true)) || _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), false)))) && true))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                barrier();
              }
             else
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (0 | 0) ^ (_GLF_IDENTITY(int(6), int(6))))) ^ 0))); _injected_loop_counter --)
                {
                 barrier();
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, false || (false)), true, true)), (bool(bvec3(_GLF_IDENTITY(false, false || (false)), true, true))) && true)))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, false || (false)), true, true)), (bool(bvec3(_GLF_IDENTITY(false, false || (false)), true, true))) && true))))))))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_IDENTITY(false, true && (false)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || false))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))), (_GLF_DEAD(false)) || false)), true && ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))), (_GLF_DEAD(false)) || false))))), true && (! ((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))))))) || false), true, true))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec3(bvec2(_GLF_DEAD(false), true), true))))))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (_GLF_IDENTITY(! (! (_GLF_DEAD(false))), (! (! (_GLF_DEAD(false)))) || _GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), true && (! (! ((injectionSwitch.x > injectionSwitch.y)))))))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))) || false)))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 | 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false, false), bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false, false), true)))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false, false), bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false, false), true)))))))), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))) && true); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), false)))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(-79.05)), bool(false)))))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), bvec2(bvec3(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(-79.05)), bool(false)))))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), false)))))))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(injectionSwitch.x, 0.0, 1.0, tan(0.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)))), mat2(1.0) * (mat4x2(injectionSwitch.x, 0.0, 1.0, tan(0.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))))))), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? float(_GLF_IDENTITY(mat4x2(injectionSwitch.x, 0.0, 1.0, tan(0.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), _GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), clamp(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)))), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)))), mat2(1.0) * (mat4x2(injectionSwitch.x, 0.0, 1.0, tan(0.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))))))) : _GLF_FUZZED(-915.654), min(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? float(_GLF_IDENTITY(mat4x2(injectionSwitch.x, 0.0, 1.0, tan(0.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), _GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), clamp(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)))), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)))), mat2(1.0) * (mat4x2(injectionSwitch.x, 0.0, 1.0, tan(0.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))))))) : _GLF_FUZZED(-915.654), (false ? _GLF_FUZZED(2991.5860) : _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? float(_GLF_IDENTITY(mat4x2(injectionSwitch.x, 0.0, 1.0, tan(0.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), _GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), clamp(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)))), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)))), mat2(1.0) * (mat4x2(injectionSwitch.x, 0.0, 1.0, tan(0.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))))))) : _GLF_FUZZED(-915.654))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? float(_GLF_IDENTITY(mat4x2(injectionSwitch.x, 0.0, 1.0, tan(0.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), _GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 0.0), clamp(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)))), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)))), mat2(1.0) * (mat4x2(injectionSwitch.x, 0.0, 1.0, tan(0.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))))))) : _GLF_FUZZED(-915.654)))))) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, false || (false))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), true))), true)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), true)))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), (bool(bvec4(false, false, true, true))) && true)), (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))) || false)))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))), true && (bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))))))))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), max((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(mat2x4((injectionSwitch)[1], 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0)))), vec2(_GLF_FUZZED(-2.8), _GLF_FUZZED(-83.82)), bvec2(false, false)))) - vec2(0.0, 0.0), (injectionSwitch) - vec2(0.0, 0.0)))).y, (false ? _GLF_FUZZED(4.2) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), max((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(mat2x4((injectionSwitch)[1], 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0)))), vec2(_GLF_FUZZED(-2.8), _GLF_FUZZED(-83.82)), bvec2(false, false)))) - vec2(0.0, 0.0), (injectionSwitch) - vec2(0.0, 0.0)))).y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))) && true)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) << 0u)) / 1u);
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (85105 & 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ((false)) || _GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     else
      {
      }
    }
  }
 _GLF_IDENTITY(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y = workgroup_id, (_GLF_IDENTITY(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y = _GLF_IDENTITY(workgroup_id, (0u >> _GLF_IDENTITY(uint(4u), uint(4u))) | (workgroup_id)), _GLF_IDENTITY((_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(_GLF_IDENTITY(bool(bool(bool(injectionSwitch.x > injectionSwitch.y))), false || _GLF_IDENTITY((bool(bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))), ((bool(bool(_GLF_IDENTITY(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), false || (_GLF_IDENTITY(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), false || (bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))))) || false)))))), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), _GLF_IDENTITY(false || (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(false || (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))), false || (false || (bool(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y)))))))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(bool(injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false || (bool(bool(bool(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))), true && (_GLF_IDENTITY(false || (bool(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), false || (false || (bool(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y)))))))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), _GLF_IDENTITY(false || (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(false || (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))), false || (false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y))))), (bool(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y)))))) || false)))))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), _GLF_IDENTITY(false || (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(false || (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))), false || (false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y))))), (bool(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y)))))) || false)))))))), ! (! (bool(_GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), _GLF_IDENTITY(false || (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(false || (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))), false || (false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y))))), (bool(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y)))))) || false))))))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), _GLF_IDENTITY(false || (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(false || (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))), false || (false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y))))), (bool(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y)))))) || false)))))))), ! (! (bool(_GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), _GLF_IDENTITY(false || (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(false || (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))), false || (false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y))))), (bool(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y)))))) || false))))))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), _GLF_IDENTITY(false || (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(false || (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))), false || (false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y))))), (bool(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y)))))) || false)))))))), ! (! (bool(_GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), _GLF_IDENTITY(false || (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(false || (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))), false || (false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y))))), (bool(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y)))))) || false))))))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false)))))))) || false)) || false))))))) ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, 0u ^ (workgroup_id))) + 0u)) : _GLF_IDENTITY(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y = workgroup_id, (GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y = workgroup_id) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u | (0u))) - 0u))), ~ (~ ((_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(_GLF_IDENTITY(bool(bool(bool(injectionSwitch.x > injectionSwitch.y))), false || _GLF_IDENTITY((bool(bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))), ((bool(bool(_GLF_IDENTITY(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), false || (_GLF_IDENTITY(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), false || (bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))))) || false)))))), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), _GLF_IDENTITY(false || (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(false || (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))), false || (false || (bool(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y)))))))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(bool(injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false || (bool(bool(bool(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))), true && (_GLF_IDENTITY(false || (bool(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), false || (false || (bool(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y)))))))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), _GLF_IDENTITY(false || (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(false || (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))), false || (false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y))))), (bool(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y)))))) || false)))))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), _GLF_IDENTITY(false || (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(false || (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))), false || (false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y))))), (bool(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y)))))) || false)))))))), ! (! (bool(_GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), _GLF_IDENTITY(false || (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(false || (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))), false || (false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y))))), (bool(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y)))))) || false))))))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), _GLF_IDENTITY(false || (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(false || (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))), false || (false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y))))), (bool(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y)))))) || false)))))))), ! (! (bool(_GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), _GLF_IDENTITY(false || (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(false || (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))), false || (false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y))))), (bool(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y)))))) || false))))))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), _GLF_IDENTITY(false || (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(false || (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))), false || (false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y))))), (bool(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y)))))) || false)))))))), ! (! (bool(_GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), _GLF_IDENTITY(false || (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(false || (bool(bool(bool(injectionSwitch.x > injectionSwitch.y)))), false || (false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y))))), (bool(_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y)))))) || false))))))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false)))))))) || false)) || false))))))) ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, 0u ^ (workgroup_id))) + 0u)) : _GLF_IDENTITY(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y = workgroup_id, (GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y = workgroup_id) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u | (0u))) - 0u)))))))) >> 0u);
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y, max(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y, _GLF_IDENTITY(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y, (GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y) + 0u))), clamp(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y, GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y, GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y));
 for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))) >> 0)) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (false ? _GLF_FUZZED(24492) : 0))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1), ((1)) << 0), 0 | ((1))) >> (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (true ? int(7) : _GLF_FUZZED(_injected_loop_counter))))), 0 + (_GLF_IDENTITY(_GLF_IDENTITY((1), ((1)) << 0), 0 | ((1))) >> (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (true ? int(7) : _GLF_FUZZED(_injected_loop_counter))))))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           _GLF_IDENTITY(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = _GLF_IDENTITY(workgroup_base, (workgroup_base) | _GLF_IDENTITY(0u, (0u) | 0u)), 0u ^ (GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = _GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u)));
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = (((0 & 14461) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5)))))) << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), (_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size))) | 0u)), ~ (~ ((subgroup_size)))) | 0u);
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(0.5, 62.78)) : injectionSwitch)).x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))) || false), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false)))))))) && true), false, true, true)))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, 0.0, cos(0.0), 0.0, length(0.0), 1.0))).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-0.3)), float(injectionSwitch.y), bool(true)))))))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                     do
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, false)), ! _GLF_IDENTITY((! (bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))))), false)))), ((! (bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))))), false))))) || false)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))) - 0.0), injectionSwitch.y))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             else
              {
              }
            }
           do
            {
             for(int _injected_loop_counter = ((_GLF_IDENTITY(1, int(ivec2(1, 0))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), (true ? int(6) : _GLF_FUZZED(-71312))), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(_GLF_IDENTITY(float(0.0), (false ? _GLF_FUZZED(acosh(-7.8)) : float(0.0))), float(_GLF_IDENTITY(_GLF_FUZZED(2.5), min(_GLF_FUZZED(2.5), _GLF_IDENTITY(_GLF_FUZZED(2.5), min(_GLF_FUZZED(2.5), _GLF_FUZZED(2.5)))))), bool(false))), injectionSwitch.x)), (false ? _GLF_FUZZED(_injected_loop_counter) : int(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(2.5)), bool(false))), injectionSwitch.x))))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 1.0, 1.0), (vec4(injectionSwitch.y, 1.0, 1.0, 1.0)) / vec4(1.0, 1.0, 1.0, 1.0))))))))), bvec3(bvec4(bvec3(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))), false, true)))))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint virtual_gid = GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 for(int _injected_loop_counter = (1 ^ ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   do
    {
     atomicStore(write_val, uint(virtual_gid), 4, 64, _GLF_IDENTITY(0, int(_GLF_IDENTITY(_GLF_IDENTITY(int(0), max(_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) | 0)), min(int(_GLF_IDENTITY(0, (0) | 0)), int(_GLF_IDENTITY(0, (0) | 0)))), _GLF_IDENTITY(int(_GLF_IDENTITY(0, ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) * (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) / 1)))), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), clamp(int(0), _GLF_IDENTITY(int(0), ~ (~ (_GLF_IDENTITY(int(0), int(ivec2(int(0), 1)))))), int(0)))), _GLF_IDENTITY(int(int(int(_GLF_IDENTITY(int(0), clamp(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))), int(0), int(0)))))), ~ (~ (int(int(int(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0)))))))))))))), 0 ^ (_GLF_IDENTITY(int(0), max(int(_GLF_IDENTITY(0, (0) | 0)), _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0)))), _GLF_IDENTITY(_GLF_IDENTITY(int(int(int(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0)))))), min(int(int(int(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0)))))), int(int(int(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0)))))))), ~ (~ (int(int(int(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0)))))))))))))))))));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, false || (false)))), (_GLF_IDENTITY((! (_GLF_IDENTITY(false, false || (false)))), false || ((! (_GLF_IDENTITY(false, false || (false))))))) && true))));
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))), bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint read_val = atomicLoad(write_val, 4, _GLF_IDENTITY(64, (64) | _GLF_IDENTITY((64), min((64), (64)))), 0);
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(((0 >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(2), int(2))), (((0 >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(2), int(2)))) ^ 0), (false ? _GLF_FUZZED(82532) : ((0 >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) - 0), int(2))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) || false)); _injected_loop_counter ++)
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 _GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(read_val)), (buf[virtual_gid] = uint(subgroupAllEqual(read_val))) | 0u);
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(1.0, (1.0) / 1.0) * (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-5824.8837)), bool(false))))), 0.0, 0.0, _GLF_IDENTITY(sqrt(1.0), max(sqrt(1.0), sqrt(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0)))))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(1.0, (1.0) / 1.0) * (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-5824.8837)), bool(false))))), 0.0, 0.0, _GLF_IDENTITY(sqrt(1.0), max(sqrt(1.0), sqrt(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0)))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) / 1.0)) / 1.0) * (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-5824.8837)), bool(false))))), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(895.309)), bool(false)))) + 0.0), 0.0, _GLF_IDENTITY(sqrt(1.0), max(sqrt(1.0), sqrt(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0))))))))))))) || false)), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(1.0, (1.0) / 1.0) * (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-5824.8837)), bool(false))))), 0.0, 0.0, _GLF_IDENTITY(sqrt(_GLF_IDENTITY(1.0, (1.0) + 0.0)), max(sqrt(1.0), sqrt(1.0)))))))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(1.0, (1.0) / 1.0) * (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-5824.8837)), bool(false))))), 0.0, 0.0, _GLF_IDENTITY(sqrt(_GLF_IDENTITY(1.0, (1.0) + 0.0)), max(sqrt(1.0), sqrt(1.0)))))))), true, false))))) || false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), false || ((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, false, true)))))))) && true), _GLF_IDENTITY(! (_GLF_IDENTITY(! (! (_GLF_IDENTITY((false), false || ((false))) && true)), false || (! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), false || ((false))) && true))))), (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY((false), false || ((false))) && true)), false || (! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))), false || ((false))) && true)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 1
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
