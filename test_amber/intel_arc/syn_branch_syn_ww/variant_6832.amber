#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec2(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), 0.0)))))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) - 0.0) > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), bool(bool(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))), false)))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))) && true)))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(161477u)), _GLF_FUZZED(1059.9169)), vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_IDENTITY((injectionSwitch)[0], (true ? (injectionSwitch)[0] : _GLF_FUZZED(7030.0445)))), float(_GLF_FUZZED(5573.1540)), bool(false))), (injectionSwitch)[1]), _GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true)))))).y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (_GLF_IDENTITY(gl_NumWorkGroups, (true ? _GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups))) : _GLF_FUZZED(uvec3(10025u, 172572u, 100260u))))))), (_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))), min((_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups)))))) / uvec3(1u, _GLF_IDENTITY(1u, uint(uvec3(1u, 1u, 0u))), 1u)) | uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups))) | uvec3(0u, 0u, 0u))) << uvec3(0u, 0u, 0u)).x;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), (_GLF_IDENTITY(false, (false) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
  return;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) << (_GLF_IDENTITY(uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u), _GLF_IDENTITY(uvec3(0u), uvec3(1u, 1u, 1u) * (uvec3(0u)))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u), _GLF_IDENTITY(uvec3(0u), uvec3(1u, 1u, 1u) * (uvec3(0u)))), (_GLF_IDENTITY(uvec3(0u), _GLF_IDENTITY(uvec3(0u), uvec3(1u, 1u, 1u) * (uvec3(0u))))) | (_GLF_IDENTITY(uvec3(0u), _GLF_IDENTITY(uvec3(0u), uvec3(1u, 1u, 1u) * (uvec3(0u)))))))), (_GLF_IDENTITY(uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(0u), _GLF_IDENTITY(uvec3(0u), uvec3(1u, 1u, 1u) * (uvec3(0u)))), min(_GLF_IDENTITY(uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(0u), _GLF_IDENTITY(uvec3(0u), uvec3(1u, 1u, 1u) * (uvec3(0u)))), uvec3(0u, 0u, 0u) | (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(0u), _GLF_IDENTITY(uvec3(0u), uvec3(1u, 1u, _GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, (1u) >> 0u)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, (1u) >> 0u)), (~ (_GLF_IDENTITY(1u, (1u) >> 0u))) / 1u)) | (~ (_GLF_IDENTITY(1u, (1u) >> 0u))))))) * (uvec3(0u)))))), uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) << 0u)) >> _GLF_IDENTITY(uvec3(0u), _GLF_IDENTITY(uvec3(0u), _GLF_IDENTITY(uvec3(1u, 1u, 1u), uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (uvec3(1u, 1u, 1u))) * (uvec3(0u))))))) - uvec3(0u, 0u, 0u)))).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, false, false)), (bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, false, false))) && true)), ! (! (_GLF_IDENTITY(false, (false) || false))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec4(false, false, false, true)))) && true), (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)), (! (false)) && true)))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, true)))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))) && true) || (false))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))
  return;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false))))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false)))))))) && true), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true)))))) && true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, true))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(true, ! (! (true))) ? 0u : _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)))))), (_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(true, ! (! (true))) ? 0u : _GLF_FUZZED(workgroup_size))))) | (_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(workgroup_size)))))), _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), 1u), (uvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) / 1u), max(subgroup_base, _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)))), min(subgroup_base, subgroup_base)), 1u)) << uvec2(0u, 0u)))), 0u + (subgroup_base)), _GLF_IDENTITY(clamp(subgroup_base, subgroup_base, subgroup_base), uint(_GLF_IDENTITY(uvec2(clamp(subgroup_base, subgroup_base, subgroup_base), uint(_GLF_ONE(1.0, injectionSwitch.y))), (uvec2(clamp(subgroup_base, subgroup_base, subgroup_base), uint(_GLF_ONE(1.0, injectionSwitch.y)))) * uvec2(1u, 1u)))))) ^ 0u)) + 0u))), clamp(_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base), (false ? _GLF_FUZZED(num_workgroup) : (subgroup_base))) * ((uint(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), (subgroup_base) ^ 0u), subgroup_base)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), (_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), (_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), clamp(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base), 1u * ((subgroup_base))) ^ 0u), _GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u))))))), subgroup_base)), (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), subgroup_base), (_GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), subgroup_base), 0u ^ (min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ _GLF_IDENTITY(0u, (0u) ^ 0u)), (_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base) ^ 0u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mix(46275u, subgroup_size, true)) : (subgroup_base) ^ 0u)))) << _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(5u), uint(5u))) ^ (0u)))) - 0u), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ _GLF_IDENTITY(0u, (0u) ^ 0u)), (_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u)) << _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(5u), uint(5u))) ^ (0u)))) - 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), (_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u)) - (0u >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (uint(3u)) * 1u)))), _GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u)))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(num_workgroup, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(num_workgroup, (num_workgroup) | (num_workgroup)), 1u, 0u)), (uint(uvec3(_GLF_IDENTITY(num_workgroup, (num_workgroup) | (num_workgroup)), 1u, 0u))) ^ 0u))) : _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ _GLF_IDENTITY(0u, (0u) ^ 0u)), (_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u)) << _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(5u), uint(5u))) ^ (0u)))) - 0u), _GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), _GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u)))))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ _GLF_IDENTITY(0u, (0u) ^ 0u)), (_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u)) << _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(5u), uint(5u))) ^ (0u)))) - 0u), _GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), _GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ _GLF_IDENTITY(0u, (0u) ^ 0u)), (_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u)) << _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(5u), uint(5u))) ^ (0u)))) - 0u), _GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), _GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ _GLF_IDENTITY(0u, (0u) ^ 0u)), (_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u)) << _GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(5u), uint(5u))) ^ (0u)))) - 0u), _GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), _GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u)))))))))) | 0u), subgroup_base)))) | (_GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), _GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))), ~ (~ _GLF_IDENTITY((min(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), subgroup_base)), max(_GLF_IDENTITY((min(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), subgroup_base)), 0u | ((min(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), subgroup_base)))), (min(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), subgroup_base)))))))))) / _GLF_IDENTITY(1u, (1u) / 1u)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), subgroup_base)), (_GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_base), ((subgroup_base)) ^ ((0u >> _GLF_IDENTITY(uint(1u), uint(1u))) << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), (uint(0u)) << _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, (0u) ^ 0u))))))), min(_GLF_IDENTITY((subgroup_base), 0u | ((subgroup_base))), (subgroup_base))) ^ 0u), subgroup_base))) + 0u))) + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> _GLF_IDENTITY(0u, uint(uint(0u))))))), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> _GLF_IDENTITY(0u, uint(uint(0u))))))), max(_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> _GLF_IDENTITY(0u, uint(uint(0u))))))), _GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> _GLF_IDENTITY(0u, uint(uint(0u))))))))), 0u, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) >> 0u, ((subgroup_local_id) >> 0u) | (_GLF_IDENTITY((subgroup_local_id) >> 0u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_local_id) >> 0u, ((subgroup_local_id) >> 0u) ^ 0u)), uint(uvec3(~ (_GLF_IDENTITY((subgroup_local_id) >> 0u, ((subgroup_local_id) >> 0u) ^ 0u)), 1u, 0u))))))))))), 0u | (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) >> 0u, ((subgroup_local_id) >> 0u) | ((subgroup_local_id) >> 0u))))))))) / (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), 1u * _GLF_IDENTITY((uint(5u)), max((uint(5u)), (uint(5u)))))), ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(5u, max(5u, 5u))), _GLF_IDENTITY(uint(5u), 1u * _GLF_IDENTITY((uint(5u)), max((uint(5u)), (uint(5u))))))) ^ 0u)));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, true, false)), ! (! (bool(bvec3(false, true, false))))), true && (bool(bvec3(false, true, false))))), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x, min(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x)) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 1.0, tan(0.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, sqrt(0.0)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY(mat2(mat3(mat2(1.0))), (mat2(mat3(mat2(1.0)))) + mat2(0.0, 0.0, 0.0, 0.0))) * (injectionSwitch)), _GLF_IDENTITY(vec2(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), 1.0, abs(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), vec2(mat4(vec2(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), 1.0, abs(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0)))))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))), (_GLF_IDENTITY(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))), ! (! (bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))))) && true)))), bool(bvec4((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(atan(vec3(-7.4, 75.17, -2.8), vec3(947.356, -3.2, -7.0))[2]) : injectionSwitch.y))))), false, true, true)))))) && true), false || (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(bool(bvec3(false, true, false)), true && (bool(bvec3(false, true, false))))), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))), injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))), ! (! (_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(abs(vec3(88.04, -1157.7230, 50.58)[1])) : 0.0)), round(length(normalize(1.0))), abs(round(length(normalize(vec3(1.0, 1.0, 1.0))))), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0))), mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(mat2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)), vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))), 0.0, exp(0.0)))))).x > injectionSwitch.y))), bool(bvec4((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 1.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 1.0, 1.0), mat3(mat3(_GLF_IDENTITY(mat3(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 1.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 1.0, 1.0), mat3(_GLF_IDENTITY(mat3(mat3(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 1.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 1.0, 1.0)), (false ? _GLF_FUZZED(mat3(193.744, 9.7, 7.5, -2275.0068, 642.319, -69.33, 67.08, -5.2, -4.0)) : mat3(mat3(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 1.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 1.0, 1.0)))))))))))))))), false, true, true)))))) && true)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, ((1u ^ 1u) >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), min(uint(6u), uint(6u))))) | (_GLF_IDENTITY(subgroup_base, ~ (~ (subgroup_base))))) + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) << 0u)), ((subgroup_local_id + 1)) + 0u) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, float(float(0.0))))), (false ? _GLF_FUZZED(-5.0) : 0.0)) : _GLF_FUZZED(25.74))), 0.0, _GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(determinant(mat4(1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(9575.1295)), float(0.0), bool(true))), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-76.43))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), mix(float(determinant(mat4(1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(9575.1295)), float(0.0), bool(true))), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))), float(_GLF_FUZZED(float(125854u))), bool(false))), 1.0, 1.0), vec4(1.0, 0.0, sin(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x2(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(6.8)), bool(false))), log(1.0), 0.0, abs(1.0)), mat3x2(_GLF_IDENTITY(mat4x2(mat3x2(0.0, 0.0, 0.0, log(1.0), 0.0, abs(1.0))), mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4x2(mat3x2(0.0, 0.0, 0.0, log(1.0), 0.0, abs(1.0))))))))), min(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x2(0.0, 0.0, 0.0, log(1.0), 0.0, _GLF_IDENTITY(abs(1.0), mix(float(_GLF_FUZZED(-1.5)), float(abs(1.0)), bool(true)))), mat3x2(_GLF_IDENTITY(mat4x2(mat3x2(0.0, 0.0, 0.0, log(1.0), 0.0, abs(1.0))), mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4x2(mat3x2(0.0, 0.0, 0.0, log(1.0), 0.0, abs(1.0))))))))), _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x2(0.0, 0.0, 0.0, log(1.0), 0.0, abs(1.0)), mat3x2(_GLF_IDENTITY(mat4x2(mat3x2(0.0, 0.0, 0.0, log(1.0), 0.0, abs(1.0))), mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4x2(mat3x2(0.0, 0.0, 0.0, log(1.0), 0.0, abs(1.0)))))))))))))), 0.0)), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec4(0.0, determinant(_GLF_IDENTITY(mat4(1.0, 0.0, _GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), mix(float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), float(_GLF_FUZZED((true ? 34.54 : -395.422))), bool(false))), cos(0.0), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(525.783) : 1.0)), 1.0, 1.0, 0.0))), 0.0, 1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(1.0, 1.0, 1.0), clamp(clamp(1.0, 1.0, 1.0), clamp(1.0, 1.0, 1.0), clamp(1.0, 1.0, 1.0)))), _GLF_IDENTITY(1.0, (1.0) * 1.0))), 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(2.0) : 0.0)), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0), (false ? _GLF_IDENTITY(_GLF_FUZZED(mat4(-9694.1718, 5317.8077, 90.87, -8.5, -3958.8093, 909.675, 5476.5687, -1.0, -40.07, 0.6, 2126.1285, -8971.3199, -2556.3159, -0.1, -5.5, -6.1)), (_GLF_IDENTITY(_GLF_FUZZED(mat4(-9694.1718, 5317.8077, 90.87, -8.5, -3958.8093, 909.675, 5476.5687, -1.0, -40.07, 0.6, 2126.1285, -8971.3199, -2556.3159, -0.1, -5.5, -6.1)), (true ? _GLF_FUZZED(mat4(-9694.1718, 5317.8077, 90.87, -8.5, -3958.8093, 909.675, 5476.5687, -1.0, -40.07, 0.6, 2126.1285, -8971.3199, -2556.3159, -0.1, -5.5, -6.1)) : _GLF_FUZZED(mat4(-1.8, -8.2, 128.746, -0.7, -6.3, -127.228, -9.0, 8.5, 1.5, -6.7, -954.546, 65.57, -841.290, -900.520, 76.21, 54.20))))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)) : mat4(1.0, 0.0, _GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, 1.0, cos(0.0), 1.0, 1.0, 1.0, 0.0))), 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, (1.0) * 1.0))), max(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, (1.0) * 1.0))), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, (1.0) * 1.0))))), 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(2.0) : 0.0)), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)))), 1.0, 1.0), _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), _GLF_IDENTITY(float(_GLF_FUZZED(6.2)), clamp(float(_GLF_FUZZED(6.2)), _GLF_IDENTITY(float(_GLF_FUZZED(6.2)), clamp(float(_GLF_FUZZED(6.2)), float(_GLF_FUZZED(6.2)), float(_GLF_FUZZED(6.2)))), float(_GLF_FUZZED(6.2)))), bool(false)))), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(6.2)), bool(false)))))) + (vec4(_GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(2.1)), float(0.0), bool(true))), 0.0, 0.0)), (true ? _GLF_IDENTITY(0.0, min(0.0, 0.0)) : _GLF_FUZZED(2.7))), _GLF_IDENTITY(determinant(mat4(1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) * 1.0), max(_GLF_IDENTITY(0.0, (0.0) * 1.0), _GLF_IDENTITY(0.0, (0.0) * 1.0))), float(mat4x2(0.0, 1.0, 1.0, _GLF_IDENTITY(cos(0.0), min(cos(0.0), _GLF_IDENTITY(cos(0.0), clamp(cos(0.0), _GLF_IDENTITY(cos(0.0), float(mat2x4(cos(0.0), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0))), cos(0.0))))), 1.0, 1.0, 1.0, 0.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), (_GLF_IDENTITY(determinant(mat4(1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) * 1.0), max(_GLF_IDENTITY(0.0, (0.0) * 1.0), _GLF_IDENTITY(0.0, (0.0) * 1.0))), float(mat4x2(0.0, 1.0, 1.0, cos(0.0), 1.0, 1.0, 1.0, 0.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), float(mat4x2(determinant(mat4(1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) * 1.0), max(_GLF_IDENTITY(0.0, (0.0) * 1.0), _GLF_IDENTITY(0.0, (0.0) * 1.0))), float(mat4x2(0.0, 1.0, 1.0, cos(0.0), 1.0, 1.0, 1.0, 0.0))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0)))) - sqrt(0.0)), 1.0, 1.0))), vec4(1.0, 0.0, sin(0.0), _GLF_IDENTITY(0.0, (0.0) - 0.0))), (false ? _GLF_FUZZED(-198.362) : dot(vec4(0.0, determinant(mat4(1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(smoothstep(4.3, 3.6, vec2(22.63, 4187.6989)[1])) : 1.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(38.75)), bool(false))), 1.0), vec4(1.0, 0.0, sin(0.0), 0.0))))), 1.0, 0.0))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(false))
  return;
 if((_GLF_IDENTITY(subgroup_local_id % 2, min(subgroup_local_id % 2, _GLF_IDENTITY(subgroup_local_id % 2, (_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) * 1u)) * 1u)))) == 0)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (injectionSwitch.y) * _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) + 0.0)) + 0.0), 1.0))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (injectionSwitch.y) * _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) + 0.0)) + 0.0), 1.0)))), float(_GLF_FUZZED(3877.8701)), bool(false))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (injectionSwitch.y) * _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) + 0.0)) + 0.0), 1.0))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (injectionSwitch.y) * _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) + 0.0)) + 0.0), 1.0)))), float(_GLF_FUZZED(3877.8701)), bool(false))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (injectionSwitch.y) * _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) + 0.0)) + 0.0), 1.0))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (injectionSwitch.y) * _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) + 0.0)) + 0.0), 1.0)))), float(_GLF_FUZZED(3877.8701)), bool(false))), false))))))))))
      return;
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))), bool(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))), false, false)))) || false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), bool(bvec4(! (_GLF_IDENTITY(false, bool(bool(false)))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), bool(bvec4(! (_GLF_IDENTITY(false, bool(bool(false)))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), bool(bvec4(! (_GLF_IDENTITY(false, bool(bool(false)))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)), false || (bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), bool(bvec4(! (_GLF_IDENTITY(false, bool(bool(false)))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), bool(bvec4(! (_GLF_IDENTITY(false, bool(bool(false)))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)))))), false, true)))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    return;
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), false || _GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-0.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY(9.9, float(_GLF_IDENTITY(mat2x3(9.9, 1.0, 1.0, sqrt(0.0), 0.0, 1.0), (mat2x3(9.9, 1.0, 1.0, sqrt(0.0), 0.0, 1.0)) * mat2(1.0)))))), bvec2(true, false))), injectionSwitch, injectionSwitch)).y))), false || ((_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-0.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY(9.9, float(_GLF_IDENTITY(mat2x3(9.9, 1.0, 1.0, sqrt(0.0), 0.0, 1.0), (mat2x3(9.9, 1.0, 1.0, sqrt(0.0), 0.0, 1.0)) * mat2(1.0)))))), bvec2(true, false))), injectionSwitch, injectionSwitch)).y))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), vec2(vec2(injectionSwitch))), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), vec2(vec2(injectionSwitch))))).x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(2), min(uint(2), uint(2))), 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(633.511)), float(injectionSwitch.x), bool(true))) > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
