#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
          barrier();
         barrier();
        }
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)) - 0.0)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   do
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), int(0))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(_GLF_IDENTITY(41164, (false ? _GLF_FUZZED(27311) : 41164))) : int(4))), int(ivec4(int(4), 1, _GLF_IDENTITY(1, _GLF_IDENTITY((1) | 0, ((1) | 0) ^ 0)), 1))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(int(4), 1, 1, 1), _GLF_IDENTITY((ivec4(int(4), 1, 1, 1)) ^ ivec4(0, 0, 0, 0), ((ivec4(int(4), 1, 1, 1)) ^ ivec4(_GLF_IDENTITY(0, ~ (~ (0))), 0, 0, 0)) | ivec4(0, 0, 0, 0)))), (int(_GLF_IDENTITY(ivec4(int(4), 1, 1, 1), _GLF_IDENTITY((ivec4(int(4), 1, 1, 1)) ^ ivec4(0, 0, 0, 0), ((ivec4(int(4), 1, 1, 1)) ^ ivec4(_GLF_IDENTITY(0, ~ (~ (0))), 0, 0, 0)) | ivec4(0, 0, 0, 0))))) * 1), _GLF_IDENTITY(max(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(int(4), 1, 1, 1), (ivec4(int(4), 1, 1, 1)) >> ivec4(0, 0, 0, 0)), (ivec4(int(4), 1, 1, 1)) ^ ivec4(0, 0, 0, 0))), 0 | (int(_GLF_IDENTITY(ivec4(int(4), 1, 1, 1), (ivec4(int(4), 1, 1, 1)) ^ ivec4(0, 0, 0, 0))))), int(_GLF_IDENTITY(ivec4(int(4), 1, 1, 1), (ivec4(int(4), 1, 1, _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, min(1, 1)), 1)))) ^ ivec4(0, 0, 0, 0)))), 0 ^ (max(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(int(4), 1, 1, 1), (ivec4(int(4), 1, 1, 1)) >> ivec4(0, 0, 0, 0)), (ivec4(int(4), 1, 1, 1)) ^ ivec4(0, 0, 0, 0))), 0 | (int(_GLF_IDENTITY(ivec4(int(4), 1, 1, 1), (ivec4(int(4), 1, 1, 1)) ^ ivec4(0, 0, 0, 0))))), int(_GLF_IDENTITY(ivec4(int(4), 1, 1, 1), (ivec4(int(4), 1, 1, _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, min(1, 1)), 1)))) ^ ivec4(0, 0, 0, 0))))))))))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) << (0 << _GLF_IDENTITY(int(4), int(4)))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(_GLF_IDENTITY(41164, (false ? _GLF_FUZZED(27311) : 41164))) : int(4))), int(ivec4(int(4), 1, _GLF_IDENTITY(1, _GLF_IDENTITY((1) | 0, ((1) | 0) ^ 0)), 1))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(int(4), 1, 1, 1), _GLF_IDENTITY((ivec4(_GLF_IDENTITY(int(4), (0 << _GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(int(4), min(_GLF_IDENTITY(int(4), 0 | (int(4))), int(4))))), 1, 1, 1)) ^ ivec4(0, 0, 0, 0), ((ivec4(int(4), 1, 1, 1)) ^ ivec4(_GLF_IDENTITY(0, ~ (~ (0))), 0, 0, 0)) | ivec4(0, 0, 0, 0)))), (int(_GLF_IDENTITY(ivec4(int(4), 1, 1, 1), _GLF_IDENTITY((ivec4(int(4), 1, 1, 1)) ^ ivec4(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, max(0, 0)))))) | (0)), 0, 0), ((ivec4(int(4), 1, 1, 1)) ^ ivec4(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), min(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0, ~ (~ (0))))), 0, 0, 0)) | ivec4(0, 0, _GLF_IDENTITY(0, ~ (~ (0))), 0))))) * 1), _GLF_IDENTITY(max(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(int(4), 1, 1, 1), (ivec4(int(4), 1, 1, 1)) >> ivec4(0, 0, 0, _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) - 0), 0)))), (ivec4(int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), (~ (4)) ^ 0)))), 1, 1, 1)) ^ ivec4(0, 0, 0, 0))), 0 | (int(_GLF_IDENTITY(ivec4(int(4), 1, 1, 1), (ivec4(int(4), 1, 1, 1)) ^ ivec4(0, 0, 0, 0))))), int(_GLF_IDENTITY(ivec4(int(4), 1, 1, 1), _GLF_IDENTITY((ivec4(_GLF_IDENTITY(int(4), (int(4)) / 1), 1, 1, _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, min(1, 1)), 1)))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) ? _GLF_FUZZED(ivec4(-13360, -81478, -41825, 43329)) : (ivec4(_GLF_IDENTITY(int(4), (int(4)) / 1), 1, 1, _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, min(1, 1)), 1)))))) ^ ivec4(0, 0, 0, 0)))), 0 ^ (max(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(int(4), 1, 1, 1), (ivec4(int(4), 1, 1, 1)) >> ivec4(0, 0, 0, 0)), (ivec4(int(4), _GLF_IDENTITY(1, (1) / 1), 1, 1)) ^ ivec4(0, 0, 0, 0))), 0 | (int(_GLF_IDENTITY(ivec4(int(4), 1, 1, 1), (ivec4(int(4), 1, 1, 1)) ^ ivec4(0, 0, 0, 0))))), int(_GLF_IDENTITY(ivec4(int(4), 1, 1, 1), (ivec4(int(4), 1, _GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, min(1, 1)), 1)))) ^ ivec4(0, 0, 0, 0)))))))))))))) && true); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ 0))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(mix(vec2(2.3, 0.1), vec2(40.93, -7232.8525), bvec2(false, false))))).y) && true)))))
    continue;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(0.0, 0.0))).x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), true)))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4.2, -33.05)) : injectionSwitch)).y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || ((false) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0) : _GLF_FUZZED(-3150.3511))), injectionSwitch.y, injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)) : _GLF_FUZZED(-1.9)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, 0.0, 1.0))))) < injectionSwitch.y)), false)), true && (bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, 0.0, 1.0))))) < injectionSwitch.y)), false))))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, max(_GLF_IDENTITY(workgroup_size * workgroup_id, clamp(_GLF_IDENTITY(workgroup_size, min(workgroup_size, _GLF_IDENTITY(workgroup_size, ~ (~ (_GLF_IDENTITY(workgroup_size, uint(uint(workgroup_size)))))))) * workgroup_id, workgroup_size * workgroup_id, workgroup_size * _GLF_IDENTITY(workgroup_id, (1u ^ 0u) * (workgroup_id)))), _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * _GLF_IDENTITY(workgroup_id, 0u + (workgroup_id))) ^ 0u)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), (_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size))) * 1u)) - 0u);
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, 0u ^ (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, sqrt(1.0), 1.0, 1.0))))) ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), max((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), mix(vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))))[0], 1.0 * ((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))))[0])), _GLF_FUZZED(655.130)), vec2(_GLF_FUZZED(-5253.2601), (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))))[1]), bvec2(false, true)))), (injectionSwitch))), _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-7160.1185), (_GLF_IDENTITY((injectionSwitch), max((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))))), (injectionSwitch))))[1]), vec2(_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch), max((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(injectionSwitch))) * mat2(1.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))))), (injectionSwitch)))), vec2(mat2x4((_GLF_IDENTITY((injectionSwitch), max((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(injectionSwitch))) * mat2(1.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))))), (injectionSwitch)))), 1.0, 1.0, 0.0, exp(0.0), 1.0, tan(0.0))))[0], _GLF_FUZZED(-7.9)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), (mix(vec2(_GLF_FUZZED(-7160.1185), (_GLF_IDENTITY((injectionSwitch), max((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))))), (injectionSwitch))))[1]), vec2((_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(1.0)))), max((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))))), (injectionSwitch))))[0], _GLF_FUZZED(-7.9)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))) * _GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0)))))), _GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, 1.0), min(min(1.0, 1.0), min(1.0, 1.0)))), 0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, sqrt(1.0), 1.0, 1.0, 1.0, 1.0)), (true ? vec2(mat3x4(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))), 1.0, 0.0, 1.0, 1.0, 1.0, sqrt(1.0), 1.0, 1.0, 1.0, 1.0)) : _GLF_FUZZED(vec2(701.800, 31.95))))) * mat2(1.0)) : _GLF_FUZZED(vec2(5839.5877, _GLF_IDENTITY(4767.9921, (false ? _GLF_FUZZED(abs(_GLF_IDENTITY(-2.0, float(mat4x3(_GLF_IDENTITY(-2.0, (true ? -2.0 : _GLF_FUZZED(-56.92))), length(vec2(0.0, 0.0)), 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, abs(1.0), 0.0, 0.0))))) : 4767.9921)))))).x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0)), (_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), round(length(normalize(1.0)))))).x < injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), round(length(normalize(1.0)))))).x < injectionSwitch.y), true && (! (_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), round(length(normalize(1.0)))))).x < injectionSwitch.y))))))) ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), vec2(0.0, 0.0) + ((injectionSwitch))), _GLF_IDENTITY(max((injectionSwitch), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))), vec2(_GLF_IDENTITY(mat2x4(max((injectionSwitch), (injectionSwitch)), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0), (true ? mat2x4(max((injectionSwitch), (injectionSwitch)), 1.0, 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) / 1.0), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), 0.0, 1.0, 0.0) : _GLF_FUZZED(mat2x4(4.9, -48.86, 97.18, 21.22, _GLF_IDENTITY(-9.0, mix(float(_GLF_FUZZED(3.0)), float(-9.0), bool(true))), 9.0, -6.4, 39.98))))))), 1.0, 0.0, 1.0, 1.0, 1.0, sqrt(1.0), 1.0, 1.0, 1.0, 1.0)), (_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), bool(bvec2(true, false))) ? vec2(mat3x4(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))), 1.0, 0.0, 1.0, 1.0, 1.0, sqrt(1.0), 1.0, 1.0, 1.0, 1.0)) : _GLF_FUZZED(vec2(701.800, 31.95))))) * mat2(1.0)) : _GLF_FUZZED(vec2(5839.5877, 4767.9921)))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY((injectionSwitch), max((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))))), (injectionSwitch))), 1.0, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(sqrt(1.0), (_GLF_IDENTITY(sqrt(1.0), mix(float(_GLF_FUZZED(-446.277)), float(_GLF_IDENTITY(sqrt(1.0), float(mat4(sqrt(1.0), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)))), bool(true)))) - _GLF_ZERO(0.0, injectionSwitch.x)), 1.0, 1.0, 1.0, 1.0)), (true ? vec2(mat3x4(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))), 1.0, 0.0, 1.0, 1.0, 1.0, sqrt(1.0), 1.0, 1.0, 1.0, 1.0)) : _GLF_FUZZED(vec2(701.800, 31.95))))) * mat2(1.0)) : _GLF_FUZZED(vec2(5839.5877, 4767.9921)))).x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), true && (_GLF_IDENTITY(false, bool(bvec2(false, true)))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   return;
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (true ? _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1), ((_GLF_IDENTITY(subgroup_local_id, ~ (~ _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) | ((subgroup_local_id))))) + _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) << 0), 1)), _GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, min(1, 1)), 1)))))) >> 0u) % subgroup_size : _GLF_FUZZED(workgroup_base))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), (bool(bvec4(false, false, false, false))) && true)), bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))))
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) + 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4932.8128), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-876.533)), bvec2(true, false))), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, sqrt(1.0), determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0))))), (mat3x4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4932.8128), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-876.533)), bvec2(true, false))), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, sqrt(1.0), determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)))))) * mat3(1.0))), (false ? _GLF_FUZZED(injectionSwitch) : vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4932.8128), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-876.533)), bvec2(true, false))), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, sqrt(1.0), determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0))))), (mat3x4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4932.8128), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-876.533)), bvec2(true, false))), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, sqrt(1.0), determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)))))) * mat3(1.0)))))).x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-8.0, 9.7)))).y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), vec2(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), 0.0, 0.0, 0.0, 1.0, 1.0, tan(0.0), 0.0, 0.0, 0.0, 1.0))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), _GLF_IDENTITY(vec2(mat4(_GLF_IDENTITY(max(injectionSwitch, injectionSwitch), clamp(max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch))), 0.0, 0.0, round(length(normalize(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))))), 1.0, abs(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), (vec2(mat4(_GLF_IDENTITY(max(injectionSwitch, injectionSwitch), clamp(max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch))), 0.0, 0.0, round(length(normalize(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))))), 1.0, abs(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))) / vec2(1.0, 1.0)))).x) - 0.0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), ~ (~ _GLF_IDENTITY((1), min(_GLF_IDENTITY((1), (_GLF_IDENTITY((1), ~ (~ ((1))))) | ((1))), _GLF_IDENTITY((1), int(_GLF_ONE(1.0, injectionSwitch.y)) * ((1)))))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | (_GLF_IDENTITY((subgroup_local_id % 2), max((subgroup_local_id % 2), (subgroup_local_id % 2))))), max(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), uint(_GLF_IDENTITY(uvec3((subgroup_local_id % 2), 0u, 0u), (_GLF_IDENTITY(uvec3((subgroup_local_id % 2), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) * 1u)) * 1u), 0u), (uvec3((subgroup_local_id % 2), 0u, 0u)) << uvec3(0u, 0u, 0u))) | (uvec3((subgroup_local_id % 2), 0u, 0u))))), ((subgroup_local_id % 2)) << _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(8u, (8u) ^ 0u)), uint(8u))), (true ? (0u >> _GLF_IDENTITY(uint(8u), uint(8u))) : _GLF_FUZZED(workgroup_size)))), _GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2))))), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ((_GLF_IDENTITY(subgroup_local_id, 0u + (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))) % 2)) | (_GLF_IDENTITY((subgroup_local_id % 2), max((subgroup_local_id % 2), (_GLF_IDENTITY(subgroup_local_id % _GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) / 1)) | (2)), min(subgroup_local_id % _GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) / 1)) | (2)), subgroup_local_id % _GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) / 1)) | (2))))))))), max(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % _GLF_IDENTITY(2, (2) - 0)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(subgroup_local_id % _GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, min(2, 2)))), min(subgroup_local_id % 2, subgroup_local_id % 2))), 0u, 0u), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3((subgroup_local_id % 2), _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(0u), clamp(uint(0u), uint(0u), _GLF_IDENTITY(uint(0u), uint(uvec2(uint(0u), 1u))))))), 0u), max(_GLF_IDENTITY(uvec3((subgroup_local_id % 2), 0u, 0u), (uvec3((subgroup_local_id % 2), 0u, 0u)) | (uvec3((subgroup_local_id % 2), 0u, 0u))), uvec3((subgroup_local_id % 2), 0u, 0u))), (uvec3((subgroup_local_id % 2), 0u, 0u)) << uvec3(0u, 0u, 0u))) | (uvec3((subgroup_local_id % 2), _GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) ^ 0u)) * 1u), 0u, 0u), (clamp(_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) ^ 0u)) * 1u), max(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) ^ 0u)) * 1u), _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) + 0u), _GLF_IDENTITY((0u) ^ 0u, clamp(_GLF_IDENTITY((0u) ^ 0u, ((0u) ^ 0u) >> 0u), (0u) ^ 0u, (0u) ^ 0u)))) * 1u))), 0u, 0u)) * uint(_GLF_ONE(1.0, injectionSwitch.y)))), 0u)))), clamp(uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(subgroup_local_id % _GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, min(2, 2)))), min(subgroup_local_id % 2, subgroup_local_id % 2))), 0u, 0u), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3((subgroup_local_id % 2), _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(0u), clamp(uint(0u), uint(0u), _GLF_IDENTITY(uint(0u), uint(uvec2(uint(0u), 1u))))))), 0u), max(_GLF_IDENTITY(uvec3((subgroup_local_id % 2), 0u, 0u), (uvec3((subgroup_local_id % 2), 0u, 0u)) | (uvec3((subgroup_local_id % 2), 0u, 0u))), uvec3((subgroup_local_id % 2), 0u, 0u))), (uvec3((subgroup_local_id % 2), 0u, 0u)) << uvec3(0u, 0u, 0u))) | (uvec3((subgroup_local_id % 2), _GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) ^ 0u)) * 1u), 0u, 0u), (clamp(_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) ^ 0u)) * 1u), max(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) ^ 0u)) * 1u), _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) + 0u), _GLF_IDENTITY((0u) ^ 0u, clamp(_GLF_IDENTITY((0u) ^ 0u, ((0u) ^ 0u) >> 0u), (0u) ^ 0u, (0u) ^ 0u)))) * 1u))), 0u, 0u)) * uint(_GLF_ONE(1.0, injectionSwitch.y)))), 0u)))), uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(subgroup_local_id % _GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, min(2, 2)))), min(subgroup_local_id % 2, subgroup_local_id % 2))), 0u, 0u), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3((subgroup_local_id % 2), _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(0u), clamp(uint(0u), uint(0u), _GLF_IDENTITY(uint(0u), uint(uvec2(uint(0u), 1u))))))), 0u), max(_GLF_IDENTITY(uvec3((subgroup_local_id % 2), 0u, 0u), (uvec3((subgroup_local_id % 2), 0u, 0u)) | (uvec3((subgroup_local_id % 2), 0u, 0u))), uvec3((subgroup_local_id % 2), 0u, 0u))), (uvec3((subgroup_local_id % 2), 0u, 0u)) << uvec3(0u, 0u, 0u))) | (uvec3((subgroup_local_id % 2), _GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) ^ 0u)) * 1u), 0u, 0u), (clamp(_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) ^ 0u)) * 1u), max(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) ^ 0u)) * 1u), _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) + 0u), _GLF_IDENTITY((0u) ^ 0u, clamp(_GLF_IDENTITY((0u) ^ 0u, ((0u) ^ 0u) >> 0u), (0u) ^ 0u, (0u) ^ 0u)))) * 1u))), 0u, 0u)) * uint(_GLF_ONE(1.0, injectionSwitch.y)))), 0u)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(subgroup_local_id % _GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, min(2, 2)))), min(subgroup_local_id % 2, subgroup_local_id % 2))), 0u, 0u), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3((subgroup_local_id % 2), _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(0u), clamp(uint(0u), uint(0u), _GLF_IDENTITY(uint(0u), uint(uvec2(uint(0u), 1u))))))), 0u), max(_GLF_IDENTITY(uvec3((subgroup_local_id % 2), 0u, 0u), (uvec3((subgroup_local_id % 2), 0u, 0u)) | (uvec3((subgroup_local_id % 2), 0u, 0u))), uvec3((subgroup_local_id % 2), 0u, 0u))), (uvec3((subgroup_local_id % 2), 0u, 0u)) << uvec3(0u, 0u, 0u))) | (uvec3((subgroup_local_id % 2), _GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) ^ 0u)) * 1u), 0u, 0u), (clamp(_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) ^ 0u)) * 1u), max(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) ^ 0u)) * 1u), _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) + 0u), _GLF_IDENTITY((0u) ^ 0u, clamp(_GLF_IDENTITY((0u) ^ 0u, ((0u) ^ 0u) >> 0u), (0u) ^ 0u, (0u) ^ 0u)))) * 1u))), 0u, 0u)) * uint(_GLF_ONE(1.0, injectionSwitch.y)))), 0u)))), (uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(subgroup_local_id % _GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, min(2, 2)))), min(subgroup_local_id % 2, subgroup_local_id % 2))), 0u, 0u), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3((subgroup_local_id % 2), _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(0u), clamp(uint(0u), uint(0u), _GLF_IDENTITY(uint(0u), uint(uvec2(uint(0u), 1u))))))), 0u), max(_GLF_IDENTITY(uvec3((subgroup_local_id % 2), 0u, 0u), (uvec3((subgroup_local_id % 2), 0u, 0u)) | (uvec3((subgroup_local_id % 2), 0u, 0u))), uvec3((subgroup_local_id % 2), 0u, 0u))), (uvec3((subgroup_local_id % 2), 0u, 0u)) << uvec3(0u, 0u, 0u))) | (uvec3((subgroup_local_id % 2), _GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) ^ 0u)) * 1u), 0u, 0u), (clamp(_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) ^ 0u)) * 1u), max(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) ^ 0u)) * 1u), _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) + 0u), _GLF_IDENTITY((0u) ^ 0u, clamp(_GLF_IDENTITY((0u) ^ 0u, ((0u) ^ 0u) >> 0u), (0u) ^ 0u, (0u) ^ 0u)))) * 1u))), 0u, 0u)) * uint(_GLF_ONE(1.0, injectionSwitch.y)))), 0u))))) | 0u)))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 1u * (subgroup_local_id)) % 2, (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(1u * (subgroup_local_id), uint(uint(1u * (subgroup_local_id))))) % 2) / (1u | 0u)))) << _GLF_IDENTITY((_GLF_IDENTITY(0u, uint(uint(0u))) >> _GLF_IDENTITY(uint(8u), uint(8u))), (true ? _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(8u, ~ (_GLF_IDENTITY(~ (8u), clamp(~ (8u), ~ (8u), ~ (8u)))))))), max(_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(8u), uint(8u))), ((0u >> _GLF_IDENTITY(uint(8u), uint(8u)))) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) * 1u)), (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))) : _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), min(_GLF_FUZZED(workgroup_size), _GLF_FUZZED(workgroup_size)))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) / 1u), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) / 1u), (0u ^ 0u)), uvec2(0u, 0u) + (uvec2(_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) / 1u), (0u ^ 0u))))))), _GLF_IDENTITY(((subgroup_local_id % 2)) | ((subgroup_local_id % _GLF_IDENTITY(2, max(2, 2)))), uint(uvec4(((subgroup_local_id % 2)) | ((subgroup_local_id % _GLF_IDENTITY(2, max(2, 2)))), 1u, 1u, 0u))))))) - 0u) == _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), _GLF_IDENTITY(max(_GLF_IDENTITY(0, 0 | (0)), 0), (max(_GLF_IDENTITY(0, 0 | (0)), 0)) << 0)))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), ((1 << _GLF_IDENTITY(int(7), int(7)))) - 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(7), (int(7)) - 0), int(7))), _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(ivec3(int(7), 1, 0))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(ivec3(int(7), 1, 0))), ~ (~ (_GLF_IDENTITY(int(7), int(ivec3(int(7), 1, 0)))))), _GLF_IDENTITY(int(7), int(ivec3(int(7), 1, 0)))))), max(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), ((1 << _GLF_IDENTITY(int(7), int(7)))) - 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(7), (int(7)) - 0), int(7))), _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(ivec3(int(7), 1, 0))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(ivec3(int(7), 1, 0))), ~ (~ (_GLF_IDENTITY(int(7), int(ivec3(int(7), 1, 0)))))), _GLF_IDENTITY(int(7), int(ivec3(int(7), 1, 0)))))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), ((1 << _GLF_IDENTITY(int(7), int(7)))) - 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), max(_GLF_IDENTITY(int(7), (int(7)) - 0), int(7))), _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(ivec3(int(7), 1, 0))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(ivec3(int(7), 1, 0))), ~ (~ (_GLF_IDENTITY(int(7), int(ivec3(int(7), 1, 0)))))), _GLF_IDENTITY(int(7), int(ivec3(int(7), 1, 0))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(2, _GLF_IDENTITY((2) ^ 0, clamp((2) ^ 0, (2) ^ 0, (2) ^ 0)))), max(uint(2), uint(_GLF_IDENTITY(2, int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(2, 0 + (2)), 0, 0), (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(2, 0 + (2)), 0, 0), min(ivec3(_GLF_IDENTITY(2, 0 + (2)), 0, 0), ivec3(_GLF_IDENTITY(2, 0 + (2)), 0, 0)))) | (ivec3(_GLF_IDENTITY(2, 0 + (2)), 0, 0)))))))), 4, 64, 4);
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, determinant(mat2(0.0, 1.0, 0.0, 0.0)), tan(0.0), 0.0, 1.0, 0.0, 1.0, 1.0, abs(0.0), 1.0, 0.0))).x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, determinant(mat2(0.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(45.86) : 0.0)))), float(vec2(0.0, 0.0)))) / 1.0), 0.0)), tan(0.0), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(5679.4605) : 1.0)))), abs(0.0), 1.0, 0.0))).x > injectionSwitch.y))), bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, _GLF_IDENTITY(determinant(mat2(0.0, 1.0, 0.0, 0.0)), min(determinant(mat2(0.0, 1.0, 0.0, 0.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0)))), tan(0.0), 0.0, 1.0, 0.0, 1.0, 1.0, abs(0.0), 1.0, 0.0)), mix(vec2(_GLF_IDENTITY((vec2(mat3x4(injectionSwitch, _GLF_IDENTITY(determinant(mat2(0.0, 1.0, 0.0, 0.0)), min(determinant(mat2(0.0, 1.0, 0.0, 0.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0)))), tan(0.0), 0.0, 1.0, 0.0, 1.0, 1.0, abs(0.0), 1.0, 0.0)))[0], clamp((vec2(mat3x4(injectionSwitch, _GLF_IDENTITY(determinant(mat2(0.0, 1.0, 0.0, 0.0)), min(determinant(mat2(0.0, 1.0, 0.0, 0.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0)))), tan(0.0), 0.0, 1.0, 0.0, 1.0, 1.0, abs(0.0), 1.0, 0.0)))[0], (vec2(mat3x4(injectionSwitch, _GLF_IDENTITY(determinant(mat2(0.0, 1.0, 0.0, 0.0)), min(determinant(mat2(0.0, 1.0, 0.0, 0.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0)))), tan(0.0), 0.0, 1.0, 0.0, 1.0, 1.0, abs(0.0), 1.0, 0.0)))[0], (vec2(mat3x4(injectionSwitch, _GLF_IDENTITY(determinant(mat2(0.0, 1.0, 0.0, 0.0)), min(determinant(mat2(0.0, 1.0, 0.0, 0.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0)))), tan(0.0), 0.0, 1.0, 0.0, 1.0, 1.0, abs(0.0), 1.0, 0.0)))[0])), (vec2(mat3x4(injectionSwitch, _GLF_IDENTITY(determinant(mat2(0.0, 1.0, 0.0, 0.0)), min(determinant(mat2(0.0, 1.0, 0.0, 0.0)), determinant(mat2(0.0, 1.0, 0.0, 0.0)))), tan(0.0), 0.0, 1.0, 0.0, 1.0, 1.0, abs(0.0), 1.0, 0.0)))[1]), vec2(_GLF_FUZZED(-7.5), _GLF_FUZZED(-1004.0057)), bvec2(false, false)))).x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, determinant(mat2(0.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(vec2(0.0, 0.0)))) / 1.0), 0.0)), tan(0.0), 0.0, 1.0, 0.0, 1.0, 1.0, abs(0.0), 1.0, 0.0))).x > injectionSwitch.y))), false, false, true))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, (false) || false))))))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
            barrier();
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))[1])).y) * 1.0)) / 1.0)))) && true)))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             break;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             continue;
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, false)))))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               return;
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 continue;
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 return;
                }
               do
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (1)), (_GLF_IDENTITY(1, 0 + (1))) ^ 0) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 continue;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), mix(vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))[0], _GLF_FUZZED(-289.374)), vec2(_GLF_FUZZED((9316.8266 * 0.4)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))[1]), bvec2(false, true))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) * mat2(1.0)), 1.0, 0.0, 0.0, abs(1.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), float(mat4x2(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(vec2(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(-6076.1893), (vec2(1.0, 1.0))[1]), vec2((vec2(1.0, 1.0))[_GLF_IDENTITY(0, (0) * 1)], _GLF_FUZZED(-15.06)), bvec2(true, false))))) * mat2(1.0)), 1.0, 0.0, 0.0, abs(1.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(90.32))), 0.0), vec2(_GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, 1.0))), 0.0)), float(mat4x2(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))))), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-58.74)), bool(false))), _GLF_IDENTITY(1.0, 0.0 + (1.0)))), abs(1.0), 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0), _GLF_IDENTITY((mat3(vec2(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(-6076.1893), (vec2(1.0, 1.0))[1]), vec2((vec2(1.0, 1.0))[0], _GLF_FUZZED(-15.06)), bvec2(true, false))))) * mat2(1.0)), 1.0, 0.0, 0.0, abs(1.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), float(mat4x2(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))))), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-58.74)), bool(false))), _GLF_IDENTITY(1.0, 0.0 + (1.0)))), abs(1.0), 0.0, 1.0, 0.0, 0.0, 1.0)) * _GLF_IDENTITY(mat3(1.0), (mat3(1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), (_GLF_IDENTITY((mat3(vec2(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(-6076.1893), (vec2(1.0, 1.0))[1]), vec2((vec2(1.0, 1.0))[0], _GLF_FUZZED(-15.06)), bvec2(true, false))))) * mat2(1.0)), 1.0, 0.0, 0.0, abs(1.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), float(mat4x2(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))))), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-58.74)), bool(false))), _GLF_IDENTITY(1.0, 0.0 + (1.0)))), abs(1.0), 0.0, 1.0, 0.0, 0.0, 1.0)) * _GLF_IDENTITY(mat3(1.0), (mat3(1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), mat3(mat4x3((mat3(vec2(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(-6076.1893), (vec2(1.0, 1.0))[1]), vec2((vec2(1.0, 1.0))[0], _GLF_FUZZED(-15.06)), bvec2(true, false))))) * mat2(1.0)), 1.0, 0.0, 0.0, abs(1.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), float(mat4x2(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))))), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-58.74)), bool(false))), _GLF_IDENTITY(1.0, 0.0 + (1.0)))), abs(1.0), 0.0, 1.0, 0.0, 0.0, 1.0)) * _GLF_IDENTITY(mat3(1.0), (mat3(1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))), mat2(1.0) * (vec2(_GLF_IDENTITY(mat3(vec2(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(-6076.1893), (vec2(1.0, 1.0))[1]), vec2((vec2(1.0, 1.0))[_GLF_IDENTITY(0, (0) * 1)], _GLF_FUZZED(-15.06)), bvec2(true, false))))) * mat2(1.0)), 1.0, 0.0, 0.0, abs(1.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(90.32))), 0.0), vec2(_GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, 1.0))), 0.0)), float(mat4x2(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))))), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-58.74)), bool(false))), _GLF_IDENTITY(1.0, 0.0 + (1.0)))), abs(1.0), 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0), _GLF_IDENTITY((mat3(vec2(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(-6076.1893), (vec2(1.0, 1.0))[1]), vec2((vec2(1.0, 1.0))[0], _GLF_FUZZED(-15.06)), bvec2(true, false))))) * mat2(1.0)), 1.0, 0.0, 0.0, abs(1.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), float(mat4x2(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))))), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-58.74)), bool(false))), _GLF_IDENTITY(1.0, 0.0 + (1.0)))), abs(1.0), 0.0, 1.0, 0.0, 0.0, 1.0)) * _GLF_IDENTITY(mat3(1.0), (mat3(1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), (_GLF_IDENTITY((mat3(vec2(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(-6076.1893), (vec2(1.0, 1.0))[1]), vec2((vec2(1.0, 1.0))[0], _GLF_FUZZED(-15.06)), bvec2(true, false))))) * mat2(1.0)), 1.0, 0.0, 0.0, abs(1.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), float(mat4x2(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))))), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-58.74)), bool(false))), _GLF_IDENTITY(1.0, 0.0 + (1.0)))), abs(1.0), 0.0, 1.0, 0.0, 0.0, 1.0)) * _GLF_IDENTITY(mat3(1.0), (mat3(1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), mat3(mat4x3((mat3(vec2(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(-6076.1893), (vec2(1.0, 1.0))[1]), vec2((vec2(1.0, 1.0))[0], _GLF_FUZZED(-15.06)), bvec2(true, false))))) * mat2(1.0)), 1.0, 0.0, 0.0, abs(1.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), float(mat4x2(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))))), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-58.74)), bool(false))), _GLF_IDENTITY(1.0, 0.0 + (1.0)))), abs(1.0), 0.0, 1.0, 0.0, 0.0, 1.0)) * _GLF_IDENTITY(mat3(1.0), (mat3(1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))))).y))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ((false)) || false))))))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   break;
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   return;
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), false, false))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   return;
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 return;
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(2), (uint(2)) + 0u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY(uint(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, int(ivec2(2, 1)))) + 0)), (uint(2)) + 0u))), (false ? _GLF_IDENTITY(_GLF_FUZZED(virtual_gid), (_GLF_IDENTITY(_GLF_FUZZED(virtual_gid), (_GLF_IDENTITY(_GLF_FUZZED(virtual_gid), 0u ^ (_GLF_FUZZED(virtual_gid)))) ^ 0u)) - 0u) : _GLF_IDENTITY(uint(_GLF_IDENTITY(2, 0 | (2))), _GLF_IDENTITY((uint(_GLF_IDENTITY(2, max(2, 2)))), (_GLF_IDENTITY((uint(_GLF_IDENTITY(2, max(2, 2)))), (_GLF_IDENTITY((uint(_GLF_IDENTITY(2, max(2, 2)))), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY((uint(_GLF_IDENTITY(_GLF_IDENTITY(2, max(2, 2)), ~ (~ (_GLF_IDENTITY(2, max(2, 2))))))), min((uint(_GLF_IDENTITY(2, max(2, 2)))), (uint(_GLF_IDENTITY(2, max(2, 2))))))))) * 1u)) * (0u | 1u)) + _GLF_IDENTITY(0u, ~ _GLF_IDENTITY(_GLF_IDENTITY((~ (0u)), 0u ^ ((~ (0u)))), min((~ (0u)), (~ (0u)))))))), 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(true ? 64 : _GLF_FUZZED(31867), max(true ? 64 : _GLF_FUZZED(31867), true ? 64 : _GLF_FUZZED(31867))))), 4);
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) : _GLF_FUZZED(2.2))) > injectionSwitch.y)))))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      break;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           continue;
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
