#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_0 {
 uvec3 _f0;
 uint _f1;
 uvec2 _f2;
 bool _f3;
 bvec4 _f4;
 uvec4 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
} ;

struct _GLF_struct_2 {
 uint virtual_gid;
 int _f0;
 _GLF_struct_1 _f1;
 vec3 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged3_0_2_52_2_1_17_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basesubgroup_local_idworkgroup_base;
 uvec3 GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base;
 uvec3 GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basesubgroup_size;
 uvec2 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base;
 GLF_merged3_0_2_52_2_1_17_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basesubgroup_local_idworkgroup_base.xy = GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base;
 GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basesubgroup_size.xy = GLF_merged3_0_2_52_2_1_17_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basesubgroup_local_idworkgroup_base.xy;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basesubgroup_size.z = subgroup_size;
 GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basesubgroup_size.xy.x = GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basesubgroup_size.z;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged3_0_2_52_2_1_17_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basesubgroup_local_idworkgroup_base.z = subgroup_local_id;
 GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y = GLF_merged3_0_2_52_2_1_17_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basesubgroup_local_idworkgroup_base.z;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.x = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 GLF_merged3_0_2_52_2_1_17_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basesubgroup_local_idworkgroup_base.w = workgroup_base;
 GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.z = GLF_merged3_0_2_52_2_1_17_3_1_14GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basesubgroup_local_idworkgroup_base.w;
 GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basesubgroup_size.xy.y = GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.z;
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basesubgroup_size.xy.y + subgroup_id * GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basesubgroup_size.xy.x + GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y, 1, _GLF_struct_1(_GLF_struct_0(uvec3(1u), 1u, uvec2(1u), true, bvec4(true), uvec4(1u), ivec4(1))), vec3(1.0));
 uint next_virtual_gid = GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basesubgroup_size.xy.y + subgroup_id * GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basesubgroup_size.xy.x + ((GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + 1) % GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basesubgroup_size.xy.x);
 atomicStore(buf[_GLF_struct_replacement_2.virtual_gid], uint(1), 4, 64, 4);
 if(GLF_merged3_0_1_13_1_1_17_2_1_14num_workgroupsubgroup_local_idworkgroup_base.y + 1 < GLF_merged2_0_2_52_2_1_13GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_basesubgroup_size.xy.x)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   int i = 0;
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
