#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id;
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidnum_workgroupworkgroup_baseworkgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), min(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) + 0)))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, 0 | (3))), _GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(46812))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))), true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false))))), false), false, true)))))))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 uvec2 GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), (injectionSwitch.x < injectionSwitch.y)) ? 0 : _GLF_FUZZED(_GLF_IDENTITY(-20622, ~ (~ (_GLF_IDENTITY(-20622, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(-20622, (-20622) ^ 0)), (false ? _GLF_FUZZED(69326) : ~ (_GLF_IDENTITY(-20622, (-20622) ^ 0)))), min(~ (_GLF_IDENTITY(-20622, (-20622) ^ 0)), ~ (_GLF_IDENTITY(-20622, (-20622) ^ 0)))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), bool(bool(! (_GLF_IDENTITY(true, (true) && true))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), ! (! (! (_GLF_IDENTITY(true, (true) && true)))))) || false))), false, true, true)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), ! (! (_GLF_IDENTITY(true, (true) && true)))), false, true, true))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x = subgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y = subgroup_size;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
  }
 else
  {
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(90.16)), float(injectionSwitch.y), bool(true)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec3(injectionSwitch.x, sin(0.0), 0.0)), (float(vec3(injectionSwitch.x, sin(0.0), 0.0))) - 0.0)) > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(clamp(vec2(-686.069, 854.784), vec2(-251.572, 3.8), injectionSwitch)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), min(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(clamp(vec2(-686.069, 854.784), vec2(-251.572, 3.8), injectionSwitch)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), vec2(1.0, 1.0) * (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(clamp(vec2(-686.069, 854.784), vec2(-251.572, 3.8), injectionSwitch)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(clamp(vec2(-686.069, 854.784), vec2(-251.572, 3.8), injectionSwitch)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))).y)), (((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec3(injectionSwitch.x, sin(0.0), 0.0)), (float(vec3(injectionSwitch.x, sin(0.0), 0.0))) - 0.0)) > _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(clamp(vec2(-686.069, 854.784), vec2(-251.572, 3.8), injectionSwitch)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y))) || false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(float(injectionSwitch.y), (true ? float(injectionSwitch.y) : _GLF_FUZZED(-10.18)))))))))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 0.0, tan(0.0), 0.0, 0.0)), (true ? vec2(mat2x3(injectionSwitch, 0.0, tan(0.0), 0.0, 0.0)) : _GLF_FUZZED(injectionSwitch)))).x, (injectionSwitch.x) - 0.0) > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), false || ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) / vec2(1.0, 1.0)).y))))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), false, false)))), bool(bvec4(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), false, false)))), false, true, true))))))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false))) && true))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(57117) : _GLF_IDENTITY(int(1), min(int(1), int(1))))), _GLF_IDENTITY(int(1), (int(_GLF_IDENTITY(1, (1) * (1 & 1)))) - 0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), clamp(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), _GLF_IDENTITY(int(1), int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 ^ _GLF_IDENTITY((0), max(_GLF_IDENTITY((0), 0 ^ ((0))), (0))))) << 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))) || false), false, false))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false))), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-0.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-9985.0017)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))).y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) / exp(vec2(0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0))))))).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-0.9))), injectionSwitch.y)))))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))), true && ((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) / exp(vec2(0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0))))))).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-0.9))), injectionSwitch.y)))))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))), bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-7.3), _GLF_FUZZED(-8.1)), bvec2(false, false))), (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(0.0, 0.0)) : _GLF_FUZZED(sinh(72.16)))))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0))) / exp(vec2(0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-0.9))), injectionSwitch.y)))))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))), true, _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, ! (! (true)))))), bvec3(bvec4(bvec3((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) / exp(vec2(0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-0.9))), injectionSwitch.y)))))), true && (_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))), true, true), false))))) && true)))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-458.300) : _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))) * 1.0))))), bool(bvec3(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true))))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
      }
     else
      {
      }
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1))))), ! (! ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)))))))))) && true); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidnum_workgroupworkgroup_baseworkgroup_id.y = num_workgroup;
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec3(gl_WorkGroupSize))).x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(false)))), false || (bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(false)))))))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.w = workgroup_id;
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))), false))))), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(2.8)), float(injectionSwitch.y), bool(true)))), true, false))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(2.8)), float(injectionSwitch.y), bool(true)))), true, false)))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(2.8)), float(injectionSwitch.y), bool(true)))), true, false)))))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec3(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(2.8)), float(injectionSwitch.y), bool(true)))), true, false)))))), false))))))), false)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))));
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidnum_workgroupworkgroup_baseworkgroup_id.w = GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.w;
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   do
    {
     GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y = GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidnum_workgroupworkgroup_baseworkgroup_id.w;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  barrier();
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (14187 & 0) | (3))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uint workgroup_base = workgroup_size * GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
  }
 else
  {
   do
    {
     GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.z = workgroup_base;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidnum_workgroupworkgroup_baseworkgroup_id.z = GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.z;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_IDENTITY(bool(bvec3((false) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bvec2(bool(bvec3((false) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true)))))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(895.937), _GLF_FUZZED(366.998)), vec2(_GLF_IDENTITY((injectionSwitch)[0], float(vec2((injectionSwitch)[0], 1.0))), (injectionSwitch)[1]), bvec2(true, true))), sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), mix(vec2((vec2(mat2x3(injectionSwitch, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)))[0], (vec2(mat2x3(injectionSwitch, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)))[1]), vec2(_GLF_FUZZED(3.9), _GLF_FUZZED(float(-55613))), bvec2(false, false)))).x > injectionSwitch.y, false, true, false)), ! _GLF_IDENTITY((! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(true, true && (true)), false)))), ! (! ((! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(true, true && (true)), false)))))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), mix(vec2((vec2(mat2x3(injectionSwitch, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)))[0], (vec2(mat2x3(injectionSwitch, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)))[1]), vec2(_GLF_FUZZED(3.9), _GLF_FUZZED(float(-55613))), bvec2(false, false)))).x > injectionSwitch.y, false, true, false)), ! _GLF_IDENTITY((! (_GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(true, true && (true)), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(true, true && (true)), false)), ! (! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(true, true && (true)), false))))))))), ! (! ((! (bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y, _GLF_IDENTITY(false, bool(bvec2(false, true))), _GLF_IDENTITY(true, true && (true)), false)))))))))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), min(vec2(mat2x3(injectionSwitch, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), vec2(mat2x3(injectionSwitch, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)))), mix(vec2((vec2(mat2x3(injectionSwitch, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((-3618.4788 + -6.5))), bool(false))))))[0], (vec2(mat2x3(injectionSwitch, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)))[1]), vec2(_GLF_FUZZED(3.9), _GLF_FUZZED(float(-55613))), bvec2(false, false)))).x > injectionSwitch.y, false, true, false)), ! _GLF_IDENTITY(_GLF_IDENTITY((! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(true, true && (true)), false)))), ! (! ((! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(true, true && (true)), false))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(true, true && (true)), false)))), ! (! ((! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(true, true && (true)), false))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY((! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(true, true && (true)), false)))), ! (! ((! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(true, true && (true)), false))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY((! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(true, true && (true)), false)))), ! (! ((! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(true, true && (true)), false))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), true))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(true, true && (true)), false)))), ! (! ((! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(true, true && (true)), false))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY((! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(true, true && (true)), false)))), ! (! ((! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(true, true && (true)), false))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY((! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(true, true && (true)), false)))), ! (! ((! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(true, true && (true)), false))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), true))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))))))))))));
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, false))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, false))))), ! (! (bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)))))))), ! (! (bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, false, false), bvec3(bvec3(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, false, false))))))))))))))))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false))), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))), false))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(18510) : _GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter --)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
      }
     else
      {
      }
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
          {
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) || false), (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                barrier();
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     do
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                  }
                 for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, max(0.0, 0.0)))), injectionSwitch.x)), min(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
                      {
                       for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((1 | 1) | 1), (((1 | 1) | 1)) << 0)); _injected_loop_counter ++)
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                          }
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidnum_workgroupworkgroup_baseworkgroup_id.z;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).y), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).y), false))), true)))))))))), false, false)))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, 0 ^ (0))), _GLF_IDENTITY((~ (_GLF_IDENTITY(0, 0 ^ (0)))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(0, 0 ^ (0)))), max((~ (_GLF_IDENTITY(0, 0 ^ (0)))), (~ (_GLF_IDENTITY(0, 0 ^ (0))))))) >> 0) | (~ (_GLF_IDENTITY(0, 0 ^ (0)))))))))); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), false, true))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           else
            {
            }
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false || (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(626.866)), bool(false)))) - 0.0) > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).y), (false || (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), (vec4(injectionSwitch, 0.0, 1.0)) * vec4(1.0, 1.0, 1.0, 1.0)))), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), (vec4(injectionSwitch, 0.0, 1.0)) * vec4(1.0, 1.0, 1.0, 1.0))))) - vec2(0.0, 0.0)).x, max(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6.8)), float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x), bool(true))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) / sqrt(1.0)), max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)))))), clamp(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), (vec4(injectionSwitch, 0.0, 1.0)) * vec4(1.0, 1.0, 1.0, 1.0)))), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), (vec4(injectionSwitch, 0.0, 1.0)) * vec4(1.0, 1.0, 1.0, 1.0))))) - vec2(0.0, 0.0)).x, max(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6.8)), float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x), bool(true))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) / sqrt(1.0)), max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)))))), mix(float(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), (vec4(injectionSwitch, 0.0, 1.0)) * vec4(1.0, 1.0, 1.0, 1.0)))), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), (vec4(injectionSwitch, 0.0, 1.0)) * vec4(1.0, 1.0, 1.0, 1.0))))) - vec2(0.0, 0.0)).x, max(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6.8)), float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x), bool(true))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) / sqrt(1.0)), max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)))))), max(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), (vec4(injectionSwitch, 0.0, 1.0)) * vec4(1.0, 1.0, 1.0, 1.0)))), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), (vec4(injectionSwitch, 0.0, 1.0)) * vec4(1.0, 1.0, 1.0, 1.0))))) - vec2(0.0, 0.0)).x, max(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6.8)), float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x), bool(true))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) / sqrt(1.0)), max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)))))), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), (vec4(injectionSwitch, 0.0, 1.0)) * vec4(1.0, 1.0, 1.0, 1.0)))), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), (vec4(injectionSwitch, 0.0, 1.0)) * vec4(1.0, 1.0, 1.0, 1.0))))) - vec2(0.0, 0.0)).x, max(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6.8)), float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x), bool(true))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) / sqrt(1.0)), max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0))))))))), float(_GLF_FUZZED(-1.8)), bool(false))), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), (vec4(injectionSwitch, 0.0, 1.0)) * vec4(1.0, 1.0, 1.0, 1.0)))), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), (vec4(injectionSwitch, 0.0, 1.0)) * vec4(1.0, 1.0, 1.0, 1.0))))) - vec2(0.0, 0.0)).x, max(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6.8)), float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x), bool(true))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) / sqrt(1.0)), max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)))))), _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), (vec4(injectionSwitch, 0.0, 1.0)) * vec4(1.0, 1.0, 1.0, 1.0)))), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), (vec4(injectionSwitch, 0.0, 1.0)) * vec4(1.0, 1.0, 1.0, 1.0))))) - vec2(0.0, 0.0)).x, max(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6.8)), float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x), bool(true))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) / sqrt(1.0)), max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)))))), (float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), (vec4(injectionSwitch, 0.0, 1.0)) * vec4(1.0, 1.0, 1.0, 1.0)))), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), (vec4(injectionSwitch, 0.0, 1.0)) * vec4(1.0, 1.0, 1.0, 1.0))))) - vec2(0.0, 0.0)).x, max(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6.8)), float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x), bool(true))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) / sqrt(1.0)), max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0))))))) / 1.0))), float(_GLF_FUZZED(626.866)), bool(false)))) - 0.0) > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x, max(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x, _GLF_IDENTITY(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id, uvec2(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id[0], GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id[1])).x)), max(_GLF_IDENTITY(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x, max(_GLF_IDENTITY(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x, (GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x) | (_GLF_IDENTITY(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x, clamp(GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x, GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x, GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x)))), GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x)), GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x)) + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, uvec4(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(8.0), _GLF_FUZZED(float(true))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x), _GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, (true ? GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id : _GLF_FUZZED(uvec4(subgroup_local_id, subgroup_size, uvec2(20880u, 35205u))))))), min(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, uvec4(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(8.0), _GLF_FUZZED(float(true))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x), _GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, (true ? GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id : _GLF_FUZZED(uvec4(subgroup_local_id, subgroup_size, uvec2(20880u, 35205u))))))), _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, uvec4(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(8.0), _GLF_FUZZED(float(true))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x), _GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, (true ? GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id : _GLF_FUZZED(uvec4(subgroup_local_id, subgroup_size, uvec2(20880u, 35205u))))))))).x * _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y, 0u | (GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y)) + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), (injectionSwitch.x > injectionSwitch.y)))) && true))
                  barrier();
                 barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
  }
 uint next_virtual_gid = GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x + _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x * _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y, (GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y) >> 0u), _GLF_IDENTITY((GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x * GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y), clamp((_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x * GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y, (GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x * GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y) >> 0u)), _GLF_IDENTITY((GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x * _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, uvec4(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id[0], GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id[1], GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id[2], GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id[3]))) << (uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(4u), uvec4(4u)))).y), ((GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x * GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y)) / 1u), _GLF_IDENTITY((GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x * GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y), ((_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, uvec4(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id[0], GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id[1], GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id[2], GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id[3])).x * _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y, (GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y) >> 0u), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y, 0u | (GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y)), 0u + (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 0u))), 1u), (uvec2(_GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 0u))), 1u)) | uvec2(0u, 0u))))) | (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))) << 0u))) | (GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y)))))))))) | ((GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x * GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y))))) | (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x * GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y, (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x * GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y, min(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x, 0u | (GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x)) * GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.x * GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y))) << 0u))) + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / 1u)) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), true && (bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))) ? _GLF_FUZZED(60507u) : (subgroup_local_id + 1))), clamp(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, 0u + (subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1)))))), 0u | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, 0u + (subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1)))))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, 0u + (subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1)))))), ((_GLF_IDENTITY(subgroup_local_id + 1, 0u + (subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1))))))) << 0u)) << 0u)))) >> 0u), (subgroup_local_id + 1), (subgroup_local_id + 1)))), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(60507u) : (subgroup_local_id + 1))), clamp(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u), (subgroup_local_id + 1), (subgroup_local_id + 1))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(60507u) : (subgroup_local_id + 1))), clamp(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u), (subgroup_local_id + 1), (subgroup_local_id + 1)))))))), (_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(60507u) : (subgroup_local_id + 1))), clamp(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u), (subgroup_local_id + 1), (subgroup_local_id + 1))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(60507u) : (subgroup_local_id + 1))), clamp(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u), (subgroup_local_id + 1), (subgroup_local_id + 1)))))))), (((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(60507u) : (subgroup_local_id + 1))), clamp(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u), (subgroup_local_id + 1), (subgroup_local_id + 1))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(60507u) : (subgroup_local_id + 1))), clamp(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u), (subgroup_local_id + 1), (subgroup_local_id + 1))))))))) ^ (0u | 0u))) | (((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(60507u) : (subgroup_local_id + 1))), clamp(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u), (subgroup_local_id + 1), (subgroup_local_id + 1))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (false ? _GLF_FUZZED(60507u) : (subgroup_local_id + 1))), clamp(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u), (subgroup_local_id + 1), (subgroup_local_id + 1)))))))))) * ((1u << _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u))))) >> _GLF_IDENTITY(uint(1u), uint(1u))))), (false ? _GLF_FUZZED((false ? subgroup_id : subgroup_size)) : _GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, (0u ^ 0u) ^ (subgroup_local_id + 1)))))) / 1u, (((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u))) / 1u) | (((subgroup_local_id + 1)) / 1u)))) | ((subgroup_local_id + 1))))), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) / 1u)) | (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), clamp(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u), (subgroup_local_id + 1), (subgroup_local_id + 1))), min(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), clamp(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u), _GLF_IDENTITY((subgroup_local_id + 1), (true ? (subgroup_local_id + 1) : _GLF_FUZZED(subgroup_id))), (subgroup_local_id + 1))), clamp(_GLF_IDENTITY((subgroup_local_id + 1), clamp(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u), (subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), (int(1)) - 0)))), (subgroup_local_id + 1))), _GLF_IDENTITY((subgroup_local_id + 1), clamp(_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(((subgroup_local_id + 1)) >> 0u, (_GLF_IDENTITY(((subgroup_local_id + 1)) >> 0u, 0u | (((subgroup_local_id + 1)) >> 0u))) << (0u | 0u))), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))), (subgroup_local_id + 1))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec2(subgroup_local_id + 1, 1u)))), clamp(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u), (subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1)))), (subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), (_GLF_IDENTITY(int(int(1)), min(int(int(1)), int(int(1))))) >> (0 ^ 0)))))))), _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), clamp(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u), (subgroup_local_id + 1), (subgroup_local_id + 1))), (_GLF_IDENTITY((subgroup_local_id + 1), clamp(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u), (subgroup_local_id + 1), (subgroup_local_id + 1)))) * 1u))))), (false ? _GLF_FUZZED((false ? subgroup_id : subgroup_size)) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | 0u)), (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1)) / 1u, (((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u))) / 1u) | (((subgroup_local_id + 1)) / 1u)), (_GLF_IDENTITY(((subgroup_local_id + 1)) / 1u, (((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u))) / 1u) | (((subgroup_local_id + 1)) / 1u))) | (_GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1)) / 1u, (((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u))) / 1u) | (((subgroup_local_id + 1)) / 1u)), (_GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1)) / 1u, (((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u))) / 1u) | (((subgroup_local_id + 1)) / 1u)), (_GLF_IDENTITY(((subgroup_local_id + 1)) / 1u, (((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u))) / 1u) | (((subgroup_local_id + 1)) / 1u))) ^ 0u)) << 0u))))) | ((subgroup_local_id + 1)))))) / 1u) % _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y, clamp(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y, 0u | (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y, min(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y)))), _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id, uvec4(GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id[0], GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id[1], GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id[2], GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id[3])).y, GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y)));
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidnum_workgroupworkgroup_baseworkgroup_id.x = next_virtual_gid;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))) - vec2(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(1.4)), bool(false))))).y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 atomicStore(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) / uint(_GLF_ONE(1.0, injectionSwitch.y)))], uint(1), 4, 64, 4);
 if(subgroup_local_id + 1 < GLF_merged4_0_1_11_1_1_13_2_1_14_3_1_12subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.y)
  {
   int i = 0;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, false, false))), (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(_GLF_IDENTITY(2737.1867, max(2737.1867, 2737.1867))))), _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(0.7))), injectionSwitch.x)))) < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) + sqrt(0.0), clamp((_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) + sqrt(0.0), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) + sqrt(0.0), mix(float(_GLF_FUZZED(-39.40)), float((_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) + sqrt(0.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) + sqrt(0.0)))), _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) + sqrt(0.0), clamp((_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) + sqrt(0.0), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) + sqrt(0.0), mix(float(_GLF_FUZZED(-39.40)), float((_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) + sqrt(0.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) + sqrt(0.0)))), 0.0, 1.0, 1.0, 1.0, 0.0, cos(log(1.0)), sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(float(vec2(float(mat3(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) + sqrt(0.0), clamp((_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) + sqrt(0.0), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) + sqrt(0.0), mix(float(_GLF_FUZZED(-39.40)), float((_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) + sqrt(0.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) + sqrt(0.0)))), 0.0, 1.0, 1.0, 1.0, 0.0, cos(log(1.0)), sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_ZERO(0.0, injectionSwitch.x))), mix(float(float(vec2(float(mat3(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) + sqrt(0.0), clamp((_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) + sqrt(0.0), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) + sqrt(0.0), mix(float(_GLF_FUZZED(-39.40)), float((_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) + sqrt(0.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) + sqrt(0.0)))), 0.0, 1.0, 1.0, 1.0, 0.0, cos(log(1.0)), sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_ZERO(0.0, injectionSwitch.x)))), float(_GLF_FUZZED(61.43)), bool(false))))))), false))), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - length(sin(vec4(0.0, 0.0, 0.0, 0.0)))))), bool(bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 1.0, 0.0))), max(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(2737.1867))), _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))), mix(float(_GLF_IDENTITY(_GLF_FUZZED(-1.8), clamp(_GLF_FUZZED(-1.8), _GLF_IDENTITY(_GLF_FUZZED(-1.8), max(_GLF_FUZZED(-1.8), _GLF_FUZZED(-1.8))), _GLF_IDENTITY(_GLF_FUZZED(-1.8), 0.0 + (_GLF_FUZZED(-1.8)))))), float(_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, min(1.0, 1.0)) : _GLF_FUZZED(797.943))), _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), sin(0.0))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0), (mat4(0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(sin(0.0), min(sin(0.0), sin(0.0))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), bool(true))), injectionSwitch.x, injectionSwitch.x)))) < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), mix(float(_GLF_FUZZED(1.0)), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))).y))), bool(true)))) + sqrt(0.0)))), false))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool((false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(bool((false)), false, false, true)), (bool(bvec4(bool((false)), false, false, true))) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(bool((false)), false, false, true)), (bool(bvec4(bool((false)), false, false, true))) && true)), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(bool((false)), false, false, true)), (bool(bvec4(bool((false)), false, false, true))) && true)), false || (! (_GLF_IDENTITY(bool(bvec4(bool((false)), false, false, true)), (bool(bvec4(bool((false)), false, false, true))) && true))))))))))))) && _GLF_IDENTITY(true, ! (! (true)))) || false)))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               else
                {
                }
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, ~ (_GLF_IDENTITY(~ (2), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (2)))))))) | 0, ((1 << _GLF_IDENTITY(int(2), int(2))) | 0) | ((1 << _GLF_IDENTITY(int(2), int(2))) | 0)))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, 0 + (_GLF_IDENTITY(2, (2) + 0)))), _GLF_IDENTITY(int(2), (int(2)) | 0)))); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY(max(int(1), _GLF_IDENTITY(int(1), (int(1)) << 0)), max(max(int(1), int(1)), max(int(1), int(1))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, 0 | (1))); _injected_loop_counter ++)
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
          barrier();
        }
       else
        {
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(int(_injected_loop_counter))) != (0 ^ 0)); _injected_loop_counter --)
          {
           do
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, false, true)))))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
    }
   else
    {
    }
   atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidnum_workgroupworkgroup_baseworkgroup_id.x], uint(_GLF_IDENTITY(2, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(2, int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(2, max(2, 2)), 1), (ivec2(_GLF_IDENTITY(2, max(2, 2)), 1)) * ivec2(1, 1)))), (_GLF_IDENTITY(2, ~ (~ (2)))) ^ _GLF_IDENTITY(_GLF_IDENTITY((0 ^ 0), _GLF_IDENTITY(((0 ^ _GLF_IDENTITY(0, (0) << 0))) / 1, (((0 ^ 0)) / 1) ^ 0)), int(ivec3((_GLF_IDENTITY(0, 0 | (0)) ^ 0), 0, 1))))), (~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) ^ _GLF_IDENTITY((0 ^ 0), int(_GLF_IDENTITY(ivec3((0 ^ 0), 0, 1), (ivec3((0 ^ 0), 0, 1)) | ivec3(0, 0, 0))))))) | (~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ _GLF_IDENTITY((2), max((2), (2)))))) ^ _GLF_IDENTITY((0 ^ 0), int(ivec3((0 ^ 0), 0, 1))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) ^ (0 ^ 0))), int(_GLF_IDENTITY(int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) ^ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) - (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0)) ^ 0)))), max(int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(2, 0 | (_GLF_IDENTITY(2, (2) | (2)))), ~ (~ (2)))) ^ (0 ^ _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), (_GLF_IDENTITY(0, max(0, 0))) | (_GLF_IDENTITY(0, max(0, 0)))))))), _GLF_IDENTITY(int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ _GLF_IDENTITY((~ (2)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(i) : _GLF_IDENTITY((~ (2)), clamp((~ (2)), (~ (2)), _GLF_IDENTITY((~ _GLF_IDENTITY((2), ((2)) - 0)), (false ? _GLF_FUZZED(_GLF_IDENTITY(i, (i) - 0)) : (~ (2)))))))))) ^ _GLF_IDENTITY((0 ^ 0), clamp((0 ^ 0), _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) >> 0), (0 ^ 0)))))), (int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ _GLF_IDENTITY((~ (2)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(i) : _GLF_IDENTITY((~ (2)), clamp((~ (2)), (~ (2)), _GLF_IDENTITY((~ (2)), (false ? _GLF_FUZZED(i) : (~ (2)))))))))) ^ _GLF_IDENTITY((0 ^ 0), clamp((0 ^ 0), _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) >> 0), (0 ^ 0))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))))), min(~ (_GLF_IDENTITY(2, _GLF_IDENTITY((_GLF_IDENTITY(2, ~ (~ (2)))) ^ (0 ^ 0), clamp((_GLF_IDENTITY(2, ~ (~ (2)))) ^ (0 ^ 0), _GLF_IDENTITY((_GLF_IDENTITY(2, ~ (~ (2)))) ^ (0 ^ 0), min((_GLF_IDENTITY(2, ~ (~ (2)))) ^ (0 ^ 0), (_GLF_IDENTITY(2, ~ (~ (2)))) ^ (0 ^ 0))), _GLF_IDENTITY((_GLF_IDENTITY(2, ~ (~ (2)))) ^ (0 ^ 0), (false ? _GLF_FUZZED(i) : (_GLF_IDENTITY(2, ~ (~ (2)))) ^ (0 ^ 0))))))), ~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (_GLF_IDENTITY(~ (2), ~ (~ (~ _GLF_IDENTITY((2), (_GLF_IDENTITY((2), ((2)) | ((2)))) ^ 0))))))) ^ (0 ^ 0))))), (false ? _GLF_FUZZED(i) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ _GLF_IDENTITY((~ (2)), int(_GLF_ZERO(0.0, injectionSwitch.x)) | ((~ (2)))))) ^ (_GLF_IDENTITY(0 ^ 0, 0 | (_GLF_IDENTITY(0 ^ 0, (0 ^ 0) | (0 ^ 0))))))), int(_GLF_IDENTITY(int(~ (_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) ^ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) - (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0)) ^ 0)), int(ivec2(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) ^ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) - (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0)) ^ 0)), 0))))), max(int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(2, 0 | (_GLF_IDENTITY(2, (2) | (2)))), ~ (~ (2)))) ^ (0 ^ _GLF_IDENTITY(0, max(0, 0)))))), _GLF_IDENTITY(int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ _GLF_IDENTITY((~ (2)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true) ? _GLF_FUZZED(i) : _GLF_IDENTITY((~ (2)), clamp((~ (2)), (~ (2)), _GLF_IDENTITY((~ _GLF_IDENTITY((2), ~ (_GLF_IDENTITY(~ ((2)), (_GLF_IDENTITY(~ ((2)), (false ? _GLF_FUZZED(i) : ~ ((2))))) ^ 0)))), (false ? _GLF_IDENTITY(_GLF_FUZZED(i), max(_GLF_FUZZED(i), _GLF_FUZZED(i))) : (~ (2)))))))))) ^ _GLF_IDENTITY((0 ^ 0), clamp((0 ^ 0), _GLF_IDENTITY((_GLF_IDENTITY(0, 0 ^ (0)) ^ 0), ((0 ^ 0)) >> 0), (0 ^ 0)))))), (int(~ (_GLF_IDENTITY(2, _GLF_IDENTITY((_GLF_IDENTITY(2, ~ _GLF_IDENTITY((~ (2)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(i) : _GLF_IDENTITY((~ (2)), clamp((~ (2)), (~ (2)), _GLF_IDENTITY((~ (2)), (false ? _GLF_FUZZED(i) : (~ (2)))))))))) ^ _GLF_IDENTITY((0 ^ 0), clamp((0 ^ 0), _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) >> 0), (0 ^ 0))), ((_GLF_IDENTITY(2, ~ _GLF_IDENTITY((~ (2)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(i) : _GLF_IDENTITY((~ (2)), _GLF_IDENTITY(clamp((~ (2)), (~ (2)), _GLF_IDENTITY((~ (2)), (false ? _GLF_FUZZED(i) : (~ (2))))), 1 * (clamp((~ (2)), (~ (2)), _GLF_IDENTITY((~ (2)), (false ? _GLF_FUZZED(i) : (~ (2)))))))))))) ^ _GLF_IDENTITY((0 ^ 0), clamp((0 ^ 0), _GLF_IDENTITY((_GLF_IDENTITY(0 ^ 0, clamp(0 ^ 0, 0 ^ 0, _GLF_IDENTITY(0 ^ 0, (0 ^ 0) - 0)))), ((0 ^ 0)) >> 0), (0 ^ 0)))) / (1 | 0)))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))))), min(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) ^ (0 ^ 0))), ~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) ^ (0 ^ 0))))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) ^ (0 ^ 0))), int(_GLF_IDENTITY(int(~ (_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, max(2, 2))) | 0), (_GLF_IDENTITY(2, ~ (~ (2)))) ^ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) - (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0)) ^ 0)))), max(int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(2, 0 | (_GLF_IDENTITY(2, (2) | (2)))), ~ (~ (2)))) ^ (0 ^ _GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), min(_GLF_IDENTITY(max(0, 0), clamp(max(0, 0), max(0, 0), _GLF_IDENTITY(max(0, 0), (max(0, 0)) | 0))), max(0, 0)))))))), _GLF_IDENTITY(int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ _GLF_IDENTITY((~ (2)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) ? _GLF_FUZZED(i) : _GLF_IDENTITY((~ (2)), clamp((~ (2)), (~ (2)), _GLF_IDENTITY((~ (2)), (false ? _GLF_FUZZED(i) : (~ (2)))))))))) ^ _GLF_IDENTITY(_GLF_IDENTITY((0 ^ 0), min((0 ^ 0), (0 ^ 0))), clamp((0 ^ 0), _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) >> 0), (0 ^ 0)))))), (int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ _GLF_IDENTITY((~ (2)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(i) : _GLF_IDENTITY((~ (2)), clamp((~ (2)), (~ (2)), _GLF_IDENTITY((~ (2)), (false ? _GLF_FUZZED(i) : (~ (2)))))))))) ^ _GLF_IDENTITY((0 ^ _GLF_IDENTITY(0, clamp(0, 0, 0))), clamp((0 ^ 0), _GLF_IDENTITY((0 ^ _GLF_IDENTITY(0, (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 1 * (int(8))))) ^ (0))), ((0 ^ 0)) >> 0), (0 ^ 0))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))))), min(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) ^ (0 ^ 0))), ~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) ^ (0 ^ 0)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) ^ (_GLF_IDENTITY(0 ^ 0, (_GLF_IDENTITY(0 ^ 0, min(0 ^ 0, 0 ^ 0))) / 1)))), int(_GLF_IDENTITY(_GLF_IDENTITY(int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) ^ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) - (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0)) ^ 0)))), max(int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(2, 0 | (_GLF_IDENTITY(2, (2) | (2)))), ~ (~ (2)))) ^ (0 ^ _GLF_IDENTITY(0, max(0, 0)))))), _GLF_IDENTITY(int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ _GLF_IDENTITY((~ (2)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(i) : _GLF_IDENTITY((~ (2)), clamp((~ (2)), (~ (2)), _GLF_IDENTITY((~ (2)), (false ? _GLF_FUZZED(i) : (~ (2)))))))))) ^ _GLF_IDENTITY((0 ^ 0), clamp((0 ^ 0), _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) >> 0), (0 ^ 0)))))), (int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ _GLF_IDENTITY((~ (2)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(i) : _GLF_IDENTITY((~ (2)), clamp((~ (2)), (~ (2)), _GLF_IDENTITY((~ (2)), (false ? _GLF_FUZZED(i) : (~ (2)))))))))) ^ _GLF_IDENTITY((0 ^ 0), clamp((0 ^ 0), _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) >> 0), (0 ^ 0))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) ^ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) - (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0)) ^ 0)))), max(int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(2, 0 | (_GLF_IDENTITY(2, (2) | (2)))), ~ (~ (2)))) ^ (0 ^ _GLF_IDENTITY(0, max(0, 0)))))), _GLF_IDENTITY(int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ _GLF_IDENTITY((~ (2)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(i) : _GLF_IDENTITY((~ (2)), clamp((~ (2)), (~ (2)), _GLF_IDENTITY((~ (2)), (false ? _GLF_FUZZED(i) : (~ (2)))))))))) ^ _GLF_IDENTITY((0 ^ 0), clamp((0 ^ 0), _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) >> 0), (0 ^ 0)))))), (int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ _GLF_IDENTITY((~ (2)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(i) : _GLF_IDENTITY((~ (2)), clamp((~ (2)), (~ (2)), _GLF_IDENTITY((~ (2)), (false ? _GLF_FUZZED(i) : (~ (2)))))))))) ^ _GLF_IDENTITY((0 ^ 0), clamp((0 ^ 0), _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) >> 0), (0 ^ 0))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) ^ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) - (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0)) ^ 0)))), max(int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(2, 0 | (_GLF_IDENTITY(2, (2) | (2)))), ~ (~ (2)))) ^ (0 ^ _GLF_IDENTITY(0, max(0, 0)))))), _GLF_IDENTITY(int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ _GLF_IDENTITY((~ (2)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(i) : _GLF_IDENTITY((~ (2)), clamp((~ (2)), (~ (2)), _GLF_IDENTITY((~ (2)), (false ? _GLF_FUZZED(i) : (~ (2)))))))))) ^ _GLF_IDENTITY((0 ^ 0), clamp((0 ^ 0), _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) >> 0), (0 ^ 0)))))), (int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ _GLF_IDENTITY((~ (2)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(i) : _GLF_IDENTITY((~ (2)), clamp((~ (2)), (~ (2)), _GLF_IDENTITY((~ (2)), (false ? _GLF_FUZZED(i) : (~ (2)))))))))) ^ _GLF_IDENTITY((0 ^ 0), clamp((0 ^ 0), _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) >> 0), (0 ^ 0))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))))) << 0), 1), (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) ^ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) - (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0)) ^ 0)))), max(int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(2, 0 | (_GLF_IDENTITY(2, (2) | (2)))), ~ (~ (2)))) ^ (0 ^ _GLF_IDENTITY(0, max(0, 0)))))), _GLF_IDENTITY(int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ _GLF_IDENTITY((~ (2)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(i) : _GLF_IDENTITY((~ (2)), clamp((~ (2)), (~ (2)), _GLF_IDENTITY((~ (2)), (false ? _GLF_FUZZED(i) : (~ (2)))))))))) ^ _GLF_IDENTITY((0 ^ 0), clamp((0 ^ 0), _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) >> 0), (0 ^ 0)))))), (int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ _GLF_IDENTITY((~ (2)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(i) : _GLF_IDENTITY((~ (2)), clamp((~ (2)), (~ (2)), _GLF_IDENTITY((~ (2)), (false ? _GLF_FUZZED(i) : (~ (2)))))))))) ^ _GLF_IDENTITY((0 ^ 0), clamp((0 ^ 0), _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) >> 0), (0 ^ 0))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) ^ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) - (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0)) ^ 0)))), max(int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(2, 0 | (_GLF_IDENTITY(2, (2) | (2)))), ~ (~ (2)))) ^ (0 ^ _GLF_IDENTITY(0, max(0, 0)))))), _GLF_IDENTITY(int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ _GLF_IDENTITY((~ (2)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(i) : _GLF_IDENTITY((~ (2)), clamp((~ (2)), (~ (2)), _GLF_IDENTITY((~ (2)), (false ? _GLF_FUZZED(i) : (~ (2)))))))))) ^ _GLF_IDENTITY((0 ^ 0), clamp((0 ^ 0), _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) >> 0), (0 ^ 0)))))), (int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ _GLF_IDENTITY((~ (2)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(i) : _GLF_IDENTITY((~ (2)), clamp((~ (2)), (~ (2)), _GLF_IDENTITY((~ (2)), (false ? _GLF_FUZZED(i) : (~ (2)))))))))) ^ _GLF_IDENTITY((0 ^ 0), clamp((0 ^ 0), _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) >> 0), (0 ^ 0))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))))) << 0), 1)) | (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) ^ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) - (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0)) ^ 0)))), max(int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(2, 0 | (_GLF_IDENTITY(2, (2) | (2)))), ~ (~ (2)))) ^ (0 ^ _GLF_IDENTITY(0, max(0, 0)))))), _GLF_IDENTITY(int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ _GLF_IDENTITY((~ (2)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(i) : _GLF_IDENTITY((~ (2)), clamp((~ (2)), (~ (2)), _GLF_IDENTITY((~ (2)), (false ? _GLF_FUZZED(i) : (~ (2)))))))))) ^ _GLF_IDENTITY((0 ^ 0), clamp((0 ^ 0), _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) >> 0), (0 ^ 0)))))), (int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ _GLF_IDENTITY((~ (2)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(i) : _GLF_IDENTITY((~ (2)), clamp((~ (2)), (~ (2)), _GLF_IDENTITY((~ (2)), (false ? _GLF_FUZZED(i) : (~ (2)))))))))) ^ _GLF_IDENTITY((0 ^ 0), clamp((0 ^ 0), _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) >> 0), (0 ^ 0))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) ^ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) - (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0)) ^ 0)))), max(int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(2, 0 | (_GLF_IDENTITY(2, (2) | (2)))), ~ (~ (2)))) ^ (0 ^ _GLF_IDENTITY(0, max(0, 0)))))), _GLF_IDENTITY(int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ _GLF_IDENTITY((~ (2)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(i) : _GLF_IDENTITY((~ (2)), clamp((~ (2)), (~ (2)), _GLF_IDENTITY((~ (2)), (false ? _GLF_FUZZED(i) : (~ (2)))))))))) ^ _GLF_IDENTITY((0 ^ 0), clamp((0 ^ 0), _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) >> 0), (0 ^ 0)))))), (int(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ _GLF_IDENTITY((~ (2)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(i) : _GLF_IDENTITY((~ (2)), clamp((~ (2)), (~ (2)), _GLF_IDENTITY((~ (2)), (false ? _GLF_FUZZED(i) : (~ (2)))))))))) ^ _GLF_IDENTITY((0 ^ 0), clamp((0 ^ 0), _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) >> 0), (0 ^ 0))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))))) << 0), 1))))))), min(~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) ^ (0 ^ 0))), ~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) ^ (0 ^ 0))))))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(2, (2) * 1), (_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, 0 | (2))) - _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-43866) : 0)), max(_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, int(ivec4(0, 0, 0, 1))), 0)), 0)), 0, 0)), int(_GLF_IDENTITY(int(0), ~ _GLF_IDENTITY((~ (int(0))), ((~ (int(0)))) - 0))))), _GLF_IDENTITY(~ (~ (2)), _GLF_IDENTITY(~ (~ (~ (~ (2)))), (_GLF_IDENTITY(~ (~ (~ (~ (2)))), (~ (~ (~ (_GLF_IDENTITY(~ (2), max(_GLF_IDENTITY(~ (2), (~ (2)) << 0), ~ (2))))))) * ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), ~ (~ (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), ~ (~ (1 << _GLF_IDENTITY(int(6), int(6))))))))) << 0)) >> _GLF_IDENTITY(int(6), int(6))))) << 0)))) ^ (0 ^ 0))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(-14458))), (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) - 0), ~ (~ (2)))) ^ (0 ^ 0)))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(~ ((_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) - 0), ~ (~ (2)))) ^ (0 ^ 0)))), ~ (~ (~ ((_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | (2))) - 0), ~ (~ (2)))) ^ (0 ^ 0))))))), ~ ((_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) - 0), max(_GLF_IDENTITY(2, (2) - 0), _GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) - 0)) - 0))), ~ (~ (2)))) ^ (0 ^ 0)))), ~ ((_GLF_IDENTITY(2, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, max(2, 2))) | 0), (_GLF_IDENTITY(2, int(int(2)))) - 0), ~ (~ (2)))) ^ (0 ^ 0), (0 >> _GLF_IDENTITY(int(5), int(5))) + (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) - 0), ~ (~ (2))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) - 0), ~ (~ (2))), (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) - 0), ~ (~ (2)))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) - 0), ~ (~ (2))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) - 0), ~ (~ (2)))))))) : _GLF_FUZZED(63755)))) ^ (0 ^ 0), ((_GLF_IDENTITY(_GLF_IDENTITY(2, (2) - 0), ~ (~ _GLF_IDENTITY((2), ((2)) | ((2)))))) ^ _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) | ((0 ^ 0)))) / 1))))))), (true ? clamp(_GLF_IDENTITY(~ ((_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(2, _GLF_IDENTITY((2) - 0, _GLF_IDENTITY(((2) - 0) / 1, clamp(((2) - 0) / 1, ((2) - 0) / 1, ((2) - 0) / 1)))), _GLF_IDENTITY(~ (~ (2)), min(~ (~ (_GLF_IDENTITY(2, clamp(2, 2, _GLF_IDENTITY(_GLF_IDENTITY(2, (2) / 1), int(int(_GLF_IDENTITY(2, (2) / 1)))))))), ~ (~ _GLF_IDENTITY((2), int(int((2))))))))) ^ (0 ^ 0)))), ~ (~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) << 0), (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) - 0), ~ (~ (2)))) ^ (0 ^ 0)), (false ? _GLF_FUZZED(sign(96495)) : _GLF_IDENTITY(_GLF_IDENTITY(2, (2) << 0), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(2, (2) - 0), ~ (~ (2)))) ^ (0 ^ 0), int(_GLF_ZERO(0.0, injectionSwitch.x)) | ((_GLF_IDENTITY(_GLF_IDENTITY(2, (2) - 0), ~ (~ (2)))) ^ (0 ^ _GLF_IDENTITY(0, min(0, 0))))))))))))), ~ _GLF_IDENTITY(((_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, min(2, _GLF_IDENTITY(_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, (2) + 0), _GLF_IDENTITY(2, (2) | 0), 2)), ~ (~ (2))))))), (2) - 0), ~ (~ (2))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, ~ (~ (2))))))), (2) - 0), ~ (~ (2))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, ~ (~ (2))))))), (2) - _GLF_IDENTITY(0, min(0, 0))), ~ (~ (2)))))) ^ (_GLF_IDENTITY(0 ^ 0, ~ (~ (_GLF_IDENTITY(0 ^ 0, (0 ^ 0) | (0 ^ 0))))))))), (((_GLF_IDENTITY(2, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, ~ (~ (2))))))), (2) - 0), ~ (~ _GLF_IDENTITY((2), ((2)) + 0)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, ~ (~ (2))))))), (_GLF_IDENTITY(_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, ~ (~ (2))))))), (false ? _GLF_FUZZED(i) : _GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, ~ (~ (2)))))))))) >> 0), (2) - 0), _GLF_IDENTITY(~ (~ (2)), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (~ (~ (2)))))), _GLF_IDENTITY(int(ivec4((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, clamp(2, 2, 2)), max(2, _GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, ~ (~ (2))))))), (2) - 0), ~ (_GLF_IDENTITY(~ (2), (false ? _GLF_FUZZED(51314) : ~ (2)))))), (0 >> _GLF_IDENTITY(int(4), int(4))), _GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), (false ? _GLF_FUZZED(-44506) : ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))))), ~ (~ (_GLF_IDENTITY(int(ivec4((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, _GLF_IDENTITY(~ (~ (2)), clamp(~ (~ (2)), _GLF_IDENTITY(~ (~ (2)), (~ (~ (2))) | (~ (~ (2)))), ~ (~ (2))))))))), (2) - 0), ~ (~ (2)))), (0 >> _GLF_IDENTITY(int(4), int(4))), 1, ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))), min(int(ivec4((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, _GLF_IDENTITY(~ (~ (2)), clamp(~ (~ (2)), _GLF_IDENTITY(~ (~ (2)), (~ (~ (2))) | (~ (~ (2)))), ~ (~ (2))))))))), (2) - 0), ~ (~ (2)))), (0 >> _GLF_IDENTITY(int(4), int(4))), 1, ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))), int(ivec4((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, _GLF_IDENTITY(~ (~ (2)), clamp(~ (~ (2)), _GLF_IDENTITY(~ (~ (2)), (~ (~ (2))) | (~ (~ (2)))), ~ (~ (2))))))))), (2) - 0), ~ (~ (2)))), (0 >> _GLF_IDENTITY(int(4), int(4))), 1, ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))))))))) : _GLF_FUZZED(_GLF_IDENTITY(i, ~ (~ (i)))))) ^ (0 ^ 0))))) / ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 ^ (4))), int(4)), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(i) : _GLF_IDENTITY(int(4), int(4))))) << 0)) / 1))), ~ ((_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(2, _GLF_IDENTITY((2), max((2), _GLF_IDENTITY((2), min((2), (2))))) - 0), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(atomicCompSwap(i, i, 22031)))), 1, 0, 1)), (int(ivec4(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(atomicCompSwap(i, i, 22031)))), 1, 0, 1))) << 0))))))), 0 | ((2)))))) ^ (0 ^ _GLF_IDENTITY(0, int(ivec3(0, 1, 0)))))))) : _GLF_FUZZED((-- i)))))))))))), _GLF_IDENTITY(4, max(4, 4)), 64, 4);
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
    {
     do
      {
       atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidnum_workgroupworkgroup_baseworkgroup_id.x], uint(_GLF_IDENTITY(2, max(2, 2))), 4, 64, 4);
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false || (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false || (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))))))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)), (_GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)), (bool(bvec4((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))) && true)) && true)))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(0, 0 ^ (0)) | 0), true && (_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(0, 0 ^ (0)) | 0), bool(_GLF_IDENTITY(bvec3(_injected_loop_counter != (_GLF_IDENTITY(0, 0 ^ (0)) | 0), true, true), bvec3(bvec3(bvec3(_injected_loop_counter != (_GLF_IDENTITY(0, 0 ^ (0)) | 0), true, true))))))))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, true)), bool(bvec2(bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, true)), false))))))
                barrier();
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) || false); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) || _GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
                    barrier();
                  }
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) || false))), (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))) && true))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))))
          barrier();
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / exp(0.0)))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + 0))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                        }
                       do
                        {
                         do
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           barrier();
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                      }
                     else
                      {
                      }
                     barrier();
                    }
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                        barrier();
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                          {
                           barrier();
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0))))), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0)))))))), true, false, false)))));
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
