#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), true, true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) - (0u | 0u));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec4(bvec2(_GLF_DEAD(false), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))
    barrier();
   return;
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), abs(1.0), 0.0, 0.0, 0.0, 0.0, 1.0)))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true) && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) && true)))))))
        barrier();
       return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || false))
  barrier();
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 if(subgroup_local_id + _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) ^ 0))) < _GLF_IDENTITY(subgroup_size, 0u | (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))))
  {
   switch(_GLF_SWITCH(int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0))), injectionSwitch.x))))
    {
     case 79:
     if(_GLF_DEAD(false))
      {
       switch(_GLF_SWITCH((0 >> _GLF_IDENTITY(int(8), int(8)))))
        {
         case 0:
         case 38:
         case 9:
         case 59:
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         case 66:
         if(_GLF_DEAD(false))
          return;
         return;
         case 86:
         if(_GLF_DEAD(false))
          return;
         case 33:
         if(_GLF_DEAD(false))
          barrier();
         break;
         default:
         1;
        }
      }
     int _GLF_SWITCH_0_0v;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), false, false, false))))))), bool(bvec4(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))), true && (bool(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))), true && (bool(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))))))), false, false, false))))))
        barrier();
       barrier();
      }
     case 53:
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
      }
     do
      {
       workgroup_id;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0)) / 1.0) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           switch(_GLF_SWITCH(0))
            {
             case 37:
             mat2(-658.589, 76.83, -283.952, -9.8);
             case 0:
             if(_GLF_DEAD(false))
              return;
             barrier();
             break;
             case 64:
             uvec4 _GLF_SWITCH_2_0v;
             case 43:
             mat4x3 _GLF_SWITCH_2_1v[14];
             default:
             1;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        continue;
       if(_GLF_DEAD(false))
        return;
       if((true ? false : false))
        {
         if(_GLF_DEAD(false))
          barrier();
         {
          switch(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))))
           {
            case 75:
            ;
            case 0:
            transpose(mat4x3(4.2));
            case 33:
            if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0), _GLF_IDENTITY(mat2(0.0, 0.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat2(1786.1861, 236.839, -7.3, 5.8)) : _GLF_IDENTITY(mat2(0.0, 0.0, 0.0, 0.0), mat2(mat3(_GLF_IDENTITY(_GLF_IDENTITY(mat2(0.0, 0.0, 0.0, 0.0), mat2(mat2(mat2(0.0, 0.0, 0.0, 0.0)))), (_GLF_IDENTITY(mat2(0.0, _GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, sin(0.0), 0.0, 0.0, 1.0, 1.0, sqrt(abs(1.0)), 1.0))), 0.0, 0.0), mat2(mat2(mat2(0.0, 0.0, 0.0, 0.0))))) / mat2(1.0, 1.0, 1.0, 1.0))))))) + (mat2(injectionSwitch, round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(1.0, min(1.0, 1.0)))))), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0), mat2(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)) : _GLF_FUZZED(4.3))), 0.0, 0.0, 0.0) + (mat2(injectionSwitch, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0)))), (false ? _GLF_FUZZED(injectionSwitch) : vec2(_GLF_IDENTITY(mat2(injectionSwitch, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0), mat2(0.0, 0.0, 0.0, 0.0) + _GLF_IDENTITY((_GLF_IDENTITY(mat2(injectionSwitch, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0), mat2(mat3x4(mat2(injectionSwitch, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0))))), (false ? _GLF_FUZZED((-3638.3114 - mat2(-929.551, 8.6, -979.187, 7.2))) : (_GLF_IDENTITY(mat2(injectionSwitch, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0), mat2(mat3x4(mat2(injectionSwitch, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0)))))))))))))).x > injectionSwitch.y))))
             return;
            case 73:
            if(_GLF_DEAD(false))
             barrier();
            case 92:
            mat3x2(mat3x4(-9.2, 6507.9453, -29.07, 1.9, -5.3, 0.5, -372.117, -2714.7681, 0.9, 7.4, 666.731, -1.1));
            _GLF_IDENTITY(ivec3(-94899, -31297, -83891).tp, (ivec3(-94899, -31297, -83891).tp) ^ ivec2(0, 0)).tss;
            case 53:
            floatBitsToUint(vec2(6.6, -524.774));
            case 43:
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             barrier();
            case 35:
            (false ? (_GLF_IDENTITY(vec4(_GLF_IDENTITY(8.4, clamp(8.4, 8.4, 8.4)), -318.243, -3122.1457, -551.385), min(vec4(8.4, -318.243, _GLF_IDENTITY(-3122.1457, max(-3122.1457, -3122.1457)), -551.385), _GLF_IDENTITY(vec4(8.4, -318.243, -3122.1457, -551.385), (false ? _GLF_FUZZED(vec4(-1.5, -9.1, -9.7, -0.5)) : vec4(8.4, -318.243, _GLF_IDENTITY(-3122.1457, float(mat3x4(_GLF_IDENTITY(-3122.1457, (_GLF_IDENTITY(-3122.1457, max(-3122.1457, -3122.1457))) + 0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0))), 0.0), vec2(1.0, 1.0)), dot(vec2(_GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(0.4) : 1.0)), 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0))), 0.0), vec2(1.0, 1.0)))))), _GLF_IDENTITY(-551.385, (true ? -551.385 : _GLF_FUZZED(max(496.615, -523.021))))))))) / 5630.4120) : vec4(9713.2478, -6861.1441, 5.0, 308.267));
            break;
            case 41:
            uvec4(50471u, 139396u, 70325u, 109939u);
            default:
            1;
           }
         }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         {
          if(_GLF_DEAD(false))
           continue;
          mix(bvec4(false, true, false, false), bvec3(false, false, false).yyyx, mix(bvec4(false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) && true), false, true), greaterThanEqual(ivec4(49747, 96446, 30210, -9886), ivec4(77734, -80356, -20946, -30972)), bvec4(false, true, false, true)));
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           return;
          bvec4((uvec3(172104u, 142503u, _GLF_IDENTITY(89356u, max(_GLF_IDENTITY(89356u, clamp(_GLF_IDENTITY(89356u, (89356u) ^ 0u), 89356u, 89356u)), 89356u))) == uvec3(_GLF_IDENTITY(165193u, (_GLF_IDENTITY(_GLF_IDENTITY(165193u, clamp(165193u, 165193u, 165193u)), max(_GLF_IDENTITY(165193u, clamp(165193u, 165193u, 165193u)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(165193u, min(165193u, 165193u)), clamp(165193u, 165193u, 165193u)), (_GLF_IDENTITY(165193u, clamp(165193u, 165193u, 165193u))) | (_GLF_IDENTITY(165193u, clamp(165193u, 165193u, 165193u))))))) | (165193u)), 10033u, 118793u)), _GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3(false, false, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))));
          ivec3(_GLF_IDENTITY(-5612, (_GLF_IDENTITY(-5612, (-5612) << 0)) / (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 | (int(2))))) >> _GLF_IDENTITY(int(2), int(2)), max((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 | (int(2))))) >> _GLF_IDENTITY(int(2), int(2)), (1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 | (int(2))))) >> _GLF_IDENTITY(int(2), int(2)))))), 88982, -83267);
          if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
           {
            if(_GLF_DEAD(false))
             barrier();
            barrier();
           }
          if(_GLF_DEAD(false))
           {
            if(_GLF_DEAD(false))
             barrier();
            barrier();
           }
          bvec3 _GLF_SWITCH_0_1v[19];
          if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false))))))), bool(bvec3(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false))))))), false, true)))))))))
           barrier();
          vec4 _GLF_SWITCH_0_2v[51];
          uvec2 _GLF_SWITCH_0_3v;
          if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 1.0, 1.0, log(1.0), 1.0)), mix(float(_GLF_FUZZED(43.02)), float(float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), 0.0, 1.0, 1.0, log(1.0), 1.0))), bool(true)))) > injectionSwitch.y))))
           {
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             break;
            continue;
            if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))))))
             {
              if(_GLF_DEAD(false))
               break;
              barrier();
             }
           }
          lessThanEqual(ivec4(14527, -22099, 41028, 53206), (_GLF_IDENTITY(ivec4(_GLF_SWITCH_0_0v, ivec2(-9028, 88106), 47047), (true ? _GLF_IDENTITY(ivec4(_GLF_SWITCH_0_0v, ivec2(-9028, 88106), 47047), ~ (~ (ivec4(_GLF_SWITCH_0_0v, ivec2(-9028, 88106), 47047)))) : _GLF_FUZZED(ivec4(92348, 13123, 71377, 24193)))) ^ -72274));
          if(_GLF_DEAD(false))
           {
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             barrier();
            break;
           }
         }
         if(true)
          {
           mat2x4 _GLF_SWITCH_0_4v[90], _GLF_SWITCH_0_5v, _GLF_SWITCH_0_6v;
           if(_GLF_DEAD(false))
            continue;
           _GLF_IDENTITY((ivec3(-69899, 17937, -78546) + ivec3(-29047, -93142, -63844)), (true ? (ivec3(-69899, 17937, -78546) + ivec3(-29047, -93142, -63844)) : _GLF_FUZZED(ivec3(95048, -11067, _GLF_IDENTITY(18845, ~ (_GLF_IDENTITY(~ (18845), ~ (~ (~ (18845))))))))));
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(0.0), _GLF_FUZZED(-6.4)), bvec2(false, false))))).x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-9911.2931)), bool(false))), injectionSwitch.x)), injectionSwitch.x)), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), ! (! (! (_GLF_IDENTITY(false, true && (false))))))))) && true)))
            continue;
           ivec3 _GLF_SWITCH_0_7v, _GLF_SWITCH_0_8v;
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), true, false)))))))
            return;
           (uvec2(164990u, 164057u) ^ virtual_gid);
           (mat4x3(-0.7, 13.99, 74.61, -618.975, -5730.2288, -633.473, _GLF_IDENTITY(-8.6, (-8.6) / sqrt(1.0)), 8.9, 188.839, 92.32, 50.82, -9037.1515) * mat3x4(-52.96, -9.2, -8.3, _GLF_IDENTITY(-9002.5894, _GLF_IDENTITY(max(-9002.5894, -9002.5894), (max(-9002.5894, -9002.5894)) * 1.0)), 471.898, 5.1, 8.5, 11.26, _GLF_IDENTITY(9.8, min(9.8, 9.8)), _GLF_IDENTITY(6.3, (6.3) / 1.0), 776.475, _GLF_IDENTITY(925.752, max(925.752, 925.752))));
           mat3x2 _GLF_SWITCH_0_9v[66], _GLF_SWITCH_0_10v;
           mat2x4(-55.99, -9.2, 9517.9588, _GLF_IDENTITY(-3739.5618, min(-3739.5618, -3739.5618)), -3.3, -3.5, -8.1, -89.01);
           bvec3(false, false, true);
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            barrier();
           mat3x4(6.9, -605.174, -1.3, -0.9, -0.4, 48.60, 9.5, 1.6, -5.3, -5168.5947, 2.8, -4.8);
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec2(false, false))) || (false)), (injectionSwitch.x > injectionSwitch.y))) || false), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y)))), (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((bool(bool(_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))), false || ((bool(bool(_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))))))))))
            continue;
           if(_GLF_DEAD(false))
            barrier();
           (-26.67 + (mat2(-532.754, -581.764, -5.0, -5131.9066) / mat2(19.80, -3136.6992, 62.46, 687.229)));
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bvec2(bool(injectionSwitch.x > injectionSwitch.y), false))), true)))))))))
            barrier();
          }
         mat3 _GLF_SWITCH_0_11v, _GLF_SWITCH_0_12v, _GLF_SWITCH_0_13v;
         uvec2 _GLF_SWITCH_0_14v, _GLF_SWITCH_0_15v;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            barrier();
           break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bool(_GLF_IDENTITY(true && _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), false || ((false))))), ! (! (true && (false))))))))))
            barrier();
          }
        }
       ivec3 _GLF_SWITCH_0_16v, _GLF_SWITCH_0_17v[90], _GLF_SWITCH_0_18v;
       mat4x2(1.0, -7.5, -7.8, 1.9, -7.2, _GLF_IDENTITY(9.6, (9.6) - _GLF_IDENTITY(log(_GLF_IDENTITY(1.0, max(1.0, 1.0))), mix(float(_GLF_FUZZED(-3033.9810)), float(log(1.0)), bool(true)))), 32.93, 7620.9761);
       asinh(vec3(-8.5, 5.4, 2.4));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       while(true)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         uvec2 _GLF_SWITCH_0_19v, _GLF_SWITCH_0_20v[2], _GLF_SWITCH_0_21v[62];
         if(_GLF_DEAD(false))
          barrier();
         if(false)
          {
           if(_GLF_DEAD(false))
            {
             switch(_GLF_SWITCH(int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x))))
              {
               case 4:
               (- _GLF_SWITCH_0_0v);
               case 92:
               vec4(0.5, 0.2, 4716.5521, -5885.0144);
               case 0:
               case 33:
               case 16:
               case 72:
               case 5:
               case 19:
               case 49:
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
                continue;
               case 14:
               case 95:
               case 74:
               barrier();
               break;
               case 41:
               mat4x3(-1580.7910, 0.5, -1.8, 4469.2328, -781.386, 250.135, 80.39, 679.231, 14.49, -148.594, -3.3, -446.058);
               case 31:
               mat3x2(7.7, -3.6, 0.7, 4.4, 80.05, 27.49)[1];
               default:
               1;
              }
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), 1.0, 0.0, 1.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? mat2(injectionSwitch.x, 1.0, 0.0, 1.0) : _GLF_FUZZED(mat2(8223.4503, -36.59, -9.9, 4.1)))))) > injectionSwitch.y))))
            break;
           ;
           (_GLF_IDENTITY(subgroup_local_id & subgroup_size, (subgroup_local_id & subgroup_size) << 0u));
           (- (-802.720 + mat4x3(72.18, -4.3, 548.383, 0.3, -3510.0915, 2112.3824, 8.7, 0.8, 3.8, -2.9, -6894.4399, 8.6)));
          }
         else
          {
           bool _GLF_SWITCH_0_22v, _GLF_SWITCH_0_23v;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           vec2(1533.5075, 18.29);
           bvec3 _GLF_SWITCH_0_24v;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           vec2 _GLF_SWITCH_0_25v;
           uint _GLF_SWITCH_0_26v, _GLF_SWITCH_0_27v[27];
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x3(injectionSwitch, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), (true ? mat2x3(injectionSwitch, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0) : _GLF_FUZZED(mat2x3(-20.94, 29.18, 147.358, -6.3, -581.341, -24.77)))))).y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(65.49)), float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), bool(true))) > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))))))))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            break;
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))))))), ! _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || false))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))), (! ((injectionSwitch.x > injectionSwitch.y))) || false))))))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))) && true)), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || false))))))))))))) || false), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).y))))), ! (! ((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).y))))))))))) && true)), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || false), false, true, true)), true && (bool(bvec4(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || false), false, true, true)))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || false), false, true, true)), true && (bool(bvec4(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || false), false, true, true))))))), bool(bvec2(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || false), false, true, true)), true && (bool(bvec4(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || false), false, true, true))))))), false))))))))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || false))))))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), ! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false)))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(injectionSwitch.x, tan(0.0), determinant(mat2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), 1.0, sqrt(1.0), 1.0, 1.0, 1.0), mat4(1.0) * (mat2x4(injectionSwitch.x, tan(0.0), determinant(mat2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), 1.0, sqrt(1.0), 1.0, 1.0, 1.0)))), clamp(float(_GLF_IDENTITY(mat2x4(injectionSwitch.x, tan(0.0), determinant(mat2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), 1.0, sqrt(1.0), 1.0, 1.0, 1.0), mat4(1.0) * (mat2x4(injectionSwitch.x, tan(0.0), determinant(mat2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), 1.0, sqrt(1.0), 1.0, 1.0, 1.0)))), float(_GLF_IDENTITY(mat2x4(injectionSwitch.x, tan(0.0), determinant(mat2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), 1.0, sqrt(1.0), 1.0, 1.0, 1.0), mat4(1.0) * (mat2x4(injectionSwitch.x, tan(0.0), determinant(mat2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), 1.0, sqrt(1.0), 1.0, 1.0, 1.0)))), float(_GLF_IDENTITY(mat2x4(injectionSwitch.x, tan(0.0), determinant(mat2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), 1.0, sqrt(1.0), 1.0, 1.0, 1.0), mat4(1.0) * (mat2x4(injectionSwitch.x, tan(0.0), determinant(mat2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), 1.0, sqrt(1.0), 1.0, 1.0, 1.0))))))) > injectionSwitch.y))) || false))))))), ! (! ((! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false)))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(injectionSwitch.x, tan(0.0), determinant(mat2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), 1.0, sqrt(1.0), 1.0, 1.0, 1.0), mat4(1.0) * (mat2x4(injectionSwitch.x, tan(0.0), determinant(mat2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), 1.0, sqrt(1.0), 1.0, 1.0, 1.0)))), clamp(float(_GLF_IDENTITY(mat2x4(injectionSwitch.x, tan(0.0), determinant(mat2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), 1.0, sqrt(1.0), 1.0, 1.0, 1.0), mat4(1.0) * (mat2x4(injectionSwitch.x, tan(0.0), determinant(mat2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), 1.0, sqrt(1.0), 1.0, 1.0, 1.0)))), float(_GLF_IDENTITY(mat2x4(injectionSwitch.x, tan(0.0), determinant(mat2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), 1.0, sqrt(1.0), 1.0, 1.0, 1.0), mat4(1.0) * (mat2x4(injectionSwitch.x, tan(0.0), determinant(mat2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), 1.0, sqrt(1.0), 1.0, 1.0, 1.0)))), float(_GLF_IDENTITY(mat2x4(injectionSwitch.x, tan(0.0), determinant(mat2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), 1.0, sqrt(1.0), 1.0, 1.0, 1.0), mat4(1.0) * (mat2x4(injectionSwitch.x, tan(0.0), determinant(mat2(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), 1.0, sqrt(1.0), 1.0, 1.0, 1.0))))))) > injectionSwitch.y))) || false)))))))))))))))) || false), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).y)))))))) && true)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || false)))))), (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) || false, true && ((! ((injectionSwitch.x > injectionSwitch.y))) || false))))))))) && true)))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 0.0), (true ? vec4(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 0.0) : _GLF_FUZZED(vec4(76.63, -602.384, -5.6, 78.43)))))))).x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || false))))))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || false))))))))))))) || false), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), injectionSwitch)).y)))))))) && true)), true && ((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, (0) / 1)))) ^ 0)], injectionSwitch[1])).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || false))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || false))))))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))), ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || false))))))))))))) || false), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).y)))))))) && true)))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))) || false))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || false))))))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec2(! ((injectionSwitch.x > injectionSwitch.y)), true)))))), _GLF_IDENTITY((! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9.8), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-9.4)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y))), ((! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9.8), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-9.4)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y)))) && true) || false))))))))))))) || false), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).y)))))))) && true)), true && ((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || false))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || false))))))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), ! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || false)))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || false)))), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || false)))))))))))), false || ((! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || false)))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || false)))), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || false)))))))))))))))))))) || false), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).y)))))))) && true)))), _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, (true) || false)))))))))))))))
            barrier();
           float _GLF_SWITCH_0_28v;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))))), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec2(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))))))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(2154.6258))) > injectionSwitch.y))))
                break;
               barrier();
              }
             barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
             continue;
            }
           mat2 _GLF_SWITCH_0_29v[46];
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
          }
         do
          {
           if(_GLF_DEAD(false))
            break;
          }
         while((_GLF_IDENTITY(_GLF_SWITCH_0_19v != uvec2(188565u, 100622u), bool(_GLF_IDENTITY(bvec3(_GLF_SWITCH_0_19v != uvec2(188565u, 100622u), true, false), bvec3(bvec4(bvec3(_GLF_SWITCH_0_19v != uvec2(188565u, 100622u), true, false), true)))))));
         uvec4(19264u, 163454u, 71004u, 88943u).ggrg;
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          return;
         mat3 _GLF_SWITCH_0_30v[7], _GLF_SWITCH_0_31v;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
         vec2 _GLF_SWITCH_0_32v, _GLF_SWITCH_0_33v;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (! (! (false))), ! (! (! (! (! (false)))))))))))
            continue;
           barrier();
           if(_GLF_DEAD(false))
            break;
          }
         {
          if(_GLF_DEAD(false))
           barrier();
          if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
           {
            if(_GLF_DEAD(false))
             break;
            continue;
           }
          switch(_GLF_SWITCH(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) | 0)))
           {
            case 19:
            bvec4(false, true, false, _GLF_IDENTITY(false, ! (! (false))));
            case 0:
            if(_GLF_DEAD(false))
             barrier();
            case 55:
            case 31:
            case 93:
            uvec2 _GLF_SWITCH_0_34v, _GLF_SWITCH_0_35v;
            case 85:
            if(_GLF_DEAD(false))
             barrier();
            if(_GLF_DEAD(false))
             {
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               continue;
              barrier();
             }
            case 95:
            case 25:
            if(_GLF_DEAD(false))
             return;
            _GLF_IDENTITY(bvec4(false, false, false, false).grb, bvec3(bvec3(_GLF_IDENTITY(bvec4(false, false, false, false).grb, bvec3(bvec4(bvec4(false, false, false, false).grb, false))))));
            mat2x4(mat4x2(7.1, -4.9, 9.5, 41.59, -252.838, 2.8, -15.05, -1.9));
            case 66:
            case 79:
            min(_GLF_SWITCH_0_35v, _GLF_SWITCH_0_19v);
            break;
            case 10:
            if(_GLF_DEAD(false))
             {
              if(_GLF_DEAD(false))
               break;
              return;
             }
            mat3x2 _GLF_SWITCH_1_0v[28], _GLF_SWITCH_1_1v, _GLF_SWITCH_1_2v;
            if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
             {
              if(_GLF_DEAD(false))
               continue;
              barrier();
             }
            default:
            1;
           }
         }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), bool(bvec3(_GLF_DEAD(false), false, false))))
          {
           switch(_GLF_SWITCH(0))
            {
             case 88:
             (_GLF_IDENTITY(_GLF_SWITCH_0_31v / inversesqrt(-4.7), (_GLF_SWITCH_0_31v / inversesqrt(-4.7)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)));
             case 77:
             bvec2(true, false);
             case 0:
             case 79:
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             case 32:
             continue;
             break;
             default:
             1;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true))))))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         while(true)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y)))), (_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y)))), ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).y))))) && true)) || false), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           uvec3 _GLF_SWITCH_0_36v, _GLF_SWITCH_0_37v, _GLF_SWITCH_0_38v;
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), true, true))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), (! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)))))))) && true))))
            barrier();
           (-857.786 == -2069.7391);
           mat2x4(-4051.2226, 58.43, 0.2, -281.786, 2.2, -133.193, 5.4, -0.4);
           -944.855;
           mat3x4 _GLF_SWITCH_0_39v[92];
           _GLF_SWITCH_0_18v;
           ivec2(-18589, 3794);
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           bool _GLF_SWITCH_0_40v[6], _GLF_SWITCH_0_41v[66], _GLF_SWITCH_0_42v;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              barrier();
             break;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, true), true)), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec3(bvec2(false, true), true)), false), bvec3(bvec3(bvec3(bvec2(bvec3(bvec2(false, true), true)), false)))))))))))
              break;
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true), false))))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true), false))))))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true), false)))))))) || false))))) && true)))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true), false))))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true), false))))))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true), false)))))))) || false))))) && true)))), false))))
              barrier();
             return;
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) || false))))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_IDENTITY(_GLF_FUZZED((-0.6)), (_GLF_IDENTITY(_GLF_FUZZED((-0.6)), clamp(_GLF_FUZZED((-0.6)), _GLF_FUZZED((-0.6)), _GLF_FUZZED((-0.6))))) - log(1.0))), bool(false)))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
              break;
             barrier();
            }
           return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-12.69))) > injectionSwitch.y))))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          break;
         for(         mat2x4(572.965, 7.7, 22.20, _GLF_IDENTITY(_GLF_IDENTITY(-9919.7406, clamp(-9919.7406, -9919.7406, _GLF_IDENTITY(_GLF_IDENTITY(-9919.7406, mix(float(_GLF_FUZZED(-47.14)), float(-9919.7406), bool(true))), max(_GLF_IDENTITY(-9919.7406, mix(float(-9919.7406), float(_GLF_FUZZED(-646.262)), bool(false))), -9919.7406)))), (false ? _GLF_FUZZED(191.320) : _GLF_IDENTITY(-9919.7406, clamp(-9919.7406, -9919.7406, _GLF_IDENTITY(-9919.7406, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(-9919.7406, max(-9919.7406, _GLF_IDENTITY(-9919.7406, (true ? -9919.7406 : _GLF_FUZZED(1.1))))), mix(float(-9919.7406), float(_GLF_FUZZED(-646.262)), bool(false))), (_GLF_IDENTITY(-9919.7406, mix(float(-9919.7406), float(_GLF_FUZZED(-646.262)), bool(false)))) / _GLF_IDENTITY(1.0, (1.0) - 0.0)), -9919.7406)))))), -1330.1352, 924.368, -508.413, -2930.7660);
 false; vec4(-7.0, _GLF_IDENTITY(-4709.4549, (_GLF_IDENTITY(-4709.4549, (false ? _GLF_FUZZED(629.260) : -4709.4549))) * 1.0), 1.0, -9709.9124))
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-504.955)), float(_GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, abs(1.0), 1.0, 0.0, 1.0, 0.0)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
          barrier();
        }
       _GLF_IDENTITY(max(ivec2(6238, -80423), ivec2(48009, -36629)), (false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(ivec2(61093, _GLF_IDENTITY(15198, (true ? 15198 : _GLF_FUZZED(_GLF_SWITCH_0_0v)))), ivec2(0, 0) | (ivec2(61093, 15198)))), ivec2(0, 0) | (_GLF_FUZZED(_GLF_IDENTITY(ivec2(61093, _GLF_IDENTITY(15198, (true ? 15198 : _GLF_FUZZED(_GLF_SWITCH_0_0v)))), ivec2(0, 0) | (ivec2(61093, 15198)))))) : max(ivec2(6238, -80423), ivec2(48009, -36629))));
      }
     while(_GLF_IDENTITY(true, ! (! (true))));
     if(_GLF_DEAD(false))
      return;
     case 0:
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), bool(bvec4(! (_GLF_IDENTITY(false, false || (false))), false, false, false)))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(tanh(vec2(-2.7, 6486.0404))))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(fract(84.76)) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, (false ? _GLF_FUZZED(fract(84.76)) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(fract(84.76)) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(fract(84.76)) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), 1.0 * (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(fract(84.76)) : _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(injectionSwitch.y), clamp(float(injectionSwitch.y), float(injectionSwitch.y), float(injectionSwitch.y))), float(_GLF_FUZZED(-8.9)), bool(false))))))), injectionSwitch.y, injectionSwitch.y))))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, false))))))))))
        barrier();
       switch(_GLF_SWITCH(int(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-1151.2484)), float(0.0), bool(true))), injectionSwitch.x))))
        {
         case 0:
         case 26:
         case 35:
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))))
          return;
         case 53:
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
         case 28:
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         break;
         default:
         1;
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     int i = 0;
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     case 66:
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec3(true, true, true))) && (false))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-5749.6939)), bool(false)))) - 0.0)))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), false || (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), bool(bvec3((! (false)), true, false)))))))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ((false)) && true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, false), false)))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false)))))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false)))))), false, false), false))), false)))), true, true, false))))))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
        return;
       return;
      }
     break;
     if(_GLF_DEAD(false))
      barrier();
     case 6:
     uint _GLF_SWITCH_0_43v, _GLF_SWITCH_0_44v[85];
     if(_GLF_DEAD(false))
      return;
     default:
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     1;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((-698.778 / -58.21))), bool(false)))))))
      barrier();
    }
  }
 else
  {
   switch(_GLF_SWITCH(0))
    {
     case 92:
     if((mat3x4(62.94, -8.7, -2.5, 4.9, -792.085, -1.1, -85.97, 2.2, 6.5, 15.38, -60.25, -0.0) != mat3x4(-5.5, 8283.8092, 9.2, 56.49, -8133.5706, -6123.9145, 3581.4597, 29.62, 3.8, 979.338, -873.823, _GLF_IDENTITY(44.07, mix(float(44.07), float(_GLF_FUZZED(4.4)), bool(false))))))
      {
       {
        mat3 _GLF_SWITCH_2_0v, _GLF_SWITCH_2_1v;
        ;
       }
       atan(vec3(-94.35, -5.5, -623.082), vec3(-2450.0990, -8088.7360, -3.7));
       ivec3 _GLF_SWITCH_2_2v;
       min(21728, -3496);
       if(false)
        {
        }
      }
     case 22:
     (17.51 / mat2x3(mat3x4(3640.8392, -57.28, 65.21, -3.0, -630.445, 744.803, -7934.1981, -914.189, 459.074, _GLF_IDENTITY(899.001, (true ? 899.001 : _GLF_FUZZED(-79.50))), 5896.0424, 1.7)));
     case 0:
     case 99:
     if(_GLF_DEAD(false))
      barrier();
     case 11:
     switch(_GLF_SWITCH(0))
      {
       case 0:
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! _GLF_IDENTITY((false), ((false)) && _GLF_IDENTITY(true, ! (! (true))))))))))
        barrier();
       case 17:
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       case 6:
       case 54:
       case 31:
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, true && (false)), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, true && (false)), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, true && (false)), true), false, false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, true && (false)), true))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
       case 42:
       case 35:
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))).y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))).y)), true, true), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))).y)), true, true), false)))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))).y)), true, true), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))).y)), true, true), false)))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))
        barrier();
       case 39:
       atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
       break;
       case 88:
       ;
       case 2:
       (mat2(71.02, 8606.9088, -511.297, 84.07) * (- mat3x2(91.18, -7.3, -4.3, -777.058, -9580.2172, 68.35)));
       default:
       1;
       if(_GLF_DEAD(false))
        return;
      }
     break;
     case 45:
     {
      {
       float(workgroup_size);
       ;
      }
      {
       mat3 _GLF_SWITCH_2_3v;
       uvec4 _GLF_SWITCH_2_4v;
       ivec3(32235, -81112, -98688);
       bvec2(true, false);
       mat3x4(12.65, -8.8, -4249.4784, 90.72, -7241.6602, 94.86, 32.11, -34.88, -371.775, -7273.7287, 7.7, -0.8);
       {
        mat3x2 _GLF_SWITCH_2_5v[22], _GLF_SWITCH_2_6v;
        vec4(-241.205, 553.247, -3250.9561, -5982.9996);
        mat3x4 _GLF_SWITCH_2_7v, _GLF_SWITCH_2_8v, _GLF_SWITCH_2_9v;
        equal(uvec3(30638u, 117719u, 31831u), uvec3(144992u, 167042u, 5846u)).zyx;
        mat2x4 _GLF_SWITCH_2_10v;
        uvec2 _GLF_SWITCH_2_11v, _GLF_SWITCH_2_12v, _GLF_SWITCH_2_13v;
        notEqual(_GLF_SWITCH_2_4v, uvec4(uvec3(17294u, 185937u, 155590u), subgroup_local_id));
        mat3 _GLF_SWITCH_2_14v[29], _GLF_SWITCH_2_15v, _GLF_SWITCH_2_16v;
       }
      }
      while((uvec2(18403u, 103410u) != uvec2(198819u, 44547u)))
       {
        ;
       }
      while(false)
       {
       }
      if(true)
       {
        bvec3 _GLF_SWITCH_2_17v[72], _GLF_SWITCH_2_18v[82], _GLF_SWITCH_2_19v[67];
        transpose(mat2x4(86.46, -8.5, 5264.5820, -6.1, -9.0, 6.5, 46.67, -9.7));
        while(false)
         {
          mat3(-4.5, 24.95, -48.39, 54.98, _GLF_IDENTITY(68.68, mix(float(_GLF_FUZZED((true ? -5146.8544 : -825.437))), float(68.68), bool(true))), -2.3, 3059.5017, 31.39, -5.9);
          mix(ivec2(7197, 99900).xyy, ivec3(-63849, 15844, 12783), bvec3(false, true, false));
          false;
          mat4 _GLF_SWITCH_2_20v[76], _GLF_SWITCH_2_21v, _GLF_SWITCH_2_22v;
         }
        int _GLF_SWITCH_2_23v;
        if(true)
         {
          mat2(mat4x2(-4199.3327, 4.0, 3.6, -70.22, 0.7, 56.63, 823.086, 9.7));
          num_workgroup;
          bvec3 _GLF_SWITCH_2_24v[84];
          isinf(vec4(2.9, -2346.2971, -1813.6854, -2.2));
          mat2x4 _GLF_SWITCH_2_25v;
          log(mix(vec4(9336.8513, _GLF_IDENTITY(-4.6, 0.0 + (-4.6)), -34.94, -0.5), vec4(-5.5, -3.6, 6.5, 791.482), vec4(-40.39, -4552.5341, 4447.6871, -67.33)));
          _GLF_IDENTITY(uvec4(94637u, 12330u, 36052u, 107914u), (false ? _GLF_FUZZED(uvec4(5044u, 3878u, 30787u, 43887u)) : uvec4(94637u, 12330u, 36052u, 107914u)));
          mat2x3(3.9, 3881.6056, 3.0, -6919.3249, -127.306, 68.93);
          vec2 _GLF_SWITCH_2_26v, _GLF_SWITCH_2_27v;
         }
        else
         {
          atan(vec3(-52.50, -3998.4238, -7.8));
          length(float((subgroup_size / subgroup_id)));
          (injectionSwitch != vec2(-94.98, -6.9));
          workgroup_base;
         }
       }
      for(mat4 _GLF_SWITCH_2_28v[44], _GLF_SWITCH_2_29v[96], _GLF_SWITCH_2_30v; (bvec4(true, true, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, false)))))) || false), false) != bvec4(true, false, true, true)); uvec4(82436u, 99677u, 28830u, 75925u))
       {
        injectionSwitch;
       }
     }
     default:
     1;
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
