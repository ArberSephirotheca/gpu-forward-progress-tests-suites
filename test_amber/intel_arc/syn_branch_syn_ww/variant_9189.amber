#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 if(subgroup_local_id + 1 < subgroup_size)
  {
   switch(_GLF_SWITCH((0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | 0)))))
    {
     case 0:
     case 61:
     int i = 0;
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     break;
     case 30:
     mat4x2 _GLF_SWITCH_0_0v[59], _GLF_SWITCH_0_1v[90], _GLF_SWITCH_0_2v[60];
     case 52:
     while((12027 >= i))
      {
       switch(_GLF_SWITCH((-9922 & _GLF_IDENTITY(0, (0) | (0)))))
        {
         case 46:
         bvec3(false, true, false);
         case 0:
         case 36:
         case 66:
         case 78:
         case 56:
         mat2x4 _GLF_SWITCH_0_3v, _GLF_SWITCH_0_4v;
         case 32:
         for(bvec2 _GLF_SWITCH_0_5v, _GLF_SWITCH_0_6v, _GLF_SWITCH_0_7v; (ivec2(-41646, 42832) != (-23857 | (ivec2(53396, -57810) % i))); (+ uvec3(175854u, 29999u, 12478u)))
          {
           (53.83 - mat3(1.9));
           mat3x4(-843.219, -373.331, -5.7, -605.434, -9561.5799, -793.651, 8.7, 8.5, 9.0, 445.468, -2.8, 590.994);
           vec3 _GLF_SWITCH_0_8v[95], _GLF_SWITCH_0_9v, _GLF_SWITCH_0_10v[30];
           mat3x4 _GLF_SWITCH_0_11v;
           inversesqrt((normalize(-3165.2977) * _GLF_SWITCH_0_9v));
           for(vec4 _GLF_SWITCH_0_12v; false; (vec4(7735.9844, -1.0, -13.73, -9.9) == vec4(-9.7, 157.381, 316.436, fract(-4.2))))
            {
             mat3 _GLF_SWITCH_0_13v[52], _GLF_SWITCH_0_14v[51], _GLF_SWITCH_0_15v;
             bool _GLF_SWITCH_0_16v, _GLF_SWITCH_0_17v, _GLF_SWITCH_0_18v[68];
             uvec4 _GLF_SWITCH_0_19v, _GLF_SWITCH_0_20v;
             subgroup_local_id;
             num_workgroup;
             bitfieldInsert(uvec4(subgroup_id, workgroup_size, workgroup_size, workgroup_id), _GLF_SWITCH_0_19v, (++ i), 79029);
             bvec4 _GLF_SWITCH_0_21v, _GLF_SWITCH_0_22v;
             int _GLF_SWITCH_0_23v[56], _GLF_SWITCH_0_24v[17], _GLF_SWITCH_0_25v[85];
            }
           mat2x3 _GLF_SWITCH_0_26v[98], _GLF_SWITCH_0_27v;
          }
         case 13:
         case 89:
         case 91:
         case 15:
         {
          switch(_GLF_SWITCH(0))
           {
            case 10:
            mat3x2(71.99, -64.60, -5.6, 0.3, 9.4, 8464.2803);
            case 91:
            ;
            case 0:
            mat4x2 _GLF_SWITCH_0_28v[98];
            {
             mat3(-911.519, 93.08, 40.52, -215.184, -6533.3825, -9.4, -0.7, 1828.8196, 3167.6022);
             (subgroup_size & uvec3(132020u, 123971u, 730u));
             mat3(350.926, -6.0, -84.30, 2.8, 9.4, 5.5, 2.9, 7.4, -15.77);
             uvec3(60200u, 80993u, 154846u);
             mat2 _GLF_SWITCH_0_29v, _GLF_SWITCH_0_30v;
             ;
             bvec2 _GLF_SWITCH_0_31v[46];
            }
            ;
            while((next_virtual_gid < subgroup_id))
             {
              (ivec2(-50950, -83971) , _GLF_SWITCH_0_3v);
              mat2x3(28.39, -0.8, -7.4, 473.887, -6.7, 4.2);
             }
            case 84:
            workgroup_size;
            vec4 _GLF_SWITCH_0_32v[40];
            break;
            case 48:
            mat4x2(mat3(-1605.1915, 1.9, -20.59, -543.427, 8.3, -1.3, 4.0, 1.1, 77.08));
            default:
            1;
           }
         }
         break;
         default:
         1;
        }
      }
     default:
     1;
    }
  }
 else
  {
   switch(_GLF_SWITCH((0 >> _GLF_IDENTITY(int(0), int(0)))))
    {
     case 52:
     int _GLF_SWITCH_1_0v[80], _GLF_SWITCH_1_1v[92], _GLF_SWITCH_1_2v;
     case 0:
     case 98:
     case 55:
     case 16:
     case 35:
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     break;
     default:
     1;
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
