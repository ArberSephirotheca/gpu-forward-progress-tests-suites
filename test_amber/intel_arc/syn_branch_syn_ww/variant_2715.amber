#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_1 {
 mat3x2 _f0;
 ivec2 _f1;
 mat3x4 _f2;
 ivec2 _f3;
 ivec2 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_0 {
 ivec3 _f0;
 mat2x4 _f1;
 mat3x2 _f2;
 mat3x4 _f3;
 mat3 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 uint subgroup_base;
} ;

struct _GLF_struct_3 {
 _GLF_struct_2 _f0;
 mat2x4 _f1;
 int _f2;
 ivec4 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-70.27)), bool(false))) < injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), false || ((_GLF_DEAD(false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)) && true)), bool(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)) && true)), false)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
        return;
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((60926 & 0) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
    }
   else
    {
    }
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), bool(bool(_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         break;
        }
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0), (true ? mat2x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0) : _GLF_FUZZED(mat2x4(-8.5, -7.3, -87.63, 6740.5207, 4.5, -6.2, 37.42, 368.072)))))).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-95.04), _GLF_FUZZED(-6182.8316)), bvec2(false, false))).x > injectionSwitch.y)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(7.0)), float(injectionSwitch.x), bool(true))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), ((false)) || false)) && true), true && (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))), ! (! ((_GLF_IDENTITY(false, ! (! (false)))))))) || false)) && true)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 1.0, exp(0.0)))), injectionSwitch.y))))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_IDENTITY(0 ^ 1, (0 ^ _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) << (1 ^ 1))) | 0)) * (0))); _GLF_IDENTITY(_injected_loop_counter --, 1 * (_injected_loop_counter --)))
          {
           return;
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) * uvec3(1u, 1u, 1u)), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_FUZZED(min(uvec3(188074u, 37139u, 190282u), uvec3(130235u, 78522u, 70188u))) : gl_NumWorkGroups)), clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)), _GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups)))), max(min(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)), (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups))) | uvec3(0u, 0u, 0u)), _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (gl_NumWorkGroups)), (~ (~ (gl_NumWorkGroups))) | (~ (~ (gl_NumWorkGroups)))), (_GLF_IDENTITY(~ (~ (gl_NumWorkGroups)), (~ (~ (gl_NumWorkGroups))) | (~ (~ (gl_NumWorkGroups))))) << uvec3(0u, 0u, 0u)))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups), clamp(clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups), clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups), clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups), clamp(clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups), clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups), clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups), clamp(clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups), clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups), clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups))))) >> uvec3(0u, 0u, 0u))) | (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups), clamp(clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups), clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups), clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)))))), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups), clamp(clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups), clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups), clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups), clamp(clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups), clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups), clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups), clamp(clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups), clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups), clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups))))) >> uvec3(0u, 0u, 0u))) | (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups), clamp(clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups), clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups), clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)))))), uvec3(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups), clamp(clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups), clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups), clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups), clamp(clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups), clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups), clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)))), (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups), clamp(clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups), clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups), clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups))))) >> uvec3(0u, 0u, 0u))) | (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups), clamp(clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups), clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups), clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)))))), 0u))))), _GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups))))))).x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, max(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(_GLF_IDENTITY(uvec3(gl_WorkGroupSize), (uvec3(gl_WorkGroupSize)) << uvec3(0u, 0u, 0u)))), gl_WorkGroupSize)).x, clamp(_GLF_IDENTITY(gl_WorkGroupSize.x, (false ? _GLF_FUZZED(subgroup_id) : gl_WorkGroupSize.x)), gl_WorkGroupSize.x, gl_WorkGroupSize.x)))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))), (_GLF_DEAD(false)) || false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               return;
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                 if(_GLF_DEAD(false))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(false))
              break;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) & (-20585 * 66921)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) | (0 >> _GLF_IDENTITY(int(5), int(5))))))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     continue;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(73.77), _GLF_FUZZED(4.1)), bvec2(false, false))).y, mix(float(_GLF_FUZZED(5.7)), float(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(73.77), _GLF_FUZZED(4.1)), bvec2(false, false))).y), bool(true))), injectionSwitch.y)) : _GLF_FUZZED(3.2)))))))
      break;
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) && true))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
        continue;
       return;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         continue;
        }
       break;
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true)) || false, ! (! (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true)) || false, (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true)) || false, true && ((_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true)) || false))) || false))))))))
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       break;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(atan(vec3(-5507.6921, -622.160, -34.20)[1])) : (injectionSwitch)[0])), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch)))[1], (_GLF_IDENTITY((injectionSwitch), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * ((injectionSwitch)))[1]) / 1.0)), vec2(1.0, 1.0) * (vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) / 1.0)))), vec2(_GLF_FUZZED(_GLF_IDENTITY((-3.8 / -188.529), (false ? _GLF_FUZZED(-0.5) : (_GLF_IDENTITY(-3.8, min(-3.8, -3.8)) / -188.529)))), _GLF_FUZZED(642.470)), bvec2(false, _GLF_IDENTITY(false, bool(bool(false)))))).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(atan(vec3(-5507.6921, -622.160, -34.20)[1])) : (injectionSwitch)[0])), _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[_GLF_IDENTITY(1, max(1, 1))]) / 1.0)), vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(6.5) : _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(8.0)), float(1.0), bool(true))), 1.0)))), float(vec4(1.0, 1.0, 0.0, 1.0))) : _GLF_IDENTITY(_GLF_FUZZED(-138.511), clamp(_GLF_FUZZED(-138.511), _GLF_FUZZED(-138.511), _GLF_FUZZED(-138.511))))), 1.0) * _GLF_IDENTITY((vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-2.4, -870.210)) : injectionSwitch)))), _GLF_IDENTITY(vec2(vec3(vec2(vec2(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-2.4, -870.210)) : injectionSwitch)))), sqrt(0.0))), min(vec2(vec3(vec2(vec2(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-2.4, -870.210)) : injectionSwitch)))), sqrt(0.0))), vec2(vec3(vec2(vec2(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-2.4, -870.210)) : injectionSwitch)))), sqrt(0.0))))))))[0], ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-2.4, -870.210)) : injectionSwitch)))), _GLF_IDENTITY(vec2(vec3(vec2(vec2(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-2.4, -870.210)) : injectionSwitch)))), sqrt(0.0))), min(vec2(vec3(vec2(vec2(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-2.4, -870.210)) : injectionSwitch)))), sqrt(0.0))), vec2(vec3(vec2(vec2(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-2.4, -870.210)) : injectionSwitch)))), sqrt(0.0))))))))[0]) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))))))[1], (_GLF_IDENTITY((injectionSwitch)[1], (false ? _GLF_FUZZED(4330.3364) : _GLF_IDENTITY((injectionSwitch)[1], float(vec3((injectionSwitch)[1], 0.0, 0.0)))))) / 1.0))), mix(vec2(_GLF_IDENTITY(((vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))))[1], ((injectionSwitch)[1]) / 1.0))))[0], clamp(((vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))))[1], ((injectionSwitch)[1]) / 1.0))))[0], ((vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))))[1], ((injectionSwitch)[1]) / 1.0))))[0], ((vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))))[1], ((injectionSwitch)[1]) / 1.0))))[0])), _GLF_IDENTITY(((vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))))[1], ((injectionSwitch)[1]) / 1.0))))[1], clamp(_GLF_IDENTITY((_GLF_IDENTITY((vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))))[1], ((injectionSwitch)[1]) / 1.0))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2x3((vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))))[1], ((injectionSwitch)[1]) / 1.0))), 0.0, 0.0, 1.0, 0.0), (true ? mat2x3((vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))))[1], ((injectionSwitch)[1]) / 1.0))), 0.0, 0.0, 1.0, 0.0) : _GLF_FUZZED(mat2x3(-4.1, -85.91, 6401.2971, -4665.5085, 3.7, -245.193))))), vec2(mat4x3(vec2(_GLF_IDENTITY(mat2x3((vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))))[1], ((injectionSwitch)[1]) / 1.0))), 0.0, 0.0, 1.0, 0.0), (true ? mat2x3((vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))))[1], ((injectionSwitch)[1]) / 1.0))), 0.0, 0.0, 1.0, 0.0) : _GLF_FUZZED(mat2x3(-4.1, -85.91, 6401.2971, -4665.5085, 3.7, -245.193))))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)))))[1], clamp(((vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))))[1], ((injectionSwitch)[1]) / 1.0))))[1], ((vec2(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], _GLF_FUZZED(571.736)), vec2(_GLF_FUZZED(6.6), ((injectionSwitch))[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))))[1], ((injectionSwitch)[1]) / 1.0))))[1], ((vec2((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))))[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))))[1], ((injectionSwitch)[1]) / 1.0))))[1])), ((vec2(_GLF_IDENTITY((injectionSwitch), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(8640.2333, 5.8)) : (injectionSwitch)))[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))))[1], ((injectionSwitch)[1]) / 1.0))))[1], ((vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))), (_GLF_IDENTITY(min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))), (true ? min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), min((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(sin(vec2(0.0, 0.0))))), (injectionSwitch)))) : _GLF_FUZZED(injectionSwitch)))) * vec2(1.0, 1.0)))[_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) - 0), 1))], ((injectionSwitch)[1]) / 1.0))))[1]))), vec2(_GLF_FUZZED(0.0), _GLF_FUZZED(7.6)), _GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false)))))), vec2(_GLF_FUZZED(_GLF_IDENTITY((-3.8 / -188.529), (false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-0.5, (-0.5) / 1.0), max(_GLF_IDENTITY(-0.5, (-0.5) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(-0.5, (-0.5) / 1.0), 1.0 * (_GLF_IDENTITY(-0.5, (-0.5) / 1.0)))))) : (_GLF_IDENTITY(_GLF_IDENTITY(-3.8, (true ? -3.8 : _GLF_FUZZED(715.370))), _GLF_IDENTITY(min(-3.8, -3.8), (min(-3.8, -3.8)) / 1.0)) / -188.529)))), _GLF_FUZZED(_GLF_IDENTITY(642.470, mix(float(_GLF_IDENTITY(642.470, (642.470) / 1.0)), float(_GLF_FUZZED(-4608.4420)), bool(false))))), bvec2(false, _GLF_IDENTITY(false, bool(bool(false)))))).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y)))))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             return;
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, false)))))))))
        return;
      }
     return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5119.5459)), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), vec2(mat3x4(clamp(injectionSwitch, injectionSwitch, injectionSwitch), 0.0, 1.0, 0.0, 0.0, 0.0, length(0.0), 1.0, 0.0, 1.0, 1.0)))), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))).y)), bool(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)).y)), true, true), bvec3(bvec3(bvec3(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)).y)), true, true))))))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 1.0)), _GLF_IDENTITY(vec2(vec4(vec2(vec3(injectionSwitch, 1.0)), sqrt(0.0), 1.0)), min(vec2(vec4(vec2(vec3(injectionSwitch, 1.0)), sqrt(0.0), 1.0)), vec2(vec4(vec2(vec3(injectionSwitch, 1.0)), sqrt(0.0), 1.0)))))).y))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(_GLF_struct_2(_GLF_struct_0(_GLF_IDENTITY(ivec3(1), ~ (~ (ivec3(1)))), mat2x4(1.0), mat3x2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-345.445)), float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), bool(true)))), mat3x4(1.0), _GLF_IDENTITY(mat3(1.0), mat3(mat3x4(mat3(1.0)))), vec2(1.0)), _GLF_struct_1(mat3x2(1.0), ivec2(1), mat3x4(1.0), ivec2(1), ivec2(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, _GLF_IDENTITY((1), int(ivec4((1), (1 & 1), 1, 1))) * (1 | 0))))), mat4x2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(2.7)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), subgroup_id * subgroup_size), mat2x4(1.0), 1, ivec4(1));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, true))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (false), ! (! (! (false))))))))))), _GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), true, false)))) ? _GLF_IDENTITY(_GLF_FUZZED(smoothstep(4883.9089, 6480.2293, 940.449)), max(_GLF_FUZZED(smoothstep(4883.9089, 6480.2293, 940.449)), _GLF_FUZZED(smoothstep(4883.9089, 6480.2293, 940.449)))) : _GLF_IDENTITY(injectionSwitch.x, float(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(721.873))), injectionSwitch.y)))) ? _GLF_FUZZED((176.905 / 84.15)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)), mix(vec2((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)))[1], ((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)))[1]) / 1.0)), vec2(_GLF_FUZZED(-4238.5102), _GLF_FUZZED(9.6)), bvec2(false, false))).x)), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, determinant(mat3(0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(1.0, sqrt(1.0), 0.0, _GLF_IDENTITY(determinant(mat2(1.0, 0.0, 1.0, 1.0)), max(determinant(mat2(1.0, 0.0, 1.0, 1.0)), _GLF_IDENTITY(determinant(mat2(1.0, 0.0, 1.0, 1.0)), clamp(determinant(mat2(1.0, 0.0, 1.0, 1.0)), determinant(mat2(1.0, 0.0, 1.0, 1.0)), determinant(mat2(1.0, 0.0, 1.0, 1.0)))))), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0), transpose(transpose(mat4x3(1.0, sqrt(1.0), 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0))))), clamp(float(_GLF_IDENTITY(mat4x3(1.0, sqrt(1.0), 0.0, _GLF_IDENTITY(determinant(mat2(1.0, 0.0, 1.0, 1.0)), max(determinant(mat2(1.0, 0.0, 1.0, 1.0)), _GLF_IDENTITY(determinant(mat2(1.0, 0.0, 1.0, 1.0)), clamp(determinant(mat2(1.0, 0.0, 1.0, 1.0)), determinant(mat2(1.0, 0.0, 1.0, 1.0)), determinant(mat2(1.0, 0.0, 1.0, 1.0)))))), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0), transpose(transpose(mat4x3(1.0, sqrt(1.0), 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0))))), float(_GLF_IDENTITY(mat4x3(1.0, sqrt(1.0), 0.0, _GLF_IDENTITY(determinant(mat2(1.0, 0.0, 1.0, 1.0)), max(determinant(mat2(1.0, 0.0, 1.0, 1.0)), _GLF_IDENTITY(determinant(mat2(1.0, 0.0, 1.0, 1.0)), clamp(determinant(mat2(1.0, 0.0, 1.0, 1.0)), determinant(mat2(1.0, 0.0, 1.0, 1.0)), determinant(mat2(1.0, 0.0, 1.0, 1.0)))))), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0), transpose(transpose(mat4x3(1.0, sqrt(1.0), 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0))))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(1.0, sqrt(1.0), 0.0, _GLF_IDENTITY(determinant(mat2(1.0, 0.0, 1.0, 1.0)), max(determinant(mat2(1.0, 0.0, 1.0, 1.0)), _GLF_IDENTITY(determinant(mat2(1.0, 0.0, 1.0, 1.0)), clamp(determinant(mat2(1.0, 0.0, 1.0, 1.0)), determinant(mat2(1.0, 0.0, 1.0, 1.0)), determinant(mat2(1.0, 0.0, 1.0, 1.0)))))), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0), transpose(transpose(mat4x3(1.0, sqrt(1.0), 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0))))), float(_GLF_IDENTITY(mat2x4(float(_GLF_IDENTITY(mat4x3(1.0, sqrt(1.0), 0.0, _GLF_IDENTITY(determinant(mat2(1.0, 0.0, 1.0, 1.0)), max(determinant(mat2(1.0, 0.0, 1.0, 1.0)), _GLF_IDENTITY(determinant(mat2(1.0, 0.0, 1.0, 1.0)), clamp(determinant(mat2(1.0, 0.0, 1.0, 1.0)), determinant(mat2(1.0, 0.0, 1.0, 1.0)), determinant(mat2(1.0, 0.0, 1.0, 1.0)))))), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0), transpose(transpose(mat4x3(1.0, sqrt(1.0), 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0))))), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0), (mat2x4(float(_GLF_IDENTITY(mat4x3(1.0, sqrt(1.0), 0.0, _GLF_IDENTITY(determinant(mat2(1.0, 0.0, 1.0, 1.0)), max(determinant(mat2(1.0, 0.0, 1.0, 1.0)), _GLF_IDENTITY(determinant(mat2(1.0, 0.0, 1.0, 1.0)), clamp(determinant(mat2(1.0, 0.0, 1.0, 1.0)), determinant(mat2(1.0, 0.0, 1.0, 1.0)), determinant(mat2(1.0, 0.0, 1.0, 1.0)))))), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0), transpose(transpose(mat4x3(1.0, sqrt(1.0), 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0))))), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0)) + mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), min(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(1.0, sqrt(1.0), 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0), transpose(transpose(mat4x3(1.0, sqrt(1.0), _GLF_IDENTITY(0.0, (0.0) / 1.0), determinant(mat2(1.0, 0.0, 1.0, 1.0)), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0))))), (true ? float(_GLF_IDENTITY(mat4x3(1.0, sqrt(1.0), 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0), transpose(transpose(mat4x3(1.0, sqrt(1.0), _GLF_IDENTITY(0.0, (0.0) / 1.0), determinant(mat2(1.0, 0.0, 1.0, 1.0)), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0))))) : _GLF_FUZZED(length(vec3(-15.03, 57.92, -9.8))))), float(_GLF_IDENTITY(mat4x3(1.0, sqrt(1.0), 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0), transpose(transpose(mat4x3(1.0, sqrt(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0))), 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0)))))))), 0.0, _GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, round(length(normalize(vec3(_GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0, 1.0)))), 1.0, 1.0, sin(0.0), 1.0, 0.0, _GLF_IDENTITY(abs(_GLF_IDENTITY(0.0, (0.0) / 1.0)), clamp(abs(_GLF_IDENTITY(0.0, (0.0) / 1.0)), abs(_GLF_IDENTITY(0.0, (0.0) / 1.0)), abs(_GLF_IDENTITY(0.0, (0.0) / 1.0)))), 0.0, 0.0))), 1.0, 0.0, 0.0, 0.0)), tan(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(9.2)), float(0.0), bool(true))))), 0.0, 0.0))), 0.0))))) > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(smoothstep(4883.9089, 6480.2293, 940.449)) : _GLF_IDENTITY(injectionSwitch.x, float(mat3x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, tan(0.0) + (1.0)), (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))) ? 1.0 : _GLF_FUZZED(53.19))), 1.0, _GLF_IDENTITY(1.0, (1.0) / abs(1.0)), determinant(mat3(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), 0.0))) / 1.0), max(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), float(mat2x4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(0.0, max(0.0, 0.0))))), float(_GLF_FUZZED(-8454.4265)), bool(false))))), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2x3(0.0, 1.0, 1.0, 0.0, abs(1.0), 1.0)), clamp(float(mat2x3(0.0, 1.0, 1.0, 0.0, abs(1.0), 1.0)), float(mat2x3(0.0, 1.0, 1.0, 0.0, abs(1.0), 1.0)), float(mat2x3(0.0, 1.0, 1.0, 0.0, abs(1.0), 1.0))))))))), tan(0.0), 0.0))))) > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))
    return;
  }
 else
  {
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_3._f0.subgroup_base, (_GLF_struct_replacement_3._f0.subgroup_base) >> _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(2u, ~ (~ (_GLF_IDENTITY(2u, _GLF_IDENTITY((2u), ((2u)) | ((2u))) ^ 0u))))), uint(2u))), ((0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(2u, ~ (~ (_GLF_IDENTITY(2u, (2u) ^ 0u))))), uint(2u)))) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(0u, 0u))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))) + _GLF_IDENTITY(subgroup_local_id, (_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (! (true)))), (_GLF_IDENTITY(bool(true), _GLF_IDENTITY(false || (bool(true)), (_GLF_IDENTITY(false || (bool(true)), bool(bvec3(false || (bool(true)), true, true)))) && true))) && true)), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY(bool(true), _GLF_IDENTITY((bool(true)) && true, ! (! (_GLF_IDENTITY((bool(true)) && true, ((bool(_GLF_IDENTITY(true, (true) || false))) && true) || false)))))))), _GLF_IDENTITY(! (! ((! (bool(_GLF_IDENTITY(bool(true), _GLF_IDENTITY((bool(_GLF_IDENTITY(true, (true) && true))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((bool(_GLF_IDENTITY(true, (true) || false))), bool(_GLF_IDENTITY(bool((bool(_GLF_IDENTITY(true, (true) || false)))), (bool((bool(_GLF_IDENTITY(true, (true) || false))))) || false))) && true), bool(bool(! ((bool(true)) && true)))))))))))), (_GLF_IDENTITY(! (! ((! (bool(_GLF_IDENTITY(bool(true), _GLF_IDENTITY((bool(_GLF_IDENTITY(true, (true) && true))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((bool(_GLF_IDENTITY(true, (true) || false))), bool(_GLF_IDENTITY(bool((bool(_GLF_IDENTITY(true, (true) || false)))), (bool((bool(_GLF_IDENTITY(true, (true) || false))))) || false))) && true), bool(bool(! ((bool(true)) && true)))))))))))), ! (! (! (! ((! (bool(_GLF_IDENTITY(bool(true), _GLF_IDENTITY((bool(_GLF_IDENTITY(true, (true) && true))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((bool(_GLF_IDENTITY(true, (true) || false))), bool(_GLF_IDENTITY(bool((bool(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (true) || false)))), (bool((_GLF_IDENTITY(bool(_GLF_IDENTITY(true, (true) || false)), (bool(_GLF_IDENTITY(true, (true) || false))) || false)))) || false))) && true), bool(bool(! ((_GLF_IDENTITY(bool(true), bool(bvec4(bool(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))) && true)))))))))))))))) || false)))), (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_local_id, 1u, 0u, 0u), _GLF_IDENTITY((uvec4(subgroup_local_id, 1u, 0u, 0u)), ((uvec4(subgroup_local_id, 1u, 0u, 0u))) | uvec4(0u, 0u, 0u, 0u)) / uvec4(1u, 1u, 1u, 1u))), (false ? _GLF_FUZZED(subgroup_local_id) : uint(uvec4(_GLF_IDENTITY(subgroup_local_id, 0u ^ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u))), 1u, 0u, 0u))))) : _GLF_FUZZED(64382u)));
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_struct_replacement_3._f0.subgroup_base, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_struct_replacement_3._f0.subgroup_base, 0u + (_GLF_IDENTITY(workgroup_base, 0u ^ (_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u))) + _GLF_struct_replacement_3._f0.subgroup_base)), clamp(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_3._f0.subgroup_base, 0u + (_GLF_struct_replacement_3._f0.subgroup_base)), (workgroup_base + _GLF_struct_replacement_3._f0.subgroup_base) >> 0u), workgroup_base + _GLF_struct_replacement_3._f0.subgroup_base, _GLF_IDENTITY(workgroup_base + _GLF_struct_replacement_3._f0.subgroup_base, max(workgroup_base + _GLF_struct_replacement_3._f0.subgroup_base, _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_3._f0.subgroup_base, (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_struct_replacement_3._f0.subgroup_base : _GLF_FUZZED(subgroup_size))), (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_3._f0.subgroup_base, (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_struct_replacement_3._f0.subgroup_base : _GLF_FUZZED(subgroup_size))), clamp(workgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_3._f0.subgroup_base, (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_struct_replacement_3._f0.subgroup_base : _GLF_FUZZED(subgroup_size))), workgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_3._f0.subgroup_base, (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_struct_replacement_3._f0.subgroup_base : _GLF_FUZZED(subgroup_size))), workgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_3._f0.subgroup_base, (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_struct_replacement_3._f0.subgroup_base : _GLF_FUZZED(subgroup_size)))))) - 0u))))))), (workgroup_base + _GLF_struct_replacement_3._f0.subgroup_base) | (_GLF_IDENTITY(workgroup_base + _GLF_struct_replacement_3._f0.subgroup_base, (workgroup_base + _GLF_struct_replacement_3._f0.subgroup_base) / 1u))) + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(min(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size)), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u))) + 1) % subgroup_size, clamp((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u), (subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size))), max(_GLF_IDENTITY(min(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size)), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u))) + 1) % subgroup_size, clamp((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u), (subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size))), (_GLF_IDENTITY(min(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size)), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u))) + 1) % subgroup_size, clamp((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u), (subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size))), (min(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size)), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u))) + 1) % subgroup_size, clamp((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u), (subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size)))) / 1u)) | 0u), _GLF_IDENTITY(min(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size)), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u))) + 1) % subgroup_size, clamp((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u), (subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size))), uint(uvec2(min(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size)), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u))) + 1) % subgroup_size, clamp((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u), (subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size))), 1u))))))), ((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), 0u ^ ((subgroup_local_id + 1))) % subgroup_size, min(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size)), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size)))), _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(clamp((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(clamp((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size), min(clamp((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size), clamp((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size)))) ^ 0u)))))) << (170214u & 0u));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))))))));
        }
      }
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, determinant(mat3(0.0, 0.0, 1.0, sin(0.0), 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0, 0.0))).x : _GLF_FUZZED(-7.0))))) > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       atomicStore(buf[virtual_gid], uint(_GLF_IDENTITY(1, min(1, 1))), 4, 64, 4);
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           else
            {
            }
          }
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, false)), _GLF_IDENTITY(bool(bvec2(bool(bvec3(_GLF_DEAD(false), false, false)), false)), false || (bool(bvec2(bool(bvec3(_GLF_DEAD(false), false, false)), false)))))), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, false)), (_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, false)), true && (bool(bvec3(_GLF_DEAD(false), false, false))))) && true), false)), false || (bool(bvec2(bool(bvec3(_GLF_DEAD(false), false, false)), false))))))) || false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   return;
  }
 if(_GLF_IDENTITY((subgroup_local_id % _GLF_IDENTITY(2, _GLF_IDENTITY((2) - 0, (false ? _GLF_FUZZED(_GLF_IDENTITY(3210, 1 * (3210))) : _GLF_IDENTITY((2) - 0, int(ivec3((2) - 0, 1, 0))))))), (false ? _GLF_FUZZED(subgroup_local_id) : (subgroup_local_id % _GLF_IDENTITY(2, _GLF_IDENTITY((_GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (2) / 1), 2))) - 0, (false ? _GLF_FUZZED(3210) : _GLF_IDENTITY((2) - 0, int(ivec3((2) - 0, 1, 0))))))))) == 0)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    return;
   do
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bool(_GLF_WRAPPED_IF_FALSE(false)))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) ^ (0 >> _GLF_IDENTITY(int(7), int(7)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2)))), ~ (~ (0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(max(int(2), int(2)), (false ? _GLF_FUZZED(69042) : max(int(2), int(2))))))))))); _injected_loop_counter --)
        {
         atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(2, _GLF_IDENTITY((2), max((2), (2))) + _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), min(~ (0), ~ (0))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2, _GLF_IDENTITY((2), (_GLF_IDENTITY((2), int(_GLF_IDENTITY(ivec2((2), 1), max(ivec2((2), 1), ivec2((2), 1)))))) + 0) + _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (0), min(~ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec2(0, 1)))) << 0)), ~ (0))), clamp(_GLF_IDENTITY(~ (0), min(~ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec2(0, 1)))) << 0)), ~ (0))), _GLF_IDENTITY(~ (0), min(~ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec2(0, 1)))) << 0)), ~ (0))), _GLF_IDENTITY(~ (0), min(~ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec2(0, 1)))) << 0)), ~ (0))))))))), (uint(_GLF_IDENTITY(2, (2) + _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), min(~ (0), ~ (0)))))))) | (uint(_GLF_IDENTITY(2, (2) + _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (0), min(~ (0), ~ (0))), min(_GLF_IDENTITY(~ (0), min(~ (0), ~ (0))), _GLF_IDENTITY(~ (0), min(~ (0), ~ (0))))))))))), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(uint(_GLF_IDENTITY(2, _GLF_IDENTITY((2), (_GLF_IDENTITY((2), int(_GLF_IDENTITY(ivec2((2), 1), max(ivec2((2), _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), min(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, ~ (~ (1)))))), ivec2((2), _GLF_IDENTITY(1, clamp(1, 1, 1)))))))) + _GLF_IDENTITY(0, 0 + (0))) + _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), ~ (_GLF_IDENTITY(~ (0), min(~ (_GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec2(0, 1))), min(_GLF_IDENTITY(0, int(ivec2(0, 1))), _GLF_IDENTITY(0, int(ivec2(0, 1)))))) << 0)), ~ (0))))))), (uint(_GLF_IDENTITY(2, (2) + _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), min(~ (0), ~ (0)))))))) | (uint(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | 0), (2) + _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (0), min(~ (_GLF_IDENTITY(0, max(0, 0))), ~ (0))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (0), min(~ (_GLF_IDENTITY(0, max(0, 0))), ~ (0))), (_GLF_IDENTITY(~ (0), min(~ (_GLF_IDENTITY(0, max(0, 0))), ~ (0)))) * 1)) | (0 << _GLF_IDENTITY(int(4), int(4)))))))))))), uint(_GLF_IDENTITY(2, (2) + _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (0), clamp(~ (0), _GLF_IDENTITY(~ (0), (~ (0)) | (~ (0))), _GLF_IDENTITY(~ (0), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) + 0)), ((_GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) + 0))) | ((_GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) + 0))))))), min(~ (0), ~ (0))))))), uint(_GLF_IDENTITY(2, _GLF_IDENTITY((2) + _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), min(~ (0), ~ (0))))), ~ (~ ((2) + _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), min(~ (0), ~ (0)))))))))))), _GLF_IDENTITY(4, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (4), (~ (4)) ^ _GLF_IDENTITY(0, int(int(_GLF_IDENTITY(0, (0) | (0))))))), ((_GLF_IDENTITY(~ _GLF_IDENTITY((4), ((4)) - 0), (_GLF_IDENTITY(~ (4), (false ? _GLF_FUZZED((_injected_loop_counter - atomicAdd(_injected_loop_counter, -18640))) : ~ (4)))) ^ 0))) | ((_GLF_IDENTITY(~ (4), (~ (4)) ^ 0))))), 64, 4);
        }
      }
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))), false, false, true))))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), max(int(3), int(3))), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), max(int(3), int(3)))) * 1), int(3))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(true, (true) && true)), bvec2(bvec2(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(true, (true) && true)))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), (_GLF_IDENTITY(true, true && (true))) && true)), bvec2(bvec2(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(true, (true) && true)))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(true, (true) && true)), bvec2(bvec2(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(true, (true) && true))))))), false || ((bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(true, (true) && true)), bvec2(bvec2(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(true, (true) && true))))))))) && true), false)), (bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))), _GLF_IDENTITY(true, (true) && true)), bvec2(bvec2(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY((true) && true, ! (_GLF_IDENTITY(! ((true) && true), (_GLF_IDENTITY(! ((true) && true), bool(bvec3(! ((true) && true), false, false)))) && true))), (_GLF_IDENTITY(_GLF_IDENTITY((true) && true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((true) && true, ! (_GLF_IDENTITY(! ((true) && true), bool(bvec3(! ((true) && true), true, false))))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((true) && true, ! (_GLF_IDENTITY(! ((true) && true), bool(bvec3(! ((true) && true), true, false))))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY((true) && true, ! (_GLF_IDENTITY(! ((true) && true), bool(bvec3(! ((true) && true), true, false))))), false)))), true)))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((true) && true, ! (_GLF_IDENTITY(! ((true) && true), bool(bvec3(! ((true) && true), true, false))))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((true) && true, ! (_GLF_IDENTITY(! ((true) && true), bool(bvec3(! ((true) && true), true, false))))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY((true) && true, ! (_GLF_IDENTITY(! ((true) && true), bool(bvec3(! ((true) && true), true, false))))), false)))), true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! ((true) && true), (_GLF_IDENTITY(! (_GLF_IDENTITY((true), true && (_GLF_IDENTITY((true), ((true)) && true))) && true), bool(bvec3(! ((true) && true), false, false)))) && true)))) && true))))))), (bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(true, (true) && true)), bvec2(bvec2(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(true, (true) && true))))))) && true), _GLF_IDENTITY(false, false || (false))))) && true))))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = (((1 & 1) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           return;
          }
        }
       atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(_GLF_IDENTITY(4, max(_GLF_IDENTITY(4, _GLF_IDENTITY((4), (false ? _GLF_FUZZED(26684) : _GLF_IDENTITY((4), clamp((4), (4), (4))))) - 0), 4)), (4) | int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)) : _GLF_FUZZED(injectionSwitch))).x))), 64, 4);
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) && true)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec4(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, false, false)))))))))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) ^ _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (_GLF_IDENTITY(0, _GLF_IDENTITY((0), ((0)) | 0) << 0)) << 0))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec4((false), false, true, false)))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             continue;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)) || false, ! (! ((_GLF_WRAPPED_IF_FALSE(false)) || false)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), true))), (_GLF_WRAPPED_IF_FALSE(false)) || false)) || false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false)), ((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false))))) || false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-84.53)), bool(false))) > injectionSwitch.y)) || (false)), _GLF_IDENTITY(false, ! (! (false))))))))
                continue;
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) | 0)), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) | 0))), (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) | 0)))) || false))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
                  continue;
                 if(_GLF_DEAD(false))
                  break;
                }
               return;
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))))
              break;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))) && true))), (true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)))) && true))) && true)))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY(-346.895, 1.0 * (-346.895)))), bvec2(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))), false))).y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), min(min(injectionSwitch.y, injectionSwitch.y), min(injectionSwitch.y, injectionSwitch.y)))))))))
            break;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))) && (_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), false || ((! (_GLF_DEAD(false)))))))), (_GLF_DEAD(false)) && true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             continue;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          return;
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), (! (_GLF_IDENTITY(true, false || (true)))) && true))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     else
      {
      }
    }
  }
 for(int _injected_loop_counter = (((1 | 0) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, int(ivec2(2, 0)))) >> (0 ^ 0))), (int(2)) | 0))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 | (int(2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec3(0, 1, 0), (ivec3(0, 1, 0)) - ivec3(0, 0, 0))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
