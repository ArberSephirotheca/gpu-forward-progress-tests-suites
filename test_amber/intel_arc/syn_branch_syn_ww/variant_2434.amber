#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 if((subgroup_local_id % 2) == 0)
  {
   switch(_GLF_SWITCH(0))
    {
     case 53:
     if(true)
      {
       mat3(vec3(8.5, 23.75, 5.1), vec3(2.5, 785.299, 5.6), vec3(-165.203, 9356.8460, -513.298));
       ;
       if((mat4x3(-372.629) != mat4x3(-7.5, 90.02, -1609.3520, -6.4, -2.0, 7776.1248, 455.871, 5.7, -44.00, 5.2, 9536.0521, 55.31)))
        {
         while(true)
          {
           mat4(27.15, -56.86, -3.9, -7562.8379, 2.8, -343.819, -7574.4878, -479.938, 38.26, -80.28, 5786.3108, 4915.2069, 371.297, -8012.2828, 95.21, -936.518);
           (uvec3(93389u, 144374u, 136699u) >> subgroup_local_id);
           ivec3 _GLF_SWITCH_0_0v, _GLF_SWITCH_0_1v;
           _GLF_SWITCH_0_0v;
           bvec3 _GLF_SWITCH_0_2v[55], _GLF_SWITCH_0_3v;
           ;
           _GLF_SWITCH_0_0v.pss;
          }
         while((-2.4 >= -811.025))
          {
          }
         mat2 _GLF_SWITCH_0_4v, _GLF_SWITCH_0_5v;
         ivec2 _GLF_SWITCH_0_6v, _GLF_SWITCH_0_7v, _GLF_SWITCH_0_8v;
         if(true)
          {
           bvec2(true, true);
           ivec3(80568, 73775, -50610);
           uvec4 _GLF_SWITCH_0_9v[53], _GLF_SWITCH_0_10v;
          }
         uvec4 _GLF_SWITCH_0_11v, _GLF_SWITCH_0_12v[33], _GLF_SWITCH_0_13v;
         mat4(-0.2, 2.1, 739.492, 817.163, -31.15, 50.82, 946.620, -9857.3538, 5489.7818, -8.7, 86.05, 159.573, -7.2, 1635.2760, -2.6, -6.2);
         {
          _GLF_SWITCH_0_5v;
          vec2(31.89, -1.7);
          outerProduct(mat3x4(5.4, -1.3, -51.09, 8389.9477, -41.88, 0.6, 1870.9602, -0.8, -7.9, 6316.4615, 57.03, 6436.6124)[1], vec4(77.00, -4.5, -4338.7934, -1.7));
          ivec3 _GLF_SWITCH_0_14v;
          bvec2 _GLF_SWITCH_0_15v, _GLF_SWITCH_0_16v;
          ivec4 _GLF_SWITCH_0_17v, _GLF_SWITCH_0_18v[60];
         }
        }
       for(mat3 _GLF_SWITCH_0_19v[12], _GLF_SWITCH_0_20v[39]; true; vec4(-1.0, -23.65, -747.350, 4674.5891).xzyx)
        {
        }
       mat4(0.5, 9.3, -161.399, 5.7, -5621.5073, 3454.8520, -2680.4474, 2089.1189, 82.74, -2513.4399, -7.3, -5.0, -1074.8499, -373.615, 1.0, -2.9);
       ivec3 _GLF_SWITCH_0_21v[57], _GLF_SWITCH_0_22v, _GLF_SWITCH_0_23v;
       mat4 _GLF_SWITCH_0_24v, _GLF_SWITCH_0_25v, _GLF_SWITCH_0_26v;
       for(vec4 _GLF_SWITCH_0_27v, _GLF_SWITCH_0_28v; (vec3(-41.85, 9.2, -1.5) != (208.405 * vec3(97.56, 5556.9248, 9030.6453))); uvec4(179058u, 175967u, 144073u, 115273u))
        {
         mix(bvec2(false, false), bvec2(false, false), bvec2(false, true));
         {
          switch(_GLF_SWITCH(0))
           {
            case 6:
            (87.09 + mat4x2(-521.784, -705.293, -15.20, 247.480, 2832.7244, 4909.1919, -6681.6459, -52.71));
            case 70:
            mat3(2355.1705, 480.723, -274.897, -20.50, -2.7, 589.070, 7133.7358, 4.4, 7.7);
            case 0:
            case 69:
            vec2(sin(-3932.9958), 248.375);
            case 44:
            case 37:
            case 42:
            ;
            case 62:
            mat2x3 _GLF_SWITCH_0_29v, _GLF_SWITCH_0_30v[99], _GLF_SWITCH_0_31v;
            case 98:
            vec3 _GLF_SWITCH_0_32v;
            break;
            case 76:
            ;
            case 17:
            bvec2(false, false).rggg;
            default:
            1;
           }
         }
         while((_GLF_SWITCH_0_28v == _GLF_SWITCH_0_27v))
          {
           mat2x3(mat3x2(-13.67, 1.6, 2.7, -524.583, -145.884, 159.186));
           mat4x3 _GLF_SWITCH_0_33v;
          }
         while((bvec3(true, false, false) == bvec3(false, true, false)))
          {
           ivec4 _GLF_SWITCH_0_34v[85];
           greaterThanEqual(((uvec2(24716u, 163726u) + uvec2(195066u, 92437u)) - (subgroup_id & workgroup_base)), uvec2(31204u, 62516u));
          }
         for(ivec3 _GLF_SWITCH_0_35v, _GLF_SWITCH_0_36v; true; bvec4(false, true, false, false))
          {
           switch(_GLF_SWITCH(0))
            {
             case 69:
             bvec4(false, true, true, true);
             case 15:
             vec2 _GLF_SWITCH_1_0v[86], _GLF_SWITCH_1_1v[99], _GLF_SWITCH_1_2v;
             case 0:
             case 58:
             case 1:
             case 40:
             case 88:
             case 33:
             equal(injectionSwitch, injectionSwitch);
             break;
             case 66:
             ;
             case 9:
             vec3(-625.616, 3.3, 2480.1161);
             default:
             1;
            }
          }
        }
       (vec3(-7.2, -26.11, -586.488) , mat4x2(-63.68, -0.3, -6.9, 0.3, 985.727, 5.9, -6544.3355, 3.2));
      }
     case 0:
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     break;
     case 9:
     uvec3(95414u, 113921u, 95643u);
     default:
     1;
    }
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
