#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_10 {
 mat4 _f0;
 mat4 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_11 {
 _GLF_struct_10 _f0;
 mat2 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_8 {
 vec2 _f0;
 float _f1;
 vec4 _f2;
 uvec3 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_7 {
 uvec4 _f0;
 bool _f1;
 mat3 _f2;
 bool _f3;
 vec2 _f4;
 ivec4 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_6 {
 bvec2 _f0;
 mat3 _f1;
 vec3 _f2;
 uvec4 _f3;
 int _f4;
} ;

struct _GLF_struct_5 {
 mat2x3 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_9 {
 _GLF_struct_5 _f0;
 _GLF_struct_6 _f1;
 _GLF_struct_7 _f2;
 _GLF_struct_8 _f3;
} ;

struct _GLF_struct_3 {
 uint _f0;
 mat3 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_4 {
 bool _f0;
 _GLF_struct_3 _f1;
} ;

struct _GLF_struct_12 {
 _GLF_struct_4 _f0;
 _GLF_struct_9 _f1;
 ivec3 _f2;
 ivec3 _f3;
 int _injected_loop_counter;
 _GLF_struct_11 _f4;
 vec3 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_0 {
 mat4x3 _f0;
 uint _f1;
} ;

struct _GLF_struct_1 {
 vec2 _f0;
 uint workgroup_size;
 bvec2 _f1;
 _GLF_struct_0 _f2;
} ;

struct _GLF_struct_2 {
 uvec3 _f0;
 mat2 _f1;
 mat2 _f2;
 _GLF_struct_1 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(((0 >> _GLF_IDENTITY(int(8), int(8))) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 0 | (_GLF_IDENTITY(int(1), int(1))))), _GLF_IDENTITY((((0 >> _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, clamp(_GLF_IDENTITY(8, max(8, 8)), 8, 8))) / (1 & 1))))) << _GLF_IDENTITY(int(1), int(1)))), int(_GLF_IDENTITY(ivec2((((0 >> _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, clamp(_GLF_IDENTITY(8, max(8, 8)), 8, 8))) / (1 & 1))))) << _GLF_IDENTITY(int(1), int(1)))), (0 >> _GLF_IDENTITY(int(3), int(3)))), ~ (~ (ivec2((((0 >> _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, clamp(_GLF_IDENTITY(8, max(8, 8)), 8, 8))) / (1 & 1))))) << _GLF_IDENTITY(int(1), int(1)))), (0 >> _GLF_IDENTITY(int(3), int(3))))))))) | (_GLF_IDENTITY(((0 >> _GLF_IDENTITY(int(8), int(8))) << _GLF_IDENTITY(int(1), int(1))), 0 | (((0 >> _GLF_IDENTITY(int(8), int(8))) << _GLF_IDENTITY(int(1), int(1))))))) | 0), (_injected_loop_counter != (((0 >> _GLF_IDENTITY(int(8), int(8))) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(1), int(_GLF_IDENTITY(1, (1) + (0 >> _GLF_IDENTITY(int(2), int(2))))))))) | 0)) && true)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         break;
        }
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
      return;
     barrier();
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(uvec3(1u), mat2(1.0), mat2(1.0), _GLF_struct_1(vec2(1.0), gl_WorkGroupSize.x, bvec2(_GLF_IDENTITY(true, (true) && true)), _GLF_struct_0(mat4x3(_GLF_IDENTITY(1.0, 1.0 * _GLF_IDENTITY((1.0), float(mat2x4(_GLF_IDENTITY((1.0), mix(float(_GLF_FUZZED(-2.3)), float((1.0)), bool(true))), 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-0.7)), bool(false)))), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-4.1)), bool(false)))))))), vec4(1.0, 1.0, 0.0, 1.0))), min(_GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-0.7)), bool(false)))), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-4.1)), bool(false)))))))), vec4(1.0, 1.0, 0.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-0.7)), bool(false)))), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-4.1)), bool(false)))))))), vec4(1.0, 1.0, 0.0, 1.0))), max(_GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-0.7)), bool(false)))), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-4.1)), bool(false)))))))), vec4(1.0, 1.0, 0.0, 1.0))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-0.7)), bool(false)))), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-4.1)), bool(false)))))))), vec4(1.0, 1.0, 0.0, 1.0))))))), 0.0))))), 1u)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
    {
    }
   else
    {
     return;
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(_GLF_struct_replacement_2._f3.workgroup_size, ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) | (1u << _GLF_IDENTITY(uint(7u), uint(_GLF_IDENTITY(7u, min(7u, 7u))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), (true ? uint(7u) : _GLF_FUZZED(_GLF_IDENTITY(42433u, (true ? 42433u : _GLF_FUZZED(subgroup_id)))))), _GLF_IDENTITY(uint(7u), (uint(7u)) - 0u))) * (_GLF_IDENTITY(_GLF_struct_replacement_2._f3.workgroup_size, max(_GLF_struct_replacement_2._f3.workgroup_size, _GLF_struct_replacement_2._f3.workgroup_size)))) * _GLF_IDENTITY(workgroup_id, (workgroup_id) / 1u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      break;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   for(_GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(_GLF_struct_4(true, _GLF_struct_3(_GLF_IDENTITY(1u, ~ (~ (1u))), mat3(1.0), vec2(1.0))), _GLF_struct_9(_GLF_struct_5(mat2x3(1.0), ivec3(1)), _GLF_struct_6(bvec2(_GLF_IDENTITY(true, (true) && true)), mat3(1.0), vec3(1.0), uvec4(1u), 1), _GLF_struct_7(uvec4(_GLF_IDENTITY(1u, (1u) * (1u & 1u))), true, mat3(1.0), true, _GLF_IDENTITY(vec2(1.0), _GLF_IDENTITY((vec2(1.0)) * mat2(1.0), ((vec2(1.0)) * mat2(1.0)) * mat2(1.0))), ivec4(1), ivec4(1)), _GLF_struct_8(vec2(1.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0))), (true ? _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0))) : _GLF_FUZZED(9.0))), vec4(1.0), uvec3(1u), mat4x3(1.0))), ivec3(1), ivec3(1), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 1.0, determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), mat3(mat3(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))), 1.0, 0.0, 1.0, 0.0, cos(0.0), 1.0, 1.0)), _GLF_IDENTITY((true ? vec2(mat4x3(injectionSwitch, 0.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, 0.0, 1.0, 0.0, cos(0.0), 1.0, 1.0)) : _GLF_FUZZED(vec2(-0.7, 9867.2110))), mix(vec2(_GLF_FUZZED(vec4(3.9, 36.31, 12.33, 3.9).p), _GLF_FUZZED(-941.679)), vec2(((true ? vec2(mat4x3(injectionSwitch, 0.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-9.0)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), cos(0.0), 1.0, 1.0)) : _GLF_FUZZED(vec2(-0.7, 9867.2110))))[0], ((true ? vec2(mat4x3(injectionSwitch, 0.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, 0.0, 1.0, 0.0, cos(0.0), 1.0, 1.0)) : _GLF_FUZZED(vec2(-0.7, 9867.2110))))[1]), bvec2(true, true))))).x)), _GLF_struct_11(_GLF_struct_10(mat4(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(5.5)), bool(false)))), mat4(1.0), vec2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-8398.7460)), bool(false))))), mat2(1.0), mat3(_GLF_IDENTITY(1.0, min(1.0, 1.0)))), vec3(1.0), mat3(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_12._injected_loop_counter < _GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY(clamp(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(int(int(6)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), int(int(int(6))))), clamp(~ (_GLF_IDENTITY(int(6), int(int(int(6))))), ~ (_GLF_IDENTITY(int(6), int(int(int(6))))), ~ (_GLF_IDENTITY(int(6), int(int(int(6))))))))), int(6)), clamp(clamp(int(6), _GLF_IDENTITY(int(6), int(int(int(6)))), int(6)), clamp(int(_GLF_IDENTITY(6, _GLF_IDENTITY(int(int(_GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, 0 | (6)))))), (false ? _GLF_FUZZED(-97371) : int(int(_GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, _GLF_IDENTITY(0 | (6), (0 | (6)) / 1)))))))))), _GLF_IDENTITY(int(6), int(int(int(6)))), int(6)), clamp(int(6), _GLF_IDENTITY(int(6), int(int(int(6)))), int(6)))))), max(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, clamp(6, 6, 6))) ^ (0 | 0))), _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(int(int(6)), clamp(int(int(6)), int(_GLF_IDENTITY(int(6), (int(6)) + 0)), int(int(6)))))), min(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(int(int(6)), clamp(int(int(6)), int(_GLF_IDENTITY(int(6), (int(6)) + 0)), int(int(6)))))), _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), (int(6)) | 0)), clamp(_GLF_IDENTITY(int(int(6)), int(ivec4(int(int(6)), 0, ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | 0))), 1))), int(_GLF_IDENTITY(int(6), (int(6)) + 0)), int(int(6)))))))), _GLF_IDENTITY(int(_GLF_IDENTITY(6, max(6, 6))), max(_GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(6, 0 | (6)))), ~ (~ (~ (int(6)))))))), min(int(int(6)), int(int(6)))), (_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), ~ (~ (~ (int(6)))))))), min(int(int(6)), int(int(6))))) >> 0)), ~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), ~ (~ (~ (int(6)))))))), (false ? _GLF_FUZZED(-98139) : int(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), ~ (~ (~ (int(6)))))))))), min(_GLF_IDENTITY(int(int(6)), (_GLF_IDENTITY(int(int(6)), clamp(int(int(6)), int(int(6)), int(int(6))))) + 0), int(int(6)))))), clamp(~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), ~ (~ (~ (int(6)))))))), min(int(int(6)), int(int(6)))))), _GLF_IDENTITY(~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), ~ (_GLF_IDENTITY(~ (int(6)), ~ (~ (~ (int(6)))))))), min(int(int(6)), int(int(6)))))), (~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), ~ (~ (~ (int(6)))))))), min(int(int(6)), int(int(6))))))) - 0), ~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), ~ (~ (~ (int(6)))))))), min(int(int(6)), int(int(6)))))))))), 1 * (int(_GLF_IDENTITY(int(int(6)), min(int(int(6)), int(int(_GLF_IDENTITY(6, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(ivec4(-39534, 12353, 52603, -14337).g) : 6)))))))))), int(6)))))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), int(int(int(6)))), int(6))))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (0 | (0 | 0)) | (_GLF_IDENTITY(int(6), _GLF_IDENTITY(0 + (_GLF_IDENTITY(int(6), min(int(6), int(6)))), 0 ^ (_GLF_IDENTITY(0 + (_GLF_IDENTITY(int(6), min(int(6), int(6)))), ~ (~ (0 + _GLF_IDENTITY((_GLF_IDENTITY(int(6), min(int(6), int(6)))), ((_GLF_IDENTITY(int(6), min(int(6), int(6))))) / 1))))))))), _GLF_IDENTITY((int(6)) + 0, (_GLF_IDENTITY((int(6)) + 0, ((int(_GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), int(int(_GLF_IDENTITY(6, min(6, 6))))))) + 0) ^ 0)) | ((int(6)) + 0))))), clamp(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY(clamp(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(int(int(6)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), int(int(int(6))))), clamp(~ (_GLF_IDENTITY(int(6), int(int(int(6))))), ~ (_GLF_IDENTITY(int(6), int(int(int(6))))), ~ (_GLF_IDENTITY(int(6), int(int(int(6))))))))), int(6)), clamp(clamp(int(6), _GLF_IDENTITY(int(6), int(int(int(6)))), int(6)), clamp(int(_GLF_IDENTITY(6, _GLF_IDENTITY(int(int(_GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, 0 | (6)))))), (false ? _GLF_FUZZED(-97371) : int(int(_GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, _GLF_IDENTITY(0 | (6), (0 | (6)) / 1)))))))))), _GLF_IDENTITY(int(6), int(int(int(6)))), int(6)), clamp(int(6), _GLF_IDENTITY(int(6), int(int(int(6)))), int(6)))))), max(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, clamp(6, 6, 6))) ^ (0 | 0))), _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(int(int(6)), clamp(int(int(6)), int(_GLF_IDENTITY(int(6), (int(6)) + 0)), int(int(6)))))), min(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(int(int(6)), clamp(int(int(6)), int(_GLF_IDENTITY(int(6), (int(6)) + 0)), int(int(6)))))), _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), (int(6)) | 0)), clamp(_GLF_IDENTITY(int(int(6)), int(ivec4(int(int(6)), 0, ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | 0))), 1))), int(_GLF_IDENTITY(int(6), (int(6)) + 0)), int(int(6)))))))), _GLF_IDENTITY(int(_GLF_IDENTITY(6, max(6, 6))), max(_GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(6, 0 | (6)))), ~ (~ (~ (int(6)))))))), min(int(int(6)), int(int(6)))), (_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), ~ (~ (~ (int(6)))))))), min(int(int(6)), int(int(6))))) >> 0)), ~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), ~ (~ (~ (int(6)))))))), (false ? _GLF_FUZZED(-98139) : int(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), ~ (~ (~ (int(6)))))))))), min(_GLF_IDENTITY(int(int(6)), (_GLF_IDENTITY(int(int(6)), clamp(int(int(6)), int(int(6)), int(int(6))))) + 0), int(int(6)))))), clamp(~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), ~ (~ (~ (int(6)))))))), min(int(int(6)), int(int(6)))))), _GLF_IDENTITY(~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), ~ (_GLF_IDENTITY(~ (int(6)), ~ (~ (~ (int(6)))))))), min(int(int(6)), int(int(6)))))), (~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), ~ (~ (~ (int(6)))))))), min(int(int(6)), int(int(6))))))) - 0), ~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), ~ (~ (~ (int(6)))))))), min(int(int(6)), int(int(6)))))))))), 1 * (int(_GLF_IDENTITY(int(int(6)), min(int(int(6)), int(int(_GLF_IDENTITY(6, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(ivec4(-39534, 12353, 52603, -14337).g) : 6)))))))))), int(6)))))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), int(int(int(6)))), int(6))))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (0 | (0 | 0)) | (_GLF_IDENTITY(int(6), _GLF_IDENTITY(0 + (_GLF_IDENTITY(int(6), min(int(6), int(6)))), 0 ^ (_GLF_IDENTITY(0 + (_GLF_IDENTITY(int(6), min(int(6), int(6)))), ~ (~ (0 + _GLF_IDENTITY((_GLF_IDENTITY(int(6), min(int(6), int(6)))), ((_GLF_IDENTITY(int(6), min(int(6), int(6))))) / 1))))))))), _GLF_IDENTITY((int(6)) + 0, (_GLF_IDENTITY((int(6)) + 0, ((int(_GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), int(int(_GLF_IDENTITY(6, min(6, 6))))))) + 0) ^ 0)) | ((int(6)) + 0))))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY(clamp(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(int(int(6)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), int(int(int(6))))), clamp(~ (_GLF_IDENTITY(int(6), int(int(int(6))))), ~ (_GLF_IDENTITY(int(6), int(int(int(6))))), ~ (_GLF_IDENTITY(int(6), int(int(int(6))))))))), int(6)), clamp(clamp(int(6), _GLF_IDENTITY(int(6), int(int(int(6)))), int(6)), clamp(int(_GLF_IDENTITY(6, _GLF_IDENTITY(int(int(_GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, 0 | (6)))))), (false ? _GLF_FUZZED(-97371) : int(int(_GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, _GLF_IDENTITY(0 | (6), (0 | (6)) / 1)))))))))), _GLF_IDENTITY(int(6), int(int(int(6)))), int(6)), clamp(int(6), _GLF_IDENTITY(int(6), int(int(int(6)))), int(6)))))), max(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, clamp(6, 6, 6))) ^ (0 | 0))), _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(int(int(6)), clamp(int(int(6)), int(_GLF_IDENTITY(int(6), (int(6)) + 0)), int(int(6)))))), min(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(int(int(6)), clamp(int(int(6)), int(_GLF_IDENTITY(int(6), (int(6)) + 0)), int(int(6)))))), _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), (int(6)) | 0)), clamp(_GLF_IDENTITY(int(int(6)), int(ivec4(int(int(6)), 0, ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | 0))), 1))), int(_GLF_IDENTITY(int(6), (int(6)) + 0)), int(int(6)))))))), _GLF_IDENTITY(int(_GLF_IDENTITY(6, max(6, 6))), max(_GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(6, 0 | (6)))), ~ (~ (~ (int(6)))))))), min(int(int(6)), int(int(6)))), (_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), ~ (~ (~ (int(6)))))))), min(int(int(6)), int(int(6))))) >> 0)), ~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), ~ (~ (~ (int(6)))))))), (false ? _GLF_FUZZED(-98139) : int(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), ~ (~ (~ (int(6)))))))))), min(_GLF_IDENTITY(int(int(6)), (_GLF_IDENTITY(int(int(6)), clamp(int(int(6)), int(int(6)), int(int(6))))) + 0), int(int(6)))))), clamp(~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), ~ (~ (~ (int(6)))))))), min(int(int(6)), int(int(6)))))), _GLF_IDENTITY(~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), ~ (_GLF_IDENTITY(~ (int(6)), ~ (~ (~ (int(6)))))))), min(int(int(6)), int(int(6)))))), (~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), ~ (~ (~ (int(6)))))))), min(int(int(6)), int(int(6))))))) - 0), ~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), ~ (~ (~ (int(6)))))))), min(int(int(6)), int(int(6)))))))))), 1 * (int(_GLF_IDENTITY(int(int(6)), min(int(int(6)), int(int(_GLF_IDENTITY(6, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(ivec4(-39534, 12353, 52603, -14337).g) : 6)))))))))), int(6)))))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), int(int(int(6)))), int(6))))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (0 | (0 | 0)) | (_GLF_IDENTITY(int(6), _GLF_IDENTITY(0 + (_GLF_IDENTITY(int(6), min(int(6), int(6)))), 0 ^ (_GLF_IDENTITY(0 + (_GLF_IDENTITY(int(6), min(int(6), int(6)))), ~ (~ (0 + _GLF_IDENTITY((_GLF_IDENTITY(int(6), min(int(6), int(6)))), ((_GLF_IDENTITY(int(6), min(int(6), int(6))))) / 1))))))))), _GLF_IDENTITY((int(6)) + 0, (_GLF_IDENTITY((int(6)) + 0, ((int(_GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), int(int(_GLF_IDENTITY(6, min(6, 6))))))) + 0) ^ 0)) | ((int(6)) + 0))))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY(clamp(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(int(int(6)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), int(int(int(6))))), clamp(~ (_GLF_IDENTITY(int(6), int(int(int(6))))), ~ (_GLF_IDENTITY(int(6), int(int(int(6))))), ~ (_GLF_IDENTITY(int(6), int(int(int(6))))))))), int(6)), clamp(clamp(int(6), _GLF_IDENTITY(int(6), int(int(int(6)))), int(6)), clamp(int(_GLF_IDENTITY(6, _GLF_IDENTITY(int(int(_GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, 0 | (6)))))), (false ? _GLF_FUZZED(-97371) : int(int(_GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, _GLF_IDENTITY(0 | (6), (0 | (6)) / 1)))))))))), _GLF_IDENTITY(int(6), int(int(int(6)))), int(6)), clamp(int(6), _GLF_IDENTITY(int(6), int(int(int(6)))), int(6)))))), max(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, clamp(6, 6, 6))) ^ (0 | 0))), _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(int(int(6)), clamp(int(int(6)), int(_GLF_IDENTITY(int(6), (int(6)) + 0)), int(int(6)))))), min(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(int(int(6)), clamp(int(int(6)), int(_GLF_IDENTITY(int(6), (int(6)) + 0)), int(int(6)))))), _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), (int(6)) | 0)), clamp(_GLF_IDENTITY(int(int(6)), int(ivec4(int(int(6)), 0, ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | 0))), 1))), int(_GLF_IDENTITY(int(6), (int(6)) + 0)), int(int(6)))))))), _GLF_IDENTITY(int(_GLF_IDENTITY(6, max(6, 6))), max(_GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(6, 0 | (6)))), ~ (~ (~ (int(6)))))))), min(int(int(6)), int(int(6)))), (_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), ~ (~ (~ (int(6)))))))), min(int(int(6)), int(int(6))))) >> 0)), ~ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), ~ (~ (~ (int(6)))))))), (false ? _GLF_FUZZED(-98139) : int(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), ~ (~ (~ (int(6)))))))))), min(_GLF_IDENTITY(int(int(6)), (_GLF_IDENTITY(int(int(6)), clamp(int(int(6)), int(int(6)), int(int(6))))) + 0), int(int(6)))))), clamp(~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), ~ (~ (~ (int(6)))))))), min(int(int(6)), int(int(6)))))), _GLF_IDENTITY(~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), ~ (_GLF_IDENTITY(~ (int(6)), ~ (~ (~ (int(6)))))))), min(int(int(6)), int(int(6)))))), (~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), ~ (~ (~ (int(6)))))))), min(int(int(6)), int(int(6))))))) - 0), ~ (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), ~ (~ (~ (int(6)))))))), min(int(int(6)), int(int(6)))))))))), 1 * (int(_GLF_IDENTITY(int(int(6)), min(int(int(6)), int(int(_GLF_IDENTITY(6, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(ivec4(-39534, 12353, 52603, -14337).g) : 6)))))))))), int(6)))))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), int(int(int(6)))), int(6))))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (0 | (0 | 0)) | (_GLF_IDENTITY(int(6), _GLF_IDENTITY(0 + (_GLF_IDENTITY(int(6), min(int(6), int(6)))), 0 ^ (_GLF_IDENTITY(0 + (_GLF_IDENTITY(int(6), min(int(6), int(6)))), ~ (~ (0 + _GLF_IDENTITY((_GLF_IDENTITY(int(6), min(int(6), int(6)))), ((_GLF_IDENTITY(int(6), min(int(6), int(6))))) / 1))))))))), _GLF_IDENTITY((int(6)) + 0, (_GLF_IDENTITY((int(6)) + 0, ((int(_GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), int(int(_GLF_IDENTITY(6, min(6, 6))))))) + 0) ^ 0)) | ((int(6)) + 0)))))))); _GLF_struct_replacement_12._injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, false))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          continue;
         continue;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        continue;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         break;
        }
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec2(false, false))))))), (injectionSwitch.x > injectionSwitch.y))) || false)) || false)))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
          break;
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           break;
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, (true) && true) && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
     atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       break;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))
      continue;
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))));
     return;
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(200.923)), bool(false))) > injectionSwitch.y)), true, true)))))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false || (false))))));
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))), ! (! ((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))))))))))
    continue;
   buf[virtual_gid] = uint(subgroupAllEqual(write_val));
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))))) && (_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec4(false, true, false, true))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     break;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    break;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, (false) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))
        barrier();
       continue;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (true ? _GLF_IDENTITY(int(6), (int(6)) + 0) : _GLF_FUZZED(-77464)))))); _injected_loop_counter --)
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       break;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(83.84) : injectionSwitch.y)), injectionSwitch.y))))))), bool(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))), _GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     continue;
                    }
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))
                    barrier();
                  }
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 break;
                }
               do
                {
                 return;
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(false))
                  break;
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), (false ? _GLF_FUZZED(floor(vec2(-0.5, -5001.5087))) : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), (_GLF_FUZZED(injectionSwitch)) * vec2(1.0, 1.0)))))).y))));
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)))))
        {
        }
       else
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                  barrier();
                 break;
                }
               barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (false)))))))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (true ? injectionSwitch.y : _GLF_IDENTITY(_GLF_FUZZED(-1.7), (_GLF_IDENTITY(_GLF_FUZZED(-1.7), mix(float(_GLF_FUZZED(546.549)), float(_GLF_IDENTITY(_GLF_FUZZED(-1.7), float(mat3x4(_GLF_FUZZED(-1.7), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) + 0.0))))), true)))))
          barrier();
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         break;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
          }
         continue;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)))) || (_GLF_WRAPPED_IF_TRUE(true))))
        {
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
              }
             barrier();
            }
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              break;
             break;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
