#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_18 {
 bvec2 _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_17 {
 ivec4 _f0;
 vec2 _f1;
 mat4x2 _f2;
} ;

struct _GLF_struct_16 {
 ivec4 _f0;
 mat2 _f1;
 uint _f2;
 vec4 _f3;
 ivec4 _f4;
 uint _f5;
} ;

struct _GLF_struct_15 {
 bvec3 _f0;
} ;

struct _GLF_struct_14 {
 uvec3 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_19 {
 _GLF_struct_14 _f0;
 _GLF_struct_15 _f1;
 ivec2 _f2;
 _GLF_struct_16 _f3;
 _GLF_struct_17 _f4;
 _GLF_struct_18 _f5;
} ;

struct _GLF_struct_12 {
 bvec3 _f0;
 uvec4 _f1;
 ivec3 _f2;
 bvec3 _f3;
 bvec3 _f4;
 bvec4 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_11 {
 mat2x3 _f0;
 bvec2 _f1;
 mat2x3 _f2;
 uvec2 _f3;
 mat3 _f4;
 int _f5;
 vec2 _f6;
} ;

struct _GLF_struct_10 {
 bvec3 _f0;
 mat2 _f1;
 bvec4 _f2;
 uvec2 _f3;
 mat4 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_13 {
 mat4x3 _f0;
 _GLF_struct_10 _f1;
 _GLF_struct_11 _f2;
 ivec4 _f3;
 uvec2 _f4;
 mat4x3 _f5;
 _GLF_struct_12 _f6;
} ;

struct _GLF_struct_8 {
 vec3 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_7 {
 ivec2 _f0;
 mat4x3 _f1;
 mat4x3 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_6 {
 mat3 _f0;
 uint _f1;
 mat2x3 _f2;
 bvec4 _f3;
 bvec2 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_9 {
 mat3x4 _f0;
 _GLF_struct_6 _f1;
 _GLF_struct_7 _f2;
 mat2 _f3;
 _GLF_struct_8 _f4;
} ;

struct _GLF_struct_4 {
 uvec4 _f0;
 vec3 _f1;
 mat4x2 _f2;
 mat2x4 _f3;
 bool _f4;
 vec4 _f5;
} ;

struct _GLF_struct_3 {
 uvec4 _f0;
 int _f1;
 mat4 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_2 {
 int _f0;
 mat2 _f1;
 mat3 _f2;
 ivec3 _f3;
 mat3x2 _f4;
 mat4 _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_5 {
 _GLF_struct_2 _f0;
 _GLF_struct_3 _f1;
 _GLF_struct_4 _f2;
} ;

struct _GLF_struct_20 {
 _GLF_struct_5 _f0;
 _GLF_struct_9 _f1;
 _GLF_struct_13 _f2;
 _GLF_struct_19 _f3;
 ivec3 _f4;
 uint workgroup_id;
} ;

struct _GLF_struct_1 {
 mat3x4 _f0;
 uint virtual_gid;
} ;

struct _GLF_struct_0 {
 uvec3 _f0;
 uint workgroup_size;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_FUZZED(uvec3(30062u, 139196u, 137676u)) : gl_NumWorkGroups))) << uvec3(0u, 0u, 0u)).x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, mix(float(_GLF_FUZZED(-0.2)), float(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y), bool(true))), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y) - 0.0)) / 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - sqrt(tan(_GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) / vec2(1.0, 1.0))))).x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, true)), false || (bool(bvec3(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, true))))), ! (! (bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))))))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) & -45072); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                              {
                               do
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                  }
                                 else
                                  {
                                   do
                                    {
                                     do
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                        {
                                         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                                          {
                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                            {
                                             for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                              {
                                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)))))) != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | (_GLF_IDENTITY(int(5), max(int(5), int(5))))), max(int(5), int(5))), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) >> 0)))); _injected_loop_counter ++)
                                                {
                                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (true ? _GLF_IDENTITY(int(6), int(6)) : _GLF_FUZZED(_injected_loop_counter)))) | 0)) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (1 ^ 1) | (int(0))), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
                                                  {
                                                   do
                                                    {
                                                     for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                                      {
                                                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                                        {
                                                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & (33889 & 80128))); _injected_loop_counter --)
                                                          {
                                                           for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED(70293) : _GLF_IDENTITY(1, ~ (~ (1))), max(false ? _GLF_IDENTITY(_GLF_FUZZED(70293), (_GLF_FUZZED(70293)) >> 0) : _GLF_IDENTITY(1, ~ (~ (1))), false ? _GLF_FUZZED(70293) : _GLF_IDENTITY(1, ~ (~ (1)))))))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), int(5))), ((0 << _GLF_IDENTITY(int(5), int(5)))) | ((0 << _GLF_IDENTITY(int(5), int(5))))) | ((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(70293) : 1))))), 0 | ((_GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(70293, ~ _GLF_IDENTITY((~ (70293)), (_GLF_IDENTITY((~ (70293)), ((~ (70293))) >> 0)) << 0))) : 1, int(ivec3(false ? _GLF_FUZZED(_GLF_IDENTITY(70293, ~ (~ (70293)))) : 1, 0, int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                                            {
                                                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
                                                              {
                                                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 1 * (_GLF_IDENTITY(int(4), min(int(4), int(4))))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 ^ (int(4))), ~ (~ (_GLF_IDENTITY(int(4), _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, 0 ^ (0)), 0, _GLF_IDENTITY(0, clamp(0, 0, 0)))) ^ (int(4))))))))); _injected_loop_counter ++)
                                                                {
                                                                 return;
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                       else
                                                        {
                                                        }
                                                      }
                                                    }
                                                   while(_GLF_WRAPPED_LOOP(false));
                                                  }
                                                }
                                              }
                                            }
                                           else
                                            {
                                            }
                                          }
                                        }
                                       else
                                        {
                                        }
                                      }
                                     while(_GLF_WRAPPED_LOOP(false));
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))) || false)));
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
  }
 else
  {
  }
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(uvec3(1u), gl_WorkGroupSize.x);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) * 1.0))); _injected_loop_counter ++)
    {
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, max(2, 2))))) | (_GLF_IDENTITY(int(2), int(2))))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, max(2, 2))))) | (_GLF_IDENTITY(int(2), int(2)))))))) | 0)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(int(int(2)), (int(int(2))) | (int(int(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(atomicMax(_injected_loop_counter, _injected_loop_counter)) : 2)))))))), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), ~ (~ (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, min(1, 1)) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, int(ivec2(_GLF_IDENTITY(1, max(1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x))))), 1)) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0)), min(1, 1)) : _GLF_FUZZED(_injected_loop_counter))), max(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(true ? _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) | (1)))) : _GLF_FUZZED(_injected_loop_counter), (true ? _GLF_IDENTITY(1, min(1, 1)) : _GLF_FUZZED(_injected_loop_counter)) | (true ? _GLF_IDENTITY(1, min(1, 1)) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(true ? _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) | (1)))) : _GLF_FUZZED(_injected_loop_counter), (true ? _GLF_IDENTITY(1, min(1, 1)) : _GLF_FUZZED(_injected_loop_counter)) | (true ? _GLF_IDENTITY(1, min(1, 1)) : _GLF_FUZZED(_injected_loop_counter)))) | (_GLF_IDENTITY(true ? _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), ((1) | (1)) - 0)))) : _GLF_FUZZED(_injected_loop_counter), (true ? _GLF_IDENTITY(1, min(1, 1)) : _GLF_FUZZED(_injected_loop_counter)) | (true ? _GLF_IDENTITY(1, min(1, 1)) : _GLF_FUZZED(_injected_loop_counter))))))), _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, 1 * (1)), 1)) : _GLF_FUZZED(_injected_loop_counter))))), _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) * 1))) : _GLF_FUZZED(_injected_loop_counter)))))), int(1)))))))); _injected_loop_counter --)
                {
                 do
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (1 | 0), (_GLF_IDENTITY(_injected_loop_counter != (1 | 0), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_injected_loop_counter != (1 | 0)))) && true)), (_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 0))) && true), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 0)), true, true, false))); _injected_loop_counter ++)
                        {
                         do
                          {
                           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   do
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                      }
                                     else
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                        {
                                         do
                                          {
                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                            {
                                             do
                                              {
                                               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y) && true)), (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec4(injectionSwitch.x, 1.0, 0.0, 0.0)), mix(float(float(vec4(injectionSwitch.x, 1.0, 0.0, 0.0))), float(_GLF_FUZZED(873.951)), bool(false)))) > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-311.032)), float(0.0), bool(true))), 0.0) + (injectionSwitch)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, 0.0) + (injectionSwitch), max(_GLF_IDENTITY(vec2(0.0, 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4(vec2(0.0, 0.0), 0.0, 0.0, 0.0, 0.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 1.0), (mat4(vec2(0.0, 0.0), 0.0, 0.0, 0.0, 0.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), max(vec2(_GLF_IDENTITY(mat4(vec2(0.0, 0.0), 0.0, 0.0, 0.0, 0.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 1.0), (mat4(vec2(0.0, 0.0), 0.0, 0.0, 0.0, 0.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), vec2(_GLF_IDENTITY(mat4(vec2(0.0, 0.0), 0.0, 0.0, 0.0, 0.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 1.0), (mat4(vec2(0.0, 0.0), 0.0, 0.0, 0.0, 0.0, 0.0, cos(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))) + (injectionSwitch), vec2(0.0, 0.0) + (injectionSwitch)))).y) && true))) && true))))), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), vec2(mat4(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0))))).y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y) && true)), (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y) && true))) && true)))))), bool(bvec2(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y) && true)), (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y) && true))) && true)))))), false)))))))
                                                {
                                                }
                                               else
                                                {
                                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                                  {
                                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                                    {
                                                    }
                                                   else
                                                    {
                                                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                                      {
                                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                                        {
                                                        }
                                                       else
                                                        {
                                                         if(_GLF_WRAPPED_IF_TRUE(true))
                                                          {
                                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                                            {
                                                             do
                                                              {
                                                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (1 & int(_GLF_ONE(1.0, injectionSwitch.y))), (_injected_loop_counter < (1 & int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))))) && true)); _injected_loop_counter ++)
                                                                {
                                                                 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec4(injectionSwitch.y, 1.0, 1.0, 1.0)), max(float(vec4(injectionSwitch.y, 1.0, 1.0, 1.0)), float(vec4(injectionSwitch.y, 1.0, 1.0, 1.0))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(9.8, -9.7)) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), mix(vec2((false ? _GLF_FUZZED(vec2(9.8, -9.7)) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[0], _GLF_FUZZED(-11.30)), vec2(_GLF_FUZZED(15.96), (false ? _GLF_FUZZED(vec2(9.8, -9.7)) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[1]), bvec2(false, _GLF_IDENTITY(true, false || (true))))))).y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * _GLF_ONE(1.0, injectionSwitch.y)))))))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((-6912.2909 + injectionSwitch)) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))))).y)), ! (! _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), _GLF_IDENTITY(bvec2(bvec2(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))), bvec2(bvec2(bvec2(bvec2(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))))))), (bool(_GLF_IDENTITY(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true), _GLF_IDENTITY(bvec2(bvec2(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))), bvec2(bvec2(bvec2(bvec2(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))))))))) && true))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, true, false))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y))), bool(bvec4((_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false, true, false))), true, false), _GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), (_GLF_IDENTITY(true, true && (true))) || false))))))) || false))
                                                                  {
                                                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                                                    {
                                                                     if(_GLF_DEAD(false))
                                                                      {
                                                                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
                                                                        {
                                                                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-8.5) : injectionSwitch.y))), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-505.618) : injectionSwitch.y))) / 1.0), (injectionSwitch.y) + 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))).y, 1.0 * (injectionSwitch.y)), injectionSwitch.y))), bool(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), false)))))))))
                                                                          {
                                                                          }
                                                                         else
                                                                          {
                                                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                                                            {
                                                                             if(_GLF_WRAPPED_IF_TRUE(true))
                                                                              {
                                                                               do
                                                                                {
                                                                                 do
                                                                                  {
                                                                                   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), min(int(3), _GLF_IDENTITY(int(3), (int(3)) | 0))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), ~ (~ (int(3))))) >> 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(vec4(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), 1.0, 0.0, 1.0)))) << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
                                                                                    {
                                                                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                                                      {
                                                                                      }
                                                                                     else
                                                                                      {
                                                                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                                                                        {
                                                                                        }
                                                                                       else
                                                                                        {
                                                                                         if(_GLF_WRAPPED_IF_TRUE(true))
                                                                                          {
                                                                                           if(_GLF_WRAPPED_IF_FALSE(false))
                                                                                            {
                                                                                            }
                                                                                           else
                                                                                            {
                                                                                             do
                                                                                              {
                                                                                               if(_GLF_WRAPPED_IF_TRUE(true))
                                                                                                {
                                                                                                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
                                                                                                  {
                                                                                                   do
                                                                                                    {
                                                                                                     for(int _injected_loop_counter = (0 & 19872); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                                                                                      {
                                                                                                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, ((true) || false) && _GLF_IDENTITY(true, ! (! (true))))))), ! (! (true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, ! (! (true)))))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(680.228))), injectionSwitch.y))) - sqrt(_GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))))))), true))))))))
                                                                                                        {
                                                                                                         if(_GLF_WRAPPED_IF_TRUE(true))
                                                                                                          {
                                                                                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                                                                                            {
                                                                                                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                                                                              {
                                                                                                              }
                                                                                                             else
                                                                                                              {
                                                                                                               do
                                                                                                                {
                                                                                                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))) + (injectionSwitch)), injectionSwitch, injectionSwitch)).y, mix(float(_GLF_FUZZED(float(_GLF_IDENTITY((mat2x4(-88.44, -9.0, -5541.3841, -977.636, 2964.0941, 6.4, 0.0, -34.37) != mat2x4(-40.47, 3.9, 63.58, 5.0, -731.881, -2601.6421, 9.5, 397.977)), bool(bvec3((mat2x4(_GLF_IDENTITY(-88.44, (_GLF_IDENTITY(-88.44, mix(float(-88.44), float(_GLF_FUZZED(float(false))), bool(false)))) / 1.0), _GLF_IDENTITY(-9.0, (_GLF_IDENTITY(-9.0, clamp(-9.0, _GLF_IDENTITY(-9.0, clamp(-9.0, -9.0, -9.0)), -9.0))) / 1.0), -5541.3841, -977.636, 2964.0941, 6.4, 0.0, _GLF_IDENTITY(-34.37, _GLF_IDENTITY(float(vec2(-34.37, 0.0)), (float(vec2(-34.37, 0.0))) - 0.0))) != mat2x4(-40.47, 3.9, _GLF_IDENTITY(63.58, (63.58) + 0.0), 5.0, -731.881, -2601.6421, _GLF_IDENTITY(9.5, min(9.5, _GLF_IDENTITY(9.5, min(_GLF_IDENTITY(9.5, float(mat3(9.5, 0.0, 1.0, 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0))), _GLF_IDENTITY(9.5, mix(float(9.5), float(_GLF_FUZZED(-6.6)), bool(false))))))), 397.977)), true, false)))))), float(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))), min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) * determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))), _GLF_IDENTITY(clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), max(dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))))), 1.0, 0.0, 0.0), (mat4x2(0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), max(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))), vec3(0.0, 0.0, 1.0))))), 1.0, 0.0, 0.0)) + mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 0.0)), min(clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), max(dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))))), 1.0, 0.0, 0.0), (mat4x2(0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), max(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))), vec3(0.0, 0.0, 1.0))))), 1.0, 0.0, 0.0)) + mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 0.0)), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), max(dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))))), 1.0, 0.0, 0.0), (mat4x2(0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), max(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))), vec3(0.0, 0.0, 1.0))))), 1.0, 0.0, 0.0)) + mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 0.0))))) + (injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(15.92)), float(0.0), bool(true))), 0.0) + (injectionSwitch)), vec2(vec4(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(float(0.0), min(_GLF_IDENTITY(float(0.0), (true ? float(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-7.8)), float(0.0), bool(true)))) : _GLF_FUZZED(2.3))), _GLF_IDENTITY(float(0.0), min(float(0.0), float(0.0)))))), min(float(_GLF_IDENTITY(float(0.0), min(_GLF_IDENTITY(float(0.0), (true ? float(0.0) : _GLF_FUZZED(2.3))), _GLF_IDENTITY(float(0.0), min(float(0.0), float(0.0)))))), float(_GLF_IDENTITY(float(0.0), min(_GLF_IDENTITY(float(0.0), (true ? float(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(7218.4436) : _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0))))) : _GLF_FUZZED(2.3))), _GLF_IDENTITY(float(0.0), min(float(0.0), float(0.0))))))))), 0.0) + (injectionSwitch)), 0.0, 0.0))))), injectionSwitch, injectionSwitch)).y), bool(true)))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch, injectionSwitch)).y, mix(float(_GLF_FUZZED(float((mat2x4(-88.44, -9.0, -5541.3841, -977.636, _GLF_IDENTITY(2964.0941, (2964.0941) + 0.0), 6.4, 0.0, -34.37) != mat2x4(-40.47, _GLF_IDENTITY(_GLF_IDENTITY(3.9, max(3.9, 3.9)), 1.0 * (3.9)), 63.58, 5.0, -731.881, -2601.6421, 9.5, 397.977))))), float(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0)) + (injectionSwitch)), injectionSwitch, injectionSwitch)).y), bool(true))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch, injectionSwitch)).y, mix(float(_GLF_FUZZED(float((mat2x4(-88.44, -9.0, -5541.3841, -977.636, _GLF_IDENTITY(2964.0941, (2964.0941) + 0.0), 6.4, 0.0, -34.37) != mat2x4(-40.47, _GLF_IDENTITY(_GLF_IDENTITY(3.9, max(3.9, 3.9)), 1.0 * (3.9)), 63.58, 5.0, -731.881, -2601.6421, 9.5, 397.977))))), float(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0)) + (injectionSwitch)), injectionSwitch, injectionSwitch)).y), bool(true))), true && (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch, injectionSwitch)).y, mix(float(_GLF_FUZZED(float((mat2x4(-88.44, -9.0, -5541.3841, -977.636, _GLF_IDENTITY(2964.0941, (2964.0941) + 0.0), 6.4, 0.0, -34.37) != mat2x4(-40.47, _GLF_IDENTITY(_GLF_IDENTITY(3.9, max(3.9, 3.9)), 1.0 * (3.9)), 63.58, 5.0, -731.881, -2601.6421, 9.5, 397.977))))), float(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0)) + (injectionSwitch)), injectionSwitch, injectionSwitch)).y), bool(true)))))) || _GLF_IDENTITY(false, (false) || false))), false, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), ! (! ((! (bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))))), _GLF_IDENTITY(bool(bvec4(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), ! (! (bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))), false, true, true)), (bool(bvec4(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(! (! (bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), true && (! (! (bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))), false, true, true))) || false)))), true))))))
                                                                                                                  {
                                                                                                                  }
                                                                                                                 else
                                                                                                                  {
                                                                                                                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) << 0)); _injected_loop_counter ++)
                                                                                                                    {
                                                                                                                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4)))))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
                                                                                                                      {
                                                                                                                       do
                                                                                                                        {
                                                                                                                         do
                                                                                                                          {
                                                                                                                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                                                                                            {
                                                                                                                            }
                                                                                                                           else
                                                                                                                            {
                                                                                                                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                                                                                              {
                                                                                                                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                                                                                                {
                                                                                                                                }
                                                                                                                               else
                                                                                                                                {
                                                                                                                                 do
                                                                                                                                  {
                                                                                                                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                                                                                                                    {
                                                                                                                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                                                                                                                      {
                                                                                                                                      }
                                                                                                                                     else
                                                                                                                                      {
                                                                                                                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                                                                                                                        {
                                                                                                                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                                                                                                                          {
                                                                                                                                          }
                                                                                                                                         else
                                                                                                                                          {
                                                                                                                                           for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
                                                                                                                                            {
                                                                                                                                             if(_GLF_WRAPPED_IF_TRUE(true))
                                                                                                                                              {
                                                                                                                                               if(_GLF_WRAPPED_IF_TRUE(true))
                                                                                                                                                {
                                                                                                                                                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))); _injected_loop_counter --)
                                                                                                                                                  {
                                                                                                                                                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                                                                                                                                    {
                                                                                                                                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                                                                                                                                                      {
                                                                                                                                                      }
                                                                                                                                                     else
                                                                                                                                                      {
                                                                                                                                                       for(int _injected_loop_counter = ((-43796 / -8708) & (0 | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                                                                                                                                        {
                                                                                                                                                         for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(ivec3(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), 0)))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)))) && true), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)))) && true))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)))) && true))))))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)))))), false || (! (bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).y)))), _GLF_IDENTITY(bool(bvec4(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).y)))), true, false, true)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(bvec4(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), clamp(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) + abs(vec2(0.0, 0.0)))), max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch)))), injectionSwitch, injectionSwitch)).y)))), true, false, true))), false || (bool(bool(bvec4(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), false, false))) ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))))) * vec2(1.0, 1.0))) : injectionSwitch)), _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), mix(vec2(_GLF_IDENTITY((max(injectionSwitch, injectionSwitch)), min((max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY((max(injectionSwitch, injectionSwitch)), min((max(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(max(injectionSwitch, injectionSwitch), mix(vec2(_GLF_FUZZED(590.967), (max(injectionSwitch, injectionSwitch))[1]), vec2((max(injectionSwitch, injectionSwitch))[0], _GLF_FUZZED(7.3)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))[0], _GLF_IDENTITY((max(injectionSwitch, injectionSwitch))[1], max((max(injectionSwitch, injectionSwitch))[1], (max(injectionSwitch, injectionSwitch))[1]))), vec2(_GLF_FUZZED(-1.7), _GLF_FUZZED(6.2)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)))))), injectionSwitch, injectionSwitch)).y)))), true, false, true)))))), bool(bvec4(bool(_GLF_IDENTITY(bool(bool(bvec4(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), mix(vec2(_GLF_FUZZED(-36.66), _GLF_FUZZED(vec4(69.72, -2254.7535, 851.580, -0.0).z)), vec2(_GLF_IDENTITY((max(injectionSwitch, injectionSwitch))[0], float(mat3((max(injectionSwitch, injectionSwitch))[0], 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))), (max(injectionSwitch, injectionSwitch))[1]), bvec2(true, true)))), injectionSwitch, injectionSwitch)).y)))), true, false, true))), false || (bool(bool(bvec4(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).y)), clamp(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).y)), _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).y)), min(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).y)), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).y)))), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).y)))))), true, false, true)))))), true, false, true)))))))))))); _injected_loop_counter ++)
                                                                                                                                                          {
                                                                                                                                                           do
                                                                                                                                                            {
                                                                                                                                                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                                                                                                                                              {
                                                                                                                                                               return;
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                           while(_GLF_WRAPPED_LOOP(false));
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                               else
                                                                                                                                                {
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                             else
                                                                                                                                              {
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                       else
                                                                                                                                        {
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                   else
                                                                                                                                    {
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                 while(_GLF_WRAPPED_LOOP(false));
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                         while(_GLF_WRAPPED_LOOP(false));
                                                                                                                        }
                                                                                                                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                                                                              }
                                                                                                            }
                                                                                                           else
                                                                                                            {
                                                                                                            }
                                                                                                          }
                                                                                                         else
                                                                                                          {
                                                                                                          }
                                                                                                        }
                                                                                                       else
                                                                                                        {
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                                                                  }
                                                                                                 else
                                                                                                  {
                                                                                                  }
                                                                                                }
                                                                                               else
                                                                                                {
                                                                                                }
                                                                                              }
                                                                                             while(_GLF_WRAPPED_LOOP(false));
                                                                                            }
                                                                                          }
                                                                                         else
                                                                                          {
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5823.3453)), _GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-543.440)), bool(false)), mix(float(_GLF_FUZZED(-98.92)), float(mix(float(injectionSwitch.x), float(_GLF_FUZZED(-543.440)), bool(false))), bool(true))))), max(_GLF_IDENTITY(float(injectionSwitch.x), mix(float(_GLF_FUZZED(6765.5022)), float(float(injectionSwitch.x)), bool(true))), float(injectionSwitch.x))), bool(true)))) + 0.0), injectionSwitch.x), mix(float(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), float(_GLF_FUZZED((false ? -8.9 : 608.767))), bool(false)))), _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2((mat2(1.0) * (injectionSwitch))[0], _GLF_FUZZED(4811.6746)), vec2(_GLF_FUZZED(546.185), (mat2(1.0) * (injectionSwitch))[1]), bvec2(false, true)))).x, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)))))) > injectionSwitch.y))));
                                                                                }
                                                                               while(_GLF_WRAPPED_LOOP(false));
                                                                              }
                                                                             else
                                                                              {
                                                                              }
                                                                            }
                                                                           else
                                                                            {
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                   else
                                                                    {
                                                                    }
                                                                  }
                                                                 else
                                                                  {
                                                                  }
                                                                }
                                                              }
                                                             while(_GLF_WRAPPED_LOOP(false));
                                                            }
                                                           else
                                                            {
                                                            }
                                                          }
                                                         else
                                                          {
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                 else
                                                  {
                                                  }
                                                }
                                              }
                                             while(_GLF_WRAPPED_LOOP(false));
                                            }
                                           else
                                            {
                                            }
                                          }
                                         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), true && (! (_GLF_IDENTITY(false, false || (false))))))), true, false), bvec3(bvec4(bvec3(false, true, _GLF_IDENTITY(false, true && (false))), true)))))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))))) || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), bool(bvec3(false, _GLF_IDENTITY(true, (true) && true), false))))))) && true));
                                        }
                                       else
                                        {
                                        }
                                      }
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                  }
                                }
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, true && (true)), true)))));
                        }
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)), true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! _GLF_IDENTITY((false), ((false)) && true))) && true)), true)), ! _GLF_IDENTITY((! (bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)))), ! (! ((! _GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))), bool(_GLF_IDENTITY(bvec2((bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2((bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))), false), bvec2(bvec4(bvec2((bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))), false), false, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)), ! (! (bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)), ! (! (bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))))), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), true && (! (false)))))))), (_GLF_IDENTITY(false, ! (! (false)))) || false), _GLF_IDENTITY(true, true && (true)))), ! (! (bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)))))) && true))))))))), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))));
    }
  }
 else
  {
  }
 _GLF_struct_20 _GLF_struct_replacement_20 = _GLF_struct_20(_GLF_struct_5(_GLF_struct_2(1, mat2(_GLF_IDENTITY(1.0, 0.0 + (1.0))), mat3(1.0), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, ~ (~ (1)))), max(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), ((~ (1))) / 1))), (false ? _GLF_FUZZED(ivec3(-91676, 26563, 14677)) : ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), (~ (_GLF_IDENTITY(~ (1), min(~ (1), ~ (1))))) - 0))))), ivec3(_GLF_IDENTITY(1, ~ (~ (1)))))), mat3x2(1.0), _GLF_IDENTITY(_GLF_IDENTITY(mat4(1.0), transpose(transpose(mat4(1.0)))), (_GLF_IDENTITY(mat4(1.0), transpose(transpose(mat4(1.0))))) - mat4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-7901.5953)), bool(false)))), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, 1.0, 1.0, 0.0, exp(0.0), 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(8.7)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0, 0.0, 1.0, 1.0, 0.0), mat3x4(mat3x4(mat3x4(injectionSwitch.x, 1.0, 1.0, 0.0, exp(0.0), 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, 0.0))))))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(8.3)), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 0.0, 1.0, determinant(mat2(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 1.0, 0.0)), 1.0)))) + vec2(0.0, 0.0)).x, mix(float(_GLF_FUZZED(902.857)), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-408.185))), (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-408.185)))) - 0.0)))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, float(float(_GLF_IDENTITY(0.0, min(0.0, 0.0))))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), bvec4(true)), _GLF_struct_3(uvec4(1u), 1, mat4(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), (true ? 1.0 : _GLF_FUZZED(1.9)))))), mat3x2(1.0)), _GLF_struct_4(uvec4(1u), vec3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-94.22)), bool(false)))), mat4x2(1.0), mat2x4(1.0), true, _GLF_IDENTITY(vec4(1.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) - 0.0)))))), _GLF_struct_9(mat3x4(1.0), _GLF_struct_6(mat3(1.0), 1u, mat2x3(1.0), bvec4(true), bvec2(true), uvec4(1u)), _GLF_struct_7(ivec2(1), mat4x3(1.0), mat4x3(_GLF_IDENTITY(1.0, (1.0) - 0.0)), mat4x2(1.0)), mat2(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-1.3)))), _GLF_struct_8(vec3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(1.2) : 1.0, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(1.2) : 1.0, clamp(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(1.2) : 1.0, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true) ? _GLF_FUZZED(1.2) : 1.0), float(_GLF_FUZZED(_GLF_IDENTITY(-4.0, float(_GLF_IDENTITY(mat3(-4.0, abs(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0), (false ? _GLF_FUZZED(mat3(-1.8, -68.94, 3.0, 219.388, -2.1, -304.580, 9.3, 1926.8829, 8.8)) : mat3(-4.0, abs(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))))))), bool(false))), _GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (_GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec3(! (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (_GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec3(! (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))) && true)) ? _GLF_FUZZED(1.2) : 1.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-8.4))), 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))) + (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(1.2) : 1.0)), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))) ? _GLF_FUZZED(1.2) : 1.0)), _GLF_IDENTITY(max(false ? _GLF_IDENTITY(_GLF_FUZZED(1.2), min(_GLF_FUZZED(1.2), _GLF_FUZZED(1.2))) : 1.0, false ? _GLF_FUZZED(1.2) : 1.0), min(max(false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(1.2), max(_GLF_FUZZED(1.2), _GLF_FUZZED(1.2))), min(_GLF_FUZZED(1.2), _GLF_FUZZED(1.2))) : _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(float(47130))), float(1.0), bool(true))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))) ? _GLF_IDENTITY(_GLF_FUZZED(1.2), length(vec4(0.0, 0.0, 0.0, 0.0)) + (_GLF_FUZZED(1.2))) : 1.0), _GLF_IDENTITY(max(false ? _GLF_IDENTITY(_GLF_FUZZED(1.2), min(_GLF_FUZZED(1.2), _GLF_FUZZED(1.2))) : 1.0, false ? _GLF_FUZZED(1.2) : 1.0), mix(float(_GLF_FUZZED(25.45)), float(max(false ? _GLF_IDENTITY(_GLF_FUZZED(1.2), min(_GLF_FUZZED(1.2), _GLF_FUZZED(1.2))) : 1.0, false ? _GLF_FUZZED(1.2) : 1.0)), bool(true)))))), false ? _GLF_IDENTITY(_GLF_FUZZED(1.2), max(_GLF_FUZZED(1.2), _GLF_FUZZED(_GLF_IDENTITY(1.2, max(_GLF_IDENTITY(1.2, mix(float(_GLF_FUZZED(-99.30)), float(1.2), bool(true))), 1.2))))) : 1.0))))), ivec3(1))), _GLF_struct_13(mat4x3(_GLF_IDENTITY(1.0, max(1.0, 1.0))), _GLF_struct_10(bvec3(true), mat2(1.0), bvec4(true), uvec2(1u), _GLF_IDENTITY(mat4(1.0), (mat4(1.0)) * mat4(1.0)), vec3(1.0)), _GLF_struct_11(mat2x3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(3.5)))), bvec2(true), mat2x3(1.0), uvec2(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) - 0u)))), _GLF_IDENTITY(mat3(1.0), (false ? _GLF_FUZZED((- mat3(-96.02, 7.8, -2761.9159, -32.31, 98.76, _GLF_IDENTITY(3.0, _GLF_IDENTITY(float(vec3(3.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), min(float(vec3(3.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), float(vec3(3.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0))))), -737.263, 187.670, -5.6))) : mat3(1.0))), 1, vec2(1.0)), ivec4(1), uvec2(_GLF_IDENTITY(1u, (1u) << 0u)), mat4x3(1.0), _GLF_struct_12(bvec3(true), uvec4(_GLF_IDENTITY(1u, 1u * (1u))), ivec3(_GLF_IDENTITY(1, (1) | 0)), bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), (true && (true)) && true))), bvec3(true), bvec4(true), mat3x2(1.0))), _GLF_struct_19(_GLF_struct_14(uvec3(1u), bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, bool(bool(true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! ((_GLF_IDENTITY(true, bool(bool(true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(! (! ((_GLF_IDENTITY(true, bool(bool(true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false, true)))))))))), _GLF_struct_15(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, false, false))))))), ivec2(_GLF_IDENTITY(1, min(1, 1))), _GLF_struct_16(ivec4(1), mat2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(_GLF_IDENTITY(determinant(mat3(0.0, -390.418, 9473.8900, -4.4, -6.5, -4.7, 540.716, 2.1, 7.0)), mix(float(determinant(mat3(0.0, -390.418, 9473.8900, -4.4, -6.5, -4.7, 540.716, 2.1, 7.0))), float(_GLF_FUZZED(-6.5)), bool(false)))) : 1.0))))), _GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, uint(uvec3(1u, 0u, 1u))) : _GLF_IDENTITY(_GLF_FUZZED(write_val), (_GLF_IDENTITY(_GLF_FUZZED(write_val), 0u ^ (_GLF_FUZZED(write_val)))) >> 0u))), vec4(1.0), ivec4(1), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(write_val) : _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) - 0u))))))), _GLF_struct_17(ivec4(1), vec2(1.0), mat4x2(1.0)), _GLF_struct_18(bvec2(true), bvec4(true))), ivec3(1), gl_WorkGroupID.x);
 uint workgroup_base = _GLF_struct_replacement_0.workgroup_size * _GLF_IDENTITY(_GLF_struct_replacement_20.workgroup_id, (_GLF_struct_replacement_20.workgroup_id) / 1u);
 _GLF_struct_1 _GLF_struct_replacement_1 = _GLF_struct_1(mat3x4(1.0), _GLF_IDENTITY(workgroup_base, (workgroup_base) << uint(_GLF_ZERO(0.0, injectionSwitch.x))) + _GLF_IDENTITY(subgroup_id, 1u * (_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ((0u | 0u) << _GLF_IDENTITY(uint(3u), uint(3u))) ^ (subgroup_id)), (_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u)) << (0u | 0u)), subgroup_id)))) * subgroup_size + subgroup_local_id);
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), true, true, false))), ! (! (false)))) || false, bool(bvec4((_GLF_IDENTITY(false, ! (! (false)))) || false, _GLF_IDENTITY(true, (true) || false), false, true)))), (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-989.571)), vec2(_GLF_FUZZED(-278.384), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false)))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, ~ (~ (0))), 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))), bool(bool((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))))), false || (! (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))), bool(bool((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))))))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(-639.533)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(-639.533)), _GLF_IDENTITY((vec2((injectionSwitch)[0], _GLF_FUZZED(-639.533))) - log(vec2(1.0, 1.0)), mix(vec2(((vec2((injectionSwitch)[0], _GLF_FUZZED(-639.533))) - log(vec2(1.0, 1.0)))[0], _GLF_IDENTITY(((vec2((injectionSwitch)[0], _GLF_FUZZED(-639.533))) - log(vec2(1.0, 1.0)))[1], mix(float(_GLF_FUZZED(-1.0)), float(((vec2((injectionSwitch)[0], _GLF_FUZZED(-639.533))) - log(vec2(1.0, 1.0)))[1]), bool(true)))), vec2(_GLF_FUZZED(758.947), _GLF_FUZZED(-1.6)), bvec2(false, false)))) : _GLF_FUZZED(injectionSwitch))), vec2(_GLF_FUZZED(57.40), (injectionSwitch)[1]), bvec2(false, true)), min(mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(-639.533)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY(-639.533, min(_GLF_IDENTITY(-639.533, (-639.533) / 1.0), -639.533)))), (vec2((injectionSwitch)[0], _GLF_FUZZED(-639.533))) - log(vec2(1.0, 1.0))) : _GLF_FUZZED(injectionSwitch))), vec2(_GLF_FUZZED(_GLF_IDENTITY(57.40, mix(float(_GLF_FUZZED(-7.4)), float(57.40), bool(true)))), (injectionSwitch)[1]), bvec2(false, true)), mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(-639.533)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(-639.533)), (vec2((injectionSwitch)[0], _GLF_FUZZED(-639.533))) - log(vec2(1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-62.36)), bool(false)))))))) : _GLF_FUZZED(injectionSwitch))), vec2(_GLF_IDENTITY(_GLF_FUZZED(57.40), clamp(_GLF_FUZZED(57.40), _GLF_FUZZED(57.40), _GLF_FUZZED(57.40))), (injectionSwitch)[1]), bvec2(false, _GLF_IDENTITY(true, ! (! (true)))))))).y))))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                            {
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 atomicStore(write_val, uint(_GLF_struct_replacement_1.virtual_gid), 4, _GLF_IDENTITY(64, _GLF_IDENTITY(min(64, 64), _GLF_IDENTITY((min(64, 64)) + 0, (_GLF_IDENTITY((min(64, 64)), ((min(64, 64))) | ((min(64, 64)))) + 0) >> 0))), 0);
                                }
                               else
                                {
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))), ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))) && true)));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))));
                }
               else
                {
                }
              }
            }
          }
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
  {
  }
 else
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))))
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          {
          }
         else
          {
           do
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_IDENTITY(_GLF_FUZZED(696.678), max(_GLF_FUZZED(696.678), _GLF_IDENTITY(_GLF_FUZZED(696.678), (false ? _GLF_FUZZED(69.95) : _GLF_FUZZED(696.678)))))), bool(false)))) - abs(0.0)), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 0.0), (true ? vec3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 0.0) : _GLF_IDENTITY(_GLF_FUZZED(vec3(5.3, 3.2, 19.36)), vec3(_GLF_IDENTITY(mat4x2(_GLF_FUZZED(vec3(5.3, 3.2, 19.36)), abs(1.0), 1.0, log(1.0), 0.0, 0.0), (false ? _GLF_FUZZED(mat4x2(14.51, -186.212, 24.82, _GLF_IDENTITY(358.993, min(358.993, 358.993)), 4.9, 5810.7122, 9.7, -49.13)) : mat4x2(_GLF_FUZZED(vec3(5.3, 3.2, 19.36)), abs(1.0), 1.0, log(1.0), 0.0, 0.0)))))))))), injectionSwitch.x)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0))))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y))), _GLF_IDENTITY(_GLF_IDENTITY(true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)))), (true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))))) || false), bool(bvec4(_GLF_IDENTITY(true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)))), bool(bvec4(true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, _GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true)))); _GLF_IDENTITY(_injected_loop_counter ++, (0 >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) ^ (0 | 0))))) ^ (_injected_loop_counter ++)))
              {
               buf[_GLF_struct_replacement_1.virtual_gid] = uint(subgroupAllEqual(write_val));
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     else
      {
      }
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
