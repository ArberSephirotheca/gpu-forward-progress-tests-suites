#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_8 {
 mat3 _f0;
 vec4 _f1;
 mat3x4 _f2;
 ivec2 _f3;
 mat2x3 _f4;
 mat2x4 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_7 {
 vec2 _f0;
 ivec2 _f1;
 vec3 _f2;
 mat2x3 _f3;
 mat2 _f4;
 mat3 _f5;
 vec4 _f6;
} ;

struct _GLF_struct_6 {
 ivec2 _f0;
 mat3 _f1;
 uint _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_9 {
 _GLF_struct_6 _f0;
 _GLF_struct_7 _f1;
 ivec3 _f2;
 float _f3;
 _GLF_struct_8 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_4 {
 mat3 _f0;
 vec2 _f1;
 ivec4 _f2;
 vec3 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_3 {
 bvec2 _f0;
 vec2 _f1;
 mat3 _f2;
 float _f3;
 mat4 _f4;
 mat3x4 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_2 {
 mat4 _f0;
 ivec3 _f1;
 uvec3 _f2;
 mat3x2 _f3;
 mat2x3 _f4;
 mat2x3 _f5;
 ivec3 _f6;
} ;

struct _GLF_struct_1 {
 mat3 _f0;
 mat4x3 _f1;
 bool _f2;
 uvec4 _f3;
 mat4 _f4;
 bool _f5;
} ;

struct _GLF_struct_0 {
 int _f0;
 mat3 _f1;
 uvec3 _f2;
 bvec4 _f3;
 mat4x2 _f4;
 mat3x4 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_5 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 int _f2;
 vec2 _f3;
 _GLF_struct_2 _f4;
 _GLF_struct_3 _f5;
 _GLF_struct_4 _f6;
} ;

struct _GLF_struct_10 {
 float _f0;
 _GLF_struct_5 _f1;
 mat4 _f2;
 int _f3;
 _GLF_struct_9 _f4;
 int _injected_loop_counter;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_size;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_size.y = subgroup_id;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, int(ivec2(1, 1)))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_size.z = subgroup_size;
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     else
      {
      }
    }
   else
    {
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_size.y * GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_size.z + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_size.y * GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_size.z + ((subgroup_local_id + 1) % GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_size.z);
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   do
    {
     GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_size.x = next_virtual_gid;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 buf[virtual_gid] = 1;
 do
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(subgroup_local_id + 1 < GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_size.z)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
            {
            }
           else
            {
             atomicStore(buf[GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_size.x], uint(2), 4, 64, 0);
            }
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               subgroupAll(false);
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   atomicStore(buf[GLF_merged3_0_1_16_1_1_11_2_1_13next_virtual_gidsubgroup_idsubgroup_size.x], uint(2), 4, 64, 0);
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(_GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(1.0, _GLF_struct_5(_GLF_struct_0(1, mat3(1.0), uvec3(1u), bvec4(true), mat4x2(1.0), mat3x4(1.0), mat3x4(1.0)), _GLF_struct_1(mat3(1.0), mat4x3(1.0), true, uvec4(1u), mat4(1.0), true), 1, vec2(1.0), _GLF_struct_2(mat4(1.0), ivec3(1), uvec3(1u), mat3x2(1.0), mat2x3(1.0), mat2x3(1.0), ivec3(1)), _GLF_struct_3(bvec2(true), vec2(1.0), mat3(1.0), 1.0, mat4(1.0), mat3x4(1.0), mat2x3(1.0)), _GLF_struct_4(mat3(1.0), vec2(1.0), ivec4(1), vec3(1.0), mat2x4(1.0))), mat4(1.0), 1, _GLF_struct_9(_GLF_struct_6(ivec2(1), mat3(1.0), 1u, ivec2(1)), _GLF_struct_7(vec2(1.0), ivec2(1), vec3(1.0), mat2x3(1.0), mat2(1.0), mat3(1.0), vec4(1.0)), ivec3(1), 1.0, _GLF_struct_8(mat3(1.0), vec4(1.0), mat3x4(1.0), ivec2(1), mat2x3(1.0), mat2x4(1.0), mat4(1.0)), ivec3(1)), int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_10._injected_loop_counter > (0 << _GLF_IDENTITY(int(8), int(8)))); _GLF_struct_replacement_10._injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     subgroupAll(true);
                    }
                  }
                }
              }
            }
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
