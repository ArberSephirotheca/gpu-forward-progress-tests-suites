#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) + 0.0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) != 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true)), bool(bvec3(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true)), false, false)))), bool(bool(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true)), bool(bvec3(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true)), false, false))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true)), bool(bvec3(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true)), false, false)))), bool(bool(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true)), bool(bvec3(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true)), false, false))))))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true)), bool(bvec3(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true)), false, false)))), bool(bool(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true)), bool(bvec3(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true)), false, false))))))), false))))))))))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-5.0))))) > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-6.0)))) - 0.0), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / cos(0.0))))))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y)), true), bvec3(bvec4(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, abs(0.0)))), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, abs(0.0))))) && true))), true), true))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), vec2(0.0, 0.0) + ((injectionSwitch))), (injectionSwitch))) - vec2(0.0, 0.0)))).y)), true), bvec3(bvec4(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, abs(0.0)))))), true), true))), false)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))))))).y)), true), bvec3(bvec4(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, abs(0.0)))))), true), true))), false))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY((0 & (+ (~ -52745))), (true ? _GLF_IDENTITY((0 & (+ (~ -52745))), ~ (~ ((_GLF_IDENTITY(0 & (+ (~ -52745)), (true ? 0 & (+ (~ -52745)) : _GLF_FUZZED(80850))))))) : _GLF_FUZZED(90837))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) << 0)); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), ! (! ((! (false)))))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))))))))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), false, false))), false), false)))))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) && true), false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false))))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true))), false, false), false))), _GLF_IDENTITY(true, true && (true)))))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, true && (false)), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, true && (false)), false, false), true))))))))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(false, true && (false)))))), (_GLF_IDENTITY(false, true && (false))) && true), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, true && (false)), false, false), true))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), true && (false))) && true), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, true && (false)), false, false), true))))))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, true && (false)), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, true && (false)), false, false), true))))))))))), false || (bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && (false))) && true), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, true && (false)), false, _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true)))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (false)), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) && true)), false, false), true)))))))))))))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(1), int(1)), 0 ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 | (_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) + 0)) ^ 0))), int(1))))), max((0 << _GLF_IDENTITY(int(1), int(1))), _GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, 0 + (1)), 1))), min(int(1), int(1))), int(1))), _GLF_IDENTITY(((0 << _GLF_IDENTITY(int(1), int(1)))) / 1, min(_GLF_IDENTITY(((0 << _GLF_IDENTITY(int(1), int(1)))) / 1, int(_GLF_IDENTITY(ivec2(((0 << _GLF_IDENTITY(int(1), int(1)))) / 1, 0), max(ivec2(((0 << _GLF_IDENTITY(int(1), int(1)))) / 1, 0), ivec2(((0 << _GLF_IDENTITY(int(1), int(1)))) / 1, 0))))), _GLF_IDENTITY(((0 << _GLF_IDENTITY(int(1), int(1)))) / 1, ~ (~ (((0 << _GLF_IDENTITY(int(1), int(1)))) / 1))))))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ! (! ((false)))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         else
          {
          }
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       barrier();
      }
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x4(injectionSwitch.x, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0, cos(0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, tan(0.0))), (float(mat3x4(injectionSwitch.x, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0, cos(0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, tan(0.0)))) - 0.0)) > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 0.0, cos(0.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, sqrt(1.0), 1.0, 0.0, length(0.0)), (mat3x4(injectionSwitch, 0.0, cos(0.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, sqrt(1.0), 1.0, 0.0, length(0.0))) + mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0))), bool(bvec2(_injected_loop_counter != 0, true))))))); _injected_loop_counter --)
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
              barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     barrier();
                     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                      barrier();
                    }
                  }
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y))))))))))))))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, ~ (~ (gl_WorkGroupID.x))), (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))), false), true, true))))) ? _GLF_FUZZED(((workgroup_size - subgroup_size) * num_workgroup)) : _GLF_IDENTITY(gl_WorkGroupID.x, ~ (~ (gl_WorkGroupID.x)))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), (_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, 0u ^ (0u)), 0u)) | 0u), 0u), (true ? uvec3(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), (0u | _GLF_IDENTITY(0u, (0u) ^ 0u)), 0u) : _GLF_FUZZED(uvec3(117981u, 82914u, 63519u))))));
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * subgroup_size)))) / ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)))) + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) + 0)); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     do
      {
       barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) || false)) || (false)), ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
  }
 else
  {
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) - (0u ^ 0u)), subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> (0u << _GLF_IDENTITY(uint(3u), uint(3u)))))) + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), clamp(_GLF_IDENTITY(~ _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size))), 1u, 0u, 0u), ~ (~ (uvec4(_GLF_IDENTITY((subgroup_size), clamp((subgroup_size), (subgroup_size), _GLF_IDENTITY((subgroup_size), _GLF_IDENTITY(uint(uvec4((subgroup_size), 1u, 0u, 1u)), (uint(uvec4((subgroup_size), 1u, 0u, 1u))) | 0u)))), 1u, 0u, 0u)))))), (_GLF_IDENTITY((subgroup_size), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size))), 1u, 0u, 0u), ~ (~ (uvec4(_GLF_IDENTITY((subgroup_size), clamp((subgroup_size), (subgroup_size), _GLF_IDENTITY((subgroup_size), _GLF_IDENTITY(uint(uvec4((subgroup_size), 1u, 0u, 1u)), (uint(uvec4((subgroup_size), 1u, 0u, 1u))) | 0u)))), _GLF_IDENTITY(1u, (1u) ^ 0u), 0u, 0u))))))) * ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size))), 1u, 0u, 0u), ~ (~ (uvec4(_GLF_IDENTITY((subgroup_size), clamp((subgroup_size), (subgroup_size), _GLF_IDENTITY((subgroup_size), _GLF_IDENTITY(uint(uvec4((subgroup_size), 1u, 0u, 1u)), (uint(uvec4((subgroup_size), 1u, 0u, 1u))) | 0u)))), 1u, 0u, 0u)))))), (_GLF_IDENTITY((subgroup_size), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size))), 1u, 0u, 0u), ~ (~ (uvec4(_GLF_IDENTITY((subgroup_size), clamp((subgroup_size), (subgroup_size), _GLF_IDENTITY((subgroup_size), _GLF_IDENTITY(uint(uvec4((subgroup_size), 1u, 0u, 1u)), (uint(uvec4((subgroup_size), 1u, 0u, 1u))) | 0u)))), 1u, 0u, 0u))))))) | (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size))), 1u, 0u, 0u), ~ (~ (uvec4(_GLF_IDENTITY((subgroup_size), clamp((subgroup_size), (subgroup_size), _GLF_IDENTITY((subgroup_size), _GLF_IDENTITY(uint(uvec4((subgroup_size), 1u, 0u, 1u)), (uint(uvec4((subgroup_size), 1u, 0u, 1u))) | 0u)))), 1u, 0u, 0u)))))), (true ? _GLF_IDENTITY((subgroup_size), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size))), 1u, 0u, 0u), ~ (~ (uvec4(_GLF_IDENTITY((subgroup_size), clamp((subgroup_size), (subgroup_size), _GLF_IDENTITY((subgroup_size), _GLF_IDENTITY(uint(uvec4((subgroup_size), 1u, 0u, 1u)), (uint(uvec4((subgroup_size), 1u, 0u, 1u))) | 0u)))), 1u, 0u, 0u)))))) : _GLF_FUZZED(subgroup_id))))), (_GLF_IDENTITY((subgroup_size), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size))), 1u, 0u, 0u), ~ (~ (uvec4(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), clamp((subgroup_size), (subgroup_size), _GLF_IDENTITY((subgroup_size), _GLF_IDENTITY(uint(uvec4((subgroup_size), 1u, 0u, 1u)), (uint(uvec4((subgroup_size), 1u, 0u, 1u))) | 0u)))), ~ (~ (_GLF_IDENTITY((subgroup_size), clamp((subgroup_size), (subgroup_size), _GLF_IDENTITY((subgroup_size), _GLF_IDENTITY(uint(uvec4((subgroup_size), 1u, 0u, 1u)), (uint(uvec4((subgroup_size), 1u, 0u, 1u))) | 0u))))))), _GLF_IDENTITY(1u, _GLF_IDENTITY((1u), max(_GLF_IDENTITY((1u), ((1u)) >> 0u), (1u))) ^ 0u), 0u, 0u))))))) * ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), 0u + (_GLF_IDENTITY(uint(6u), uint(6u))))))) - 0u), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(~ (subgroup_size), uint(uvec4(_GLF_IDENTITY(~ (subgroup_size), max(~ (subgroup_size), ~ (subgroup_size))), 0u, 1u, 1u))), 0u), (uvec2(_GLF_IDENTITY(~ (subgroup_size), uint(uvec4(~ (subgroup_size), _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) >> 0u), 0u)), 1u, 1u))), 0u)) | (uvec2(_GLF_IDENTITY(~ (subgroup_size), uint(uvec4(~ (subgroup_size), 0u, 1u, 1u))), 0u))), ~ (~ (_GLF_IDENTITY(uvec2(~ _GLF_IDENTITY((subgroup_size), ((subgroup_size)) | ((subgroup_size))), 0u), clamp(uvec2(~ (subgroup_size), 0u), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) * 1u), 0u), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(~ (subgroup_size), 0u), (uvec2(~ (subgroup_size), 0u)) << uvec2(0u, 0u))), ~ (~ (uvec2(_GLF_IDENTITY(uvec2(~ (subgroup_size), 0u), _GLF_IDENTITY((uvec2(~ (subgroup_size), 0u)), clamp(_GLF_IDENTITY((uvec2(~ (subgroup_size), 0u)), ((uvec2(~ (subgroup_size), 0u))) ^ uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), (uvec2(~ (subgroup_size), 0u)), (uvec2(~ (subgroup_size), 0u)))) << uvec2(0u, 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(~ (subgroup_size), 0u), (uvec2(~ (subgroup_size), 0u)) << uvec2(0u, 0u))), ~ (~ (uvec2(_GLF_IDENTITY(uvec2(~ (subgroup_size), 0u), (uvec2(~ (subgroup_size), 0u)) << uvec2(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, 0u + (0u)), 0u)), 0u)))))), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(~ (subgroup_size), 0u), (uvec2(~ (subgroup_size), 0u)) << uvec2(0u, 0u))), ~ (~ _GLF_IDENTITY((uvec2(_GLF_IDENTITY(uvec2(~ _GLF_IDENTITY((subgroup_size), uint(uvec2((subgroup_size), 0u))), 0u), (uvec2(~ (subgroup_size), 0u)) << uvec2(0u, 0u)))), _GLF_IDENTITY(uvec2(uvec2((uvec2(_GLF_IDENTITY(uvec2(~ _GLF_IDENTITY((subgroup_size), uint(uvec2((subgroup_size), 0u))), 0u), (uvec2(~ (subgroup_size), 0u)) << uvec2(0u, 0u)))))), (uvec2(uvec2((uvec2(_GLF_IDENTITY(uvec2(~ _GLF_IDENTITY((subgroup_size), uint(uvec2((subgroup_size), 0u))), 0u), (uvec2(~ (subgroup_size), 0u)) << uvec2(0u, 0u))))))) | (uvec2(uvec2((uvec2(_GLF_IDENTITY(uvec2(~ _GLF_IDENTITY((subgroup_size), uint(uvec2((subgroup_size), 0u))), 0u), (uvec2(~ (subgroup_size), 0u)) << uvec2(0u, 0u)))))))))))))) - _GLF_IDENTITY(uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)), uvec2(0u, 0u) | (uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))), max(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(~ (subgroup_size), 0u), (uvec2(_GLF_IDENTITY(~ (subgroup_size), 0u ^ (~ (subgroup_size))), 0u)) << uvec2(0u, 0u))), ~ (~ (uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(~ (subgroup_size), 0u), (uvec2(_GLF_IDENTITY(~ (subgroup_size), min(~ (subgroup_size), ~ (subgroup_size))), 0u)) << uvec2(0u, 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(~ (subgroup_size), 0u), (uvec2(_GLF_IDENTITY(~ (subgroup_size), min(~ (subgroup_size), ~ (subgroup_size))), 0u)) << uvec2(0u, 0u)), (_GLF_IDENTITY(uvec2(~ (subgroup_size), 0u), (uvec2(_GLF_IDENTITY(~ (subgroup_size), min(~ (subgroup_size), ~ (subgroup_size))), 0u)) << uvec2(0u, 0u))) / uvec2(1u, 1u))) ^ uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))))), uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) / ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), clamp(uint(2u), uint(2u), uint(2u)))))), 0u), (uvec2(~ (subgroup_size), 0u)) << uvec2(0u, 0u))), ~ (_GLF_IDENTITY(~ (uvec2(_GLF_IDENTITY(uvec2(~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size))), min(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size))), uint(uvec2((_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size))), 0u))), (_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size))))), 0u), (uvec2(~ (subgroup_size), 0u)) << uvec2(0u, 0u)))), (~ (uvec2(_GLF_IDENTITY(uvec2(~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size))), min(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size))), uint(uvec2((_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size))), 0u))), (_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size))))), 0u), (uvec2(~ (subgroup_size), 0u)) << uvec2(0u, 0u))))) | (_GLF_IDENTITY(~ (uvec2(_GLF_IDENTITY(uvec2(~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size))), min(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size))), uint(uvec2((_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size))), 0u))), (_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size))))), 0u), (uvec2(~ (subgroup_size), 0u)) << uvec2(0u, 0u)))), max(~ (uvec2(_GLF_IDENTITY(uvec2(~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size))), min(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size))), uint(uvec2((_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size))), 0u))), (_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size))))), 0u), (uvec2(~ (subgroup_size), 0u)) << uvec2(0u, 0u)))), ~ (uvec2(_GLF_IDENTITY(uvec2(~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size))), min(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size))), uint(uvec2((_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size))), 0u))), (_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size))))), 0u), (uvec2(~ (subgroup_size), 0u)) << uvec2(0u, 0u)))))))))))))), uvec2(~ (subgroup_size), 0u)))))))), ~ (subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_size), clamp(~ (subgroup_size), ~ (subgroup_size), ~ (subgroup_size))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_size), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (subgroup_size), ~ (_GLF_IDENTITY(~ (~ (subgroup_size)), (~ (~ (subgroup_size))) | (~ (~ (subgroup_size))))))), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (subgroup_size), ~ (_GLF_IDENTITY(~ (~ (subgroup_size)), (~ (~ (subgroup_size))) | (~ (~ (subgroup_size))))))), 0u + (~ (_GLF_IDENTITY(~ (subgroup_size), ~ (_GLF_IDENTITY(~ (~ (subgroup_size)), (~ (~ (subgroup_size))) | (~ (~ (subgroup_size))))))))), ~ (_GLF_IDENTITY(~ (subgroup_size), ~ (_GLF_IDENTITY(~ (~ (subgroup_size)), (~ (~ (subgroup_size))) | (~ (~ (subgroup_size))))))))))), ~ (~ (~ (subgroup_size))))) ^ 0u))))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 buf[virtual_gid] = 1;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
  }
 else
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, false))) || false)))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.5), _GLF_FUZZED(-597.758)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y))))
            barrier();
          }
         else
          {
          }
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) + vec2(0.0, 0.0))).x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec3(bool(bool(false)), true, true)))))), ! (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec3(bool(bool(false)), true, true)))))), ! (! (bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec3(bool(bool(false)), true, true)))))))))))))));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false)))) && true)))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.8, 1.5)) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true, true)), bool(bool(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true, true)), bool(bvec2(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true, true)), true)))))), bool(bool(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true, true)), bool(bool(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true, true)), bool(bvec2(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true, true)), true)))))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED((- 5643.7879))), bool(false))))).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED((- 5643.7879))), bool(false))))).x > injectionSwitch.y)) && true))))))
          {
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) && true), bool(bvec2(_GLF_DEAD(false), true))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & 36071)); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(false, (false) || false)))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) | (_GLF_IDENTITY(0, (0) | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << (0 & int(35671u))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)))) && true)))))
                barrier();
              }
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))) + 1 < _GLF_IDENTITY(subgroup_size, (subgroup_size) / uint(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))).y, (injectionSwitch.y) * 1.0)))), ! (_GLF_IDENTITY(! (subgroup_local_id + 1 < _GLF_IDENTITY(subgroup_size, (subgroup_size) / uint(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-5419.7987)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, (injectionSwitch.y) * 1.0))))), bool(bvec3(! (subgroup_local_id + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, clamp(1, 1, 1)))) < _GLF_IDENTITY(subgroup_size, (subgroup_size) / uint(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(908.437))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) - 0.0)), 1.0 * ((_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) - 0.0)))) * 1.0))))), true, false))))))
              {
               do
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
                            barrier();
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                            {
                             barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                          }
                         barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(false))
                              {
                               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 ^ (int(2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 0)); _injected_loop_counter ++)
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                {
                                 barrier();
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         barrier();
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false)))))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false))))))))))
                      {
                      }
                     else
                      {
                       barrier();
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(_GLF_IDENTITY(int(2), int(ivec2(int(2), 0))), int(2)))))); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           do
                            {
                             barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                      }
                     else
                      {
                      }
                     barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               int i = 0;
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, _GLF_IDENTITY(true, (true) && true)), bvec3(bvec4(bvec3(false, true, true), false)))))))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bool(bool(bvec3(false, false, true))))))))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), (_injected_loop_counter) + 0) > 0); _injected_loop_counter --)
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 do
                                  {
                                   barrier();
                                  }
                                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true))) && true));
                                }
                              }
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                            {
                             barrier();
                            }
                          }
                        }
                       else
                        {
                        }
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           barrier();
                           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, min(5, 5))) - 0)), 0 ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, min(5, 5))) - 0)), (true ? int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, min(5, 5))) - 0)) : _GLF_FUZZED(65669))))), ~ (~ (int(5)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))))))
                              {
                               do
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   barrier();
                                  }
                                 else
                                  {
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                              }
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                {
                                 barrier();
                                }
                               else
                                {
                                }
                              }
                             barrier();
                            }
                          }
                         else
                          {
                           do
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               barrier();
                              }
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                        }
                       else
                        {
                        }
                       do
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y))))
                    {
                     for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, 0 ^ (5))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-49.37), _GLF_FUZZED((6.7 / 5.4))), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], clamp(_GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(49.37)), bool(false))), _GLF_IDENTITY((injectionSwitch)[1], (_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - 0.0)) - 0.0), (injectionSwitch)[1]))), _GLF_IDENTITY(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec2(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bvec2(bvec2(bvec2(bvec2(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), true))))).x > injectionSwitch.y)), (((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-49.37), _GLF_FUZZED((6.7 / 5.4))), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], clamp(_GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(49.37)), bool(false))), _GLF_IDENTITY((injectionSwitch)[1], (_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - 0.0)) - 0.0), (injectionSwitch)[1]))), _GLF_IDENTITY(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec2(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bvec2(bvec2(bvec2(bvec2(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), true))))).x > injectionSwitch.y))) || false) && true))))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))))))))
                    {
                    }
                   else
                    {
                     barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                 else
                  {
                  }
                 do
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), true && (bool(false))))))))));
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) << 0)))); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             barrier();
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
                              barrier();
                            }
                          }
                        }
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || _GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))
                        {
                         do
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 barrier();
                                }
                              }
                             barrier();
                            }
                          }
                         else
                          {
                          }
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
                            {
                             barrier();
                            }
                          }
                        }
                       barrier();
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                         do
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false))))))), bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false))))))), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false))))))), false))), _GLF_IDENTITY(bvec2(bvec2(bvec2(bvec2(bvec2(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false))))))), false))))), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(bvec2(bvec2(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false))))))), false))))), bvec2(bvec2(bvec2(bvec2(bvec2(bvec2(bvec2(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false))))))), false))))))))))))))), false)), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false))))))), bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))), false || (bool(bool(false))))))), false), bvec2(bvec2(bvec2(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false))))))), false)))))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false))))))), bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false))))))), false), bvec2(bvec2(bvec2(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false))))))), false)))))), false)))))) || false)))))
                          barrier();
                        }
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               do
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                           do
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   barrier();
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                             else
                              {
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))))).y))));
                          }
                         else
                          {
                           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))))))
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                  {
                                   barrier();
                                  }
                                 else
                                  {
                                  }
                                }
                               else
                                {
                                }
                              }
                            }
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, ! (! (true)))), true && (! (_GLF_IDENTITY(true, ! (! (true)))))))))))))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || false))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, determinant(mat3(1.0, 1.0, abs(1.0), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)), max(_GLF_IDENTITY(vec2(mat3x4(injectionSwitch, determinant(mat3(1.0, 1.0, abs(1.0), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)), mix(vec2(_GLF_FUZZED(925.056), (vec2(mat3x4(injectionSwitch, determinant(mat3(1.0, 1.0, abs(1.0), 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, max(1.0, 1.0))), float(_GLF_FUZZED(-2.3)), bool(false))))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)))[1]), vec2((vec2(mat3x4(injectionSwitch, determinant(mat3(1.0, 1.0, abs(1.0), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)))[0], _GLF_FUZZED(1.3)), bvec2(true, false))), _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, determinant(mat3(1.0, 1.0, abs(1.0), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) - 0.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)), max(vec2(mat3x4(injectionSwitch, determinant(mat3(1.0, 1.0, abs(1.0), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)), vec2(mat3x4(injectionSwitch, determinant(mat3(1.0, 1.0, abs(1.0), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))))))).x > injectionSwitch.y)), true, false)), bool(_GLF_IDENTITY(bool(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))), false), bvec2(bvec2(bvec2(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))), false)))))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))), (bool(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0, 1.0, exp(0.0), 0.0, sqrt(0.0), 1.0, length(vec2(0.0, 0.0))))).y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), true, false)))) && true)))))
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                              }
                             else
                              {
                               barrier();
                              }
                             do
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                                barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)))));
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (_GLF_IDENTITY(! (bool(bvec2(false, true))), ! (! (! (bool(bvec2(false, true))))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(0.3)), vec2(_GLF_FUZZED(72.83), (injectionSwitch)[1]), bvec2(false, true)))) * vec2(1.0, 1.0)).y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (_GLF_IDENTITY(! (bool(bvec2(false, true))), ! (! (_GLF_IDENTITY(! (bool(bvec2(false, true))), ! (! (_GLF_IDENTITY(! (bool(bvec2(false, true))), bool(_GLF_IDENTITY(bvec2(! (bool(bvec2(false, true))), true), bvec2(bvec3(bvec2(! (bool(bvec2(false, true))), true), true)))))))))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(0.3)), vec2(_GLF_FUZZED(72.83), (injectionSwitch)[1]), bvec2(false, true)))) * vec2(1.0, 1.0)).y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (_GLF_IDENTITY(! (bool(bvec2(false, true))), ! (! (! (bool(bvec2(false, true))))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(0.3)), vec2(_GLF_FUZZED(72.83), (injectionSwitch)[1]), bvec2(false, true)))) * vec2(_GLF_IDENTITY(1.0, (1.0) - sin(0.0)), 1.0)).y)))), (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(false, true)), ! (! (_GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec3(bool(bvec2(false, true)), false, false))))))), ! (! (! (bool(bvec2(false, true))))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[0], _GLF_FUZZED(0.3)), vec2(_GLF_FUZZED(72.83), (injectionSwitch)[1]), bvec2(false, true)))) * vec2(1.0, 1.0)).y))))) || false)))))))
                            barrier();
                           do
                            {
                             do
                              {
                               barrier();
                               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), false, false))), (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-216.113), _GLF_FUZZED(-1.1)), bvec2(false, false))))).y)) ? _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_IDENTITY(_GLF_FUZZED(1.1), mix(float(_GLF_FUZZED(-5.0)), float(_GLF_FUZZED(1.1)), bool(true))) : injectionSwitch.y)) : _GLF_FUZZED(-6.6)))))))
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                                barrier();
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 barrier();
                                }
                              }
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                                barrier();
                              }
                            }
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                     atomicStore(buf[next_virtual_gid], uint(2), 4, _GLF_IDENTITY(64, _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(64, 1, 0), (false ? _GLF_FUZZED(ivec3(-9374, -86026, 47320)) : _GLF_IDENTITY(ivec3(64, 1, 0), _GLF_IDENTITY((ivec3(64, 1, 0)) >> ivec3(_GLF_IDENTITY(0, max(0, 0)), 0, 0), ((ivec3(64, 1, 0)) >> ivec3(_GLF_IDENTITY(0, max(0, 0)), 0, 0)) | ((ivec3(64, 1, 0)) >> ivec3(_GLF_IDENTITY(0, max(0, 0)), 0, 0)))))), _GLF_IDENTITY(ivec3(ivec3(_GLF_IDENTITY(ivec3(64, 1, 0), (false ? _GLF_FUZZED(ivec3(-9374, -86026, 47320)) : _GLF_IDENTITY(ivec3(64, 1, 0), (ivec3(64, 1, 0)) >> ivec3(_GLF_IDENTITY(0, max(0, 0)), 0, 0)))))), (ivec3(ivec3(_GLF_IDENTITY(ivec3(64, _GLF_IDENTITY(1, (1) << 0), 0), (false ? _GLF_FUZZED(ivec3(-9374, -86026, 47320)) : _GLF_IDENTITY(ivec3(64, 1, 0), (ivec3(64, 1, 0)) >> ivec3(_GLF_IDENTITY(0, max(0, 0)), 0, 0))))))) / ivec3(1, 1, 1)))), int(ivec3(int(_GLF_IDENTITY(ivec3(64, 1, 0), (false ? _GLF_FUZZED(ivec3(-9374, -86026, 47320)) : _GLF_IDENTITY(_GLF_IDENTITY(ivec3(64, 1, 0), _GLF_IDENTITY(ivec3(ivec3(ivec3(64, 1, 0))), ivec3(1, 1, 1) * (ivec3(ivec3(ivec3(_GLF_IDENTITY(64, clamp(64, _GLF_IDENTITY(64, (64) - 0), 64)), 1, 0)))))), (_GLF_IDENTITY(ivec3(64, 1, 0), ivec3(1, 1, 1) * (ivec3(64, 1, 0)))) >> ivec3(0, 0, 0))))), _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(0, max(0, 0)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) / 1)), 1 * (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) / 1)))))), 0)))), 4);
                    }
                  }
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                barrier();
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))));
              }
             else
              {
               for(int _injected_loop_counter = (0 ^ 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_injected_loop_counter), (~ (_injected_loop_counter)) << 0)))) >> 0) != (0 ^ 0)), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_injected_loop_counter), (~ (_injected_loop_counter)) << 0)))) >> 0) != (0 ^ 0))) && true); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true, true), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true, true)))), false)))))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))) || false)), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))) || false)))))), true && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))) || false)), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))) || false))))))))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true, true)))))), false)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true, true)))))), false))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))), ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))))))))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / exp(0.0)) < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) || false)))), true, true)))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, abs(1.0)))).y)))))), ! (! _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec3((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y))))))))), _GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bool(! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bool(! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), bool(bvec3(! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bool(! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), false, true))))))))), true, true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 1.0, 1.0, abs(1.0)))).y)))))), ! (! _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! ((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y))))))))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true, true)))), false))), false)), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))))))))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, true)))))))), true, true)))), false)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, (true) || false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(true, (true) || false), true), true))))), (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true, true)))), false))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))), bool(bvec3((injectionSwitch.x < injectionSwitch.y), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), true, _GLF_IDENTITY(true, ! (! (true)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true, true)))), false)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, ! (! (true))))), ! (! ((! (_GLF_IDENTITY(true, ! (! (true))))))))), (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), false || (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), ! (! (bool(bvec4(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))))))))))))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true, true)))), false))))), false))), false))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), mix(float(_GLF_FUZZED(((562.360 * -1.3) * -4697.4998))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)))), bool(true))) < injectionSwitch.y))), _GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) || false))), bool(bool(bool(bool(_GLF_IDENTITY(false, (false) || false))))))) || (! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) && true), true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))))))), true, _GLF_IDENTITY(true, bool(bvec4(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true)))), (injectionSwitch.x < injectionSwitch.y))))), bool(bvec4(! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))) || false)))))), bool(bvec4(! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec4(! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false))), false))))))), ! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec4(! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))))) || false))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) / 1.0) < injectionSwitch.y)))))), true, true)))))) || false)) || false)))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && _GLF_IDENTITY(true, ! (! (true)))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         do
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         atomicStore(buf[next_virtual_gid], uint(2), 4, _GLF_IDENTITY(_GLF_IDENTITY(64, (64) + 0), (_GLF_IDENTITY(64, (64) + 0)) | 0), 4);
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                      }
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1)))))); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                          barrier();
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       do
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y), false, true, false))))))
                          barrier();
                         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                              barrier();
                             do
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, 0.0, cos(0.0), 1.0, 0.0)))))) && true), false)))) && true)));
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             else
                              {
                              }
                            }
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)) != 0); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 barrier();
                                }
                              }
                            }
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                            barrier();
                           do
                            {
                             barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     do
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((-69387 & _GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, 0 | (5))), int(5))), clamp((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0))), 1, _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(8), int(8))), max((0 >> _GLF_IDENTITY(int(8), int(8))), (0 >> _GLF_IDENTITY(int(8), int(8)))))), _GLF_IDENTITY((ivec3(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, _GLF_IDENTITY((5), max((5), _GLF_IDENTITY((5), int(ivec2((5), 1))))) << 0))), 1, (0 >> _GLF_IDENTITY(int(8), int(8))))), clamp((ivec3(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0))), 1, (0 >> _GLF_IDENTITY(int(8), int(8))))), (ivec3(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, 1 * (0)), 0, _GLF_IDENTITY(0, max(0, 0))))))), 1, (0 >> _GLF_IDENTITY(int(8), int(8))))), (ivec3(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0))), 1, (0 >> _GLF_IDENTITY(int(8), int(8))))))) >> ivec3(_GLF_IDENTITY(0, int(ivec3(0, 0, 0))), 0, 0)))), _GLF_IDENTITY(_GLF_IDENTITY(0 | (_GLF_IDENTITY(5, min(_GLF_IDENTITY(5, (5) << 0), 5))), (0 | (_GLF_IDENTITY(5, min(_GLF_IDENTITY(5, (5) << 0), 5)))) | (0 | (_GLF_IDENTITY(5, min(_GLF_IDENTITY(5, (5) << 0), 5))))), max(0 | (_GLF_IDENTITY(5, min(_GLF_IDENTITY(_GLF_IDENTITY(5, (5) - 0), _GLF_IDENTITY((5) << 0, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY((5) << 0, ((5) << 0) + 0), 0, (0 ^ 1)), ivec3(0, 0, 0) | (ivec3(_GLF_IDENTITY((5) << 0, ((5) << 0) + 0), 0, (0 ^ 1))))), (int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY((5) << 0, ((5) << 0) + 0), 0, (0 ^ 1)), ivec3(0, 0, 0) | (ivec3(_GLF_IDENTITY((5) << 0, ((5) << 0) + 0), 0, (0 ^ 1)))))) | (int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY((5) << 0, ((5) << 0) + 0), 0, (0 ^ 1)), ivec3(0, 0, 0) | (ivec3(_GLF_IDENTITY((5) << 0, ((5) << 0) + 0), 0, (0 ^ 1))))))))), 5))), 0 | (_GLF_IDENTITY(5, min(_GLF_IDENTITY(5, (5) << 0), 5))))))), int(5))), (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, 0 | (5))), int(5))), (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, max(0, 0))))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))) | (5))), int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (5) | 0)) | 0))))))), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY((-69387 & _GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, 0 | _GLF_IDENTITY((_GLF_IDENTITY(5, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(5, (5) >> 0), (0 ^ (1 | 0)), 1, 0)), 0 | (int(ivec4(_GLF_IDENTITY(5, (5) >> 0), (0 ^ (1 | 0)), 1, 0)))))), ((_GLF_IDENTITY(5, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(5, (5) >> 0), (0 ^ (1 | 0)), 1, 0)), 0 | (int(ivec4(_GLF_IDENTITY(5, (5) >> 0), (0 ^ (1 | 0)), 1, 0))))))) - 0))), int(5))), clamp((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0))), 1, (0 >> _GLF_IDENTITY(int(8), int(8)))), _GLF_IDENTITY((ivec3(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0))), 1, (0 >> _GLF_IDENTITY(int(8), int(8))))), clamp((ivec3(_GLF_IDENTITY(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0))), (_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0)))) | 0), _GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0))), _GLF_IDENTITY(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0))), (_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0)))) | (_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0))))))), 1, (0 >> _GLF_IDENTITY(int(8), int(8))))), (ivec3(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0))), 1, (0 >> _GLF_IDENTITY(int(8), int(8))))), (ivec3(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0))), 1, (0 >> _GLF_IDENTITY(int(8), int(8))))))) >> ivec3(_GLF_IDENTITY(0, int(ivec3(0, 0, 0))), 0, 0)))), _GLF_IDENTITY(0 | (_GLF_IDENTITY(5, min(_GLF_IDENTITY(5, (5) << 0), 5))), max(0 | (_GLF_IDENTITY(5, min(_GLF_IDENTITY(5, (5) << 0), 5))), 0 | (_GLF_IDENTITY(5, min(_GLF_IDENTITY(5, (5) << 0), 5))))))), int(5))), (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(5, 0 | (5)), 0 | (_GLF_IDENTITY(5, 0 | (5))))), int(5))), (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, 0 | (5))), int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (5) | 0)) | 0))))))), ((-69387 & _GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, 0 | _GLF_IDENTITY((5), int(ivec2(_GLF_IDENTITY((5), clamp((5), (5), (5))), 0))))), int(5))), clamp((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0))), 1, (0 >> _GLF_IDENTITY(int(8), int(8)))), _GLF_IDENTITY((ivec3(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, _GLF_IDENTITY((5) << 0, clamp((5) << 0, _GLF_IDENTITY((5) << 0, (1 & 1) * (_GLF_IDENTITY((5) << 0, 0 ^ ((5) << 0)))), _GLF_IDENTITY((5) << 0, (false ? _GLF_FUZZED(36757) : (5) << 0))))))), 1, (0 >> _GLF_IDENTITY(int(8), int(8))))), clamp((ivec3(_GLF_IDENTITY(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0))), min(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0))), _GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0))))), 1, (0 >> _GLF_IDENTITY(int(8), int(8))))), (ivec3(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0))), 1, (0 >> _GLF_IDENTITY(int(8), int(8))))), (ivec3(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0))), 1, (0 >> _GLF_IDENTITY(int(8), int(8))))))) >> ivec3(_GLF_IDENTITY(0, int(ivec3(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, 0 ^ (0))))) * ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))), 0))), 0, 0)))), _GLF_IDENTITY(0 | (_GLF_IDENTITY(5, min(_GLF_IDENTITY(5, (5) << 0), 5))), max(0 | (_GLF_IDENTITY(5, min(_GLF_IDENTITY(5, (5) << 0), 5))), 0 | (_GLF_IDENTITY(5, min(_GLF_IDENTITY(5, (5) << 0), 5))))))), int(5))), (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, 0 | (5))), int(5))), (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, 0 | (5))), int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (5) | 0)) | 0)))))))) | 0), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 0, 1), ivec4(1, 1, 1, 1) * (ivec4(_GLF_IDENTITY((-69387 & _GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, 0 | _GLF_IDENTITY((_GLF_IDENTITY(5, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(5, (5) >> 0), (0 ^ (1 | 0)), 1, 0)), 0 | (int(ivec4(_GLF_IDENTITY(5, (5) >> 0), (0 ^ (1 | 0)), 1, 0)))))), ((_GLF_IDENTITY(5, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(5, (5) >> 0), (0 ^ (1 | 0)), 1, 0)), 0 | (int(ivec4(_GLF_IDENTITY(5, (5) >> 0), (0 ^ (1 | 0)), 1, 0))))))) - 0))), int(5))), clamp((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0))), 1, (0 >> _GLF_IDENTITY(int(8), int(8)))), _GLF_IDENTITY((ivec3(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0))), 1, (0 >> _GLF_IDENTITY(int(8), int(8))))), clamp((ivec3(_GLF_IDENTITY(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0))), (_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0)))) | 0), _GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0))), _GLF_IDENTITY(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0))), (_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0)))) | (_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0))))))), 1, (0 >> _GLF_IDENTITY(int(8), int(8))))), (ivec3(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0))), 1, (0 >> _GLF_IDENTITY(int(8), int(8))))), (ivec3(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0))), 1, (0 >> _GLF_IDENTITY(int(8), int(8))))))) >> ivec3(_GLF_IDENTITY(0, int(ivec3(0, 0, 0))), 0, 0)))), _GLF_IDENTITY(0 | (_GLF_IDENTITY(5, min(_GLF_IDENTITY(5, (5) << 0), 5))), max(0 | (_GLF_IDENTITY(5, min(_GLF_IDENTITY(5, (5) << 0), 5))), 0 | (_GLF_IDENTITY(5, min(_GLF_IDENTITY(5, (5) << 0), 5))))))), int(5))), (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(5, 0 | (5)), 0 | (_GLF_IDENTITY(5, 0 | (5))))), int(5))), (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, 0 | (5))), int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (5) | 0)) | 0))))))), ((-69387 & _GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, 0 | _GLF_IDENTITY((5), int(ivec2(_GLF_IDENTITY((5), clamp((5), (5), (5))), 0))))), int(5))), clamp((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0))), 1, (0 >> _GLF_IDENTITY(int(8), int(8)))), _GLF_IDENTITY((ivec3(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, _GLF_IDENTITY((5) << 0, clamp((5) << 0, _GLF_IDENTITY((5) << 0, (1 & 1) * (_GLF_IDENTITY((5) << 0, 0 ^ ((5) << 0)))), _GLF_IDENTITY((5) << 0, (false ? _GLF_FUZZED(36757) : (5) << 0))))))), 1, (0 >> _GLF_IDENTITY(int(8), int(8))))), clamp((ivec3(_GLF_IDENTITY(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0))), min(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0))), _GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0))))), 1, (0 >> _GLF_IDENTITY(int(8), int(8))))), (ivec3(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0))), 1, (0 >> _GLF_IDENTITY(int(8), int(8))))), (ivec3(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(5, (5) << 0))), 1, (0 >> _GLF_IDENTITY(int(8), int(8))))))) >> ivec3(_GLF_IDENTITY(0, int(ivec3(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, 0 ^ (0))))) * ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))), 0))), 0, 0)))), _GLF_IDENTITY(0 | (_GLF_IDENTITY(5, min(_GLF_IDENTITY(5, (5) << 0), 5))), max(0 | (_GLF_IDENTITY(5, min(_GLF_IDENTITY(5, (5) << 0), 5))), 0 | (_GLF_IDENTITY(5, min(_GLF_IDENTITY(5, (5) << 0), 5))))))), int(5))), (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, 0 | (5))), int(5))), (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, 0 | (5))), int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (5) | 0)) | 0)))))))) | 0), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 0, 1)))))); _injected_loop_counter --)
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x)) > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                         barrier();
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) | (int(8))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), bool(bvec4(bool((injectionSwitch.x > injectionSwitch.y)), false, true, true))))))))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && (_GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))), ((false)) || false)))))))
                          barrier();
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-7081.7585)), float(injectionSwitch.x), bool(true))))) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))))
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               barrier();
                              }
                             else
                              {
                              }
                            }
                          }
                         else
                          {
                          }
                         do
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))))) > injectionSwitch.y))));
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                          {
                           for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) != 1); _injected_loop_counter ++)
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))) + vec2(0.0, 0.0)).x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))) || false), true, true)))))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               do
                                {
                                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
                                  barrier();
                                 barrier();
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
                              }
                            }
                          }
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                            barrier();
                          }
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           else
                            {
                            }
                           barrier();
                          }
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), _GLF_IDENTITY(bool(bvec3(false, true, false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(bool(bvec3(false, true, false)), false, false), bvec3(bvec4(bvec3(bool(bvec3(false, true, false)), false, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bvec4(bool(bvec3(bool(bvec3(false, true, false)), false, _GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, true && (false)), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, true && (false)), true), true))))))), _GLF_IDENTITY(true, (true) && true), true, false))))))))
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, false || (false)))))))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((injectionSwitch * injectionSwitch)) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), (_GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), max(_GLF_FUZZED(injectionSwitch), _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), min(_GLF_FUZZED(injectionSwitch), _GLF_FUZZED(injectionSwitch)))))) / vec2(1.0, 1.0)), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), (_GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), max(_GLF_FUZZED(injectionSwitch), _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), min(_GLF_FUZZED(injectionSwitch), _GLF_FUZZED(injectionSwitch)))))) / vec2(1.0, 1.0)), 1.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 1.0, 1.0, determinant(mat3(sqrt(1.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0))), _GLF_IDENTITY(mat3(mat3x4(mat3(_GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), (_GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), max(_GLF_FUZZED(injectionSwitch), _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), min(_GLF_FUZZED(injectionSwitch), _GLF_FUZZED(injectionSwitch)))))) / vec2(1.0, 1.0)), 1.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 1.0, 1.0, determinant(mat3(sqrt(1.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0))))), mat3(mat4(mat3(mat3x4(mat3(_GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), (_GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), max(_GLF_FUZZED(injectionSwitch), _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), min(_GLF_FUZZED(injectionSwitch), _GLF_FUZZED(injectionSwitch)))))) / vec2(1.0, 1.0)), 1.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 1.0, 1.0, determinant(mat3(sqrt(1.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)))))))))), (vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), (_GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), max(_GLF_FUZZED(injectionSwitch), _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), min(_GLF_FUZZED(injectionSwitch), _GLF_FUZZED(injectionSwitch)))))) / vec2(1.0, 1.0)), 1.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 1.0, 1.0, determinant(mat3(sqrt(1.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0))), _GLF_IDENTITY(mat3(mat3x4(mat3(_GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), (_GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), max(_GLF_FUZZED(injectionSwitch), _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), min(_GLF_FUZZED(injectionSwitch), _GLF_FUZZED(injectionSwitch)))))) / vec2(1.0, 1.0)), 1.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 1.0, 1.0, determinant(mat3(sqrt(1.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0))))), mat3(mat4(mat3(mat3x4(mat3(_GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), (_GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), max(_GLF_FUZZED(injectionSwitch), _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), min(_GLF_FUZZED(injectionSwitch), _GLF_FUZZED(injectionSwitch)))))) / vec2(1.0, 1.0)), 1.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 1.0, 1.0, determinant(mat3(sqrt(1.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0))))))))))) * mat2(1.0))) : _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(44.03, 0.0)))))))), (true ? _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false))))) ? _GLF_FUZZED((injectionSwitch * injectionSwitch)) : _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), max(_GLF_FUZZED(injectionSwitch), _GLF_FUZZED(injectionSwitch))) : injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))[0], max((false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-7.9), _GLF_FUZZED(724.925)), bvec2(false, false)))) : injectionSwitch)[0], (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, min(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), (false ? _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), _GLF_IDENTITY(mat2(1.0) * (_GLF_FUZZED(injectionSwitch)), (mat2(1.0) * (_GLF_FUZZED(injectionSwitch))) - vec2(0.0, 0.0))) : injectionSwitch) - vec2(0.0, 0.0)))[0])), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, sqrt(0.0), 0.0, 1.0, 0.0)))) : injectionSwitch)[1]), vec2(_GLF_FUZZED((+ 6.9)), _GLF_FUZZED(-4.3)), bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true, _GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))), false))))))) : _GLF_FUZZED(acosh(injectionSwitch)))).y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (false) && true)))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     do
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true));
                }
              }
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                barrier();
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                }
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec4(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), false), false, true)))))) && true))) && true))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
