#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 0) uniform buf0 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true)))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(length(0.0), 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(length(0.0), 1.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 1.0))).y)), (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(length(0.0), 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(length(0.0), 1.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 1.0))).y))) / int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), _GLF_IDENTITY(clamp(int(6), int(6), int(6)), (clamp(int(6), int(6), int(6))) - 0))) | (int(6)))))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (false ? _GLF_FUZZED(subgroup_size) : gl_NumWorkGroups.x));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ 0), min((0 ^ 0), (0 ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) | 0)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (1 | (_GLF_IDENTITY(1 & 1, ~ (_GLF_IDENTITY(~ (1 & 1), clamp(~ (1 & 1), _GLF_IDENTITY(~ (1 & 1), (true ? ~ (1 & 1) : _GLF_FUZZED(-27317))), ~ (1 & 1))))))), true && (_injected_loop_counter != (1 | (_GLF_IDENTITY(1 & 1, ~ (_GLF_IDENTITY(~ (1 & 1), clamp(~ (1 & 1), _GLF_IDENTITY(~ (1 & 1), (true ? ~ (1 & 1) : _GLF_FUZZED(-27317))), ~ (1 & 1)))))))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), determinant(mat2(0.0, 0.0, 1.0, 0.0)) + (_GLF_ONE(1.0, injectionSwitch.y))), _GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / (_GLF_IDENTITY(1 & 1, (1 & 1) * 1))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, min(1, 1))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))))))
            barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * 1) != (_GLF_IDENTITY(1, (1) >> 0) & 1)); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0))
    {
     return;
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1))) != (0 ^ _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), max(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, max(1, 1))), (int(_GLF_IDENTITY(1, max(1, 1)))) / 1))), _GLF_IDENTITY(1, max(1, 1)))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(false, (false) && true)))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(true, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(bvec3(_GLF_IDENTITY(true, true && (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false)), bvec3(bvec4(bvec3(bvec3(true, true, false)), true))))))), (true) && _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))))) && true))))
          {
           do
            {
             do
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) || _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))));
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))));
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-445.042)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
    }
   else
    {
     for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true))))))), true, false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_DEAD(false)))), false)), true && (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
            {
             do
              {
               do
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           do
                            {
                             barrier();
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-330.090)))))))
                              barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0), transpose(transpose(mat2x4(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0)))))), injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(true ? gl_WorkGroupSize : _GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(11260u, (11260u) / 1u), _GLF_IDENTITY((false ? _GLF_FUZZED(6489u) : 11260u), (0u << _GLF_IDENTITY(uint(8u), uint(8u))) + ((false ? _GLF_FUZZED(6489u) : 11260u)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(11260u, (11260u) / 1u), _GLF_IDENTITY((false ? _GLF_FUZZED(6489u) : 11260u), (0u << _GLF_IDENTITY(uint(8u), uint(8u))) + ((false ? _GLF_FUZZED(6489u) : 11260u)))), min(_GLF_IDENTITY(_GLF_IDENTITY(11260u, (11260u) / 1u), _GLF_IDENTITY((false ? _GLF_FUZZED(6489u) : 11260u), (0u << _GLF_IDENTITY(uint(8u), uint(8u))) + ((false ? _GLF_FUZZED(6489u) : 11260u)))), _GLF_IDENTITY(_GLF_IDENTITY(11260u, (11260u) / 1u), _GLF_IDENTITY((false ? _GLF_FUZZED(6489u) : 11260u), (0u << _GLF_IDENTITY(uint(8u), uint(8u))) + ((false ? _GLF_FUZZED(6489u) : 11260u))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(11260u, (11260u) / 1u), _GLF_IDENTITY((false ? _GLF_FUZZED(6489u) : 11260u), (0u << _GLF_IDENTITY(uint(8u), uint(8u))) + ((false ? _GLF_FUZZED(6489u) : 11260u)))))), _GLF_IDENTITY(129734u, min(129734u, 129734u)), 185575u))), (true ? gl_WorkGroupSize : _GLF_IDENTITY(_GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, 185575u))), (_GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, _GLF_IDENTITY(185575u, clamp(185575u, 185575u, 185575u)))))) - uvec3(0u, 0u, 0u))) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true ? gl_WorkGroupSize : _GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, _GLF_IDENTITY(185575u, uint(_GLF_IDENTITY(uint(185575u), min(uint(185575u), uint(185575u)))))))), uvec3(uvec3(true ? gl_WorkGroupSize : _GLF_FUZZED((uvec3(92414u, _GLF_IDENTITY(19876u, (_GLF_IDENTITY(_GLF_IDENTITY(19876u, (_GLF_IDENTITY(19876u, min(19876u, 19876u))) >> 0u), (_GLF_IDENTITY(_GLF_IDENTITY(19876u, (19876u) >> 0u), 0u | (_GLF_IDENTITY(19876u, _GLF_IDENTITY((19876u), max(_GLF_IDENTITY((19876u), ((19876u)) | (_GLF_IDENTITY((19876u), max((19876u), (19876u))))), (19876u))) >> 0u)))) >> 0u)) | 0u), 45085u) << uvec3(11260u, 129734u, 185575u)))))), (false ? _GLF_FUZZED(uvec3(165115u, 75102u, 147580u)) : true ? gl_WorkGroupSize : _GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(_GLF_IDENTITY(_GLF_IDENTITY(11260u, min(11260u, 11260u)), ~ (~ (_GLF_IDENTITY(11260u, min(11260u, 11260u))))), 129734u, 185575u)))))), max(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true ? gl_WorkGroupSize : _GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, 185575u))), uvec3(uvec3(true ? _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u))) - uvec3(0u, 0u, 0u))) + uvec3(0u, 0u, 0u)) : _GLF_IDENTITY(_GLF_FUZZED((uvec3(_GLF_IDENTITY(92414u, (false ? _GLF_FUZZED(20153u) : 92414u)), 19876u, 45085u) << uvec3(11260u, 129734u, 185575u))), min(_GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, 185575u))), _GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, 185575u)))))))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(165115u, (_GLF_IDENTITY(165115u, ~ (~ (165115u)))) | 0u), 75102u, 147580u), (_GLF_IDENTITY(uvec3(165115u, 75102u, 147580u), _GLF_IDENTITY(~ (~ (uvec3(165115u, 75102u, 147580u))), max(~ (~ (uvec3(165115u, 75102u, 147580u))), ~ (~ (uvec3(165115u, 75102u, 147580u))))))) | (uvec3(165115u, 75102u, 147580u)))) : true ? gl_WorkGroupSize : _GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, 185575u))), min(false ? _GLF_FUZZED(_GLF_IDENTITY(uvec3(165115u, 75102u, 147580u), (_GLF_IDENTITY(uvec3(165115u, 75102u, 147580u), ~ (~ (uvec3(165115u, 75102u, 147580u))))) | (uvec3(165115u, 75102u, 147580u)))) : true ? gl_WorkGroupSize : _GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, _GLF_IDENTITY(129734u, ~ (_GLF_IDENTITY(~ (129734u), (0u & 60344u) | (~ (129734u))))), 185575u))), false ? _GLF_FUZZED(_GLF_IDENTITY(uvec3(165115u, 75102u, 147580u), (_GLF_IDENTITY(uvec3(165115u, 75102u, 147580u), ~ _GLF_IDENTITY((~ _GLF_IDENTITY((uvec3(165115u, 75102u, 147580u)), ((uvec3(165115u, 75102u, 147580u))) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u)))), uvec3(0u, 0u, 0u) ^ ((~ _GLF_IDENTITY((uvec3(165115u, 75102u, 147580u)), ((uvec3(165115u, 75102u, 147580u))) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u)))))))) | (uvec3(165115u, 75102u, 147580u)))) : true ? gl_WorkGroupSize : _GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, 185575u))))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(true ? _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)) : _GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, 185575u))), uvec3(uvec3(true ? _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u))) - uvec3(0u, 0u, 0u))) + uvec3(0u, 0u, 0u)) : _GLF_IDENTITY(_GLF_FUZZED((uvec3(_GLF_IDENTITY(92414u, (false ? _GLF_FUZZED(20153u) : 92414u)), 19876u, 45085u) << uvec3(11260u, 129734u, 185575u))), min(_GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(_GLF_IDENTITY(11260u, (11260u) - 0u), 129734u, 185575u))), _GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, 185575u)))))))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(165115u, (_GLF_IDENTITY(165115u, ~ (~ (165115u)))) | 0u), (_GLF_IDENTITY(165115u, (_GLF_IDENTITY(165115u, ~ (~ (165115u)))) | 0u)) ^ 0u), 75102u, 147580u), (_GLF_IDENTITY(uvec3(165115u, 75102u, 147580u), _GLF_IDENTITY(~ (~ (uvec3(165115u, 75102u, 147580u))), max(~ (~ (uvec3(165115u, 75102u, 147580u))), ~ (~ (uvec3(165115u, 75102u, 147580u))))))) | (uvec3(165115u, 75102u, 147580u)))) : true ? gl_WorkGroupSize : _GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, 185575u))), min(false ? _GLF_FUZZED(_GLF_IDENTITY(uvec3(165115u, 75102u, 147580u), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(165115u, 75102u, 147580u), ~ (~ (uvec3(165115u, 75102u, 147580u)))), min(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(165115u, 75102u, 147580u), ~ (~ (uvec3(165115u, 75102u, 147580u)))), max(_GLF_IDENTITY(uvec3(165115u, 75102u, 147580u), ~ (~ (uvec3(165115u, 75102u, 147580u)))), _GLF_IDENTITY(uvec3(165115u, 75102u, 147580u), ~ (~ (uvec3(165115u, 75102u, 147580u)))))), _GLF_IDENTITY(uvec3(165115u, 75102u, 147580u), ~ (~ (uvec3(165115u, 75102u, 147580u))))))) | (uvec3(165115u, 75102u, 147580u)))) : true ? gl_WorkGroupSize : _GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, _GLF_IDENTITY(_GLF_IDENTITY(129734u, ~ (_GLF_IDENTITY(~ (129734u), (0u & 60344u) | (~ (129734u))))), ~ (~ (_GLF_IDENTITY(129734u, ~ (_GLF_IDENTITY(~ (129734u), _GLF_IDENTITY((0u & 60344u), clamp(_GLF_IDENTITY((0u & 60344u), (false ? _GLF_FUZZED(subgroup_local_id) : (0u & 60344u))), _GLF_IDENTITY((0u & 60344u), min((0u & 60344u), (0u & 60344u))), (0u & 60344u))) | (~ (129734u)))))))), 185575u))), false ? _GLF_FUZZED(_GLF_IDENTITY(uvec3(165115u, 75102u, 147580u), (_GLF_IDENTITY(uvec3(165115u, 75102u, 147580u), ~ _GLF_IDENTITY((~ _GLF_IDENTITY((uvec3(165115u, 75102u, 147580u)), ((uvec3(165115u, 75102u, 147580u))) >> _GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 0u, 0u), (uvec3(0u, _GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 1u * (0u))) / 1u))), 0u)) | uvec3(0u, 0u, 0u)))), uvec3(0u, 0u, 0u) ^ ((~ _GLF_IDENTITY((uvec3(165115u, 75102u, 147580u)), ((uvec3(165115u, 75102u, 147580u))) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u)))))))) | (uvec3(165115u, 75102u, 147580u)))) : true ? gl_WorkGroupSize : _GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, 185575u))))))) : _GLF_FUZZED(uvec3(30508u, 197141u, 153029u))))), (uvec3(0u, 0u, 0u) & _GLF_IDENTITY(uvec3(112041u, 49151u, 126150u), max(uvec3(112041u, 49151u, 126150u), uvec3(112041u, 49151u, 126150u)))) ^ ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true ? gl_WorkGroupSize : _GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, 185575u))), uvec3(uvec3(_GLF_IDENTITY(true ? gl_WorkGroupSize : _GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, 185575u))), (_GLF_IDENTITY(true ? gl_WorkGroupSize : _GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, 185575u))), (true ? gl_WorkGroupSize : _GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, 185575u)))) * uvec3(1u, 1u, 1u))) | (true ? gl_WorkGroupSize : _GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, 185575u)))))))), uvec3(uvec3(true ? _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]))) << uvec3(0u, 0u, 0u))) - uvec3(0u, _GLF_IDENTITY(0u, ~ (~ (0u))), 0u))) + uvec3(0u, 0u, 0u)) : _GLF_IDENTITY(_GLF_FUZZED((uvec3(_GLF_IDENTITY(_GLF_IDENTITY(92414u, min(92414u, 92414u)), (false ? _GLF_FUZZED(20153u) : 92414u)), 19876u, 45085u) << uvec3(11260u, 129734u, 185575u))), min(_GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, 185575u))), _GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, 185575u)))))))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(165115u, (_GLF_IDENTITY(165115u, ~ (~ (165115u)))) | 0u), 75102u, 147580u), (_GLF_IDENTITY(uvec3(165115u, 75102u, 147580u), _GLF_IDENTITY(~ (~ (uvec3(_GLF_IDENTITY(165115u, 1u * (165115u)), 75102u, 147580u))), max(~ (~ (uvec3(165115u, 75102u, 147580u))), ~ (~ (_GLF_IDENTITY(uvec3(165115u, 75102u, 147580u), min(uvec3(165115u, 75102u, 147580u), uvec3(165115u, 75102u, 147580u))))))))) | (uvec3(165115u, 75102u, 147580u)))) : true ? gl_WorkGroupSize : _GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, 185575u))), min(false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(165115u, 75102u, 147580u), (_GLF_IDENTITY(uvec3(165115u, 75102u, 147580u), ~ (~ (uvec3(165115u, 75102u, 147580u))))) | (uvec3(165115u, 75102u, 147580u))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(165115u, 75102u, 147580u), (_GLF_IDENTITY(uvec3(165115u, 75102u, 147580u), ~ (~ (uvec3(165115u, 75102u, 147580u))))) | (uvec3(165115u, 75102u, 147580u))), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(uvec3(165115u, 75102u, 147580u), (_GLF_IDENTITY(uvec3(165115u, 75102u, 147580u), ~ (~ (uvec3(165115u, 75102u, 147580u))))) | (uvec3(165115u, 75102u, 147580u)))))) | (_GLF_IDENTITY(uvec3(165115u, 75102u, 147580u), (_GLF_IDENTITY(uvec3(165115u, 75102u, 147580u), ~ (~ (uvec3(165115u, 75102u, 147580u))))) | (uvec3(165115u, 75102u, 147580u)))))) : true ? gl_WorkGroupSize : _GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, _GLF_IDENTITY(129734u, ~ (_GLF_IDENTITY(~ (129734u), (0u & 60344u) | (~ (129734u))))), 185575u))), false ? _GLF_FUZZED(_GLF_IDENTITY(uvec3(165115u, 75102u, 147580u), (_GLF_IDENTITY(uvec3(165115u, 75102u, 147580u), ~ _GLF_IDENTITY((~ _GLF_IDENTITY((uvec3(165115u, 75102u, 147580u)), ((uvec3(165115u, 75102u, 147580u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) ^ (uvec3(0u, 0u, 0u))), (uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u)))), uvec3(0u, 0u, 0u) ^ ((~ _GLF_IDENTITY((uvec3(165115u, 75102u, 147580u)), ((uvec3(165115u, 75102u, 147580u))) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u)))))))) | (uvec3(165115u, 75102u, 147580u)))) : true ? gl_WorkGroupSize : _GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, 185575u)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(true ? gl_WorkGroupSize : _GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, _GLF_IDENTITY(185575u, (0u << _GLF_IDENTITY(uint(4u), uint(4u))) ^ (185575u))))), uvec3(uvec3(true ? gl_WorkGroupSize : _GLF_FUZZED((_GLF_IDENTITY(uvec3(92414u, 19876u, 45085u), (uvec3(92414u, 19876u, 45085u)) | (uvec3(92414u, 19876u, 45085u))) << uvec3(11260u, 129734u, 185575u)))))), (false ? _GLF_FUZZED(uvec3(165115u, 75102u, 147580u)) : true ? _GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])) : _GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, 185575u)))))))))))), _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, (true ? gl_WorkGroupSize : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, 185575u)), ~ (~ _GLF_IDENTITY(((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, 185575u))), (((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, 185575u)))) + uvec3(0u, 0u, 0u))))), (uvec3(1u, 1u, 1u) ^ _GLF_IDENTITY(((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(6u), uvec3(6u))) >> _GLF_IDENTITY(uvec3(6u), uvec3(6u))), (_GLF_IDENTITY(((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(6u), uvec3(6u))) >> _GLF_IDENTITY(uvec3(6u), uvec3(6u))), min(((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(6u), uvec3(6u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uvec3(6u), uvec3(6u)), ~ (~ (_GLF_IDENTITY(uvec3(6u), uvec3(6u)))))), ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(6u, clamp(6u, 6u, 6u))), uvec3(6u))) >> _GLF_IDENTITY(uvec3(6u), uvec3(6u)))))) ^ uvec3(0u, 0u, 0u))) + (_GLF_IDENTITY(_GLF_FUZZED((_GLF_IDENTITY(uvec3(92414u, 19876u, 45085u), max(uvec3(92414u, 19876u, 45085u), uvec3(92414u, 19876u, 45085u))) << uvec3(11260u, 129734u, _GLF_IDENTITY(185575u, max(_GLF_IDENTITY(185575u, (_GLF_IDENTITY(185575u, (false ? _GLF_FUZZED(77965u) : 185575u))) << 0u), 185575u))))), ~ (~ _GLF_IDENTITY((_GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, 185575u)))), ((_GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, 185575u))))) / uvec3(1u, 1u, 1u))))))))), ((_GLF_IDENTITY(gl_WorkGroupSize, (true ? gl_WorkGroupSize : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, 185575u)), ~ (~ _GLF_IDENTITY(((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, 185575u))), (((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, 185575u)))) + uvec3(0u, 0u, 0u))))), (uvec3(1u, 1u, 1u) ^ _GLF_IDENTITY(((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(6u), uvec3(6u))) >> _GLF_IDENTITY(uvec3(6u), uvec3(6u))), (_GLF_IDENTITY(((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(6u), uvec3(6u))) >> _GLF_IDENTITY(uvec3(6u), uvec3(6u))), min(((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(6u), uvec3(6u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uvec3(6u), uvec3(6u)), ~ (~ (_GLF_IDENTITY(uvec3(6u), uvec3(6u)))))), ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(_GLF_IDENTITY(6u, clamp(6u, 6u, 6u))), uvec3(6u))) >> _GLF_IDENTITY(uvec3(6u), uvec3(6u)))))) ^ uvec3(0u, 0u, 0u))) + (_GLF_IDENTITY(_GLF_FUZZED((_GLF_IDENTITY(uvec3(92414u, 19876u, 45085u), max(uvec3(92414u, 19876u, 45085u), uvec3(92414u, 19876u, 45085u))) << uvec3(11260u, 129734u, _GLF_IDENTITY(185575u, max(_GLF_IDENTITY(185575u, (_GLF_IDENTITY(185575u, (false ? _GLF_FUZZED(77965u) : 185575u))) << 0u), 185575u))))), ~ (~ _GLF_IDENTITY((_GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, 185575u)))), ((_GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, 185575u))))) / uvec3(1u, 1u, 1u)))))))))) ^ uvec3(0u, 0u, 0u))) + _GLF_IDENTITY(uvec3(0u, 0u, 0u), max(_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u)), uvec3(0u, 0u, 0u))), uvec3(_GLF_IDENTITY(1u, (1u) / 1u), 1u, 1u) * ((~ (_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((true ? _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(_GLF_IDENTITY(0u, uint(uvec4(0u, 1u, ((_GLF_IDENTITY(1u, (1u) | 0u) << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (false ? _GLF_FUZZED(subgroup_id) : uint(6u))))) >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), min(uint(6u), uint(6u))))), 1u))), 0u, 0u)) : _GLF_IDENTITY(_GLF_FUZZED((uvec3(_GLF_IDENTITY(92414u, (_GLF_IDENTITY(92414u, max(92414u, _GLF_IDENTITY(92414u, (92414u) >> 0u)))) - 0u), _GLF_IDENTITY(19876u, (false ? _GLF_FUZZED((subgroup_id + subgroup_size)) : 19876u)), 45085u) << uvec3(11260u, 129734u, 185575u))), uvec3(uvec3(_GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(_GLF_IDENTITY(11260u, (11260u) | (11260u)), 129734u, 185575u))))))), ((true ? _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(_GLF_IDENTITY(0u, uint(uvec4(0u, 1u, ((1u << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), (false ? _GLF_FUZZED(subgroup_id) : uint(6u))))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u))), 0u, 0u)) : _GLF_IDENTITY(_GLF_FUZZED((uvec3(92414u, _GLF_IDENTITY(19876u, (false ? _GLF_FUZZED((subgroup_id + subgroup_size)) : 19876u)), 45085u) << uvec3(11260u, 129734u, 185575u))), uvec3(_GLF_IDENTITY(uvec3(_GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, 185575u)))), clamp(uvec3(_GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, 185575u)))), uvec3(_GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, 185575u)))), uvec3(_GLF_FUZZED((uvec3(92414u, 19876u, 45085u) << uvec3(11260u, 129734u, 185575u)))))))))) >> uvec3(0u, 0u, 0u))))) + uvec3(0u, 0u, 0u)))))).x;
 for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, max(0, 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)).x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(1.0 * (1.0), 0.0 + (1.0 * (1.0)))), 0.0, cos(0.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), abs(1.0), tan(0.0)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? mat2x3(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 0.0, cos(0.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), abs(1.0), tan(0.0)) : _GLF_FUZZED(mat2x3(3.5, -3.1, 2020.8103, -14.23, -1.6, 180.714)))))), 1.0)).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 0.0, cos(0.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), abs(1.0), tan(0.0)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? mat2x3(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 0.0, cos(0.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), abs(1.0), tan(0.0)) : _GLF_FUZZED(mat2x3(3.5, -3.1, 2020.8103, -14.23, -1.6, 180.714)))))), 1.0)).x, float(mat3x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(1.0, 1.0 * _GLF_IDENTITY((1.0), min((1.0), (1.0)))), 0.0, cos(0.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), abs(1.0), tan(0.0)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? mat2x3(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 0.0, cos(0.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(acos(9.8)))))), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), abs(1.0), tan(0.0)) : _GLF_FUZZED(mat2x3(3.5, -3.1, 2020.8103, -14.23, -1.6, 180.714)))))), 1.0)).x, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) / 1.0), 1.0, 1.0)))) - 0.0), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0))).x)) < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)).x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(1.0, (1.0) + abs(0.0)) * (1.0)), float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(1.0 * (1.0), 0.0 + (1.0 * (1.0)))), 0.0, cos(0.0), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), clamp(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), (true ? dot(vec2(0.0, 1.0), vec2(1.0, 0.0)) : _GLF_FUZZED(-3.5))), dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0)))), dot(vec2(_GLF_IDENTITY(0.0, float(mat2(0.0, 0.0, 0.0, 1.0))), 1.0), vec2(1.0, 0.0))), abs(1.0), tan(0.0)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? mat2x3(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 0.0, cos(0.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), _GLF_IDENTITY(abs(1.0), (_GLF_IDENTITY(abs(1.0), max(abs(1.0), abs(1.0)))) - 0.0), tan(0.0)) : _GLF_FUZZED(mat2x3(3.5, -3.1, 2020.8103, -14.23, -1.6, 180.714)))))), 1.0)).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(1.0 * (1.0), clamp(1.0 * (1.0), _GLF_IDENTITY(1.0 * (1.0), (_GLF_IDENTITY(1.0 * (1.0), (1.0 * (1.0)) - 0.0)) - 0.0), 1.0 * (1.0)))), 0.0, cos(0.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), abs(1.0), tan(0.0)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? mat2x3(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 0.0, cos(0.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), abs(1.0), tan(0.0)) : _GLF_FUZZED(mat2x3(3.5, -3.1, 2020.8103, -14.23, -1.6, 180.714)))))), 1.0)).x, float(mat3x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))))), float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(1.0, 1.0 * _GLF_IDENTITY((1.0), min((1.0), _GLF_IDENTITY((1.0), clamp((1.0), (1.0), (1.0)))))), 0.0, cos(0.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), abs(1.0), tan(0.0)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), mix(float(_GLF_IDENTITY(1.0, 1.0 * (1.0))), float(_GLF_FUZZED(-3.9)), bool(false))), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-9.9)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), cos(_GLF_IDENTITY(0.0, (0.0) - 0.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, float(mat3x4(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0))), 1.0)), 1.0)), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_IDENTITY(_GLF_FUZZED(acos(9.8)), clamp(_GLF_FUZZED(acos(9.8)), _GLF_FUZZED(acos(9.8)), _GLF_FUZZED(acos(9.8)))))))), dot(vec2(0.0, 1.0), vec2(1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0))))))), abs(1.0), tan(0.0)) : _GLF_FUZZED(mat2x3(3.5, -3.1, 2020.8103, -14.23, -1.6, 180.714)))))), 1.0)).x, 1.0, determinant(_GLF_IDENTITY(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0), (mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) / 1.0), 1.0, 1.0)))) - 0.0), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0))).x)) < injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), (! _GLF_IDENTITY((! (false)), ((! (false))) && true)) || false), (_GLF_IDENTITY(! (! (false)), (! _GLF_IDENTITY((! (false)), ((! (false))) && true)) || false)) || false)), bool(bool(bool(! (! (false))))))), (bool(_GLF_IDENTITY(bool(! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), _GLF_IDENTITY((! (false)) || false, false || (_GLF_IDENTITY((! (false)) || false, ! (! ((! (false)) || false))))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))), _GLF_IDENTITY((! (false)) || false, false || (_GLF_IDENTITY((! (false)) || false, ! (! ((! (false)) || false)))))))) && true)), bool(bool(bool(! (! (false)))))))) && _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), vec2(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 0.0), (vec4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 0.0, 0.0)) / vec4(1.0, 1.0, 1.0, 1.0)))).x < injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (210 & 0)); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED(93865)))) ^ 0))
          {
           barrier();
          }
        }
       barrier();
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
        barrier();
      }
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(mat2x4(injectionSwitch[1], 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0))))).y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY(0u | (workgroup_size * workgroup_id), (true ? _GLF_IDENTITY(0u, (0u) >> 0u) | (_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, (false ? _GLF_FUZZED(floatBitsToUint(625.735)) : workgroup_size))) | (workgroup_size)) * workgroup_id) : _GLF_FUZZED(subgroup_id)))), clamp(workgroup_size * workgroup_id, workgroup_size * workgroup_id, _GLF_IDENTITY(workgroup_size * workgroup_id, max(workgroup_size * workgroup_id, workgroup_size * workgroup_id)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, 0u | (workgroup_size * workgroup_id)), clamp(workgroup_size * workgroup_id, _GLF_IDENTITY(workgroup_size * workgroup_id, clamp(workgroup_size * workgroup_id, workgroup_size * workgroup_id, _GLF_IDENTITY(workgroup_size * workgroup_id, clamp(workgroup_size * workgroup_id, workgroup_size * workgroup_id, workgroup_size * workgroup_id)))), workgroup_size * workgroup_id)), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY(0u, (0u) / 1u) | (_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) | 0u))), clamp(workgroup_size * workgroup_id, workgroup_size * workgroup_id, workgroup_size * workgroup_id))) - (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, 0u | (workgroup_size * workgroup_id)), clamp(workgroup_size * workgroup_id, _GLF_IDENTITY(workgroup_size * workgroup_id, max(workgroup_size * _GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, ~ (~ (_GLF_IDENTITY(workgroup_id, clamp(workgroup_id, workgroup_id, workgroup_id))))))), _GLF_IDENTITY(workgroup_size, (workgroup_size) << 0u) * workgroup_id)), workgroup_size * _GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 1u))))), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, 0u | (workgroup_size * workgroup_id)), clamp(workgroup_size * workgroup_id, _GLF_IDENTITY(workgroup_size * workgroup_id, max(workgroup_size * _GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, ~ (~ (_GLF_IDENTITY(workgroup_id, clamp(workgroup_id, workgroup_id, workgroup_id))))))), _GLF_IDENTITY(workgroup_size, (workgroup_size) << 0u) * workgroup_id)), workgroup_size * _GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 1u))))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, 0u | (workgroup_size * workgroup_id)), clamp(workgroup_size * workgroup_id, _GLF_IDENTITY(workgroup_size * workgroup_id, max(workgroup_size * _GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, ~ (~ (_GLF_IDENTITY(workgroup_id, clamp(workgroup_id, workgroup_id, workgroup_id))))))), _GLF_IDENTITY(workgroup_size, (workgroup_size) << 0u) * workgroup_id)), workgroup_size * _GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 1u))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, 0u | (workgroup_size * workgroup_id)), clamp(workgroup_size * workgroup_id, _GLF_IDENTITY(workgroup_size * workgroup_id, max(workgroup_size * _GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(workgroup_id, ~ (~ (_GLF_IDENTITY(workgroup_id, clamp(workgroup_id, workgroup_id, workgroup_id))))))), _GLF_IDENTITY(workgroup_size, (workgroup_size) << 0u) * _GLF_IDENTITY(workgroup_id, 1u * (workgroup_id)))), workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 1u))), (_GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 1u)))) * 1u)) + 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, 0u | (workgroup_size * workgroup_id)), clamp(workgroup_size * workgroup_id, _GLF_IDENTITY(workgroup_size * workgroup_id, max(workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) | 0u), min(workgroup_id, _GLF_IDENTITY(workgroup_id, ~ (~ (_GLF_IDENTITY(workgroup_id, clamp(workgroup_id, workgroup_id, workgroup_id))))))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) << 0u) * workgroup_id, (_GLF_IDENTITY(workgroup_size, (workgroup_size) << 0u) * workgroup_id) * 1u))), workgroup_size * _GLF_IDENTITY(workgroup_id, uint(uvec3(workgroup_id, 1u, 1u)))))) * 1u)) + 0u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) << 0u), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) << 0u), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) << 0u), (_GLF_IDENTITY(workgroup_size, (workgroup_size) << 0u)) | (_GLF_IDENTITY(workgroup_size, (workgroup_size) << 0u)))) * 1u), 1u, (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) * workgroup_id, 0u | (workgroup_size * workgroup_id)), clamp(workgroup_size * workgroup_id, workgroup_size * workgroup_id, workgroup_size * workgroup_id))) - 0u)));
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, (1u ^ 1u), 1u, 1u))) + 1), min(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, (1u ^ 1u), 1u, 1u))) + 1), min((_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, (1u ^ 1u), 1u, 1u))) + 1), (_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, (1u ^ 1u), 1u, 1u))) + 1))), (_GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, (1u ^ 1u), 1u, 1u))) + 1))) % subgroup_size), clamp(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), ~ (~ (~ (subgroup_size)))))) : _GLF_FUZZED(subgroup_local_id))) + ((subgroup_local_id + 1) % subgroup_size)) - 0u), workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1)))) / (1u ^ (0u >> _GLF_IDENTITY(uint(1u), uint(1u))))) % subgroup_size))), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * subgroup_size + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, 0u, 0u)))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, 0u, 0u)))), (~ (_GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, 0u, 0u))))) >> 0u), ~ (_GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, 0u, 0u)))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, 0u, 0u)))), clamp(~ (_GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, 0u, 0u)))), ~ (_GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, 0u, 0u)))), ~ (_GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, 0u, 0u)))))))), (true ? ~ (_GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, 0u, 0u)))) : _GLF_FUZZED(subgroup_size)))))), clamp(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), (workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, max(1, 1)), 1))) % subgroup_size)) - 0u), workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), uint(_GLF_IDENTITY(uint(((subgroup_local_id + 1) % subgroup_size)), 0u | (uint(((subgroup_local_id + 1) % subgroup_size)))))))), 0u | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), (workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + _GLF_IDENTITY(1, (1) - (0 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (4) | (4))))))) % subgroup_size)) - 0u), workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (0u >> _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))) ^ (subgroup_id * subgroup_size)) + _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), min(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))), 0u ^ (_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), min(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), clamp(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size))), clamp(_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, 1u * (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) ^ 0u))))) + ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY((workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)) + ((subgroup_local_id + 1) % subgroup_size)), 0u | (_GLF_IDENTITY((workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)) + ((subgroup_local_id + 1) % subgroup_size)), 1u * ((workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)) + ((subgroup_local_id + 1) % subgroup_size)))))) - 0u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), 0u | (workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)), ((subgroup_local_id + 1)) / 1u) % subgroup_size))), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), (workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u))) + 1) % subgroup_size), 1u * (((_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u))) + 1) % subgroup_size)))) ^ 0u)) | uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x))), workgroup_base + _GLF_IDENTITY(subgroup_id, clamp(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u), subgroup_id, subgroup_id)) * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((0u | _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) / 1u), clamp(_GLF_IDENTITY(0u, (0u) / 1u), _GLF_IDENTITY(0u, (0u) / 1u), _GLF_IDENTITY(0u, (0u) / 1u))), 0u))), ((0u | _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) / 1u), clamp(_GLF_IDENTITY(0u, (0u) / 1u), _GLF_IDENTITY(0u, (0u) / 1u), _GLF_IDENTITY(0u, (0u) / 1u))), 0u)))) << 0u) | (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(~ ((subgroup_local_id + 1) % subgroup_size), (~ ((subgroup_local_id + 1) % subgroup_size)) | (~ ((subgroup_local_id + 1) % subgroup_size)))) << 0u))))))))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat4(injectionSwitch[0], 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, length(vec2(0.0, 0.0)), 0.0))), injectionSwitch[1])).y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))) || false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) && true)), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), ! (! (false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), bool(bool(! (false))))) && true))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, true))), ! (! (false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), ! (! (false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, false, true)))), ! (! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), ! (! (false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, false, true))))))))) || false, bool(bvec4((_GLF_IDENTITY(false, ! (! (false)))) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), false, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     buf[virtual_gid] = 1;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, _GLF_IDENTITY(clamp(_GLF_IDENTITY(1 & 1, ~ (_GLF_IDENTITY(~ (1 & 1), _GLF_IDENTITY(int(ivec2(~ (1 & 1), int(_GLF_ZERO(0.0, injectionSwitch.x)))), (int(ivec2(~ (1 & 1), int(_GLF_ZERO(0.0, injectionSwitch.x))))) << (99640 & 0))))), 1 & 1, 1 & 1), (clamp(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), 1 & 1, _GLF_IDENTITY(1, 0 ^ (1)) & 1)) | _GLF_IDENTITY((clamp(_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (_GLF_IDENTITY(1 & 1, (-55977 & (-93508 & 0)) ^ (1 & 1))))), (_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), int(ivec4(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), 1, 1, 1)))) | (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))))), (0 >> _GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)) | (_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(1 & 1, ~ (~ (_GLF_IDENTITY(1 & 1, (_GLF_IDENTITY(1 & 1, max(1 & 1, 1 & 1))) | (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))))))))))), (true ? _GLF_IDENTITY(0, (0) | (0)) | (_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(1 & 1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, max(1, 1)) & 1)), int(int(_GLF_IDENTITY((~ (_GLF_IDENTITY(1, max(1, 1)) & 1)), ((~ (_GLF_IDENTITY(1, max(1, 1)) & 1))) << 0)))))))) : _GLF_FUZZED((_injected_loop_counter ++)))))))) + 0), 1 & _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), clamp(1, _GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, min(1, 1)))), 1 & 1)), ((clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, min(1, 1)))) & 1, ~ (~ (1 & 1))), (_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (1 & 1)), min(~ (~ (1 & 1)), ~ (~ (1 & 1)))), 0 ^ (_GLF_IDENTITY(~ (~ (1 & 1)), min(~ (~ (1 & 1)), ~ (~ (1 & 1))))))), (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, 5))), clamp(_GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))), _GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), min(int(5), int(5))), int(5))), int(5))))) | (_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), 0 | (_GLF_IDENTITY(1 & _GLF_IDENTITY(1, (1) - (_GLF_IDENTITY((_GLF_IDENTITY(0 & 24422, 0 | (0 & 24422))), 0 + ((_GLF_IDENTITY(_GLF_IDENTITY(0 & 24422, max(_GLF_IDENTITY(0 & 24422, int(int(0 & 24422))), 0 & 24422)), 0 | (0 & 24422))))) >> _GLF_IDENTITY(int(7), int(7)))), ~ (~ (1 & 1)))))))) + 0), 1 & _GLF_IDENTITY(1, (1) - (0 << _GLF_IDENTITY(int(1), int(1)))), 1 & 1))) | (_GLF_IDENTITY((clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (_GLF_IDENTITY(~ (1 & 1), _GLF_IDENTITY((~ (1 & 1)) | (~ (1 & 1)), ((~ (1 & 1)) | (~ (1 & 1))) >> 0)))), ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(max(1, 1), ~ (~ (max(1, 1))))) & 1))), (_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), (0 >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, int(int(5)))) - 0)))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1)))) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1)))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), int(ivec4(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), 0, 1, 1))))), 0 | (_GLF_IDENTITY(1 & 1, ~ (~ (_GLF_IDENTITY(1 & 1, (1 & 1) / 1)))))), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), 0 | (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))))), _GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), 0 | (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1)))))), clamp(min(_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), 0 | (_GLF_IDENTITY(1 & 1, _GLF_IDENTITY(~ (~ (1 & 1)), (~ (~ (1 & 1))) << (1 ^ int(_GLF_ONE(1.0, injectionSwitch.y))))))), _GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), _GLF_IDENTITY(0 | (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1)))), max(0 | (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1)))), 0 | (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1)))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), 0 | (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), 0 | (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))))), (_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), 0 | (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1)))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, (_GLF_IDENTITY(1 & 1, clamp(1 & 1, _GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), 1 & 1))) | (1 & 1)), ~ (~ (1 & 1))), 0 | (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))))), _GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), 0 | (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1)))))), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y)))), false))))))) ? min(_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), 0 | (_GLF_IDENTITY(1 & _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, 0 ^ (1)))), ~ (~ (1 & 1))))), _GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), 0 | (_GLF_IDENTITY(1 & _GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, (1) | 0), 1, (1 | 1)))), ~ (~ (1 & 1)))))) : _GLF_FUZZED(_GLF_IDENTITY(-38213, 0 ^ (-38213))))))))))) + 0), 1 & _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), 0 ^ (1)), ~ (~ (_GLF_IDENTITY(1, 0 ^ (1))))), 1 & 1)), (false ? _GLF_FUZZED(_injected_loop_counter) : (clamp(_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (1 & _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, min(1, 1)), 1))) + 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), _GLF_IDENTITY(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), int(5))), ~ (~ ((_GLF_IDENTITY(0, min(0, 0)) >> _GLF_IDENTITY(int(5), int(5)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (_GLF_IDENTITY(1, max(1, 1)) & 1))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1)))) | (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), (_GLF_IDENTITY(1 & _GLF_IDENTITY(1, (1) / (1 | 0)), ~ (~ (1 & 1)))) - 0), clamp(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), _GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), _GLF_IDENTITY(1 & 1, ~ (~ (1 & 1)))))) >> 0)))), (_GLF_IDENTITY(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), int(5))), ~ (~ ((_GLF_IDENTITY(0, min(0, 0)) >> _GLF_IDENTITY(int(5), int(5)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (_GLF_IDENTITY(1, max(1, 1)) & 1))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1)))) | (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), (_GLF_IDENTITY(1 & _GLF_IDENTITY(1, (1) / (1 | 0)), ~ (~ (1 & 1)))) - 0), clamp(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), _GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), _GLF_IDENTITY(1 & 1, ~ (~ (1 & 1)))))) >> 0)))), max(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), int(5))), ~ (~ ((_GLF_IDENTITY(0, min(0, 0)) >> _GLF_IDENTITY(int(5), int(5)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (_GLF_IDENTITY(1, max(1, 1)) & 1))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1)))) | (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), (_GLF_IDENTITY(1 & _GLF_IDENTITY(1, (1) / (1 | 0)), ~ (~ (1 & 1)))) - 0), clamp(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), _GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), _GLF_IDENTITY(1 & 1, ~ (~ (1 & 1)))))) >> 0)))), _GLF_IDENTITY(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), int(5))), ~ (~ ((_GLF_IDENTITY(0, min(0, 0)) >> _GLF_IDENTITY(int(5), int(5)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (_GLF_IDENTITY(1, max(1, 1)) & 1))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1)))) | (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), (_GLF_IDENTITY(1 & _GLF_IDENTITY(1, (1) / (1 | 0)), ~ (~ (1 & 1)))) - 0), clamp(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), _GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), _GLF_IDENTITY(1 & 1, ~ (~ (1 & 1)))))) >> 0)))), (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), int(5))), ~ (~ ((_GLF_IDENTITY(0, min(0, 0)) >> _GLF_IDENTITY(int(5), int(5)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (_GLF_IDENTITY(1, max(1, 1)) & 1))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1)))) | (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), (_GLF_IDENTITY(1 & _GLF_IDENTITY(1, (1) / (1 | 0)), ~ (~ (1 & 1)))) - 0), clamp(_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), _GLF_IDENTITY(1 & 1, ~ (~ (1 & 1))), _GLF_IDENTITY(1 & 1, ~ (~ (1 & 1)))))) >> 0))))) ^ 0)))) * (1 & 1)))) + 0), 1 & 1, 1 & 1)))))))), (_GLF_IDENTITY(1 & 1, clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) / 1), 1)) & 1, ~ (~ (1 & _GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(3), int(3))) ^ (1))))), 1 & 1, _GLF_IDENTITY(1 & _GLF_IDENTITY(1, min(1, 1)), clamp(1 & _GLF_IDENTITY(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) * 1), 1)), (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) * 1), 1))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) * 1), 1)), min(_GLF_IDENTITY(1, min(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) * 1), max(_GLF_IDENTITY(1, (1) * 1), _GLF_IDENTITY(1, (1) * 1))), 1)), _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, _GLF_IDENTITY((1) * 1, (_GLF_IDENTITY((1) * 1, (false ? _GLF_FUZZED(64572) : (1) * 1))) | 0)), 1)))))), 1 & _GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(1, 0 | (1)) & _GLF_IDENTITY(1, min(1, 1))))))) >> 0))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)))) || false)))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         _GLF_IDENTITY(buf[next_virtual_gid] = 2, _GLF_IDENTITY((_GLF_IDENTITY(buf[next_virtual_gid] = 2, (buf[next_virtual_gid] = _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, _GLF_IDENTITY((2), max(_GLF_IDENTITY((2), ((2)) | (_GLF_IDENTITY((2), ((2)) | 0))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(2, 0 + (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(12385))))), max(2, _GLF_IDENTITY(2, min(2, 2))))), int(int(_GLF_IDENTITY((2), ((2)) / 1)))))) >> 0), 2))) | _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, (0u) | (0u))))) | (0u)), (_GLF_IDENTITY(0u, uint(uvec3(_GLF_IDENTITY(0u, uint(uvec2(0u, 1u))), 0u, 0u)))) ^ _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(2u), uint(2u))), (_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(2u), uint(2u))), min((0u << _GLF_IDENTITY(uint(2u), uint(2u))), (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(2u), uint(2u)), min(0u << _GLF_IDENTITY(uint(2u), uint(2u)), 0u << _GLF_IDENTITY(uint(2u), uint(2u)))))))) - 0u))) / 1u))) / 1u, ((_GLF_IDENTITY(buf[next_virtual_gid] = 2, _GLF_IDENTITY((buf[next_virtual_gid] = _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(2, max(2, 2)), (false ? _GLF_FUZZED(_injected_loop_counter) : 2))) >> 0), 2))) | _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) - 0u), (_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u))))) ^ (0u << _GLF_IDENTITY(uint(2u), uint(2u))))) / 1u), (_GLF_IDENTITY((buf[next_virtual_gid] = _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(2, max(2, 2)), (false ? _GLF_FUZZED(_injected_loop_counter) : 2))) >> 0), 2))) | _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) - 0u), (_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u))))) ^ (0u << _GLF_IDENTITY(uint(2u), uint(2u))))) / 1u), 0u | ((buf[next_virtual_gid] = _GLF_IDENTITY(2, _GLF_IDENTITY(max(_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(2, max(2, 2)), (false ? _GLF_FUZZED(_injected_loop_counter) : 2))) >> 0), 2), (max(_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(2, max(2, 2)), (false ? _GLF_FUZZED(_injected_loop_counter) : 2))) >> 0), 2)) >> (1 ^ 1)))) | _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) - 0u), (_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u))))) ^ (0u << _GLF_IDENTITY(uint(2u), uint(2u))))) / 1u)))) + 0u))) / _GLF_IDENTITY(1u, (1u) << (0u >> _GLF_IDENTITY(uint(2u), uint(2u))))) - _GLF_IDENTITY(0u, (0u) << 0u)));
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (-87888 & (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, float(vec2(1.0, 0.0))), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-938.455, -1373.8699)) : injectionSwitch)), injectionSwitch)).y))))
                  barrier();
                }
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) ^ 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)), max((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)), (1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))))))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
