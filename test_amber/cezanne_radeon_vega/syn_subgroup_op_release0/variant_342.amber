#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged2_0_3_76_3_1_17GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_basesubgroup_local_id;
 uvec4 GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_idnum_workgroup;
 uvec4 GLF_merged3_0_2_50_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_idsubgroup_size;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 uvec3 GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       return;
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((1 ^ 1) << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(7.9) : 0.0)), injectionSwitch.x)), (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)))) | (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x3(injectionSwitch, 1.0, 0.0, 0.0, exp(0.0)), (mat2x3(injectionSwitch, 1.0, 0.0, 0.0, exp(0.0))) + mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).x)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(7.9) : 0.0)), injectionSwitch.x)), 0 ^ (int(_GLF_ZERO(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(7.9) : 0.0)), injectionSwitch.x)))), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | (int(_GLF_ZERO(0.0, injectionSwitch.x))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(7.9) : 0.0)), injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)))), min(_GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(7.9) : 0.0)), injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(7.9) : 0.0)), injectionSwitch.x)), (int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) - sin(0.0)), injectionSwitch.x))) | (int(_GLF_ZERO(0.0, injectionSwitch.x))))))))); _injected_loop_counter --)
    {
     _GLF_IDENTITY(GLF_merged2_0_3_76_3_1_17GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_basesubgroup_local_id.xyz = GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(7.9, 8966.7581)) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y)) ? _GLF_FUZZED(uvec3(51296u, 163538u, 190970u)) : _GLF_IDENTITY(GLF_merged2_0_3_76_3_1_17GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_basesubgroup_local_id.xyz = GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base, (GLF_merged2_0_3_76_3_1_17GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_basesubgroup_local_id.xyz = GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_base) << uvec3(0u, 0u, 0u))));
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 uvec3 GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_size;
 uvec3 GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id;
 uvec4 GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, true)))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false))))))
    barrier();
  }
 uvec2 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size;
 GLF_merged3_0_2_50_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_idsubgroup_size.xy = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_size;
 GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size.xy = GLF_merged3_0_2_50_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_idsubgroup_size.xy;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3573.4620) : injectionSwitch.x)))) > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 & 61233); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), (injectionSwitch[0]) / 1.0), injectionSwitch[0])), injectionSwitch[1])).y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)), (bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true))) || false)))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
  return;
 uvec3 GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_id;
 GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_idnum_workgroup.xyz = GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 1.0, 1.0, 0.0, 0.0, 1.0)), min(vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 1.0, 1.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 1.0, 1.0, 0.0, 0.0, 1.0)), min(vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 1.0, 1.0, 0.0, 0.0, 1.0)), vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 1.0, 1.0, 0.0, 0.0, 1.0))))))).y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))), max((1 << _GLF_IDENTITY(int(3), int(3))), (1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) << 0))))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))), max((1 << _GLF_IDENTITY(int(3), int(3))), (1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) << 0)))))) - 0) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 ^ (int(3))))) ^ 1)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false)))))))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))) && true))
        barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 else
  {
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged3_0_2_50_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_idsubgroup_size.z = subgroup_id;
 _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id.y = GLF_merged3_0_2_50_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_idsubgroup_size.z, 0u ^ (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id.y = GLF_merged3_0_2_50_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_idsubgroup_size.z, 1u * (GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id.y = GLF_merged3_0_2_50_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_idsubgroup_size.z))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))), _GLF_IDENTITY(bool(bvec2(! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))), true)), _GLF_IDENTITY(bool(bvec2(bool(bvec2(! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))), true)), false)), ! (! (bool(bvec2(bool(bvec2(! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), true && (true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))))), true)), false)))))))))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec2(_GLF_IDENTITY(bool(false), (bool(false)) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))));
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged3_0_2_50_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_idsubgroup_size.w = subgroup_size;
 do
  {
   GLF_merged2_0_3_76_3_1_17GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_basesubgroup_local_id.xyz.y = GLF_merged3_0_2_50_2_1_11_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_idsubgroup_size.w;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), true)))))) && true), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
  {
  }
 else
  {
   GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size.w = GLF_merged2_0_3_76_3_1_17GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_basesubgroup_local_id.xyz.y;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, abs(1.0) * (injectionSwitch.x))) / 1.0) > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged2_0_3_76_3_1_17GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_basesubgroup_local_id.w = subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_3_76_3_1_17GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_basesubgroup_local_id.xyz.x = _GLF_IDENTITY(GLF_merged2_0_3_76_3_1_17GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_basesubgroup_local_id, min(GLF_merged2_0_3_76_3_1_17GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_basesubgroup_local_id, GLF_merged2_0_3_76_3_1_17GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_basesubgroup_local_id)).w;
 GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size.z = GLF_merged2_0_3_76_3_1_17GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_basesubgroup_local_id.xyz.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, true && (true)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(floor(injectionSwitch)) : injectionSwitch)).x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) && true), false, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), true))))))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))))), (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
            return;
           barrier();
          }
         barrier();
        }
       else
        {
        }
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))))))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))), true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))))
    {
    }
   else
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
        return;
       barrier();
      }
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true))))), bool(bool(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))))))))
        break;
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) & int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_IDENTITY(_GLF_FUZZED(-83.63), clamp(_GLF_FUZZED(-83.63), _GLF_IDENTITY(_GLF_FUZZED(-83.63), 0.0 + (_GLF_FUZZED(-83.63))), _GLF_IDENTITY(_GLF_FUZZED(-83.63), max(_GLF_FUZZED(-83.63), _GLF_FUZZED(-83.63)))))), bool(false))) > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_IDENTITY(_GLF_FUZZED(-83.63), clamp(_GLF_FUZZED(-83.63), _GLF_IDENTITY(_GLF_FUZZED(-83.63), 0.0 + (_GLF_FUZZED(-83.63))), _GLF_IDENTITY(_GLF_FUZZED(-83.63), max(_GLF_FUZZED(-83.63), _GLF_FUZZED(-83.63)))))), bool(false))) > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_IDENTITY(_GLF_FUZZED(-83.63), clamp(_GLF_FUZZED(-83.63), _GLF_IDENTITY(_GLF_FUZZED(-83.63), 0.0 + (_GLF_FUZZED(-83.63))), _GLF_IDENTITY(_GLF_FUZZED(-83.63), max(_GLF_FUZZED(-83.63), _GLF_FUZZED(-83.63)))))), bool(false))) > injectionSwitch.y)), false)))))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, 1u * (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x))));
 GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_idnum_workgroup.w = num_workgroup;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id.x = GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_idnum_workgroup.w;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (false)))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((6053.2153 - -3.9)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((false ? (1.1 - -32.55) : -545.901))), bvec2(true, false))).x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - determinant(mat4(0.0, 0.0, 1.0, sqrt(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 0.0, 0.0))) > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(true, ! (! (true))), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2(0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, tan(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, abs(0.0), 1.0, 1.0, 1.0, 0.0)), 1.0, 1.0)), max(float(mat2(0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, tan(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, abs(0.0), 1.0, 1.0, 1.0, 0.0)), 1.0, 1.0)), float(mat2(0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, tan(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, abs(0.0), 1.0, 1.0, 1.0, 0.0)), 1.0, 1.0)))))))))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(true, ! (! (true))), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(true, ! (! (true))), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(true, ! (! (true))), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))))), false || (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), (_GLF_IDENTITY((! (true)), ! (! ((! (true)))))) && true)), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))))))))))), _GLF_IDENTITY(! (! (bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(true, ! (! (true))), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))))))))), ! (! (! _GLF_IDENTITY((! (bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), false, true))))), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))), ! (! (bool(bvec4(false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), false, true))))), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))))))))))), bool(bool(_GLF_IDENTITY((! (bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), false, true))))), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))), ! (! (bool(bvec4(false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), false, true))))), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))))))))))), bool(bool((! (bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), false, true))))), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))), ! (! (bool(bvec4(false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), false, true))))), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))))))))))))))))))))))))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))) + vec2(0.0, 0.0))).y, bool(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))) + vec2(0.0, 0.0))).y, true, false)))), ! (! ((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))), injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))) + vec2(0.0, 0.0))).y))))), true && (_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))) + vec2(0.0, 0.0))).y, bool(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))) + vec2(0.0, 0.0))).y, true, false)))), ! (! ((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))), injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))) + vec2(0.0, 0.0))).y))))), true && (_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))) + vec2(0.0, 0.0))).y, bool(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch))), mat2(1.0) * (injectionSwitch)))) + vec2(0.0, 0.0))).y, true, false)))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))), injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))), injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))), injectionSwitch)), vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))), injectionSwitch)))))).x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-0.8), _GLF_FUZZED(295.144)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))) / vec2(1.0, 1.0))), mat2(1.0) * (injectionSwitch)))) + vec2(0.0, 0.0))).y, mix(float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-0.8), _GLF_FUZZED(295.144)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))) / vec2(1.0, 1.0))), mat2(1.0) * (injectionSwitch)))) + vec2(0.0, 0.0))).y), float(_GLF_FUZZED(-62.33)), bool(false))))))))))))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-32.17, 1264.8625)))))))) + vec2(0.0, 0.0))).y, bool(bvec3(injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-0.6), _GLF_IDENTITY((injectionSwitch)[1], 1.0 * ((injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(-4093.7957)), bvec2(true, false))), _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))) + vec2(0.0, 0.0))).y, true, false)))), ! (! ((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], float(_GLF_IDENTITY(mat2x4(injectionSwitch[1], 1.0, 0.0, 1.0, cos(0.0), 1.0, 1.0, 0.0), (mat2x4(injectionSwitch[1], 1.0, 0.0, 1.0, cos(0.0), 1.0, 1.0, 0.0)) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 1.0 * _GLF_IDENTITY((injectionSwitch[1]), mix(float((injectionSwitch[1])), float(_GLF_FUZZED((-5.9 + 7.8))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)), max(_GLF_IDENTITY(max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)), vec2(0.0, 0.0) + (_GLF_IDENTITY(max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)), mat2(1.0) * (max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))))), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))))) + vec2(0.0, 0.0))).y))))), true && (_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))) + vec2(0.0, 0.0))).y, bool(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))) + vec2(0.0, 0.0))).y, true, false)))), ! (! ((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))), injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch))), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0))))) + vec2(0.0, 0.0))).y))))), true && (_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(_GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(mat2(1.0), mat2(1.0) * (mat2(1.0)))) / mat2(1.0, 1.0, 1.0, 1.0)) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))) + vec2(0.0, 0.0))).y, bool(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mat2(1.0) * (mat2(1.0) * (injectionSwitch))), max(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch))), mat2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (1.0))) - 0.0)) * (injectionSwitch)))) + vec2(0.0, 0.0))).y, true, false)))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))), injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1]))))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))), injectionSwitch), (true ? _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))), injectionSwitch), max(_GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))), injectionSwitch), max(min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))), injectionSwitch), min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))), injectionSwitch))), min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))), injectionSwitch))) : _GLF_FUZZED(injectionSwitch)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))), injectionSwitch)), vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))), injectionSwitch)))))).x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-0.8), _GLF_FUZZED(295.144)), vec2((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[0], (injectionSwitch)[1]), bvec2(true, true)))) / vec2(1.0, 1.0))), mat2(1.0) * (injectionSwitch)))) + vec2(0.0, 0.0))).y, mix(float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch))), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-0.8), _GLF_FUZZED(295.144)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))) / vec2(1.0, 1.0))), mat2(1.0) * (injectionSwitch)))) + vec2(0.0, 0.0))).y), float(_GLF_FUZZED(-62.33)), bool(false))))))))))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)))), 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 1.0, 1.0, 1.0)))))))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))
            break;
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_idnum_workgroup.xyz.y = GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id.x, (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_idnum_workgroup.xyz.y = GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id.x) ^ 0u);
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 0.0, 0.0, cos(0.0), 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) * 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(890.188)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-2.0, -7.1)) : injectionSwitch)).y), true && ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-2.0, -7.1)) : injectionSwitch)).y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y) - 0.0))), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), false, false, true))), (injectionSwitch.x > injectionSwitch.y))) && true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))) && true))))
      {
       do
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, 0 ^ (1))); _injected_loop_counter ++)
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 return;
                }
               return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 return;
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                continue;
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
    continue;
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))))), false || (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 1.0, 0.0))), min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(tanh(5.5)))))), injectionSwitch.y)))))))))));
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), bool(bvec3(bool(bool(injectionSwitch.x > injectionSwitch.y)), true, false))))), bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), bool(bvec3(bool(bool(injectionSwitch.x > injectionSwitch.y)), true, false)))))))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)), (false ? _GLF_FUZZED(vec2(-64.79, -760.777)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)), vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)))))).y))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3(injectionSwitch.x, 0.0, sin(_GLF_IDENTITY(tan(0.0), mix(float(tan(0.0)), float(_GLF_FUZZED((- -21.88))), bool(false)))), 0.0, 0.0, cos(0.0), 0.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3(injectionSwitch.x, 0.0, sin(tan(0.0)), 0.0, 0.0, cos(0.0), 0.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))))))) > injectionSwitch.y))))), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))), false, false)), bool(bool(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))), false, false)), bool(bvec4(bool(bvec3(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))), false, false)), true, false, true)))))))), true)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false))), true)), ! _GLF_IDENTITY((! (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(vec2(-1521.7782, 429.565).r)), vec2(_GLF_FUZZED(7.3), _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - 0.0)), bvec2(false, true))).y)))))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), injectionSwitch[1])).y) || false))), _GLF_IDENTITY(true, false || (true)))))), true && ((! (bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))).x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)) && true)) && true))))), _GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true))), false || _GLF_IDENTITY((true), bool(_GLF_IDENTITY(bool((true)), bool(bool(_GLF_IDENTITY(bool((true)), (bool((true))) || false)))))))))))))))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_size.z = workgroup_size, ~ (~ _GLF_IDENTITY((GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_size.z = workgroup_size), (_GLF_IDENTITY((GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_size.z = workgroup_size), ~ (~ ((GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_size.z = workgroup_size))))) >> 0u)));
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    break;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), ! (! (_GLF_DEAD(false)))))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), (bool(bvec2(true, false))) || false))))
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, false))))), _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), bool(bool(_GLF_IDENTITY(true, bool(bvec3(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              return;
             barrier();
            }
           GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size.xy.y = GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_size.z;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2482.0651), _GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED((-8.0))), bool(false)))), vec2((injectionSwitch)[0], _GLF_FUZZED(2.7)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x > _GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 0.0, 0.0, 1.0)))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               else
                {
                }
              }
             else
              {
              }
            }
          }
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(bvec2(! (_GLF_IDENTITY(false, (false) && true)), true)))))))))))))))))))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), true && (bool(bvec2(_GLF_DEAD(false), true)))))) || false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))))
    {
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) * 1)) - 0))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(4), int(4)), max(0 >> _GLF_IDENTITY(int(4), int(4)), 0 >> _GLF_IDENTITY(int(4), int(4)))))); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id.z = workgroup_id;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y)))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))))))
      {
      }
     else
      {
       GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_idnum_workgroup.xyz.z = GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id.z;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))));
 uint workgroup_base = _GLF_IDENTITY(GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size.xy, (GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size.xy) >> uvec2(0u, 0u)).y * GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_idnum_workgroup.xyz.z;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))
  {
  }
 else
  {
   GLF_merged2_0_3_76_3_1_17GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_basesubgroup_local_id.xyz.z = workgroup_base;
  }
 _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_size.y = GLF_merged2_0_3_76_3_1_17GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_basesubgroup_local_id.xyz.z, _GLF_IDENTITY((GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_size.y = GLF_merged2_0_3_76_3_1_17GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_basesubgroup_local_id.xyz.z), 0u | (_GLF_IDENTITY((GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_size.y = GLF_merged2_0_3_76_3_1_17GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_basesubgroup_local_id.xyz.z), 0u | ((GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_size.y = GLF_merged2_0_3_76_3_1_17GLF_merged3_0_1_17_1_1_13_2_1_14subgroup_local_idsubgroup_sizeworkgroup_basesubgroup_local_id.xyz.z))))) << 0u);
 uint virtual_gid = GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_size.y + GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id.y * GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size.w + GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size.z;
 do
  {
   GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_size.x = _GLF_IDENTITY(virtual_gid, uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u), clamp(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u), min(uvec4(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u), uvec4(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u))), _GLF_IDENTITY(uvec4(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), 1u, uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(mat4x3(_GLF_ONE(1.0, injectionSwitch.y), sqrt(1.0), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)))), 0u), (false ? _GLF_FUZZED(uvec4(99355u, 28725u, 27698u, _GLF_IDENTITY(33080u, 0u | (33080u)))) : uvec4(_GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY((virtual_gid), clamp(_GLF_IDENTITY((virtual_gid), ((virtual_gid)) / 1u), _GLF_IDENTITY((virtual_gid), ((virtual_gid)) | ((virtual_gid))), (virtual_gid)))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u))), _GLF_IDENTITY(uvec4(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u), (uvec4(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u)) | (uvec4(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u)))))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), false || (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))) || false)))), bool(bvec4(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false) || false, ((false) || false) || false)), false || (bool(_GLF_IDENTITY((false) || false, ((false) || false) || false))))))))))), false, true, false)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(1), int(1)), 1 * (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(1), int(1)), (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(1), int(1))) * 1)) | 0)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), ! (_GLF_IDENTITY(! (_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), ! (! (_GLF_IDENTITY(! (_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (! (_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))) && true))))))); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size.xy.x = GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_size.x;
 for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 & 21824) ^ 1)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) && true))))
    {
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x2(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-20.20)))))) > injectionSwitch.y))), _GLF_IDENTITY(false, ! (! (false))) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-7684.9995))), 1.0, 1.0, 0.0, 1.0)), max(float(mat4x2(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0)), _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0)), mix(float(float(mat4x2(injectionSwitch.x, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0))), float(_GLF_IDENTITY(_GLF_FUZZED(84.42), (true ? _GLF_FUZZED(84.42) : _GLF_FUZZED(4.2)))), bool(false)))))) > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-7684.9995))), 1.0, 1.0, 0.0, 1.0)), max(float(mat4x2(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0)), _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0)), mix(float(float(mat4x2(injectionSwitch.x, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0))), float(_GLF_IDENTITY(_GLF_FUZZED(84.42), (true ? _GLF_FUZZED(84.42) : _GLF_FUZZED(4.2)))), bool(false)))))) > injectionSwitch.y)))) || false))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) || false)) && true) || false, ! (! (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) || false)) && true) || false))))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), bool(bvec3((! (injectionSwitch.x > injectionSwitch.y)), false, false)))))))))))
              {
              }
             else
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
            }
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((false))) && true)));
     barrier();
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
           do
            {
             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = _GLF_IDENTITY((0 & -74355), _GLF_IDENTITY(min((0 & -74355), (0 & -74355)), max(min((0 & -74355), (0 & -74355)), min((0 & -74355), (0 & -74355))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, max(3, _GLF_IDENTITY(3, max(3, 3)))))))); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) && true))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, false)))))))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_size.y, ~ (~ (GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_size.y))) + _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id.y, max(GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id.y, _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id.y, uint(uvec2(GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id.y, 0u))))) * GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size.w, clamp(GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_size.y + GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id.y * GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size.w, _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_size.y + GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id.y * GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size.w, (true ? GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_size.y + GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id.y * GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size.w : _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), _GLF_IDENTITY((_GLF_FUZZED(subgroup_size)) + (1u ^ 1u), (0u << _GLF_IDENTITY(uint(6u), uint(6u))) ^ ((_GLF_FUZZED(subgroup_size)) + (1u ^ 1u)))))), _GLF_IDENTITY(GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_size.y + _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id.y * GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size.w, (GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id.y * GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size.w) ^ 0u), (GLF_merged3_0_1_11_1_1_14_2_1_14virtual_gidworkgroup_baseworkgroup_size.y + _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id.y, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id, (GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id) | (GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id))) | uvec3(0u, 0u, 0u)).y, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id, (GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id) | (GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id))) | uvec3(0u, 0u, 0u)).y, uint(uvec2(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id, (GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id) | (GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id))) | uvec3(0u, 0u, 0u)).y, 0u)))) * (1u & 1u))) | (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id.y, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id, uvec3(uvec3(GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id))).y) << 0u))) * GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size.w) - 0u))) + (_GLF_IDENTITY((GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size.z + 1), _GLF_IDENTITY(((GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size.z + 1)), (((GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size.z + 1))) << 0u) + 0u) % _GLF_IDENTITY(GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size, uvec4(GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size[0], GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size[1], GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size[2], GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size[3])).w);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 do
  {
   GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_idnum_workgroup.xyz.x = _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) * 1u);
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-620.206))) > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), (! (_GLF_IDENTITY(false, (false) && true))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))
    barrier();
  }
 else
  {
  }
 do
  {
   do
    {
     _GLF_IDENTITY(buf[GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size.xy.x] = 1, (false ? _GLF_FUZZED(GLF_merged3_0_1_13_1_1_11_2_1_12num_workgroupsubgroup_idworkgroup_id.x) : _GLF_IDENTITY(buf[GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size.xy.x] = 1, _GLF_IDENTITY((buf[GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size.xy.x] = 1) ^ 0u, ~ (~ ((buf[GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size.xy.x] = 1) ^ 0u))))));
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-20.90))) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (_GLF_IDENTITY(! (true), false || (! (true)))))))))));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(false, bool(bool(false)))), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(false)))))), true, true)), bvec2(bvec2(bvec2(bvec4(bvec2(false, _GLF_IDENTITY(false, bool(bool(false)))), true, true)))))))), (false) && true)));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) && true)))), false)))) && true)))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), true && (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(86.15)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))));
            }
          }
         else
          {
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(((_GLF_IDENTITY((((0 | 1) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(ivec2(-42179, -39718).y)))), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY((((0 | 1) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(ivec2(-42179, -39718).y)))), ((((0 | 1) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(ivec2(-42179, -39718).y))))) ^ 0), 1, 1)), (int(ivec3(_GLF_IDENTITY((((0 | 1) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(ivec2(-42179, -39718).y)))), ((((0 | 1) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(ivec2(-42179, -39718).y))))) ^ 0), 1, 1))) | (int(ivec3(_GLF_IDENTITY((((0 | 1) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(ivec2(-42179, -39718).y)))), ((((0 | 1) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(ivec2(-42179, -39718).y))))) ^ 0), 1, 1)))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))), 0))), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-30033))))), max(((_GLF_IDENTITY((((0 | 1) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(ivec2(-42179, -39718).y)))), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY((((0 | 1) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(ivec2(-42179, -39718).y)))), ((((0 | 1) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(ivec2(-42179, -39718).y))))) ^ 0), 1, 1)), (int(ivec3(_GLF_IDENTITY((((0 | 1) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(ivec2(-42179, -39718).y)))), ((((0 | 1) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(ivec2(-42179, -39718).y))))) ^ 0), 1, 1))) | (int(ivec3(_GLF_IDENTITY((((0 | 1) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(ivec2(-42179, -39718).y)))), ((((0 | 1) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(ivec2(-42179, -39718).y))))) ^ 0), 1, 1)))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))), 0))), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-30033))))), ((_GLF_IDENTITY((((0 | 1) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(ivec2(-42179, -39718).y)))), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY((((0 | 1) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(ivec2(-42179, -39718).y)))), ((((0 | 1) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(ivec2(-42179, -39718).y))))) ^ 0), 1, 1)), (int(ivec3(_GLF_IDENTITY((((0 | 1) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(ivec2(-42179, -39718).y)))), ((((0 | 1) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(ivec2(-42179, -39718).y))))) ^ 0), 1, 1))) | (int(ivec3(_GLF_IDENTITY((((0 | 1) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(ivec2(-42179, -39718).y)))), ((((0 | 1) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(ivec2(-42179, -39718).y))))) ^ 0), 1, 1)))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))), 0))), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(-30033))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), (false) && _GLF_TRUE(_GLF_IDENTITY(true, bool(bool(true))), (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-9.4, 973.643)))))), _GLF_IDENTITY(vec2(mat4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 1.0, abs(0.0), 1.0, tan(0.0), 0.0, 1.0, log(1.0), 1.0, tan(0.0), 0.0, 0.0, abs(0.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0)), min(vec2(mat4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 1.0, abs(0.0), 1.0, tan(0.0), 0.0, 1.0, log(1.0), 1.0, tan(0.0), 0.0, 0.0, abs(0.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0)), vec2(mat4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 1.0, abs(0.0), 1.0, tan(0.0), 0.0, 1.0, log(1.0), 1.0, tan(0.0), 0.0, 0.0, abs(0.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0))))).y)))))
              barrier();
            }
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            barrier();
          }
         else
          {
          }
        }
       break;
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 0.0, tan(0.0), 1.0, 1.0))).y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
              return;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))), _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)) && (false))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), false || (bool(false)))))))
            barrier();
          }
         else
          {
           barrier();
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size.z + 1 < _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size.w, 0u + _GLF_IDENTITY((GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size.w), (_GLF_IDENTITY((GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size.w), max((GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size.w), (GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size.w)))) - 0u)), (false ? _GLF_FUZZED(_GLF_IDENTITY(GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size.xy, ~ (~ (GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size.xy))).x) : _GLF_IDENTITY(GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size.w, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size.w, (GLF_merged3_0_2_50_2_1_17_3_1_13GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_sizesubgroup_local_idsubgroup_size.w) ^ 0u) : _GLF_FUZZED(num_workgroup))))))
    {
     atomicStore(buf[GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_idnum_workgroup.xyz.x], uint(_GLF_IDENTITY(2, 0 ^ (2))), 4, _GLF_IDENTITY(64, 0 | (64)), 4);
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(8.9), _GLF_IDENTITY((injectionSwitch)[1], max(_GLF_IDENTITY((injectionSwitch)[1], clamp(_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) * 1.0), (injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], mix(float(_GLF_FUZZED(-56.14)), float((injectionSwitch)[1]), bool(true))))), (injectionSwitch)[1]))), vec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)), min(injectionSwitch, injectionSwitch)))[0], _GLF_FUZZED(-0.4)), bvec2(_GLF_IDENTITY(true, bool(bvec2(true, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), max(injectionSwitch, injectionSwitch)), injectionSwitch)).y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false))))) && true))
                  continue;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             else
              {
               barrier();
              }
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, false || (true)), false)), (bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false))) || false)))
              barrier();
            }
          }
         else
          {
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), bool(bool((false)))))) && true)), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || (_GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bool((false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(bool((false)))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((false), bool(bool((false)))), _GLF_IDENTITY(false, ! (! (false))))), ! (_GLF_IDENTITY(! (bool(bvec2(_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bool((false))), ! (! (bool(bool((false))))))), false))), (! (bool(bvec2(_GLF_IDENTITY((false), bool(bool((false)))), false)))) || false)))))) && true))) && _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, true && (true)), true, false, true)))));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      continue;
     subgroupAll(false);
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      barrier();
    }
   else
    {
     atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_idnum_workgroup.xyz, uvec3(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_idnum_workgroup, (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_idnum_workgroup) >> (uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(2u), uvec4(2u)))).xyz[0], _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_idnum_workgroup, clamp(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_idnum_workgroup, _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_idnum_workgroup, max(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_idnum_workgroup, GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_idnum_workgroup)), GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_idnum_workgroup)).xyz[1], GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_idnum_workgroup.xyz[2])).x, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_idnum_workgroup.xyz, uvec3(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_idnum_workgroup.xyz[0], GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_idnum_workgroup.xyz[1], GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_idnum_workgroup.xyz[2])).x, (_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_idnum_workgroup.xyz, uvec3(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_idnum_workgroup.xyz[0], GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_idnum_workgroup.xyz[1], GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_12next_virtual_gidnum_workgroupworkgroup_idnum_workgroup.xyz[2])).x) - 0u))))], uint(2), 4, _GLF_IDENTITY(_GLF_IDENTITY(64, int(ivec3(64, 1, (0 >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), 0 + (~ (1))))))))))), (64) * (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), (false ? _GLF_FUZZED(ivec4(9594, -74784, -65919, 81201).b) : (1 << _GLF_IDENTITY(int(1), int(1)))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), (false ? _GLF_FUZZED(ivec4(9594, -74784, -65919, 81201).b) : (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))))))), (~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), (false ? _GLF_FUZZED(ivec4(9594, -74784, -65919, 81201).b) : (1 << _GLF_IDENTITY(int(1), int(1))))))) << 0)) / 1), (_GLF_IDENTITY(~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), (false ? _GLF_FUZZED(ivec4(9594, -74784, -65919, 81201).b) : (1 << _GLF_IDENTITY(int(1), int(1)))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), (false ? _GLF_IDENTITY(_GLF_FUZZED(ivec4(9594, -74784, -65919, 81201).b), max(_GLF_IDENTITY(_GLF_FUZZED(ivec4(9594, -74784, -65919, 81201).b), (0 >> _GLF_IDENTITY(int(7), int(7))) | (_GLF_FUZZED(ivec4(9594, -74784, -65919, 81201).b))), _GLF_FUZZED(ivec4(9594, -74784, -65919, 81201).b))) : (1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) | (int(1)))) >> 0), int(1)), (_GLF_IDENTITY(int(1), int(1))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))))))), _GLF_IDENTITY((~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), (false ? _GLF_FUZZED(ivec4(9594, -74784, -65919, 81201).b) : (1 << _GLF_IDENTITY(int(1), int(1))))))) << 0, ((~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), (false ? _GLF_FUZZED(ivec4(9594, -74784, -65919, 81201).b) : (1 << _GLF_IDENTITY(int(1), int(1))))))) << 0) | ((~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), (false ? _GLF_FUZZED(ivec4(9594, -74784, -65919, 81201).b) : (1 << _GLF_IDENTITY(int(1), int(1))))))) << 0)))) / 1)) * 1))) >> _GLF_IDENTITY(int(1), int(1)))), 4);
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         subgroupAll(true);
        }
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))))), ! (! (! (bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false, true)))))))))))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_IDENTITY(false, (false) && true)))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-75.05))), injectionSwitch.y, injectionSwitch.y))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 0.0, abs(0.0), 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0)), length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), round(length(normalize(1.0))), 1.0, 0.0), transpose(transpose(mat3x4(injectionSwitch, 1.0, 0.0, abs(0.0), 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), round(length(normalize(1.0))), 1.0, 0.0))))), mix(vec2(_GLF_FUZZED(3120.1938), _GLF_FUZZED(-398.507)), vec2(_GLF_IDENTITY((vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 0.0, abs(0.0), 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), round(length(normalize(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-9413.4393)), float(1.0), bool(true)))))), 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-98.11)), float(0.0), bool(true)))), transpose(transpose(mat3x4(injectionSwitch, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-205.836) : 1.0))))) + 0.0), 0.0, abs(0.0), 0.0, 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec4(0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec4(mat4(_GLF_IDENTITY(vec4(0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), (vec4(0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))) * mat4(1.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))))), length(vec3(0.0, 0.0, 0.0)), round(length(normalize(1.0))), 1.0, 0.0)))))), ((vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 0.0, abs(0.0), 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), round(length(normalize(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-9413.4393)), float(1.0), bool(true)))))), 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-98.11)), float(0.0), bool(true)))), transpose(transpose(mat3x4(injectionSwitch, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-205.836) : 1.0))))) + 0.0), 0.0, abs(0.0), 0.0, 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec4(0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), vec4(mat4(_GLF_IDENTITY(vec4(0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y)), (vec4(0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))) * mat4(1.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))))), length(vec3(0.0, 0.0, 0.0)), round(length(normalize(1.0))), 1.0, 0.0))))))) * vec2(1.0, 1.0))[0], (vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 1.0, 0.0, abs(0.0), 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), round(length(normalize(1.0))), 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(vec3(0.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), 1.0)), (false ? _GLF_FUZZED(0.2) : float(vec3(0.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), 1.0)))))), transpose(transpose(mat3x4(injectionSwitch, 1.0, 0.0, abs(0.0), 0.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), round(length(normalize(1.0))), 1.0, 0.0))))))[1]), bvec2(true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)), (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true))) && true))))))), _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2((vec2(1.0, 1.0))[0], _GLF_FUZZED(5.2)), vec2(_GLF_FUZZED(1486.6480), (vec2(1.0, 1.0))[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) * _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0))).x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true))))
          {
           do
            {
             for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bool(false))), false, false), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(false, bool(bool(false))), false, false)), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(false, bool(bool(false))), false, false)), true)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(false, bool(bool(false))), false, false)), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(false, bool(bool(false))), false, false)), true)))))))))), (injectionSwitch.x > injectionSwitch.y))))));
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))))))
    continue;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
