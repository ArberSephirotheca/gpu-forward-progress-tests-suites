#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_0 {
 mat4x2 _f0;
} ;

struct _GLF_struct_1 {
 mat2 _f0;
 mat2x3 _f1;
 _GLF_struct_0 _f2;
 uint subgroup_local_id;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 ^ (int(4))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(4), _GLF_IDENTITY((false ? _GLF_FUZZED(-33056) : int(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, max(4, 4)))), (_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, max(4, 4))))) | (_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, max(4, 4)))))))), 0 + (_GLF_IDENTITY((false ? _GLF_FUZZED(-33056) : int(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, max(4, 4)))), (_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, max(4, 4))))) | (_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, max(4, 4)))))))), int(ivec3((false ? _GLF_FUZZED(-33056) : int(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, max(4, 4)))), (_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, max(4, 4))))) | (_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, max(4, 4)))))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 1)))))), 1, 0, 1), (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), false || ((false)))) && true)) && true))) ? _GLF_FUZZED(-33056) : int(4))), 1, 0, 1), (ivec4(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-33056) : int(_GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, min(4, 4)) : _GLF_FUZZED(4444)))))), 1, 0, 1)) >> ivec4(0, 0, 0, 0))) << ivec4(0, 0, 0, 0)), ivec4(0, 0, 0, 0) | (ivec4(_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-33056) : int(_GLF_IDENTITY(4, (4) / 1)))), 1, 0, 1))))), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 | (0)), _GLF_IDENTITY((0) ^ _GLF_IDENTITY(_GLF_IDENTITY(0, (0) >> 0), (_GLF_IDENTITY(0, (0) >> 0)) | 0), int(int((0) ^ 0))))) << 0)); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-28897) : _injected_loop_counter --)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), true && (false || (false))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                    }
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true)))), false))))))
              barrier();
            }
           else
            {
             do
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), mix(float(_GLF_FUZZED(4.5)), float(injectionSwitch.y), bool(true)))), float(_GLF_FUZZED(-584.369)), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))), (injectionSwitch.x > injectionSwitch.y) || _GLF_IDENTITY(false, (false) && true))))));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec4(! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, false, false)))))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / determinant(mat4(1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), 0.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), 0.0, tan(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, cos(0.0) * (_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9.7) : 0.0)))), 1.0, 1.0))) > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))))
    {
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(532.466, 777.498)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(7), int(7)), (0 >> _GLF_IDENTITY(int(0), int(0))) + (0 << _GLF_IDENTITY(int(7), int(7)))))); _injected_loop_counter --)
      {
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_IDENTITY(_GLF_FUZZED(-4313.4540), mix(float(_GLF_FUZZED(0.0)), float(_GLF_FUZZED(-4313.4540)), bool(true)))), bool(false)))) - 0.0) > injectionSwitch.y))));
      }
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(9.6, -8532.1817)) : injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))), dot(vec4(1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), vec4(0.0, 1.0, 0.0, 1.0))), 1.0))).y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, 1 * (0)), clamp(_GLF_IDENTITY(0, 1 * (0)), _GLF_IDENTITY(0, _GLF_IDENTITY(1, 1 * (1)) * _GLF_IDENTITY((0), (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))) ? (0) : _GLF_FUZZED(_injected_loop_counter)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec4(_GLF_IDENTITY(0, (0) + 0), 1, 0, 1))), 1 * (0)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(0, 1 * _GLF_IDENTITY((0), clamp((0), _GLF_IDENTITY((0), (_GLF_IDENTITY((0), ~ (~ ((0))))) + 0), (0)))), max(_GLF_IDENTITY(0, _GLF_IDENTITY(1 * (0), (1 * (0)) | 0)), _GLF_IDENTITY(0, 1 * (0))))))))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) - 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | (0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), _GLF_IDENTITY(int(5), (0 >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), (~ (4)) << 0))), int(ivec4(4, 0, int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) | (1)))))))) | (int(5))))))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | (0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), min(int(5), int(5))), int(5))))))), ! (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(atomicCompSwap(_injected_loop_counter, _injected_loop_counter, -69416)) : 0)) | (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(ivec2(_GLF_IDENTITY(int(5), int(ivec3(int(5), 0, 0))), 1))), _GLF_IDENTITY(int(5), max(int(5), int(_GLF_IDENTITY(5, (false ? _GLF_FUZZED(_injected_loop_counter) : 5)))))))))), false || ((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | (_GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(0, (0) | 0))), min((~ (_GLF_IDENTITY(0, (0) | 0))), (~ (_GLF_IDENTITY(0, (0) | 0)))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(ivec2(int(5), 1))), _GLF_IDENTITY(int(5), max(int(5), int(5))))))))))))))); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), bool(bvec4(bool(_GLF_IDENTITY(false, (false) && true)), false, false, true)))), bool(bvec2(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), bool(bvec4(bool(_GLF_IDENTITY(false, (false) && true)), false, false, true)))), false))))) || false), (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! _GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec3((_GLF_DEAD(false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(bool(bvec3((_GLF_DEAD(false)), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))) / cos(vec2(0.0, 0.0))).x > injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(bool(bvec3((_GLF_DEAD(false)), true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))) || false))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true)), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true)), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true)), true, true))))))
              barrier();
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))) && true), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))) && true), (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))) && true), (injectionSwitch.x > injectionSwitch.y)))))))));
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_IF_FALSE(false))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                   else
                    {
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                        }
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)), (bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))) && true)), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)), (bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))) && true)), false, false)))))), _GLF_IDENTITY((false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY((false) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              {
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
                {
                 for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), false || (bool(_GLF_DEAD(false)))))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))) || false))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))))))
          {
           do
            {
             do
              {
               do
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(0.6)), vec2(_GLF_FUZZED(-2855.7939), (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))))), true))).x > injectionSwitch.y)) || (false))));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
              {
               do
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) && true), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, (false) && true), true), true)))))), false || (_GLF_WRAPPED_IF_FALSE(false))))
                  {
                   do
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         barrier();
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 _GLF_struct_1 _GLF_struct_replacement_1 = _GLF_struct_1(mat2(1.0), mat2x3(1.0), _GLF_struct_0(mat4x2(1.0)), gl_SubgroupInvocationID);
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), ! (! (_GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), true && (bool(bool(_GLF_DEAD(false))))))))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), false), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec4(false, true, false, false)))), false))))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, (false) || false), false))))), true, true)))))))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), true && (_GLF_IDENTITY(bool(bvec2(true, true)), (bool(bvec2(true, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
        }
       else
        {
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), uint(uvec4(_GLF_IDENTITY(0u, (0u) << 0u), 1u, 0u, 0u))) | (gl_WorkGroupSize.x)))));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) & 99188)); _injected_loop_counter --)
        {
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) | 0u) + _GLF_struct_replacement_1.subgroup_local_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 else
  {
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u) + subgroup_id * subgroup_size + ((_GLF_struct_replacement_1.subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : subgroup_size), ((false ? _GLF_FUZZED(num_workgroup) : subgroup_size)) / 1u)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), subgroup_size)), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(min(subgroup_size, subgroup_size), (min(subgroup_size, subgroup_size)) - 0u)), subgroup_size))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(min(subgroup_size, subgroup_size), (min(subgroup_size, subgroup_size)) - 0u)), subgroup_size))), (true ? (_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(min(subgroup_size, subgroup_size), (min(subgroup_size, subgroup_size)) - 0u)), subgroup_size))) : _GLF_FUZZED(workgroup_base)))) ^ 0u) | (160301u & 0u)))));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! _GLF_IDENTITY((_injected_loop_counter < 1), ((_injected_loop_counter < 1)) || false)))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), false || (_GLF_IDENTITY(true, false || (true)))), (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), true && (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), true && (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(false, (false) || false) || (true)), bool(bool(_GLF_IDENTITY(true, false || (true))))))), false, true, true)), _GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(true, false || (true)), false, true, true))), bool(bool(_GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(true, false || (true)), false, true, true))), false || (_GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(true, false || (true)), false, true, true))), false || ((bool(bvec4(_GLF_IDENTITY(true, false || (true)), false, true, true)))))))))) && true))))) && true), (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), vec2(1.0, 1.0) * (_GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), vec2(1.0, 1.0) * _GLF_IDENTITY((clamp(injectionSwitch, injectionSwitch, injectionSwitch)), sqrt(vec2(0.0, 0.0)) + (_GLF_IDENTITY((clamp(injectionSwitch, injectionSwitch, injectionSwitch)), mix(vec2(((clamp(injectionSwitch, injectionSwitch, injectionSwitch)))[0], _GLF_FUZZED(-91.61)), vec2(_GLF_FUZZED(vec3(8.0, -445.388, 2.1).b), ((clamp(injectionSwitch, injectionSwitch, injectionSwitch)))[1]), bvec2(false, true))))))))), injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch), clamp(min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch), _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch), mat2(1.0) * (min(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[1])), injectionSwitch))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch), (_GLF_IDENTITY(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch), (true ? clamp(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))))), min(_GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))))), _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch)))))))), clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)), injectionSwitch) : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(2.9)), vec2(_GLF_FUZZED((7.0 / 353.401)), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))) / vec2(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) + length(0.0)), 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-5795.9275)), bool(false))))), 1.0))))).y))))
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                       do
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) / vec2(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((6.9))), bool(false))))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(82.30), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(8.3)), bvec2(true, false)))) - vec2(0.0, 0.0)).x > injectionSwitch.y), true && ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) / vec2(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((6.9))), bool(false))))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(82.30), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(8.3)), bvec2(true, false)))) - vec2(0.0, 0.0)).x > injectionSwitch.y))))))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                     else
                      {
                       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           barrier();
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                 else
                  {
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))), (injectionSwitch.x < injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       barrier();
                      }
                    }
                  }
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                    }
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))) && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x < injectionSwitch.y)))))), true && (_GLF_DEAD(false))))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).x > injectionSwitch.y))))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, ! _GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), ((! (injectionSwitch.x > injectionSwitch.y))) && true))))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(-774.464))) > injectionSwitch.y))));
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   do
                    {
                     buf[virtual_gid] = 1;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))), injectionSwitch.x))))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 0 + (_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) >> 0)), int(1)))))); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     do
      {
       barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(_GLF_IDENTITY(1.0, (1.0) / abs(1.0)), _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0))), vec2(0.0, 1.0))), determinant(mat3(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, abs(0.0), abs(_GLF_IDENTITY(0.0, min(0.0, 0.0))), 1.0, 0.0)), 0.0, 1.0, 1.0, sqrt(0.0), 0.0))).x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        {
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))), _GLF_IDENTITY(false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) & 1)); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         do
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) != ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), int(1))) | 0)) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) >> 0)) - (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(int(int(5)))))))))), 1)))) >> 0), _GLF_IDENTITY((int(1)), ((int(1))) | ((int(1)))) | _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), ((~ (0))) << 0))) / _GLF_IDENTITY(1, max(1, 1)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(1), (int(1)) | 0), 1, int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(0, max(0, 0))), (ivec4(_GLF_IDENTITY(int(1), (int(1)) | 0), 1, int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(0, max(0, 0)))) | (ivec4(_GLF_IDENTITY(int(1), (int(1)) | 0), 1, int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(0, max(0, 0))))))) : _GLF_FUZZED(_GLF_IDENTITY(atomicCompSwap(_injected_loop_counter, 38691, _injected_loop_counter), (atomicCompSwap(_injected_loop_counter, 38691, _injected_loop_counter)) * ((_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter))))), (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter)))))) | (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter))))))) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 ^ (int(4)))), 0 + (_GLF_IDENTITY(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, (4) >> 0) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0)), _GLF_IDENTITY(int(4), 0 ^ (int(4)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 ^ (int(4)))), 0 + (_GLF_IDENTITY(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, (4) >> 0) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0)), _GLF_IDENTITY(int(4), 0 ^ (int(4)))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 ^ (int(4)))), 0 + (_GLF_IDENTITY(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, (4) >> 0) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0)), _GLF_IDENTITY(int(4), 0 ^ (int(4))))))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 ^ (int(4)))), 0 + (_GLF_IDENTITY(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (_GLF_IDENTITY(true ? _GLF_IDENTITY(4, (4) >> 0) : _GLF_FUZZED(_injected_loop_counter), int(ivec4(true ? _GLF_IDENTITY(4, (4) >> 0) : _GLF_FUZZED(_injected_loop_counter), 1, 0, 0)))))) ^ 0)), _GLF_IDENTITY(int(4), 0 ^ (int(4))))))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4)))))))))) << _GLF_IDENTITY(0, (0) << 0)), int(1)))); _injected_loop_counter ++)
            {
             if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_local_id + 1, (true ? _GLF_struct_replacement_1.subgroup_local_id + 1 : _GLF_FUZZED(subgroup_size))), 0u ^ (_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_local_id + 1, _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_local_id, min(_GLF_struct_replacement_1.subgroup_local_id, _GLF_struct_replacement_1.subgroup_local_id))) | (_GLF_struct_replacement_1.subgroup_local_id)) + 1 : _GLF_FUZZED(subgroup_size)), uint(uvec3(_GLF_IDENTITY((true ? _GLF_struct_replacement_1.subgroup_local_id + 1 : _GLF_FUZZED(subgroup_size)), _GLF_IDENTITY((true ? (true ? _GLF_struct_replacement_1.subgroup_local_id + 1 : _GLF_FUZZED(subgroup_size)) : _GLF_FUZZED(subgroup_size)), ((true ? (true ? _GLF_struct_replacement_1.subgroup_local_id + 1 : _GLF_FUZZED(subgroup_size)) : _GLF_FUZZED(subgroup_size))) << 0u)), 0u, 1u)))))) < subgroup_size)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)) ^ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))) : _GLF_FUZZED(-74143)))) >> _GLF_IDENTITY(int(1), int(1))), 0 | (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), _GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))))))), max(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))))), (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))))))), max(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))))), min((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))))))), max(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))))), (_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))))))), max(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))))))))) / ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))) | 0)) >> _GLF_IDENTITY(int(1), int(1))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), float(mat4x2(1.0, 1.0, 0.0, 1.0, sqrt(1.0), abs(1.0), exp(0.0), _GLF_IDENTITY(0.0, min(0.0, 0.0))))), injectionSwitch.y), (_GLF_ONE(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), float(mat4x2(1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-4412.9359)), bool(false))))), 0.0, 1.0, sqrt(1.0), abs(1.0), exp(0.0), 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0), (true ? mat4x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0) : _GLF_FUZZED(mat4x2(6.0, 46.34, -6704.6486, 5.9, 6.8, _GLF_IDENTITY(-8.9, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(-8.9, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 0.0), transpose(transpose(mat3x4(-8.9, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 0.0))))), float(float(float(_GLF_IDENTITY(mat3x4(-8.9, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(sqrt(1.0), clamp(_GLF_IDENTITY(sqrt(1.0), (_GLF_IDENTITY(sqrt(1.0), mix(float(sqrt(1.0)), float(_GLF_FUZZED(7.9)), bool(false)))) / 1.0), sqrt(1.0), sqrt(1.0))), 0.0), transpose(transpose(mat3x4(-8.9, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 0.0))))))))), 0.0, 7130.3122)))))).y)) + _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-3.1)), bool(false))))) ^ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), min(_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))) / 1), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1)))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), (~ (1)) | 0)) | (0 >> _GLF_IDENTITY(int(8), int(8))))))))), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) / 1), _GLF_IDENTITY(int(1), max(int(1), int(1))))))))) >> _GLF_IDENTITY(int(1), int(1))), 0 | (int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))) ^ (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))), 0 | (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) ^ (0 | 0))), int(1)), _GLF_IDENTITY(int(1), int(1))))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))))) ^ 0))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, clamp(1, 1, 1)))), (false ? _GLF_FUZZED(-43362) : 1)))))))) | (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)) ^ (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, max(1, 1)), 1))))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) - 0)) / 1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, 0 ^ (1)), 1)))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, max(1, 1)), 1))))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)) - 0, ((int(1)) - 0) | ((int(1)) - 0)))) / _GLF_IDENTITY(1, ~ (~ (1))))), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, clamp(1, 1, 1)))), 0 ^ (1)), 1))))) | ((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, max(1, 1)), 1))))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) - 0)) / 1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, max(1, 1)), 1))))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) - 0)) / 1)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, max(1, 1)), 1))))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) - 0)) / 1))))) - 0), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, 0 ^ (1)), 1))))))), 0 | (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) | (0 >> _GLF_IDENTITY(int(3), int(3)))), 0, (0 ^ 0)), max(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) | (0 >> _GLF_IDENTITY(int(3), int(3)))), 0, (_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, clamp(0, 0, 0)))))) ^ 0)), ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), (false ? _GLF_FUZZED((-- _injected_loop_counter)) : int(1))), int(1))) | (0 >> _GLF_IDENTITY(int(3), int(3)))), 0, (0 ^ _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(0, (false ? _GLF_FUZZED(7109) : 0)))))))))), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) / 1)))) | (0 >> _GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY(0, (0) | 0), (0 ^ 0)), max(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), (int(1)) ^ (0 >> _GLF_IDENTITY(int(1), int(1)))), int(1)))), clamp(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), (int(1)) ^ (0 >> _GLF_IDENTITY(int(1), int(1)))), int(1)))), _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), (int(1)) ^ (0 >> _GLF_IDENTITY(int(1), int(1)))), int(1)))), _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), (int(1)) ^ (0 >> _GLF_IDENTITY(int(1), int(1)))), int(1)))))), (_GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(3), int(3)), (0 >> _GLF_IDENTITY(int(3), int(3))) ^ 0))), 0, (0 ^ 0)), ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) | (0 >> _GLF_IDENTITY(int(3), int(3)))), 0, (0 ^ 0)))))), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))) - _GLF_IDENTITY(0, 0 | (0)))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1)))))))))))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)) ^ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))) : _GLF_FUZZED(-74143)))) >> _GLF_IDENTITY(int(1), int(1))), 0 | (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), _GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))))))), max(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))))), (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))))))), max(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))))), min((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))))))), max(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))))), (_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))))))), max(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))))))))) / ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))) | 0)) >> _GLF_IDENTITY(int(1), int(1))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), float(mat4x2(1.0, 1.0, 0.0, 1.0, sqrt(1.0), abs(1.0), exp(0.0), _GLF_IDENTITY(0.0, min(0.0, 0.0))))), injectionSwitch.y), (_GLF_ONE(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), float(mat4x2(1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-4412.9359)), bool(false))))), 0.0, 1.0, sqrt(1.0), abs(1.0), exp(0.0), 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0), (true ? mat4x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0) : _GLF_FUZZED(mat4x2(6.0, 46.34, -6704.6486, 5.9, 6.8, _GLF_IDENTITY(-8.9, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(-8.9, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 0.0), transpose(transpose(mat3x4(-8.9, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 0.0))))), float(float(float(_GLF_IDENTITY(mat3x4(-8.9, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(sqrt(1.0), clamp(_GLF_IDENTITY(sqrt(1.0), (_GLF_IDENTITY(sqrt(1.0), mix(float(sqrt(1.0)), float(_GLF_FUZZED(7.9)), bool(false)))) / 1.0), sqrt(1.0), sqrt(1.0))), 0.0), transpose(transpose(mat3x4(-8.9, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 0.0))))))))), 0.0, 7130.3122)))))).y)) + _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-3.1)), bool(false))))) ^ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), min(_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))) / 1), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1)))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), (~ (1)) | 0)) | (0 >> _GLF_IDENTITY(int(8), int(8))))))))), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) / 1), _GLF_IDENTITY(int(1), max(int(1), int(1))))))))) >> _GLF_IDENTITY(int(1), int(1))), 0 | (int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))) ^ (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))), 0 | (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) ^ (0 | 0))), int(1)), _GLF_IDENTITY(int(1), int(1))))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))))) ^ 0))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, clamp(1, 1, 1)))), (false ? _GLF_FUZZED(-43362) : 1)))))))) | (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)) ^ (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, max(1, 1)), 1))))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) - 0)) / 1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, 0 ^ (1)), 1)))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, max(1, 1)), 1))))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)) - 0, ((int(1)) - 0) | ((int(1)) - 0)))) / _GLF_IDENTITY(1, ~ (~ (1))))), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, clamp(1, 1, 1)))), 0 ^ (1)), 1))))) | ((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, max(1, 1)), 1))))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) - 0)) / 1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, max(1, 1)), 1))))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) - 0)) / 1)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, max(1, 1)), 1))))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) - 0)) / 1))))) - 0), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, 0 ^ (1)), 1))))))), 0 | (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) | (0 >> _GLF_IDENTITY(int(3), int(3)))), 0, (0 ^ 0)), max(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) | (0 >> _GLF_IDENTITY(int(3), int(3)))), 0, (_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, clamp(0, 0, 0)))))) ^ 0)), ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), (false ? _GLF_FUZZED((-- _injected_loop_counter)) : int(1))), int(1))) | (0 >> _GLF_IDENTITY(int(3), int(3)))), 0, (0 ^ _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(0, (false ? _GLF_FUZZED(7109) : 0)))))))))), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) / 1)))) | (0 >> _GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY(0, (0) | 0), (0 ^ 0)), max(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), (int(1)) ^ (0 >> _GLF_IDENTITY(int(1), int(1)))), int(1)))), clamp(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), (int(1)) ^ (0 >> _GLF_IDENTITY(int(1), int(1)))), int(1)))), _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), (int(1)) ^ (0 >> _GLF_IDENTITY(int(1), int(1)))), int(1)))), _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), (int(1)) ^ (0 >> _GLF_IDENTITY(int(1), int(1)))), int(1)))))), (_GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(3), int(3)), (0 >> _GLF_IDENTITY(int(3), int(3))) ^ 0))), 0, (0 ^ 0)), ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) | (0 >> _GLF_IDENTITY(int(3), int(3)))), 0, (0 ^ 0)))))), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))) - _GLF_IDENTITY(0, 0 | (0)))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))))))))))))), (~ ((_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)) ^ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))) : _GLF_FUZZED(-74143)))) >> _GLF_IDENTITY(int(1), int(1))), 0 | (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), _GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))))))), max(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))))), (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))))))), max(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))))), min((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))))))), max(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))))), (_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))))))), max(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))))))))) / ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))) | 0)) >> _GLF_IDENTITY(int(1), int(1))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ONE(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), float(mat4x2(1.0, 1.0, 0.0, 1.0, sqrt(1.0), abs(1.0), exp(0.0), _GLF_IDENTITY(0.0, min(0.0, 0.0))))), injectionSwitch.y), (_GLF_ONE(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), float(mat4x2(1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-4412.9359)), bool(false))))), 0.0, 1.0, sqrt(1.0), abs(1.0), exp(0.0), 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0), (true ? mat4x2(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0) : _GLF_FUZZED(mat4x2(6.0, 46.34, -6704.6486, 5.9, 6.8, _GLF_IDENTITY(-8.9, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(-8.9, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 0.0), transpose(transpose(mat3x4(-8.9, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 0.0))))), float(float(float(_GLF_IDENTITY(mat3x4(-8.9, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(sqrt(1.0), clamp(_GLF_IDENTITY(sqrt(1.0), (_GLF_IDENTITY(sqrt(1.0), mix(float(sqrt(1.0)), float(_GLF_FUZZED(7.9)), bool(false)))) / 1.0), sqrt(1.0), sqrt(1.0))), 0.0), transpose(transpose(mat3x4(-8.9, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 0.0))))))))), 0.0, 7130.3122)))))).y)) + _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-3.1)), bool(false))))) ^ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), min(_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))) / 1), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 | (int(1)))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), (~ (1)) | 0)) | (0 >> _GLF_IDENTITY(int(8), int(8))))))))), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) / 1), _GLF_IDENTITY(int(1), max(int(1), int(1))))))))) >> _GLF_IDENTITY(int(1), int(1))), 0 | (int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))) ^ (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))), 0 | (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) ^ (0 | 0))), int(1)), _GLF_IDENTITY(int(1), int(1))))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))))) ^ 0))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, clamp(1, 1, 1)))), (false ? _GLF_FUZZED(-43362) : 1)))))))) | (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)) ^ (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, max(1, 1)), 1))))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) - 0)) / 1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, 0 ^ (1)), 1)))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, max(1, 1)), 1))))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)) - 0, ((int(1)) - 0) | ((int(1)) - 0)))) / _GLF_IDENTITY(1, ~ (~ (1))))), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, max(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, clamp(1, 1, 1)))), 0 ^ (1)), 1))))) | ((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, max(1, 1)), 1))))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) - 0)) / 1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, max(1, 1)), 1))))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) - 0)) / 1)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, max(1, 1)), 1))))), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) - 0)) / 1))))) - 0), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, 0 ^ (1)), 1))))))), 0 | (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) | (0 >> _GLF_IDENTITY(int(3), int(3)))), 0, (0 ^ 0)), max(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) | (0 >> _GLF_IDENTITY(int(3), int(3)))), 0, (_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, clamp(0, 0, 0)))))) ^ 0)), ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), (false ? _GLF_FUZZED((-- _injected_loop_counter)) : int(1))), int(1))) | (0 >> _GLF_IDENTITY(int(3), int(3)))), 0, (0 ^ _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(0, (false ? _GLF_FUZZED(7109) : 0)))))))))), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) / 1)))) | (0 >> _GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY(0, (0) | 0), (0 ^ 0)), max(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), (int(1)) ^ (0 >> _GLF_IDENTITY(int(1), int(1)))), int(1)))), clamp(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), (int(1)) ^ (0 >> _GLF_IDENTITY(int(1), int(1)))), int(1)))), _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), (int(1)) ^ (0 >> _GLF_IDENTITY(int(1), int(1)))), int(1)))), _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), (int(1)) ^ (0 >> _GLF_IDENTITY(int(1), int(1)))), int(1)))))), (_GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(3), int(3)), (0 >> _GLF_IDENTITY(int(3), int(3))) ^ 0))), 0, (0 ^ 0)), ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) | (0 >> _GLF_IDENTITY(int(3), int(3)))), 0, (0 ^ 0)))))), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))) - _GLF_IDENTITY(0, 0 | (0)))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1)))))))))))))) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) ^ 0)), (~ (_GLF_IDENTITY(1, (1) ^ 0))) - 0)))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), true, true)), ! (! (bool(bvec3((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), true, true)))))))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7050.1339), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-3.2)), bvec2(true, false))))).y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(4.4)), bool(false)))) / 1.0) > injectionSwitch.y)), true)))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(745.436, 7.7)))).x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(745.436, 7.7)))).x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(745.436, 7.7)))).x > injectionSwitch.y))) || false)))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(745.436, 7.7)))).x > injectionSwitch.y))), false, false, true))))))), true && (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7050.1339), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-3.2)), bvec2(true, false))))).y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(4.4)), bool(false)))) / 1.0) > injectionSwitch.y)), true)))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(745.436, 7.7)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(745.436, 7.7)))), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(745.436, 7.7)))))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(745.436, 7.7)))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(745.436, 7.7)))))).x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(745.436, 7.7)))).x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(745.436, 7.7)))).x > injectionSwitch.y))) || false)))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(745.436, 7.7)))).x > injectionSwitch.y))), false, false, _GLF_IDENTITY(true, ! (! (true)))))))))))))) || false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
                        barrier();
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(true, false || (true)))), _GLF_IDENTITY(bool(bvec2(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(true, false || (true)))), true)), false || (bool(bvec2(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(true, false || (true)))), true)))))))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(7.8)), bool(false)))), float(_GLF_FUZZED(183.025)), bool(false)))))))
                barrier();
               int i = 0;
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 else
                  {
                  }
                }
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true))))))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
                      {
                       do
                        {
                         barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0))
                    {
                     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) || false); _injected_loop_counter --)
                      {
                       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false || _GLF_IDENTITY((true), ! (! ((true)))), (false || _GLF_IDENTITY((true), ! (! ((true))))) && true))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ! (! ((true))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && _GLF_IDENTITY(true, ! (! (true)))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && _GLF_IDENTITY(true, ! (! (true)))))), ! (_GLF_IDENTITY(! ((! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && _GLF_IDENTITY(true, ! (! (true))))))), (! ((! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && _GLF_IDENTITY(true, ! (! (true)))))))) && true)))))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))) && true)))))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(776.284, _GLF_IDENTITY(7.0, (_GLF_IDENTITY(7.0, max(_GLF_IDENTITY(7.0, 0.0 + (7.0)), 7.0))) * sqrt(1.0)))) : injectionSwitch)).x, min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(vec2(776.284, 7.0)) : injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(776.284, 7.0)) : injectionSwitch)).x)) > injectionSwitch.y))))
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false)))))))
                                barrier();
                               barrier();
                              }
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   barrier();
                                  }
                                }
                               barrier();
                              }
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             else
                              {
                              }
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               barrier();
                              }
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                }
                               else
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2))))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
                                  {
                                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(vec2(-5.6, -4502.0634).s)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), int(ivec4(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(vec2(-5.6, -4502.0634).s)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0)))); _injected_loop_counter ++)
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                      }
                                     else
                                      {
                                       do
                                        {
                                         if(_GLF_DEAD(false))
                                          {
                                           do
                                            {
                                             barrier();
                                            }
                                           while(_GLF_WRAPPED_LOOP(false));
                                          }
                                         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(((((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) - 0))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) << int(_GLF_ZERO(0.0, injectionSwitch.x)))) - 0))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), int(int(((((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) - 0))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) << int(_GLF_ZERO(0.0, injectionSwitch.x)))) - 0))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))))); _injected_loop_counter ++)
                                          {
                                           for(int _injected_loop_counter = (49126 & int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                            {
                                             if(_GLF_WRAPPED_IF_TRUE(true))
                                              {
                                               if(_GLF_WRAPPED_IF_TRUE(true))
                                                {
                                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                                  {
                                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                                    {
                                                    }
                                                   else
                                                    {
                                                     if(_GLF_DEAD(false))
                                                      barrier();
                                                    }
                                                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), (bool(false)) || false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(false), (bool(false)) || false), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(bool(false), (bool(_GLF_IDENTITY(false, (false) && true))) || false), true, true))))))), bool(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), (bool(false)) || false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(false), false || (bool(false))), false || (_GLF_IDENTITY(bool(false), false || (bool(false))))))))) || false), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(bool(false), _GLF_IDENTITY((bool(false)) || false, ! (! ((bool(false)) || false)))), _GLF_IDENTITY(true, (true) || false), true))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY((bool(_GLF_IDENTITY(false, ! (! (false))))) || false, true && ((bool(_GLF_IDENTITY(false, ! (! (false))))) || false))))) || false)), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, true && (false))), true && (bool(false)))) || false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(false), (bool(false)) || false), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(bool(false), (bool(false)) || false), true, true))))))), bool(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), (bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true))), true, true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true))), true, true)))), bool(bvec4(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true))), true, true)))), false, true, false)))) || false)))) || false), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(false), (bool(false)) || false), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bool(false), (bool(false)) || false), true, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(bool(false), (bool(false)) || false), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bool(false), (bool(false)) || false), true, true)))))))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * abs(1.0))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (injectionSwitch.x < injectionSwitch.y))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))) || false)), false || (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), (bool(false)) || false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(false), (bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), true && (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), true && (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))))))) && true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), true && (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_IDENTITY(false, true && (false))))), true && (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))))))) && true))))))))))) || false), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(bool(false), (bool(false)) || false), true, true))))))), bool(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), (bool(false)) || false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(false), (bool(false)) || false), true, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, ! (! (true))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(true, ! (! (true))), false))))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bool(false), (bool(false)) || false), true, true))))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec2(-80.23, -24.59).g), (injectionSwitch)[1]), vec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))[0], _GLF_FUZZED((1.8))), bvec2(true, false))).y)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(8.3)), _GLF_IDENTITY(vec2(_GLF_FUZZED(-52.72), (injectionSwitch)[1]), (vec2(_GLF_FUZZED(-52.72), (injectionSwitch)[1])) * mat2(1.0)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).x < injectionSwitch.y))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))) || false, ! (_GLF_IDENTITY(! ((bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))) || false), ! (! (! ((bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))) || false))))))))))))))))
                                                    {
                                                     do
                                                      {
                                                       barrier();
                                                      }
                                                     while(_GLF_WRAPPED_LOOP(false));
                                                    }
                                                  }
                                                 else
                                                  {
                                                  }
                                                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                                                  barrier();
                                                 if(_GLF_DEAD(false))
                                                  barrier();
                                                }
                                               else
                                                {
                                                }
                                               if(_GLF_DEAD(false))
                                                barrier();
                                              }
                                             else
                                              {
                                               if(_GLF_DEAD(false))
                                                {
                                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                  {
                                                  }
                                                 else
                                                  {
                                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)) && true))))))) && true)))))
                                                    {
                                                    }
                                                   else
                                                    {
                                                     if(_GLF_DEAD(false))
                                                      barrier();
                                                     barrier();
                                                     if(_GLF_DEAD(false))
                                                      {
                                                       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))))
                                                        barrier();
                                                       barrier();
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                         do
                                          {
                                           if(_GLF_DEAD(false))
                                            {
                                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                              {
                                               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) || false), bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)))))))
                                                barrier();
                                              }
                                             barrier();
                                            }
                                          }
                                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                        }
                                       while(_GLF_WRAPPED_LOOP(false));
                                       if(_GLF_DEAD(false))
                                        barrier();
                                      }
                                    }
                                  }
                                 do
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), false, true, false)), false || (bool(bvec4((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), false, true, false))))) && true))
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         do
                                          {
                                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                            {
                                            }
                                           else
                                            {
                                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(54.65)), mix(vec2(_GLF_FUZZED(-9.8), (vec2((injectionSwitch)[0], _GLF_FUZZED(54.65)))[1]), vec2((vec2((injectionSwitch)[0], _GLF_FUZZED(54.65)))[0], _GLF_FUZZED(-1.6)), bvec2(true, false))), vec2(_GLF_FUZZED(_GLF_IDENTITY(57.75, min(_GLF_IDENTITY(57.75, float(mat3x4(57.75, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))), 57.75))), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))))
                                              {
                                              }
                                             else
                                              {
                                               if(_GLF_WRAPPED_IF_TRUE(true))
                                                {
                                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                                  {
                                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED((+ 6246.5796)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(490.362) : _GLF_IDENTITY(_GLF_FUZZED((+ 6246.5796)), float(mat3x2(_GLF_FUZZED((+ 6246.5796)), 0.0, 0.0, 1.0, sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y)))))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((-7.3 * 6.1))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), injectionSwitch, injectionSwitch)).y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED((+ 6246.5796)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(490.362) : _GLF_IDENTITY(_GLF_FUZZED((+ 6246.5796)), float(mat3x2(_GLF_FUZZED((+ 6246.5796)), 0.0, 0.0, 1.0, sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y)))))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((-7.3 * 6.1))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), injectionSwitch, injectionSwitch)).y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED((+ 6246.5796)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(490.362) : _GLF_IDENTITY(_GLF_FUZZED((+ 6246.5796)), float(mat3x2(_GLF_FUZZED((+ 6246.5796)), 0.0, 0.0, 1.0, sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y)))))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((-7.3 * 6.1))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), injectionSwitch, injectionSwitch)).y, 0.0 + (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED((+ 6246.5796)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(490.362) : _GLF_IDENTITY(_GLF_FUZZED((+ 6246.5796)), float(mat3x2(_GLF_FUZZED((+ 6246.5796)), 0.0, 0.0, 1.0, sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y)))))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((-7.3 * 6.1))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), injectionSwitch, injectionSwitch)).y)), _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED((+ 6246.5796)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(490.362) : _GLF_IDENTITY(_GLF_FUZZED((+ 6246.5796)), float(mat3x2(_GLF_FUZZED((+ 6246.5796)), 0.0, 0.0, 1.0, sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y)))))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((-7.3 * 6.1))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), injectionSwitch, injectionSwitch)).y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED((+ 6246.5796)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(490.362) : _GLF_IDENTITY(_GLF_FUZZED((+ 6246.5796)), float(mat3x2(_GLF_FUZZED((+ 6246.5796)), 0.0, 0.0, 1.0, sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y)))))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((-7.3 * 6.1))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), injectionSwitch, injectionSwitch)).y, mix(float(_GLF_FUZZED(-20.42)), float(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED((+ 6246.5796)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(490.362) : _GLF_IDENTITY(_GLF_FUZZED((+ 6246.5796)), float(mat3x2(_GLF_FUZZED((+ 6246.5796)), 0.0, 0.0, 1.0, sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y)))))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((-7.3 * 6.1))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), injectionSwitch, injectionSwitch)).y), bool(true)))))))))
                                                    {
                                                     barrier();
                                                    }
                                                   else
                                                    {
                                                    }
                                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                    barrier();
                                                  }
                                                 else
                                                  {
                                                  }
                                                }
                                               else
                                                {
                                                }
                                              }
                                            }
                                          }
                                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, true))))));
                                        }
                                       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                                        barrier();
                                      }
                                    }
                                   else
                                    {
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      barrier();
                                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch))), min(min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch), min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) - vec2(0.0, 0.0)), injectionSwitch)))).x > injectionSwitch.y) && true)))))
                                      barrier();
                                    }
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                               else
                                {
                                }
                              }
                             else
                              {
                              }
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           else
                            {
                            }
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
                              {
                               do
                                {
                                 atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, ~ (~ (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) + 0u))))))], _GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) * (0 | 1))), (uint(_GLF_IDENTITY(2, (2) * (0 | _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, int(ivec3(1, int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED(76.90)), float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED(-97.29)), float(_GLF_ONE(1.0, injectionSwitch.y)), bool(true))), _GLF_ONE(1.0, injectionSwitch.y)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), 0))))))))) >> 0u), 4, 64, 4);
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                              }
                             else
                              {
                              }
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           else
                            {
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), _GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) && true)), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(vec2(injectionSwitch)))) / vec2(1.0, 1.0)).x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) && true)), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(_GLF_IDENTITY(vec2(injectionSwitch), mix(vec2(_GLF_FUZZED(5.1), _GLF_IDENTITY((vec2(injectionSwitch))[1], mix(float(_GLF_FUZZED(18.06)), float((vec2(injectionSwitch))[1]), bool(true)))), vec2((vec2(injectionSwitch))[0], _GLF_FUZZED(2.1)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) / vec2(1.0, 1.0)).x > injectionSwitch.y))))), (! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) && _GLF_IDENTITY(true, ! (! (true))))), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(vec2(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0))))))) / vec2(1.0, 1.0)).x > injectionSwitch.y)))))) && true)), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) && true)), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)), clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(vec2(injectionSwitch)))) / vec2(1.0, 1.0)).x > injectionSwitch.y))))), (! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) && true)), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(vec2(injectionSwitch)))) / vec2(1.0, 1.0)).x > injectionSwitch.y)))))) && true)), false || (! (_GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && _GLF_IDENTITY(true, (true) && true), ((false) && true) && true)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(vec2(injectionSwitch)))) / vec2(1.0, 1.0)).x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(vec2(injectionSwitch)))) / vec2(1.0, 1.0)).x > injectionSwitch.y)), (! ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(vec2(injectionSwitch)))) / vec2(1.0, 1.0)).x > injectionSwitch.y))) && true))))))), (! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) && true)), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(vec2(injectionSwitch)))) / vec2(1.0, 1.0)).x > injectionSwitch.y)))))) && true)))))))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))), _GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) && true)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(vec2(injectionSwitch)))) / vec2(1.0, 1.0)), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(vec2(injectionSwitch)))) / vec2(1.0, 1.0))) - vec2(0.0, 0.0)).x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(vec2(injectionSwitch)))) / vec2(1.0, 1.0)).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(vec2(injectionSwitch)))) / vec2(1.0, 1.0)).x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(vec2(injectionSwitch)))) / vec2(1.0, 1.0)).x, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(vec2(injectionSwitch)))) / vec2(1.0, 1.0)).x, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(vec2(injectionSwitch)))) / vec2(1.0, 1.0)).x, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(vec2(injectionSwitch)))) / vec2(1.0, 1.0)).x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(vec2(injectionSwitch)))) / vec2(1.0, 1.0)).x, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(vec2(injectionSwitch)))) / vec2(1.0, 1.0)).x, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(vec2(injectionSwitch)))) / vec2(1.0, 1.0)).x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(vec2(injectionSwitch)))) / vec2(1.0, 1.0)).x, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(vec2(injectionSwitch)))) / vec2(1.0, 1.0)).x) / 1.0))) > injectionSwitch.y)))), true))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) && true)), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(vec2(injectionSwitch)))) / vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(6142.6087)), float(injectionSwitch.y), bool(true))), injectionSwitch.y))))))), _GLF_IDENTITY((! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) && true)), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(vec2(injectionSwitch)))) / vec2(1.0, 1.0)).x > injectionSwitch.y)))))) && true, ((! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) && true)), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(vec2(injectionSwitch)))) / vec2(1.0, 1.0)).x > injectionSwitch.y)))))) && true) && true))), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) && true)), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(764.072, 79.81)))), injectionSwitch, injectionSwitch)), vec2(vec2(injectionSwitch)))) / vec2(1.0, 1.0)).x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) && true)), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(764.072, 79.81)))), injectionSwitch, injectionSwitch)), vec2(vec2(injectionSwitch)))) / vec2(1.0, 1.0)).x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) && true)), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(764.072, 79.81)))), injectionSwitch, injectionSwitch)), vec2(vec2(injectionSwitch)))) / vec2(1.0, 1.0)).x > injectionSwitch.y))) || false))))))), (! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) && true)), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(vec2(injectionSwitch)))) / vec2(1.0, 1.0)).x > injectionSwitch.y)))))) && true)), false || (! (_GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) && _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), true && (true)))), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(vec2(injectionSwitch)))) / vec2(1.0, 1.0)).x > injectionSwitch.y))))), (! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && _GLF_IDENTITY(true, (true) && true)) && true)), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(vec2(injectionSwitch)))) / vec2(1.0, 1.0)).x > injectionSwitch.y)))))) && true))))))))))))))
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))))))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
