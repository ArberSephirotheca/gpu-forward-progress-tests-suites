#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_11 {
 uvec2 _f0;
 uint workgroup_base;
 uvec4 _f1;
} ;

struct _GLF_struct_8 {
 mat4x2 _f0;
 vec2 _f1;
 mat3 _f2;
 mat2x3 _f3;
 bvec2 _f4;
 mat2x4 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_7 {
 mat3x2 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_6 {
 mat4x3 _f0;
 ivec4 _f1;
 uvec4 _f2;
 uvec4 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_5 {
 uvec2 _f0;
 uvec3 _f1;
 ivec2 _f2;
 int _f3;
} ;

struct _GLF_struct_9 {
 _GLF_struct_5 _f0;
 vec4 _f1;
 vec3 _f2;
 _GLF_struct_6 _f3;
 mat3x4 _f4;
 _GLF_struct_7 _f5;
 _GLF_struct_8 _f6;
} ;

struct _GLF_struct_3 {
 mat3 _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_4 {
 _GLF_struct_3 _f0;
 uvec2 _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_1 {
 vec2 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_0 {
 bvec4 _f0;
 ivec2 _f1;
 vec4 _f2;
 vec3 _f3;
 bool _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_2 {
 uint subgroup_id;
 mat2 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
} ;

struct _GLF_struct_10 {
 _GLF_struct_2 _f0;
 _GLF_struct_4 _f1;
 vec4 _f2;
 float _f3;
 bvec3 _f4;
 mat4x3 _f5;
 _GLF_struct_9 _f6;
} ;

layout(set = 0, binding = 0) uniform buf0 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     else
      {
      }
    }
   else
    {
    }
  }
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(_GLF_struct_2(gl_SubgroupID, mat2(1.0), _GLF_struct_0(bvec4(true), ivec2(1), vec4(1.0), vec3(1.0), true, uvec2(1u)), _GLF_struct_1(vec2(1.0), vec2(1.0))), _GLF_struct_4(_GLF_struct_3(mat3(1.0), mat2x3(1.0)), uvec2(1u), mat2x3(1.0)), vec4(1.0), 1.0, bvec3(true), mat4x3(1.0), _GLF_struct_9(_GLF_struct_5(uvec2(1u), uvec3(1u), ivec2(1), 1), vec4(1.0), vec3(1.0), _GLF_struct_6(mat4x3(1.0), ivec4(1), uvec4(1u), uvec4(1u), mat2x4(1.0)), mat3x4(1.0), _GLF_struct_7(mat3x2(1.0), mat3(1.0)), _GLF_struct_8(mat4x2(1.0), vec2(1.0), mat3(1.0), mat2x3(1.0), bvec2(true), mat2x4(1.0), bvec2(true))));
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
  }
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(uvec2(1u), workgroup_size * workgroup_id, uvec4(1u));
 uint virtual_gid = _GLF_struct_replacement_11.workgroup_base + _GLF_struct_replacement_10._f0.subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = _GLF_struct_replacement_11.workgroup_base + _GLF_struct_replacement_10._f0.subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
  {
  }
 else
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           buf[virtual_gid] = 1;
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       buf[next_virtual_gid] = 2;
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
