#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5.9))))) > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-95.56)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(1883.8892, min(1883.8892, 1883.8892))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-95.56)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-95.56)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y), false))), true && (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[1]), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(-95.56)), (vec2((injectionSwitch)[0], _GLF_FUZZED(-95.56))) * mat2(1.0)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-95.56)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y), false)))))), ! _GLF_IDENTITY((! (bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-95.56)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-95.56)), bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 1.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 1.0, sin(0.0), sqrt(1.0), 1.0, 1.0, 1.0, 1.0))).x, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 1.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 1.0, sin(0.0), _GLF_IDENTITY(sqrt(1.0), (_GLF_IDENTITY(sqrt(1.0), mix(float(sqrt(1.0)), float(_GLF_FUZZED(6.6)), bool(false)))) - 0.0), 1.0, 1.0, 1.0, 1.0))).x) * 1.0) < injectionSwitch.y)), false))).y), false)))))), ! (_GLF_IDENTITY(! ((! (bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-95.56)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(1883.8892), mix(float(_GLF_FUZZED(4.1)), float(_GLF_FUZZED(1883.8892)), bool(true))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-95.56)), bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 1.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 1.0, sin(0.0), sqrt(1.0), 1.0, 1.0, 1.0, 1.0))).x, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 1.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 1.0, sin(_GLF_IDENTITY(0.0, min(0.0, 0.0))), _GLF_IDENTITY(sqrt(1.0), (_GLF_IDENTITY(sqrt(1.0), mix(float(sqrt(1.0)), float(_GLF_FUZZED(6.6)), bool(false)))) - 0.0), 1.0, 1.0, 1.0, 1.0))).x) * 1.0) < injectionSwitch.y)), false))).y), false))))))), ! (! (! ((_GLF_IDENTITY(! (bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-95.56)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-95.56)), bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 1.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 1.0, sin(0.0), sqrt(1.0), 1.0, 1.0, 1.0, 1.0))).x, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 1.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 1.0, sin(0.0), _GLF_IDENTITY(sqrt(1.0), (_GLF_IDENTITY(sqrt(1.0), mix(float(sqrt(1.0)), float(_GLF_FUZZED(6.6)), bool(false)))) - 0.0), 1.0, 1.0, 1.0, 1.0))).x) * 1.0) < injectionSwitch.y)), false))).y), false))))), _GLF_IDENTITY(bool(bvec4(! (bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-95.56)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-95.56)), bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 1.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 1.0, sin(0.0), sqrt(1.0), 1.0, 1.0, 1.0, 1.0))).x, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 1.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 1.0, sin(0.0), _GLF_IDENTITY(sqrt(1.0), (_GLF_IDENTITY(sqrt(1.0), mix(float(sqrt(1.0)), float(_GLF_FUZZED(6.6)), bool(false)))) - 0.0), 1.0, 1.0, 1.0, 1.0))).x) * 1.0) < injectionSwitch.y)), false))).y), false))))), false, true, true)), (bool(bvec4(! (bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-95.56)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-95.56)), bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 1.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 1.0, sin(0.0), sqrt(1.0), 1.0, 1.0, 1.0, 1.0))).x, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 1.0, 1.0, abs(0.0), 1.0, 1.0, 1.0, 1.0, sin(0.0), _GLF_IDENTITY(sqrt(1.0), (_GLF_IDENTITY(sqrt(1.0), mix(float(sqrt(1.0)), float(_GLF_FUZZED(6.6)), bool(false)))) - 0.0), 1.0, 1.0, 1.0, 1.0))).x) * 1.0) < injectionSwitch.y)), false))).y), false))))), false, true, true))) && true)))))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[1]), max(vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[1]), vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(-95.56)), bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 0.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, sqrt(1.0), 0.0, determinant(mat4(0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0)), 0.0))).x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), _GLF_IDENTITY(false, false || (false))))).y), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(1883.8892), _GLF_IDENTITY(float(vec2(_GLF_FUZZED(1883.8892), 0.0)), (false ? _GLF_FUZZED(4859.0877) : _GLF_IDENTITY(float(vec2(_GLF_FUZZED(1883.8892), 0.0)), (float(vec2(_GLF_FUZZED(1883.8892), 0.0))) / 1.0)))), _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) / 1.0), (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(-95.56)), bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) - (0 & 8222))], _GLF_IDENTITY(injectionSwitch[1], (false ? _GLF_FUZZED(6150.1934) : injectionSwitch[1])))).x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(165940u)), _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(25.20)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y)), false))).y), false)))), ! (! (bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-95.56)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), max(mix(vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-95.56)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), mix(vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-95.56)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))).y), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-95.56)), bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))) * vec2(1.0, 1.0)).x < injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))).y), false))))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, sqrt(0.0)))) > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-95.56)), _GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), true), bvec3(bvec3(bvec3(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), true))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), true), bvec3(bvec3(bvec3(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), true))))))))))).y), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), mix(vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[1]), vec2((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(7.1, -9.5)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))))), injectionSwitch)))[0], _GLF_FUZZED(-95.56)), bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y)), false))).y), false)))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-95.56)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-95.56)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y, bool(bvec4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-95.56)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y, true, true, true)))), (bool(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[_GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), (int(int(1))) | 0))]), vec2((injectionSwitch)[0], _GLF_FUZZED(-95.56)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_IDENTITY(_GLF_FUZZED(-95.56), (_GLF_FUZZED(-95.56)) / 1.0)), bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sqrt(vec2(0.0, 0.0))).x < injectionSwitch.y)), false))).y, true, true, true))))) && true)))), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-95.56)), bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false, ! (_GLF_IDENTITY(! ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false), false || (! ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))))), false))).y))), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1883.8892), _GLF_IDENTITY((injectionSwitch), (true ? _GLF_IDENTITY((injectionSwitch), max(_GLF_IDENTITY((injectionSwitch), vec2(0.0, 0.0) + ((injectionSwitch))), (injectionSwitch))) : _GLF_FUZZED(injectionSwitch)))[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY(-95.56, clamp(-95.56, -95.56, -95.56)))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y), false))))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-95.56)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-95.56)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, false || (false))))))).y), false)))), ! (! (bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-95.56)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-95.56)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y) || false)), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-95.56)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y), false))))))))) && true, ((bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-95.56)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-95.56)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y), false)))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[_GLF_IDENTITY(1, 0 | (1))]), vec2(1.0, 1.0) * (vec2(_GLF_FUZZED(_GLF_IDENTITY(1883.8892, (_GLF_IDENTITY(1883.8892, float(mat4(1883.8892, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)))) - 0.0)), (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY(-95.56, max(-95.56, -95.56)))), bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) < injectionSwitch.y)), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false))).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(1883.8892), (injectionSwitch)[1]), vec2(1.0, 1.0) * (vec2(_GLF_FUZZED(_GLF_IDENTITY(1883.8892, (_GLF_IDENTITY(1883.8892, float(mat4(1883.8892, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)))) - 0.0)), (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY(-95.56, max(-95.56, -95.56)))), bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false))).y)) || false), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(1883.8892), float(_GLF_IDENTITY(mat2(_GLF_FUZZED(1883.8892), 0.0, abs(1.0), abs(1.0)), (false ? _GLF_FUZZED((mat2(-25.93, -5.9, -297.859, 8997.6957) / mat2(6.8, -0.4, -7.6, -95.94))) : _GLF_IDENTITY(mat2(_GLF_FUZZED(1883.8892), 0.0, abs(1.0), abs(1.0)), transpose(_GLF_IDENTITY(transpose(mat2(_GLF_FUZZED(1883.8892), 0.0, abs(1.0), abs(1.0))), (true ? transpose(mat2(_GLF_FUZZED(1883.8892), 0.0, abs(1.0), abs(1.0))) : _GLF_FUZZED(mat2(9466.7625, -3.5, -5.7, -92.89)))))))))), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_FUZZED(1883.8892), float(mat2(_GLF_FUZZED(1883.8892), 0.0, abs(1.0), abs(1.0)))), _GLF_IDENTITY(_GLF_FUZZED(1883.8892), float(mat2(_GLF_FUZZED(1883.8892), 0.0, abs(1.0), abs(1.0))))), max(min(_GLF_IDENTITY(_GLF_FUZZED(1883.8892), float(mat2(_GLF_FUZZED(1883.8892), 0.0, abs(1.0), abs(1.0)))), _GLF_IDENTITY(_GLF_FUZZED(1883.8892), float(mat2(_GLF_FUZZED(1883.8892), 0.0, abs(1.0), abs(1.0))))), min(_GLF_IDENTITY(_GLF_FUZZED(1883.8892), float(mat2(_GLF_FUZZED(1883.8892), 0.0, abs(1.0), abs(1.0)))), _GLF_IDENTITY(_GLF_FUZZED(1883.8892), float(mat2(_GLF_FUZZED(1883.8892), 0.0, abs(1.0), abs(1.0)))))))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-95.56)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).y), false))))))))) && true) && true))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(! (! (false)), (_GLF_IDENTITY(! (! (false)), false || (_GLF_IDENTITY(! (! (false)), (! (! (false))) || false)))) || false))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(vec2(-9384.1137, 567.977)) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), clamp((false ? _GLF_FUZZED(vec2(-9384.1137, 567.977)) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), _GLF_IDENTITY((false ? _GLF_FUZZED(vec2(-9384.1137, 567.977)) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), max((false ? _GLF_FUZZED(vec2(-9384.1137, 567.977)) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), (false ? _GLF_FUZZED(vec2(-9384.1137, 567.977)) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))), (false ? _GLF_FUZZED(vec2(-9384.1137, 567.977)) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))), injectionSwitch)).x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true), false, _GLF_IDENTITY(true, false || (true)), true)))) || false, (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false)))))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true, true)))) || false, _GLF_IDENTITY(! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, true)))) || false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(! ((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true, true))), (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, true)))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false), true, false)), (bool(bvec3(! ((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true, true))), (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, true)))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false), true, false))) && true), bool(bvec4(bool(bvec3(! ((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, true)))) || false), _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), true, true, false))), false)), true, false, false))))), false || (! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, true)))) || false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(! ((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true, true))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, true))), false || (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, true)))))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false), true, false)), (bool(bvec3(! ((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true, true))), (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), true && (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), (bool(bool(_GLF_IDENTITY(false, ! (! (false)))))) || false)))), false, true, true)))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)))))) || false), true, false))) && true), bool(bvec4(bool(bvec3(! ((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, true)))) || false), _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), true, true, false))), false)), true, false, _GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && (false)))))))))), ! (! ((_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, bool(bool(true))), false)), (bool(bvec2(_GLF_IDENTITY(true, bool(bool(true))), false))) && true)) && ((false))), (_GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ((false)) && true))))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(169.108)), vec2(_GLF_FUZZED(2.2), (injectionSwitch)[1]), bvec2(false, true))), (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(169.108)), vec2(_GLF_FUZZED(2.2), (injectionSwitch)[1]), bvec2(false, true)), min(_GLF_IDENTITY(mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(169.108)), max(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(169.108)), clamp(vec2((injectionSwitch)[0], _GLF_FUZZED(169.108)), vec2((injectionSwitch)[0], _GLF_FUZZED(169.108)), vec2((injectionSwitch)[0], _GLF_FUZZED(169.108)))), vec2((injectionSwitch)[0], _GLF_FUZZED(169.108)))), vec2(_GLF_FUZZED(2.2), (injectionSwitch)[1]), bvec2(false, true)), log(vec2(1.0, 1.0)) + (mix(vec2((injectionSwitch)[0], _GLF_FUZZED(169.108)), vec2(_GLF_FUZZED(2.2), (injectionSwitch)[1]), bvec2(false, true)))), mix(vec2((injectionSwitch)[0], _GLF_FUZZED(169.108)), vec2(_GLF_FUZZED(2.2), (injectionSwitch)[1]), bvec2(false, true))))) : _GLF_FUZZED(_GLF_IDENTITY(vec2(-79.96, -376.425), max(_GLF_IDENTITY(vec2(-79.96, -376.425), max(vec2(-79.96, -376.425), vec2(-79.96, -376.425))), vec2(-79.96, -376.425)))))).y))))), false, _GLF_IDENTITY(true, ! (! (true))), true)))) || false)))) || false))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-1.4)), float(injectionSwitch.y), bool(true))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-1.4)), _GLF_IDENTITY(float(injectionSwitch.y), (float(injectionSwitch.y)) - 0.0), bool(true))))), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-1.4)), float(injectionSwitch.y), bool(true))))))), ! (! (! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-1.4)), float(injectionSwitch.y), bool(true)))))))))))), (bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-1.4)), float(injectionSwitch.y), bool(true))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-1.4)), float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), bool(true)))))))))) || false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))) && true)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
      return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))).x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u)) | (workgroup_base)), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u), 1u, 1u, 1u)), _GLF_IDENTITY(uint(uint(uint(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u), _GLF_IDENTITY(1u, uint(uvec2(_GLF_IDENTITY(1u, (1u) + 0u), 0u))), 1u, 1u)))), (uint(uint(uint(uvec4(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u), 1u, 1u, 1u))))) ^ _GLF_IDENTITY(0u, uint(uint(0u)))))) + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
      return;
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), (0u | 0u) ^ (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ((workgroup_base + subgroup_id * subgroup_size)) | ((workgroup_base + subgroup_id * subgroup_size))))) | (workgroup_base + subgroup_id * subgroup_size))) >> 0u) + ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - (0u & 36843u))) % subgroup_size);
 buf[virtual_gid] = 1;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(_GLF_IDENTITY(4, 0 ^ (4)), (_GLF_IDENTITY(4, 0 ^ (4))) | (_GLF_IDENTITY(4, 0 ^ (4)))), 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false)))) && (false)), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY((_GLF_IDENTITY(true && (false), bool(bvec4(_GLF_IDENTITY(true && (false), bool(bvec3(true && (false), true, true))), true, true, true)))) || false, bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(true && (false), bool(bvec4(_GLF_IDENTITY(true && (false), bool(bvec3(true && (false), true, true))), true, true, true)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(true && (false), bool(bvec4(_GLF_IDENTITY(true && (false), bool(bvec3(true && (false), true, true))), true, true, true))))), _GLF_IDENTITY(bool(bvec3(! ((_GLF_IDENTITY(true && (false), bool(bvec4(_GLF_IDENTITY(true && (false), bool(bvec3(true && (false), true, true))), true, true, true))))), true, false)), true && (bool(bvec3(! ((_GLF_IDENTITY(true && (false), bool(bvec4(_GLF_IDENTITY(true && (false), bool(bvec3(true && (false), true, true))), true, true, true))))), true, false))))))) || false, false, false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), ! (! (! (_GLF_IDENTITY(false, true && (false)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY((_GLF_IDENTITY(true && (false), bool(bvec4(_GLF_IDENTITY(true && (false), bool(bvec3(true && (false), true, true))), true, true, true)))) || false, bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(true && (false), bool(bvec4(_GLF_IDENTITY(true && (false), bool(bvec3(true && (false), true, true))), true, true, true)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(true && (false), bool(bvec4(_GLF_IDENTITY(true && (false), bool(bvec3(true && (false), true, true))), true, true, true))))), _GLF_IDENTITY(bool(bvec3(! ((_GLF_IDENTITY(true && (false), bool(bvec4(_GLF_IDENTITY(true && (false), bool(bvec3(true && (false), true, true))), true, true, true))))), true, false)), true && (bool(bvec3(! ((_GLF_IDENTITY(true && (false), bool(bvec4(_GLF_IDENTITY(true && (false), bool(bvec3(true && (false), true, true))), true, true, true))))), true, false))))))) || false, false, false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), ! (! (! (_GLF_IDENTITY(false, true && (false)))))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY((_GLF_IDENTITY(true && (false), bool(bvec4(_GLF_IDENTITY(true && (false), bool(bvec3(true && (false), true, true))), true, true, true)))) || false, bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(true && (false), bool(bvec4(_GLF_IDENTITY(true && (false), bool(bvec3(true && (false), true, true))), true, true, true)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(true && (false), bool(bvec4(_GLF_IDENTITY(true && (false), bool(bvec3(true && (false), true, true))), true, true, true))))), _GLF_IDENTITY(bool(bvec3(! ((_GLF_IDENTITY(true && (false), bool(bvec4(_GLF_IDENTITY(true && (false), bool(bvec3(true && (false), true, true))), true, true, true))))), true, false)), true && (bool(bvec3(! ((_GLF_IDENTITY(true && (false), bool(bvec4(_GLF_IDENTITY(true && (false), bool(bvec3(true && (false), true, true))), true, true, true))))), true, false))))))) || false, false, false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), ! (! (! (_GLF_IDENTITY(false, true && (false)))))))), false, true)), (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY((_GLF_IDENTITY(true && (false), bool(bvec4(_GLF_IDENTITY(true && (false), bool(bvec3(true && (false), true, true))), true, true, true)))) || false, bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(true && (false), bool(bvec4(_GLF_IDENTITY(true && (false), bool(bvec3(true && (false), true, true))), true, true, true)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(true && (false), bool(bvec4(_GLF_IDENTITY(true && (false), bool(bvec3(true && (false), true, true))), true, true, true))))), _GLF_IDENTITY(bool(bvec3(! ((_GLF_IDENTITY(true && (false), bool(bvec4(_GLF_IDENTITY(true && (false), bool(bvec3(true && (false), true, true))), true, true, true))))), true, false)), true && (bool(bvec3(! ((_GLF_IDENTITY(true && (false), bool(bvec4(_GLF_IDENTITY(true && (false), bool(bvec3(true && (false), true, true))), true, true, true))))), true, false))))))) || false, false, false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), ! (! (! (_GLF_IDENTITY(false, true && (false)))))))), false, true))) && true))) && true), _GLF_IDENTITY(true, (true) && true))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
