#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (false))))
  return;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 | (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(int(_GLF_IDENTITY(int(1), int(1)))), min(_GLF_IDENTITY(int(int(_GLF_IDENTITY(int(1), int(1)))), (int(int(_GLF_IDENTITY(int(1), int(1))))) ^ 0), int(int(_GLF_IDENTITY(int(1), int(1))))))))) | 0)); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), bool(bvec2((false), true))), false || (! (false))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, bool(bool(true)))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), true), bvec2(bvec4(_GLF_IDENTITY(bvec2((false), true), bvec2(bvec4(bvec2((false), true), true, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))), false || (! (false))))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --))), (~ (_GLF_IDENTITY(_injected_loop_counter --, 0 | _GLF_IDENTITY((_injected_loop_counter --), ((_injected_loop_counter --)) + 0)))) | 0))))
              {
               return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = (20933 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) | 1)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_IDENTITY(true, false || (true)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
          break;
         break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
          continue;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), true))), bvec3(bvec3(bvec3(false, true, false))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
             return;
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              return;
            }
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false))))))), bool(bool(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))) && true))))) || (_GLF_WRAPPED_IF_TRUE(true))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch)))) / vec2(1.0, 1.0)).y))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, bool(bvec3(_injected_loop_counter < 1, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 return;
                }
              }
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (false ? _GLF_FUZZED(46638) : int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), false))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2x4(injectionSwitch.y, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 1.0, abs(1.0), 1.0, 1.0, 1.0)), max(float(mat2x4(injectionSwitch.y, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 1.0, abs(1.0), 1.0, 1.0, 1.0)), float(mat2x4(injectionSwitch.y, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 1.0, abs(1.0), 1.0, 1.0, 1.0))))))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))) || false)))
              continue;
             continue;
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
            {
             do
              {
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(-2.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(-2.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(-2.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), mix(float(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(-2.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), float(_GLF_FUZZED(-7.7)), bool(false)))) * 1.0), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(-2.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(-2.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(-2.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, 1.0, sin(0.0))), max(float(vec4(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(-2.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, 1.0, sin(0.0))), float(vec4(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(-2.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, 1.0, sin(0.0)))))))))), false || (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (! (true)))), (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), true, true)))))))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    break;
                   return;
                   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     break;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))
                    return;
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((5723.7454 / 2190.9754)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(6037.1754)), bvec2(true, false))).x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
                    break;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(false));
             for(int _injected_loop_counter = _GLF_IDENTITY((1 | int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))))), _GLF_IDENTITY(0 | ((1 | int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, (0.0) + log(1.0)))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)))))), ~ (_GLF_IDENTITY(~ (0 | ((1 | int(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-4482.9784)), bool(false))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))))))), ~ (~ (~ (0 | _GLF_IDENTITY(((1 | int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(injectionSwitch), mix(vec2(_GLF_FUZZED(9.3), _GLF_FUZZED(962.334)), vec2((vec2(injectionSwitch))[0], (vec2(injectionSwitch))[1]), bvec2(true, true))))).x, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)))))), (((1 | int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(injectionSwitch), mix(vec2(_GLF_FUZZED(9.3), _GLF_FUZZED(962.334)), vec2((vec2(injectionSwitch))[0], (vec2(injectionSwitch))[1]), bvec2(true, true))))).x, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))))))) >> 0)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, int(ivec3(_GLF_IDENTITY(0, (0) ^ 0), 0, 0)))); _injected_loop_counter --)
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - abs(determinant(mat2(0.0, 0.0, 0.0, 0.0)))) > injectionSwitch.y))))
              continue;
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              continue;
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 ^ (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))))))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
              }
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
             if(_GLF_DEAD(false))
              continue;
            }
           return;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - abs(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))), float(_GLF_IDENTITY(mat2((_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - abs(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))), 1.0, 0.0, 0.0), mat2(mat2x4(mat2((_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - abs(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))), 1.0, 0.0, 0.0)))))) - 0.0)))))
        break;
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
    }
   else
    {
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), bool(bvec2(bool(false), true))))))), true && (false))))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, max(5, 5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (true))), true && (bool(_GLF_IDENTITY(true, true && (true)))))))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec3(! (_GLF_DEAD(false)), false, true)))) || false))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, false)))))) || false)))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), (false ? _GLF_FUZZED(-9.5) : injectionSwitch.y)) : _GLF_FUZZED(-5996.9009))), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, injectionSwitch.y)), (false ? _GLF_FUZZED(-9.5) : injectionSwitch.y)) : _GLF_FUZZED(-5996.9009)))) && true)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)))
              break;
            }
           else
            {
             return;
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          break;
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(11.16)), bool(false)))))))))))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((false ? _GLF_FUZZED(458.846) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))), max((false ? _GLF_FUZZED(458.846) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(vec2(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x, injectionSwitch.x)), 0.0))), 1.0 * (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(0.1), _GLF_FUZZED(24.88)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-197.038, -45.71)) : injectionSwitch)))).x))))), (false ? _GLF_FUZZED(458.846) : _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))))))) > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((false ? _GLF_FUZZED(458.846) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))), max((false ? _GLF_FUZZED(458.846) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(966.543)), float(1.0), bool(true))), 1.0, 1.0)) * (injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(966.543), max(_GLF_FUZZED(966.543), _GLF_FUZZED(966.543))), (_GLF_IDENTITY(_GLF_FUZZED(966.543), max(_GLF_FUZZED(966.543), _GLF_FUZZED(966.543)))) / 1.0)), _GLF_IDENTITY(float(1.0), float(mat4x2(float(1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 0.0, abs(0.0), 0.0, 1.0, sqrt(1.0)))), bool(true))), 1.0, 1.0)) * (injectionSwitch.x))) * 1.0)))), _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(458.846, (true ? 458.846 : _GLF_FUZZED(6.4)))) : _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))), max((false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(458.846, (true ? 458.846 : _GLF_FUZZED(6.4))), _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(458.846, (true ? 458.846 : _GLF_FUZZED(6.4))), min(_GLF_IDENTITY(458.846, (true ? 458.846 : _GLF_FUZZED(6.4))), _GLF_IDENTITY(458.846, (true ? 458.846 : _GLF_FUZZED(6.4))))), 1.0, 1.0)), (float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(458.846, (true ? 458.846 : _GLF_FUZZED(6.4))), min(_GLF_IDENTITY(458.846, (true ? 458.846 : _GLF_FUZZED(6.4))), _GLF_IDENTITY(458.846, (true ? 458.846 : _GLF_FUZZED(6.4))))), 1.0, 1.0))) - 0.0))) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(458.846, (true ? 458.846 : _GLF_FUZZED(6.4)))) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))))))))) > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((false ? _GLF_FUZZED(458.846) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))), max((false ? _GLF_FUZZED(458.846) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(vec2(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x, injectionSwitch.x)), 0.0))), 1.0 * (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(0.1), _GLF_FUZZED(24.88)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-197.038, -45.71)) : injectionSwitch)))).x))))), (false ? _GLF_FUZZED(458.846) : _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))))))) > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((false ? _GLF_FUZZED(458.846) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))), max((false ? _GLF_FUZZED(458.846) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(966.543)), float(1.0), bool(true))), 1.0, 1.0)) * (injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(966.543), max(_GLF_FUZZED(966.543), _GLF_FUZZED(966.543))), (_GLF_IDENTITY(_GLF_FUZZED(966.543), max(_GLF_FUZZED(966.543), _GLF_FUZZED(966.543)))) / 1.0)), _GLF_IDENTITY(float(1.0), float(mat4x2(float(1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 0.0, abs(0.0), 0.0, 1.0, sqrt(1.0)))), bool(true))), 1.0, 1.0)) * (injectionSwitch.x))) * 1.0)))), _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(458.846, (true ? 458.846 : _GLF_FUZZED(6.4)))) : _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))), max((false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(458.846, (true ? 458.846 : _GLF_FUZZED(6.4))), _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(458.846, (true ? 458.846 : _GLF_FUZZED(6.4))), min(_GLF_IDENTITY(458.846, (true ? 458.846 : _GLF_FUZZED(6.4))), _GLF_IDENTITY(458.846, (true ? 458.846 : _GLF_FUZZED(6.4))))), 1.0, 1.0)), (float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(458.846, (true ? 458.846 : _GLF_FUZZED(6.4))), min(_GLF_IDENTITY(458.846, (true ? 458.846 : _GLF_FUZZED(6.4))), _GLF_IDENTITY(458.846, (true ? 458.846 : _GLF_FUZZED(6.4))))), 1.0, 1.0))) - 0.0))) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(458.846, (true ? 458.846 : _GLF_FUZZED(6.4)))) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))))))))) > injectionSwitch.y))), bool(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((false ? _GLF_FUZZED(458.846) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))), max((false ? _GLF_FUZZED(458.846) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(vec2(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x, injectionSwitch.x)), 0.0))), 1.0 * (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(0.1), _GLF_FUZZED(24.88)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-197.038, -45.71)) : injectionSwitch)))).x))))), (false ? _GLF_FUZZED(458.846) : _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))))))) > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((false ? _GLF_FUZZED(458.846) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))), max((false ? _GLF_FUZZED(458.846) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(966.543)), float(1.0), bool(true))), 1.0, 1.0)) * (injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(966.543), max(_GLF_FUZZED(966.543), _GLF_FUZZED(966.543))), (_GLF_IDENTITY(_GLF_FUZZED(966.543), max(_GLF_FUZZED(966.543), _GLF_FUZZED(966.543)))) / 1.0)), _GLF_IDENTITY(float(1.0), float(mat4x2(float(1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 0.0, abs(0.0), 0.0, 1.0, sqrt(1.0)))), bool(true))), 1.0, 1.0)) * (injectionSwitch.x))) * 1.0)))), _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(458.846, (true ? 458.846 : _GLF_FUZZED(6.4)))) : _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))), max((false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(458.846, (true ? 458.846 : _GLF_FUZZED(6.4))), _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(458.846, (true ? 458.846 : _GLF_FUZZED(6.4))), min(_GLF_IDENTITY(458.846, (true ? 458.846 : _GLF_FUZZED(6.4))), _GLF_IDENTITY(458.846, (true ? 458.846 : _GLF_FUZZED(6.4))))), 1.0, 1.0)), (float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(458.846, (true ? 458.846 : _GLF_FUZZED(6.4))), min(_GLF_IDENTITY(458.846, (true ? 458.846 : _GLF_FUZZED(6.4))), _GLF_IDENTITY(458.846, (true ? 458.846 : _GLF_FUZZED(6.4))))), 1.0, 1.0))) - 0.0))) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(458.846, (true ? 458.846 : _GLF_FUZZED(6.4)))) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))))))))) > injectionSwitch.y))), false, true)))))))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec3(0, 1, ((0 >> _GLF_IDENTITY(int(6), int(6))) | 1))), (_GLF_IDENTITY(int(ivec3(0, 1, ((0 >> _GLF_IDENTITY(int(6), int(6))) | 1))), (int(ivec3(0, 1, ((0 >> _GLF_IDENTITY(int(6), int(6))) | 1)))) >> 0)) | (int(ivec3(0, 1, ((0 >> _GLF_IDENTITY(int(6), int(6))) | 1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1 | 0, _GLF_IDENTITY((true ? 1 | 0 : _GLF_FUZZED(-51585)), ((true ? 1 | 0 : _GLF_FUZZED(-51585))) * 1)))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ (~ (1)))), _GLF_IDENTITY(true, bool(bvec3(true, true, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bool(_GLF_WRAPPED_IF_FALSE(false)))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, false)))) || false)), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, false)))) || false)), true), bvec2(bvec2(bvec2((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, false)))) || false)), true)))))))))
          {
           return;
          }
         else
          {
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, false, true)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(sqrt(0.0), min(sqrt(0.0), sqrt(0.0)))) > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      continue;
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), false, true, false)))))) && true), (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.y), min(_GLF_IDENTITY((injectionSwitch.y), min((injectionSwitch.y), (injectionSwitch.y))), (injectionSwitch.y))), clamp(_GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) - 0.0), (injectionSwitch.y), (injectionSwitch.y))) - 0.0)))))
        return;
      }
     else
      {
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
  }
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, ~ (~ _GLF_IDENTITY((workgroup_id), ~ (~ ((workgroup_id)))))), _GLF_IDENTITY(uint(uvec3(workgroup_id, 0u, 1u)), (false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u))))), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(uint(uvec3(workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size)))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(0u, (true ? 0u : _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) | (_GLF_IDENTITY(_GLF_FUZZED(subgroup_size), min(_GLF_IDENTITY(_GLF_FUZZED(subgroup_size), uint(uint(_GLF_FUZZED(subgroup_size)))), _GLF_FUZZED(subgroup_size))))))))), 1u)), (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u)), (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u)), min(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u)), false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u))))) << 0u)))), 1u * (_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(uint(uvec3(workgroup_id, _GLF_IDENTITY(0u, _GLF_IDENTITY((true ? 0u : _GLF_FUZZED(subgroup_size)), uint(uint((true ? 0u : _GLF_FUZZED(subgroup_size)))))), 1u)), _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(_GLF_IDENTITY(workgroup_id, 0u ^ (workgroup_id)), 0u, 1u)), (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u)), min(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u)), _GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u)), ~ (~ (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u)), max(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u)), false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(uint(uvec3(workgroup_id, 0u, 1u)), (uint(uvec3(workgroup_id, 0u, 1u))) - _GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, min(0u, 0u)))))))))), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u)), ~ (~ (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u)), max(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u)), false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(uint(uvec3(workgroup_id, 0u, 1u)), (uint(uvec3(workgroup_id, 0u, 1u))) - _GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, min(0u, 0u)))))))))), min(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u)), ~ (~ (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u)), max(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u)), false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(uint(uvec3(workgroup_id, 0u, 1u)), (uint(uvec3(workgroup_id, 0u, 1u))) - _GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, min(0u, 0u)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u)), ~ (~ (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u)), max(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u)), false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(uint(uvec3(workgroup_id, 0u, 1u)), (uint(uvec3(workgroup_id, 0u, 1u))) - _GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, min(0u, 0u)))))))))), ~ (~ (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u)), ~ (~ (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u)), max(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u)), false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(uint(uvec3(workgroup_id, 0u, 1u)), (uint(uvec3(workgroup_id, 0u, 1u))) - _GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, min(0u, 0u))))))))))))))), 1u, 0u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u)))), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u)), ~ (~ (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u)), max(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u)), false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(uint(uvec3(workgroup_id, 0u, 1u)), (uint(uvec3(workgroup_id, 0u, 1u))) - _GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, min(0u, 0u)))))))))), min(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u)), ~ (~ (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u)), max(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u)), false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(uint(uvec3(workgroup_id, 0u, 1u)), (uint(uvec3(workgroup_id, 0u, 1u))) - _GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, min(0u, 0u)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u)), ~ (~ (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u)), max(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u)), false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(uint(uvec3(workgroup_id, 0u, 1u)), (uint(uvec3(workgroup_id, 0u, 1u))) - _GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, min(0u, 0u)))))))))), ~ (~ (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u)), ~ (~ (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u)), max(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u)), false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(uint(uvec3(workgroup_id, 0u, 1u)), (uint(uvec3(workgroup_id, 0u, 1u))) - _GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, min(0u, 0u))))))))))))))), 1u, 0u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))))))))))) << 0u)), (1u ^ 1u) ^ ((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, 0u ^ (_GLF_IDENTITY(workgroup_id, ~ (_GLF_IDENTITY(~ (workgroup_id), uint(uvec3(~ (workgroup_id), 0u, 1u))))))), _GLF_IDENTITY(0u ^ (workgroup_id), (_GLF_IDENTITY(0u ^ (workgroup_id), uint(uvec4(0u ^ (workgroup_id), 1u, 1u, 1u)))) << 0u)), 0u, 1u)), (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u)), min(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u)), _GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(uint(uvec3(workgroup_id, 0u, 1u)), (true ? uint(uvec3(workgroup_id, 0u, 1u)) : _GLF_FUZZED(packSnorm4x8(vec4(-194.655, 5.1, 758.016, 7.8))))), ~ (~ (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u)), max(false ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u)), false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(uint(uvec3(workgroup_id, 0u, 1u)), (uint(uvec3(workgroup_id, 0u, _GLF_IDENTITY(1u, 0u ^ (_GLF_IDENTITY(1u, (1u) ^ 0u)))))) - 0u))))))))) << 0u)))))))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(uint(uvec3(workgroup_id, 0u, 1u)), (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(subgroup_size) : uint(uvec3(workgroup_id, 0u, 1u))))), (_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(workgroup_id, 0u, 1u), (uvec3(workgroup_id, 0u, 1u)) ^ (uvec3(160342u, 143637u, 19776u) & uvec3(0u, 0u, 0u))), ~ (~ (uvec3(workgroup_id, 0u, 1u))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec4(subgroup_size, 0u, 0u, 1u)), (uint(uvec4(subgroup_size, 0u, 0u, 1u))) >> 0u)), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) | 0u, ((subgroup_size) | 0u) / (1u & uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))), (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), 0u ^ (uint(3u))), uint(3u)), (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), 0u ^ (uint(3u))), uint(3u)), uint(uvec2((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), 0u ^ (uint(3u))), uint(3u)), 0u)))) << (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), 1u), (uvec3(_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u), ((_GLF_IDENTITY(1u, max(1u, 1u)) << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))), 1u)) / uvec3(1u, 1u, _GLF_IDENTITY(1u, (1u) >> 0u))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, 0u, 0u))), max(_GLF_IDENTITY(subgroup_size, uint(uvec3(_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u), 0u, 0u))), _GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, 0u, 0u)))))))) : uint(uvec3(workgroup_id, 0u, 1u)))))) - 0u)));
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  return;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(_GLF_IDENTITY(180755u, uint(uint(180755u))))))) + 0u);
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, uint(uvec4(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), workgroup_base)) + subgroup_id * subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(0u & 171287u, max(_GLF_IDENTITY(0u & 171287u, (_GLF_IDENTITY(0u & 171287u, 1u * (_GLF_IDENTITY(0u & _GLF_IDENTITY(171287u, (171287u) / 1u), (0u & _GLF_IDENTITY(171287u, (171287u) / 1u)) ^ 0u)))) >> _GLF_IDENTITY(0u, 0u ^ (0u))), _GLF_IDENTITY(0u & 171287u, max(0u & _GLF_IDENTITY(171287u, 0u | (171287u)), 0u & 171287u))))), ((_GLF_IDENTITY(0u & 171287u, max(_GLF_IDENTITY(_GLF_IDENTITY(0u & 171287u, (0u & 171287u) * 1u), (_GLF_IDENTITY(0u & 171287u, 1u * (0u & _GLF_IDENTITY(_GLF_IDENTITY(171287u, (171287u) / 1u), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(171287u, (171287u) / 1u), (_GLF_IDENTITY(171287u, (171287u) / 1u)) ^ 0u))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(0u, 0u ^ (0u)), ~ (~ (_GLF_IDENTITY(0u, 0u ^ _GLF_IDENTITY((0u), ((0u)) | ((0u)))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u & 171287u, (0u & 171287u) << (0u | 0u)), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(0u & 171287u, (0u & 171287u) << (0u | 0u)), clamp(_GLF_IDENTITY(0u & 171287u, (0u & 171287u) << (0u | 0u)), _GLF_IDENTITY(0u & 171287u, (0u & 171287u) << (0u | 0u)), _GLF_IDENTITY(0u & 171287u, (0u & 171287u) << (0u | 0u)))))), max(0u & 171287u, _GLF_IDENTITY(0u & 171287u, (_GLF_IDENTITY(0u, (0u) << 0u) & 171287u) * uint(_GLF_ONE(1.0, injectionSwitch.y))))))))) - 0u), 0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) >> 0u), clamp(0u, 0u, _GLF_IDENTITY(0u, (0u) - 0u)))))) + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, min((_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, int(ivec3(1, 0, 0)))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, uint(uint(subgroup_local_id + 1)))), ((subgroup_local_id + 1)) >> 0u)) * 1u) % subgroup_size))), uint(uvec4(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) * uint(_GLF_ONE(1.0, injectionSwitch.y))), uint(uvec4(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * subgroup_size))), (_GLF_IDENTITY(0u & 171287u, max(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uvec2(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))) & 171287u, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0u & 171287u, 1u * (0u & 171287u))), clamp((_GLF_IDENTITY(0u & 171287u, 1u * (0u & 171287u))), (_GLF_IDENTITY(0u & 171287u, 1u * (0u & 171287u))), (_GLF_IDENTITY(0u & 171287u, 1u * (0u & 171287u))))) >> _GLF_IDENTITY(0u, 0u ^ (0u)), ((_GLF_IDENTITY(0u & _GLF_IDENTITY(171287u, 0u ^ (171287u)), 1u * (0u & 171287u))) >> _GLF_IDENTITY(0u, 0u ^ (0u))) << 0u)), 0u & 171287u))), 0u, _GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY((0u), ((0u)) ^ 0u) - 0u)))))) + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, min((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)), min(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)), _GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))))) << 0u)) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(((subgroup_local_id + 1)), ((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) << 0u))) | (((subgroup_local_id + 1))))), 0u ^ (~ (_GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1)))))) | (((subgroup_local_id + 1))))))))), (_GLF_IDENTITY(((subgroup_local_id + 1)), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) | (((subgroup_local_id + 1))))), 0u ^ (~ (_GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) | (((subgroup_local_id + 1)))))))), min((_GLF_IDENTITY(~ (_GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) | (((subgroup_local_id + 1))))), 0u ^ (~ (_GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) | (((subgroup_local_id + 1)))))))), _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) | (((subgroup_local_id + 1))))), 0u ^ (~ (_GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) | (((subgroup_local_id + 1)))))))), min((_GLF_IDENTITY(~ (_GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) | (((subgroup_local_id + 1))))), 0u ^ (~ (_GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) | (((subgroup_local_id + 1)))))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) | (((subgroup_local_id + 1))))), 0u ^ (~ (_GLF_IDENTITY(((subgroup_local_id + 1)), (((subgroup_local_id + 1))) | (((subgroup_local_id + 1)))))))))))))) ^ (_GLF_IDENTITY(0u & uint(2.1), (0u & uint(2.1)) ^ 0u))) >> 0u)) * 1u) % subgroup_size))), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u, 1u)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), false || (bool(bvec4(false, false, true, true)))))))
    {
     if(_GLF_DEAD(false))
      return;
     continue;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      break;
    }
   else
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
      break;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       buf[virtual_gid] = _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))), 0)), 0)) ^ (_GLF_IDENTITY(1, max(1, 1))), 0 ^ (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))), 0)), 0)) ^ (_GLF_IDENTITY(1, max(1, 1))))));
      }
    }
  }
 while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false)) || false), bool(bvec3(_GLF_WRAPPED_LOOP(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), true && ((false))))))))), ! (! (false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((false), false || ((false))), false, true)), (bool(bvec3(_GLF_IDENTITY((false), false || ((false))), false, true))) || false))))) || _GLF_IDENTITY(false, ! (! (false)))))))), true && (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), true && ((false))))))))), _GLF_IDENTITY(! (! (false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((false), false || ((false))), false, true)), (bool(bvec3(_GLF_IDENTITY((false), false || ((false))), false, true))) || false))))) || _GLF_IDENTITY(false, ! (! (false))))))), bool(bvec2(! (! (false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((false), false || ((false))), false, true)), (bool(bvec3(_GLF_IDENTITY((false), false || ((false))), false, true))) || false))))) || _GLF_IDENTITY(false, ! (! (false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false, false, _GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(0.0, float(vec3(0.0, 1.0, determinant(mat2(log(1.0), 0.0, 0.0, 0.0))))), 0.0) + (injectionSwitch)).y)) && ((false))) && true))))), (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), bool(bvec4(_GLF_IDENTITY(false || _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! _GLF_IDENTITY((! (_GLF_IDENTITY((false), _GLF_IDENTITY(true && ((false)), false || (_GLF_IDENTITY(_GLF_IDENTITY(true && ((false)), ! (! (true && ((false))))), (true && ((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), false || (false))))))) || false)))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY((false), _GLF_IDENTITY(true && ((false)), false || (_GLF_IDENTITY(true && ((false)), (true && (_GLF_IDENTITY((false), ! (! ((false)))))) || false))))), false || (! (_GLF_IDENTITY((false), _GLF_IDENTITY(true && ((false)), false || (_GLF_IDENTITY(true && ((false)), (true && (_GLF_IDENTITY((false), ! (! ((false)))))) || false))))))))) && true))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), ! _GLF_IDENTITY((! (_GLF_IDENTITY((false), _GLF_IDENTITY(true && ((false)), false || (_GLF_IDENTITY(true && ((false)), (true && ((false))) || false)))))), ((! (_GLF_IDENTITY((false), _GLF_IDENTITY(true && ((false)), false || (_GLF_IDENTITY(true && ((false)), (true && ((false))) || false))))))) && true))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY(_GLF_IDENTITY((false), ! _GLF_IDENTITY((! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(true && ((false)), false || (_GLF_IDENTITY(_GLF_IDENTITY(true && ((false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true && ((false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true && ((false))))), (! (_GLF_IDENTITY(true && ((false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true && ((false)))))) && true))), (true && ((false))) || false)))))), ((! (_GLF_IDENTITY((false), _GLF_IDENTITY(true && ((false)), false || (_GLF_IDENTITY(true && ((false)), (true && ((false))) || false))))))) && true)), ! (! (_GLF_IDENTITY((false), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY((false), _GLF_IDENTITY(true && _GLF_IDENTITY(((false)), true && (_GLF_IDENTITY(((false)), ! (! (((false))))))), false || (_GLF_IDENTITY(true && ((false)), (true && ((false))) || false))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (_GLF_IDENTITY((false), _GLF_IDENTITY(true && _GLF_IDENTITY(((false)), true && (_GLF_IDENTITY(((false)), ! (! (((false))))))), false || (_GLF_IDENTITY(true && ((false)), (true && ((false))) || false))))), ! (! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(true && _GLF_IDENTITY(((false)), true && (_GLF_IDENTITY(((false)), ! (! (((false))))))), false || (_GLF_IDENTITY(true && ((false)), (true && ((false))) || false))))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(! (_GLF_IDENTITY((false), _GLF_IDENTITY(true && _GLF_IDENTITY(((false)), true && (_GLF_IDENTITY(((false)), ! (! (((false))))))), false || (_GLF_IDENTITY(true && ((false)), (true && ((false))) || false))))), ! (! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(true && _GLF_IDENTITY(((false)), true && (_GLF_IDENTITY(((false)), ! (! (((false))))))), false || (_GLF_IDENTITY(true && ((false)), (true && ((false))) || false))))))))), false || (bool(_GLF_IDENTITY(! (_GLF_IDENTITY((false), _GLF_IDENTITY(true && _GLF_IDENTITY(((false)), true && (_GLF_IDENTITY(((false)), ! (! (((false))))))), false || (_GLF_IDENTITY(true && ((false)), (true && ((false))) || false))))), ! (! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(true && _GLF_IDENTITY(((false)), true && (_GLF_IDENTITY(((false)), ! (! (((false))))))), false || (_GLF_IDENTITY(true && ((false)), (true && ((false))) || false)))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ((! (_GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_IDENTITY(true && ((false)), false || _GLF_IDENTITY((_GLF_IDENTITY(true && ((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bvec2(bool(bvec4(false, true, false, false)), false)))))), (true && ((false))) || false)), true && ((_GLF_IDENTITY(true && ((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bvec2(bool(bvec4(false, true, false, false)), false)))))), (true && ((false))) || false)))))), (_GLF_IDENTITY((false), _GLF_IDENTITY(true && ((false)), false || _GLF_IDENTITY((_GLF_IDENTITY(true && ((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bvec2(bool(bvec4(false, true, false, false)), false)))))), (true && ((false))) || false)), true && ((_GLF_IDENTITY(true && (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), true && (_GLF_IDENTITY(bool(bvec4(false, true, false, false)), true && (bool(bvec4(false, true, false, false)))))), bool(bvec2(bool(bvec4(false, true, false, false)), false))))), (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), true && (_GLF_IDENTITY(bool(bvec4(false, true, false, false)), true && (bool(bvec4(false, true, false, false)))))), bool(bvec2(bool(bvec4(false, true, false, false)), false))))), ! (! ((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, true, false, false)), true && (_GLF_IDENTITY(bool(bvec4(false, true, false, false)), true && (bool(bvec4(false, true, false, false)))))), bool(bvec2(bool(bvec4(false, true, false, false)), false))))))))) || false)), (true && (_GLF_IDENTITY((false), ((false)) || false))) || false))))))) || false)))) && true))))))))), bool(bool(! ((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! _GLF_IDENTITY((! (_GLF_IDENTITY((false), _GLF_IDENTITY(true && ((false)), false || (_GLF_IDENTITY(true && ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false)))))))), _GLF_IDENTITY((true && ((false))) || false, false || (_GLF_IDENTITY((true && ((false))) || false, bool(bvec4((true && ((false))) || false, true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), _GLF_IDENTITY((_GLF_IDENTITY((! (_GLF_IDENTITY((false), _GLF_IDENTITY(true && ((false)), false || (_GLF_IDENTITY(true && ((false)), (true && ((false))) || false)))))), bool(bool((! (_GLF_IDENTITY((false), _GLF_IDENTITY(true && ((false)), false || (_GLF_IDENTITY(true && ((false)), (true && ((false))) || false)))))))))), false || (_GLF_IDENTITY(((! (_GLF_IDENTITY((false), _GLF_IDENTITY(true && ((false)), false || (_GLF_IDENTITY(true && _GLF_IDENTITY(((false)), ! (! (((false))))), (true && ((false))) || false))))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-3515.2015), _GLF_FUZZED((false ? -694.964 : 309.949))), bvec2(false, false))).x < injectionSwitch.y)) && (((! (_GLF_IDENTITY((false), _GLF_IDENTITY(true && ((false)), _GLF_IDENTITY(false || (_GLF_IDENTITY(true && ((false)), (true && ((false))) || false)), ! (! (false || (_GLF_IDENTITY(true && ((false)), (true && ((false))) || false)))))))))))))) && true))))))))))))), (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY((false), ! _GLF_IDENTITY((! (_GLF_IDENTITY((false), _GLF_IDENTITY(true && ((false)), false || (_GLF_IDENTITY(true && ((false)), (true && ((false))) || false)))))), ((! (_GLF_IDENTITY((false), _GLF_IDENTITY(true && ((false)), false || (_GLF_IDENTITY(true && ((false)), (true && ((false))) || false))))))) && true))), bool(bool(! (! _GLF_IDENTITY((false), ! _GLF_IDENTITY((! (_GLF_IDENTITY((false), _GLF_IDENTITY(true && ((false)), false || (_GLF_IDENTITY(true && ((false)), (true && ((false))) || false)))))), ((! (_GLF_IDENTITY((false), _GLF_IDENTITY(true && ((false)), false || (_GLF_IDENTITY(true && ((false)), (true && ((false))) || false))))))) && true)))))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! _GLF_IDENTITY((! (_GLF_IDENTITY((false), _GLF_IDENTITY(true && _GLF_IDENTITY(((false)), (((false))) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(true && ((false)), true && (_GLF_IDENTITY(true && ((false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true && ((false)), bool(bvec3(true && ((false)), true, true)))), bool(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(true && ((false)), bool(bvec3(true && ((false)), true, true))), true && (_GLF_IDENTITY(true && ((false)), bool(bvec3(true && ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(bool(! (! (false))))))))))), true, true)))))), false, false))))))), (true && ((false))) || false)))))), ((! (_GLF_IDENTITY((false), _GLF_IDENTITY(true && ((false)), _GLF_IDENTITY(false, bool(bvec4(false, false, true, false))) || (_GLF_IDENTITY(true && ((false)), (_GLF_IDENTITY(true && _GLF_IDENTITY(((false)), ! (! (((false))))), _GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || (true && ((false))))) || false))))))) && true)))))), bool(bool(! ((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! _GLF_IDENTITY((! (_GLF_IDENTITY((false), _GLF_IDENTITY(true && ((false)), false || (_GLF_IDENTITY(true && ((false)), (true && ((false))) || false)))))), ((! (_GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) || false), _GLF_IDENTITY(_GLF_IDENTITY(true && ((false)), bool(bvec3(true && ((false)), false, true))), false || (_GLF_IDENTITY(_GLF_IDENTITY(true && ((false)), (true && ((false))) || false), (_GLF_IDENTITY(_GLF_IDENTITY(true && ((false)), (true && ((false))) || false), bool(bvec3(_GLF_IDENTITY(true && ((false)), (true && ((false))) || false), true, true)))) && true))))))) && true)))))))))))))) && true)), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(_GLF_IDENTITY(true && ((false)), (_GLF_IDENTITY(true && ((false)), _GLF_IDENTITY(bool(bool(true && ((false)))), bool(bvec3(bool(bool(true && ((false)))), true, false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(true && ((false)), (true && ((false))) || false)))))))))), ((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(true && ((_GLF_IDENTITY(false, (false) && true))), false || (_GLF_IDENTITY(true && (_GLF_IDENTITY((false), ! (! ((false))))), (true && (_GLF_IDENTITY((false), true && ((false))))) || false))))))))))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, (false) || false), true))), ! (! (false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))))), _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))) || false, ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))) || false, false || ((_GLF_IDENTITY(false, ! (! (false)))) || false)))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || false), true, false, false)))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))))), (_GLF_IDENTITY(false, ! (! (false)))) || false), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || false), true, false, false))))), bool(_GLF_IDENTITY(bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))))), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))) || false), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || false), true, false, false)))))), (bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))))), (_GLF_IDENTITY(false, ! (! (false)))) || false), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || false), true, false, false))))))) && true)))))))), false, false, _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_TRUE(_GLF_IDENTITY(true, bool(bool(true))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)) && ((false))) && true), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_TRUE(_GLF_IDENTITY(true, bool(bool(true))), (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, bool(bvec3(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, false, true))))) && ((false))) && true))))))))) || false)))
        {
         do
          {
           for(int _injected_loop_counter = _GLF_IDENTITY((0 & -3190), clamp((0 & -3190), _GLF_IDENTITY((0 & -3190), (true ? (0 & -3190) : _GLF_FUZZED(54898))), (0 & -3190))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
         if(_GLF_DEAD(false))
          return;
         do
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (false ? _GLF_FUZZED(-6887.0574) : _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) / 1.0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
              {
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), true && ((false)))) && true), false)))))))
  {
   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false)))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), ! (! (bool(bvec4((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))))))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(ivec3(int(5), 0, 1))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 ^ (int(5))), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1)))) - 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, max(4, 4)), 64, 4);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
