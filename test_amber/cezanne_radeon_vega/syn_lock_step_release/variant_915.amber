#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 0) uniform buf0 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-3.0))), 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((-8979.4598 * -138.082))), float(1.0), bool(true))), 0.0, 0.0, abs(1.0)), (false ? _GLF_FUZZED(mat2x4(mat4x3(-8.2, 4.2, -56.45, -491.097, -0.0, -6.4, 290.742, 7789.6077, -5.0, 6.6, 2.9, -4.1))) : mat2x4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, abs(1.0)))))).x > injectionSwitch.y), bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), abs(1.0)), (false ? _GLF_FUZZED(mat2x4(mat4x3(-8.2, 4.2, -56.45, -491.097, -0.0, -6.4, 290.742, 7789.6077, -5.0, 6.6, _GLF_IDENTITY(2.9, min(2.9, _GLF_IDENTITY(2.9, clamp(2.9, 2.9, 2.9)))), -4.1))) : mat2x4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, abs(1.0)))))).x, (true ? _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), abs(1.0)), (false ? _GLF_FUZZED(mat2x4(mat4x3(-8.2, _GLF_IDENTITY(4.2, float(mat4x2(_GLF_IDENTITY(4.2, mix(float(4.2), float(_GLF_FUZZED(-64.50)), bool(false))), abs(1.0), 1.0, 1.0, 0.0, 0.0, length(0.0), 1.0))), -56.45, -491.097, -0.0, -6.4, 290.742, 7789.6077, -5.0, 6.6, _GLF_IDENTITY(2.9, min(2.9, _GLF_IDENTITY(2.9, clamp(2.9, 2.9, 2.9)))), -4.1))) : mat2x4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, abs(1.0)))))).x : _GLF_FUZZED(-26.09))) > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-25896) : 0))))) + (_GLF_IDENTITY(int(2), ~ (~ (int(2)))))))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, max(0, 0))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       continue;
      }
     continue;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
      continue;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y)))) || false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bvec3(bool(bvec4(false, true, false, false)), true, false)))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(1.0))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, true)))))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) | (int(2)))) | (_GLF_IDENTITY(int(2), ~ (_GLF_IDENTITY(~ (int(2)), clamp(~ (int(2)), ~ (int(2)), ~ (int(2)))))))))) << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               barrier();
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), (! ((_GLF_IDENTITY(false, true && (false))))) && true)))))))
      continue;
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
        return;
       return;
      }
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec4(bvec2(_GLF_DEAD(false), false), false, true))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     break;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, 1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(42.04) : injectionSwitch.y)))), false, true)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_injected_loop_counter < 1)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               break;
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, 0 | (0)), 0)))))), _GLF_IDENTITY(int(0), min(int(0), int(0)))))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
            }
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           break;
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(int(ivec2(_injected_loop_counter, 0)), int(ivec2(int(ivec2(_injected_loop_counter, 0)), 0)))) > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) + int(_GLF_ZERO(0.0, injectionSwitch.x))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(4.7) : _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-941.642) : injectionSwitch.y))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))
        {
         return;
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(51.97) : injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
    {
    }
   else
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(6780.1301)))))))))))))))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)) > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))))) || false)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, bool(bvec2(false, false)))), true && (true && (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(52.53, 92.78)))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), false, false)))))))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bvec3(bool(true), true, false)))))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))) || false))))
                return;
               return;
              }
             barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))))))
          {
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(3.0) : injectionSwitch.y))))))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      return;
    }
   else
    {
     for(int _injected_loop_counter = (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) >> 0)), 1 * (_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) >> 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 barrier();
                }
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).y))))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 return;
                }
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             return;
             if(_GLF_DEAD(false))
              break;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) / 1)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      break;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((-42803 | 89196) & 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
          break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, true)))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       return;
       if(_GLF_DEAD(false))
        return;
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         break;
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))).y))))
            break;
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), clamp(0 >> _GLF_IDENTITY(int(1), int(1)), 0 >> _GLF_IDENTITY(int(1), int(1)), 0 >> _GLF_IDENTITY(int(1), int(1)))))); _injected_loop_counter --)
          {
           return;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), false || (bool(bool(_GLF_DEAD(false)))))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          continue;
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(0.7)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         break;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(injectionSwitch[1]), (true ? injectionSwitch.x : _GLF_FUZZED(injectionSwitch[1])) / 1.0))) > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))), false || (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(3619.1774)), float(injectionSwitch.y), bool(true)))))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))), (injectionSwitch.x > injectionSwitch.y))) || false)))
            continue;
           break;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (0 & -61805); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ! (! (bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), (bool(bvec2(false, false))) || false))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, 0))) > _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) * ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))))) | (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(int(-823.704))))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(90.44, 8.0)))).y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, min(0, 0))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) >> (0 << _GLF_IDENTITY(int(6), int(6)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) * 1))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, false)))))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              return;
             barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           break;
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            break;
           if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
          barrier();
        }
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
              break;
             continue;
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       continue;
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       break;
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), true && (! (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec2(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y))));
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), max(injectionSwitch, injectionSwitch)).y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) && true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), false || (bool(bvec4(false, false, false, true)))))))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y)), true, true, true)))))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))
  return;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, uvec3(1u, 1u, _GLF_IDENTITY(1u, (1u) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))) * (gl_WorkGroupSize)).x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  continue;
                }
              }
            }
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(workgroup_size))) | (subgroup_size)), _GLF_IDENTITY(uint(uint(subgroup_size)), _GLF_IDENTITY((uint(uint(_GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, 0u, 0u)))))), ((uint(uint(subgroup_size)))) >> 0u) / uint(_GLF_ONE(1.0, injectionSwitch.y)))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), false, false)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY((0 | 1), _GLF_IDENTITY(int(ivec4((0 | 1), 0, 1, (0 ^ 1))), max(int(ivec4((0 | 1), 0, 1, (0 ^ 1))), int(ivec4((0 | 1), 0, 1, (0 ^ 1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     do
      {
       return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
          barrier();
        }
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! (bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), false, true))), true, true)))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-2.1) : _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5.0))) > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if(_GLF_DEAD(false))
                continue;
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_DEAD(false))
            return;
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
         return;
        }
      }
     else
      {
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)), true))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) >> 0)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
              break;
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))).y, clamp(_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))).y, _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))).y, _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))).y))))))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), (bool(bvec4(false, false, false, true))) && true))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            return;
           barrier();
          }
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || false)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && _GLF_IDENTITY(true, true && (true)), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && _GLF_IDENTITY(true, true && (true))), false || (! ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (true))))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       break;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) && true))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u) + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1) % subgroup_size, (0u | 0u) ^ _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) | (_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (_GLF_IDENTITY(~ (uint(_GLF_ZERO(0.0, injectionSwitch.x))), (~ (uint(_GLF_ZERO(0.0, injectionSwitch.x)))) << 0u))))), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), min(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY((_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0)), _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0)), ((_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0))) - 0.0), 0.0, 1.0, 0.0, 0.0, 0.0, exp(tan(0.0)), 1.0, 1.0, 0.0, 0.0, 0.0)), (true ? _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0)), ((_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0))) - 0.0), 0.0, 1.0, 0.0, 0.0, 0.0, exp(tan(0.0)), 1.0, 1.0, 0.0, 0.0, 0.0)), max(float(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0)), ((_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0))) - 0.0), 0.0, 1.0, 0.0, 0.0, 0.0, exp(tan(0.0)), 1.0, 1.0, 0.0, 0.0, 0.0)), float(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0)), ((_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0))) - 0.0), 0.0, 1.0, 0.0, 0.0, 0.0, exp(tan(0.0)), 1.0, 1.0, 0.0, 0.0, 0.0)))) : _GLF_FUZZED(4.5))))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) + ((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))))))) | (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))), 1u), clamp(uvec4(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))), 1u), uvec4(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))), 1u), uvec4(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))), 1u)))))) * uvec3(1u, 1u, 1u)))))) + 1), uint(uvec3((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY((_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0)), _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0)), ((_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0))) - 0.0), 0.0, 1.0, 0.0, 0.0, 0.0, exp(tan(0.0)), 1.0, 1.0, 0.0, 0.0, 0.0)), (true ? _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0)), ((_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0))) - 0.0), 0.0, 1.0, 0.0, 0.0, 0.0, exp(tan(0.0)), 1.0, 1.0, 0.0, 0.0, 0.0)), max(float(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0)), ((_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0))) - 0.0), 0.0, 1.0, 0.0, 0.0, 0.0, exp(tan(0.0)), 1.0, 1.0, 0.0, 0.0, 0.0)), float(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0)), ((_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0))) - 0.0), 0.0, 1.0, 0.0, 0.0, 0.0, exp(tan(0.0)), 1.0, 1.0, 0.0, 0.0, 0.0)))) : _GLF_FUZZED(4.5))))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) + ((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))))))) | (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))), 1u), clamp(uvec4(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))), 1u), uvec4(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))), 1u), uvec4(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))), 1u)))))) * uvec3(1u, 1u, 1u)))))) + 1), 0u, 0u))) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1), ((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : _GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), ~ (_GLF_IDENTITY(~ (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), max(~ (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), ~ (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))))))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) % subgroup_size))), _GLF_IDENTITY(clamp((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1) % subgroup_size, min((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) + ((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))))))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1), ((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) % subgroup_size))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1) % subgroup_size, min((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) + ((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))))))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1), ((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) % subgroup_size))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1) % subgroup_size, min((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) + ((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))))))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1), ((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) % subgroup_size))), clamp((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1) % subgroup_size, min((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) + ((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))))))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1), ((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) % subgroup_size))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1) % subgroup_size, min((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) + ((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))))))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1), ((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) % subgroup_size))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1) % subgroup_size, min((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) + ((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))))))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1), ((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) % subgroup_size)))))), 1u * (clamp((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u), 0u, 1u))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), ~ (~ (uvec3(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u), 0u, 1u))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))), (_GLF_IDENTITY(uvec3(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (_GLF_IDENTITY(~ (uint(_GLF_ZERO(0.0, injectionSwitch.x))), (~ (uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | 0u))), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1) % subgroup_size, min((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), min((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), clamp((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))))), uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))))) + ((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))))))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(30214)))), ((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) % subgroup_size))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 1.0, 0.0, 0.0), mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY(mat4x2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat4x2(-73.51, -2.6, -4385.3292, -71.74, -89.31, 84.58, -1.5, -19.52)) : mat4x2(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(1.0), 1.0, 0.0, 0.0))))))), injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1) % subgroup_size, min((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, _GLF_IDENTITY(154470u, (154470u) ^ (0u & 99528u)), 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) + ((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))), min(_GLF_IDENTITY(uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) + ((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))), max(uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) + ((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) + ((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) + ((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))))))))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(_GLF_IDENTITY(79101u, uint(_GLF_ONE(1.0, injectionSwitch.y)) * (79101u)), 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1), ((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))), 1u * (uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))))) + 1)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) % subgroup_size))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1) % subgroup_size, min((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - 0.0)), 0u), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) + ((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))))))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1), ((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) % subgroup_size))), clamp((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(8.2)), float(0.0), bool(true))), 0.0)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1) % subgroup_size, _GLF_IDENTITY(min((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) + ((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))))))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1), ((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) % subgroup_size), clamp(_GLF_IDENTITY(min((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) + ((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))))))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1), ((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) % subgroup_size), 0u + (_GLF_IDENTITY(min((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) + ((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))))))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1), ((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) % subgroup_size), clamp(min((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) + ((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))))))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1), ((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) % subgroup_size), min((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) + ((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))))))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1), ((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) % subgroup_size), min((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) + ((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))))))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1), ((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) % subgroup_size))))), min((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) + ((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))))))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1), ((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) % subgroup_size), min((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) + ((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))))))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1), ((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) % subgroup_size))))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1) % subgroup_size, min((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)), ~ (~ (uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x))))), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)), uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, abs(0.0)), vec4(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, abs(0.0)), vec4(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0)), (dot(vec4(1.0, 1.0, 1.0, abs(0.0)), vec4(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0))) - 0.0)))))), 0u)), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : _GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)) - uvec3(0u, 0u, 0u))), uvec3(0u, 0u, 0u) + ((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))))))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2.4)), bool(false))))), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(0u, uint(uvec4(0u, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))), 1u, 0u)))), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1), ((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, ~ (~ (0u)))))), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(-7.1)))), 0u))))) + 1)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) % subgroup_size))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, 1u * (subgroup_local_id)), subgroup_local_id)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1) % subgroup_size, min((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - length(vec2(0.0, _GLF_IDENTITY(0.0, float(mat4x3(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, log(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, cos(0.0), 1.0)))))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uvec3(0u, 0u, 0u) + ((false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))))))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(0u, _GLF_IDENTITY(0u, min(0u, 0u)) ^ (0u))))))) + 1), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1, (_GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (_GLF_IDENTITY(uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u), (false ? _GLF_FUZZED(uvec3(79101u, 154470u, 109505u)) : uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)))) | (uvec3(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))) + 1) - 0u))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) % subgroup_size)))))))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
  barrier();
 buf[virtual_gid] = 1;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))), ((_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) | (1)), 1)) << _GLF_IDENTITY(int(3), int(3)))) | (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))), int(ivec3((1 << _GLF_IDENTITY(int(3), int(3))), 1, 0)))) | ((1 << _GLF_IDENTITY(int(3), int(3))))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, 0 | (3)))) | (int(3))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(int(3), (int(3)) | (int(3))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(50148) : _GLF_IDENTITY(int(3), (int(3)) ^ 0)))) | (int(3))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) | (int(3))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) | (int(3))), max(_GLF_IDENTITY(int(3), (int(3)) | (int(3))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) | (int(3))), (_GLF_IDENTITY(int(3), (int(3)) | (int(3)))) ^ 0))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3))), (int(3)) | _GLF_IDENTITY((int(3)), int(ivec2((int(3)), (0 >> _GLF_IDENTITY(int(1), int(1)))))))))) | (_GLF_IDENTITY(int(3), (int(3)) | (int(3))))), _GLF_IDENTITY(int(3), (int(3)) | (int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, (true ? _GLF_IDENTITY(3, 0 | (3)) : _GLF_FUZZED(24264)))) | 0))))), (clamp(_GLF_IDENTITY(int(3), (int(3)) | (int(3))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) | (int(3))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) | (int(3))), min(_GLF_IDENTITY(int(3), (int(3)) | (int(3))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) | _GLF_IDENTITY((int(3)), int(ivec2((int(3)), (0 >> _GLF_IDENTITY(int(1), int(1))))))), min(_GLF_IDENTITY(int(3), (int(3)) | _GLF_IDENTITY((int(3)), int(ivec2((int(3)), (0 >> _GLF_IDENTITY(int(1), int(1))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) | _GLF_IDENTITY((int(3)), int(ivec2((int(3)), (0 >> _GLF_IDENTITY(int(1), int(1))))))), int(ivec3(_GLF_IDENTITY(int(3), (int(3)) | _GLF_IDENTITY((int(3)), int(ivec2((int(3)), (0 >> _GLF_IDENTITY(int(1), int(1))))))), 1, 0)))))))) | (_GLF_IDENTITY(int(3), (int(3)) | (int(_GLF_IDENTITY(3, 0 | (3))))))), _GLF_IDENTITY(int(3), (int(3)) | (int(_GLF_IDENTITY(3, clamp(3, 3, 3))))))) >> 0)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0)))), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_GLF_IDENTITY(_injected_loop_counter != 0, true && (_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0))))))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((0 | 0) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (8402 & 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) || false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, _GLF_IDENTITY(4, max(4, 4)));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)) : _GLF_FUZZED(vec2(-464.844, 6.8)))).y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(_GLF_IDENTITY(-94.03, clamp(-94.03, _GLF_IDENTITY(-94.03, (-94.03) - 0.0), -94.03)))), bool(false))) > injectionSwitch.y)) || (true))))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))
        break;
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, (true) || false), false)))))
          break;
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))));
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
          barrier();
         return;
        }
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       break;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true)))), (bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          break;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          break;
         continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4(_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0))), 1.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), tan(0.0), determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 0.0, 1.0, sqrt(0.0), 1.0, 0.0))) > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       continue;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))))), (! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))) && true), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))))), (! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))) && true), false))))), false || (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))))), (! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))) && true), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))))), (! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))) && true), false)))))))))))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, 0.0, 0.0, 0.0, 0.0)))) - vec2(0.0, 0.0)).y))))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, true), true)))))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      break;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       break;
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
    {
     if(_GLF_DEAD(false))
      continue;
     continue;
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
