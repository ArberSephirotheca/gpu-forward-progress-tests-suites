#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_13 {
 mat2x4 _f0;
} ;

struct _GLF_struct_12 {
 mat3x2 _f0;
 ivec2 _f1;
 uint virtual_gid;
 bool _f2;
 uvec2 _f3;
 mat3x4 _f4;
} ;

struct _GLF_struct_11 {
 mat4 _f0;
 bvec2 _f1;
 mat4x3 _f2;
 mat2x4 _f3;
 mat2x3 _f4;
 vec3 _f5;
 float _f6;
} ;

struct _GLF_struct_10 {
 vec3 _f0;
 vec3 _f1;
 mat2 _f2;
 mat4 _f3;
 bool _f4;
 vec4 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_14 {
 mat2x3 _f0;
 _GLF_struct_10 _f1;
 _GLF_struct_11 _f2;
 _GLF_struct_12 _f3;
 float _f4;
 _GLF_struct_13 _f5;
} ;

struct _GLF_struct_8 {
 vec4 _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_7 {
 uvec2 _f0;
 bvec4 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_9 {
 _GLF_struct_7 _f0;
 _GLF_struct_8 _f1;
} ;

struct _GLF_struct_15 {
 mat2x3 _f0;
 _GLF_struct_9 _f1;
 _GLF_struct_14 _f2;
} ;

struct _GLF_struct_4 {
 ivec4 _f0;
 uvec4 _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_3 {
 uvec4 _f0;
 ivec3 _f1;
 ivec4 _f2;
 ivec4 _f3;
 mat2x4 _f4;
 bvec2 _f5;
 ivec3 _f6;
} ;

struct _GLF_struct_5 {
 _GLF_struct_3 _f0;
 _GLF_struct_4 _f1;
 mat2x3 _f2;
 mat2 _f3;
 ivec2 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_1 {
 mat4x2 _f0;
 float _f1;
 mat3 _f2;
 uvec4 _f3;
 mat3x4 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_0 {
 ivec2 _f0;
 float _f1;
 int _f2;
 int _f3;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 vec2 _f2;
 bool _f3;
} ;

struct _GLF_struct_6 {
 _GLF_struct_2 _f0;
 _GLF_struct_5 _f1;
 uint subgroup_id;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(_GLF_struct_2(_GLF_struct_0(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0))) * _GLF_IDENTITY(ivec2(1, 1), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, (1) | (1)), 1), _GLF_IDENTITY((ivec2(1, 1)), min((ivec2(1, 1)), (ivec2(1, 1)))) / ivec2(1, 1))) / _GLF_IDENTITY(ivec2(1, 1), ~ (_GLF_IDENTITY(~ (ivec2(1, 1)), (false ? _GLF_FUZZED(ivec2(20542, -73533)) : ~ (ivec2(1, 1))))))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0))), (_GLF_IDENTITY((_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0))), ((_GLF_IDENTITY(ivec2(1), _GLF_IDENTITY((ivec2(1)), ((ivec2(1))) >> ivec2(0, 0)) | ivec2(0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), min(0, 0)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), min(0, 0)), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), min(0, 0))) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), min(0, 0)), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), min(0, 0)))))))) * ivec2(1, 1))) | ((_GLF_IDENTITY(ivec2(1), _GLF_IDENTITY((_GLF_IDENTITY(ivec2(1), ivec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(ivec2(1), ~ (~ (ivec2(1))))))) | ivec2(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), max((~ _GLF_IDENTITY((0), (_GLF_IDENTITY((0), min((0), (0)))) | ((0)))), (~ (0))))))), 0), ivec2(ivec2(_GLF_IDENTITY((_GLF_IDENTITY(ivec2(1), ivec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(ivec2(1), ~ (~ (ivec2(1))))))) | ivec2(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), max((~ (0)), (~ (0))))))), 0), ~ (~ ((_GLF_IDENTITY(ivec2(1), ivec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(ivec2(1), ~ (~ (ivec2(1))))))) | ivec2(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, ~ _GLF_IDENTITY(_GLF_IDENTITY((~ (0)), max((~ (0)), (~ (0)))), min(_GLF_IDENTITY((~ (0)), max((~ (0)), (~ (0)))), _GLF_IDENTITY((~ (0)), max((~ (0)), (~ (0))))))))), 0))))))))))) * _GLF_IDENTITY(ivec2(1, 1), ~ (~ (_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) * ivec2(1, 1))))) : _GLF_FUZZED((ivec2(60792, 34370) / _GLF_IDENTITY(-29380, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (-29380)))))), ivec2(ivec3(_GLF_IDENTITY((_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, _GLF_IDENTITY(0, min(0, 0))))) * ivec2(1, 1), (true ? _GLF_IDENTITY((_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0))), (_GLF_IDENTITY((_GLF_IDENTITY(ivec2(1), (_GLF_IDENTITY(ivec2(1), (ivec2(1)) | (ivec2(1)))) | ivec2(_GLF_IDENTITY(0, _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(0, 1, 1, (0 << _GLF_IDENTITY(int(6), int(6))))), max(int(ivec4(0, 1, 1, (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, max(6, 6))), int(6))))), _GLF_IDENTITY(int(ivec4(0, 1, 1, (0 << _GLF_IDENTITY(int(6), int(6))))), 0 ^ (int(ivec4(0, 1, 1, (0 << _GLF_IDENTITY(int(6), int(6))))))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(int(ivec4(0, 1, 1, _GLF_IDENTITY((_GLF_IDENTITY(0, (0) / 1) << _GLF_IDENTITY(int(6), int(6))), int(ivec3(_GLF_IDENTITY((_GLF_IDENTITY(0, (0) / 1) << _GLF_IDENTITY(int(6), int(6))), ((_GLF_IDENTITY(0, (0) / 1) << _GLF_IDENTITY(int(6), int(6)))) ^ 0), 1, (0 ^ 1)))))), max(int(ivec4(0, 1, 1, (0 << _GLF_IDENTITY(int(6), int(6))))), _GLF_IDENTITY(int(ivec4(0, 1, 1, (0 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, 0 | (_GLF_IDENTITY(6, (6) >> 0))), _GLF_IDENTITY(6, 0 ^ (_GLF_IDENTITY(6, 0 | (6)))), _GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (6) | 0), 6))))))))), 0 ^ (int(ivec4(0, 1, 1, (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-80203))) << _GLF_IDENTITY(int(6), int(6)))))))))))), 0))), ((_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, _GLF_IDENTITY((false ? _GLF_FUZZED(-48047) : 0), 0 | ((false ? _GLF_FUZZED(-48047) : 0)))), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | 0)) >> 0)) >> 0), 0)))), ivec2(ivec3(_GLF_IDENTITY(ivec2(1), (ivec2(1)) | _GLF_IDENTITY(ivec2(0, _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-48047) : 0)), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | 0)) >> 0)) >> 0), 0))), (ivec2(0, _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-48047) : 0)), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | 0)) >> 0)) >> 0), 0)))) / _GLF_IDENTITY(ivec2(1, 1), max(ivec2(1, 1), ivec2(1, 1))))), int(_GLF_ONE(1.0, injectionSwitch.y))))))) * ivec2(1, 1))) | ((_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0))))) * ivec2(1, 1) : _GLF_FUZZED((ivec2(60792, 34370) / -29380)))), 0)))), max(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(ivec2(1), (ivec2(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 1, 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(ivec4(1, 1, 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), ivec4(1, 1, 1, int(_GLF_ZERO(0.0, injectionSwitch.x))), ivec4(1, 1, 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))))))) | ivec2(0, 0))) * _GLF_IDENTITY(ivec2(1, 1), (_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY((ivec2(1, 1)), min((ivec2(1, 1)), (ivec2(1, 1)))) / ivec2(1, _GLF_IDENTITY(1, (1) << (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) / 1))))))) / _GLF_IDENTITY(ivec2(1, 1), ~ (_GLF_IDENTITY(~ (ivec2(1, 1)), (false ? _GLF_FUZZED(ivec2(20542, -73533)) : ~ (ivec2(1, 1))))))), _GLF_IDENTITY((true ? _GLF_IDENTITY((_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0))), (_GLF_IDENTITY((_GLF_IDENTITY(ivec2(1), (ivec2(1)) | _GLF_IDENTITY(ivec2(0, 0), (ivec2(0, 0)) | (ivec2(0, 0))))), ((_GLF_IDENTITY(ivec2(1), _GLF_IDENTITY((ivec2(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-99326))))), ((ivec2(1))) >> ivec2(0, 0)) | ivec2(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), min(0, 0)))))) * ivec2(1, 1))) | (_GLF_IDENTITY((_GLF_IDENTITY(ivec2(1), (_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), ivec2(_GLF_IDENTITY(ivec3(ivec2(1), 0), ivec3(0, 0, 0) ^ (ivec3(ivec2(1), 0))))), ivec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(ivec2(1), ~ (~ (ivec2(1))))))) | ivec2(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), max((~ (0)), (~ (0))))))), 0))), ~ (~ ((_GLF_IDENTITY(ivec2(1), (_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), ivec2(_GLF_IDENTITY(ivec3(ivec2(1), 0), ivec3(0, 0, 0) ^ (ivec3(ivec2(1), 0))))), ivec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(ivec2(1), ~ (~ (ivec2(1))))))) | ivec2(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), max((~ (0)), (~ (0))))))), 0)))))))) * _GLF_IDENTITY(ivec2(1, 1), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) * ivec2(1, 1)))), ((~ (_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) * ivec2(1, 1))))) - ivec2(0, 0))) : _GLF_FUZZED((_GLF_IDENTITY(ivec2(60792, 34370), (ivec2(60792, 34370)) * ivec2(1, 1)) / -29380))), min((true ? _GLF_IDENTITY((_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0))), (_GLF_IDENTITY((_GLF_IDENTITY(ivec2(1), (ivec2(1)) | _GLF_IDENTITY(ivec2(0, 0), (ivec2(0, 0)) | (ivec2(0, 0))))), ((_GLF_IDENTITY(ivec2(1), _GLF_IDENTITY((ivec2(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-99326))))), ((ivec2(1))) >> ivec2(0, 0)) | ivec2(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), min(0, 0)))))) * ivec2(1, 1))) | (_GLF_IDENTITY((_GLF_IDENTITY(ivec2(1), (_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), ivec2(_GLF_IDENTITY(ivec3(ivec2(1), 0), ivec3(0, 0, 0) ^ (ivec3(ivec2(1), 0))))), ivec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(ivec2(1), ~ (~ (ivec2(1))))))) | ivec2(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), max((~ (0)), (~ (0))))))), 0))), ~ (~ ((_GLF_IDENTITY(ivec2(1), (_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), ivec2(_GLF_IDENTITY(ivec3(ivec2(1), 0), ivec3(0, 0, 0) ^ (ivec3(ivec2(1), 0))))), ivec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(ivec2(1), ~ (~ (ivec2(1))))))) | ivec2(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), max((~ (0)), (~ (0))))))), 0)))))))) * _GLF_IDENTITY(ivec2(1, 1), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) * ivec2(1, 1)))), ((~ (_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) * ivec2(1, 1))))) - ivec2(0, 0))) : _GLF_FUZZED((_GLF_IDENTITY(ivec2(60792, 34370), (ivec2(60792, 34370)) * ivec2(1, 1)) / -29380))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0))), (_GLF_IDENTITY((_GLF_IDENTITY(ivec2(1), (ivec2(1)) | _GLF_IDENTITY(ivec2(0, 0), (ivec2(0, 0)) | (ivec2(0, 0))))), ((_GLF_IDENTITY(ivec2(1), _GLF_IDENTITY((ivec2(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-99326))))), ((ivec2(1))) >> ivec2(0, 0)) | ivec2(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), min(0, 0)))))) * ivec2(1, 1))) | (_GLF_IDENTITY((_GLF_IDENTITY(ivec2(1), (_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), ivec2(_GLF_IDENTITY(ivec3(ivec2(1), 0), ivec3(0, 0, 0) ^ (ivec3(ivec2(1), 0))))), ivec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(ivec2(1), ~ (~ (ivec2(1))))))) | ivec2(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), max((~ (0)), (~ (0))))))), 0))), ~ (~ ((_GLF_IDENTITY(ivec2(1), (_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), ivec2(_GLF_IDENTITY(ivec3(ivec2(1), 0), ivec3(0, 0, 0) ^ (ivec3(ivec2(1), 0))))), ivec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(ivec2(1), ~ (~ (ivec2(1))))))) | ivec2(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), max((~ (0)), (~ (0))))))), 0)))))))) * _GLF_IDENTITY(ivec2(1, 1), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) * ivec2(1, 1)))), ((~ (_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) * ivec2(1, 1))))) - ivec2(0, 0))) : _GLF_FUZZED((_GLF_IDENTITY(ivec2(60792, 34370), (ivec2(60792, 34370)) * ivec2(1, 1)) / -29380)))))), ivec2(ivec3(_GLF_IDENTITY((_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0))) * ivec2(1, 1), (true ? _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), ~ (~ (ivec2(1)))), (ivec2(1)) | ivec2(0, 0)))))), (_GLF_IDENTITY((_GLF_IDENTITY(ivec2(1), (_GLF_IDENTITY(ivec2(1), (ivec2(1)) | (ivec2(1)))) | ivec2(_GLF_IDENTITY(0, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(0, 1, 1, (0 << _GLF_IDENTITY(int(6), int(6)))), _GLF_IDENTITY(max(ivec4(0, 1, 1, (0 << _GLF_IDENTITY(int(6), int(6)))), ivec4(0, 1, 1, (0 << _GLF_IDENTITY(int(6), int(6))))), (max(ivec4(0, 1, 1, (0 << _GLF_IDENTITY(int(6), int(6)))), ivec4(0, 1, 1, (0 << _GLF_IDENTITY(int(6), int(6)))))) | (max(ivec4(0, 1, 1, (0 << _GLF_IDENTITY(int(6), int(6)))), ivec4(0, 1, 1, (0 << _GLF_IDENTITY(int(6), int(6))))))))), max(int(ivec4(0, 1, 1, (0 << _GLF_IDENTITY(int(6), int(6))))), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(0, 1, 1, (0 << _GLF_IDENTITY(int(6), int(6))))), 0 ^ (int(ivec4(0, 1, 1, (0 << _GLF_IDENTITY(int(6), int(6))))))), (_GLF_IDENTITY(int(ivec4(0, 1, 1, (0 << _GLF_IDENTITY(int(6), int(6))))), 0 ^ (int(ivec4(0, 1, 1, (0 << _GLF_IDENTITY(int(6), int(6)))))))) ^ 0)))), 0))), ((_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-48047) : 0)), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | 0)) >> 0)) >> 0), 0)))))) * ivec2(1, _GLF_IDENTITY(1, ~ (~ (1)))))) | (_GLF_IDENTITY((_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0))), ((_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0)))) ^ ivec2(0, 0)))) * ivec2(1, 1) : _GLF_FUZZED((ivec2(60792, 34370) / -29380)))), 0)))), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0)), (_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0)), ivec2(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), _GLF_IDENTITY((ivec2(1)), (_GLF_IDENTITY((ivec2(1)), ivec2(0, 0) | ((ivec2(1))))) | ((ivec2(1)))) | ivec2(0, 0)), (true ? _GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0)) : _GLF_FUZZED(ivec2(-72688, 35649)))), 1)))) << ivec2(0, 0))) * _GLF_IDENTITY(ivec2(1, 1), (_GLF_IDENTITY(ivec2(1, 1), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((ivec2(1, 1)), min((ivec2(1, 1)), (ivec2(1, 1)))), ~ (~ (_GLF_IDENTITY((ivec2(1, 1)), min((ivec2(1, 1)), (ivec2(1, 1))))))) / ivec2(1, 1), ivec2(1, 1) * (_GLF_IDENTITY((ivec2(1, 1)), min((ivec2(1, 1)), (ivec2(1, 1)))) / ivec2(1, 1))))) / _GLF_IDENTITY(ivec2(1, 1), ~ (_GLF_IDENTITY(~ (ivec2(1, 1)), (false ? _GLF_FUZZED(ivec2(20542, -73533)) : ~ (ivec2(1, 1))))))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0))), (_GLF_IDENTITY((_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0))), ((_GLF_IDENTITY(ivec2(1), _GLF_IDENTITY((ivec2(1)), ((ivec2(1))) >> ivec2(0, 0)) | ivec2(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), min(0, 0)))))) * ivec2(1, 1))) | _GLF_IDENTITY(((_GLF_IDENTITY(ivec2(1), (_GLF_IDENTITY(ivec2(1), ivec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(ivec2(1), ~ (~ (ivec2(1))))))) | ivec2(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (_GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), max((~ (0)), (~ (0))))))), 0)))), (((_GLF_IDENTITY(ivec2(1), (_GLF_IDENTITY(ivec2(1), ivec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(ivec2(1), ~ (~ (ivec2(1))))))) | ivec2(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (_GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), max((~ (0)), (~ (0))))))), 0))))) >> ivec2(0, 0))) * _GLF_IDENTITY(ivec2(1, 1), ~ (~ (_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) * ivec2(1, 1))))) : _GLF_IDENTITY(_GLF_FUZZED((ivec2(60792, 34370) / -29380)), ivec2(0, 0) ^ (_GLF_FUZZED((ivec2(60792, 34370) / -29380)))))), ivec2(ivec3(_GLF_IDENTITY((_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0))) * ivec2(1, 1), (true ? _GLF_IDENTITY((_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0))), (_GLF_IDENTITY((_GLF_IDENTITY(ivec2(1), (_GLF_IDENTITY(ivec2(1), (ivec2(1)) | (ivec2(1)))) | ivec2(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) | (1)))), 1, (0 << _GLF_IDENTITY(int(6), int(6))))), max(int(ivec4(0, 1, 1, (0 << _GLF_IDENTITY(int(6), int(6))))), _GLF_IDENTITY(int(ivec4(0, 1, 1, (0 << _GLF_IDENTITY(int(6), int(6))))), 0 ^ (int(ivec4(0, 1, 1, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) | (0))))) ^ (0 | 0)) << _GLF_IDENTITY(int(6), int(6)))))))))), 0))), ((_GLF_IDENTITY(ivec2(1), (_GLF_IDENTITY(ivec2(1), ivec2(ivec2(_GLF_IDENTITY(ivec2(1), (false ? _GLF_FUZZED(ivec2(95973, -71381)) : ivec2(1))))))) | ivec2(0, _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-48047) : 0)), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | 0)) >> 0)) >> 0), 0)))))) * ivec2(1, 1))) | ((_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(_GLF_IDENTITY(0, 1 * (0)), 0))))) * ivec2(1, 1) : _GLF_FUZZED((ivec2(60792, 34370) / -29380)))), 0)))))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1, 1), _GLF_struct_1(mat4x2(1.0), 1.0, mat3(1.0), uvec4(1u), mat3x4(1.0), uvec4(1u)), vec2(1.0), true), _GLF_struct_5(_GLF_struct_3(_GLF_IDENTITY(uvec4(1u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uvec4(1u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(1u)))), ~ (~ (~ (_GLF_IDENTITY(uvec4(1u), uvec4(0u, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0u : _GLF_FUZZED(146337u)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u) ^ (uvec4(1u))))))))), ivec3(1), ivec4(1), ivec4(1), mat2x4(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), bvec2(true), ivec3(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(40748))))), _GLF_struct_4(ivec4(1), uvec4(1u), _GLF_IDENTITY(uvec2(1u), uvec2(1u, 1u) * (uvec2(1u)))), mat2x3(1.0), mat2(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, float(mat2x3(1.0, 1.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (true ? injectionSwitch[0] : _GLF_FUZZED(-7084.6487))), injectionSwitch[1])).y))))))), ivec2(1), bvec2(true)), gl_SubgroupID);
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ _GLF_IDENTITY(_GLF_IDENTITY((int(5)), (_GLF_IDENTITY(0, int(ivec3(0, 0, 0))) >> _GLF_IDENTITY(int(3), int(3))) ^ ((int(5)))), _GLF_IDENTITY((_GLF_IDENTITY((int(5)), (0 >> _GLF_IDENTITY(int(3), int(3))) ^ ((int(5))))) | 0, int(_GLF_IDENTITY(ivec3((_GLF_IDENTITY((int(5)), (0 >> _GLF_IDENTITY(int(3), int(3))) ^ ((int(5))))) | 0, (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 | (int(8))))), (0 & 34097)), min(_GLF_IDENTITY(ivec3((_GLF_IDENTITY((int(5)), (0 >> _GLF_IDENTITY(int(3), int(3))) ^ (_GLF_IDENTITY((int(5)), int(ivec2(_GLF_IDENTITY((int(5)), clamp((int(5)), (int(5)), (int(5)))), 1)))))) | 0, (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 | (int(8))))), (0 & 34097)), (ivec3((_GLF_IDENTITY((int(5)), (0 >> _GLF_IDENTITY(int(3), int(3))) ^ ((int(5))))) | 0, (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 | (int(8))))), _GLF_IDENTITY((0 & 34097), max(_GLF_IDENTITY((0 & 34097), (_GLF_IDENTITY((0 & 34097), max((0 & 34097), (0 & 34097)))) | ((0 & 34097))), (0 & 34097))))) << ivec3(0, 0, 0)), ivec3((_GLF_IDENTITY((int(5)), (0 >> _GLF_IDENTITY(int(3), int(3))) ^ ((int(5))))) | 0, (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 | (int(8))))), (0 & 34097))))))))))) >> _GLF_IDENTITY(int(5), int(5))), true && (_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), min(int(5), int(5)))) - 0)) >> 0), ~ (~ (int(5)))))) >> _GLF_IDENTITY(int(5), int(5)))))); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, true && (false)))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         else
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(76.00) : _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), bool(bvec2(bool((injectionSwitch.x > injectionSwitch.y)), false)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), bool(bvec2(bool((injectionSwitch.x > injectionSwitch.y)), false))))), (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), bool(bvec2(bool((injectionSwitch.x > injectionSwitch.y)), false)))), bool(bool(bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), bool(bvec2(bool((injectionSwitch.x > injectionSwitch.y)), false))))))))) && true)))))))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
             barrier();
            }
          }
         while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false))));
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), false || (false))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(bitfieldReverse(-18181)) : int(3))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups)).x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) || false))), false || _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), bool(bool((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), bool(bool((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), bool(bvec2(! (bool(bvec4(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), bool(bool((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), false))))), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), bool(bool((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), bool(bool((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), bool(bvec2(! (bool(bvec4(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), bool(bool((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false))), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y) && true))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), false))))))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (true ? gl_WorkGroupSize : _GLF_FUZZED((GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base --)))).x;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)))))), true, false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && _GLF_IDENTITY(true, ! (! (true))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true))))))))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                 for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(-8.4))), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0), (mat4(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(-8.4))), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0)) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), _GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(44245))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) - 0))
                          {
                           barrier();
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(_GLF_IDENTITY(bvec2((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true)))), (bool(_GLF_IDENTITY(bvec2((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(_GLF_IDENTITY(bvec2((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true))))) && true)))))
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))));
                      }
                    }
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
              }
             else
              {
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, false || (true)) && (false))))
          {
           do
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))).y))))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))), (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, 1u * _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size))), (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, (true) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))), true, false)), (bool(bvec4(_GLF_IDENTITY(true, (true) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))) || false)) ? (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(uint(uvec2(workgroup_size, 0u)), min(uint(uvec2(workgroup_size, 0u)), uint(uvec2(workgroup_size, 0u))))), max(workgroup_size, workgroup_size))) : _GLF_FUZZED(workgroup_size)))) * workgroup_id;
 GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.z = workgroup_base;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_base = _GLF_struct_replacement_6.subgroup_id * subgroup_size;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.y = subgroup_base;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (int(6)) | 0)) | (_GLF_IDENTITY(int(6), (int(6)) | (int(6)))))), 0 + _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), 0 ^ ((_GLF_IDENTITY(int(6), int(6))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 _GLF_struct_15 _GLF_struct_replacement_15 = _GLF_struct_15(mat2x3(1.0), _GLF_struct_9(_GLF_struct_7(uvec2(1u), bvec4(true), bvec4(true)), _GLF_struct_8(vec4(1.0), bvec4(true))), _GLF_struct_14(mat2x3(1.0), _GLF_struct_10(vec3(1.0), vec3(1.0), _GLF_IDENTITY(mat2(1.0), transpose(_GLF_IDENTITY(transpose(_GLF_IDENTITY(mat2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), (false ? _GLF_FUZZED(1.8) : 1.0))), (mat2(1.0)) * mat2(1.0))), (false ? _GLF_FUZZED(_GLF_IDENTITY(mat2(56.36, 22.98, 4201.6271, _GLF_IDENTITY(7.3, min(7.3, 7.3))), (mat2(56.36, _GLF_IDENTITY(22.98, mix(float(22.98), float(_GLF_FUZZED(-7761.0492)), bool(false))), 4201.6271, _GLF_IDENTITY(7.3, min(7.3, 7.3)))) / mat2(1.0, 1.0, 1.0, 1.0))) : transpose(_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) * mat2(1.0))))))), mat4(1.0), _GLF_IDENTITY(true, (true) || false), vec4(1.0), mat2(1.0)), _GLF_struct_11(mat4(_GLF_IDENTITY(1.0, max(1.0, 1.0))), bvec2(true), mat4x3(1.0), mat2x4(1.0), mat2x3(1.0), vec3(1.0), 1.0), _GLF_struct_12(mat3x2(1.0), ivec2(1), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.z + GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.y, min(_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.z + _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.y, (GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.y) | (_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base, _GLF_IDENTITY((GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base), ((GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base)) | ((GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base))) / ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(1u), uvec3(1u))) >> _GLF_IDENTITY(uvec3(1u), uvec3(1u)))).y)), _GLF_IDENTITY((GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.z + _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.y, max(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.y))), (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), min(_GLF_IDENTITY(1u, (1u) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(1u, (1u) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))))) | (0u << _GLF_IDENTITY(uint(7u), uint(7u)))) ^ _GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (1u) >> 0u), 1u))) ^ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base, uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base, uvec3(_GLF_IDENTITY(0u, uint(uvec3(0u, ((0u << _GLF_IDENTITY(uint(2u), uint(2u))) << _GLF_IDENTITY(uint(3u), uint(3u))), 0u))), 0u, 0u) + (GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base)))).z, (_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base, uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base, uvec3(0u, 0u, 0u) + (GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base)))).z) << _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(0u, (0u) >> 0u)))) + GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.y), clamp((GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.z + GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.y), (GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.z + GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.y), (GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.z + GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.y))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.z, ~ (~ (GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.z))) + GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.y, 0u + (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base, (false ? _GLF_FUZZED(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base) : GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base)), uvec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base)).z + GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.y)), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base, (GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base) | (_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base, uvec3(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base[0], GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base[1], GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base[2])))).z + GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.y, 0u + _GLF_IDENTITY((GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.z + GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.y), ((GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.z + GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.y)) ^ 0u))) << 0u))), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.z + GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.y, max(_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.z + GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.y, max(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.z + GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.y, GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.z + GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.y)), GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.z + GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.y)), uint(uvec3(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.z + GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.y, _GLF_IDENTITY(0u, 0u | (0u)), 0u))))), _GLF_IDENTITY(1u * (GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.z + GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.y), (1u * (GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.z + GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.y)) << 0u)) + subgroup_local_id, true, uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, (1u) >> 0u), 0u, 0u, ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))), ~ (~ (uvec4(_GLF_IDENTITY(1u, (1u) >> 0u), 0u, 0u, _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))), 0u ^ (((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))))))))))), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))) && true), bool(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y)), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false), bvec3(bvec4(bvec3(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false), true)))))))) && true) ? 1u : _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_FUZZED(subgroup_size)), 0u ^ ((_GLF_FUZZED(subgroup_size)))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u | (_GLF_IDENTITY((_GLF_FUZZED(subgroup_size)), 0u ^ ((_GLF_FUZZED(subgroup_size)))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))), mat3x4(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.1), (_GLF_IDENTITY(_GLF_FUZZED(-9.1), mix(float(_GLF_FUZZED(_GLF_IDENTITY(float(true), mix(float(float(true)), float(_GLF_FUZZED(-90.85)), bool(false))))), float(_GLF_FUZZED(-9.1)), bool(true)))) / 1.0) : _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(578.345)), bool(false))), (_GLF_IDENTITY(true ? 1.0 : _GLF_FUZZED(2055.4881), float(float(true ? 1.0 : _GLF_FUZZED(2055.4881)))))))), float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.1), (_GLF_IDENTITY(_GLF_FUZZED(-9.1), mix(float(_GLF_FUZZED(float(true))), float(_GLF_FUZZED(-9.1)), bool(true)))) / 1.0) : _GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(2055.4881))), (_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_IDENTITY(_GLF_FUZZED(2055.4881), max(_GLF_IDENTITY(_GLF_FUZZED(2055.4881), clamp(_GLF_FUZZED(2055.4881), _GLF_FUZZED(2055.4881), _GLF_FUZZED(2055.4881))), _GLF_FUZZED(2055.4881)))))) - sin(0.0)))), float(mat3x4(_GLF_IDENTITY(1.0, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.1), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-9.1), mix(float(_GLF_FUZZED(float(true))), float(_GLF_FUZZED(-9.1)), bool(true)))), mix(float(_GLF_FUZZED(-34.53)), float((_GLF_IDENTITY(_GLF_FUZZED(-9.1), mix(float(_GLF_FUZZED(float(true))), float(_GLF_FUZZED(-9.1)), bool(true))))), bool(true))) / 1.0) : _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(2055.4881))))), 0.0, _GLF_ONE(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-113.345)), bool(false))), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) / _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0))), 0.0))))), (_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.1), (_GLF_IDENTITY(_GLF_FUZZED(-9.1), mix(float(_GLF_FUZZED(_GLF_IDENTITY(float(true), mix(float(float(true)), float(_GLF_FUZZED(-90.85)), bool(false))))), float(_GLF_FUZZED(-9.1)), bool(true)))) / 1.0) : _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(578.345)), bool(false))), (_GLF_IDENTITY(true ? 1.0 : _GLF_FUZZED(2055.4881), float(float(true ? 1.0 : _GLF_FUZZED(2055.4881)))))))), float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.1), (_GLF_IDENTITY(_GLF_FUZZED(-9.1), mix(float(_GLF_FUZZED(float(true))), float(_GLF_FUZZED(-9.1)), bool(true)))) / 1.0) : _GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(2055.4881))), (_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_IDENTITY(_GLF_FUZZED(2055.4881), max(_GLF_IDENTITY(_GLF_FUZZED(2055.4881), clamp(_GLF_FUZZED(2055.4881), _GLF_FUZZED(2055.4881), _GLF_FUZZED(2055.4881))), _GLF_FUZZED(2055.4881)))))) - sin(0.0)))), float(mat3x4(_GLF_IDENTITY(1.0, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.1), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-9.1), mix(float(_GLF_FUZZED(float(true))), float(_GLF_FUZZED(-9.1)), bool(true)))), mix(float(_GLF_FUZZED(-34.53)), float((_GLF_IDENTITY(_GLF_FUZZED(-9.1), mix(float(_GLF_FUZZED(float(true))), float(_GLF_FUZZED(-9.1)), bool(true))))), bool(true))) / 1.0) : _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(2055.4881))))), 0.0, _GLF_ONE(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-113.345)), bool(false))), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) / _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0))), 0.0))), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.1), (_GLF_IDENTITY(_GLF_FUZZED(-9.1), mix(float(_GLF_FUZZED(_GLF_IDENTITY(float(true), _GLF_IDENTITY(mix(float(float(true)), float(_GLF_FUZZED(-90.85)), bool(false)), (mix(float(float(true)), float(_GLF_FUZZED(-90.85)), bool(false))) + abs(0.0))))), float(_GLF_FUZZED(-9.1)), bool(true)))) / 1.0) : _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(578.345)), bool(false))), (_GLF_IDENTITY(true ? 1.0 : _GLF_FUZZED(2055.4881), _GLF_IDENTITY(float(float(true ? 1.0 : _GLF_FUZZED(2055.4881))), (float(float(true ? 1.0 : _GLF_FUZZED(2055.4881)))) + abs(0.0))))))), float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.1), (_GLF_IDENTITY(_GLF_FUZZED(-9.1), mix(float(_GLF_FUZZED(float(true))), float(_GLF_FUZZED(-9.1)), bool(true)))) / 1.0) : _GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(2055.4881))), (_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_IDENTITY(_GLF_FUZZED(2055.4881), max(_GLF_IDENTITY(_GLF_FUZZED(2055.4881), clamp(_GLF_FUZZED(2055.4881), _GLF_FUZZED(2055.4881), _GLF_FUZZED(2055.4881))), _GLF_FUZZED(2055.4881)))))) - sin(0.0)))), float(mat3x4(_GLF_IDENTITY(1.0, (false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-9.1, max(-9.1, -9.1))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-9.1), mix(float(_GLF_FUZZED(float(true))), float(_GLF_FUZZED(-9.1)), bool(true)))), mix(float(_GLF_FUZZED(-34.53)), float((_GLF_IDENTITY(_GLF_FUZZED(-9.1), mix(float(_GLF_FUZZED(float(true))), float(_GLF_FUZZED(-9.1)), bool(true))))), bool(true))) / 1.0) : _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(2055.4881))))), 0.0, _GLF_ONE(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-113.345)), bool(false))), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) / _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0))), 0.0)))) - determinant(mat4(0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0)))))) / 1.0), _GLF_struct_13(mat2x4(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) - 0.0, max((1.0) - 0.0, _GLF_IDENTITY((1.0) - 0.0, min((1.0) - 0.0, (1.0) - 0.0)))))))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 uint next_virtual_gid = GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.z + GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.y + ((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (-90652 & 0) + (_GLF_IDENTITY(1, clamp(1, 1, 1)))), (_GLF_IDENTITY(1, (-90652 & 0) + (_GLF_IDENTITY(1, clamp(1, 1, 1))))) >> _GLF_IDENTITY(0, clamp(0, 0, 0)))) % subgroup_size);
 uint read = _GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_15._f2._f3.virtual_gid], 4, 64, 2), (atomicLoad(buf[_GLF_struct_replacement_15._f2._f3.virtual_gid], 4, 64, 2)) - 0u);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.x = _GLF_IDENTITY(read, (true ? _GLF_IDENTITY(read, (_GLF_IDENTITY(read, (true ? read : _GLF_FUZZED(workgroup_base)))) >> 0u) : _GLF_FUZZED(uvec4(_GLF_IDENTITY(155283u, ~ (~ (155283u))), _GLF_IDENTITY(145395u, 0u ^ (145395u)), 164860u, 129382u).p)));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (int(-9308.8244) & 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) / 1)))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)) || false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, bool(bvec4(_injected_loop_counter != 1, false, true, false)))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, bool(bvec4(_injected_loop_counter != 1, false, true, false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED((_injected_loop_counter --)))) != 1)), false || (_GLF_IDENTITY(false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED((_injected_loop_counter --)))) != 1)), (false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED((_injected_loop_counter --)))) != 1))) && true)))); _injected_loop_counter ++)
        {
         do
          {
           do
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if((subgroup_local_id % 2) == 0)
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) - 0.0), _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) - 0.0, mix(float((injectionSwitch.x) - 0.0), float(_GLF_FUZZED(371.595)), bool(false)))), 0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, 1.0), 1.0 * (min(1.0, 1.0)))), 1.0, 0.0)), (true ? _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), 0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 0.0)), min(float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0)), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 0.0)), float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(0.0, max(0.0, 0.0))), 0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 0.0)))) : _GLF_FUZZED(-25.51)))) < injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)), ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) * 1.0) - 0.0) < injectionSwitch.y)))))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
                          barrier();
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, _GLF_IDENTITY(false, (false) && true)))))))))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                {
                                 barrier();
                                }
                               else
                                {
                                }
                              }
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                {
                                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                  {
                                   barrier();
                                  }
                                }
                              }
                             do
                              {
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))));
                            }
                          }
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                            {
                             barrier();
                            }
                          }
                         barrier();
                        }
                       for(int _injected_loop_counter = (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                      barrier();
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, 0 ^ (_GLF_IDENTITY(64, ~ (~ (64))))), 4);
                     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.5, 5.6)) : injectionSwitch)).x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.5, 5.6)) : injectionSwitch)).x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.5, 5.6)) : injectionSwitch)).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.5, 5.6)) : injectionSwitch)).x > injectionSwitch.y) || false)), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.5, 5.6)) : injectionSwitch)).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.5, 5.6)) : injectionSwitch)).x > injectionSwitch.y) || false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.5, 5.6)) : injectionSwitch)).x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.5, 5.6)) : injectionSwitch)).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.5, 5.6)) : injectionSwitch)).x > injectionSwitch.y) || false)), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.5, 5.6)) : injectionSwitch)).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.5, 5.6)) : injectionSwitch)).x > injectionSwitch.y) || false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))));
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 for(int _injected_loop_counter = (0 | 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))))))); _injected_loop_counter ++)
                  {
                   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
                  }
                 for(int _injected_loop_counter = (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_IDENTITY(true, (true) || false)))
                    barrier();
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_IDENTITY(_GLF_FUZZED(mat2(-284.017, 2.7, 404.159, 6214.6695)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mat2(-3.8, -1.6, 5.6, 895.462)) : _GLF_FUZZED(mat2(-284.017, _GLF_IDENTITY(2.7, mix(float(_GLF_IDENTITY(2.7, min(2.7, 2.7))), float(_GLF_FUZZED(3.4)), bool(false))), 404.159, 6214.6695))))))).x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(max((injectionSwitch), (injectionSwitch)), vec2(mat3x2(max((injectionSwitch), (injectionSwitch)), 1.0, 0.0, 0.0, exp(0.0))))) * mat2(1.0)).x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(max((injectionSwitch), (injectionSwitch)), vec2(mat3x2(max((injectionSwitch), (injectionSwitch)), 1.0, 0.0, 0.0, exp(0.0))))) * mat2(1.0)).x, mix(float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(max((injectionSwitch), (injectionSwitch)), vec2(mat3x2(max((injectionSwitch), (injectionSwitch)), 1.0, 0.0, 0.0, exp(0.0))))) * mat2(1.0)).x), float(_GLF_FUZZED(-506.285)), bool(false))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(max((injectionSwitch), (injectionSwitch)), vec2(mat3x2(max((injectionSwitch), (injectionSwitch)), 1.0, 0.0, 0.0, exp(0.0))))) * mat2(1.0)).x)) > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y), _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), clamp(vec3(injectionSwitch, 0.0), vec3(injectionSwitch, 0.0), vec3(injectionSwitch, 0.0)))))) * sqrt(_GLF_IDENTITY(vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)), (vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))) - sin(vec2(0.0, 0.0)))))) * mat2(1.0)).x > injectionSwitch.y)) || false, (((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), clamp(vec3(injectionSwitch, 0.0), _GLF_IDENTITY(vec3(injectionSwitch, 0.0), (vec3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-760.189), _GLF_FUZZED(-611.939)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch))), (true ? _GLF_IDENTITY(min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-760.189), _GLF_FUZZED(-611.939)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch))), (min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-760.189), _GLF_FUZZED(-611.939)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)))) / vec2(1.0, 1.0)) : _GLF_FUZZED(injectionSwitch)))), 0.0)) * vec3(1.0, 1.0, 1.0)), vec3(injectionSwitch, 0.0)))))) * sqrt(vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)), injectionSwitch.y))))) * mat2(1.0)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), vec2(mat3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), sqrt(0.0), 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), max(injectionSwitch, injectionSwitch)))), (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))) : _GLF_FUZZED(vec2(14.07, 527.595)))))).y)) || false) || false))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(5.0), _GLF_FUZZED(-24.71)), bvec2(false, false))).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_IDENTITY(_GLF_FUZZED(mat2(-284.017, 2.7, 404.159, 6214.6695)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mat2(-3.8, -1.6, 5.6, 895.462)) : _GLF_FUZZED(mat2(-284.017, _GLF_IDENTITY(2.7, mix(float(_GLF_IDENTITY(2.7, min(2.7, 2.7))), float(_GLF_FUZZED(3.4)), bool(false))), 404.159, 6214.6695))))))).x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(max((injectionSwitch), (injectionSwitch)), vec2(mat3x2(max((injectionSwitch), (injectionSwitch)), 1.0, 0.0, 0.0, exp(0.0))))) * mat2(1.0)).x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(max((injectionSwitch), (injectionSwitch)), vec2(mat3x2(max((injectionSwitch), (injectionSwitch)), 1.0, 0.0, 0.0, exp(0.0))))) * mat2(1.0)).x, mix(float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(max((injectionSwitch), (injectionSwitch)), vec2(mat3x2(max((injectionSwitch), (injectionSwitch)), 1.0, 0.0, 0.0, exp(0.0))))) * mat2(1.0)).x), float(_GLF_FUZZED(-506.285)), bool(false))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(max((injectionSwitch), (injectionSwitch)), vec2(mat3x2(max((injectionSwitch), (injectionSwitch)), 1.0, 0.0, 0.0, exp(0.0))))) * mat2(1.0)).x)) > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y), _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), clamp(vec3(injectionSwitch, 0.0), vec3(injectionSwitch, 0.0), vec3(injectionSwitch, 0.0)))))) * sqrt(_GLF_IDENTITY(vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)), (vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))) - sin(vec2(0.0, 0.0)))))) * mat2(1.0)).x > injectionSwitch.y)) || false, (((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), clamp(vec3(injectionSwitch, 0.0), _GLF_IDENTITY(vec3(injectionSwitch, 0.0), (vec3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-760.189), _GLF_FUZZED(-611.939)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch))), (true ? _GLF_IDENTITY(min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-760.189), _GLF_FUZZED(-611.939)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch))), (min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-760.189), _GLF_FUZZED(-611.939)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)))) / vec2(1.0, 1.0)) : _GLF_FUZZED(injectionSwitch)))), 0.0)) * vec3(1.0, 1.0, 1.0)), vec3(injectionSwitch, 0.0)))))) * sqrt(vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)), injectionSwitch.y))))) * mat2(1.0)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), vec2(mat3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), sqrt(0.0), 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), max(injectionSwitch, injectionSwitch)))), (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))) : _GLF_FUZZED(vec2(14.07, 527.595)))))).y)) || false) || false))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(5.0), _GLF_FUZZED(-24.71)), bvec2(false, false))).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_IDENTITY(_GLF_FUZZED(mat2(-284.017, 2.7, 404.159, 6214.6695)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mat2(-3.8, -1.6, 5.6, 895.462)) : _GLF_FUZZED(mat2(-284.017, _GLF_IDENTITY(2.7, mix(float(_GLF_IDENTITY(2.7, min(2.7, 2.7))), float(_GLF_FUZZED(3.4)), bool(false))), 404.159, 6214.6695))))))).x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(max((injectionSwitch), (injectionSwitch)), vec2(mat3x2(max((injectionSwitch), (injectionSwitch)), 1.0, 0.0, 0.0, exp(0.0))))) * mat2(1.0)).x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(max((injectionSwitch), (injectionSwitch)), vec2(mat3x2(max((injectionSwitch), (injectionSwitch)), 1.0, 0.0, 0.0, exp(0.0))))) * mat2(1.0)).x, mix(float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(max((injectionSwitch), (injectionSwitch)), vec2(mat3x2(max((injectionSwitch), (injectionSwitch)), 1.0, 0.0, 0.0, exp(0.0))))) * mat2(1.0)).x), float(_GLF_FUZZED(-506.285)), bool(false))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(max((injectionSwitch), (injectionSwitch)), vec2(mat3x2(max((injectionSwitch), (injectionSwitch)), 1.0, 0.0, 0.0, exp(0.0))))) * mat2(1.0)).x)) > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y), _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), clamp(vec3(injectionSwitch, 0.0), vec3(injectionSwitch, 0.0), vec3(injectionSwitch, 0.0)))))) * sqrt(_GLF_IDENTITY(vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)), (vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))) - sin(vec2(0.0, 0.0)))))) * mat2(1.0)).x > injectionSwitch.y)) || false, (((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), clamp(vec3(injectionSwitch, 0.0), _GLF_IDENTITY(vec3(injectionSwitch, 0.0), (vec3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-760.189), _GLF_FUZZED(-611.939)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch))), (true ? _GLF_IDENTITY(min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-760.189), _GLF_FUZZED(-611.939)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch))), (min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-760.189), _GLF_FUZZED(-611.939)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)))) / vec2(1.0, 1.0)) : _GLF_FUZZED(injectionSwitch)))), 0.0)) * vec3(1.0, 1.0, 1.0)), vec3(injectionSwitch, 0.0)))))) * sqrt(vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)), injectionSwitch.y))))) * mat2(1.0)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), vec2(mat3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), sqrt(0.0), 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), max(injectionSwitch, injectionSwitch)))), (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))) : _GLF_FUZZED(vec2(14.07, 527.595)))))).y)) || false) || false))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(5.0), _GLF_FUZZED(-24.71)), bvec2(false, false))).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false)))), true, false, true))))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                         else
                          {
                          }
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y))));
                    }
                   else
                    {
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x)) > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x)) > injectionSwitch.y), false))))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                              {
                               barrier();
                              }
                             else
                              {
                              }
                            }
                           barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           else
            {
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(32.11)), bool(false)))) - 0.0) > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-11868) : _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1))) != 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), vec2(mat3((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0))) * mat2(1.0)), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), vec2(mat3((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0)))), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0))) * mat2(1.0))) / vec2(1.0, 1.0)).y, mix(float(_GLF_FUZZED(901.189)), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(7671.7464, -3.7), (false ? _GLF_FUZZED(vec2(-3389.0770, -3.8)) : vec2(7671.7464, -3.7)))) : injectionSwitch)), vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(7671.7464, -3.7), (false ? _GLF_FUZZED(vec2(-3389.0770, -3.8)) : vec2(7671.7464, -3.7)))) : injectionSwitch, mix(vec2((false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(7671.7464, -3.7), (false ? _GLF_FUZZED(vec2(-3389.0770, -3.8)) : vec2(7671.7464, -3.7)))) : injectionSwitch)[0], _GLF_FUZZED(-310.080)), vec2(_GLF_FUZZED(1.2), (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(7671.7464, -3.7), (false ? _GLF_FUZZED(vec2(-3389.0770, -3.8)) : vec2(7671.7464, -3.7)))) : injectionSwitch)[1]), bvec2(false, true))), max(_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(7671.7464, -3.7), (false ? _GLF_FUZZED(vec2(-3389.0770, -3.8)) : vec2(7671.7464, -3.7)))) : injectionSwitch, mix(vec2((false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(7671.7464, -3.7), (false ? _GLF_FUZZED(vec2(-3389.0770, -3.8)) : vec2(7671.7464, -3.7)))) : injectionSwitch)[0], _GLF_FUZZED(-310.080)), vec2(_GLF_FUZZED(1.2), (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(7671.7464, -3.7), (false ? _GLF_FUZZED(vec2(-3389.0770, -3.8)) : vec2(7671.7464, -3.7)))) : injectionSwitch)[1]), bvec2(false, true))), min(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(7671.7464, -3.7), (false ? _GLF_FUZZED(vec2(-3389.0770, -3.8)) : vec2(7671.7464, -3.7)))) : injectionSwitch, mix(vec2((false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(7671.7464, -3.7), (false ? _GLF_FUZZED(vec2(-3389.0770, -3.8)) : vec2(7671.7464, -3.7)))) : injectionSwitch)[0], _GLF_FUZZED(-310.080)), vec2(_GLF_FUZZED(1.2), (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(7671.7464, -3.7), (false ? _GLF_FUZZED(vec2(-3389.0770, -3.8)) : vec2(7671.7464, -3.7)))) : injectionSwitch)[1]), bvec2(false, true))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(7671.7464, -3.7), (false ? _GLF_FUZZED(vec2(-3389.0770, -3.8)) : vec2(7671.7464, -3.7)))) : injectionSwitch, mix(vec2((false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(7671.7464, -3.7), (false ? _GLF_FUZZED(vec2(-3389.0770, -3.8)) : vec2(7671.7464, -3.7)))) : injectionSwitch)[0], _GLF_FUZZED(-310.080)), vec2(_GLF_FUZZED(1.2), (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(7671.7464, -3.7), (false ? _GLF_FUZZED(vec2(-3389.0770, -3.8)) : vec2(7671.7464, -3.7)))) : injectionSwitch)[1]), bvec2(false, true))))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(7671.7464, -3.7), (false ? _GLF_FUZZED(vec2(-3389.0770, -3.8)) : vec2(7671.7464, -3.7)))) : injectionSwitch, mix(vec2((false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(7671.7464, -3.7), (false ? _GLF_FUZZED(vec2(-3389.0770, -3.8)) : vec2(7671.7464, -3.7)))) : injectionSwitch)[0], _GLF_FUZZED(-310.080)), vec2(_GLF_FUZZED(1.2), (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(7671.7464, -3.7), (false ? _GLF_FUZZED(vec2(-3389.0770, -3.8)) : vec2(7671.7464, -3.7)))) : injectionSwitch)[1]), bvec2(false, true))))))), 1.0, log(1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))), (injectionSwitch) * mat2(1.0)).y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(7671.7464, -3.7), (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-3389.0770, max(-3389.0770, -3389.0770)), -3.8)) : vec2(7671.7464, -3.7)))) : injectionSwitch)), vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(7671.7464, -3.7), (false ? _GLF_FUZZED(vec2(-3389.0770, -3.8)) : vec2(7671.7464, -3.7)))) : injectionSwitch)), 1.0, log(1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))), (injectionSwitch) * mat2(1.0)).y, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(vec2(7671.7464, -3.7), (false ? _GLF_FUZZED(vec2(-3389.0770, -3.8)) : vec2(7671.7464, -3.7))), (false ? _GLF_FUZZED(vec2(147.561, -865.323)) : _GLF_IDENTITY(vec2(7671.7464, -3.7), (false ? _GLF_FUZZED(vec2(-3389.0770, -3.8)) : vec2(7671.7464, -3.7)))))) : injectionSwitch)), vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(7671.7464, -3.7), (false ? _GLF_FUZZED(vec2(-3389.0770, -3.8)) : vec2(7671.7464, -3.7)))) : injectionSwitch)), 1.0, log(1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(976.074)), float(1.0), bool(true)))))), (injectionSwitch) * mat2(1.0)).y, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(7671.7464, -3.7), (false ? _GLF_FUZZED(vec2(-3389.0770, -3.8)) : vec2(7671.7464, _GLF_IDENTITY(-3.7, (false ? _GLF_FUZZED(determinant(mat2(-932.448, -4.2, 8437.2360, 0.2))) : _GLF_IDENTITY(-3.7, (false ? _GLF_FUZZED(68.98) : -3.7)))))))) : injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(7671.7464, -3.7), (false ? _GLF_FUZZED(vec2(-3389.0770, -3.8)) : vec2(7671.7464, _GLF_IDENTITY(-3.7, (false ? _GLF_FUZZED(determinant(mat2(-932.448, -4.2, 8437.2360, 0.2))) : _GLF_IDENTITY(-3.7, (false ? _GLF_FUZZED(68.98) : -3.7)))))))) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(7671.7464, -3.7), (false ? _GLF_FUZZED(vec2(-3389.0770, -3.8)) : vec2(7671.7464, _GLF_IDENTITY(-3.7, (false ? _GLF_FUZZED(determinant(mat2(-932.448, -4.2, 8437.2360, 0.2))) : _GLF_IDENTITY(-3.7, (false ? _GLF_FUZZED(68.98) : -3.7)))))))) : injectionSwitch)))), vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(vec2(7671.7464, -3.7), mix(vec2((vec2(7671.7464, -3.7))[0], _GLF_FUZZED(vec4(-6.0, 2172.7468, 342.835, 8.0).r)), vec2(_GLF_FUZZED(-5932.3127), (vec2(7671.7464, -3.7))[1]), bvec2(false, true))), (false ? _GLF_FUZZED(vec2(-3389.0770, -3.8)) : vec2(7671.7464, -3.7)))) : injectionSwitch)), 1.0, log(1.0), _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) / 1.0)) + 0.0), injectionSwitch.y), 0.0, 1.0))), (injectionSwitch) * mat2(1.0)).y))), bool(true)))))))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
                  barrier();
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             subgroupBarrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
            {
             do
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (0 & (~ 45810)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
        barrier();
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), true && (_GLF_IDENTITY(true, (true) || false)))))
            {
             do
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(54317) : 3))), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) >> 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y))))
                    {
                     barrier();
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (true ? int(3) : _GLF_IDENTITY(_GLF_FUZZED(-49427), ~ (~ (_GLF_FUZZED(-49427)))))))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                        barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) * 1)) / 1))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) | 0)); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           atomicStore(checker[_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_15._f2._f3.virtual_gid, max(_GLF_struct_replacement_15._f2._f3.virtual_gid, _GLF_struct_replacement_15._f2._f3.virtual_gid)), min(_GLF_struct_replacement_15._f2._f3.virtual_gid, _GLF_struct_replacement_15._f2._f3.virtual_gid))], _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.x, uint(uvec2(GLF_merged3_0_1_4_1_1_13_2_1_14readsubgroup_baseworkgroup_base.x, 0u))), 4, 64, _GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, int(_GLF_IDENTITY(ivec3(4, 0, _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-51703)))))), (false ? _GLF_FUZZED(ivec3(-1067, -36873, -11294)) : ivec3(4, _GLF_IDENTITY(0, clamp(0, 0, 0)), 0))))))));
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
