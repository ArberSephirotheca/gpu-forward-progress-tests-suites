#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_16 {
 int _f0;
 bool _f1;
 uvec4 _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_17 {
 bool _f0;
 _GLF_struct_16 _f1;
} ;

struct _GLF_struct_18 {
 vec3 _f0;
 vec2 _f1;
 float _f2;
 uint read;
 uvec4 _f3;
 _GLF_struct_17 _f4;
} ;

struct _GLF_struct_13 {
 mat2 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_12 {
 uvec2 _f0;
 bvec4 _f1;
 mat4x3 _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_14 {
 _GLF_struct_12 _f0;
 bvec4 _f1;
 uint workgroup_size;
 _GLF_struct_13 _f2;
} ;

struct _GLF_struct_15 {
 _GLF_struct_14 _f0;
 mat4x3 _f1;
} ;

struct _GLF_struct_9 {
 ivec2 _f0;
 ivec2 _f1;
 ivec4 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_8 {
 int _f0;
 float _f1;
 mat4x2 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_7 {
 uvec2 _f0;
 mat4 _f1;
 mat2 _f2;
 int _f3;
 mat4 _f4;
} ;

struct _GLF_struct_10 {
 _GLF_struct_7 _f0;
 uvec4 _f1;
 _GLF_struct_8 _f2;
 uvec2 _f3;
 _GLF_struct_9 _f4;
 vec3 _f5;
 float _f6;
} ;

struct _GLF_struct_5 {
 bool _f0;
 mat3x4 _f1;
 uvec2 _f2;
 uvec4 _f3;
 mat2 _f4;
 bvec4 _f5;
 bool _f6;
} ;

struct _GLF_struct_4 {
 bvec4 _f0;
 uint _f1;
} ;

struct _GLF_struct_3 {
 ivec2 _f0;
 mat2 _f1;
 mat4 _f2;
 mat3 _f3;
 bool _f4;
 uint _f5;
} ;

struct _GLF_struct_6 {
 _GLF_struct_3 _f0;
 _GLF_struct_4 _f1;
 uint workgroup_id;
 mat3x2 _f2;
 float _f3;
 _GLF_struct_5 _f4;
 uvec3 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_1 {
 mat2x4 _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_0 {
 bvec2 _f0;
 vec4 _f1;
 ivec3 _f2;
 ivec3 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
} ;

struct _GLF_struct_11 {
 vec4 _f0;
 _GLF_struct_2 _f1;
 float _f2;
 bvec2 _f3;
 _GLF_struct_6 _f4;
 uint _f5;
 _GLF_struct_10 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(_GLF_IDENTITY(9.4, 1.0 * (9.4))), _GLF_FUZZED(27.27)), bvec2(false, false))).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch)))[0], (injectionSwitch)[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(ivec3(int(0), 0, 1))))) >> _GLF_IDENTITY(int(0), int(0)))), 1, 1))))) | (_GLF_IDENTITY(1, max(1, 1))))]), vec2(_GLF_FUZZED(9.4), _GLF_FUZZED(27.27)), bvec2(false, false))).y)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bvec2(_GLF_IDENTITY(! (! (false)), ! (! (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! ((false))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) && true))), true && (! (! (_GLF_IDENTITY(false, (false) && true)))))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) && true))), true && (! (! (_GLF_IDENTITY(false, (false) && true))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) && true))), true && (! (! (_GLF_IDENTITY(false, (false) && true)))))))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(true, ! (! (true))) && (! (false)))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(round(injectionSwitch))), ((true ? injectionSwitch : _GLF_FUZZED(round(injectionSwitch)))) - vec2(0.0, 0.0))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), (bool(bvec4(false, false, true, false))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true, ! (! (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec2((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))) && true))))) || false)))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_IDENTITY(false, (false) || false))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x3(injectionSwitch.x, 0.0, 1.0, cos(log(1.0)), 1.0, sin(0.0), 1.0, 1.0, 1.0, abs(0.0), 0.0, 0.0)), min(float(mat4x3(injectionSwitch.x, 0.0, 1.0, cos(log(1.0)), 1.0, sin(0.0), 1.0, 1.0, 1.0, abs(0.0), 0.0, 0.0)), float(mat4x3(injectionSwitch.x, 0.0, 1.0, _GLF_IDENTITY(cos(log(1.0)), (_GLF_IDENTITY(cos(log(1.0)), max(cos(log(1.0)), cos(log(1.0))))) * 1.0), 1.0, sin(0.0), 1.0, 1.0, 1.0, abs(0.0), 0.0, 0.0))))) > injectionSwitch.y)))))))), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x3(injectionSwitch.x, 0.0, 1.0, cos(log(1.0)), 1.0, sin(0.0), 1.0, 1.0, 1.0, abs(0.0), 0.0, 0.0)), min(float(mat4x3(injectionSwitch.x, 0.0, 1.0, cos(log(1.0)), 1.0, sin(0.0), 1.0, 1.0, 1.0, abs(0.0), 0.0, 0.0)), float(mat4x3(injectionSwitch.x, 0.0, 1.0, _GLF_IDENTITY(cos(log(1.0)), (_GLF_IDENTITY(cos(log(1.0)), max(cos(log(1.0)), cos(log(1.0))))) * 1.0), 1.0, sin(0.0), 1.0, 1.0, 1.0, abs(0.0), 0.0, 0.0))))) > injectionSwitch.y)))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), true && (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4253.2075)), float(injectionSwitch.x), bool(true))), injectionSwitch.x), clamp(min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4253.2075)), float(injectionSwitch.x), bool(true))), injectionSwitch.x), min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4253.2075)), float(injectionSwitch.x), bool(true))), injectionSwitch.x), min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4253.2075)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)))) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 1.0, 1.0, 0.0, 0.0, 0.0))) > injectionSwitch.y)))))), false), true), bvec3(bvec4(bvec3(bvec2(bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4253.2075)), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0))).x)) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false), true), true))))))))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), clamp(max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch), _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), clamp(max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch)))))).y)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))) || false), false), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))) || false), false), false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))) || false), false), false), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))) || false), false), false)))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))) || false), false), false), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))) || false), false), false)))))), true))))))), bool(bvec4(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))) || false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))))) || _GLF_IDENTITY(false, (false) && true)), false), false)))), true, false, true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-50.29)))) / 1.0) > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))) || false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, true))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true)))))))), (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, true && (injectionSwitch.x > injectionSwitch.y))) && true)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false)))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), ! (! (bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(true, (true) || false) && (false)), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false))))))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false)), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false)))))), (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false)))))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false)))))), ((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false))))))) && true)))) && true)))), ! (! ((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false)))))))))))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(bvec3((false), false, true)))), true && (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false))))))))), ! (! ((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false))))))))))))))), false || (! (bool(bool(_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, false))))))), true && (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (_GLF_IDENTITY(false, (false) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false))))))))), ! (! ((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bvec2(_GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bool(bool(bvec3(false, false, true))))), false)))) || (false)), true && (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false)))))))) && true))))))))))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true, false || (true)) ? injectionSwitch.y : _GLF_FUZZED(-3.8)))))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_15 _GLF_struct_replacement_15 = _GLF_struct_15(_GLF_struct_14(_GLF_struct_12(uvec2(1u), bvec4(_GLF_IDENTITY(true, bool(bvec3(true, false, false)))), mat4x3(1.0), ivec2(1)), bvec4(true), gl_WorkGroupSize.x, _GLF_struct_13(mat2(1.0), uvec4(1u))), mat4x3(1.0));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (true ? (injectionSwitch)[0] : _GLF_FUZZED(14.20))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(2.4), _GLF_FUZZED(8.5)), bvec2(false, false))))).y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * round(length(normalize(1.0))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(vec4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY(float(vec2(1.0, 0.0)), mix(float(float(vec2(1.0, 0.0))), float(_GLF_FUZZED((466.326 / -587.045))), bool(false))), min(float(vec2(1.0, 0.0)), _GLF_IDENTITY(float(vec2(1.0, 0.0)), max(float(vec2(1.0, 0.0)), float(vec2(1.0, 0.0)))))))), _GLF_struct_2(_GLF_struct_0(bvec2(_GLF_IDENTITY(true, ! (! (true)))), vec4(1.0), ivec3(1), ivec3(1), ivec3(1)), _GLF_struct_1(mat2x4(1.0), mat3x4(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(-5.5), (_GLF_FUZZED(-5.5)) / 1.0) : _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec3(1.0, sqrt(0.0), sqrt(1.0)), (vec3(1.0, sqrt(0.0), sqrt(1.0))) + vec3(0.0, 0.0, 0.0))))))))), 1.0, bvec2(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), ! (! (! ((true)))))))))), _GLF_struct_6(_GLF_struct_3(_GLF_IDENTITY(ivec2(1), ivec2(ivec3(ivec2(_GLF_IDENTITY(1, (1) - 0)), (1 & 1)))), _GLF_IDENTITY(mat2(1.0), (false ? _GLF_FUZZED(mat2(231.446, 0.5, -273.684, 249.258)) : mat2(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, min(1.0, 1.0))))))), mat4(1.0), mat3(1.0), true, 1u), _GLF_struct_4(bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(false, ! (! (false))) || (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), _GLF_IDENTITY((_GLF_IDENTITY(bool(bool(true)), ! (_GLF_IDENTITY(! (bool(bool(true))), ! (_GLF_IDENTITY(! (! (bool(bool(true)))), ! (! (! (! (bool(bool(true)))))))))))), bool(bvec3((_GLF_IDENTITY(bool(bool(true)), ! (_GLF_IDENTITY(! (bool(bool(true))), ! (_GLF_IDENTITY(! (! (bool(bool(true)))), ! (! (! (! (bool(bool(true)))))))))))), false, false))) || false)), bool(bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bvec3(bool(true), true, true), bvec3(bvec3(bvec3(bool(true), true, true))))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bool(true)), _GLF_IDENTITY(false || (bool(bool(true))), true && (false || (bool(bool(true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) || false), false || (_GLF_IDENTITY(bool(bool(true)), bool(bvec2(bool(bool(true)), false))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y)))))), true), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(bool(bool(true)), false || (bool(bool(true)))), _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))), true), true)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(true)), true && (_GLF_IDENTITY(bool(bool(true)), false || (bool(bool(true)))))), false || (bool(bool(true)))), _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(19.50) : injectionSwitch.x)))), min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(19.50) : injectionSwitch.x)))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(19.50) : injectionSwitch.x)))))) < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(true)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || (_GLF_IDENTITY(bool(bool(true)), _GLF_IDENTITY((_GLF_IDENTITY(bool(bool(true)), bool(bool(bool(bool(true)))))), false || ((_GLF_IDENTITY(bool(bool(true)), bool(bool(bool(bool(true)))))))) || false))), false || (bool(bool(true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), true, true)))), bool(bvec4(bool(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), true, true)))), false, true, false)))), false || (bool(bool(true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bool(true)), false || (bool(bool(true)))), _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false))))), ! (! (bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false))))))))), (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(bool(true)), false || (bool(bool(true)))), _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false))))), ! (! (bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false))))))))), (injectionSwitch.x < injectionSwitch.y))))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(bool(true)), false || (bool(bool(true)))), _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(bvec3(true, true, false), true)))))), bvec3(bvec3(bvec3(true, true, false))))))))), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(80.53)), bool(false))))) < injectionSwitch.y)))))))))), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bool(true)), false || (bool(bool(true)))), _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false))))), ! (! (bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false))))))))), (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(bool(true)), false || (bool(bool(true)))), _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false))))), ! (! (bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false))))))))), (injectionSwitch.x < injectionSwitch.y))))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(bool(true)), false || (bool(bool(true)))), _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(bvec3(true, true, false), true)))))), bvec3(bvec3(bvec3(true, true, false))))))))), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(80.53)), bool(false))))) < injectionSwitch.y)))))))))))), bvec2(bvec3(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bool(true)), false || (bool(bool(true)))), _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false))))), ! (! (bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false))))))))), (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(bool(true)), false || (bool(bool(true)))), _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false))))), ! (! (bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false))))))))), (injectionSwitch.x < injectionSwitch.y))))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(bool(true)), false || (bool(bool(true)))), _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(bvec3(true, true, false), true)))))), bvec3(bvec3(bvec3(true, true, false))))))))), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(80.53)), bool(false))))) < injectionSwitch.y)))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), true, true))), true), true))))))))))), true, false, false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), (_GLF_IDENTITY(bool(bool(true)), ! (_GLF_IDENTITY(! (bool(bool(true))), ! (_GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(bool(bool(true)), false || (_GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) && true)))), false || ((_GLF_IDENTITY(bool(bool(true)), false || (_GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) && true))))))), ! (! (! (! (bool(bool(true)))))))))))) || false)), bool(bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bvec3(bool(true), true, true), bvec3(bvec3(bvec3(bool(true), true, true))))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bool(true)), _GLF_IDENTITY(false || (bool(bool(true))), true && (false || (bool(bool(true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(true)), true && (_GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) && true))), (bool(bool(true))) || false), false || (_GLF_IDENTITY(bool(bool(true)), bool(bvec2(bool(bool(true)), false))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y)))))), true), bvec3(bvec4(bvec3(bvec2(_GLF_IDENTITY(bool(bool(true)), false || (bool(bool(true)))), _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))), false))))))), true), true)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(true)), true && (bool(bool(true)))), false || (bool(bool(true)))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(19.50) : injectionSwitch.x)))) < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, false || (true)))))), (_GLF_IDENTITY(bool(bool(true)), bool(bool(bool(bool(true)))))) || false))), false || (bool(bool(true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))))), false || (bool(bool(true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bool(true)), false || (bool(bool(true)))), _GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false))))), ! (! (bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false))))))))), (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(bool(true)), false || (bool(bool(true)))), _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false))))), ! (! (bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(true, true, false)), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(true, true, false))), bvec3(bvec3(bvec3(bvec3(bvec3(true, true, false))))))))))))))), (injectionSwitch.x < injectionSwitch.y))))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(bool(bool(true)), false || (bool(bool(true)))), _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, _GLF_IDENTITY(false, false || (false))), bvec3(bvec3(bvec3(true, true, false))))), ! (! (bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec3(bvec3(true, true, false))))))))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))))))))), true, true))), true), true))))))))))), true, false, false))), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), true, false))))))))), 1u), gl_WorkGroupID.x, mat3x2(_GLF_IDENTITY(1.0, 0.0 + (1.0))), 1.0, _GLF_struct_5(true, mat3x4(1.0), uvec2(1u), uvec4(1u), mat2(1.0), bvec4(true), true), uvec3(1u), mat3x2(1.0)), 1u, _GLF_struct_10(_GLF_struct_7(uvec2(1u), mat4(1.0), mat2(1.0), 1, mat4(1.0)), uvec4(1u), _GLF_struct_8(1, 1.0, mat4x2(1.0), uvec4(_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, 0u ^ (1u)))), max(1u, _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, min(1u, 1u))))))))))), uvec2(1u), _GLF_struct_9(ivec2(1), ivec2(1), ivec4(1), bvec2(true)), vec3(1.0), 1.0));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_struct_replacement_15._f0.workgroup_size * _GLF_struct_replacement_11._f4.workgroup_id;
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * subgroup_size, 0u ^ (subgroup_id * subgroup_size));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, true))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)) && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)).x) * 1.0) < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))))) && true))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false), false)), false || (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec4(_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(0.0), 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), sin(0.0), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, sqrt(0.0)))), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))) > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec4(_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(0.0), 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), sin(0.0), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, sqrt(0.0)))), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))) > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec4(_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(0.0), 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, sqrt(1.0)))), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0, 1.0, 1.0, 0.0)), sin(0.0), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, sqrt(0.0)))), 1.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y), 1.0))) > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float((vec4(-9137.1234, -997.076, -438.573, 4.0) != vec4(-8.2, -1.4, -0.2, -9050.3442)))), _GLF_FUZZED((97.85 / 508.087))), vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_FUZZED(603.360)), float((injectionSwitch)[0]), bool(true))), (injectionSwitch)[1]), bvec2(true, true))).y)))) && true), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))) || false)) && true), false)), _GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (_GLF_IDENTITY(false, false || (false)))) || (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-79.69)), float(injectionSwitch.x), bool(true)))) - 0.0) > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, false), false)), bvec2(bvec2(bvec2(bvec3(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, false), false))))))))))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)))))) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))), false))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-3248.3489)), bool(false)))) * 1.0)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), bool(bvec4(bool(_GLF_IDENTITY(false, ! (! (false)))), false, true, true)))))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, (workgroup_base) / (1u & 1u)) + subgroup_base + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u), (true ? _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u) : _GLF_FUZZED(subgroup_local_id)))) % _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))));
 _GLF_struct_18 _GLF_struct_replacement_18 = _GLF_struct_18(vec3(1.0), vec2(1.0), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, (1.0) / 1.0))), atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u), (_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u)) >> 0u)) << (uint(_GLF_ZERO(0.0, injectionSwitch.x)) & 25179u))], 4, 64, _GLF_IDENTITY(2, (_GLF_IDENTITY(2, int(_GLF_IDENTITY(ivec3(2, 1, 0), min(ivec3(2, 1, _GLF_IDENTITY(0, min(0, 0))), ivec3(2, 1, 0)))))) >> 0)), uvec4(1u), _GLF_struct_17(true, _GLF_struct_16(1, true, uvec4(1u), ivec2(1))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true))) && (_GLF_DEAD(false)))))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true) && (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if((subgroup_local_id % _GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, 0 ^ (2)), _GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) + 0)) | (2)), _GLF_IDENTITY(int(int(2)), clamp(int(int(2)), int(int(2)), int(int(2))))), 2))) == 0)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))))), ! (! (! (! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))))))))))))) || false)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid))), (next_virtual_gid) >> _GLF_IDENTITY(0u, (_GLF_IDENTITY(true ? 0u : _GLF_FUZZED(((++ subgroup_id) % num_workgroup)), ~ (~ (_GLF_IDENTITY(true ? 0u : _GLF_FUZZED(((++ subgroup_id) % num_workgroup)), 1u * (true ? 0u : _GLF_FUZZED(((++ subgroup_id) % num_workgroup))))))))))], uint(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1), max(_GLF_IDENTITY((1), max((1), (1))), (1))), (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(-85604) : _GLF_IDENTITY(_GLF_IDENTITY((1), max(_GLF_IDENTITY((1), max((1), (1))), (1))), clamp(_GLF_IDENTITY((1), max(_GLF_IDENTITY((1), max((1), (1))), (1))), _GLF_IDENTITY((1), max(_GLF_IDENTITY((1), max((1), (1))), (1))), _GLF_IDENTITY(_GLF_IDENTITY((1), max(_GLF_IDENTITY((1), max((1), (1))), (1))), ~ (~ (_GLF_IDENTITY((1), max(_GLF_IDENTITY((1), max((1), (1))), (1)))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, int(ivec3(1, 0, 1))), 1, 1)), (1) << 0)))), 4, 64, _GLF_IDENTITY(4, int(int(4))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(clamp(next_virtual_gid, next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) * 1u)), (clamp(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), (injectionSwitch) - log(vec2(1.0, 1.0))).y)) ? _GLF_FUZZED(subgroup_base) : next_virtual_gid)), _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) * 1u))) | 0u))], uint(1), 4, 64, 4);
  }
 subgroupBarrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_IDENTITY(true, false || (true))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 atomicStore(checker[virtual_gid], _GLF_struct_replacement_18.read, 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! _GLF_IDENTITY((_GLF_DEAD(false)), bool(bvec4((_GLF_DEAD(false)), false, true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))))))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
